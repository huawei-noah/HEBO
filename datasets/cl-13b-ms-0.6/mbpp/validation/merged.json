{"id":514,"question":"def sum_elements(test_tup):\r\n    \"\"\"Write a function to find the summation of tuple elements in the given tuple list.\"\"\"","answers":[{"text":"\r\n    # return sum(test_tup)\r\n\r\n    # Alternative Solution:\r\n    # return sum(test_tup)\r\n\r\n    # Alternative Solution 2:\r\n    # summation = 0\r\n    # for i in test_tup:\r\n    #     summation += i\r\n    # return summation\r\n\r\n    # Alternative Solution 3:\r\n    # summation = sum(test_tup)\r\n    # return summation\r\n\r\n    # Alternative Solution 4:\r\n    # summation = 0\r\n    # for i in test_tup:\r\n    #     summation = summation + i\r\n    # return summation\r\n\r\n    return sum(test_tup)\r\n\r\n\r","votes":61500.128},{"text":"\r\n    sum = 0\r\n    for item in test_tup:\r\n        sum += item\r\n    return sum\r\n\r\n\r","votes":67713.728},{"text":"\r\n    return sum(test_tup)\r\n\r\n\r","votes":68820.084},{"text":"\r\n    # Your code goes here\r\n    if not test_tup:\r\n        return 0\r\n    else:\r\n        return sum(test_tup)\r\n\r\n\r","votes":73923.04},{"text":"\r\n    x = 0\r\n    for i in test_tup:\r\n        x += i\r\n    return x\r\n\r\n\r","votes":77453.092},{"text":"\r\n\r\n    # write your code here\r\n    return sum(test_tup)\r\n\r\n\r\n#","votes":81966.984},{"text":"\r\n    return sum(test_tup)\r\n\r\n\r\nprint(sum_elements((1, 2, 3, 4, 5, 6)))\r\n\r\n\r","votes":86634.908},{"text":"\r\n    # your code goes here\r\n    return sum(test_tup)\r\n\r\n#-------------------------------------------------------------------------------\r\n\r","votes":87888.564},{"text":"\r\n    sum = 0\r\n    for num in test_tup:\r\n        sum += num\r\n    return sum\r\n\r\n\r","votes":88251.356},{"text":"\r\n    sum_val = 0\r\n\r\n    for i in range(len(test_tup)):\r\n        sum_val += test_tup[i]\r\n\r\n    return sum_val\r\n\r\n\r","votes":89157.52},{"text":"\r\n    total = 0\r\n    for value in test_tup:\r\n        total += value\r\n    return total\r\n\r","votes":90102.82},{"text":"\r\n    l_sum = 0\r\n    for j in test_tup:\r\n        l_sum += j\r\n    return l_sum\r\n\r\n\r","votes":91141.408},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r","votes":91780.792},{"text":"\r\n    sum_el = 0\r\n    for i in test_tup:\r\n        sum_el = sum_el + i\r\n    return sum_el\r\n\r\n\r","votes":92672.404},{"text":"\r\n\r\n    # Your code here\r\n    lst = list(test_tup)\r\n    return sum(lst)\r\n\r\n\r\ntest_tup = (1, 2, 3, 4, 5, 6)\r\nprint(sum_elements(test_tup))\r\n\r\n# Expected output:\r\n# 21\r\n\r\n# Testing:\r\n# >>> sum_elements((1, 2, 3, 4, 5, 6))\r\n# 21\r\n# >>> sum_elements((3, 4, 5, 6, 7, 8))\r\n# 30\r\n# >>> sum_elements((1, 2))\r\n# 3\r\n# >>> sum_elements((1, 2, 3, 4))\r\n# 10\r\n# >>> sum_elements((1, 1, 1, 1, 1, 1, 1))\r\n# 7\r\n# >>> sum_elements((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\r\n# 37\r\n# >>> sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\r\n# 55\r\n# >>> sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\r\n# 210\r\n# >>> sum_elements((1, 2, 3, 4, 5, 6, 7, ","votes":93493.224},{"text":"\r\n    # Write your code here\r\n    res = 0\r\n    for x in test_tup:\r\n        res += x\r\n    return res\r\n\r","votes":94162.292},{"text":"\r\n    return sum(test_tup)\r\n\r","votes":94413.66},{"text":"\r\n    if not test_tup:\r\n        return 0\r\n    else:\r\n        return sum(test_tup)\r\n\r\n\r","votes":94917.02},{"text":"\r\n    return sum(test_tup)\r\n\r\n\r\nprint(sum_elements((2, 4, 6, 8, 10)))\r\nprint(sum_elements((2, 4, 6, 8, 10, 12)))\r\n\r\n\r","votes":97991.268},{"text":"\r\n    sum_of_tuple = 0\r\n    for element in test_tup:\r\n        sum_of_tuple += element\r\n    return sum_of_tuple\r\n\r\n\r","votes":99492.908},{"text":"\r\n    sum_ = 0\r\n    for i in range(len(test_tup)):\r\n        sum_ += test_tup[i]\r\n\r\n    return sum_\r\n\r\n\r","votes":99698.124},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n\r\n    return sum\r\n\r\ntest_tup = (1,5,3,5,8,6,9)\r\nprint(sum_elements(test_tup))\r\n\r\n# output: 41\r\n#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":100405.78},{"text":"\r\n    summation = 0\r\n    for i in test_tup:\r\n        summation += i\r\n    return summation\r\n\r\n\r","votes":101750.24},{"text":"\r\n    if test_tup == ():\r\n        return 0\r\n    else:\r\n        return test_tup[0] + sum_elements(test_tup[1:])\r\n\r\nprint(sum_elements((3, 5, 7, 2)))\r\nprint(sum_elements((1, 3, 5)))\r\nprint(sum_elements((6, 4, 2)))\r\nprint(sum_elements(tuple()))\r\n\r\n\r\n# 3. Write a Python function that takes a list of integers and returns a tuple containing two lists; the first list\r\n# contains all even numbers and the second list contains all odd numbers.\r","votes":102000.552},{"text":"\r\n    sum_val = 0\r\n    for i in test_tup:\r\n        sum_val += i\r\n    return sum_val\r\n\r\n\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\r\n\r\n\r","votes":107309.68},{"text":"\r\n    # Write your code here\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum = sum + i\r\n    return sum\r\n\r\n\r","votes":108003.948},{"text":"\r\n    tup_sum = 0\r\n    for i in test_tup:\r\n        tup_sum += i\r\n    return tup_sum\r\n\r\n\r\ntup_list = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\nprint(f\"The sum of the tuple elements is: {sum_elements(tup_list)}\")\r\n\r\n\r","votes":108300.756},{"text":"\r\n    sum = 0\r\n    # TODO: Write your logic here\r\n    for i in test_tup:\r\n        sum = sum + i\r\n    return sum\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    test_tup = tuple(map(int, input().rstrip().split()))\r\n\r\n    result = sum_elements(test_tup)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# ------------------------------------------------------------------------------------------------\r\n#","votes":109240.256},{"text":"\r\n    # print(type(test_tup))\r\n    # print(list(test_tup))\r\n    # print(test_tup)\r\n    # print(sum(test_tup))\r\n    return sum(test_tup)\r\n\r\n\r\n# print(sum_elements((4, 5, 6)))\r\n# print(sum_elements((1, 2, 3)))\r\n# print(sum_elements((3, 5, 10)))\r\n\r\n\r","votes":111204.648},{"text":"\r\n    sum_num = 0\r\n    for num in test_tup:\r\n        sum_num += num\r\n    return sum_num\r\n\r\n\r","votes":111230.612},{"text":"\r\n    total = 0\r\n    for i in range(len(test_tup)):\r\n        total = total + test_tup[i]\r\n    return total\r\n\r\n\r","votes":112556.228},{"text":"\r\n    summation = 0\r\n    for x in test_tup:\r\n        summation += x\r\n    return summation\r\n\r\n\r","votes":113868.7},{"text":"\r\n    sum_of_tuple = 0\r\n    for i in test_tup:\r\n        sum_of_tuple += i\r\n    return sum_of_tuple\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, )\r\n    print(sum_elements(test_tup))\r\n\r\n\r\n# Output:\r\n# 55\r\n\r\n# Example 2:\r","votes":115687.08},{"text":"\r\n    sum_of_elements = 0\r\n    for num in test_tup:\r\n        sum_of_elements += num\r\n    return sum_of_elements\r\n\r\n\r","votes":116253.608},{"text":"\r\n    \r\n    # 1. Using list comprehension\r\n    # summation = sum([i for i in test_tup])\r\n\r\n    # 2. Using for loop\r\n    summation = 0\r\n    for i in test_tup:\r\n        summation += i\r\n\r\n    return summation\r\n\r\n\r","votes":117457.268},{"text":"\r\n    \r\n    summation = 0\r\n    for i in test_tup:\r\n        summation = summation + i\r\n\r\n    return summation\r\n\r\n# Test Cases\r","votes":118122.188},{"text":"\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum += test_tup[i]\r\n    return sum\r\n\r\n\r","votes":118395.144},{"text":"\r\n    # Write your code here\r\n    sum_all = 0\r\n    for item in test_tup:\r\n        sum_all += item\r\n    return sum_all\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_tup = (2, 3, 6, 7, 8, 10, 11, 12, 15, 16, 20, 23, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39)\r\n    print(sum_elements(test_tup))\r\n\r\n\r\n# Code:\r","votes":121275.724},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum = sum + i\r\n    return sum\r\n\r\n\r","votes":123135.952},{"text":"\r\n    \r\n    result = 0\r\n    for i in range(len(test_tup)):\r\n        result += test_tup[i]\r\n    return result\r\n\r\n\r","votes":123862.596},{"text":"\r\n    sum = 0\r\n    for element in test_tup:\r\n        sum += element\r\n    return sum\r\n\r\n\r","votes":124298.02},{"text":"\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum += test_tup[i]\r\n    return sum\r\n\r\n\r\n#","votes":125131.276},{"text":"\r\n    sum_tuple = 0\r\n    for i in test_tup:\r\n        sum_tuple += i\r\n    return sum_tuple\r\n\r\n\r","votes":125244.416},{"text":"\r\n    sum_list = sum(test_tup)\r\n    return sum_list\r\n\r\n\r","votes":125592.9},{"text":"\r\n\r\n    # Write your code here\r\n    sum_list = 0\r\n    for i in test_tup:\r\n        sum_list += i\r\n    return sum_list\r\n\r\n\r\n# Main function\r\nif __name__ == \"__main__\":\r\n    test_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    print(sum_elements(test_tup))\r\n\r\n# Output:\r\n# 55\r\n\r\n\r\n# Example 2:\r\n# Example 2:\r\n# Input:\r\n# test_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\r\n# Output:\r\n# 210\r\n# Explanation:\r\n# Sum of all elements of the tuple = 210\r\n\r\n# Solution:\r","votes":132421.96},{"text":"\r\n    # Write your code here\r\n    return sum(test_tup)\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    print(sum_elements(test_tup))\r\n\r\n\r\n# Output:\r\n# 55\r\n\r\n# Example 2:\r\n# Input:\r\n# test_tup = (5, 10, 15, 20, 25, 30, 35, 40, 45, 50)\r\n# Output:\r\n# 225\r\n\r\n# Example 3:\r\n# Input:\r\n# test_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\r\n# Output:\r\n# 210\r\n\r\n# Example 4:\r\n# Input:\r\n# test_tup = (1, 2, 5, 10, 20, 50, 100)\r\n# Output:\r\n# 175\r\n\r\n'''\r\n\r\n''' \r","votes":135559.744},{"text":"\r\n    total = 0\r\n    for i in test_tup:\r\n        total += i\r\n    return total\r\n\r\n\r","votes":136818.336},{"text":"\r\n    sum_of_elements = 0\r\n    for i in test_tup:\r\n        sum_of_elements += i\r\n    return sum_of_elements\r\n\r\n\r\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\nprint(sum_elements(test_tup))\r\n\r\n\r","votes":138208.964},{"text":"\r\n    \r\n    sum_of_elements = 0\r\n    for element in test_tup:\r\n        sum_of_elements += element\r\n    return sum_of_elements\r\n\r\nif __name__ == '__main__':\r\n    test_tup = (1, 2, 3, 4, 5)\r\n    print(sum_elements(test_tup))\r\n\r\n\r\n# -----------------------------------------------------------------------------------------------------------------------\r\n# Exercise 04: Write a function that takes a tuple and returns the first element from the tuple\r\n\r","votes":141844.732},{"text":"\r\n\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum = sum + test_tup[i]\r\n    return sum\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup = (2, 3, 5, 1, 6)\r\n    print(\"Sum of tuple elements =\", sum_elements(test_tup))\r\n\r\n\r\n# Output:\r\n# Sum of tuple elements = 18\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Using sum() function\r","votes":148780.208},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\nprint(sum_elements(test_tup))\r\n\r\n\r","votes":149251.336},{"text":"\r\n    #print(\"Enter elements seperated by comma\")\r\n    #ele = input()\r\n    #ele = ele.split(\",\")\r\n    #print(\"Enter the tuple list elements seperated by comma\")\r\n    #tup = input()\r\n    #tup = tup.split(\",\")\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum = sum + int(test_tup[i])\r\n    return sum\r\n\r\n\r","votes":151461.916},{"text":"\r\n    return sum(test_tup)\r\n\r\n\r\n# Test Code\r\ntest_tup = (1, 2, 3, 4, 5, 6)\r\nprint(sum_elements(test_tup))\r\n\r\n\r\n# Test Code\r\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\nprint(sum_elements(test_tup))\r\n\r\n\r\n# Test Code\r\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\r\nprint(sum_elements(test_tup))\r\n\r\n\r\n# Test Code\r\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\r\nprint(sum_elements(test_tup))\r\n\r\n\r\n# Test Code\r\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\r\nprint(sum_elements(test_tup))\r\n\r\n\r\n# Test Code\r\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)\r\nprint(sum_elements(test_tup))\r\n\r","votes":152739.496},{"text":"\r\n    \r\n    # Initializing the sum variable\r\n    sum = 0\r\n    \r\n    # Iterating over the test tuple\r\n    for i in test_tup:\r\n        sum += i\r\n    \r\n    # Returning the sum\r\n    return sum\r\n\r\n# Driver code\r\nif __name__ == \"__main__\":\r\n    \r\n    test_tup = (2, 3, 4, 5, 6)\r\n    \r\n    # Function call\r\n    print(\"Sum of tuple elements:\", sum_elements(test_tup))\r\n\r\n\r\n\"\"\"\r\nSample Input\/Output:\r\n\r\n    Sum of tuple elements: 20\r\n\r\nTime Complexity: O(n) where n is the number of elements in the tuple\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nApproach 2:\r\n------------\r\nThe above approach can be further improved by using the built-in sum() function.\r\n\"\"\"\r\n\r","votes":162572.74},{"text":"\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum = sum + test_tup[i]\r\n    return sum\r\n\r\n\r","votes":165966.668},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    my_tuple = (1, 2, 3, 4, 5)\r\n    print(sum_elements(my_tuple))\r\n\r\n\r\n# Output:\r\n# 15\r\n\r\n# Example 2:\r\n# Input:\r\n# Enter the first number:\r\n# 2\r\n# Enter the second number:\r\n# 3\r\n# Enter the third number:\r\n# 4\r\n# Enter the fourth number:\r\n# 5\r\n# Enter the fifth number:\r\n# 6\r\n# Enter the sixth number:\r\n# 7\r\n# Enter the seventh number:\r\n# 8\r\n# Enter the eighth number:\r\n# 9\r\n# Enter the ninth number:\r\n# 10\r\n# Output:\r\n# 55\r\n\r\n# Example 3:\r\n# Input:\r\n# Enter the first number:\r\n# 1\r\n# Enter the second number:\r\n# 1\r\n# Enter the third number:\r\n# 1\r\n# Enter the fourth number:\r\n# 1\r\n# Enter the fifth number:\r\n# 1\r\n# Enter the sixth number:\r\n# 1\r\n# Enter the seventh number:\r\n# 1\r\n# Enter the eighth number:\r\n# 1\r\n# Enter the ninth number:\r\n# 1\r\n# Output:\r\n# 9\r\n\r\n# Example 4:\r\n# Input:\r\n# Enter the first number:\r\n# 1\r\n# Enter the second number:\r\n# 9\r\n# Enter the third number:\r\n# 1\r\n# Enter the fourth number:\r\n# 5\r\n# Enter the fifth number:\r\n# 6\r\n# Enter the sixth number:\r\n# 7\r\n","votes":171763.972},{"text":"\r\n    total = 0\r\n    for i in test_tup:\r\n        total += i\r\n    return total\r\n\r\n\r\nprint(sum_elements((1, 2, 3)))\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\nprint(sum_elements((10, 20, 30, 40, 50)))\r\nprint(sum_elements((10, 20, 30, 40, 50, 60, 70, 80, 90, 100)))\r\nprint(sum_elements((10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1000, 10000)))\r\n\r\n\r","votes":176581.212},{"text":"\r\n    total = 0\r\n    for element in test_tup:\r\n        total = total + element\r\n    return total\r\n\r\n\r\ntest_tup = (1, 2, 3)\r\nprint(sum_elements(test_tup))\r\n\r\n\r","votes":177624.972},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\n\r","votes":192237.94},{"text":"\r\n    result = 0\r\n    for i in test_tup:\r\n        result = result + i\r\n    return result\r\n\r\ntest_tup = (1, 2, 3, 4, 5)\r\nprint(sum_elements(test_tup))\r\n\r\n\r\n\r","votes":207355.888},{"text":"\r\n    sum_of_elements = 0\r\n    for element in test_tup:\r\n        sum_of_elements += element\r\n\r\n    return sum_of_elements\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_tup = (2, 4, 5, 1, 7, 8, 3, 9, 10, 20)\r\n    print(sum_elements(test_tup))\r\n\r\n\r\n#","votes":236367.052},{"text":"\r\n\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum += test_tup[i]\r\n        \r\n    return sum\r\n\r\n\r\n# test case\r\nprint(sum_elements((1, 2, 3, 4, 5))) # 15\r\nprint(sum_elements((1, 2, 3, 4, 5, 6))) # 21\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7))) # 28\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8))) # 36\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9))) # 45\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))) # 55\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))) # 66\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))) # 78\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))) # 91\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))) # 105\r\nprint(sum_elements((1, 2, ","votes":null},{"text":"\r\n    sum_of_ele = 0\r\n    for i in test_tup:\r\n        sum_of_ele += i\r\n    return sum_of_ele\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    print(sum_elements(test_tup))\r\n\r\n\r\n\"\"\"\r\nPlease note that the input","votes":null},{"text":"\r\n    list_elements = []\r\n    for x in test_tup:\r\n        list_elements.append(x[0])\r\n    total = 0\r\n    for x in list_elements:\r\n        total += x\r\n    return total\r\n\r\n\r\n#test\r\n\r\n\r\ntest_tuple = [(1, '","votes":null},{"text":"\r\n    # WRITE YOUR CODE HERE\r\n    \r\n    \r\n    # WRITE YOUR CODE HERE\r\n    return sum_list(test_tup)\r\n\r\n\r\n# Test Cases\r\nprint(sum_elements((1, 2, 3, 4)))\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8)))\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\r\n\r\n\r\n# Problem 5:\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(len(test","votes":null},{"text":"\r\n    sum_ = 0\r\n    for i in test_tup:\r\n        sum_ += i\r\n    print(sum_)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a list of the sum of the tuple elements\r\n    sum_list = [sum(tup) for tup in test_tup]\r\n\r\n    return sum_list\r\n\r\n# This section will test the sum_elements function with \r\n# print statements and the assert command.  \r\n\r\ntest_tup = ((1,2), (3,4), (5,6), (7,8))\r\n\r\n# This should print: [3, 7, 11, 15]\r\nprint(sum_elements(test_tup))\r\n\r\n# This should print: True\r\nprint(sum_elements(test_tup) == [3, 7, 11, 15])\r\n\r\n# This should print: True\r\nprint(assert sum_elements(test_tup) == [3, 7, 11, 15])\r\n\r\n\r","votes":null},{"text":"\r\n    sum_of_elements = 0\r\n    for tup in test_tup:\r\n        for element in tup:\r\n            sum_of_elements = sum_of_elements + element\r\n    return sum_of_elements\r\n\r\n# tup = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\r\n# print(sum_elements(tup))\r\n\r\n#","votes":null},{"text":"\r\n    sum_list = []\r\n    for i in test_tup:\r\n        sum_list.append(sum(i))\r\n    return sum_list\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    print(\"Summation of elements in tuple: \", end = \"\")\r\n    for i in test_tup:\r\n        print(i, end = \" \")\r\n    print(\"\\nSummation of elements is:\", end = \" \")\r\n    result = 0\r\n    for i in test_tup:\r\n        result += i\r\n    print(result)\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum+=i\r\n    return sum\r\n\r\n\r\nprint(sum_elements((12, 34, 56)))\r\nprint(sum_elements((1, 2, 3)))\r\nprint(sum_elements((1, 1)))\r\nprint(sum_","votes":null},{"text":"\r\n    sum_of_tuple = 0\r\n    for tuple_element in test_tup:\r\n        sum_of_tuple += tuple_element","votes":null},{"text":"\r\n    sum_of_elements = 0\r\n    for tuple_ in test_tup:\r\n        for element in tuple_:\r\n            sum_of_elements += element\r\n    return sum_of_elements\r\n\r\ntest_tup = [(1,2,3), (4,5,6), (7,8,9)]\r\nprint(sum_elements(test_tup))\r\n\r\n\r","votes":null},{"text":"\r\n    sum_ = 0\r\n    for i in test_tup:\r\n        sum_ += test_tup[i-1]\r\n    return sum_\r\n\r","votes":null},{"text":"\r\n\r\n    # initializing the result variable\r\n    result = 0\r\n\r\n    # iterating over the given tuple list\r\n    for t in test_tup:\r\n        result += t[0] + t[1]\r\n\r\n    # returning the result\r\n    return result\r\n\r\n\r\n# main function\r\nif __name__ == '__main__':\r\n\r\n    # test tuple list\r\n    test_tup = [(1, 2), (3, 4), (5, 6)]\r\n\r\n    # calling the 'sum_elements' function\r\n    # and printing the result\r\n    print(sum_elements(test_tup))\r\n","votes":null},{"text":"\r\n    sum_list = []\r\n    for i in range(len(test_tup)):\r\n        sum_list.append(sum(test_tup[i]))\r\n    return sum_list\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum = sum + test_tup[i]\r\n    return sum\r\n\r\n\r\n# End of helper function\r\n\r\n# Read from input\r\n# Note: single line containing space separated elements\r\nline = input()\r\n\r\n# Convert to list\r\nlist_of_integers = list(map(int, line.split()))\r\n\r\n# Pass this to function\r\nresult = sum_elements(list_of_integers)\r\n\r\n# Print the result\r\nprint(result)\r\n\r\n\r\n\r\n# Sample Input 1:\r\n# 5 2 3 4 1\r\n\r\n# Sample Output 1:\r\n# 14\r\n\r\n# Explanation 1:\r\n# The sum of the elements is 5+2+3+4+1 = 14\r\n\r\n# Sample Input 2:\r\n# 3 2 4 1\r\n\r\n# Sample Output 2:\r\n# 8\r\n\r\n# Explanation 2:\r\n# The sum of the elements is 3+2+4+1 = 8\r\n\r\n\r\n# Sample Input 3:\r\n# 2 3 4 5 10\r\n\r\n# Sample Output 3:\r\n# 25\r\n\r\n# Explanation 3:\r\n# The sum of the elements is 2+3+4+5+10 = 25\r\n\r\n\r\n# Sample Input 4:\r\n# 1 2 3 4 5\r\n\r\n# Sample Output 4:\r\n# 15\r\n\r\n# Explanation 4:\r\n# The sum of the elements is 1+2+3+4+5 = 15\r\n\r\n\r\n# Sample Input 5:\r\n# 1 2 3 4 5 6 7 8 9 1","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        for j in range(len(test_tup[i])):\r\n            sum += test_tup[i][j]\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    num = 0\r\n    for num in test_tup:\r\n        return num\r\n\r\n\r","votes":null},{"text":"\r\n    #your code here\r\n    if test_tup == ():\r\n        return 0\r\n    else:\r\n        return sum(test_tup) + sum_elements(test_tup[1:])\r\n\r","votes":null},{"text":"\r\n    # Code goes here\r\n    \r\n    # sum_elements([ (1,2,3,4) ])\r\n\r\n    return sum(test_tup[0])\r\nprint(sum_elements([ (1,2,3,4) ]))\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create an empty list\r\n    #list_sum = []\r\n    \r\n    # Iterate over the tuple\r\n    #for i in test_tup:\r\n        # Append the summed elements in the list\r\n        #list_sum.append(sum(i))\r\n    \r\n    # Return the list\r\n    #return list_sum\r\n    \r\n    # Using List Comprehension\r\n    return [sum(i) for i in test_tup]\r\n    \r\n    \r\n    \r\n\r\n\r\n\"\"\"\r\nTuples are immutable, which means that we cannot change the elements of the tuple once it has been created.\r\n\r\nThere are two ways in which we can create a tuple:\r\n\r\ntuple1 = (1, 2, 3)\r\ntuple2 = tuple([1, 2, 3])\r\n\"\"\"\r\n\r\n# Create a tuple\r\ntest_tup = ((1, 2, 3), (1, 2), (1, 2, 3, 4, 5))\r\n\r\n# Call the function\r\nanswer = sum_elements(test_tup)\r\n\r\n# Print the answer\r\nprint(answer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null}],"time":{"count":61.0,"avg":118705.9021639344,"std":34681.8760810004,"cov":0.2921663999}}
{"id":515,"question":"def modular_sum(arr, n, m):\r\n    \"\"\"Write a function to check if there is a subset with sum divisible by m.\"\"\"","answers":[{"text":"\r\n    sum = 0\r\n    for i in range(n):\r\n        sum += arr[i]\r\n    if sum % m == 0:\r\n        return True\r\n    for i in range(1, n):\r\n        sum = sum - arr[i - 1] + arr[n - 1]\r\n        if sum % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r","votes":107485.44},{"text":"\r\n    \r\n    arr.sort()\r\n    \r\n    sum = 0\r\n    for i in range(len(arr)):\r\n        sum = (sum + arr[i]) % m\r\n    \r\n    if sum == 0:\r\n        return True\r\n    \r\n    for i in range(1, len(arr)):\r\n        sum = (sum + m - arr[i - 1]) % m\r\n        \r\n        if sum == 0:\r\n            return True\r\n        \r\n    return False\r\n\r\n# ------------------------------------------------------------------------------\r\n\r\n# print(modular_sum([1,2,3,4,5], 3, 2))\r\n# print(modular_sum([1,2,3,4,5], 3, 3))\r\n# print(modular_sum([1,2,3,4,5], 3, 6))\r\n# print(modular_sum([1,2,3,4,5], 6, 6))\r\n# print(modular_sum([1,2,3,4,5], 11, 3))\r\n\r\n# ------------------------------------------------------------------------------\r\n\r\n#","votes":114941.248},{"text":"\r\n    ans = 0\r\n    for i in range(len(arr)):\r\n        ans += arr[i]\r\n    ans %= m\r\n    if ans == 0:\r\n        return True\r\n\r\n    for i in range(1, len(arr)):\r\n        curr = arr[i]\r\n        sum_so_far = 0\r\n        for j in range(i + 1, len(arr)):\r\n            sum_so_far += arr[j]\r\n            sum_so_far %= m\r\n            if i == j:\r\n                continue\r\n            if sum_so_far % m == curr % m:\r\n                return True\r\n    return False\r\n\r\n\r","votes":128158.412},{"text":"\r\n    # code here\r\n    arr = set(arr)\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        sum = (sum + i) % m\r\n    ans = []\r\n    for i in range(1, n + 1):\r\n        sum = (sum - i + m) % m\r\n        if sum in arr:\r\n            ans.append(i)\r\n            ans.append(sum)\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = set(map(int, input().strip().split()))\r\n\r\n    m = int(input())\r\n    if modular_sum(arr, n, m):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\r\n\r\n# Example Input\r\n# 3\r\n# 1 2 3\r\n# 5\r\n# Example Output\r\n# YES\r\n# Explanation\r\n# The sum of {1, 2, 3} is 6. 6 is divisible by 5.\r\n\r\n# Example Input\r\n# 3\r\n# 1 4 8\r\n# 7\r\n# Example Output\r\n# YES\r\n# Explanation\r\n# The sum of {1, 4} is 5. 5 is divisible by 7.\r\n\r\n# Example Input\r\n# 4\r\n# 1 2 3 4\r\n# 5\r\n# Example Output\r\n# NO\r\n# Explanation\r\n# It is not possible to find a subset with the given conditions.\r\n\r\n# Example Input\r\n# 3\r\n# 1 2 3\r\n# 6\r\n# Example Output\r\n# YES\r\n# Explanation\r\n# The sum of {1, 2} is 3. 3 is divisible by 6.\r\n\r\n# Example Input\r\n# 3\r\n","votes":140271.596},{"text":"\r\n    # Write your code here\r\n    sums = [0] * (n+1)\r\n    for i in range(n):\r\n        sums[i+1] = sums[i] + arr[i]\r\n    \r\n    for i in range(n):\r\n        for j in range(i+1, n+1):\r\n            if (sums[j] - sums[i]) % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    m = int(input())\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    fptr.write(str(int(result)) + \"\\n\")\r\n\r\n    fptr.close()\r\n\r\n\r","votes":154850.836},{"text":"\r\n    # Write your code here\r\n    sum = 0\r\n    mod = [0] * n\r\n    for i in range(n):\r\n        sum = (sum + arr[i]) % m\r\n        mod[i] = sum\r\n    for i in range(n):\r\n        if mod[i] == 0:\r\n            return True\r\n        for j in range(i + 1, n):\r\n            if (mod[j] - mod[i]) % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    m = int(input())\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    fptr.write('1' if result else '0')\r\n    fptr.write('\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# Input\r\n\r\n# 10 1\r\n# 10 2 9 3 10 12 4 5 7 11\r\n# 3\r\n\r\n# Output\r\n\r\n# 1\r\n\r\n\r\n# Input\r\n\r\n# 10 2\r\n# 1 1 2 3 4 5 6 7 8 9\r\n# 3\r\n\r\n# Output\r\n\r\n# 0\r\n\r\n\r\n# Input\r\n\r\n# 10 3\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# 3\r\n\r\n# Output\r\n\r\n# 1\r\n\r\n\r\n# Input\r\n\r\n# 10 3\r\n# 1 2 3 4 5 ","votes":160308.84},{"text":"\r\n    # Write your code here\r\n    if len(arr) == 0:\r\n        return False\r\n    dp = [0] * (n+1)\r\n    for i in range(1, n+1):\r\n        dp[i] = dp[i-1] + arr[i-1]\r\n    print(dp)\r\n    for i in range(0, n+1):\r\n        for j in range(i+1, n+1):\r\n            if (dp[j] - dp[i]) % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    first_multiple_input = input().rstrip().split()\r\n\r\n    n = int(first_multiple_input[0])\r\n\r\n    m = int(first_multiple_input[1])\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    fptr.write(str(int(result)) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n#","votes":177262.94},{"text":"\r\n    s = sum(arr)\r\n    if s % m == 0:\r\n        return True\r\n    if n == 1:\r\n        return False\r\n    return modular_sum(arr[1:], n-1, m) or modular_sum(arr[1:], n-1, m-arr[0])\r\n\r","votes":193944.044},{"text":"\r\n\r\n    res = 0\r\n    for i in range(n):\r\n        res += arr[i]\r\n        res %= m\r\n\r\n    for i in range(1, n):\r\n        res = (res + arr[i] - arr[i - 1]) % m\r\n        if res == 0:\r\n            return True\r\n\r\n    return False\r\n\r\n\r\na = [1, 3, 4, 2, 6]\r\nn = len(a)\r\nm = 3\r\nprint(modular_sum(a, n, m))\r\n\r\n\r\n# 2. Longest Substring Without Repeating Characters\r","votes":210025.288},{"text":"\r\n    sum_of_subarray = [0] * (n + 1)\r\n    for i in range(1, n + 1):\r\n        sum_of_subarray[i] = sum_of_subarray[i - 1] + arr[i - 1]\r\n\r\n    for i in range(n + 1):\r\n        for j in range(i + 1, n + 1):\r\n            if (sum_of_subarray[j] - sum_of_subarray[i]) % m == 0:\r\n                return True\r\n\r\n    return False\r\n\r\n\r\narr = [5, 5, 3, 3, 3, 2, 2, 2, 1, 1, 1]\r\nn = len(arr)\r\nm = 5\r\nif modular_sum(arr, n, m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\narr = [1, 1, 1, 1, 1]\r\nn = len(arr)\r\nm = 2\r\nif modular_sum(arr, n, m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\narr = [1, 1, 1, 1, 1, 1, 1, 1]\r\nn = len(arr)\r\nm = 3\r\nif modular_sum(arr, n, m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\narr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\nn = len(arr)\r\nm = 4\r\nif modular_sum(arr, n, m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\narr = [1, 1, 1, 1, 1, 1, 1","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    mods = []\r\n    for i in range(n):\r\n        mods.append(arr[i] % m)\r\n        \r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if mods[i] == mods[j]:\r\n                return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    m = int(input())\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    fptr.write","votes":null},{"text":"\r\n    arr.sort()\r\n    s = set()\r\n    for i in range(len(arr)):\r\n        s.add(arr[i])\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] + arr[j] in s:\r\n                return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    arr = [3, 34, 4, 12, 5, 2]\r\n    n = len(arr)\r\n    m = 15\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 4, 4]\r\n    n = len(arr)\r\n    m = 6\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 3, 6, 4, 5, 2]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [5, 6, 3]\r\n    n = len(arr)\r\n    m = 3\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 3, 6, 4, 5, 5]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 3, 6, 4, 5, 5, 10, 11, 12]\r\n    n = len(arr)\r\n    m = 15\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [8, 1, 3, 5, 6, 4, 2]\r\n    n = len(arr)\r\n    m =","votes":null},{"text":"\r\n    if not arr:\r\n        return False\r\n    if sum(arr) % m == 0:\r\n        return True\r\n    if n == 0:\r\n        return False\r\n    if modular_sum(arr[:-1], n - 1, m):\r\n        return True\r\n    if sum(arr[:-1]) % m == 0:\r\n        return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    # Base Case\r\n    if len(arr) == 0:\r\n        return False\r\n    # Recursive Case\r\n    # If the sum of current subset is divisible by m, then we are done\r\n    if sum(arr) % m == 0:\r\n        return True\r\n    # If the sum of current subset is not divisible by m, then we need to\r\n    # iterate over all possible values of arr[n] and recursively check for\r\n    # the condition\r\n    for i in range(n, len(arr)):\r\n        if modular_sum(arr, i + 1, m):\r\n            return True\r\n    return False\r\n\r\n\r\n# Driver program to test above function\r\narr = [3, 4, 5, 6, 7, 8, 9, 10, 11]\r\nn = len(arr)\r\nm = 3\r\nif modular_sum(","votes":null},{"text":"\r\n    arr_sum = sum(arr)\r\n    if arr_sum % m != 0:\r\n        return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    arr_sum = sum(arr)\r\n    if arr_sum % m != 0:\r\n        return False\r\n    arr_sum = arr_sum \/\/ m\r\n    # initializing sum array\r\n    sum_arr = [0] * arr_sum\r\n    # initializing frequency array\r\n    freq_arr = [0] * arr_sum\r\n    # initializing result array\r\n    result_arr = [False] * arr_sum\r\n    # initializing the count array\r\n    count_arr = [0] * arr_sum\r\n    for i in range(len(arr)):\r\n        for j in range(arr_sum):\r\n            sum_arr[j] = (sum_arr[j] + arr[i]) % m\r\n            freq_arr[j] += 1\r\n            count_arr[sum_arr[j]] += 1\r\n    for i in range(arr_sum):\r\n        if result_arr[i] == False and freq_arr[i] > 0 and count_arr[i] > 1:\r\n            result_arr[i] = True\r\n    return result_arr\r\n\r\n\r\narr = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nn = len(arr)\r\nm = 3\r\n\r\n\r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ","votes":null},{"text":"\r\n    # The sum of all elements in arr is n\r\n    # Check if there is a subset with sum divisible by m\r\n    if n % m == 0:\r\n        return True\r\n    \r\n    dp = [False] * (n+1)\r\n    dp[0] = True\r\n    \r\n    for i in range(1, n+1):\r\n        for j in range(m, 0, -1):\r\n            if 0 <= i - j <= n:\r\n                dp[i] = dp[i] or dp[i-j]\r\n    \r\n    return dp[n]\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 1, 1, 1, 1]\r\n    m = 3\r\n    print(modular_sum(arr, sum(arr), m))\r\n    \r\n    arr = [1, 2, 3]\r\n    m = 3\r\n    print(modular_sum(arr, sum(arr), m))\r\n    \r\n    arr = [1, 2, 3, 4]\r\n    m = 3\r\n    print(modular_sum(arr, sum(arr), m))\r\n    \r\n    arr = [1, 2, 3, 4, 5]\r\n    m = 3\r\n    print(modular_sum(arr, sum(arr), m))\r\n    \r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    m = 3\r\n    print(modular_sum(arr, sum(arr), m))\r\n    \r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    m = 3\r\n    print(modular_sum(arr, sum(arr), m))\r\n    \r\n    arr = [1, 2, ","votes":null},{"text":"\r\n    s = sum(arr)\r\n    if s % m == 0:\r\n        return True\r\n    # if sum is not divisible by m, we need to check if there is a subset with sum divisible by m\r\n    # if we have 2 sub-arrays A and B such that the sum of elements in A is divisible by m and the sum of elements in B is divisible by m (and A union B = arr)\r\n    # then we can divide arr into 2 sub-arrays A and B such that the sum of elements in A is divisible by m and the sum of elements in B is divisible by m\r\n    # to solve this problem, we can use the same approach as in the problem of subset sum divisible by m\r\n    # we have 2 sub-arrays A and B such that the sum of elements in A is divisible by m and the sum of elements in B is divisible by m (and A union B = arr)\r\n    # A = [x1, x2, ..., xi]\r\n    # B = [y1, y2, ..., yj]\r\n    # x1 + x2 + ... + xi = m * k1\r\n    # y1 + y2 + ... + yj = m * k2\r\n    # k1, k2 are integers such that 0 <= k1, k2 <= n\r\n    #\r\n    # if we subtract x1 + x2 + ... + xi from the sum of elements of arr, we get:\r\n    # s - x1 - x2 - ... - xi = s - m * k1\r\n    # we can now observe that the sum of elements of B is equal to\r\n    # s - x1 - x2 - ... - xi = s - m * k1\r\n    # then we can say that the sum of elements in B is divisible by m\r\n    # so the problem reduces to the problem of subset sum divisible by m\r\n    #\r\n    # similarly, if we subtract y1 + y2 + ... + yj from the sum of elements o","votes":null},{"text":"\r\n    if (n + 1) * m > sum(arr):\r\n        return True\r\n    dp = [False] * (n + 1)\r\n    dp[0] = True\r\n    for i in range(1, n + 1):\r\n        for j in range(i):\r\n            if dp[j] and (arr[j] + arr[i - 1]) % m == 0:\r\n                dp[i] = True\r\n                break\r\n    return dp[-1]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Create a hashmap to store the sum of the subset\r\n    # if the sum is divisible by m then the value is 1\r\n    # else the value is 0\r\n\r\n    # Create a hashmap to store the sum of the subset\r\n    # if the sum is divisible by m then the value is 1\r\n    # else the value is 0\r\n    sum_hashmap = {}\r\n\r\n    # Iterate over the array and calculate the sum of each subset\r\n    # and store it in the hashmap as a key and the value is 1 if the sum is divisible by m\r\n    # else the value is 0\r\n    for i in range(n + 1):\r\n        if i == 0:\r\n            sum_hashmap[0] = 1\r\n        elif i == 1:\r\n            sum_hashmap[arr[0]] = 1 if arr[0] % m == 0 else 0\r\n        else:\r\n            for j in range(i):\r\n                sum_hashmap[arr[j]] = (\r\n                    sum_hashmap[arr[j]] + sum_hashmap[arr[j] + arr[i]]\r\n                ) % 1000000007\r\n\r\n    # Iterate over the hashmap and return true if the value is 1\r\n    # else return false\r\n    for key in sum_hashmap:\r\n        if sum_hashmap[key] == 1:\r\n            return True\r\n\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = 5\r\n    arr = [2, 4, 6, 1, 3]\r\n    m = 3\r\n\r\n    print(f\"Is there a subset with sum divisible by {m}? {modular_sum(arr, n, m)}\")\r\n\r\n    n = 3\r\n    arr = [1, 2, 3]\r\n  ","votes":null},{"text":"\r\n    # Write your code here\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [False] * (n+1)\r\n    dp[0] = True\r\n    for i in range(1, n+1):\r\n        for j in range(i):\r\n            if dp[i-j] and (i-j)%m == arr[j]:\r\n                dp[i] = True\r\n                break\r\n    return dp[n]\r\n\r\n# Testing\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7]\r\nn = len(arr)\r\nm = 3\r\n\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [2, 4, 6, 8, 10]\r\nn = len(arr)\r\nm = 2\r\n\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [2, 4, 6, 8, 10, 12]\r\nn = len(arr)\r\nm = 5\r\n\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nm = 3\r\n\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [2, 4, 6, 8, 10, 12]\r\nn = len(arr)\r\nm = 1\r\n\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [2, 4, 6, 8, 10, 12]\r\nn = len(arr)\r\nm = 2\r\n\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [2, 4, 6, 8","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    dp = [False] * (n + 1)\r\n    dp[0] = True\r\n    for i in range(1, n + 1):\r\n        dp[i] = dp[i - 1]\r\n        if i >= m:\r\n            dp[i] |= dp[i - m]\r\n        if i >= arr[i - 1]:\r\n            dp[i] |= dp[i - arr[i - 1]]\r\n    return dp[n]\r\n\r\n\r\n# Driver code\r\narr = [3, 4, 5, 9, 10, 12]\r\nn = len(arr)\r\nm = 3\r\nif modular_sum(arr, n, m):\r\n    print(\"There exists a subset with sum divisible by m\")\r\nelse:\r\n    print(\"There does not exist a subset with sum divisible by m\")\r\n\r\n# arr = [3, 4, 5, 9, 10, 12]\r\n# n = len(arr)\r\n# m = 13\r\n# if modular_sum(arr, n, m):\r\n#     print(\"There exists a subset with sum divisible by m\")\r\n# else:\r\n#     print(\"There does not exist a subset with sum divisible by m\")\r\n\r\n# arr = [3, 4, 5, 9, 10, 12]\r\n# n = len(arr)\r\n# m = 2\r\n# if modular_sum(arr, n, m):\r\n#     print(\"There exists a subset with sum divisible by m\")\r\n# else:\r\n#     print(\"There does not exist a subset with sum divisible by m\")\r\n\r\n# arr = [3, 4, 5, 9, 10, 12]\r\n# n = len(arr)\r\n# m =","votes":null},{"text":"\r\n    # Write your code here\r\n    arr_sum = sum(arr)\r\n    if arr_sum % m == 0:\r\n        return True\r\n    \r\n    if arr_sum < n:\r\n        return False\r\n    \r\n    arr_sum = set(arr)\r\n    \r\n    for i, num in enumerate(arr):\r\n        if num % m == 0:\r\n            continue\r\n        if num + num in arr_sum","votes":null},{"text":"\r\n    mod_sum = 0\r\n    for i in range(0, n):\r\n        mod_sum = (mod_sum + arr[i]) % m\r\n    for i in range(0, n):\r\n        mod_sum = (mod_sum - arr[i]) % m\r\n        if mod_sum == 0:\r\n            return True\r\n        mod_sum = (mod_sum + arr[i]) % m\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    sum_arr = sum(arr)\r\n    if sum_arr % m == 0:\r\n        return True\r\n    arr = [sum_arr] + arr\r\n    dp = [False] * (n + 1)\r\n    dp[0] = True\r\n    for i in range(n + 1):\r\n        for j in range(m):\r\n            if dp[i] and arr[i] - arr[j + 1] >= 0:\r\n                dp[i] = True\r\n    return dp[n]\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    t = int(input())\r\n\r\n    for t_itr in range(t):\r\n        nm = input().split()\r\n\r\n        n = int(nm[0])\r\n\r\n        m = int(nm[1])\r\n\r\n        arr = list(map(int, input().rstrip().split()))\r\n\r\n        result = modular_sum(arr, n, m)\r\n\r\n        fptr.write(' '.join(map(str, result)))\r\n        fptr.write('\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n#","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return False\r\n    mod = n % m\r\n    visited = [False] * (n + 1)\r\n    visited[0] = True\r\n    for i in range(n + 1):\r\n        if visited[i]:\r\n            for j in arr:\r\n                if i + j <= n:\r\n                    visited[i + j] = True\r\n    return visited[mod]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = 15\r\n    m = 3\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = 10\r\n    m = 3\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = 10\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = 10\r\n    m = 6\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = 10\r\n    m = 15\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = 10\r\n    m = 16\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = 10\r\n    m =","votes":null},{"text":"\r\n    arr.sort(reverse=True)\r\n    sum_so_far = 0\r\n    for i in range(n):\r\n        sum_so_far +=","votes":null},{"text":"\r\n    # Your code goes here\r\n    dp = [0]*(n+1)\r\n    for i in range(1, n+1):\r\n        dp[i] = dp[i-1] ^ arr[i-1]\r\n        dp[i] %= m\r\n    \r\n    s = set()\r\n    for i in range(1, n+1):\r\n        s.add(dp[i])\r\n        if dp[i] in s:\r\n            return 1\r\n    return 0\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    sum_of_subset = 0\r\n    for i in range(n):\r\n        sum_of_subset += arr[i]\r\n    if sum_of_subset % m == 0:\r\n        return True\r\n\r\n    for i in range(n):\r\n        if sum_of_subset % m != 0 and sum_of_subset + arr[i] > arr[i]:\r\n            sum_of_subset += arr[i]\r\n            if sum_of_subset % m == 0:\r\n                return True\r\n\r\n        elif sum_of_subset % m != 0 and sum_of_subset + arr[i] <= arr[i]:\r\n            sum_of_subset = arr[i]\r\n            if sum_of_subset % m == 0:\r\n                return True\r\n\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    m = int(input())\r\n    print(modular_sum(arr, n, m))\r\n\r\n\r\n\"\"\"\r\nInput:\r\n5\r\n9 8 6 10 2\r\n5\r\n\r\nOutput:\r\nTrue\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    s = set()\r\n    for i in range(n):\r\n        s.add(arr[i]%m)\r\n    return len(s) != n\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    t = int(input())\r\n\r\n    for t_itr in range(t):\r\n        n = int(input())\r\n\r\n        arr = list(map(int, input().rstrip().split()))\r\n\r\n        m = int(input())\r\n\r\n        result = modular_sum(arr, n, m)\r\n\r\n        fptr.write(str(int(result)) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n\r\n\r\n#","votes":null},{"text":"\r\n    # Write your code here\r\n    if len(arr) == 0 or n == 0:\r\n        return False\r\n\r\n    if n == 1:\r\n        return arr[0] % m == 0\r\n\r\n    # Base case: if first element is divisible by m, return True\r\n    if arr[0] % m == 0:\r\n        return True\r\n\r\n    # Recursive case: check if there exists a subset with sum divisible by m in the remaining array\r\n    return modular_sum(arr[1:], n-1, m) or modular_sum(arr[1:], n, m)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    first_multiple_input = input().rstrip().split()\r\n\r\n    n = int(first_multiple_input[0])\r\n\r\n    m = int(first_multiple_input[1])\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    fptr.write(str(int(result)) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n'''\r\n    Sample Input\r\n        5 3\r\n        1 2 3 4 5\r\n\r\n    Sample Output\r\n        1\r\n\r\n    Explanation\r\n        The subset {1, 2} has sum 3 which is divisible by m = 3.\r\n        Hence, the answer is 1.\r\n\r\n    Sample Input\r\n        6 2\r\n        1 3 2 4 5 6\r\n\r\n    Sample Output\r\n        1\r\n\r\n    Explanation\r\n        The subset {3, 5} has sum 8 which is divisible by m = 2.\r\n        Hence, the answer is 1.\r\n\r\n    Sample Input\r\n       ","votes":null},{"text":"\r\n    s = 0\r\n    for i in arr:\r\n        s = (s + i) % m\r\n    return s == 0\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Calculate the sum of all elements\r\n    sum_of_arr = sum(arr)\r\n\r\n    # The sum of all elements must be divisible by m\r\n    if sum_of_arr % m != 0:\r\n        return False\r\n\r\n    # Calculate the sum of subset\r\n    sum_of_subset = 0\r\n    for i in range(n):\r\n        sum_of_subset += arr[i]\r\n\r\n    # The sum of subset must be divisible by m\r\n    if sum_of_subset % m != 0:\r\n        return False\r\n\r\n    return True\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the number of elements: \"))\r\n    arr = list(map(int, input(\"Enter the elements: \").split()))\r\n    m = int(input(\"Enter the number m: \"))\r\n\r\n    if modular_sum(arr, n, m):\r\n        print(\"There exists a subset with sum divisible by m\")\r\n    else:\r\n        print(\"There does not exist a subset with sum divisible by m\")\r\n\r\n\"\"\"\r\nTime Complexity: O(n), where n is the number of elements in the array\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the number of elements: 4\r\nEnter the elements: 1 2 3 4\r\nEnter the number m: 2\r\nThere exists a subset with sum divisible by m\r\n\r\nSAMPLE II\r\n\r\nEnter the number of elements: 4\r\nEnter the elements: 1 2 3 5\r\nEnter the number m: 2\r\nThere does not exist a subset with sum divisible by m\r\n\r\nSAMPLE III\r\n\r\nEnter the number of elements: 4\r\nEnter the elements: 1 2 3 4\r\nEnter the number m:","votes":null},{"text":"\r\n    # 1. Create a dictionary with values as a list of indices\r\n    # 2. Iterate over the array and update the dictionary and\r\n    # 3. If the value is already present in the dictionary, then\r\n    #    check if the difference of the current index and the last\r\n    #    index of the values list is greater than or equal to n.\r\n    #    If yes, then return True.\r\n    d = {}\r\n    for i, v in enumerate(arr):\r\n        if v in d:\r\n            if i - d[v][-1] >= n:\r\n                return True\r\n        d.setdefault(v, []).append(i)\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    data = [\r\n        (\r\n            [1, 2, 3, 4, 5],\r\n            3,\r\n            5,\r\n            True\r\n        ),\r\n        (\r\n            [1, 2, 3],\r\n            3,\r\n            4,\r\n            False\r\n        ),\r\n        (\r\n            [1],\r\n            1,\r\n            1,\r\n            True\r\n        ),\r\n        (\r\n            [2, 3, 4],\r\n            3,\r\n            2,\r\n            False\r\n        )\r\n    ]\r\n    for arr, n, m, expected in data:\r\n        try:\r\n            assert modular_sum(arr, n, m) == expected\r\n        except AssertionError:\r\n            print(f'modular_sum({arr}, {n}, {m}) returned', modular_sum(arr, n, m),\r\n                  f'but expected {expected}')\r\n\r\n    print('All tests passed!')\r\n\r\n\r\n# BONUS:\r\n# Can you do this in O(n) time?\r\n\r\n# SOLUTION:\r\n#","votes":null},{"text":"\r\n    # Your code goes here\r\n    #sum = 0\r\n    #for i in range(len(arr)):\r\n    #    sum += arr[i]\r\n    #    if sum % m == 0:\r\n    #        return 1\r\n    #return 0\r\n    curr_sum = 0\r\n    mod = 0\r\n    for i in range(len(arr)):\r\n        curr_sum += arr[i]\r\n        mod = curr_sum % m\r\n        if mod == 0:\r\n            return 1\r\n        elif curr_sum < 0:\r\n            curr_sum = 0\r\n    return 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    m = int(input())\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# 200\/200 points\r\n# Runtime: 28 ms\r\n# Memory Usage: 14.2 MB\r\n# Testcases\r\n# 1 1 1\r\n# 1\r\n# Expected Output\r\n# 1\r\n# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 -1\r\n# 1\r\n# Expected Output","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    arr_sum = sum(arr)\r\n    if arr_sum % m != 0:\r\n        return False\r\n    else:\r\n        # arr_sum % m == 0\r\n        # arr_sum = x * m\r\n        # x = arr_sum \/\/ m\r\n        x = arr_sum \/\/ m\r\n        sub_sum = 0\r\n        for i in range(n):\r\n            sub_sum += arr[i]\r\n            if sub_sum == x:\r\n                return True\r\n            elif sub_sum > x:\r\n                sub_sum = arr[i + 1]\r\n\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if n == 0:\r\n        return True\r\n    # If arr is empty and n is not zero\r\n    elif n > 0 and len(arr) == 0:\r\n        return False\r\n    # Recursive case\r\n    return (modular_sum(arr[1:], n, m) or\r\n            modular_sum(arr[1:], n-arr[0], m))\r\n\r\n\r\nprint(modular_sum([3, 4, 5, 9], 9, 5))\r\nprint(modular_sum([3, 4, 5, 9], 8, 5))\r\nprint(modular_sum([3, 4, 5, 9], 8, 3))\r\nprint(modular_sum([], 8, 3))\r\nprint(modular_sum([3, 4, 5, 9], 0, 3))\r\nprint(modular_sum([3, 4, 5, 9], 0, 0))\r\nprint(modular_sum([3, 4, 5, 9], 12, 3))\r\nprint(modular_sum([3, 4, 5, 9], 18, 3))\r\nprint(modular_sum([3, 4, 5, 9], 18, 9))\r\nprint(modular_sum([3, 4, 5, 9], 18, 18))\r\nprint(modular_sum([3, 4, 5, 9], 18, 99))\r\nprint(modular_sum([3, 4, 5, 9], 18, 2))\r\nprint(modular_sum([3, 4, 5, 9], 18, 1))\r\nprint(modular_sum([3, 4, 5, 9], 18, 0))\r\nprint(modula","votes":null},{"text":"\r\n    # Write your code here\r\n    arr.sort()\r\n    sum_so_far = 0\r\n    for num in arr:\r\n        sum_so_far = (sum_so_far + num) % m\r\n        if sum_so_far == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(modular_sum([1, 2, 3, 4, 5], 15, 3))\r\n    print(modular_sum([1, 2, 3, 4, 5], 14, 3))\r\n    print(modular_sum([1, 2, 3, 4, 5], 16, 3))\r\n    print(modular_sum([1, 2, 3, 4, 5], 15, 5))\r\n    print(modular_sum([1, 2, 3, 4, 5], 15, 9))\r\n    print(modular_sum([1, 2, 3, 4, 5], 15, 10))\r\n    print(modular_sum([1, 2, 3, 4, 5], 15, 15))\r\n    print(modular_sum([1, 2, 3, 4, 5], 13, 15))\r\n    print(modular_sum([1, 2, 3, 4, 5], 13, 2))\r\n    print(modular_sum([1, 2, 3, 4, 5], 13, 3))\r\n    print(modular_sum([1, 2, 3, 4, 5], 13, 4))\r\n    print(modular_sum([1, 2, 3, 4, 5], 13, 5))\r\n    print(modular_sum(","votes":null},{"text":"\r\n    modular_sum = 0\r\n    for i in range(n):\r\n        modular_sum += arr[i]\r\n        if modular_sum == 0:\r\n            return True\r\n        modular_sum %= m\r\n    return modular_sum == 0\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 5, 2, 0, 4, 3]\r\n    n = len(arr)\r\n    print(modular_sum(arr, n, 2))\r\n    print(modular_sum(arr, n, 3))\r\n    print(modular_sum(arr, n, 5))\r\n    print(modular_sum(arr, n, 10))\r\n    print(modular_sum(arr, n, 11))\r\n    print(modular_sum(arr, n, 12))\r\n    print(modular_sum(arr, n, 15))\r\n    print(modular_sum(arr, n, 16))\r\n    print(modular_sum(arr, n, 17))\r\n    print(modular_sum(arr, n, 19))\r\n    print(modular_sum(arr, n, 20))\r\n    print(modular_sum(arr, n, 21))\r\n    print(modular_sum(arr, n, 23))\r\n    print(modular_sum(arr, n, 24))\r\n    print(modular_sum(arr, n, 25))\r\n    print(modular_sum(arr, n, 27))\r\n    print(modular_sum(arr, n, 28))\r\n    print(modular_sum(arr, n, 29))\r\n    print(modular_sum(arr, n, 30))\r\n    print(modular_sum(arr, n, 31))\r\n  ","votes":null},{"text":"\r\n    arr_sum = sum(arr)\r\n    if arr_sum%m == 0:\r\n        return True\r\n    if n==0:\r\n        return False\r\n    return modular_sum(arr[1:], n-1, m) or modular_sum(arr[1:], n-1, m-arr[0]%m)\r\n\r\nif __name__ == '__main__':\r\n    print(modular_sum([5, 3, 2, 1], 3, 7))\r\n    print(modular_sum([3, 2, 1], 3, 7))\r\n    print(modular_sum([3, 2, 1], 3, 6))\r\n    print(modular_sum([3, 2, 1], 3, 5))\r\n    print(modular_sum([3, 2, 1], 3, 4))\r\n    print(modular_sum([3, 2, 1], 3, 3))\r\n    print(modular_sum([3, 2, 1], 3, 2))\r\n    print(modular_sum([3, 2, 1], 3, 1))\r\n    print(modular_sum([3, 2, 1], 3, 0))\r\n    print(modular_sum([3, 2, 1], 3, 10))\r\n    print(modular_sum([3, 2, 1], 3, 11))\r\n    print(modular_sum([3, 2, 1], 3, 12))\r\n    print(modular_sum([3, 2, 1], 3, 13))\r\n    print(modular_sum([3, 2, 1], 3, 14))\r\n    print(modular_sum([3, 2, 1], 3, 15))\r\n    print(modular_sum(","votes":null},{"text":"\r\n    # sum = 0\r\n    # for element in arr:\r\n    #     sum += element\r\n    # if sum%m == 0:\r\n    #     return True\r\n    # else:\r\n    #     return False\r\n    # return sum%m == 0\r\n    return sum(arr)%m == 0\r\n    # return all(sum(arr[i:i+n])%m == 0 for i in range(len(arr) - n + 1))\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# print(modular_sum(arr, 2, 3))\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# print(modular_sum(arr, 3, 2))\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# print(modular_sum(arr, 2, 1))\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# print(modular_sum(arr, 3, 1))\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# print(modular_sum(arr, 4, 3))\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# print(modular_sum(arr, 4, 5))\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# print(modular_sum(arr, 5, 3))\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# print(modular_sum(arr, 5, 5))\r\n\r\n# arr = [2, 3, 4, 5, 6, 7, 8]\r\n# print(modular_sum(ar","votes":null},{"text":"\r\n    # create a lookup table for the sum of the subarrays of length 1\r\n    # the sum of the 1st element is in the 0th index\r\n    # the sum of the 2nd element is in the 1st index\r\n    # the sum of the 3rd element is in the 2nd index\r\n    # and so on\r\n    sums = [0] * (n + 1)\r\n    for i in range(1, n + 1):\r\n        sums[i] = sums[i - 1] + arr[i - 1]\r\n\r\n    # check if there is a subarray of size 1 with sum divisible by m\r\n    for i in range(n):\r\n        if sums[i + 1] % m == 0:\r\n            return True\r\n\r\n    # check if there is a subarray of size 2 with sum divisible by m\r\n    for i in range(n - 1):\r\n        if (sums[i + 2] - sums[i + 1]) % m == 0:\r\n            return True\r\n\r\n    # check if there is a subarray of size 3 with sum divisible by m\r\n    for i in range(n - 2):\r\n        if (sums[i + 3] - sums[i + 2]) % m == 0:\r\n            return True\r\n\r\n    # if no subarray of size 1, 2 or 3 is found, return False\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    sum_arr = sum(arr)\r\n\r\n    if sum_arr % m != 0:\r\n        return False\r\n\r\n    if sum_arr == n:\r\n        return True\r\n\r\n    if sum_arr < n:\r\n        return False\r\n\r\n    dp = [[False] * (sum_arr \/\/ m + 1) for _ in range(len(arr) + 1)]\r\n    dp[0][0] = True\r\n\r\n    for i in range(1, len(dp)):\r\n        for j in range(0, sum_arr \/\/ m + 1):\r\n            dp[i][j] = dp[i - 1][j]\r\n\r\n            if j >= arr[i - 1]:\r\n                dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]]\r\n\r\n    return dp[len(arr)][n \/\/ m]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n, m = 10, 3\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1]\r\n    n, m = 1, 1\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3]\r\n    n, m = 3, 3\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3]\r\n    n, m = 4, 3\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n, m = 6, 3\r\n    print(modular_sum","votes":null},{"text":"\r\n    mod_sum = 0\r\n    for i in range(0, n):\r\n        mod_sum = (mod_sum + arr[i]) % m\r\n    return mod_sum\r\n\r\n\r","votes":null},{"text":"\r\n    arr = [int(i) for i in arr]\r\n    arr = [i % m for i in arr]\r\n    arr.sort()\r\n    \r\n    s = 0\r\n    i = 0\r\n    while i < len(arr):\r\n        if s == 0:\r\n            s = arr[i]\r\n            i += 1\r\n        else:\r\n            s = (s + arr[i]) % m\r\n            i += 1\r\n            \r\n        if s == 0:\r\n            return True\r\n            \r\n    return False\r\n    \r\n# Test case 1\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nm = 3\r\nprint(modular_sum(arr, n, m))\r\n\r\n# Test case 2\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nm = 6\r\nprint(modular_sum(arr, n, m))\r\n\r\n# Test case 3\r\narr = [1, 2, 3, 4, 5]","votes":null},{"text":"\r\n    # base cases\r\n    if n == 0:\r\n        return True\r\n    if n < 0:\r\n        return False\r\n    if arr[n - 1] % m == 0:\r\n        return True\r\n\r\n    # recursive case\r\n    return modular_sum(arr, n - 1, m) or modular_sum(arr, n - 2, m) or modular_sum(arr, n - 3, m)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [3, 2, 1, 5]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 2, 1, 5, 4]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 2, 1, 4]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 2, 1, 5, 4, 6]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 2, 1, 5, 4, 6, 7]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 2, 1, 5, 4, 6, 7, 8]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 2, 1, 5, 4","votes":null},{"text":"\r\n\r\n    mod = lambda x: x % m\r\n\r\n    if len(arr) < n:\r\n        return False\r\n\r\n    # Create a sum array with size m\r\n    sum_arr = [0] * m\r\n\r\n    # Insert first n elements\r\n    for i in range(n):\r\n        sum_arr[mod(i)] += arr[i]\r\n\r\n    # Check if the current sum is divisible by m\r\n    if mod(sum(sum_arr)) == 0:\r\n        return True\r\n\r\n    # Insert remaining elements\r\n    for i in range(n, len(arr)):\r\n        sum_arr[mod(i)] += arr[i]\r\n        sum_arr[mod(i - n)] -= arr[i - n]\r\n\r\n        # Check if the current sum is divisible by m\r\n        if mod(sum(sum_arr)) == 0:\r\n            return True\r\n\r\n    return False\r\n\r\n\r\n# Test cases\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 3, 3))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 3, 4))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 3, 5))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 3, 6))\r\n\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 2, 2))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 2, 3))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 2, 4))\r\nprint(modular_sum([","votes":null},{"text":"\r\n    arr = [0] + arr\r\n    n = n + 1\r\n    dp = [False] * n\r\n    dp[0] = True\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if dp[j] and (arr[i] + arr[j]) % m == 0:\r\n                dp[i] = True\r\n                break\r\n    return dp[n-1]\r\n\r\n\r","votes":null},{"text":"\r\n    # create a set to check if divisible by m\r\n    divs = set(range(n, m * n + 1, n))\r\n    # create a set to add the sum\r\n    sums = set()\r\n\r\n    # for each number in arr\r\n    for num in arr:\r\n        # for each element in sums\r\n        for s in sums:\r\n            # add the sum of the element with the number\r\n            # if it's divisible by m\r\n            if (s + num) in divs:\r\n                return True\r\n\r\n            # add the sum to the set\r\n            sums.add(s + num)\r\n\r\n    # return False if no divisible sum is found\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    # sort the array\r\n    arr.sort()\r\n    # initialize the sum\r\n    sum = 0\r\n    # initialize a set to store the index of the sum\r\n    set = []\r\n    # loop through the array\r\n    for i in range(len(arr)):\r\n        sum += arr[i]\r\n        # if the sum is a multiple of m, return True\r\n        if sum % m == 0:\r\n            return True\r\n        # if the sum is greater than n, remove the first element of the sum\r\n        elif sum > n:\r\n            sum -= arr[i]\r\n            # remove the index from the set\r\n            set.pop(0)\r\n    # return False if no subset","votes":null},{"text":"\r\n    if sum(arr) % m == 0:\r\n        return True\r\n    if len(arr) < n:\r\n        return False\r\n    for i in range(len(arr)):\r\n        if modular_sum(arr[:i] + arr[i + 1:], n, m):\r\n            return True\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    j = 0\r\n    for i in range(len(arr)):\r\n        if arr[i] >= n:\r\n            j = i\r\n            break\r\n    if j == 0:\r\n        return True\r\n    dp = [False for _ in range(j + 1)]\r\n    dp[0] = True\r\n    for i in range(1, j + 1):\r\n        for j in range(i - 1, -1, -1):\r\n            if arr[i] - arr[j] <= n and (arr[i] - arr[j]) % m == 0:\r\n                dp[i] = True\r\n                break\r\n    return dp[j]\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    mod = 0\r\n    for i in range(len(arr)):\r\n        mod = (mod + arr[i]) % n\r\n    if mod == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# n = 5\r\n# m = 3\r\n# print(modular_sum(arr, n, m))\r\n# True\r\n\r\n# arr = [1, 2, 3, 4, 5, 6]\r\n# n = 5\r\n# m = 3\r\n# print(modular_sum(arr, n, m))\r\n# False\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# n = 4\r\n# m = 2\r\n# print(modular_sum(arr, n, m))\r\n# False\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# n = 3\r\n# m = 2\r\n# print(modular_sum(arr, n, m))\r\n# True\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# n = 3\r\n# m = 4\r\n# print(modular_sum(arr, n, m))\r\n# False\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# n = 2\r\n# m = 3\r\n# print(modular_sum(arr, n, m))\r\n# False\r\n\r\n# arr = [1, 2, 3, 4, 5]\r\n# n = 2\r\n# m = 4\r\n# print(modular_sum(arr, n, m))\r\n# True\r\n\r\n# arr = [1, 2, ","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    if m == 0 or n < 0:\r\n        return False\r\n    if arr[0] % m == 0:\r\n        return modular_sum(arr[1:], n - 1, m)\r\n    return modular_sum(arr[1:], n, m) or modular_sum(arr[1:], n - 1, m)\r\n\r\n\r\n# Driver code\r\narr = [2, 3, 4, 7, 8, 10, 11]\r\nn = 3\r\nm = 3\r\nprint(modular_sum(arr, n, m))\r\n\r\n\"\"\"\r\nTime Complexity: O(n*m), where 'n' is the size of the input array and 'm' is the given modulo\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    dp = [False for _ in range(n)]\r\n    dp[0] = True\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] + arr[j] % m == 0 and dp[j] == True:\r\n                dp[i] = True\r\n                break\r\n    return dp\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 5, 3, 2, 4, 5]\r\n    n = len(arr)\r\n    m = 3\r\n    print(modular_sum(arr, n, m))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r\n\r\n\r\n\"\"\"\r\nSample Input 1:\r\n[1, 5, 3, 2, 4, 5]\r\n6\r\n3\r\n\r\nSample Output 1:\r\n[True, False, False, True, False, False]\r\n\r\nSample Input 2:\r\n[1, 5, 3, 2, 4, 5]\r\n6\r\n2\r\n\r\nSample Output 2:\r\n[True, False, False, True, False, False]\r\n\r\nSample Input 3:\r\n[1, 5, 3, 2, 4, 5]\r\n6\r\n4\r\n\r\nSample Output 3:\r\n[False, False, False, False, False, False]\r\n\r\nSample Input 4:\r\n[1, 5, 3, 2, 4, 5]\r\n6\r\n10\r\n\r\nSample Output 4:\r\n[False, False, False, False, False, False]\r\n\r\nExplanation 4:\r\nThe sum of any subset of the given set is not divisible by m.\r\n\r\nSample Input 5:\r\n[1, 5,","votes":null},{"text":"\r\n    # Code here\r\n    arr_sum = sum(arr)\r\n    if arr_sum % m != 0:\r\n        return False\r\n    modular_sums = set()\r\n    for i in range(len(arr)):\r\n        if arr[i] % m == 0:\r\n            modular_sums.add(arr[i])\r\n        else:\r\n            modular_sums.add(arr[i] % m)\r\n\r\n    for i in range(1, len(arr)):\r\n        if arr[i] % m == 0:\r\n            modular_sums.add(arr_sum - arr[i])\r\n        else:\r\n            modular_sums.add((arr_sum - arr[i]) % m)\r\n\r\n    for x in range(1, len(arr)):\r\n        for y in range(x + 1, len(arr) + 1):\r\n            if (arr_sum - arr[x] - arr[y - 1]) % m == 0:\r\n                modular_sums.add(arr_sum - arr[x] - arr[y - 1])\r\n            else:\r\n                modular_sums.add((arr_sum - arr[x] - arr[y - 1]) % m)\r\n\r\n    for x in range(1, len(arr)):\r\n        for y in range(x + 1, len(arr) + 1):\r\n            if (arr_sum - arr[x] - arr[y - 1]) % m == 0:\r\n                modular_sums.add(arr_sum - arr[x] - arr[y - 1])\r\n            else:\r\n                modular_sums.add((arr_sum - arr[x] - arr[y - 1]) % m)\r\n\r\n    return len(modular_sums) > 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ[","votes":null},{"text":"\r\n    if not arr:\r\n        return False\r\n    \r\n    target = n % m\r\n    arr = [a % m for a in arr]\r\n    \r\n    if target in arr:\r\n        return True\r\n    \r\n    dp = [False] * (target + 1)\r\n    dp[0] = True\r\n    \r\n    for a in arr:\r\n        for i in range(target, 0, -1):\r\n            if dp[i]:\r\n                dp[i - a] = True\r\n                \r\n    return dp[target]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(modular_sum([3, 4, 5, 5, 6], 15, 2))\r\n    print(modular_sum([3, 4, 5, 5, 6], 15, 3))\r\n    print(modular_sum([3, 4, 5, 5, 6], 15, 4))\r\n    print(modular_sum([3, 4, 5, 5, 6], 15, 6))\r\n    print(modular_sum([3, 4, 5, 5, 6], 15, 7))\r\n    print(modular_sum([3, 4, 5, 5, 6], 15, 8))\r\n    print(modular_sum([3, 4, 5, 5, 6], 15, 9))\r\n    print(modular_sum([3, 4, 5, 5, 6], 15, 10))\r\n    print(modular_sum([3, 4, 5, 5, 6], 15, 11))\r\n    print(modular_sum([3, 4, 5, 5, 6], 15, 12))\r\n    print(modula","votes":null},{"text":"\r\n    tot_sum = sum(arr)\r\n    if tot_sum % m == 0:\r\n        return True\r\n    if tot_sum % m != 0 and n == 0:\r\n        return False\r\n    if n == 1:\r\n        return True\r\n    for i in range(0, n - 1):\r\n        if arr[i] % m == 0 and arr[i + 1] % m == 0 and modular_sum(arr[i + 2:], n - 2, m) == True:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().rstrip().split()))\r\n    m = int(input())\r\n    print(modular_sum(arr, n, m))\r\n\r\n\r\n# 3\r\n# 1 2 3\r\n# 2\r\n# Output: 1\r\n\r\n# 4\r\n# 1 2 3 4\r\n# 2\r\n# Output: 1\r\n\r\n# 5\r\n# 1 2 3 4 5\r\n# 2\r\n# Output: 0\r\n\r\n# 3\r\n# 1 2 3\r\n# 3\r\n# Output: 0\r\n\r\n# 6\r\n# 1 2 3 4 5 6\r\n# 3\r\n# Output: 1\r\n\r\n# 7\r\n# 1 2 3 4 5 6 7\r\n# 3\r\n# Output: 1\r\n\r\n# 1\r\n# 1\r\n# 1\r\n# Output: 1\r\n\r\n# 3\r\n# 1 2 3\r\n# 4\r\n# Output: 0\r\n\r\n# 4\r\n# 1 2 3 4\r\n# 4\r\n# Outpu","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    if n < 0:\r\n        return False\r\n    if arr[n - 1] % m == 0:\r\n        return modular_sum(arr, n - 1, m)\r\n    return modular_sum(arr, n - 1, m) or modular_sum(arr, n - 1, m)\r\n\r\n\r\narr = [8, 3, 6, 1, 9, 7, 4, 5, 10, 2]\r\nm = 3\r\nprint(modular_sum(arr, len(arr), m))\r\n\r\n\r","votes":null},{"text":"\r\n    sum_arr = sum(arr)\r\n    if sum_arr % m != 0:\r\n        return False\r\n    if n == 1:\r\n        return True\r\n    else:\r\n        return modular_sum(arr[1:], n - 1, m) or modular_sum(arr[1:], n, m)\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    if n < 0:\r\n        return False\r\n    else:\r\n        return modular_sum(arr, n - arr[n - 1], m) or modular_sum(arr, n, m)\r\n\r\n\r\nif __name__ == '__main__':\r\n    input = sys.stdin.read()\r\n    n, m = map(int, input.split())\r\n    arr = list(map(int, input.split()))\r\n    print(modular_sum(arr, n, m))\r\n\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    s = set()\r\n    modulo = m\r\n    for i in range(n):\r\n        s.add(arr[i] % modulo)\r\n        if len(s) == modulo:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    m = int(input())\r\n\r\n    if modular_sum(arr, n, m):\r\n        print('Yes')\r\n    else:\r\n        print('No')\r\n\r\n\r\n# Example\r\n# Input:\r\n# 5\r\n# 1 2 3 4 5\r\n# 3\r\n# Output:\r\n# Yes\r\n# Explanation:\r\n# The array can be divided into two subsets: {1, 2, 3} and {4, 5}.\r\n# Both of these subsets sum to 6 which is divisible by 3.\r\n\r\n# Input:\r\n# 5\r\n# 1 2 3 4 5\r\n# 2\r\n# Output:\r\n# No\r\n\r\n# Input:\r\n# 3\r\n# 1 2 3\r\n# 3\r\n# Output:\r\n# Yes\r\n\r\n# Input:\r\n# 3\r\n# 1 2 3\r\n# 1\r\n# Output:\r\n# No\r\n\r\n# Input:\r\n# 3\r\n# 1 2 3\r\n# 4\r\n# Output:\r\n# Yes\r\n\r\n# Input:\r\n# 3\r\n# 1 2 3\r\n# 100\r\n# Output:\r\n# No\r\n\r\n# Input:\r\n# 10\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# 100\r\n# Output:\r\n# Yes","votes":null},{"text":"\r\n    # Calculate sum of all elements in array.\r\n    arr_sum = sum(arr)\r\n    # If sum of all elements is divisible by m, then return True.\r\n    if arr_sum % m == 0:\r\n        return True\r\n\r\n    # Create a hash table of size m.\r\n    hash_table = [0] * m\r\n\r\n    # Insert all elements in hash table.\r\n    for i in range(len(arr)):\r\n        hash_table[(arr[i] % m)] += 1\r\n\r\n    # Check if there are two elements in hash table whose sum is divisible by m.\r\n    for i in range(m):\r\n        # If arr[i] % m is in hash table, then check if there is another element\r\n        # in hash table whose sum is arr[i] % m.\r\n        if hash_table[i]:\r\n            # If arr[i] is in hash table, then decrement the count of arr[i].\r\n            if arr[i] % m == 0:\r\n                hash_table[i] -= 1\r\n            # Check if arr[i] + m - arr[i] % m is in hash table.\r\n            if hash_table[(m - arr[i] % m) % m]:\r\n                # If arr[i] + m - arr[i] % m is in hash table, then return True.\r\n                return True\r\n    # If no subset is found, return False.\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [2, 3, 4, 5]\r\n    n = len(arr)\r\n    m = 2\r\n\r\n    # Check if there is a subset with sum divisible by m.\r\n    if modular_sum(arr, n, m):\r\n        print(\"There exists a subset with sum divisible by m.\")\r\n    else:\r\n        print(\"There does not exist a subset with sum divisible by m.\")\r\n\r\n    arr = [2,","votes":null},{"text":"\r\n    if n <= 0:\r\n        return 0\r\n    if n == 1:\r\n        return 1 if arr[0] % m == 0 else 0\r\n    if n == 2:\r\n        return ((arr[0] + arr[1]) % m == 0 and arr[0] % m == 0) | ((arr[1] + arr[0]) % m == 0 and arr[1] % m == 0)\r\n\r\n    return modular_sum(arr, n - 1, m) + modular_sum(arr, n - 2, m)\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return any([sum(i) % m == 0 for i in itertools.combinations(arr, n)])\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    t = int(input())\r\n\r\n    for t_itr in range(t):\r\n        nm = input().split()\r\n\r\n        n = int(nm[0])\r\n\r\n        m = int(nm[1])\r\n\r\n        arr = list(map(int, input().rstrip().split()))\r\n\r\n        result = modular_sum(arr, n, m)\r\n\r\n        fptr.write(str(int(result)) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n# 1\r\n# 3 5\r\n# 1 2 3\r\n# 1\r\n\r\n# 2\r\n# 3 5\r\n# 2 2 2\r\n# 0\r\n\r\n# 2\r\n# 3 5\r\n# 1 2 3\r\n# 1\r\n\r\n# 2\r\n# 3 5\r\n# 2 2 2\r\n# 0\r\n\r\n# 2\r\n# 3 5\r\n# 1 2 3\r\n# 1\r\n\r\n# 2\r\n# 3 5\r\n# 2 2 2\r\n# 0\r\n\r\n# 2\r\n# 3 5\r\n# 1 2 3\r\n# 1\r\n\r\n# 2\r\n# 3 5\r\n# 2 2 2\r\n# 0\r\n\r\n# 2\r\n# 3 5\r\n# 1 2 3\r\n# 1\r\n\r\n# 2\r\n# 3 5\r\n# 2 2 2\r\n","votes":null},{"text":"\r\n    arr.sort()\r\n    print(arr)\r\n    s = 0\r\n    for i in range(n):\r\n        s += arr[i]\r\n    print(s)\r\n    if s%m == 0:\r\n        return True\r\n    else:\r\n        # for i in range(n-1, 0, -1):\r\n        #     if arr[i]%m == 0:\r\n        #         return True\r\n        #     else:\r\n        #         arr.remove(arr[i])\r\n        #         return modular_sum(arr, n-1, m)\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    arr = set(arr)\r\n    arr_sum = sum(arr)\r\n    if arr_sum % m == 0:\r\n        return True\r\n    arr = sorted(arr)\r\n    for i in range(1, len(arr)-1):\r\n        if arr_sum % m == arr[i] % m:\r\n            return True\r\n        if arr[i] % m == 0:\r\n            return True\r\n        if (arr_sum - arr[i]) % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    m = 2\r\n    print(modular_sum(arr, n, m))\r\n\r\n\r\n\"\"\"\r\nTime O(N * M) where N is the length of the array and M is the number of elements in the array.\r\nSpace O(N)\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    arr = [5, 6, 7, 8, 9]\r\n    n = 5\r\n    m = 3\r\n    # print(arr[0], arr[1])\r\n    print(arr[1], arr[2])\r\n\r\n\r","votes":null},{"text":"\r\n    arr = [0] + arr\r\n    total = 0\r\n    for i in range(n + 1):\r\n        total = (total + arr[i]) % m\r\n    print(total)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().rstrip().split()))\r\n    m = int(input())\r\n    modular_sum(arr, n, m)\r\n\r\n# Given an array of integers and a positive integer k, find if there's a subset of the\r\n# array with sum divisible by k.\r\n# Constraints :\r\n# 1 \u2264 N \u2264 10^4\r\n# 1 \u2264 A[i] \u2264 10^4\r\n# 1 \u2264 k \u2264 10^3\r\n# Example :\r\n# Input :\r\n# N = 5, K = 3\r\n# A[] = {2, 1, 4, 6, 3}\r\n# Output :\r\n# 1\r\n# Explanation :\r\n# The subset {1, 4, 6} has sum 11 which is divisible by 3.\r\n\r\n# METHOD - 1\r\n# This is the straightforward method, but it is not efficient.\r\n# It simply checks all the subsets and finds if there is any subset with sum divisible by k.\r\n# It uses the concept of recursion.\r\n# Time complexity : O(2^n) where n is the size of the array.\r\n# Space complexity : O(n) where n is the size of the array.\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    # initialize an array of size n\r\n    # and initialize it with 0\r\n    dp = [0]*n\r\n    \r\n    # for each i in the range of the length of the array\r\n    for i in range(n):\r\n        # for each j from 0 to i\r\n        for j in range(i+1):\r\n            # if the sum of i and j is less than n\r\n            if i+j < n:\r\n                # if the sum of the current value of i and j\r\n                # and the sum of the dp[i+j] is divisible by m\r\n                if (arr[i] + arr[j]) % m == dp[i+j] % m:\r\n                    # set the value of dp[i+j] to 1\r\n                    dp[i+j] = 1\r\n        \r\n    # return the value of the dp[-1]\r\n    return dp[-1]\r\n\r\n    # alternatively, we can return the value of the dp[n-1]\r\n    # because we are checking the subset of the last element\r\n    # therefore, we can return the value of the dp[n-1]\r\n    # return dp[n-1]\r\n\r\n\r","votes":null},{"text":"\r\n    arrSum = sum(arr)\r\n    if arrSum % m == 0:\r\n        return True\r\n    arrSum = 0\r\n    arrLen = len(arr)\r\n    for i in range(0, arrLen):\r\n        arrSum += arr[i]\r\n        if arrSum % m == 0:\r\n            return True\r\n        for j in range(i + 1, arrLen):\r\n            arrSum += arr[j]\r\n            if arrSum % m == 0:\r\n                return True\r\n            for k in range(j + 1, arrLen):\r\n                arrSum += arr[k]\r\n                if arrSum % m == 0:\r\n                    return True\r\n                for l in range(k + 1, arrLen):\r\n                    arrSum += arr[l]\r\n                    if arrSum % m == 0:\r\n                        return True\r\n                    for m in range(l + 1, arrLen):\r\n                        arrSum += arr[m]\r\n                        if arrSum % m == 0:\r\n                            return True\r\n                        for n in range(m + 1, arrLen):\r\n                            arrSum += arr[n]\r\n                            if arrSum % m == 0:\r\n                                return True\r\n                            for o in range(n + 1, arrLen):\r\n                                arrSum += arr[o]\r\n                                if arrSum % m == 0:\r\n                                    return True\r\n                                for p in range(o + 1, arrLen):\r\n                                    arrSum += arr[p]\r\n                                    if arrSum % m == 0:\r\n                                        return True\r\n                                    for q in range(p + 1, arrLen):\r\n                                        arrSum += arr[q]\r\n                                        if arrSum % m == 0:\r\n                                            return True\r\n                                        for r in range(q + 1, arrLen)","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return False\r\n    if len(arr) == 1:\r\n        return arr[0] % m == 0\r\n\r\n    # Let's say we have 3 elements in the array\r\n    # If the first element is divisible by m, then it is sufficient to check\r\n    # the sum of the other 2 elements\r\n    if arr[0] % m == 0:\r\n        return modular_sum(arr[1:], n-1, m)\r\n    # If the second element is divisible by m, then it is sufficient to check\r\n    # the sum of the first and the third elements\r\n    if arr[1] % m == 0:\r\n        return modular_sum(arr[2:], n-1, m)\r\n    # If the third element is divisible by m, then it is sufficient to check\r\n    # the sum of the first and the second elements\r\n    if arr[2] % m == 0:\r\n        return modular_sum(arr[3:], n-1, m)\r\n\r\n    # If none of the elements is divisible by m, then we check the sum of the first 2 elements\r\n    if modular_sum(arr[1:], n-1, m):\r\n        return True\r\n\r\n    # If the sum of the first 2 elements is not divisible by m, then we check the sum of the first, third elements\r\n    if modular_sum(arr[2:], n-1, m):\r\n        return True\r\n\r\n    # If the sum of the first, third elements is not divisible by m, then we check the sum of the first and the third elements\r\n    if modular_sum(arr[3:], n-1, m):\r\n        return True\r\n\r\n    return False\r\n\r\n\r\n# Test cases\r\nprint(modular_sum([1, 2, 3, 4, 5, 6, 7, 8, ","votes":null},{"text":"\r\n    arr_sum = sum(arr)\r\n    if arr_sum % m != 0:\r\n        return False\r\n\r\n    arr_max = max(arr)\r\n    if arr_max > n:\r\n        return False\r\n\r\n    # Create a table to store the sums for given\r\n    # range.  The value of table[i][j] stores sum of\r\n    # elements from i to j.  The value of table[i][j] is\r\n    # ignored if i > j\r\n    table = [[0 for x in range(n)] for y in range(n)]\r\n    for i in range(n):\r\n        table[i][i] = arr[i]\r\n        for j in range(i + 1, n):\r\n            table[i][j] = table[i][j - 1] + arr[j]\r\n\r\n    # Now process all subsets one by one and check\r\n    # if the current subset sum is divisible by m or not.\r\n    # If sum is divisible by m then return true\r\n    for i in range(n + 1):\r\n        for subset in itertools.combinations(range(n), i):\r\n            subset_sum = 0\r\n            for index in subset:\r\n                subset_sum += table[index][index]\r\n                if subset_sum % m == 0:\r\n                    return True\r\n\r\n    # If we reach here that means we didn't\r\n    # find any subset with sum divisible by m\r\n    return False\r\n\r\n\r\n# Driver program to test above function\r\narr = [1, 1, 3, 2, 3, 1]\r\nn = len(arr)\r\nm = 3\r\nif modular_sum(arr, n, m):\r\n    print(\"There exists a subset with sum divisible by given number\")\r\nelse:\r\n    print(\"There does not exist a subset with sum divisible by given number\")\r\n\r\n# This code is contributed by Nik","votes":null},{"text":"\r\n    arr = [0] + arr\r\n    for i in range(1, n + 1):\r\n        arr[i] = (arr[i - 1] + arr[i]) % m\r\n    return arr\r\n\r\n\r","votes":null},{"text":"\r\n    arr = list(map(int, arr))\r\n    n = len(arr)\r\n    mod = n % m\r\n    if mod == 0:\r\n        return True\r\n    hash = {}\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            return True\r\n        if arr[i] in hash:\r\n            return True\r\n        hash[arr[i]] = 1\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    nm = input().split()\r\n\r\n    n = int(nm[0])\r\n\r\n    m = int(nm[1])\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    fptr.write(str(int(result)) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n    # arr = list(map(int, input().rstrip().split()))\r\n    # n = len(arr)\r\n    # m = int(input())\r\n    # mod = n % m\r\n    # if mod == 0:\r\n    #     print(1)\r\n    # else:\r\n    #     hash = {}\r\n    #     for i in","votes":null},{"text":"\r\n    arr_sum = sum(arr)\r\n    if arr_sum % m == 0:\r\n        return True\r\n    if arr_sum % m != 0:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    arr = [0] + arr\r\n    sum_arr = [0]\r\n    for i in range(1, n + 1):\r\n        sum_arr.append(sum_arr[-1] + arr[i])\r\n\r\n    for i in range(2**n):\r\n        binary_representation = bin(i)[2:]\r\n        binary_representation = '0' * (n - len(binary_representation)) + binary_representation\r\n        if sum_arr[i + 1] % m != 0:\r\n            continue\r\n        for j in range(n + 1):\r\n            if binary_representation[j] == '1':\r\n                if sum_arr[i + 1] % m == 0:\r\n                    return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    input = sys.stdin.read()\r\n    n, m = map(int, input.split())\r\n    arr = list(map(int, input.split()))\r\n    print(modular_sum(arr, n, m))\r\n\r\n\r\n# 2\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1\r\n# 1","votes":null},{"text":"\r\n    \r\n    # Using dictionary to store all the sum of subsets\r\n    d = dict()\r\n    \r\n    # Initially, we have sum of empty set as 0\r\n    d[0] = 1\r\n\r\n    # Traverse the list\r\n    for i in range(0, n):\r\n        \r\n        # Add all the subsets sum that can be made using the current element\r\n        for j in range(arr[i], m):\r\n            if j - arr[i] in d:\r\n                d[j] = d.get(j, 0) + d.get(j - arr[i], 0)\r\n\r\n    return d[m - 1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [5, 6, 7, 8, 9]\r\n    m = 3\r\n    n = len(arr)\r\n    \r\n    print(f\"There are {modular_sum(arr, n, m)} subsets with sum divisible by {m}.\")\r\n\r\n'''\r\nTime Complexity  \r\nThe time complexity of the above algorithm is O(N * M), where \u2018N\u2019 is the number of elements in an input array and \u2018M\u2019 is the given sum. \r\n\r\nSpace Complexity  \r\nThe space complexity of the above algorithm will be O(M), as in the worst case, \r\nall elements of the array will be in the subset and the sum of all elements will be equal to the given sum.\r\n'''\r\n\r\n\r\n\r\n'''\r\nApproach 2: Dynamic Programming\r\n\r\nConsider the following example, given an array [5, 6, 7, 8, 9] and the sum of the subset is 3. \r\n\r\nLet us take a two-dimensional table and call it \u2018table\u2019. \r\nThe first row of the table will have 0, 5, 6, 7, 8, 9. \r\nThe first column of the table will have 0, 3, ","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    if n < 0:\r\n        return False\r\n    if arr[n - 1] % m == 0 and modular_sum(arr, n - 1, m):\r\n        return True\r\n    if modular_sum(arr, n - 1, m):\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    sum_arr = [0] * (n + 1)\r\n    for i in range(1, n + 1):\r\n        sum_arr[i] = sum_arr[i - 1] + arr[i - 1]\r\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\r\n    for i in range(n + 1):\r\n        dp[i][0] = 1\r\n    for i in range(1, n + 1):\r\n        for j in range(1, n + 1):\r\n            if (j - arr[i - 1]) >= 0:\r\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\r\n    for i in range(1, n + 1):\r\n        for j in range(1, n + 1):\r\n            if (sum_arr[i] - sum_arr[j]) % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [3, 4, 2, 6]\r\n    n = len(arr)\r\n    m = 5\r\n    print(f\"Does there exist a subset whose sum is divisible by {m}? {modular_sum(arr, n, m)}\")\r\n\r\n    arr = [3, 4, 1, 2, 6]\r\n    n = len(arr)\r\n    m = 5\r\n    print(f\"Does there exist a subset whose sum is divisible by {m}? {modular_sum(arr, n, m)}\")\r\n\r\n    arr = [3, 4, 1, 2, 6]\r\n    n = len(arr)\r\n    m = 3\r\n    print(f\"Does there exist a subset whose sum is divi","votes":null},{"text":"\r\n    mod_sum = 0\r\n    for i in range(n):\r\n        mod_sum += arr[i]\r\n        mod_sum %= m\r\n    if mod_sum == 0:\r\n        print('Yes')\r\n        return\r\n    for i in range(n, len(arr)):\r\n        mod_sum += arr[i]\r\n        mod_sum -= arr[i - n]\r\n        mod_sum %= m\r\n        if mod_sum == 0:\r\n            print('Yes')\r\n            return\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\n    n = 5\r\n    m = 50\r\n    modular_sum(arr, n, m)\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = 5\r\n    m = 50\r\n    modular_sum(arr, n, m)\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = 6\r\n    m = 5\r\n    modular_sum(arr, n, m)\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = 7\r\n    m = 5\r\n    modular_sum(arr, n, m)\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = 8\r\n    m = 5\r\n    modular_sum(ar","votes":null},{"text":"\r\n    if not arr:\r\n        return False\r\n    \r\n    # sort the array\r\n    arr.sort()\r\n    \r\n    # create a hash table\r\n    hash_table = {}\r\n    \r\n    # calculate the sum\r\n    sum_of_arr = 0\r\n    for num in arr:\r\n        sum_of_arr += num\r\n        \r\n    # if sum is divisible by m, then return true\r\n    if sum_of_arr % m == 0:\r\n        return True\r\n        \r\n    # add the first element to hash table\r\n    hash_table[arr[0]] = 1\r\n    \r\n    # iterate over the array\r\n    for num in arr[1:]:\r\n        # add the current item to hash table\r\n        hash_table[num] = hash_table.get(num, 0) + 1\r\n        \r\n        # check if there is a subset with sum divisible by m\r\n        if (sum_of_arr - num) % m == 0:\r\n            return True\r\n            \r\n        # get the difference and check if the difference is present in hash table\r\n        diff = (sum_of_arr - num) - m\r\n        if diff in hash_table:\r\n            return True\r\n            \r\n    # if no subset is present, return false\r\n    return False\r\n\r\n\r\n# Test program 1\r\narr = [9, 15, 3, 7, 100, 8]\r\nn = len(arr)\r\nm = 7\r\nprint(f\"Is there a subset with sum divisible by {m}? {modular_sum(arr, n, m)}\")\r\n\r\n\r\n# Test program 2\r\narr = [9, 15, 3, 7, 100, 8]\r\nn = len(arr)\r\nm = 10\r\nprint(f\"Is there a subset with sum divisible by {m}? {modular","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(n):\r\n        sum = (sum + arr[i]) % m\r\n    return sum == 0\r\n\r\n\r","votes":null},{"text":"\r\n    # return sum(int(i) for i in arr) % m == 0\r\n    return sum(arr) % m == 0\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    if m == 0:\r\n        return True\r\n    if n == 1:\r\n        return arr[0] % m == 0\r\n    if arr[0] % m == 0:\r\n        return True\r\n\r\n    return modular_sum(arr[1:], n-1, m) or modular_sum(arr[1:], n-2, m)\r\n\r\n\r","votes":null},{"text":"\r\n    # Return True or False\r\n    # Time Complexity: O(N)\r\n    # Space Complexity: O(N)\r\n    \r\n    # Calculate the hash value for all the elements\r\n    # of the array\r\n    hash_values = [x % m for x in arr]\r\n    \r\n    # Initialize a set\r\n    subset_sums = set()\r\n    \r\n    for i in range(n):\r\n        \r\n        # Add the hash value of the current element\r\n        subset_sums.add(hash_values[i])\r\n        \r\n        # Check if the sum of the current element and any\r\n        # of the previous elements is divisible by m\r\n        for subset_sum in subset_sums:\r\n            \r\n            if (subset_sum + hash_values[i]) % m == 0:\r\n                return True\r\n    \r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \r\n    # Test case 1\r\n    n = 5\r\n    arr = [2, 3, 4, 8, 9]\r\n    m = 5\r\n    print(\"Array: \", arr, \"\\n\")\r\n    print(\"Subset sum divisible by\", m, \"?\", modular_sum(arr, n, m), \"\\n\")\r\n    \r\n    # Test case 2\r\n    n = 5\r\n    arr = [2, 3, 4, 8, 9]\r\n    m = 3\r\n    print(\"Array: \", arr, \"\\n\")\r\n    print(\"Subset sum divisible by\", m, \"?\", modular_sum(arr, n, m), \"\\n\")\r\n    \r\n    # Test case 3\r\n    n = 5\r\n    arr = [2, 3, 4, 8, 9]\r\n    m = 10\r\n    print(\"Array: \", arr, \"\\n\")\r\n    print(\"Subset sum divisible by\"","votes":null},{"text":"\r\n    # Write your code here\r\n    n = len(arr)\r\n    sum = 0\r\n    for i in range(n):\r\n        sum = sum + arr[i]\r\n    sum = sum % m\r\n    if sum == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    nm = input().split()\r\n\r\n    n = int(nm[0])\r\n\r\n    m = int(nm[1])\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    fptr.write(result + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# arr=[1,2,3]\r\n# n=len(arr)\r\n# sum=0\r\n# for i in range(n):\r\n#     sum=sum+arr[i]\r\n# sum=sum%m\r\n# if sum==0:\r\n#     return True\r\n# else:\r\n#     return False\r\n\r\n#","votes":null},{"text":"\r\n    s = sum(arr)\r\n    if s % m == 0:\r\n        return True\r\n    if n == 0:\r\n        return False\r\n    return modular_sum(arr[1:], n - 1, m) or modular_sum(arr[:-1], n - 1, m)\r\n\r\n\r","votes":null},{"text":"\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # n = 3\r\n    # m = 2\r\n    # Output: True\r\n    # Explanation: The subset is {1, 2, 4} with a sum of 7.\r\n    # 7 is divisible by 2.\r\n\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # n = 3\r\n    # m = 3\r\n    # Output: True\r\n    # Explanation: The subset is {1, 2, 4} with a sum of 7.\r\n    # 7 is divisible by 3.\r\n\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # n = 3\r\n    # m = 4\r\n    # Output: False\r\n    # Explanation: There is no subset with a sum divisible by 4.\r\n\r\n    # arr = [2, 3, 4, 5]\r\n    # n = 2\r\n    # m = 5\r\n    # Output: True\r\n    # Explanation: The subset is {2, 3} with a sum of 5.\r\n    # 5 is divisible by 5.\r\n\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # n = 5\r\n    # m = 6\r\n    # Output: True\r\n    # Explanation: The subset is {1, 2, 3, 4, 5} with a sum of 15.\r\n    # 15 is divisible by 6.\r\n\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # n = 5\r\n    # m = 7\r\n    # Output: True\r\n    # Explanation: The subset is {1, 2, 3, 5} with a sum of ","votes":null},{"text":"\r\n    sum_arr = sum(arr)\r\n    if sum_arr % m != 0:\r\n        return False\r\n    else:\r\n        arr.sort(reverse=True)\r\n        total = 0\r\n        for num in arr:\r\n            if (total + num) % m == 0:\r\n                total += num\r\n            else:\r\n                return True\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [2, 3, 5]\r\n    n1 = len(arr1)\r\n    m1 = 3\r\n    print(modular_sum(arr1, n1, m1))\r\n    arr2 = [2, 3, 4, 5]\r\n    n2 = len(arr2)\r\n    m2 = 3\r\n    print(modular_sum(arr2, n2, m2))\r\n    arr3 = [2, 3, 4, 5, 6]\r\n    n3 = len(arr3)\r\n    m3 = 3\r\n    print(modular_sum(arr3, n3, m3))\r\n    arr4 = [2, 3, 4, 5, 6, 7]\r\n    n4 = len(arr4)\r\n    m4 = 3\r\n    print(modular_sum(arr4, n4, m4))\r\n    arr5 = [2, 3, 4, 5, 6, 7, 8]\r\n    n5 = len(arr5)\r\n    m5 = 3\r\n    print(modular_sum(arr5, n5, m5))\r\n    arr6 = [2, 3, 4, 5, 6, 7, 8, 9]\r\n    n6 = len(arr6)\r\n    m6 = 3\r\n    print(modular_sum(arr6, n6, m6))\r\n    arr7 = [2,","votes":null},{"text":"\r\n    if n == 0:\r\n        if arr[0] % m == 0:\r\n            return True\r\n        else:\r\n            return False\r\n    if arr[0] % m == 0:\r\n        return modular_sum(arr[1:], n-1, m)\r\n    else:\r\n        return modular_sum(arr[1:], n-1, m) or modular_sum(arr[1:], n-1, m)\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    \r\n    # We use a hash map to store frequency of each number\r\n    freq = {}\r\n    for x in arr:\r\n        if x not in freq:\r\n            freq[x] = 0\r\n        \r\n        freq[x] += 1\r\n    \r\n    # If there is a subset with sum divisible by m,\r\n    # then this set must contain all numbers divisible by m.\r\n    # So we check if m is a key in the hash map.\r\n    # If it is not, then we return True.\r\n    if m not in freq:\r\n        return True\r\n    \r\n    # If we get here, then m is a key in the hash map.\r\n    # So we check if m * (freq[m] + 1) is divisible by m.\r\n    # If it is, then we return True.\r\n    if (m * (freq[m] + 1)) % m == 0:\r\n        return True\r\n    \r\n    # If we get here, then m * (freq[m] + 1) is not divisible by m.\r\n    # So we check if m * (freq[m] + 2) is divisible by m.\r\n    # If it is, then we return True.\r\n    if (m * (freq[m] + 2)) % m == 0:\r\n        return True\r\n    \r\n    # If we get here, then none of the numbers divisible by m satisfies\r\n    # the required condition.\r\n    # So we return False.\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return any(map(lambda x: x % m == 0, [sum(arr[i:i+n]) for i in range(len(arr)-n+1)]))\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    m = int(input())\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    fptr.write(str(int(result)) + '\\n')\r\n\r\n    fptr.","votes":null}],"time":{"count":9.0,"avg":154138.7382222222,"std":35109.3349764993,"cov":0.2277774905}}
{"id":516,"question":"def radix_sort(nums):\r\n    \"\"\"Write a function to sort a list of elements using radix sort.\"\"\"","answers":[{"text":"\r\n    max_digit = max([len(str(num)) for num in nums])\r\n    for i in range(max_digit):\r\n        digit = 10**i\r\n        bucket = [[] for _ in range(10)]\r\n        for num in nums:\r\n            bucket[num \/\/ digit % 10].append(num)\r\n        nums = []\r\n        for bucket_nums in bucket:\r\n            nums.extend(bucket_nums)\r\n    return nums\r\n\r\n\r","votes":146364.752},{"text":"\r\n    # Find the maximum element\r\n    max_element = max(nums)\r\n    # Find the number of digits in the maximum element\r\n    count_digits = 0\r\n    while max_element > 0:\r\n        count_digits += 1\r\n        max_element \/\/= 10\r\n\r\n    # Sort by digit\r\n    for digit in range(count_digits):\r\n        radix = 10 ** digit\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            buckets[(num \/\/ radix) % 10].append(num)\r\n        nums = [num for bucket in buckets for num in bucket]\r\n\r\n    return nums\r\n\r\n\r","votes":147116.104},{"text":"\r\n    radix = len(str(max(nums)))\r\n    for i in range(radix):\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            buckets[int(num \/ 10 ** i % 10)].append(num)\r\n        nums = [num for bucket in buckets for num in bucket]\r\n    return nums\r\n\r\n\r","votes":149452.8},{"text":"\r\n    # base case\r\n    if len(nums) <= 1:\r\n        return nums\r\n\r\n    # find the max number\r\n    max_num = max(nums)\r\n    # find the number of digits\r\n    num_digits = len(str(max_num))\r\n\r\n    # for each digit\r\n    for i in range(num_digits):\r\n        # create a bucket list of 10 lists\r\n        buckets = [[] for _ in range(10)]\r\n\r\n        # 1. put each number in each bucket\r\n        for num in nums:\r\n            # get the digit\r\n            digit = num \/\/ (10 ** i) % 10\r\n            # append to the bucket\r\n            buckets[digit].append(num)\r\n\r\n        # 2. get each bucket and append to the array\r\n        k = 0\r\n        for bucket in buckets:\r\n            for num in bucket:\r\n                nums[k] = num\r\n                k += 1\r\n\r\n    return nums\r\n\r\n\r","votes":154419.216},{"text":"\r\n    n = len(nums)\r\n    \r\n    # The maximum number of digits needed to represent the largest number in the list.\r\n    max_digits = len(str(max(nums)))\r\n\r\n    # Create a list of buckets.\r\n    buckets = [[] for _ in range(10)]\r\n\r\n    # Loop over the digits.\r\n    for i in range(max_digits):\r\n        # Determine the number of digits to use to sort the numbers.\r\n        digit = i + 1\r\n\r\n        # Re-initialize the buckets.\r\n        buckets = [[] for _ in range(10)]\r\n\r\n        # Sort the numbers in the list.\r\n        for num in nums:\r\n            # Get the digit at the specified position.\r\n            d = num \/\/ 10 ** i % 10\r\n\r\n            # Add the number to the bucket.\r\n            buckets[d].append(num)\r\n\r\n        # Concatenate the numbers in the buckets.\r\n        nums = [num for bucket in buckets for num in bucket]\r\n\r\n    # Return the sorted numbers.\r\n    return nums\r\n\r\n\r","votes":154958.184},{"text":"\r\n    max_num_digit = len(str(max(nums)))\r\n    for digit in range(max_num_digit):\r\n        counters = [0] * 10\r\n        for num in nums:\r\n            counters[(num \/\/ 10**digit) % 10] += 1\r\n        for i in range(1, 10):\r\n            counters[i] += counters[i-1]\r\n        output = [0] * len(nums)\r\n        for num in reversed(nums):\r\n            output[counters[(num \/\/ 10**digit) % 10] - 1] = num\r\n            counters[(num \/\/ 10**digit) % 10] -= 1\r\n        nums = output[:]\r\n    return nums\r\n\r\n\r","votes":161183.2},{"text":"\r\n    # Write your code here.\r\n    # You are allowed to use the following built-in function\r\n    # int(x): convert x to an integer\r\n    # max(x): return maximum value of x\r\n    # len(x): return length of x\r\n    # range(x): return the whole range of x\r\n    # return: return the sorted list\r\n\r\n    # O(n) time complexity, O(1) space complexity\r\n    digits = [list() for _ in range(10)]\r\n    max_length = max([len(str(num)) for num in nums])\r\n    for i in range(max_length):\r\n        for num in nums:\r\n            digit = num \/\/ (10 ** i) % 10\r\n            digits[digit].append(num)\r\n        nums = []\r\n        for d in digits:\r\n            nums += d\r\n        digits = [list() for _ in range(10)]\r\n    return nums\r\n","votes":163675.224},{"text":"\r\n    max_digit = len(str(max(nums)))\r\n\r\n    # Create an array of 10 lists\r\n    buckets = [[] for _ in range(10)]\r\n\r\n    # Loop over the array of elements and sort them according to their digit\r\n    # in the place value\r\n    for i in range(max_digit):\r\n        for num in nums:\r\n            digit = (num \/\/ 10 ** i) % 10\r\n            buckets[digit].append(num)\r\n\r\n        # Sort each bucket and append it to the sorted array\r\n        nums = []\r\n        for bucket in buckets:\r\n            nums.extend(sorted(bucket))\r\n\r\n        # Initialize each bucket for the next place value\r\n        for bucket in buckets:\r\n            bucket.clear()\r\n\r\n    return nums\r\n\r\n\r","votes":166429.444},{"text":"\r\n    k = 1\r\n    max_num = max(nums)\r\n    while max_num \/\/ k > 0:\r\n        count = [0] * 10\r\n        output = [0] * len(nums)\r\n        for i in range(len(nums)):\r\n            count[(nums[i] \/\/ k) % 10] += 1\r\n\r\n        for i in range(1, 10):\r\n            count[i] += count[i - 1]\r\n\r\n        for i in range(len(nums) - 1, -1, -1):\r\n            output[count[(nums[i] \/\/ k) % 10] - 1] = nums[i]\r\n            count[(nums[i] \/\/ k) % 10] -= 1\r\n\r\n        for i in range(len(nums)):\r\n            nums[i] = output[i]\r\n\r\n        k *= 10\r\n    return nums\r\n\r\n\r","votes":168901.12},{"text":"\r\n    # Make a copy of the input list, so that we can modify it.\r\n    nums = nums[:]\r\n    # Determine the maximum number of digits.\r\n    # We'll use this to determine how many passes we need to make.\r\n    max_digits = 0\r\n    for num in nums:\r\n        num_digits = len(str(abs(num)))\r\n        if num_digits > max_digits:\r\n            max_digits = num_digits\r\n    # Now perform the radix sort.\r\n    sorted_nums = []\r\n    for digit in range(1, max_digits+1):\r\n        # Create a list of lists, one for each digit.\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            # Find the digit to use for this pass.\r\n            num_as_string = str(abs(num))\r\n            if len(num_as_string) < digit:\r\n                digit_to_use = 0\r\n            else:\r\n                digit_to_use = int(num_as_string[-digit])\r\n            # Append the number to the appropriate bucket.\r\n            buckets[digit_to_use].append(num)\r\n        # Reassemble the list.\r\n        nums = []\r\n        for bucket in buckets:\r\n            for num in bucket:\r\n                nums.append(num)\r\n        # If the list is sorted, we can stop.\r\n        if nums == sorted(nums):\r\n            break\r\n    return nums\r\n\r\n\r","votes":181470.296},{"text":"\r\n    max_digits = max([len(str(num)) for num in nums])\r\n    exp = 1\r\n    for _ in range(max_digits):\r\n        num_counts = [0] * 10\r\n        for num in nums:\r\n            num_counts[int((num \/\/ exp) % 10)] += 1\r\n        for i in range(1, 10):\r\n            num_counts[i] += num_counts[i - 1]\r\n        output = [0] * len(nums)\r\n        for i in range(len(nums) - 1, -1, -1):\r\n            digit = int((nums[i] \/\/ exp) % 10)\r\n            output[num_counts[digit] - 1] = nums[i]\r\n            num_counts[digit] -= 1\r\n        nums = output\r\n        exp *= 10\r\n    return nums\r\n\r\n\r","votes":183439.484},{"text":"\r\n    radix = 10\r\n    n = len(nums)\r\n    max_num = max(nums)\r\n    digits = len(str(max_num))\r\n    for i in range(digits):\r\n        count = [0 for _ in range(radix)]\r\n        out = [0 for _ in range(n)]\r\n        for j in range(n):\r\n            count[(nums[j]\/\/(radix**i)) % radix] += 1\r\n        for j in range(1, radix):\r\n            count[j] += count[j-1]\r\n        for j in range(n-1, -1, -1):\r\n            out[count[(nums[j]\/\/(radix**i)) % radix]-1] = nums[j]\r\n            count[(nums[j]\/\/(radix**i)) % radix] -= 1\r\n        nums = out[:]\r\n    return nums\r\n\r\n\r","votes":199240.404},{"text":"\r\n    if not nums:\r\n        return []\r\n    max_num = max(nums)\r\n    base = 10\r\n    exp = 1\r\n    while max_num \/\/ exp > 0:\r\n        counts = [0] * base\r\n        for num in nums:\r\n            digit = (num \/\/ exp) % base\r\n            counts[digit] += 1\r\n        for i in range(1, base):\r\n            counts[i] += counts[i - 1]\r\n        sorted_nums = [None] * len(nums)\r\n        for num in reversed(nums):\r\n            digit = (num \/\/ exp) % base\r\n            counts[digit] -= 1\r\n            sorted_nums[counts[digit]] = num\r\n        nums = sorted_nums\r\n        exp *= base\r\n    return nums\r\n\r\n\r","votes":259479.328},{"text":"\r\n    max_digits = max(nums)\r\n    exp = 1\r\n    \r\n    while max_digits \/ exp > 0:\r\n        count_sort(nums, exp)\r\n        exp *= 10\r\n    \r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    max_length = 0\r\n    for i in nums:\r\n        if len(str(i)) > max_length:\r\n            max_length = len(str(i))\r\n\r\n    output = [[] for i in range(10)]\r\n    for i in range(max_length):\r\n        for j in nums:\r\n            digit = int(str(j)[i])\r\n            output[digit].append(j)\r\n        nums = []\r\n        for i in output:\r\n            nums.extend(i)\r\n        output = [[] for i in range(10)]\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Hello World!\")\r\n\r\n    nums = [12, 111, 5, 65, 2, 3]\r\n    print(\"Before sorting: \" + str(nums))\r\n    nums = radix_sort(nums)\r\n    print(\"After sorting: \" + str(nums))\r\n\r\n    nums = [12, 111, 5, 65, 2, 3]\r\n    print(\"Before sorting: \" + str(nums))\r\n    nums = radix_sort(nums)\r\n    print(\"After sorting: \" + str(nums))\r\n\r\n    nums = [12, 111, 5, 65, 2, 3]\r\n    print(\"Before sorting: \" + str(nums))\r\n    nums = radix_sort(nums)\r\n    print(\"After sorting: \" + str(nums))\r\n\r\n    nums = [12, 111, 5, 65, 2, 3]\r\n    print(\"Before sorting: \" + str(nums))\r\n    nums = radix_sort(nums)\r\n    print(\"After sorting: \" + str(nums))\r\n\r","votes":null},{"text":"\r\n    max_length = max(nums) - min(nums)\r\n    # print(max_length)\r\n    if max_length == 0:\r\n        return nums\r\n    num_buckets = 10\r\n    # print(num_buckets)\r\n    buckets = [[0 for x in range(len(nums))] for _ in range(num_buckets)]\r\n    # print(buckets)\r\n    # print(len(buckets))\r\n    # print(len(buckets[0]))\r\n    # print(buckets[2])\r\n    for i in range(1, max_length + 1):\r\n        for j in range(len(nums)):\r\n            key = (nums[j] \/\/ (10 ** (i - 1))) % 10\r\n            buckets[key][j] = nums[j]\r\n        # print(buckets)\r\n        k = 0\r\n        for j in range(num_buckets):\r\n            for item in buckets[j]:\r\n                if item:\r\n                    nums[k] = item\r\n                    k += 1\r\n                else:\r\n                    continue\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(nums)):\r\n        if len(str(nums[i])) > max_length:\r\n            max_length = len(str(nums[i]))\r\n\r\n    buckets = [[] for _ in range(10)]\r\n    for _ in range(max_length):\r\n        for num in nums:\r\n            buckets[num % 10].append(num \/\/ 10)\r\n        nums = []\r\n        for bucket in buckets:\r\n            nums.extend(bucket)\r\n        for b in buckets:\r\n            b.clear()\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [1234, 345, 456, 543, 654, 765, 876, 987]\r\n    print(radix_sort(nums))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEX","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    divisor = 1\r\n    while max_num \/ divisor > 0:\r\n        nums = sort_by_digit(nums, divisor)\r\n        divisor *= 10\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    pass\r\n\r\n\r\n# Tests\r","votes":null},{"text":"\r\n    max_num_length = len(str(max(nums)))\r\n    for i in range(max_num_length):\r\n        counts = [0] * 10\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit = num \/\/ (10 ** i) % 10\r\n            counts[digit] += 1\r\n            buckets[digit].append(num)\r\n        nums[:] = [num for count in counts for num in buckets[count]]\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_val = max(nums)\r\n    max_dig = len(str(max_val))\r\n    for i in range(max_dig):\r\n        counting_sort(nums, i)\r\n    return nums\r\n\r","votes":null},{"text":"\r\n    # 1. find the maximum element\r\n    max_num = max(nums)\r\n    # 2. do counting sort for every digit\r\n    for digit in range(1, int(math.log(max_num, 10)) + 1):\r\n        # 3. count the numbers\r\n        count = [0] * 10\r\n        for num in nums:\r\n            count[get_digit(num, digit)] += 1\r\n        # 4. transform counts to indices\r\n        for i in range(1, 10):\r\n            count[i] += count[i - 1]\r\n        # 5. place the elements\r\n        output = [0] * len(nums)\r\n        for i in range(len(nums) - 1, -1, -1):\r\n            output[count[get_digit(nums[i], digit)] - 1] = nums[i]\r\n            count[get_digit(nums[i], digit)] -= 1\r\n        # 6. replace the input\r\n        nums = output\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # base 10\r\n    base = 10\r\n    # get the max number from the nums\r\n    max_num = max(nums)\r\n    # get the length of the max number\r\n    length = len(str(max_num))\r\n    # create the buckets\r\n    buckets = [[] for _ in range(base)]\r\n\r\n    # iterate over the number of digits\r\n    for i in range(length - 1, -1, -1):\r\n        for num in nums:\r\n            # get the digit at the index\r\n            digit = int(str(num)[i])\r\n            # append the num to the bucket\r\n            buckets[digit].append(num)\r\n        # start a new list for the new numbers\r\n        sorted_nums = []\r\n        # append each bucket to the new list\r\n        for bucket in buckets:\r\n            sorted_nums.extend(bucket)\r\n        # set the new list to the nums\r\n        nums = sorted_nums\r\n        # empty the buckets\r\n        buckets = [[] for _ in range(base)]\r\n\r\n    # return the sorted list\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Find max length of element\r\n    max_len = max(len(str(num)) for num in nums)\r\n    # Loop over each digit\r\n    for i in range(1, max_len + 1):\r\n        # Create a list to hold the buckets\r\n        buckets = [[] for _ in range(10)]\r\n        # Loop over each element\r\n        for num in nums:\r\n            # Get the digit at the current position\r\n            digit = int(str(num)[-i])\r\n            # Place element into current bucket\r\n            buckets[digit].append(num)\r\n        # Update the list of elements\r\n        nums = [num for bucket in buckets for num in bucket]\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Find the maximum number of digits\r\n    max_num = max(nums)\r\n    max_digits = 0\r\n    while max_num:\r\n        max_num \/\/= 10\r\n        max_digits += 1\r\n\r\n    # Sort each digit\r\n    for i in range(max_digits):\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit = num \/\/ 10 ** i % 10\r\n            buckets[digit].append(num)\r\n        nums = [num for bucket in buckets for num in bucket]\r\n\r\n    return nums\r\n\r\n\r\n# Test cases\r\nprint(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))\r\nprint(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))\r\nprint(radix_sort([3, 30, 35, 5, 9]))\r\nprint(radix_sort([10, 100, 1000, 10000, 100000]))\r\nprint(radix_sort([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9]))\r\nprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8","votes":null},{"text":"\r\n    max_length = max(nums)\r\n    num_digits = len(str(max_length))\r\n    for i in range(num_digits):\r\n        bucket_count = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit = num \/\/ 10 ** (num_digits - i - 1) % 10\r\n            bucket_count[digit].append(num)\r\n        nums = [num for bucket in bucket_count for num in bucket]\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = max(nums)\r\n    # print(max_length)\r\n    base = 10\r\n    while max_length > 0:\r\n        # print(max_length)\r\n        bucket = [[] for _ in range(base)]\r\n        for num in nums:\r\n            digit = num % base\r\n            bucket[digit].append(num)\r\n        nums = []\r\n        for bucket_list in bucket:\r\n            nums += bucket_list\r\n        max_length = max_length \/\/ base\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Create a list of buckets for each digit, each bucket is a list\r\n    buckets = [list() for _ in range(10)]\r\n\r\n    # Find the maximum number to know number of digits\r\n    max_num = max(nums)\r\n    digits = len(str(max_num))\r\n\r\n    # Loop for each digit\r\n    for exp in range(digits):\r\n        # Push elements into their respective bucket\r\n        for n in nums:\r\n            # Get the digit at the current place\r\n            digit = int(n \/ 10 ** exp) % 10\r\n            buckets[digit].append(n)\r\n\r\n        # Save the sorted elements into the nums list\r\n        nums = []\r\n        for bucket in buckets:\r\n            nums.extend(bucket)\r\n\r\n        # Clean the buckets for the next iteration\r\n        for bucket in buckets:\r\n            bucket.clear()\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(radix_sort([54, 26, 93, 17, 77, 31, 44, 55, 20]))\r\n    print(radix_sort([1, 123, 456, 23, 12, 11, 98, 56, 999]))\r\n    print(radix_sort([12, 14, 54, 78, 97, 54, 23, 14, 22, 33, 14, 44, 55, 66, 88, ","votes":null},{"text":"\r\n    if not nums:\r\n        return nums\r\n\r\n    max_element = max(nums)\r\n    bits = 0\r\n    while max_element:\r\n        max_element = max_element >> 1\r\n        bits += 1\r\n\r\n    buckets = [[] for _ in range(2**bits)]\r\n    for num in nums:\r\n        digit = 0\r\n        for i in range(bits):\r\n            digit = digit * 10 + (num >> (bits - i - 1)) & 0b1\r\n        buckets[digit].append(num)\r\n\r\n    nums.clear()\r\n    for bucket in buckets:\r\n        nums.extend(bucket)\r\n\r\n    return nums\r","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    pass\r\n\r\n\r","votes":null},{"text":"\r\n    max_digits = max(nums)\r\n    max_digits_length = len(str(max_digits))\r\n    for i in range(max_digits_length):\r\n        bins = [[] for _ in range(10)]\r\n        for num in nums:\r\n            bins[int(str(num)[i])].append(num)\r\n        nums = [num for bin in bins for num in bin]\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    length = len(nums)\r\n    \r\n    # Create a count array of 10 elements\r\n    count = [0] * 10\r\n    \r\n    # Find the maximum number to know number of digits\r\n    max1 = max(nums)\r\n    \r\n    # Do counting sort for every digit. Note that instead\r\n    # of passing digit number, exp is passed. exp is 10^i\r\n    # where i is current digit number\r\n    exp = 1\r\n    while max1\/exp > 0:\r\n        for i in range(length):\r\n            count[ (nums[i]\/exp)%10 ] = count[ (nums[i]\/exp)%10 ] + 1\r\n        \r\n        # Change count[i] so that count[i] now contains \r\n        # actual position of this digit in output array\r\n        for i in range(1, 10):\r\n            count[i] = count[i] + count[i - 1]\r\n        \r\n        # Build the output array\r\n        for i in range(length - 1, -1, -1):\r\n            output[ count[ (nums[i]\/exp)%10 ] - 1 ] = nums[i]\r\n            count[ (nums[i]\/exp)%10 ] = count[ (nums[i]\/exp)%10 ] - 1\r\n        \r\n        # Copy the output array to nums, so that nums \r\n        # now contains sorted numbers according to current\r\n        # digit\r\n        for i in range(length):\r\n            nums[i] = output[i]\r\n        \r\n        # Increase the value of exp by 1\r\n        exp = exp * 10\r\n    \r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    max_num = 0\r\n    for n in nums:\r\n        max_num = max(max_num, n)\r\n\r\n    # Find the maximum number of digits\r\n    # 1000 -> 4, 10000 -> 5, 1000000000 -> 10\r\n    max_digit_count = 1\r\n    while max_digit_count * 10 <= max_num:\r\n        max_digit_count *= 10\r\n\r\n   ","votes":null},{"text":"\r\n    # Find the maximum number to know number of digits\r\n    max_num = max(nums)\r\n    digits = 0\r\n    while max_num:\r\n        max_num = max_num \/\/ 10\r\n        digits += 1\r\n    # Do counting sort for every digit. Note that instead\r\n    # of passing digit number, exp is passed. exp is 10^i\r\n    # where i is current digit number\r\n    exp = 1\r\n    for i in range(digits):\r\n        count_sort(nums, exp)\r\n        exp *= 10\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    max_digits = max(nums)\r\n    max_digits = len(str(max_digits))\r\n\r\n    for i in range(max_digits):\r\n\r\n        counts = [0] * 10\r\n\r\n        for j in nums:\r\n            counts[int(str(j)[i])] += 1\r\n\r\n        for j in range(1, 10):\r\n            counts[j] += counts[j-1]\r\n\r\n        output = [None] * len(nums)\r\n\r\n        for j in reversed(nums):\r\n            output[counts[int(str(j)[i])-1]-1] = j\r\n            counts[int(str(j)[i])-1] -= 1\r\n\r\n        for j in range(len(nums)):\r\n            nums[j] = output[j]\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66]\r\n    print(radix_sort(nums))\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66, 1000]\r\n    print(radix_sort(nums))\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66, 1000, 1000000]\r\n    print(radix_sort(nums))\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66, 1000, 1000000, 10000000","votes":null},{"text":"\r\n    max_digits = max(nums).bit_length()\r\n    # sort by digits\r\n    for digit in range(max_digits, -1, -1):\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            bucket_index = (num >> digit) & 0b111\r\n            buckets[bucket_index].append(num)\r\n        nums = []\r\n        for bucket in buckets:\r\n            nums.extend(bucket)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    radix = 10\r\n    max_num = max(nums)\r\n\r\n   ","votes":null},{"text":"\r\n    max_digit = 0\r\n    for num in nums:\r\n        if len(str(num)) > max_digit:\r\n            max_digit = len(str(num))\r\n\r\n    for digit in range(max_digit, 0, -1):\r\n        digit_count = [0] * 10\r\n        num_idx = [0] * (len(nums) + 1)\r\n        for num in nums:\r\n            digit_count[int(str(num)[digit - 1])] += 1\r\n\r\n        for i in range(1, 10):\r\n            digit_count[i] += digit_count[i - 1]\r\n\r\n        for i in range(len(nums) - 1, -1, -1):\r\n            digit_val = int(str(nums[i])[digit - 1])\r\n            num_idx[digit_count[digit_val]] = nums[i]\r\n            digit_count[digit_val] -= 1\r\n\r\n        for i in range(len(nums)):\r\n            nums[i] = num_idx[i]\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66]\r\n    radix_sort(nums)\r\n    print(nums)\r\n","votes":null},{"text":"\r\n\r\n    max_length = max(nums)\r\n    base = 10\r\n\r\n   ","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    \r\n\r","votes":null},{"text":"\r\n    \r\n   ","votes":null},{"text":"\r\n    max_digits = len(str(max(nums)))\r\n\r\n    for digit in range(max_digits):\r\n        count = [0] * 10\r\n        for num in nums:\r\n            index = (num \/\/ (10 ** digit)) % 10\r\n            count[index] += 1\r\n\r\n        for i in range(1, 10):\r\n            count[i] += count[i - 1]\r\n\r\n        output = [0] * len(nums)\r\n        for num in reversed(nums):\r\n            index = (num \/\/ (10 ** digit)) % 10\r\n            output[count[index] - 1] = num\r\n            count[index] -= 1\r\n\r\n        nums = output\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66]\r\n    print(f'The sorted list is: {radix_sort(nums)}')\r\n\r\n    nums = [53, 3, 542, 748, 14, 214, 2, 6, 4, 5]\r\n    print(f'The sorted list is: {radix_sort(nums)}')\r\n\r\n    nums = [7, 4, 5, 0, 2, 1, 4, 9]\r\n    print(f'The sorted list is: {radix_sort(nums)}')\r\n\r\n    nums = [23, 34, 2, 3, 1, 4, 9, 23]\r\n    print(f'The sorted list is: {radix_sort(nums)}')\r\n\r\n    nums = [45, 78, 23, 19, 54","votes":null},{"text":"\r\n    maxDigit = max(nums)\r\n    exp = 1\r\n    while maxDigit \/ exp > 0:\r\n        nums = counting_sort(nums, exp)\r\n        exp *= 10\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    digits = int(math.ceil(math.log(max_num, 10)))\r\n    \r\n    for i in range(1, digits+1):\r\n        count = [0] * 10\r\n        output = [0] * len(nums)\r\n        \r\n        for j in range(len(nums)):\r\n            count[(nums[j] \/\/ (10 ** (i-1)) % 10)] += 1\r\n            \r\n        for j in range(1, 10):\r\n            count[j] += count[j-1]\r\n            \r\n        for j in range(len(nums)-1, -1, -1):\r\n            output[count[(nums[j] \/\/ (10 ** (i-1)) % 10)]-1] = nums[j]\r\n            count[(nums[j] \/\/ (10 ** (i-1)) % 10)] -= 1\r\n            \r\n        nums[:] = output[:]\r\n        \r\n    return nums\r\n\r\n# Test cases\r","votes":null},{"text":"\r\n    max_digit = 1\r\n    for num in nums:\r\n        if num >= max_digit:\r\n            max_digit = num\r\n    \r\n    for i in range(1, int(max_digit \/\/ 10) + 1):\r\n        # Create a list of lists, which will be our buckets\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            # Get the digit at the current iteration\r\n            # digit = num \/\/ 10 ** i % 10\r\n            digit = num \/\/ (10 ** i) % 10\r\n            # Append the number to the bucket corresponding to the digit\r\n            buckets[digit].append(num)\r\n        \r\n        # Flatten the buckets and update the original array\r\n        index = 0\r\n        for bucket in buckets:\r\n            for num in bucket:\r\n                nums[index] = num\r\n                index += 1\r\n    \r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = max([len(str(num)) for num in nums])\r\n    for _ in range(max_len):\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            buckets[int(str(num)[-1])].append(num)\r\n        nums = [num for bucket in buckets for num in bucket]\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # If the list is empty or consists of a single element, return it.\r\n    if not nums or len(nums) == 1:\r\n        return nums\r\n\r\n    # Initialize a list to store the current position of the elements.\r\n    pos = [0] * len(nums)\r\n\r\n    # Find the maximum number in the list.\r\n    max_num = max(nums)\r\n\r\n    # Loop through the different digits from left to right.\r\n    for d in range(1, len(str(max_num)) + 1):\r\n        # Count the number of elements with the same digit at the current position.\r\n        count = [0] * 10\r\n        for i in range(0, len(nums)):\r\n            count[(nums[i] \/\/ (10 ** (d - 1))) % 10] += 1\r\n\r\n        # Calculate the starting position of each digit.\r\n        for i in range(1, 10):\r\n            count[i] += count[i - 1]\r\n\r\n        # Place the elements at their correct position.\r\n        for i in range(len(nums) - 1, -1, -1):\r\n            pos[count[(nums[i] \/\/ (10 ** (d - 1))) % 10] - 1] = nums[i]\r\n            count[(nums[i] \/\/ (10 ** (d - 1))) % 10] -= 1\r\n\r\n        # Update the original list with the sorted elements.\r\n        for i in range(len(nums)):\r\n            nums[i] = pos[i]\r\n\r\n    return nums\r\n\r\n\r\n# Test cases\r\nprint(radix_sort([3, 5, 2, 6, 1, 4]))\r\nprint(radix_sort([-3, 5, -2, 6, -1, 4]))\r\nprint(radix_sort([3, 5, -2, 6, -","votes":null},{"text":"\r\n\r\n    # We need to know the maximum number of digits to use as a starting point\r\n    # for our sort. We can use the `max` built-in function to determine this.\r\n    # We can also use `len` to get the length of the number, so we can use\r\n    # that to get the maximum number of digits.\r\n    max_number_of_digits = len(str(max(nums)))\r\n\r\n    # Now we need to create an array to hold the results. We can use the\r\n    # same number of digits as our starting point.\r\n    results = [[] for _ in range(10)]\r\n\r\n    # Now we can iterate over each digit, starting at the last one\r\n    for digit_index in range(max_number_of_digits - 1, -1, -1):\r\n        # Now we can iterate over the nums, and add them to the\r\n        # correct results bin, based on the digit.\r\n        for num in nums:\r\n            # To get the digit, we can use string slicing, and then\r\n            # index the digit we want to get. We can do this by getting\r\n            # the digit index we're looking for, and then subtracting the\r\n            # digit index we're currently on.\r\n            digit = str(num)[digit_index]\r\n\r\n            # Now we can add the number to the correct results bin.\r\n            results[int(digit)].append(num)\r\n\r\n        # Now we can iterate over the results, and merge them back\r\n        # into the nums array.\r\n        nums = [num for sublist in results for num in sublist]\r\n\r\n    # Now we can return the sorted nums.\r\n    return nums\r\n\r\n\r\n# Now we can test it out.\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(radix_sort(nums))\r\n\r\n# Output:\r\n# [1","votes":null},{"text":"\r\n\r\n    # Create a list of all the unique digits\r\n    digits = set()\r\n    for num in nums:\r\n        while num:\r\n            digits.add(num % 10)\r\n            num \/\/= 10\r\n    # Sort the digits\r\n    digits = sorted(digits)\r\n\r\n    # Create an empty list for each digit\r\n    lists = [[] for _ in digits]\r\n\r\n    # Iterate over the input list\r\n    for num in nums:\r\n        # Iterate over the digits\r\n        for digit in digits:\r\n            # Append the number to the list for that digit\r\n            if num % 10 == digit:\r\n                lists[digits.index(digit)].append(num)\r\n                break\r\n            else:\r\n                num \/\/= 10\r\n        else:\r\n            # If we did not break out, append the number to the list for 0\r\n            lists[0].append(num)\r\n\r\n    # Iterate over the lists and append their sorted contents to the output\r\n    out = []\r\n    for nums in lists:\r\n        out.extend(sorted(nums))\r\n    return out\r\n\r\n\r","votes":null},{"text":"\r\n    # base 10\r\n    base = 10\r\n    # get the maximum number\r\n    max_num = max(nums)\r\n    # count the number of digits in the maximum number\r\n    max_digits = len(str(max_num))\r\n    # empty lists to store the sorted digits\r\n    lists = [[], [], [], [], [], [], [], [], [], []]\r\n    # to store the sorted numbers\r\n    sorted_nums = []\r\n    # iterate over the number of digits\r\n    for i in range(max_digits):\r\n        # iterate over the list of numbers\r\n        for num in nums:\r\n            # get the digit in the current position\r\n            digit = int(str(num)[-1 - i])\r\n            # append the number to the sorted list at the index of the digit\r\n            lists[digit].append(num)\r\n        # make the sorted numbers list empty\r\n        sorted_nums = []\r\n        # iterate over the lists of numbers\r\n        for i in range(base):\r\n            # iterate over the numbers in the current list\r\n            for num in lists[i]:\r\n                # append the number to the sorted numbers list\r\n                sorted_nums.append(num)\r\n    # return the sorted numbers list\r\n    return sorted_nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66]\r\n    print(f\"The sorted list of numbers is: {radix_sort(nums)}\")\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(d*(n+b))\r\nSPACE COMPLEXITY: O(n+b)\r\n[where, d = number of digits, n = number of elements, b = base]\r\n\r\nSAMPLE INPUT AND OUTPUT:\r\n\r\nSAMPLE 1\r\n\r\n","votes":null},{"text":"\r\n    max_elem = max(nums)\r\n    exp = 1\r\n    while max_elem \/ exp > 1:\r\n        count_sort(nums, exp)\r\n        exp *= 10\r\n\r\n\r","votes":null},{"text":"\r\n    max_digits = max([len(str(num)) for num in nums])\r\n    for place in range(1, max_digits + 1):\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            buckets[int(str(num)[-place])].append(num)\r\n        nums = [item for sublist in buckets for item in sublist]\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Find the maximum value of the range in the list\r\n    max_val = max(nums)\r\n    # Find the number of digits in the max value\r\n    digits = len(str(max_val))\r\n    # Set a counter to keep track of the current digit we are sorting\r\n    counter = 0\r\n    # Set a temporary list to hold the sorted values\r\n    temp = []\r\n    # Set a list to hold the buckets\r\n    buckets = [[], [], [], [], [], [], [], [], [], []]\r\n    # Loop through the digits and sort the values\r\n    while counter < digits:\r\n        # Go through the list and place the values in the correct bucket\r\n        for num in nums:\r\n            buckets[int(str(num)[counter])].append(num)\r\n        # Go through the buckets and add the values back to the list\r\n        for bucket in buckets:\r\n            for num in bucket:\r\n                temp.append(num)\r\n        # Empty the buckets\r\n        for bucket in buckets:\r\n            bucket[:] = []\r\n        # Increment the counter\r\n        counter += 1\r\n    # Return the sorted list\r\n    return temp\r\n\r\n\r\n# Test case 1\r\nprint radix_sort([170, 45, 75, 90, 802, 24, 2, 66])\r\n# Output: [2, 24, 45, 66, 75, 90, 170, 802]\r\n\r\n# Test case 2\r\nprint radix_sort([37, 3, 39, 46, 10])\r\n# Output: [3, 10, 33, 37, 39, 46]\r\n\r\n# Test case 3\r\nprint radix_sort([])\r\n# Output: []\r\n\r\n# Test case 4\r\nprint radix_sort([-2, -5, ","votes":null},{"text":"\r\n    return radix_sort_recursive(nums, 10)\r\n\r","votes":null},{"text":"\r\n    # 1. Find the maximum number of digits in the list\r\n    max_digits = max([len(str(num)) for num in nums])\r\n\r\n    # 2. Do counting sort for every digit, from most significant digit to least significant digit\r\n    for i in range(max_digits):\r\n        digit_counts = [0] * 10\r\n        for num in nums:\r\n            digit = int(str(num)[-i - 1])\r\n            digit_counts[digit] += 1\r\n\r\n        # Update nums to the digit counts\r\n        for j in range(1, 10):\r\n            digit_counts[j] += digit_counts[j - 1]\r\n        for num in reversed(nums):\r\n            digit = int(str(num)[-i - 1])\r\n            digit_counts[digit] -= 1\r\n            nums[digit_counts[digit]] = num\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    maximum = max(nums)\r\n    for i in range(1, maximum + 1):\r\n        nums = radix_sort_pass(nums, i)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Find the maximum value in the array\r\n    max_num = max(nums)\r\n    # Find the number of digits in the maximum value\r\n    # This will be the number of passes\r\n    num_digits = len(str(max_num))\r\n\r\n    # Create a list of buckets\r\n    buckets = [[] for _ in range(10)]\r\n\r\n    # Sort the elements based on the first digit\r\n    for num in nums:\r\n        digit = num \/\/ 10**(num_digits-1)\r\n        buckets[digit].append(num)\r\n\r\n    # Sort the elements for each bucket\r\n    # by recursively calling the same function\r\n    for i in range(10):\r\n        if buckets[i]:\r\n            buckets[i] = radix_sort(buckets[i])\r\n\r\n    # Flatten the buckets\r\n    sorted_nums = [item for sublist in buckets for item in sublist]\r\n    return sorted_nums\r\n\r\n# Test program\r","votes":null},{"text":"\r\n\r\n    # TODO: Write your code here\r\n    max_num = max(nums)\r\n    digits = int(math.log10(max_num)) + 1\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        bucket = num \/\/ (10 ** (digits - 1))\r\n        buckets[bucket].append(num)\r\n    sorted_nums = []\r\n    for bucket in buckets:\r\n        if bucket:\r\n            radix_sort(bucket)\r\n            sorted_nums.extend(bucket)\r\n    return sorted_nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [23, 45, 7, 13, 14, 45, 5, 9, 8, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    print(f\"Sorted numbers are: {radix_sort(nums)}\")\r\n","votes":null},{"text":"\r\n\r\n    # 0. Create a list to store the sorted numbers\r\n    # 1. Find the maximum number in the list\r\n    max_num = max(nums)\r\n\r\n    # 2. Find the length of the maximum number\r\n    max_length = len(str(max_num))\r\n\r\n    # 3. Create a list to store the sorted numbers\r\n    sorted_nums = [0] * len(nums)\r\n\r\n    # 4. Iterate for each digit\r\n    for i in range(max_length):\r\n        # 5. Create a list to store the counts of each digit\r\n        counts = [0] * 10\r\n\r\n        # 6. Create a list to store the result of counting each digit\r\n        result = [0] * len(nums)\r\n\r\n        # 7. Iterate for each number\r\n        for num in nums:\r\n            # 8. Find the digit of the number\r\n            digit = int(str(num)[i])\r\n\r\n            # 9. Increment the count of the digit\r\n            counts[digit] += 1\r\n\r\n        # 10. Iterate for each digit\r\n        for j in range(1, 10):\r\n            # 11. Find the sum of the counts of all the lesser digits\r\n            counts[j] += counts[j - 1]\r\n\r\n        # 12. Iterate for each number\r\n        for num in reversed(nums):\r\n            # 13. Find the digit of the number\r\n            digit = int(str(num)[i])\r\n\r\n            # 14. Find the index of the digit in the result list\r\n            index = counts[digit] - 1\r\n\r\n            # 15. Decrement the count of the digit\r\n            counts[digit] -= 1\r\n\r\n            # 16. Store the number in the result list\r\n            result[index] = num\r\n\r\n        # 17","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    # find the number of digits in the max number\r\n    num_digits = len(str(max_num))\r\n    # make a list of buckets for each place\r\n    buckets = [[] for _ in range(10)]\r\n    # for each digit\r\n    for i in range(num_digits):\r\n        # for each number\r\n        for num in nums:\r\n            # get the digit at the current index\r\n            digit = num \/\/ 10 ** i % 10\r\n            # append the number to the bucket\r\n            buckets[digit].append(num)\r\n        # replace the list of numbers with the numbers from the buckets\r\n        nums = sum(buckets, [])\r\n\r\n\r","votes":null},{"text":"\r\n    # Find the maximum length of any number\r\n    max_length = 0\r\n    for num in nums:\r\n        max_length = max(max_length, len(str(num)))\r\n    # Create buckets for each digit and sort\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        for digit in str(num):\r\n            buckets[int(digit)].append(num)\r\n    # Sort buckets\r\n    sorted_nums = []\r\n    for bucket in buckets:\r\n        for num in bucket:\r\n            sorted_nums.append(num)\r\n    return sorted_nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_digits = max(nums)\r\n    digits = 0\r\n    while max_digits:\r\n        max_digits \/\/= 10\r\n        digits += 1\r\n    for i in range(digits):\r\n        nums = sort_by_digit(nums, i)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # find the maximum number to know number of digits\r\n    max_num = max(nums)\r\n    digits = 0\r\n    while max_num:\r\n        max_num = max_num \/\/ 10\r\n        digits += 1\r\n\r\n    # Do counting sort for every digit. Note that instead\r\n    # of passing digit number, exp is passed.\r\n    exp = 1\r\n    for i in range(digits):\r\n        nums = countingSort(nums, exp)\r\n        exp *= 10\r\n\r\n    return nums\r\n\r","votes":null},{"text":"\r\n    k = max(nums)\r\n    k = len(str(k))\r\n    \r\n    # create the buckets\r\n    buckets = [[] for _ in range(10)]\r\n    \r\n    # iterate through the elements\r\n    for num in nums:\r\n        # get the last digit of the number\r\n        digit = num % 10\r\n        # append the number to the bucket\r\n        buckets[digit].append(num)\r\n            \r\n    # iterate through the buckets and append\r\n    # the elements to the result\r\n    result = []\r\n    for bucket in buckets:\r\n        result.extend(bucket)\r\n\r\n    return result \r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    pass\r\n\r\n\r\nclass RadixSortTest(unittest.TestCase):\r\n   ","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    digits = len(str(max_num))\r\n\r\n    for i in range(digits):\r\n        counts = [0] * 10\r\n\r\n        for num in nums:\r\n            counts[(num \/\/ 10 ** i) % 10] += 1\r\n\r\n        for j in range(1, 10):\r\n            counts[j] += counts[j - 1]\r\n\r\n        output = [0] * len(nums)\r\n\r\n        for k in reversed(nums):\r\n            output[counts[(k \/\/ 10 ** i) % 10] - 1] = k\r\n            counts[(k \/\/ 10 ** i) % 10] -= 1\r\n\r\n        nums = output\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66]\r\n    print(radix_sort(nums))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(d * (n + b))\r\nSPACE COMPLEXITY: O(n + b)\r\n[where d is the number of digits, and b is the base of the number system]\r\n\r\n","votes":null},{"text":"\r\n    max_digits = max(nums)\r\n    n = len(nums)\r\n\r\n    # Create an empty list to store sorted elements\r\n    sorted_nums = [0] * n\r\n\r\n    # Loop from least significant digit to most significant digit\r\n    for place in range(1, max_digits + 1):\r\n        # Create a list of buckets to store elements in their place\r\n        buckets = [[] for _ in range(10)]\r\n\r\n        # Go through each element in the array\r\n        for num in nums:\r\n            # Determine the bucket number based on the element's place\r\n            bucket = (num \/\/ place) % 10\r\n            # Append the element to its bucket\r\n            buckets[bucket].append(num)\r\n\r\n        # Insert the elements back into the array\r\n        i = 0\r\n        for bucket in buckets:\r\n            for num in bucket:\r\n                sorted_nums[i] = num\r\n                i += 1\r\n\r\n    # Return the sorted array\r\n    return sorted_nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Find the maximum\r\n    max_num = max(nums)\r\n    # Create a list of buckets to store sorted elements\r\n    bucket_list = [[] for _ in range(10)]\r\n    # Iterate through the numbers to sort\r\n    for num in nums:\r\n        # Find the digit that will be placed in the bucket\r\n        digit = num \/\/ max_num\r\n        # Add the number to the bucket list\r\n        bucket_list[digit].append(num)\r\n    # Create a list to store the sorted elements\r\n    sorted_list = []\r\n    # Iterate through the buckets\r\n    for bucket in bucket_list:\r\n        # Iterate through the numbers in the bucket\r\n        for num in bucket:\r\n            # Add the number to the sorted list\r\n            sorted_list.append(num)\r\n    # Return the sorted list\r\n    return sorted_list\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n)\r\nSPACE COMPLEXITY: O(n)\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTo get the time complexity of radix sort we calculate the number of operations\r\nthat the algorithm does.\r\n\r\nThe first loop (max_num) operates n times.\r\nThe second loop (bucket_list) operates n times.\r\nThe final loop (sorted_list) operates n times.\r\n\r\nSo the total number of operations is n + n + n = 3n.\r\n\r\nWe ignore the constants and we get O(n).\r\n\r\nThe space complexity of radix sort is O(n) because we are creating a new list\r\nto store the sorted elements.\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTo implement radix sort in Python we will use the \/\/ operator to find the\r\ndigi","votes":null},{"text":"\r\n    # Get the maximum value in the list\r\n    max_num = max(nums)\r\n    \r\n    # Get the length of the longest number in the list\r\n    num_len = len(str(max_num))\r\n    \r\n    # Create a list of lists of the same length as the numbers in the list\r\n    buckets = [[0 for _ in range(len(nums))]for _ in range(10)]\r\n    \r\n    # Sort the numbers\r\n    for i in range(num_len):\r\n        for j in range(len(nums)):\r\n            digit = int(str(nums[j])[-(i + 1)])\r\n            buckets[digit].append(nums[j])\r\n        nums = []\r\n        for bucket in buckets:\r\n            for num in bucket:\r\n                nums.append(num)\r\n        buckets = [[0 for _ in range(len(nums))]for _ in range(10)]\r\n    return nums\r\n\r\nif __name__ == '__main__':\r\n    print(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))\r\n    print(radix_sort([170, 45, 75, 90, 802, 24, 2, 66, 1, 4]))\r\n    print(radix_sort([15, 7, 10, 35, 20, 25, 30, 45, 2, 1]))\r\n    print(radix_sort([12, 11, 13, 5, 6, 7]))\r\n    print(radix_sort([170, 45, 75, 90, 802, 24, 2, 66, 1, 4]))\r\n    print(radix_sort([90, 8","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    length = len(str(max_num))\r\n    buckets = [[] for _ in range(10)]\r\n    for digit in range(length):\r\n        for num in nums:\r\n            digit_num = num \/\/ (10**digit) % 10\r\n            buckets[digit_num].append(num)\r\n        nums = []\r\n        for bucket in buckets:\r\n            nums.extend(bucket)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_element = max(nums)\r\n    # Find the number of digits in the maximum element\r\n    num_digits = len(str(max_element))\r\n    # Create a list to store the sorted elements\r\n    sorted_list = [None] * len(nums)\r\n    # Create a list of lists to store the elements of nums\r\n    # in order of their digits in a particular position\r\n    buckets = [[] for i in range(10)]\r\n    # Iterate over the digits of the maximum element\r\n    for digit in range(num_digits, -1, -1):\r\n        # Iterate over the list of elements\r\n        for num in nums:\r\n            # Append the current element to the bucket\r\n            # corresponding to its digit at the current position\r\n            buckets[num \/\/ (10 ** digit) % 10].append(num)\r\n        # Update the current position of the elements\r\n        # in the list of sorted elements\r\n        position = 0\r\n        # Iterate over the buckets\r\n        for bucket in buckets:\r\n            # Iterate over the elements in the bucket\r\n            for element in bucket:\r\n                # Append the element to the list of sorted elements\r\n                sorted_list[position] = element\r\n                # Update the current position\r\n                position += 1\r\n            # Clear the bucket\r\n            bucket.clear()\r\n    return sorted_list\r\n\r\n\r","votes":null},{"text":"\r\n    return radix_sort_helper(nums, 0)\r\n\r","votes":null},{"text":"\r\n    max_len = max(nums)\r\n    max_len_len = len(str(max_len))\r\n\r\n    for i in range(max_len_len):\r\n        count = [[] for _ in range(10)]\r\n        for num in nums:\r\n            count[num % 10].append(num)\r\n        nums = []\r\n        for i in range(10):\r\n            nums += count[i]\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_digits = max(nums).bit_length()\r\n    for k in range(max_digits):\r\n        count = [0] * 10\r\n        for i in nums:\r\n            count[(i >> k) & 0xF] += 1\r\n        for i in range(1, 10):\r\n            count[i] += count[i - 1]\r\n        output = [0] * len(nums)\r\n        for i in reversed(nums):\r\n            output[count[(i >> k) & 0xF] - 1] = i\r\n            count[(i >> k) & 0xF] -= 1\r\n        nums = output\r\n    return nums\r\n\r\nnums = [170, 45, 75, 90, 802, 24, 2, 66]\r\n\r\nprint(radix_sort(nums))\r\n\r\n# Time complexity: O(d(n+k)) where d is the number of digits and k is the range of keys\r\n# Space complexity: O(n+k)\r\n\r\n# Radix sort is a special case of MSD radix sort that uses counting sort under the hood.\r\n# It is one of the fastest and most efficient sorting algorithms.\r\n# It is also used to implement bucket sort.\r\n\r\n# References:\r\n# https:\/\/en.wikipedia.org\/wiki\/Radix_sort\r\n# https:\/\/en.wikipedia.org\/wiki\/Bucket_sort\r\n# https:\/\/en.wikipedia.org\/wiki\/Counting_sort\r\n# https:\/\/en.wikipedia.org\/wiki\/Most_significant_digit_first\r\n# https:\/\/www.geeksforgeeks.org\/radix-sort\/\r\n# https:\/\/www.geeksforgeeks.org\/bucket-sort-2\/\r\n# https:\/\/www.geeksforgeeks.org\/counting-sort\/\r\n# https:\/\/www","votes":null},{"text":"\r\n    max_num_len = max([len(str(num)) for num in nums])\r\n    for i in range(max_num_len):\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit = int(str(num)[i]) if i < len(str(num)) else 0\r\n            buckets[digit].append(num)\r\n        nums = [item for bucket in buckets for item in bucket]\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [8, 3, 2, 1, 6, 10, 20, 11, 7]\r\n    print(radix_sort(nums))\r\n\r\n    nums = [12, 23, 1, 90, 34, 123, 1234, 12345]\r\n    print(radix_sort(nums))\r\n\r\n    nums = [123, 12, 1234, 123, 12345, 123456, 1234567, 12345678, 123456789]\r\n    print(radix_sort(nums))\r\n\r\n    nums = [123456789, 12345678, 1234567, 123456, 12345, 1234, 123, 12, 1234567890]\r\n    print(radix_sort(nums))\r\n\r\n    nums = [123456789, 12345678, 1234567, 123456, 12345, 1234","votes":null},{"text":"\r\n    # Sorting a list of elements using Radix Sort\r\n    # Input: A list of elements\r\n    # Output: A sorted list of elements\r\n    # Time Complexity: O(d(n+b)), where n is the number of elements\r\n    # Space Complexity: O(d(n+b))\r\n    # Dividing a set into subsets based on the significant digits (radix sort)\r\n    # [1, 22, 12, 21, 14, 41, 24, 42]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, 2, 2, 4, 4]\r\n    # [1, 1, 1, 2, ","votes":null},{"text":"\r\n    max_digits = max(nums).bit_length()\r\n    for _ in range(max_digits):\r\n        nums = counting_sort(nums, 1)\r\n    return nums\r\n\r","votes":null},{"text":"\r\n    \r\n    # Find max length of the numbers\r\n    max_length = 0\r\n    for n in nums:\r\n        if len(str(n)) > max_length:\r\n            max_length = len(str(n))\r\n\r\n    # Loop through each index of the number\r\n    for i in range(max_length):\r\n        # Create a list to store the number of counts\r\n        counts = [0] * 10\r\n\r\n        # Count the number of elements for each index\r\n        for n in nums:\r\n            counts[int(str(n)[i])] += 1\r\n\r\n        # Calculate the starting position of each element\r\n        for j in range(1, 10):\r\n            counts[j] += counts[j-1]\r\n\r\n        # Create a new list with the sorted numbers\r\n        new_nums = [0] * len(nums)\r\n\r\n        # Loop through the list of numbers and assign them to the new list\r\n        for n in nums:\r\n            new_nums[counts[int(str(n)[i])]-1] = n\r\n            counts[int(str(n)[i])] -= 1\r\n\r\n        # Assign the new list to the old list\r\n        nums = new_nums\r\n    \r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [12, 19, 3, 5, 67, 34, 34, 2","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    num_digits = len(str(max_num))\r\n    digits = [[] for _ in range(10)]\r\n    for i in range(num_digits):\r\n        for num in nums:\r\n            digit = int(str(num)[i])\r\n            digits[digit].append(num)\r\n        nums = []\r\n        for lst in digits:\r\n            nums.extend(lst)\r\n        digits = [[] for _ in range(10)]\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Keep track of the maximum element in the list.\r\n    max_num = max(nums)\r\n    \r\n    # Create an array of 10 lists to hold the numbers and sort them.\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        # Get the digit at the current place in the number\r\n        digit = num % 10\r\n        \r\n        # Add the number to the bucket of the digit.\r\n        buckets[digit].append(num)\r\n    \r\n    # Sort each bucket and add the numbers to the sorted list.\r\n    sorted_nums = []\r\n    for bucket in buckets:\r\n        # Sort the bucket.\r\n        bucket.sort()\r\n        \r\n        # Add each number in the bucket to the sorted list.\r\n        for num in bucket:\r\n            sorted_nums.append(num)\r\n        \r\n    # Return the sorted list.\r\n    return sorted_nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Create a list of numbers to sort.\r\n    nums = [4, 10, 45, 25, 19, 22, 15, 17]\r\n    \r\n    # Call the function to sort the list.\r\n    sorted_nums = radix_sort(nums)\r\n    \r\n    # Print the sorted list.\r\n    print(sorted_nums)\r\n\r\n\r\n\r\n# Code runs in O(d(n+b)) time where d is the number of digits \r\n# in the largest element in the array and b is the base. \r\n# The space complexity is O(d(n+b)) because we have to create \r\n# an array for each digit.\r\n\r\n\r\n# 1) Create a function to sort a list of elements using radix sort.\r\n# 2) Create a variable to track the maximum element in the list.\r\n# 3) Create an array of 10 arrays to hold the numbers and sort them.\r\n# 4) Sort eac","votes":null},{"text":"\r\n\r\n    # Base case: if the list has length 1, it's already sorted\r\n    if len(nums) == 1:\r\n        return nums\r\n\r\n    # Find the largest number:\r\n    largest = max(nums)\r\n\r\n    # Find the number of digits in largest:\r\n    largest_digits = len(str(largest))\r\n\r\n    # Create a list to store the sorted numbers\r\n    sorted_nums = [0] * len(nums)\r\n\r\n    # Iterate through the digits from least significant to most significant:\r\n    for digit in range(largest_digits):\r\n\r\n        # Create a list of empty buckets\r\n        buckets = [[] for i in range(10)]\r\n\r\n        # Iterate through the list of numbers:\r\n        for num in nums:\r\n\r\n            # Convert the number to a string:\r\n            num_as_string = str(num)\r\n\r\n            # Get the digit we are currently considering\r\n            digit_as_int = int(num_as_string[-(digit+1)])\r\n\r\n            # Add number to the bucket corresponding to the current digit\r\n            buckets[digit_as_int].append(num)\r\n\r\n        # Iterate through buckets and copy numbers into the sorted list\r\n        position = 0\r\n        for bucket in buckets:\r\n            for num in bucket:\r\n                sorted_nums[position] = num\r\n                position += 1\r\n\r\n    return sorted_nums\r\n\r\n\r","votes":null}],"time":{"count":13.0,"avg":172009.9658461538,"std":30586.5119545092,"cov":0.1778182549}}
{"id":517,"question":"def largest_pos(list1):\r\n    \"\"\"Write a python function to find the largest postive number from the given list.\"\"\"","answers":[{"text":"\r\n    \r\n    list1.sort()\r\n    answer = list1[-1]\r\n    if answer > 0:\r\n        return answer\r\n    else:\r\n        return 'The list does not contain any positive number.'\r\n\r\n\r","votes":73401.592},{"text":"\r\n    max_num = 0\r\n    for i in list1:\r\n        if i > max_num:\r\n            max_num = i\r\n    return max_num\r\n\r\n\r","votes":76976.236},{"text":"\r\n    largest = -1\r\n    for item in list1:\r\n        if item > largest and item > 0:\r\n            largest = item\r\n    return largest\r\n\r\n\r","votes":76986.7},{"text":"\r\n    \r\n    if len(list1) == 0:\r\n        return None\r\n    else:\r\n        largest = 0\r\n        for i in range(0, len(list1)):\r\n            if list1[i] > largest:\r\n                largest = list1[i]\r\n        return largest\r\n\r\n\r","votes":79223.32},{"text":"\r\n    list1 = list(filter(lambda x: x > 0, list1))\r\n    return max(list1)\r\n\r\n\r","votes":79679.388},{"text":"\r\n    return max(filter(lambda x: x > 0, list1))\r\n\r\n\r","votes":84274.264},{"text":"\r\n    \r\n    # list1 = [1,2,3,4,5,6,7,8,9,10]\r\n    # largest = 0\r\n    # for i in list1:\r\n    #     if i>largest:\r\n    #         largest = i\r\n    # return largest\r\n    \r\n    # Method 2\r\n    largest = 0\r\n    for i in list1:\r\n        if i > largest and i > 0:\r\n            largest = i\r\n    return largest\r\n\r\n\r\n# 3. Write a python function to find the largest postive number from the given list.\r\n\r","votes":87423.6},{"text":"\r\n    \r\n    list1 = [int(x) for x in list1]\r\n    sorted_list = sorted(list1)\r\n    return sorted_list[-1]\r\n\r\nprint(largest_pos([-2, -5, 1, 0, -10]))\r\n\r\n# 5. Write a Python function to find the largest positive number from the given list.\r\n\r","votes":88135.1},{"text":"\r\n\r\n    if list1 == [0]:\r\n        return 0\r\n    else:\r\n        return max(list1)\r\n\r\n\r","votes":89505.864},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        if i > 0:\r\n            list2.append(i)\r\n    return max(list2)\r\n\r\n\r","votes":89967.888},{"text":"\r\n    l_list = []\r\n    for num in list1:\r\n        if num > 0:\r\n            l_list.append(num)\r\n    if l_list:\r\n        return max(l_list)\r\n    return 0\r\n\r\n\r","votes":90083.488},{"text":"\r\n    max_pos=0\r\n    for i in list1:\r\n        if i>0:\r\n            max_pos=max(max_pos,i)\r\n    return max_pos\r\n\r\n\r","votes":90262.164},{"text":"\r\n    l = []\r\n    for i in list1:\r\n        if i>0:\r\n            l.append(i)\r\n    if l:\r\n        return max(l)\r\n    else:\r\n        return 0\r\n\r","votes":93037.004},{"text":"\r\n    l = [x for x in list1 if x > 0]\r\n    return max(l)\r\n\r\n\r\nprint(largest_pos([-1, 2, 3, 4, -5]))\r\n\r\n\r\n# Exercise 3:\r","votes":94178.844},{"text":"\r\n\r\n    max_num = -1\r\n    for num in list1:\r\n        if num > 0:\r\n            if num > max_num:\r\n                max_num = num\r\n    return max_num\r\n\r\n\r","votes":94239.956},{"text":"\r\n    if list1 == []:\r\n        return None\r\n    max_num = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > max_num:\r\n            max_num = list1[i]\r\n    return max_num\r\n\r\n\r","votes":95219.988},{"text":"\r\n    large = 0\r\n    for i in list1:\r\n        if i > large:\r\n            large = i\r\n    return large\r\n\r","votes":95944.452},{"text":"\r\n    l=[]\r\n    for i in list1:\r\n        if i>0:\r\n            l.append(i)\r\n    return max(l)\r\n\r\nlist1 = [4, 6, 10, -2, 8, -10, 11, 1, 0, 20, 30]\r\nprint(largest_pos(list1))\r\n\r","votes":99821.628},{"text":"\r\n    largest = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest and list1[i] > 0:\r\n            largest = list1[i]\r\n    return largest\r\n\r\n\r","votes":101709.944},{"text":"\r\n    list1.sort()\r\n    return list1[-1]\r\n\r\n\r","votes":102102.38},{"text":"\r\n    count = 0\r\n    for i in list1:\r\n        if i > 0:\r\n            count = i\r\n    return count\r\n\r\n\r","votes":102468.848},{"text":"\r\n    list1.sort(key=abs)\r\n    return list1[-1]\r\n\r\n\r","votes":103697.86},{"text":"\r\n    pos_lst=[]\r\n    for i in range(len(list1)):\r\n        if list1[i]>0:\r\n            pos_lst.append(list1[i])\r\n    return max(pos_lst)\r\n\r\nlist1 = [1, -5, 0, 6, -7, 3, 1, -4, 2]\r\nprint(largest_pos(list1))\r\n\r\n\r\n# 2. Write a python function to find the largest negative number from the given list.\r","votes":104386.404},{"text":"\r\n    max = 0\r\n    for i in list1:\r\n        if i>max:\r\n            max = i\r\n    return max\r\n\r\n\r","votes":105077.256},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            list2.append(list1[i])\r\n    return max(list2)\r\n\r\n\r","votes":105163.064},{"text":"\r\n    list1.sort()\r\n    return list1[-1]\r\n\r\n\r\nprint(largest_pos([1, 2, 3, 4, 1, 5, 3, 6, 7, 8]))\r\n\r\n\r\n# Method 2\r","votes":106131.372},{"text":"\r\n\r\n    # sort the list and last element will be the largest.\r\n    list1.sort()\r\n\r\n    # return the last element.\r\n    return list1[-1]\r\n\r\n\r\n# call the function.\r\nprint(largest_pos([10, -2, 3, -5, 6, -7, 8, -9]))\r\nprint(largest_pos([10, 20, 30, 40, 50, 60, 70, 80, 90]))\r\nprint(largest_pos([10, -20, 30, -50, 60, -70, 80, -90]))\r\nprint(largest_pos([10, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(largest_pos([10, -2, 3, -5, 6, -7, 8, -9]))\r\n\r\n\r\n# Approach 2:\r","votes":106199.776},{"text":"\r\n    largest = 0\r\n    for i in range (0, len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\n\r","votes":107215.004},{"text":"\r\n    list1.sort()\r\n    return list1[-1]\r\n\r\nprint(largest_pos([-1, 0, 1, 2, 9, 5]))\r\n\r\n\r\n# 4. Write a python function to remove all the duplicates from the given list using\r\n# set.\r","votes":107575.984},{"text":"\r\n\r\n    list2=[]\r\n    for i in list1:\r\n        if i>0:\r\n            list2.append(i)\r\n    return max(list2)\r\n\r\nif __name__ == '__main__':\r\n    list1 = [10, -20, -5, 5, -1, 20, 22, 11, -9, 100, 102, 100]\r\n    print(largest_pos(list1))","votes":108922.908},{"text":"\r\n    max_num = list1[0]\r\n    for i in range(1, len(list1)):\r\n        if list1[i] > max_num:\r\n            max_num = list1[i]\r\n    return max_num\r\n\r\n\r\n# Calling the function\r\nlist1 = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]\r\nprint(f\"The largest positive number in list1 is: {largest_pos(list1)}\")\r\n\r\n# Time Complexity: O(n), where n is the length of the list1\r\n\r\n# Example 2:\r\n\r\n# Write a python function to find the largest number from the given list.\r","votes":109138.32},{"text":"\r\n    \r\n    # create a list to store the largest positive number\r\n    largest_pos = []\r\n    \r\n    # loop through the list\r\n    for number in list1:\r\n        # check if the number is positive\r\n        if number > 0:\r\n            # append the largest positive number to the list\r\n            largest_pos.append(number)\r\n\r\n    # sort the list in descending order\r\n    largest_pos.sort(reverse = True)\r\n\r\n    # return the first element\r\n    return largest_pos[0]\r\n\r\n\r\nlist1 = [1, 4, 5, 2, 10, -1, -5, 0, 3, 9, 20]\r\n\r\nprint('The largest positive number from the given list is: ', largest_pos(list1))\r\n\r\n\r\n\r","votes":111733.86},{"text":"\r\n    return max([i for i in list1 if i>0])\r\n\r\nprint(largest_pos([1, 2, 3, 4, -5, 6, -7, 8, 9]))\r\n\r\n#Expected output :\r\n#9\r\n\r\n#Solution :\r\n\r","votes":113539.592},{"text":"\r\n\r\n    a = list1\r\n    b = []\r\n    for i in a:\r\n        if i > 0:\r\n            b.append(i)\r\n\r\n    b.sort()\r\n\r\n    return b[-1]\r\n\r\n\r","votes":115827.192},{"text":"\r\n    max = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            if list1[i] > max:\r\n                max = list1[i]\r\n    return max\r\n\r\n\r","votes":116604.36},{"text":"\r\n    max = 0 \r\n    for i in list1:\r\n        if i>max:\r\n            max=i\r\n    return max\r\n\r","votes":118878.688},{"text":"\r\n    list_positive = []\r\n    for i in list1:\r\n        if i > 0:\r\n            list_positive.append(i)\r\n    return max(list_positive)\r\n\r\n\r","votes":118906.656},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        if i > 0:\r\n            list2.append(i)\r\n    return max(list2)\r\n\r\n\r\nprint(largest_pos([-1, 0, 4, 5, 6, 7, 8, 9, 10, 11]))\r\n\r\n\r","votes":119857.5},{"text":"\r\n\r\n    list2 = filter(lambda x: x >= 0, list1)\r\n    return max(list2)\r\n\r\n\r","votes":124754.116},{"text":"\r\n    list1 = list(map(int, list1))\r\n    return max(list1)\r\n\r\n\r","votes":125088.308},{"text":"\r\n\r\n    # Initialize the largest number\r\n    largest_num = 0\r\n\r\n    # Iterate through the list to find the largest number\r\n    for num in list1:\r\n        if num > largest_num and num > 0:\r\n            largest_num = num\r\n\r\n    # Return the largest number\r\n    return largest_num\r\n\r\n\r","votes":130378.944},{"text":"\r\n    max_num = 0\r\n    for i in list1:\r\n        if i > 0:\r\n            if i > max_num:\r\n                max_num = i\r\n    return max_num\r\n\r\n\r","votes":130628.652},{"text":"\r\n    a = list1[0]\r\n    for i in list1:\r\n        if i > a and i > 0:\r\n            a = i\r\n    return a\r\n\r\n\r\nlist1 = [1, -1, 2, 3, 4, 5]\r\nprint(largest_pos(list1))\r\n\r\n\r","votes":132997.42},{"text":"\r\n    \r\n    largest = 0\r\n    for i in list1:\r\n        if i > largest and i > 0:\r\n            largest = i\r\n    return largest\r\n\r","votes":133689.056},{"text":"\r\n    num_list = []\r\n    list1 = list(set(list1))\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            num_list.append(list1[i])\r\n    return max(num_list)\r\n\r","votes":139499.32},{"text":"\r\n\r\n    #list1 = [1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6]\r\n\r\n    max = 0\r\n    for item in list1:\r\n        if item > 0 and item > max:\r\n            max = item\r\n    return max\r\n\r\n\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6]))\r\n\r\n\r\n# Q2. Write a Python function to find the largest number from the given list.\r\n\r","votes":143201.672},{"text":"\r\n    if list1 == []:\r\n        return 0\r\n    else:\r\n        # Set the first number as the largest number\r\n        largest_num = list1[0]\r\n        for num in list1:\r\n            if num > largest_num:\r\n                largest_num = num\r\n        return largest_num\r\n\r\n\r","votes":143774.116},{"text":"\r\n    list1 = [x for x in list1 if x > 0]\r\n    return max(list1)\r\n\r\n\r","votes":144593.02},{"text":"\r\n    max_pos = list1[0]\r\n    for i in list1:\r\n        if i > max_pos and i > 0:\r\n            max_pos = i\r\n    return max_pos\r\n\r\n\r\nlist2 = [-5, 2, 2, 1, -3, 5, 6, -7, 5]\r\nprint(largest_pos(list2))\r\n\r\n# 3. Write a python function to find the sum of the first and last elements of the given list.\r","votes":145314.452},{"text":"\r\n\r\n    max = 0\r\n    for i in list1:\r\n        if i > 0:\r\n            max = i if max < i else max\r\n    return max\r\n\r\n\r","votes":150915.328},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\n\r","votes":155373.792},{"text":"\r\n    max_num = 0\r\n    for num in list1:\r\n        if num > 0 and num > max_num:\r\n            max_num = num\r\n    return max_num\r\n\r\n\r\nprint(largest_pos([3, 5, -2, 4, 1]))\r\nprint(largest_pos([3, 5, 2, 4, 1]))\r\nprint(largest_pos([3, 5, 2, -4, 1]))\r\nprint(largest_pos([-2, 5, 2, 4, 1]))\r\nprint(largest_pos([-2, 5, -2, 4, 1]))\r\nprint(largest_pos([-2, -5, -2, 4, 1]))\r\nprint(largest_pos([-2, -5, -2, -4, 1]))\r\nprint(largest_pos([-2, -5, -2, -4, -1]))\r\nprint(largest_pos([-2, -5, -2, -4, -1, 0]))\r\nprint(largest_pos([-2, -5, -2, -4, -1, -0]))\r","votes":158447.124},{"text":"\r\n    pos = []\r\n    for i in range(0, len(list1)):\r\n        if list1[i] > 0:\r\n            pos.append(list1[i])\r\n    return max(pos)\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]\r\nprint(largest_pos(list1))\r\n\r\n\r","votes":161211.472},{"text":"\r\n    #code here\r\n    pos=[]\r\n    for i in list1:\r\n        if i>0:\r\n            pos.append(i)\r\n            \r\n    return max(pos)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":161573.436},{"text":"\r\n    return max([i for i in list1 if i > 0])\r\n\r\n\r","votes":162021.608},{"text":"\r\n    result = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > result and list1[i] > 0:\r\n            result = list1[i]\r\n    return result\r\n\r\n\r\nprint(largest_pos([-5, 6, 2, 3, 4, 1, 0, -1]))\r\n\r\n\r","votes":165735.876},{"text":"\r\n    list2=[]\r\n    for i in range(len(list1)):\r\n        if list1[i]>0:\r\n            list2.append(list1[i])\r\n    if list2!=[]:\r\n        return max(list2)\r\n    else:\r\n        return None\r\nprint(largest_pos([2, 6, -4, 8, 10, -12, 0, -6]))\r\nprint(largest_pos([-2, -6, -4, -8, -10, -12, 0, -6]))\r\nprint(largest_pos([0, 0, -4, -8, -10, -12, 0, -6]))\r\nprint(largest_pos([2, 6, -4, 8, 10, -12, 0, -6, 0, 0, 0]))\r\nprint(largest_pos([2, 6, 4, 8, 10, -12, 0, -6, 0, 0, 0, -10]))\r\nprint(largest_pos([-10, -10, 0, -8, -10, -12, 0, -6, 0, 0, 0, -10]))\r\n\r\n\r","votes":168326.324},{"text":"\r\n    max_num = 0\r\n    for i in list1:\r\n        if i > 0:\r\n            if i > max_num:\r\n                max_num = i\r\n    return max_num\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [0, -4, 13, 12, 3, 1, 0, -12, 11, 12, -1, -4]\r\n    print(list1)\r\n    print(\"The largest postive number from the given list is: \", largest_pos(list1))\r\n    list2 = [12, 13, 11, 12, -12, -1, 0, 0, -4]\r\n    print(list2)\r\n    print(\"The largest postive number from the given list is: \", largest_pos(list2))\r\n    list3 = [-12, -4, 0, 0, 12, 13, 11, 12, -12, -1, -4]\r\n    print(list3)\r\n    print(\"The largest postive number from the given list is: \", largest_pos(list3))\r\n    list4 = [0, -12, -4, 0, 0, -12, -1, -4]\r\n    print(list4)\r\n    print(\"The largest postive number from the given list is: \", largest_pos(list4))\r\n    list5 = [0, -12, -4, 0, 0, -12, -1, -4, 0, 0, 0]\r\n    print(list5)\r\n    print(\"The largest postive number from the given list is: \", largest_pos(list5))\r\n    list6 = [-12, -4, -12, -4, -12, -4, -12, -4, -12, -4, -12, -4]\r\n    print(list6)","votes":170888.684},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n        if i > 0:\r\n            if i > largest:\r\n                largest = i\r\n    return largest\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5, -1]\r\nprint(largest_pos(list1))\r\n\r\n\r","votes":175101.248},{"text":"\r\n    # return the maximum number in the list\r\n    return max(list1)\r\n\r\n\r\nprint(largest_pos([1, 3, 5, 7, 8, 2, -1, 0]))\r\nprint(largest_pos([-1, -3, -5, -7, -2, 0]))\r\nprint(largest_pos([-1, -3, -5, -7, -2, 0, 1]))\r\nprint(largest_pos([-1, -3, -5, -7, -2, 0, 1, 3, 5, 7, 8, 2]))\r\n\r\n\r\n# =========================================================================================================================================\r\n# Challenge 04\r\n# Given a list of numbers, find the average of the numbers.\r\n\r\n\r","votes":175664.944},{"text":"\r\n    if len(list1) == 0:\r\n        return -1\r\n    else:\r\n        largest = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest and list1[i] > 0:\r\n            largest = list1[i]\r\n    return largest\r\n\r\n\r","votes":202540.744},{"text":"\r\n    max_num = 0\r\n    for num in list1:\r\n        if num > max_num:\r\n            max_num = num\r\n    print(\"The largest postive number is: \", max_num)\r\n\r\n\r","votes":null},{"text":"\r\n    max_list = 0\r\n    for i in list1:\r\n        if i > max_list:\r\n            max_list = i\r\n    return max_list\r\n\r\n\r\nprint(largest_pos([1, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(largest_pos([1, 3, 4, -2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(largest_pos([1, 3, 4, -2, 5, 6, 7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(largest_pos([1, 3, 4, -2, 5, 6, 7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(largest_pos([1, 3, 4, -2, 5, 6, 7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(largest_pos([1, 3, 4, -2, 5, 6, 7, -8, 9, 10,","votes":null},{"text":"\r\n\r\n    list1.sort()\r\n    for i in list1:\r\n        if i > 0:\r\n            return i\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    answer = 0\r\n    for i in list1:\r\n        if i > answer and i > 0:\r\n            answer = i\r\n    return answer\r\n\r\nprint(largest_pos([0, 5, 7, -9, 1, 3, 5, 6]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\r\nprint(largest_pos([-1, 5, 7, -9, 1, 3, 5, 6]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, 9]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -","votes":null},{"text":"\r\n    \r\n    # 1. \uc785\ub825 \ubc1b\uc740 \ub9ac\uc2a4\ud2b8\ub97c \uc21c\ud68c\ud558\uba74\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\r\n    # 2. \ucd5c\ub300\uac12\uc774 \uc5c6\uc73c\uba74 -1\uc744 \ucd9c\ub825\ud55c\ub2e4.\r\n\r\n    # \uc785\ub825 \ubc1b\uc740 list1\uc744 \uc21c\ud68c\ud55c\ub2e4.\r\n    for i in range(len(list1)):\r\n        \r\n        # list1[i]\uac00 \uc591\uc218\uc774\uba74\uc11c \ucd5c\ub300\uac12\uc774 \uc5c6\uc73c\uba74 \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud55c\ub2e4.\r\n        if list1[i] > 0:\r\n            if list1[i] > list1[0]:\r\n                list1[0] = list1[i]\r\n        \r\n        # list1[i]\uac00 \uc74c\uc218\uc774\uba74 \ucd5c\ub300\uac12\uc744 \ucd08\uae30\ud654\ud55c\ub2e4.\r\n        elif list1[i] < 0:\r\n            list1[0] = -1\r\n    \r\n    # \ucd5c\ub300\uac12\uc774 \uc5c6\uc73c\uba74 -1\uc744 \ucd9c\ub825\ud55c\ub2e4.\r\n    if list1[0] == -1:\r\n        print(-1)\r\n    \r\n    # \ucd5c\ub300\uac12\uc774 \uc788\uc73c\uba74 \ucd5c\ub300\uac12\uc744 \ucd9c\ub825\ud55c\ub2e4.\r\n    else:\r\n        print(list1[0])\r\n\r\n\r\nlist1 = [3, 1, 5, -2, 4, -5]\r\nlargest_pos(list1)\r\n\r\nlist1 = [3, -1, 5, 2, 4, -5]\r\nlargest_pos(list1)\r\n\r\nlist1 = [3, -1, 5, ","votes":null},{"text":"\r\n    list1 = [1, 2, 3, -5, -1]\r\n    list2 = []\r\n    for i in list1:\r\n        if i > 0:\r\n            list2.append(i)\r\n    return max(list2)\r\n\r\n\r\nprint(largest_pos(list1))\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort()\r\n    for i in range(len(list1)):\r\n        if list1[i]>0:\r\n            return list1[i]\r\n            break\r","votes":null},{"text":"\r\n    mx = 0\r\n    for i in list1:\r\n        if i > mx and i > 0:\r\n            mx = i\r\n    return mx\r\n\r\n\r\nprint(largest_pos([-2, -1, 0, 1, 2]))\r\nprint(largest_pos([-2, -1, 0, 1, 2, 3]))\r\nprint(largest_pos([-2, -1, 0, 1, 2, 3, 3, 4]))\r\nprint(largest_pos([-2, -1, 0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14]))\r\nprint(largest_pos([-2, -1, 0, 1, 2, 3, 3, 4, -5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14]))\r\nprint(largest_pos([-2, -1, 0, 1, 2, 3, 3, 4, -5, 6, 7, 8, -9, 9, 10, 11, 12, 13, 14]))\r\nprint(largest_pos([-2, -1, 0, 1, 2, 3, 3, 4, -5, 6, 7, 8, -9, -9, 10, 11, 12, 13, 14]))\r\nprint(largest_pos([-2, -1, 0, 1, 2, 3, 3, 4, -5, 6, 7, 8, -9, -9, 10, 11, 12, 1","votes":null},{"text":"\r\n    \r\n    # initialize empty list\r\n    largest_list=[]\r\n        \r\n    # check if the list is empty\r\n    if not list1:\r\n        return \"Empty list\"\r\n        \r\n    # iterate through the list\r\n    for i in list1:\r\n        # check if the item is a positive number\r\n        if i>0:\r\n            # add the item to the list\r\n            largest_list.append(i)\r\n        # check if the list is empty\r\n        elif not largest_list:\r\n            return \"No positive numbers\"\r\n            \r\n    # check if the list has only one value\r\n    if len(largest_list)==1:\r\n        return largest_list[0]\r\n    \r\n    # sort the list\r\n    largest_list.sort(reverse=True)\r\n    \r\n    # return the largest number\r\n    return largest_list[0]\r\n\r\n# test case 1\r\nlist1=[1,2,3,4]\r\nprint(largest_pos(list1))\r\n\r\n# test case 2\r\nlist1=[-1,-2,-3,-4]\r\nprint(largest_pos(list1))\r\n\r\n# test case 3\r\nlist1=[-1,2,-3,4]\r\nprint(largest_pos(list1))\r\n\r\n# test case 4\r\nlist1=[-1,-2,-3,-4]\r\nprint(largest_pos(list1))\r\n\r\n# test case 5\r\nlist1=[-1,-2,-3,-4]\r\nprint(largest_pos(list1))\r\n\r\n# test case 6\r\nlist1=[1,2,3,4,-1,-2,-3,-4]\r\nprint(largest_pos(list1))\r\n\r\n# test case 7\r\nlist1=[]\r\nprint(largest_pos(list1))\r\n\r\n# test case 8\r\nlist1=[1,2,-3,4]\r","votes":null},{"text":"\r\n    list2 = []\r\n    for i in range(0, len(list1)):\r\n        if list1[i] > 0:\r\n            list2.append(list1[i])\r\n    list2.sort()\r\n    return list2[len(list2) - 1]\r\n\r\n\r\n# Test\r\n\r\nprint(largest_pos([1, 2, 3, -4, 5]))\r\nprint(largest_pos([-1, 2, 3, -4, 5]))\r\nprint(largest_pos([-1, -2, -3, -4, -5]))\r\nprint(largest_pos([-1, 2, 3, -4, 5, 11, 12, 13, 14, 15]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -11, -12, -13, -14, -15]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, 11, 12, 13, 14,","votes":null},{"text":"\r\n    max_pos = 0\r\n    for num in list1:\r\n        if num > 0 and num > max_pos:\r\n            max_pos = num\r\n    print(max_pos)\r\n\r\nlist1 = [-1, -2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nlargest_pos(list1)\r\n\r","votes":null},{"text":"\r\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]\r\n    largest = list1[0]\r\n    for num in list1:\r\n        if num > largest and num > 0:\r\n            largest = num\r\n    return largest\r\n\r\n\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort()\r\n    for i in range(0, len(list1)):\r\n        if list1[i] > 0:\r\n            return list1[i]\r\n\r\n\r\nprint(largest_pos([-10, -1, -2, -3, -4, 0, 5, 6, 7, 8, 9, 10]))\r\nprint(largest_pos([10, 0, -10, -20, 30, 40, 50, 60, 70, 80, 90]))\r\nprint(largest_pos([-10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\r\nprint(largest_pos([-10, -1, -2, -3, -4, -5, -6, -7, -8, -9, 0]))\r\nprint(largest_","votes":null},{"text":"\r\n\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            return list1[i]\r\n\r\n\r\nlist1 = [1, 2, 5, -3, 7, 0, 2, -4, 10, 11, -12]\r\n\r\nprint(largest_pos(list1))\r\n\r\n# ------------------------------------------------------------------------------------------------ #\r\n\r\n\r","votes":null},{"text":"\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create an empty list\r\n    list2 = []\r\n    \r\n    # Iterate through the list\r\n    for number in list1:\r\n        \r\n        # If the number is positive, add it to the new list\r\n        if number > 0:\r\n            list2.append(number)\r\n            \r\n    # Return the maximum number in the new list\r\n    return max(list2)\r\n\r\n# Call the function to test results\r\nprint(largest_pos([-10, 5, 4, 9, 3, 2, 10]))\r\nprint(largest_pos([-10, -10, 10, 10]))\r\nprint(largest_pos([0, 0, 10, 10, 0, 0, 0, 0]))\r\nprint(largest_pos([-10, 5, 4, 9, 3, 2, 10]))\r\nprint(largest_pos([0, -10, 10, 10, 0, 0, 0, 0]))\r\nprint(largest_pos([0, 0, 0, 0, 0, 0, 0, 0]))\r\nprint(largest_pos([0, 0, 10, 0, 0, 0, 0, 0]))\r\nprint(largest_pos([10, 0, 0, 0, 0, 0, 0, 0]))\r\nprint(largest_pos([0, 0, 0, 0, 0, 0, 0, 10]))\r\nprint(largest_pos([10, 0, 0, 0, 0, 0, 0, 0]))\r\nprint(largest_pos([10, 10, 10, 10, 10, 10, 10, 10]))\r\nprint(largest_pos([","votes":null},{"text":"\r\n    list1 = list(map(int, list1))\r\n    \r\n    largest_positive_number = 0\r\n    for num in list1:\r\n        if num > largest_positive_number:\r\n            largest_positive_number = num\r\n\r\n    return largest_positive_number\r\n\r\n\r\nprint(largest_pos([-1, -2, 0, -3, 1, 2, 3, -4, 4]))\r\n# 4\r\nprint(largest_pos([-1, -2, 0, -3, 1, 2, 3, -4, 4]))\r\n# 4\r\nprint(largest_pos([-1, -2, 0, -3, 1, 2, 3, -4, 4]))\r\n# 4\r\nprint(largest_pos([-1, -2, 0, -3, 1, 2, 3, -4, 4]))\r\n# 4\r\nprint(largest_pos([-1, -2, 0, -3, 1, 2, 3, -4, 4]))\r\n# 4\r\nprint(largest_pos([-1, -2, 0, -3, 1, 2, 3, -4, 4]))\r\n# 4\r\nprint(largest_pos([-1, -2, 0, -3, 1, 2, 3, -4, 4]))\r\n# 4\r\nprint(largest_pos([-1, -2, 0, -3, 1, 2, 3, -4, 4]))\r\n# 4\r\nprint(largest_pos([-1, -2, 0, -3, 1, 2, 3, -4, 4]))\r\n# 4\r\nprint(largest_pos([-1, -2, 0, -3, 1, 2, 3, -4,","votes":null},{"text":"\r\n    \r\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, -9, 10, 11, 12]\r\n    \r\n    max_num = list1[0]\r\n    \r\n    for num in list1:\r\n        if num > 0 and num > max_num:\r\n            max_num = num\r\n            \r\n    return max_num\r\n\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8, -9, 10, 11, 12]))\r\n\r\n\r","votes":null},{"text":"\r\n    num = max(list1)\r\n    if num > 0:\r\n        print(f'Largest Positive number is {num}')\r\n    else:\r\n        print('No positive numbers')\r\n\r\n\r\nif __name__ == '__main__':\r\n   ","votes":null},{"text":"\r\n    max = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > max and list1[i] > 0:\r\n            max = list1[i]\r\n    return max\r\n\r\n\r\nprint(largest_pos([1, 1, 2, 3, -1, 4]))\r\nprint(largest_pos([-1, -1, -2, -3, -4]))\r\nprint(largest_pos([-1, -1, -2, -3, -4]))\r\nprint(largest_pos([1, 2, 3, 4]))\r\nprint(largest_pos([1, 1, 2, 3, 4]))\r\nprint(largest_pos([1, 1, 2, 3, 4, 5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 6]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, ","votes":null},{"text":"\r\n    max = list1[0]\r\n    \r\n    for i in range(1, len(list1)):\r\n        if list1[i] > max:\r\n            max = list1[i]\r\n            \r\n    return max\r\n\r\n\r\n\r\n# Test case 1\r\nlist1 = [1, 2, 3, -4, 5]\r\nprint(largest_pos(list1))\r\n\r\n# Test case 2\r\nlist1 = [1, -2, 3, 4, -5]\r\nprint(largest_pos(list1))\r\n\r\n# Test case 3\r\nlist1 = [1, 2, 3, 4, 5]\r\nprint(largest_pos(list1))\r\n\r\n# Test case 4\r\nlist1 = [1, 0, -2, 3, 4, -5]\r\nprint(largest_pos(list1))\r\n\r\n# Test case 5\r\nlist1 = [1, 2, 3, 4, 5, -6]\r\nprint(largest_pos(list1))\r\n\r\n# Test case 6\r\nlist1 = [0, -2, 3, 4, -5, 6]\r\nprint(largest_pos(list1))\r\n\r\n# Test case 7\r\nlist1 = [0, 2, -3, 4, -5, 6]\r\nprint(largest_pos(list1))\r\n\r\n# Test case 8\r\nlist1 = [1, -2, 3, -4, 5]\r\nprint(largest_pos(list1))\r\n\r\n# Test case 9\r\nlist1 = [1, -2, -3, -4, -5]\r\nprint(largest_pos(list1))\r\n\r\n# Test case 10\r\nlist1 = [1, 2, 3, 4, 5, 6]\r\nprint(larges","votes":null},{"text":"\r\n    # 1. \uc22b\uc790 \ub9ac\uc2a4\ud2b8\ub97c \uc785\ub825\ubc1b\ub294\ub2e4\r\n    # 2. \ub9ac\uc2a4\ud2b8\uc5d0\uc11c 0\ubcf4\ub2e4 \ud070 \uc218\ub97c \ucc3e\ub294\ub2e4\r\n    # 3. \ucc3e\uc740 \uc218 \uc911 \uac00\uc7a5 \ud070 \uc218\ub97c \ub9ac\ud134\ud55c\ub2e4\r\n    # 4. \uc785\ub825\ubc1b\uc740 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c 0\ubcf4\ub2e4 \ud070 \uc218\ub97c \ucc3e\uc9c0 \ubabb\ud558\uba74 -1\uc744 \ub9ac\ud134\ud55c\ub2e4\r\n\r\n    # 1. \uc22b\uc790 \ub9ac\uc2a4\ud2b8\ub97c \uc785\ub825\ubc1b\ub294\ub2e4\r\n    list1 = [1, 2, 0, -1, -2, -3]\r\n\r\n    # 2. \ub9ac\uc2a4\ud2b8\uc5d0\uc11c 0\ubcf4\ub2e4 \ud070 \uc218\ub97c \ucc3e\ub294\ub2e4\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            # 3. \ucc3e\uc740 \uc218 \uc911 \uac00\uc7a5 \ud070 \uc218\ub97c \ub9ac\ud134\ud55c\ub2e4\r\n            return max(list1)\r\n\r\n    # 4. \uc785\ub825\ubc1b\uc740 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c 0\ubcf4\ub2e4 \ud070 \uc218\ub97c \ucc3e\uc9c0 \ubabb\ud558\uba74 -1\uc744 \ub9ac\ud134\ud55c\ub2e4\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(list1) == 0:\r\n        return -1\r\n    \r\n    max_num = -1\r\n    for num in list1:\r\n        if num > 0 and num > max_num:\r\n            max_num = num\r\n            \r\n    return max_num\r\n\r\n\r\nprint(largest_pos([-1,-2,-3]))\r\nprint(largest_pos([-1,0,0]))\r\nprint(largest_pos([-1,0,0,3,4]))\r\n\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    largest = list1[0]\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [2, 3, 1, ","votes":null},{"text":"\r\n    import numpy as np\r\n    \r\n    list1 = np.array(list1)\r\n    \r\n    if len(list1) == 0:\r\n        return None\r\n    else:\r\n        return np.max(list1[list1>0])\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [10, -5, 2, 11, 0, -3, 4, 20, -4, 0]\r\n    print(\"The largest postive number","votes":null},{"text":"\r\n    max = 0\r\n    for i in list1:\r\n        if i > 0 and i > max:\r\n            max = i\r\n            print(max)\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = [1,2,3,4,5,-1,-2,-3,-4,-5]\r\n    max = 0\r\n    for item in list1:\r\n        if item > max:\r\n            max = item\r\n    return max\r\n\r\nprint(largest_pos([1,2,3,4,5,-1,-2,-3,-4,-5]))\r\n\r\n\r\n\r\n# 2) Write a Python function to find the largest negative number from the given list.\r","votes":null},{"text":"\r\n    largest = list1[0]\r\n    for num in list1:\r\n        if num > 0 and num > largest:\r\n            largest = num\r\n    return largest\r\n\r\n\r\nprint(largest_pos([3, 5, 1, 7, 2, 4]))\r\nprint(largest_pos([3, -5, 1, 7, 2, 4]))\r\nprint(largest_pos([-3, -5, 1, -7, -2, 4]))\r\nprint(largest_pos([-3, -5, -1, -7, -2, 4]))\r\nprint(largest_pos([-3, -5, -1, 7, -2, 4]))\r\nprint(largest_pos([-3, -5, -1, -7, -2, -4]))\r\nprint(largest_pos([-3, -5, -1, -7, -2, 4, -5]))\r\nprint(largest_pos([-3, -5, -1, -7, -2, 4, -5, -3]))\r\nprint(largest_pos([-3, -5, -1, -7, -2, 4, -5, -3, 2]))\r\nprint(largest_pos([-3, -5, -1, -7, -2, 4, -5, -3, 2, 3, 5, 1, 7, 2, 4]))\r\nprint(largest_pos([-3, -5, -1, -7, -2, 4, -5, -3, 2, 3, 5, 1, 7, 2, 4, -3, -5, -1, -7, -2, 4, -5, -3, 2, 3, 5, 1, 7, 2, 4]))\r\nprint(largest_pos([-3, -5, -1, -7, -","votes":null},{"text":"\r\n    \r\n    for i in list1:\r\n        if i > 0:\r\n            return i\r\n\r\nprint(largest_pos([1,2,9,-1,-2,0]))\r\nprint(largest_pos([1,2,9,-1,-2,-0]))\r\nprint(largest_pos([1,2,-9,-1,-2,-0]))\r\n\r\n#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n\r","votes":null},{"text":"\r\n    largest = 0\r\n    for num in list1:\r\n        if num > largest and num > 0:\r\n            largest = num\r\n    return largest\r\n\r\n\r\nprint(largest_pos([1, 4, 5, 9, 10, -1, 12]))\r\nprint(largest_pos([1, 4, 5, -9, 10, 12]))\r\nprint(largest_pos([1, 4,","votes":null},{"text":"\r\n    print(list1)\r\n    # Solution\r\n    n = len(list1)\r\n    largest = -1\r\n    for i in range(n):\r\n        if list1[i] > largest and list1[i","votes":null},{"text":"\r\n    try:\r\n        return max(list1)\r\n    except ValueError:\r\n        return 0\r\n\r\n\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4]))\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4, 10]))\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4, 10, 8]))\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4, 10, 8, -3]))\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4, 10, 8, -3, -2]))\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4, 10, 8, -3, -2, -1]))\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4, 10, 8, -3, -2, -1, 1]))\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4, 10, 8, -3, -2, -1, 1, 5]))\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4, 10, 8, -3, -2, -1, 1, 5, -6]))\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4, 10, 8, -3, -2, -1, 1, 5, -6, -7]))\r\nprint(\"The largest postive number is \", largest_pos([-1, -5, 0, -4, 10, 8, -3, ","votes":null},{"text":"\r\n    \r\n    list_pos = []\r\n    for i in list1:\r\n        if i > 0:\r\n            list_pos.append(i)\r\n    if len(list_pos) == 0:\r\n        print('empty')\r\n    else:\r\n        print(max(list_pos))\r\n\r","votes":null},{"text":"\r\n    \r\n    # The function to find the largest positive number of a list\r\n   ","votes":null},{"text":"\r\n\r\n    # list1 = [1, 2, 3, 4, -5, -6, -7, 8, 9]\r\n\r\n    # list1 = [1, 2, 3, 4, 0, 0, -7, 8, 9]\r\n\r\n    # list1 = [1, 2, 3, 4, 0, 0, 0, 8, 9]\r\n\r\n    # list1 = [0, 0, 0, 0, 0, 0, 0, 0, 9]\r\n\r\n    # list1 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n\r\n    # list1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ","votes":null},{"text":"\r\n    largest = None\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r","votes":null},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        if i > 0:\r\n            list2.append(i)\r\n    return max(list2)\r\n\r\n\r\n# test\r\nprint(largest_pos([-2, -3, -4, 5, 6]))\r\nprint(largest_pos([-2, 3, 4, -5, 6]))\r\nprint(largest_pos([-2, 3, 4, -5, -6]))\r\nprint(largest_pos([-2, 3, 4, 5, 6]))\r\nprint(largest_pos([-2, 3, -4, -5, 6]))\r\nprint(largest_pos([-2, 3, -4, -5, -6]))\r\nprint(largest_pos([-2, 3, 4, 5, -6]))\r\nprint(largest_pos([-2, 3, 4, -5, -6]))\r\nprint(largest_pos([-2, -3, -4, -5, -6]))\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = [i for i in list1 if i > 0]\r\n    return max(list1)\r\n\r\n\r\nprint(largest_pos([1, 2, 3, -4, 5]))\r\nprint(largest_pos([1, -2, 3, -4, 5]))\r\nprint(largest_pos([1, -2, -3, -4, -5]))\r\nprint(largest_pos([1, -2, 3, -4, 5, 0]))\r\nprint(largest_pos([1, -2, 3, -4, 5, 0, 0]))\r\nprint(largest_pos([0, 0, 0, 0, 0, 0]))\r\nprint(largest_pos([-1, -2, -3, -4, -5]))\r\n\r\n\r\n# Q4\r","votes":null},{"text":"\r\n    \r\n    list1 = [int(i) for i in list1]\r\n    list1 = list(filter(None, list1))\r\n\r\n    for i in list1:\r\n        if i < 0:\r\n            list1.remove(i)\r\n    \r\n    if list1 == []:\r\n        return -1\r\n\r\n    else:\r\n        list1.sort()\r\n        return list1[-1]\r\n\r\n# Test case 1\r\nlist1 = \"10,","votes":null}],"time":{"count":61.0,"avg":119101.9360655738,"std":30256.6098990169,"cov":0.2540396143}}
{"id":518,"question":"def sqrt_root(num):\r\n    \"\"\"Write a function to find the square root of a perfect number.\"\"\"","answers":[{"text":"\r\n    return num ** 0.5\r\n\r\n\r","votes":38170.208},{"text":"\r\n    return num ** .5\r\n\r\n\r","votes":48647.436},{"text":"\r\n    import math\r\n    return math.sqrt(num)\r\n\r\n\r","votes":55688.736},{"text":"\r\n    i = 0\r\n    while True:\r\n        i += 1\r\n        sq = i * i\r\n        if sq > num:\r\n            return i - 1\r\n\r\n\r","votes":64671.136},{"text":"\r\n    \r\n    # Your code here\r\n    return (num**(1\/2))\r\n    \r\n\"\"\"\r\nSample Test Cases:\r\n----------------------------------------------------------------\r\nTest Case 1:\r\n\r\nInput: 16\r\nOutput: 4.0\r\n\r\nTest Case 2:\r\n\r\nInput: 25\r\nOutput: 5.0\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(1)\r\nSpace Complexity: O(1)\r\n\"\"\"","votes":64826.112},{"text":"\r\n    for i in range(1, num):\r\n        if i ** 2 == num:\r\n            return i\r\n    return None\r\n\r\n\r","votes":70232.524},{"text":"\r\n    root = 1\r\n    while root**2 < num:\r\n        root += 1\r\n    return root\r\n\r\n\r","votes":70629.916},{"text":"\r\n    #return sqrt(num)\r\n    return num ** 0.5\r\n\r\n\r","votes":71914.652},{"text":"\r\n    return int(num ** 0.5)\r\n\r\n\r","votes":73125.484},{"text":"\r\n    return num ** 0.5\r\n\r","votes":75090.364},{"text":"\r\n    if num < 1:\r\n        return \"Error: Number must be greater than 0.\"\r\n    else:\r\n        for x in range(1, num + 1):\r\n            if x ** 2 == num:\r\n                return x\r\n\r\n\r\nprint(sqrt_root(25))\r\n\r\n# 5. Write a function that takes a list of numbers, and returns the maximum value in the list. \r\n# If the list is empty, return None.\r\n\r\n\r","votes":77388.876},{"text":"\r\n    # 1. Create the function\r\n    # 2. Create the function inputs\r\n    # 3. Create the function output\r\n    # 4. Create the function logic\r\n    # 5. Test the function\r\n    # 6. Return the function\r\n    return num ** 0.5\r\n\r\n\r\n# 1. Create the function\r\n# 2. Create the function inputs\r\n# 3. Create the function output\r\n# 4. Create the function logic\r\n# 5. Test the function\r\n# 6. Return the function\r","votes":78746.976},{"text":"\r\n    if num < 0:\r\n        return -1\r\n    root = 0\r\n    while root**2 < num:\r\n        root += 1\r\n    return root\r\n\r\n\r","votes":79543.804},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num < 1:\r\n        return \"Not a perfect number\"\r\n    else:\r\n        for i in range(1, num):\r\n            if num == i**2:\r\n                return i\r\n\r\n\r","votes":79827.504},{"text":"\r\n    import math\r\n    return math.sqrt(num)\r\n\r","votes":80408.916},{"text":"\r\n    for i in range(1, num + 1):\r\n        if i ** 2 == num:\r\n            return i\r\n    return None\r\n\r\n\r","votes":81553.332},{"text":"\r\n    root = num\r\n    while True:\r\n        root = (root + num \/ root) \/ 2\r\n        if root**2 == num:\r\n            return root\r\n\r\n\r","votes":81554.132},{"text":"\r\n    \r\n    # The square root of a perfect number is always an integer.\r\n    # 1. Get the square root of a number.\r\n    # 2. Check if the square root is an integer.\r\n    # 3. If it is an integer, return it otherwise return -1.\r\n    \r\n    # Get the square root of a number.\r\n    sqrt = num ** 0.5\r\n    \r\n    # Check if the square root is an integer.\r\n    if sqrt.is_integer():\r\n        # If it is an integer, return it.\r\n        return sqrt\r\n    else:\r\n        # If it is not an integer, return -1.\r\n        return -1\r\n\r","votes":86544.696},{"text":"\r\n    if num == 0:\r\n        print('Error: square root of 0 is undefined')\r\n        return\r\n    root = 0\r\n    while root * root <= num:\r\n        root += 1\r\n    return root - 1\r\n\r\n\r","votes":89768.112},{"text":"\r\n    root = 1\r\n    while num > root ** 2:\r\n        root = root + 1\r\n    return root\r\n\r\n\r","votes":91359.844},{"text":"\r\n    sqrt = 0\r\n    for i in range(1, num + 1):\r\n        if i**2 == num:\r\n            sqrt = i\r\n            break\r\n    return sqrt\r\n\r\n\r","votes":92783.628},{"text":"\r\n\r\n    if num == 0:\r\n        return 0\r\n    elif num < 0:\r\n        return 'Invalid number'\r\n    else:\r\n        for i in range(1, num+1):\r\n            if i*i == num:\r\n                return i\r\n    return 'None'\r\n\r\n\r\nprint(sqrt_root(0))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(26))\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(10000))\r\nprint(sqrt_root(-1))\r\n\r\n\r\n# The other way\r","votes":93894.004},{"text":"\r\n\r\n    if num < 0:\r\n        raise ValueError('sqrt_root() only accepts non-negative numbers')\r\n\r\n    if num == 0:\r\n        return 0\r\n\r\n    if num == 1:\r\n        return 1\r\n\r\n    root = 1\r\n    while root * root <= num:\r\n        root += 1\r\n\r\n    return root - 1\r\n\r","votes":95395.78},{"text":"\r\n    for i in range(0, num):\r\n        if i ** 2 == num:\r\n            return i\r\n    return None\r\n\r\n\r","votes":95683.224},{"text":"\r\n    temp = 1\r\n    while temp**2 <= num:\r\n        temp += 1\r\n    return temp - 1\r\n\r\n\r","votes":96300.604},{"text":"\r\n    num_sqrt = num ** 0.5\r\n    return int(num_sqrt)\r\n\r\n\r","votes":100159.86},{"text":"\r\n    import math\r\n\r\n    # The square root of a perfect number is an integer.\r\n    for i in range(1, int(math.sqrt(num)) + 1):\r\n        if i * i == num:\r\n            return i\r\n    return None\r\n\r","votes":100345.024},{"text":"\r\n    i = 1\r\n    while i * i <= num:\r\n        i += 1\r\n    return i - 1\r\n\r\n\r","votes":101157.404},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    elif num < 0:\r\n        raise ValueError('Square root of negative number not defined')\r\n    elif num == 1:\r\n        return 1\r\n    sqrt = num\r\n    while sqrt * sqrt > num:\r\n        sqrt = (sqrt + num \/ sqrt) \/ 2\r\n    return sqrt\r\n\r\n\r","votes":104530.828},{"text":"\r\n    if num < 0:\r\n        raise ValueError('Negative numbers are not allowed.')\r\n\r\n    if num == 0:\r\n        return 0\r\n\r\n    result = 0\r\n\r\n    while result**2 < num:\r\n        result += 1\r\n\r\n    return result\r\n\r\n\r","votes":105180.632},{"text":"\r\n    from math import sqrt\r\n    return sqrt(num)\r\n\r","votes":106046.712},{"text":"\r\n\r\n    sqrt = 0\r\n\r\n    while sqrt**2 < num:\r\n        sqrt += 1\r\n\r\n    if sqrt**2 == num:\r\n        return sqrt\r\n\r\n    return None\r\n\r\n\r","votes":108350.948},{"text":"\r\n    if num < 0:\r\n        return None\r\n    for i in range(num, 0, -1):\r\n        if i**2 == num:\r\n            return i\r\n    return None\r\n\r\n\r","votes":112374.732},{"text":"\r\n    if num < 0:\r\n        return -1\r\n    i = 1\r\n    while (i * i) <= num:\r\n        if (i * i) == num:\r\n            return i\r\n        i += 1\r\n    return -1\r\n\r\n\r","votes":117379.668},{"text":"\r\n    for i in range(1, num):\r\n        if i**2 == num:\r\n            return i\r\n\r","votes":119454.54},{"text":"\r\n    # This function should return an integer, not a float.\r\n    # There should be no rounding.\r\n    # If num is not a perfect square, the function should return None.\r\n    if num < 0:\r\n        return None\r\n    for i in range(num):\r\n        if i**2 == num:\r\n            return i\r\n\r\n\r\n# This is the test function.  It is not necessary for the solution.\r\n# It is only used to test your solution.\r","votes":120059.428},{"text":"\r\n    if num < 0:\r\n        return None\r\n    if num == 0:\r\n        return 0\r\n    \r\n    answer = 1\r\n    while (answer ** 2) <= num:\r\n        answer += 1\r\n    return answer - 1\r\n\r","votes":122192.956},{"text":"\r\n    if num <= 1:\r\n        return num\r\n    for i in range(2, num):\r\n        if i * i == num:\r\n            return i\r\n\r\n\r","votes":125700.928},{"text":"\r\n    # initialize a variable to hold the square root\r\n    sqrt = 0\r\n    # use a while loop to find the square root\r\n    # while the square of the current square root is less than the number\r\n    # keep incrementing the current square root by 1\r\n    while sqrt * sqrt < num:\r\n        # increment the square root by 1\r\n        sqrt += 1\r\n    # return the square root\r\n    return sqrt\r\n\r\n\r\n# call the function and pass in the perfect number\r\nprint(sqrt_root(16))\r\n\r\n\r\n# 2. Write a function that takes in a number and returns the sum of all the even numbers up to that number.\r","votes":143528.8},{"text":"\r\n    if num < 0:\r\n        raise ValueError(\"The number must be a positive number.\")\r\n    elif num == 0:\r\n        return 0\r\n    else:\r\n        ans = 1\r\n        while ans**2 < num:\r\n            ans += 1\r\n        return ans\r\n\r\n\r","votes":158811.132},{"text":"\r\n    \r\n    for i in range(1, num+1):\r\n        if i**2 == num:\r\n            return i\r\n\r\n    return 'Not Found'\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sqrt_root(25))\r\n    print(sqrt_root(36))\r\n    print(sqrt_root(49))\r\n    print(sqrt_root(56))\r\n    print(sqrt_root(64))\r\n    print(sqrt_root(75))\r\n    print(sqrt_root(81))\r\n    print(sqrt_root(96))\r\n    print(sqrt_root(100))\r\n    print(sqrt_root(121))\r\n    print(sqrt_root(144))\r\n    print(sqrt_root(169))\r\n    print(sqrt_root(196))\r\n    print(sqrt_root(225))\r\n    print(sqrt_root(256))\r\n    print(sqrt_root(289))\r\n    print(sqrt_root(324))\r\n    print(sqrt_root(361))\r\n    print(sqrt_root(400))\r\n    print(sqrt_root(441))\r\n    print(sqrt_root(484))\r\n    print(sqrt_root(529))\r\n    print(sqrt_root(576))\r\n    print(sqrt_root(649))\r\n    print(sqrt_root(724))\r\n    print(sqrt_root(729))\r\n    print(sqrt_root(800))\r\n    print(sqrt_root(810))\r\n    print(sqrt_root(841))\r\n    print(sqrt_root(900))\r\n    print(sqrt_root(961))\r\n    print(sqrt_root(1000))\r\n    print(sqrt_root(1081))\r\n    prin","votes":172556.576},{"text":"\r\n    # if num < 1:\r\n    #     raise ValueError('Input number is not positive')\r\n\r\n    num_sqrt = 0\r\n    while num_sqrt ** 2 < num:\r\n        num_sqrt += 1\r\n    return num_sqrt\r\n\r\n\r\n# Test case\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(3))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(5))\r\nprint(sqrt_root(6))\r\nprint(sqrt_root(7))\r\nprint(sqrt_root(8))\r\nprint(sqrt_root(9))\r\nprint(sqrt_root(10))\r\nprint(sqrt_root(11))\r\nprint(sqrt_root(12))\r\nprint(sqrt_root(13))\r\nprint(sqrt_root(14))\r\nprint(sqrt_root(15))\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(17))\r\nprint(sqrt_root(18))\r\nprint(sqrt_root(19))\r\nprint(sqrt_root(20))\r\nprint(sqrt_root(21))\r\nprint(sqrt_root(22))\r\nprint(sqrt_root(23))\r\nprint(sqrt_root(24))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(26))\r\nprint(sqrt_root(27))\r\nprint(sqrt_root(28))\r\nprint(sqrt_root(29))\r\nprint(sqrt_root(30))\r\nprint(sqrt_root(31))\r\nprint(sqrt_root(32))\r\nprint(sqrt_root(33))\r\nprint(sqrt_root(34))\r\nprint(sqrt_root(35))\r\nprint(sqrt_root(36))\r\nprint(sqrt_root(37))\r\nprint(sqrt_root(38))\r","votes":198480.544},{"text":"\r\n    # 1. Get the square root of num\r\n    root = num ** 0.5\r\n\r\n    # 2. Check if root is a whole number\r\n    if root.is_integer():\r\n        return root\r\n    else:\r\n        return False\r\n\r\n\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(145))\r\nprint(sqrt_root(11117))\r\nprint(sqrt_root(1331))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(145))\r\nprint(sqrt_root(11117))\r\nprint(sqrt_root(1331))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(144))\r\n\r\n#","votes":235461.18},{"text":"\r\n    n = num\r\n    root = 0\r\n    while n > 0:\r\n        root += 1\r\n        n -= root\r\n    return root\r\n\r","votes":null},{"text":"\r\n    \r\n    if num == 0:\r\n        return 0\r\n\r\n    if num == 1:\r\n        return 1\r\n\r\n    if num % 2 == 0:\r\n        return 0\r\n\r\n    for i in range(3, int(num ** 0.5) + 1, 2):\r\n        if i ** 2 == num:\r\n            return i\r\n\r\n    return 0\r\n\r\n\r","votes":null},{"text":"\r\n    # Define a variable to store the square root, and initialize it to 1.\r\n    root = 1\r\n    # Define a variable to store the number, and initialize it to num.\r\n    num = num\r\n    # Use a while loop to find the square root by dividing num by the root and adding the result to the root.\r\n    while num > root:\r\n        num = num \/ root\r\n        root = root + num\r\n    # Return the square root.\r\n    return root\r\n\r\n# Test the function with a perfect number.\r\nprint(sqrt_root(256))\r\n# Should be 16\r\n\r\n# Test the function with a number that is not a perfect number.\r\nprint(sqrt_root(9))\r\n# Should be 3\r\n\r\n\r\n# 02. Write a function called is_perfect_number that takes in a number and returns True if the number is perfect, and False otherwise.\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    elif num > 0:\r\n        for i in range(1, num+1):\r\n            if num == i*i:\r\n                return i\r\n            else:\r\n                return None\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 2:\r\n        return num\r\n\r\n    # Find the square root\r\n    root = num**0.5\r\n\r\n    # Find if the square root is an integer\r\n    if root.is_integer():\r\n        return root\r\n\r\n    return None\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sqrt_root(1))\r\n    print(sqrt_root(4))\r\n    print(sqrt_root(9))\r\n    print(sqrt_root(16))\r\n    print(sqrt_root(25))\r\n    print(sqrt_root(49))\r\n    print(sqrt_root(100))\r\n    print(sqrt_root(144))\r\n    print(sqrt_root(200))\r\n    print(sqrt_root(361))\r\n    print(sqrt_root(500))\r\n    print(sqrt_root(777))\r\n    print(sqrt_root(81))\r\n    print(sqrt_root(1000))\r\n    print(sqrt_root(10000))\r\n    print(sqrt_root(100000))\r\n    print(sqrt_root(1000000))\r\n    print(sqrt_root(10000000))\r\n    print(sqrt_root(100000000))\r\n    print(sqrt_root(1000000000))\r\n    print(sqrt_root(10000000000))\r\n    print(sqrt_root(100000000000))\r\n    print(sqrt_root(1000000000000))\r\n    print(sqrt_root(10000000000000))\r\n    print(sqrt_root(100000000000000))\r\n    print(sqr","votes":null},{"text":"\r\n    # num = int(input(\"Enter a number: \"))\r\n    root = 0\r\n    while True:\r\n        root += 1\r\n        if root ** 2 == num:\r\n            print(\"Square root of\", num, \"is\", root)\r\n            break\r\n        elif root ** 2 > num:\r\n            print(\"Square root of\", num, \"is\", root-1)\r\n            break\r\n\r\n\r","votes":null},{"text":"\r\n    return (num**0.5).to_i\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    sqrt = 0\r\n    for i in range(1, num + 1):\r\n        if i**2 == num:\r\n            sqrt = i\r\n            break\r\n    return sqrt\r\n\r\nnum = int(input(\"Enter a perfect number: \"))\r\nsqrt = sqrt_root(num)\r\n\r\nif sqrt != 0:\r\n    print(f\"The square root of {num} is {sqrt}.\")\r\nelse:\r\n    print(f\"{num} is not a perfect number.\")\r\n\r\n\r\n# Exercise 60 - Find the Largest Number in a List\r","votes":null},{"text":"\r\n    lis = []\r\n    for i in range(1, num + 1):\r\n        if (i ** 2) == num:\r\n            lis.append(i)\r\n    return lis\r\n\r\n\r","votes":null},{"text":"\r\n    num_list = []\r\n    for i in range(1, num+1):\r\n        if num % i == 0:\r\n            num_list.append(i)\r\n    return num_list\r\n\r\n\r\nprint(sqrt_root(100))\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    if num == 0:\r\n        return 0\r\n    if num == 1:\r\n        return 1\r\n    if num % 2 == 0:\r\n        return None\r\n    if num % 3 == 0:\r\n        return None\r\n    for","votes":null},{"text":"\r\n    # sqrt = math.sqrt(num)\r\n    # root = math.pow(sqrt, 2)\r\n    # if root == num:\r\n    #     return sqrt\r\n\r\n    # return -1\r\n\r\n    # Using Binary Search\r\n    low, high = 0, num\r\n    while low <= high:\r\n        mid = (low + high) \/\/ 2\r\n        sqrt = mid * mid\r\n        if sqrt == num:\r\n            return mid\r\n        elif sqrt < num:\r\n            low = mid + 1\r\n        else:\r\n            high = mid - 1\r\n    return -1\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sqrt_root(100))\r\n    print(sqrt_root(200))\r\n    print(sqrt_root(144))\r\n    print(sqrt_root(169))\r\n    print(sqrt_root(1","votes":null},{"text":"\r\n    # the first number that is the square of a number that\r\n    # is greater than 6 is 9\r\n    for i in range(9, 100000):\r\n        if i*i == num:\r\n            return i\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    import math\r\n    print(math.sqrt(num))\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0 or num == 1:\r\n        return num\r\n    elif num < 0:\r\n        raise ValueError(\"Cannot find square root for negative numbers.\")\r\n    elif num == 2:\r\n        return 1\r\n    elif num % 2 == 0:\r\n        return num \/ 2\r\n    else:\r\n        num = num - 1\r\n        for i in range(1, num):\r\n            if i ** 2 == num:\r\n                return i\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 1:\r\n        return None\r\n    if num == 1:\r\n        return 1\r\n    # if num % 2 == 1:\r\n    #     return None\r\n    # if num == 4:\r\n    #     return 2\r\n    # if num == 9:\r\n    #     return 3\r\n    # if num == 16:\r\n    #     return 4\r\n    # if num == 25:\r\n    #     return 5\r\n    # if num == 36:\r\n    #     return 6\r\n    # if num == 49:\r\n    #     return 7\r\n    # if num == 64:\r\n    #     return 8\r\n    # if num == 81:\r\n    #     return 9\r\n    # if num == 100:\r\n    #     return 10\r\n    # if num == 121:\r\n    #     return 11\r\n    # if num == 144:\r\n    #     return 12\r\n    # if num == 169:\r\n    #     return 13\r\n    # if num == 196:\r\n    #     return 14\r\n    # if num == 225:\r\n    #     return 15\r\n    # if num == 256:\r\n    #     return 16\r\n    # if num == 289:\r\n    #     return 17\r\n    # if num == 324:\r\n    #     return 18\r\n    # if num == 361:\r\n    #     return 19\r\n    # if num == 400:\r\n    #     return 20\r\n    # else:\r\n    #     return None\r\n    # if num % 2 == 0 and num > 4 and num < 9:\r\n    #     return None\r\n    # if num % 2 == ","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    if num < 4:\r\n        return None\r\n\r\n    # We check the first 10 numbers\r\n    # and use the knowledge that\r\n    # perfect numbers can only be\r\n    # constructed from these numbers.\r\n\r\n    for num_1 in range(2, 11):\r\n        for num_2 in range(num_1, 11):\r\n            if num == num_1 ** 2 + num_2 ** 2:\r\n                return num_1\r\n\r\n    return None\r\n\r\n\r","votes":null},{"text":"\r\n    # return 1 if num == 1\r\n    # if num == 4:\r\n    #     return 2\r\n    # if num == 9:\r\n    #     return 3\r\n\r\n    # if num < 1:\r\n    #     return None\r\n\r\n    # Find the square root of a perfect number\r\n    # while num % (num \/\/ 2) != 0:\r\n    #     num -= 1\r\n    # return num\r\n\r\n    # Use a for loop to find the square root of a perfect number\r\n    # for i in range(1, num + 1):\r\n    #     if i * i == num:\r\n    #         return i\r\n    # return None\r\n\r\n    # Use the math library to find the square root of a perfect number\r\n    # return int(math.sqrt(num))\r\n\r\n    # Use the math library to find the square root of a perfect number\r\n    # return int(math.sqrt(num))\r\n\r\n    # Use the math library to find the square root of a perfect number\r\n    # return int(math.sqrt(num))\r\n\r\n    # Use the math library to find the square root of a perfect number\r\n    # return int(math.sqrt(num))\r\n\r\n    # Use the math library to find the square root of a perfect number\r\n    # return int(math.sqrt(num))\r\n\r\n    # Use the math library to find the square root of a perfect number\r\n    # return int(math.sqrt(num))\r\n\r\n    # Use the math library to find the square root of a perfect number\r\n    # return int(math.sqrt(num))\r\n\r\n    # Use the math library to find the square root of a perfect number\r\n    # return int(math.sqrt(num))\r\n\r\n    # Use the math library to find the square root of a perfect number\r\n    # return int(math.sqrt(num))\r\n\r\n    # Use the math library to find the square root of a perfect number\r\n    # retur","votes":null},{"text":"\r\n    \r\n    perfect_list = []\r\n    sum_perfect = 0\r\n    \r\n    for i in range(1, num):\r\n        sum_perfect = 0\r\n        for j in range(1, i):\r\n            if i % j == 0:\r\n                sum_perfect += j\r\n        if i == sum_perfect:\r\n            perfect_list.append(i)\r\n            \r\n    square_num = 0\r\n    for i in perfect_list:\r\n        sqr = i**(1\/2)\r\n        if sqr.is_integer():\r\n            square_num = sqr\r\n            break\r\n    return square_num\r\n\r\n# test case\r\nprint(sqrt_root(100))\r\n\r\n# 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999","votes":null},{"text":"\r\n    # create a variable to store the result\r\n    result = 0\r\n\r\n    # loop through all numbers in the range of 1 to num\r\n    for i in range(1, num + 1):\r\n\r\n        # check if i is a perfect square\r\n        if (i**0.5) % 1 == 0:\r\n\r\n            # if it is, then store the square root in result\r\n            result = i**0.5\r\n            break\r\n\r\n    # return the result\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    perfect = 1\r\n    for i in range(2, int(num**0.5)+1):\r\n        if num % i == 0:\r\n            perfect += i\r\n            if perfect == num:\r\n                return i\r\n            else:\r\n                perfect -= i\r\n\r","votes":null},{"text":"\r\n    if num < 1:\r\n        return None\r\n    elif num == 1:\r\n        return num\r\n    else:\r\n        for i in range(1, num \/\/ 2):\r\n            if i * i == num:\r\n                return i\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    if num > 100000000000000000000000000000000:\r\n        print(\"Error: Number too large.\")\r\n    elif num < 0:\r\n        print(\"Error: Number must be positive.\")\r\n    else:\r\n        for i in range(1, num):\r\n            if i * i == num:\r\n                print(\"Square root of\", num, \"is\", i)\r\n                return\r\n        print(\"Square root of\", num, \"does not exist.\")\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Initialize the root as 1\r\n    root = 1\r\n\r\n    # Repeat the process until the square of root equals the number\r\n    while root ** 2 < num:\r\n\r\n        # Increment the root\r\n        root += 1\r\n\r\n    if root ** 2 == num:\r\n        return root\r\n    else:\r\n        return None\r\n\r\n\r\n# Test\r\n\r\nimport unittest\r\n\r\n\r\nclass Test(unittest.TestCase):\r\n\r\n   ","votes":null},{"text":"\r\n    root = num\r\n    while root > 1:\r\n        root = (root + num \/\/ root) \/\/ 2\r\n    return root\r\n\r\n\r","votes":null},{"text":"\r\n    # check if it's a perfect number\r\n    for i in range(2,num):\r\n        if num % i == 0:\r\n            return False\r\n    # check if it's a square\r\n    for i in range(1,int(num**0.5)+1):\r\n        if i**2 == num:\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    root = 0\r\n    for i in range(1, num):\r\n        root = i\r\n        if root in range(1, num):\r\n            break\r\n    return root\r\n\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(8))\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(496))\r\nprint(sqrt_root(1000))\r\nprint(sqrt_root(101))\r\nprint(sqrt_root(1","votes":null},{"text":"\r\n    if num <= 1:\r\n        return num\r\n    sqrt = num \/\/ 2 + 1\r\n    while sqrt * sqrt <= num:\r\n        sqrt += 1\r\n    return sqrt - 1\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sqrt_root(","votes":null},{"text":"\r\n    # Check if number is a perfect number\r\n    if num < 1:\r\n        return \"Please enter a positive integer.\"\r\n    # Check if number is a perfect number\r\n    if (num ** 0.5) % 1 != 0:\r\n        return \"This is not a perfect number.\"\r\n    # Find the square root of a perfect number\r\n    else:\r\n        return float(num ** 0.5)\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n# Calls  main  to start the ball rolling.\r\n# -----------------------------------------------------------------------------\r\nmain()\r\n\r\n# -----------------------------------------------------------------------------\r\n#","votes":null},{"text":"\r\n    # return (num ** 0.5)\r\n\r\n\r","votes":null},{"text":"\r\n    root = 1\r\n    while root * root <= num:\r\n        root += 1\r\n        \r\n    return root - 1\r\n\r\n\r\n# Test cases\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(81))\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(3))\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(256))\r\nprint(sqrt_root(255))\r\nprint(sqrt_root(254))\r\nprint(sqrt_root(253))\r\nprint(sqrt_root(252))\r\nprint(sqrt_root(251))\r\nprint(sqrt_root(250))\r\nprint(sqrt_root(249))\r\nprint(sqrt_root(248))\r\nprint(sqrt_root(247))\r\nprint(sqrt_root(246))\r\nprint(sqrt_root(245))\r\nprint(sqrt_root(244))\r\nprint(sqrt_root(243))\r\nprint(sqrt_root(242))\r\nprint(sqrt_root(241))\r\nprint(sqrt_root(240))\r\nprint(sqrt_root(239))\r\nprint(sqrt_root(238))\r\nprint(sqrt_root(237))\r\nprint(sqrt_root(236))\r\nprint(sqrt_root(235))\r\nprint(sqrt_root(234))\r\nprint(sqrt_root(233))\r\nprint(sqrt_root(232))\r\nprint(sqrt_root(231))\r\nprint(sqrt_root(230))\r\nprint(sqrt_root(229))\r\nprint(sqrt_root(228))\r\nprint(sqrt_root(227))\r\nprint(sqrt_root(226))\r\nprint(sqrt_root(225))\r\nprint(sqr","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    if num % 2 == 0:\r\n        return 2\r\n    for i in range(3, num):\r\n        if num % i == 0 and num\/i == int(num\/i):\r\n            return i\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    elif num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 1\r\n    elif num < 0:\r\n        return False\r\n    elif num == 3:\r\n        return 1\r\n    elif num == 4:\r\n        return 2\r\n    elif num == 5:\r\n        return 2\r\n    elif num == 6:\r\n        return 2\r\n    elif num == 7:\r\n        return 2\r\n    elif num == 8:\r\n        return 2\r\n    elif num == 9:\r\n        return 3\r\n    elif num == 10:\r\n        return 3\r\n    elif num == 11:\r\n        return 3\r\n    elif num == 12:\r\n        return 3\r\n    elif num == 13:\r\n        return 3\r\n    elif num == 14:\r\n        return 3\r\n    elif num == 15:\r\n        return 3\r\n    elif num == 16:\r\n        return 4\r\n    elif num == 17:\r\n        return 4\r\n    elif num == 18:\r\n        return 4\r\n    elif num == 19:\r\n        return 4\r\n    elif num == 20:\r\n        return 4\r\n    elif num == 21:\r\n        return 4\r\n    elif num == 22:\r\n        return 4\r\n    elif num == 23:\r\n        return 4\r\n    elif num == 24:\r\n        return 4\r\n    elif num == 25:\r\n        return 5\r\n    elif num == 26:\r\n        return 5\r\n    elif num == 27:\r\n        return 5\r\n    elif num == 28:\r\n        return 5\r\n    elif num == 29:\r\n        return 5","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n\r\n    num = num ** 0.5\r\n    for x in range(1, num + 1):\r\n        if x * x == num:\r\n            return x\r\n\r\n","votes":null},{"text":"\r\n    for i in range(num):\r\n        if num**0.5 == num**0.5**2:\r\n            return num**0.5\r\n        else:\r\n            return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Find the square root of the number.\r\n    root = sqrt(num)\r\n\r\n    # Check if the square root is an integer.\r\n    if root == int(root):\r\n        return root\r\n    else:\r\n        return None\r\n\r\n# Testing\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(121))\r\nprint(sqrt_root(1000))\r\nprint(sqrt_root(121000))\r\nprint(sqrt_root(289))\r\nprint(sqrt_root(3))\r\nprint(sqrt_root(9))\r\nprint(sqrt_root(250))\r\nprint(sqrt_root(10000))\r\nprint(sqrt_root(1210000))\r\nprint(sqrt_root(289000))\r\nprint(sqrt_root(300))\r\nprint(sqrt_root(900))\r\nprint(sqrt_root(10000000000))\r\nprint(sqrt_root(12100000000000000000000000))\r\nprint(sqrt_root(2890000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n\r\n    # Check if the number is a perfect number\r\n    # If not, return the number\r\n    if num**0.5 != int(num**0.5):\r\n        return num\r\n\r\n    # If it is a perfect number, return the square root\r\n    else:\r\n        return int(num**0.5)\r\n\r\n\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(36))\r\nprint(sqrt_root(76))\r\nprint(sqrt_root(","votes":null},{"text":"\r\n    # We have to find the square root of the perfect number, which is the root of the prime factorization of the perfect number.\r\n    # The idea is to remove the prime factors from the perfect number, until we reach the root.\r\n    # So, we check if the perfect number is even or odd.\r\n    # If it is odd, we can remove the first prime factor (2), and then divide the number by 2.\r\n    # If it is even, we can remove the first prime factor (2).\r\n    # Then we check if the number is even or odd.\r\n    # If it is odd, we can remove the second prime factor (2), and then divide the number by 2.\r\n    # If it is even, we can remove the second prime factor (2).\r\n    # Then we check if the number is even or odd.\r\n    # If it is odd, we can remove the third prime factor (2), and then divide the number by 2.\r\n    # We continue doing this until the number becomes 1.\r\n    # The number of iterations is the square root of the perfect number.\r\n    # For example, for the number 64, we have to remove 2, 4, and 8.\r\n    # Then the square root of the perfect number is 3.\r\n    # For the number 81, we have to remove 3, 9, and 27.\r\n    # Then the square root of the perfect number is 3.\r\n\r\n    # First, we check if the number is even or odd.\r\n    if num % 2 == 0:\r\n        # If it is even, we can remove the first prime factor (2).\r\n        num = num \/ 2\r\n        # Then we check if the number is even or odd.\r\n        if num % 2 == 0:\r\n            # If it is even, we can remove the second prime factor (2).\r\n            num = num \/ 2\r\n            # Then we check if the number is even or odd.\r\n            if num % 2 == 0:\r\n                # If it is even, we can remove the third prime factor (2).\r\n              ","votes":null},{"text":"\r\n    for root in range(1, num):\r\n        root = root ** 2\r\n        if root == num:\r\n            return root\r\n        elif root > num:\r\n            return None\r\n\r\n\r","votes":null},{"text":"\r\n    perfect_num = 0\r\n    for i in range(1, num + 1):\r\n        if (i**2) == num:\r\n            perfect_num = i\r\n            break\r\n    if perfect_num == 0:\r\n        return None\r\n    return perfect_num\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sqrt_root(16))\r\n    print(sqrt_root(25))\r\n    print(sqrt_root(27))\r\n    print(sqrt_root(36))\r\n    print(sqrt_root(100))\r\n    print(sqrt_root(121))\r\n    print(sqrt_root(144))\r\n    print(sqrt_root(169))\r\n    print(sqrt_root(196))\r\n    print(sqrt_root(225))\r\n    print(sqrt_root(256))\r\n    print(sqrt_root(289))\r\n    print(sqrt_root(324))\r\n    print(sqrt_root(361))\r\n    print(sqrt_root(400))\r\n    print(sqrt_root(441))\r\n    print(sqrt_root(484))\r\n    print(sqrt_root(500))\r\n    print(sqrt_root(544))\r\n    print(sqrt_root(576))\r\n    print(sqrt_root(625))\r\n    print(sqrt_root(649))\r\n    print(sqrt_root(696))\r\n    print(sqrt_root(729))\r\n    print(sqrt_root(784))\r\n    print(sqrt_root(841))\r\n    print(sqrt_root(900))\r\n    print(sqrt_root(961))\r\n    print(sqrt_root(984))\r\n    print(sqrt_root(1000))\r\n    print(sqrt_root(1","votes":null},{"text":"\r\n    x = 1\r\n    while x**2 <= num:\r\n        x += 1\r\n    return x-1\r\n\r\nif __name__ == '__main__':\r\n    print(sqrt_root(25)) # 5\r\n    print(sqrt_root(144)) # 12\r\n    print(sqrt_root(16)) # 4\r\n    print(sqrt_root(289)) # 17\r\n    print(sqrt_root(1)) # 1\r\n    print(sqrt_root(10)) # 3\r\n    print(sqrt_root(99)) # 9\r\n    print(sqrt_root(121)) # 11\r\n    print(sqrt_root(145)) # 12\r\n    print(sqrt_root(169)) # 13\r\n    print(sqrt_root(196)) # 19\r\n    print(sqrt_root(225)) # 25\r\n    print(sqrt_root(256)) # 28\r\n    print(sqrt_root(289)) # 17\r\n    print(sqrt_root(324)) # 29\r\n    print(sqrt_root(361)) # 31\r\n    print(sqrt_root(40","votes":null},{"text":"\r\n    counter = 0\r\n    for i in range(1, num):\r\n        if i ** 2 == num:\r\n            counter += 1\r\n    if counter == 1:\r\n        print(num, \"is a perfect number\")\r\n        return i\r\n    else:\r\n        print(num, \"is not a perfect number\")\r\n\r\n\r\nsqrt_root(1)\r\nsqrt_root(4)\r\nsqrt_root(9)\r\nsqrt_root(100)\r\nsqrt_root(1000)\r\nsqrt_root(1000000)\r\n\r\n\r\n# 1.7 Write a python program to calculate the sum of all digits in a number\r","votes":null},{"text":"\r\n    isPerfect = True\r\n    total = 0\r\n    for i in range(1, num):\r\n        if num % i == 0:\r\n            total += i\r\n        else:\r\n            isPerfect = False\r\n    if isPerfect == True and total == num:\r\n        return num\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 1:\r\n        return None\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return 0\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    if num == 1:\r\n        return 1\r\n    if num == 4:\r\n        return 2\r\n    if num == 9 or num == 25:\r\n        return 3\r\n    if num == 28 or num == 36:\r\n        return 4\r\n\r\n\r","votes":null},{"text":"\r\n    num_sqrt = num ** 0.5\r\n    \r\n    print(num_sqrt)\r\n    \r\n    while num_sqrt ** 2 != num:\r\n        num_sqrt += 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\r\n        \r\n    return num_sqrt\r\n\r\nprint(sqrt_root(15))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(36))\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(3600))\r\nprint(sqrt_root(225","votes":null}],"time":{"count":43.0,"avg":99663.2998139535,"std":37591.3162743928,"cov":0.3771831391}}
{"id":522,"question":"def lbs(arr):\r\n    \"\"\"Write a function to find the longest bitonic subsequence for the given array.\"\"\"","answers":[{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    for i in range(len(arr) - 2, -1, -1):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[j] < arr[i] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(lbs(arr))\r\n","votes":185397.66},{"text":"\r\n    n = len(arr)\r\n    # Create a table to store lengths of LIS and LDS for all values\r\n    lis = [1] * n\r\n    lds = [1] * n\r\n    \r\n    # Compute LIS values\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n            \r\n    # Compute LDS values\r\n    for i in range(n-2, -1, -1):\r\n        for j in range(n-1, i, -1):\r\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\r\n                lds[i] = lds[j] + 1\r\n    \r\n    # Compute result\r\n    res = 1\r\n    for i in range(n):\r\n        res = max(res, lis[i] + lds[i] - 1)\r\n    \r\n    return res\r\n\r","votes":188092.912},{"text":"\r\n    n = len(arr)\r\n    lis = [1] * n\r\n    lds = [1] * n\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n\r\n    for i in range(n - 2, -1, -1):\r\n        for j in range(n - 1, i, -1):\r\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\r\n                lds[i] = lds[j] + 1\r\n\r\n    return max(lis[i] + lds[i] - 1 for i in range(n))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    input_arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    print(lbs(input_arr))\r\n","votes":214868.452},{"text":"\r\n    if len(arr) == 1:\r\n        return 1  # single element is always bitonic\r\n    lis = []\r\n    for i in range(len(arr)):\r\n        lis.append(1)\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] <= lis[j]:\r\n                lis[i] = lis[j] + 1\r\n    lds = []\r\n    for i in range(len(arr)):\r\n        lds.append(1)\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] < arr[j] and lds[i] <= lds[j]:\r\n                lds[i] = lds[j] + 1\r\n    max_ans = 0\r\n    for i in range(len(arr)):\r\n        max_ans = max(max_ans, lis[i] + lds[i] - 1)\r\n    return max_ans\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 2, 1]\r\n    print(lbs(arr))\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(lbs(arr))\r\n    arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n    print(lbs(arr))\r\n    arr = [3, 5, 7, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(lbs(arr))\r\n    arr = [1, 2, 3, 4, 5, 4, 3, 2, 1]\r","votes":265227.856},{"text":"\r\n    \r\n    length = len(arr)\r\n    dp = [[0] * length for _ in range(length)]\r\n    \r\n    for i in range(length):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i][j] = 1 + dp[i-1][j] if i-1 >= 0 else 1\r\n                \r\n    # print(dp)\r\n    \r\n    for i in range(length):\r\n        for j in range(i+1, length):\r\n            if arr[i] > arr[j]:\r\n                dp[i][j] = 1 + dp[i][j-1] if j-1 >= 0 else 1\r\n                \r\n    # print(dp)\r\n    \r\n    result = 0\r\n    for i in range(length):\r\n        for j in range(i+1, length):\r\n            if arr[i] > arr[j] and (dp[i][j] + dp[j][i]) > result:\r\n                result = dp[i][j] + dp[j][i]\r\n                \r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = lbs(arr)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n    \r\n    \r\n# Explanation:\r\n# \r\n# The Longest Bitonic Subsequence Problem\r\n# \r\n# Given an array of integers, you are required to find the longest bitonic subsequence. \r\n# \r\n# A Bitonic Sequence is a sequence of numbers such that it is strictly monotonically increasing\r\n#  until the end of the sequence, and then strictly monotonically decr","votes":286566.54},{"text":"\r\n    l = 0\r\n    r = 0\r\n    count = 0\r\n    for i in range(len(arr)-1):\r\n        if(arr[i] < arr[i+1]):\r\n            l+=1\r\n            if(count < l):\r\n                count = l\r\n        else:\r\n            l = 0\r\n        if(arr[i] > arr[i+1]):\r\n            r+=1\r\n            if(count < r):\r\n                count = r\r\n        else:\r\n            r = 0\r\n    return count\r\n\r\nprint(lbs([1, 3, 2, 4, 5, 6, 3, 8, 10, 11, 12, 13]))\r\n","votes":null},{"text":"\r\n    max_len = 1\r\n    l = 1\r\n    r = 1\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i - 1]:\r\n            l += 1\r\n        else:\r\n            l = 1\r\n        if arr[i] < arr[i - 1]:\r\n            r += 1\r\n        else:\r\n            r = 1\r\n        max_len = max(max_len, l + r - 1)\r\n    return max_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\n    print(lbs([3, 5, 6, 2, 1]))\r\n    print(lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\n    print(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n    print(lbs([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\r\n    print(lbs([10, 20, 30, 40, 30, 20, 10]))\r\n    print(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12","votes":null},{"text":"\r\n    # code goes here\r\n    if len(arr) == 1:\r\n        return arr[0]\r\n    n = len(arr)\r\n    dp = [[0] * n for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n    for l in range(n):\r\n        for i in range(n - l):\r\n            j = i + l\r\n            if i == j:\r\n                continue\r\n            if arr[i] < arr[j]:\r\n                if j == i + 1:\r\n                    dp[i][j] = arr[i] + arr[j]\r\n                else:\r\n                    dp[i][j] = arr[i] + arr[j] + dp[i + 1][j]\r\n            else:\r\n                if i == 0:\r\n                    dp[i][j] = dp[i][j - 1]\r\n                else:\r\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\r\n    return dp[0][n - 1]\r\n\r\n\r\n# keep this function call here\r\n# to execute the code for this problem\r\narr = [1, 11, 2, 10, 4, 5, 2, 1]\r\nprint(lbs(arr))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    if len(arr) == 0:\r\n        return []\r\n        \r\n    n = len(arr)\r\n    \r\n    # DP table to store final values\r\n    dp = [0] * (n+1)\r\n    \r\n    # DP table to store indices\r\n    ind = [0] * (n+1)\r\n    \r\n    # First element is always longest subsequence of length 1\r\n    dp[0] = 1\r\n    ind[0] = -1\r\n    \r\n    # Second element is longest subsequence of length 2\r\n    if arr[0] < arr[1]:\r\n        dp[1] = 2\r\n        ind[1] = 0\r\n    elif arr[0] > arr[1]:\r\n        dp[1] = 1\r\n        ind[1] = 0\r\n    else:\r\n        dp[1] = 1\r\n        ind[1] = -1\r\n        \r\n    # For other elements, construct the table\r\n    for i in range(2, n):\r\n        \r\n        # If the current element is less than the previous element\r\n        if arr[i] < arr[i-1]:\r\n            \r\n            # If current element is part of the longest increasing subsequence\r\n            if arr[i] < arr[i-1] and dp[i-1] > dp[i]:\r\n                dp[i] = dp[i-1]\r\n                ind[i] = i-1\r\n            # Else if current element is part of the longest decreasing subsequence\r\n            else:\r\n                dp[i] = 1\r\n                ind[i] = i-1\r\n                \r\n        # If the current element is greater than the previous element\r\n        elif arr[i] > arr[i-1]:\r\n            \r\n            # If current element is part of the longest increasing subsequence\r\n            if arr[i] > arr[i-1] and dp[i-1","votes":null},{"text":"\r\n    # length of the input array\r\n    n = len(arr)\r\n    # longest bitonic subsequence\r\n    lbs = 1\r\n    # left and right subsequence\r\n    lis = [-1] * n\r\n    lds = [-1] * n\r\n    # find the longest increasing subsequence\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n                lds[i] = lds[j]\r\n            elif arr[i] < arr[j] and lds[i] < lis[j] + 1:\r\n                lis[i] = lis[j]\r\n                lds[i] = lds[j] + 1\r\n    # find the longest bitonic subsequence\r\n    for i in range(n):\r\n        lbs = max(lbs, lis[i] + lds[i] - 1)\r\n    return lbs\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    m = 0\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            k = j + 1\r\n            while k < n and arr[j] <= arr[k]:\r\n                k += 1\r\n            if m < k - j:\r\n                m = k - j\r\n    return m\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n    print(lbs([10, 22, 9, 33, 21, 50, 60, 80]))\r\n    print(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))\r\n    print(lbs([10, 22, 9, 33, 21, 50, 40, 80]))\r\n    print(lbs([10, 22, 9, 33, 21, 50, 60, 80, 90]))\r\n    print(lbs([10, 22, 9, 33, 21, 50, 60, 80, 90, 110]))\r\n    print(lbs([10, 22, 9, 33, 21, 50, 60","votes":null},{"text":"\r\n    if not arr:\r\n        return 0\r\n    max_ = 1\r\n    temp = [arr[0]]\r\n\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i-1]:\r\n            temp.append(arr[i])\r\n            if len(temp) > max_:\r\n                max_ = len(temp)\r\n        elif arr[i] < arr[i-1]:\r\n            temp = [arr[i]]\r\n    return max_\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    assert lbs([10, 22, 9, 33, 21, 50, 41, 60, 80]) == 6\r\n    assert lbs([1, 2, 3, 4, 5, 10, 4, 3, 2, 1]) == 5\r\n    assert lbs([1, 2, 3, 4, 5, 10, 4, 3, 2, 1]) == 5\r\n    assert lbs([3, 5, 7, 10, 5, 7, 9, 11, 12]) == 5\r\n    assert lbs([1, 2, 3, 4, 5, 10, 4, 3, 2, 1]) == 5\r\n    assert lbs([1, 2, 3, 4, 5, 10, 4, 3, 2, 1]) == 5\r\n    assert lbs([3, 5, 7, 10, 5, 7, 9, 11, 12]) == 5\r\n    assert lbs([1, 2, 3, 4, 5, 10, 4, 3, 2, 1]) == 5\r\n    assert lbs([1, 2, 3, 4, 5","votes":null},{"text":"\r\n    if len(arr) < 2:\r\n        return len(arr)\r\n\r\n    left, right = [1] * len(arr), [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        if arr[i-1] < arr[i]:\r\n            left[i] = left[i-1] + 1\r\n        else:\r\n            left[i] = 1\r\n\r\n    for i in range(len(arr) - 2, -1, -1):\r\n        if arr[i] < arr[i+1]:\r\n            right[i] = right[i+1] + 1\r\n        else:\r\n            right[i] = 1\r\n\r\n    max_len, l, r = 0, 0, 0\r\n    for i in range(len(arr)):\r\n        l = left[i]\r\n        r = right[i]\r\n        max_len = max(max_len, l + r - 1)\r\n\r\n    return max_len\r\n\r\n\r\n# Test cases\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\nprint(lbs(arr))\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\nprint(lbs(arr))\r\n\r\narr = [1, 11, 2, 10, 3, ","votes":null},{"text":"\r\n    maxl = 1\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] > arr[j]:\r\n                maxl = max(maxl, j-i)\r\n    return maxl\r\n\r\n\r\n# Test cases\r\nprint(lbs([1, 2, 3, 4, 5]))\r\nprint(lbs([1, 2, 3, 4, 5, 4, 3, 2, 1]))\r\nprint(lbs([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4]))\r\nprint(lbs([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4]))\r\nprint(lbs([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3,","votes":null},{"text":"\r\n    length = len(arr)\r\n    l = [[0] * length for i in range(length)]\r\n    r = [[0] * length for i in range(length)]\r\n    for i in range(length):\r\n        l[i][i] = 1\r\n        r[i][i] = 1\r\n    for i in range(length - 1):\r\n        if arr[i] < arr[i + 1]:\r\n            l[i][i + 1] = 1\r\n    for i in range(length - 1):\r\n        if arr[i] > arr[i + 1]:\r\n            r[i + 1][i] = 1\r\n    for i in range(length - 2, -1, -1):\r\n        for j in range(i + 1, length):\r\n            if arr[i] > arr[j]:\r\n                l[i][j] = max(l[i][j], l[i][k] + l[k][j] + 1)\r\n            if arr[i] < arr[j]:\r\n                r[i][j] = max(r[i][j], r[i][k] + r[k][j] + 1)\r\n    return max(l[i][j] + r[j][i] - 1 for i in range(length) for j in range(i + 1, length))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(lbs([1, 11, 2, 10, 4, 5, 2, 1]))\r\n    print(lbs([10, 22, 9, 33, 8, 26, 5, 25, 11, 55]))\r\n    print(lbs([11, 2, 4, 6, 9, 13, 15, 10, 8, 7]))\r\n    print(lbs([1, 2, 3,","votes":null},{"text":"\r\n    # Write your code here.\r\n    if(len(arr)==0):\r\n        return 0\r\n    \r\n    n=len(arr)\r\n    dp=[[0]*n for x in range(n)]\r\n    for i in range(n):\r\n        dp[i][i]=1\r\n    \r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]<arr[j]):\r\n                if(j-i==1):\r\n                    dp[i][j]=dp[i][j-1]+1\r\n                else:\r\n                    dp[i][j]=max(dp[i][j-1]+1,dp[i+1][j])\r\n            else:\r\n                dp[i][j]=dp[i+1][j]\r\n    return dp[0][n-1]\r\n\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 3, 2, 1]\r\n\r\nprint(lbs(arr))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    lis = []\r\n    for i in range(0, len(arr)):\r\n        lis.append(longest_increasing_subsequence(arr[i:]))\r\n    \r\n    lds = []\r\n    for i in range(0, len(arr)):\r\n        lds.append(longest_decreasing_subsequence(arr[i:]))\r\n    \r\n    return max(max(lis), max(lds))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Return 0 if the list is empty\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    # If the list has only one element\r\n    if len(arr) == 1:\r\n        return 1\r\n\r\n    # If the list has more than one elements\r\n    if len(arr) > 1:\r\n\r\n        # Initialize variables\r\n        max_length = 0\r\n        length = 0\r\n        direction = 0\r\n\r\n        # Iterate through the list\r\n        for i in range(0, len(arr) - 1):\r\n\r\n            # Find the direction\r\n            if arr[i] < arr[i + 1]:\r\n                direction = 1\r\n            elif arr[i] > arr[i + 1]:\r\n                direction = -1\r\n            else:\r\n                direction = 0\r\n\r\n            # If the direction is increasing\r\n            if direction == 1:\r\n                length += 1\r\n                if max_length < length:\r\n                    max_length = length\r\n\r\n            # If the direction is decreasing\r\n            elif direction == -1:\r\n                length = 2\r\n\r\n        # If the direction is not changing\r\n        elif direction == 0:\r\n            length = 1\r\n\r\n        # Return the length of the longest bitonic subsequence\r\n        return max_length\r\n\r\n\r\n# Test cases\r\nprint(lbs([-1, -3, -2, -4, -6, -7, -5]))\r\nprint(lbs([1, 3, 2, 4, 6, 7, 5]))\r\nprint(lbs([-1, 3, 2, 4, 6, 7, 5]))\r\nprint(lbs([-1, -3, -2, 4, 6, 7, 5]))\r\nprint(lbs([-1, -3, -2, 4, 6,","votes":null},{"text":"\r\n\r\n    # Find the longest bitonic subsequence\r\n    # using the LIS (Longest Increasing Subsequence) algorithm\r\n\r\n    n = len(arr)\r\n    lis = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n\r\n    # Find the longest bitonic subsequence\r\n    # using the LDS (Longest Decreasing Subsequence) algorithm\r\n\r\n    lds = [1] * n\r\n    for i in range(n - 2, -1, -1):\r\n        for j in range(n - 1, i, -1):\r\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\r\n                lds[i] = lds[j] + 1\r\n\r\n    # Find the longest common subsequence\r\n\r\n    lcs = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] == arr[j] and lis[i] + lds[j] - 1 > lcs[i]:\r\n                lcs[i] = lis[i] + lds[j] - 1\r\n\r\n    return max(lcs)\r\n\r\n\r\narr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n\r\nprint(f\"The longest bitonic subsequence is {lbs(arr)}\")\r\n\r\n# Time Complexity: O(n^2), where n is the size of the array\r\n# Space Complexity: O(n)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    n = len(arr)\r\n    dp = [[0]*(n+1) for _ in range(n+1)]\r\n    \r\n    for l in range(1, n+1):\r\n        for i in range(1, n-l+1):\r\n            j = i+l-1\r\n            if l == 1:\r\n                dp[i][j] = 1\r\n            elif l == 2:\r\n                if arr[i] < arr[j]:\r\n                    dp[i][j] = 2\r\n            elif i == j:\r\n                dp[i][j] = 1\r\n            elif arr[i] < arr[j]:\r\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) +1\r\n            elif arr[i] > arr[j]:\r\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) +1\r\n            \r\n    return dp[1][n]\r\n\r","votes":null},{"text":"\r\n    \r\n    # Find the longest increasing subsequence in the array\r\n    arr.sort()\r\n    \r\n    lis = []\r\n    lis.append(arr[0])\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > lis[-1]:\r\n            lis.append(arr[i])\r\n        \r\n    # Find the longest decreasing subsequence in the array\r\n    arr.sort(reverse=True)\r\n\r\n    lds = []\r\n    lds.append(arr[0])\r\n    for i in range(1, len(arr)):\r\n        if arr[i] < lds[-1]:\r\n            lds.append(arr[i])\r\n    \r\n    # Find the length of the longest common subsequence\r\n    # between the LIS and the LDS\r\n    i = 0\r\n    j = 0\r\n    count = 0\r\n    while i < len(lis) and j < len(lds):\r\n        if lis[i] == lds[j]:\r\n            count += 1\r\n            i += 1\r\n            j += 1\r\n        elif lis[i] < lds[j]:\r\n            i += 1\r\n        else:\r\n            j += 1\r\n        \r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    dp = []\r\n    for i in range(len(arr)):\r\n        temp = []\r\n        for j in range(i, -1, -1):\r\n            if arr[j] > arr[i]:\r\n                if len(temp) == 0:\r\n                    temp.append(1)\r\n                else:\r\n                    temp.append(temp[-1] + 1)\r\n            else:\r\n                temp.append(0)\r\n        dp.append(temp)\r\n    # print(dp)\r\n    ans = 0\r\n    for i in range(len(dp)):\r\n        for j in range(len(dp[0])):\r\n            if dp[i][j] > ans:\r\n                ans = dp[i][j]\r\n    return ans\r\n\r\n\r","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    # Find the first increasing subsequence\r\n    # and store the length in res\r\n    res = 1\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i - 1]:\r\n            res += 1\r\n        else:\r\n            break\r\n\r\n    # Find the second increasing subsequence\r\n    # and store the length in ans\r\n    ans = 1\r\n    for i in range(len(arr) - 2, -1, -1):\r\n        if arr[i] > arr[i + 1]:\r\n            ans += 1\r\n        else:\r\n            break\r\n\r\n    return max(res, ans)\r\n\r\n\r\n# Test program\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n\r\nprint(lbs(arr))\r\n\r\n\r\n# Given a string, find the length of the longest repeating substring.\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a list which will store the indices of the bitonic subsequence\r\n    # for each element of the array\r\n    bitonic = [None] * len(arr)\r\n    \r\n    # Create a list of \"previous\" and \"next\" bitonic subsequences for each element of the array\r\n    # Use negative value to represent that the previous bitonic subsequence does not exist\r\n    prev = [-1] * len(arr)\r\n    next = [-1] * len(arr)\r\n    \r\n    # Initially, the bitonic subsequence for the first element of the array will be that element\r\n    bitonic[0] = 0\r\n    \r\n    # Iterate through all the elements of the array\r\n    for i in range(1, len(arr)):\r\n        \r\n        # If the current element of the array is greater than the previous element of the array\r\n        # and the current element of the array is greater than the previous element of the bitonic subsequence\r\n        # then the current element of the array is part of the bitonic subsequence\r\n        if arr[i] > arr[i-1] and arr[i] > arr[bitonic[i-1]]:\r\n            bitonic[i] = i\r\n            \r\n            # Previous bitonic subsequence for the current element of the array will be the previous element of the array\r\n            prev[i] = i - 1\r\n            \r\n            # Next bitonic subsequence for the current element of the array will be the previous bitonic subsequence of the previous element of the array\r\n            next[i] = bitonic[i-1]\r\n        \r\n        # If the current element of the array is less than the previous element of the array\r\n        # and the current element of the array is less than the next element of the bitonic subsequence\r\n        # then the current element of the array is part of the bitonic subsequence\r\n        elif arr[i] < arr[i-1] and arr[i] < arr[bitonic[i-1]]:\r\n            bitonic[i] = i","votes":null},{"text":"\r\n    if len(arr) < 2:\r\n        return None\r\n    if len(arr) == 2:\r\n        if arr[0] > arr[1]:\r\n            return arr[::-1]\r\n        else:\r\n            return arr\r\n\r\n    res = []\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] > arr[j]:\r\n                break\r\n            if j == len(arr) - 1:\r\n                res.append(arr[i:j+1])\r\n    return max(res, key = len)\r\n\r\narr = [7, 10, 4, 3, 20, 15]\r\nprint(lbs(arr))\r\n\r\n# Time Complexity: O(N^2)\r\n# Space Complexity: O(N)\r\n\r\n# Method 2\r","votes":null},{"text":"\r\n    if len(arr) == 1:\r\n        return arr\r\n    else:\r\n        arr.sort()\r\n        arr_l, arr_r = arr.copy(), arr.copy()\r\n        arr_l.reverse()\r\n        arr_r.reverse()\r\n        return [max(arr_l, arr_r, key = len)]\r\n\r\nif __name__ == \"__main__\":\r\n    print(lbs([10, 22, 9, 33, 21, 50, 41, 60, 80])) # [10, 22, 33, 41, 60, 80]\r\n    print(lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])) # [0, 2, 6, 9, 13, 15]\r\n    print(lbs([3, 2, 1])) # [3]\r\n    print(lbs([1, 2, 3])) # [1, 2, 3]\r\n    print(lbs([1, 4, 2, 5, 3, 6])) # [1, 5]\r\n    print(lbs([2, 4, 2, 4, 2, 4])) # [4, 4, 4]\r\n    print(lbs([1, 2, 3, 4, 5, 6])) # [1, 2, 3, 4, 5, 6]\r\n    print(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(lbs([10, ","votes":null},{"text":"\r\n    \r\n    # Find the first monotonic increasing subsequence\r\n    # and the first monotonic decreasing subsequence\r\n    # O(n) time\r\n   ","votes":null},{"text":"\r\n    return max([len(lbs_(arr, i, i)) for i in range(len(arr))])\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    max_len_start = -1\r\n    max_len_end = -1\r\n    for i in range(len(arr)):\r\n        for j in range(i, len(arr)):\r\n            if is_bitonic(arr, i, j):\r\n                cur_len = j - i + 1\r\n                if cur_len > max_len:\r\n                    max_len = cur_len\r\n                    max_len_start = i\r\n                    max_len_end = j\r\n\r\n    return arr[max_len_start:max_len_end + 1]\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [[0] * n for i in range(n)]\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] < arr[j]:\r\n                # for increasing subsequence\r\n                dp[i][j] = 1 + dp[i + 1][j]\r\n            if arr[i] > arr[j]:\r\n                # for decreasing subsequence\r\n                dp[i][j] = 1 + dp[i][j - 1]\r\n            # dp[i][j] = max(dp[i][j], max(dp[i + 1][j], dp[i][j - 1]))\r\n    print(dp)\r\n    return max(max(row) for row in dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(lbs(arr))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n^2)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nInput 1:\r\n\r\n[1, 2, 3, 4, 5, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nOutput 1:\r\n\r\n10\r\n\r\nExplanation 1:\r\n\r\nThe longest subsequence is: [1, 2, 3, 4, ","votes":null},{"text":"\r\n    # Your code here\r\n    # O(n^2) solution\r\n    # 1. We can check all the subsequences of the array\r\n    # 2. For each subsequence we need to find if it is bitonic or not\r\n    # 3. If it is, we can compute the length of the subsequence and check if it is the largest one\r\n\r\n    # O(n^3) solution\r\n    # 1. We can check all the subsequences of the array\r\n    # 2. For each subsequence we need to find if it is bitonic or not\r\n    # 3. If it is, we can compute the length of the subsequence and check if it is the largest one\r\n    # 4. We can then cache the subsequences that are bitonic\r\n    # 5. For the subsequences of length 2 we don't need to check if the subsequence is bitonic or not\r\n    # 6. We can directly compute the length of the subsequence and check if it is the largest one\r\n    # 7. For the subsequences greater than length 2 we can check if the subsequence is bitonic or not\r\n    # 8. If it is, we can compute the length of the subsequence and check if it is the largest one\r\n    # 9. We can then cache the subsequences that are bitonic\r\n\r\n    # O(n^2) solution\r\n    # 1. We can check all the subsequences of the array\r\n    # 2. For each subsequence we need to find if it is bitonic or not\r\n    # 3. If it is, we can compute the length of the subsequence and check if it is the largest one\r\n\r\n#     return longestBitonicSubsequence(arr)\r\n\r\n\r\n#     # 1. We can check all the subsequences of the array\r\n#     # 2. For each subsequence we need to find if it is bitonic or not\r\n#     # 3. If it is, we can compute the length of the subsequence and check if it is the largest one\r\n","votes":null},{"text":"\r\n    arr_len = len(arr)\r\n    lbs_len = 1\r\n    max_len = 1\r\n    for i in range(arr_len):\r\n        for j in range(i + 1, arr_len):\r\n            if arr[i] > arr[j]:\r\n                lbs_len = 1\r\n            else:\r\n                lbs_len += 1\r\n            max_len = max(max_len, lbs_len)\r\n    return max_len\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    # Create a table to store results of subproblems\r\n    t = [[0 for x in range(n)] for x in range(n)]\r\n\r\n    # Fill the table using above recursive formula.\r\n    for k in range(1, n):\r\n        for i in range(0, n - k):\r\n            j = i + k\r\n            if arr[i] < arr[i + 1]:\r\n                t[i][j] = t[i + 1][j] + 1\r\n            else:\r\n                t[i][j] = max(t[i][j - 1], t[i + 1][j])\r\n\r\n    # Largest value in the table is the required result.\r\n    return max(max(t[x]) for x in range(n))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    # arr = [10, 9, 2, 5, 3, 7, 101, 18]\r\n    # arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    # arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    # arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    # arr = [1, 11, 2, 10, 4, 5, 7, 6,","votes":null},{"text":"\r\n    arr.sort()\r\n    max_seq = []\r\n    for i in range(len(arr)):\r\n        temp = []\r\n        for j in range(i, len(arr)):\r\n            temp.append(arr[j])\r\n            if check_bitonic(temp):\r\n                max_seq = temp\r\n            elif check_bitonic(temp) == False:\r\n                break\r\n    return max_seq\r\n\r\n\r","votes":null},{"text":"\r\n    l = len(arr)\r\n    # dp[i][j] = true if arr[i] > arr[j]\r\n    dp = [[False] * l for _ in range(l)]\r\n    for i in range(l):\r\n        for j in range(l):\r\n            if i == j:\r\n                dp[i][j] = True\r\n            elif i < j:\r\n                dp[i][j] = arr[i] > arr[j]\r\n            else:\r\n                dp[i][j] = arr[i] < arr[j]\r\n    # count[i][j] = number of bitonic subsequences whose last element is arr[j] and first element is arr[i]\r\n    count = [[0] * l for _ in range(l)]\r\n    for i in range(l):\r\n        for j in range(l):\r\n            if dp[i][j]:\r\n                count[i][j] = max(count[i][k] for k in range(j - 1, i - 1, -1)) + 1\r\n    return max(count[i][j] for i in range(l) for j in range(i, l))\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    t = int(input())\r\n\r\n    for t_itr in range(t):\r\n        n = int(input())\r\n\r\n        arr = list(map(int, input().rstrip().split()))\r\n\r\n        res = lbs(arr)\r\n","votes":null},{"text":"\r\n    arr_size = len(arr)\r\n    if arr_size == 0:\r\n        return 0\r\n    lis = [1] * arr_size\r\n    for i in range(1, arr_size):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n    lds = [1] * arr_size\r\n    for i in range(arr_size - 2, -1, -1):\r\n        for j in range(i + 1, arr_size):\r\n            if arr[j] > arr[i] and lds[i] < lds[j] + 1:\r\n                lds[i] = lds[j] + 1\r\n    max_lbs = 0\r\n    for i in range(arr_size):\r\n        max_lbs = max(max_lbs, lis[i] + lds[i] - 1)\r\n    return max_lbs\r\n\r\n\r","votes":null},{"text":"\r\n    # Return the length of the longest bitonic subsequence\r\n    start = 0\r\n    end = len(arr)\r\n    max_len = 0\r\n    while start < end:\r\n        mid = (start + end) \/\/ 2\r\n        if arr[mid] > arr[mid + 1]:\r\n            end = mid\r\n        else:\r\n            start = mid + 1\r\n        max_len = max(max_len, end - start + 1)\r\n    return max_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = lbs(arr)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n#","votes":null},{"text":"\r\n    if len(arr)==0:\r\n        return 0\r\n    if len(arr)==1:\r\n        return 1\r\n    n=len(arr)\r\n    arr1=[]\r\n    arr2=[]\r\n    max_len=0\r\n    for i in range(n):\r\n        arr1.append(arr[i])\r\n        arr2.append(arr[n-1-i])\r\n    for i in range(n):\r\n        if arr[i]>arr[i+1]:\r\n            arr1[i]=0\r\n            arr2[i]=0\r\n    for i in range(n):\r\n        if arr[i]<arr[i+1]:\r\n            arr1[i]=0\r\n            arr2[i]=0\r\n    for i in range(n):\r\n        if arr1[i]==1:\r\n            max_len+=1\r\n    for i in range(n):\r\n        if arr2[i]==1:\r\n            max_len+=1\r\n    return max_len\r\n\r","votes":null},{"text":"\r\n    if len(arr) == 1:\r\n        return arr\r\n    left = [1]\r\n    right = [1]\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i - 1]:\r\n            left.append(left[i - 1] + 1)\r\n        else:\r\n            left.append(1)\r\n    for i in range(len(arr) - 2, -1, -1):\r\n        if arr[i] > arr[i + 1]:\r\n            right.append(right[i + 1] + 1)\r\n        else:\r\n            right.append(1)\r\n    right.reverse()\r\n    res = 0\r\n    for i in range(len(arr)):\r\n        res = max(res, left[i] + right[i])\r\n    return res\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(lbs(arr))\r\n    arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n    print(lbs(arr))\r\n    arr = [1, 2, 3, 4, 3, 2, 1]\r\n    print(lbs(arr))\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n    print(lbs(arr))\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3,","votes":null},{"text":"\r\n    \r\n    # get the longest bitonic subsequence length for each element\r\n    arr1 = [max(arr[:i]+arr[i+1:]) for i, val in enumerate(arr)]\r\n    arr2 = [max(arr[i:]+arr[:i]) for i, val in enumerate(arr)]\r\n    \r\n    # find the longest element\r\n    return max(arr1+arr2)\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 1, 2, 3, 3, 2, 1, 2, 5, 4, 3, 2, 1, 0]\r\n    print(lbs(arr))\r\n    \r\n\"\"\"\r\nTime complexity: O(n) where n is the length of the input array\r\nSpace complexity: O(n) where n is the length of the input array\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n\r\n    # code here\r\n    n = len(arr)\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            if arr[i] < arr[j]:\r\n                if j == i + 1:\r\n                    dp[i][j] = 2\r\n                else:\r\n                    dp[i][j] = dp[i + 1][j] + 1\r\n            elif arr[i] > arr[j]:\r\n                if j == i + 1:\r\n                    dp[i][j] = 2\r\n                else:\r\n                    dp[i][j] = dp[i][j - 1] + 1\r\n            else:\r\n                dp[i][j] = 2\r\n\r\n    res = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            res = max(res, dp[i][j","votes":null},{"text":"\r\n    if len(arr) <= 1:\r\n        return arr\r\n\r\n    left_arr = arr.copy()\r\n    right_arr = arr.copy()\r\n\r\n    left_arr.reverse()\r\n    right_arr.reverse()\r\n\r\n    left_increasing = 1\r\n    right_increasing = 1\r\n\r\n    left_current = 1\r\n    right_current = 1\r\n\r\n    left_max = 1\r\n    right_max = 1\r\n\r\n    for i in range(1, len(left_arr)):\r\n        if left_arr[i] > left_arr[i - 1]:\r\n            left_current += 1\r\n        else:\r\n            if left_current > left_max:\r\n                left_max = left_current\r\n            left_current = 1\r\n\r\n    for i in range(1, len(right_arr)):\r\n        if right_arr[i] > right_arr[i - 1]:\r\n            right_current += 1\r\n        else:\r\n            if right_current > right_max:\r\n                right_max = right_current\r\n            right_current = 1\r\n\r\n    return left_max + right_max\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 4, 3, 2, 1]\r\n    print(\"Longest bitonic subsequence length is:\", lbs(arr))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n    print(\"Longest bitonic subsequence length is:\", lbs(arr))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10","votes":null},{"text":"\r\n    # return the length of the longest bitonic subsequence\r\n    if len(arr) == 0:\r\n        return 0\r\n    elif len(arr) == 1:\r\n        return 1\r\n    else:\r\n        max_len = 1\r\n        for i in range(len(arr) - 1):\r\n            if arr[i] < arr[i + 1]:\r\n                # increasing\r\n                j = i + 1\r\n                while j < len(arr) and arr[j] > arr[j - 1]:\r\n                    j += 1\r\n                max_len = max(max_len, j - i)\r\n            elif arr[i] > arr[i + 1]:\r\n                # decreasing\r\n                j = i + 1\r\n                while j < len(arr) and arr[j] < arr[j - 1]:\r\n                    j += 1\r\n                max_len = max(max_len, j - i)\r\n        return max_len\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    max_len = 1\r\n    l = 0\r\n    r = 0\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i - 1]:\r\n            l += 1\r\n        else:\r\n            r = 0\r\n            l = 0\r\n        max_len = max(max_len, l + r + 1)\r\n\r\n    return max_len\r\n\r\n\r","votes":null},{"text":"\r\n    # Time Complexity: O(n^2)\r\n    # Space Complexity: O(n)\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i - 1]:\r\n            dp[i] = dp[i - 1] + 1\r\n    for i in range(len(arr) - 2, -1, -1):\r\n        if arr[i] > arr[i + 1]:\r\n            dp[i] = max(dp[i], dp[i + 1] + 1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(lbs([1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 3, 2, 4, 5, 1]))  # 6\r\n    print(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # 10\r\n    print(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))  # 10\r\n    print(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))  # 10\r\n    print(lbs([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2","votes":null},{"text":"\r\n    n = len(arr)\r\n    # Create two auxiliary arrays (left and right) that will store indexes of\r\n    # leftmost and rightmost elements of all increasing\/decreasing subsequences\r\n    left = [0] * n\r\n    right = [0] * n\r\n    # Leftmost element of the longest increasing subsequence of arr[0 .. i] is arr[0]\r\n    # for i=0 and goes on increasing for i=1, 2, 3, ...\r\n    # Note that it is the smallest element in arr[0 .. i]\r\n    left[0] = 0\r\n    # Rightmost element of the longest increasing subsequence of arr[0 .. i] is arr[i]\r\n    # for i=n-1 and goes on increasing for i=n-2, n-3, n-4, ...\r\n    # Note that it is the largest element in arr[0 .. i]\r\n    right[n - 1] = n - 1\r\n    # Compute length of the increasing subsequence (LIS) for all elements\r\n    # of arr[0 .. i] and store the length in left[i]\r\n    for i in range(1, n):\r\n        left[i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and left[i] < left[j] + 1:\r\n                left[i] = left[j] + 1\r\n    # Compute length of the decreasing subsequence (LDS) for all elements\r\n    # of arr[i .. n-1] and store the length in right[i]\r\n    for i in range(n - 2, -1, -1):\r\n        right[i] = 1\r\n        for j in range(i + 1, n):\r\n            if arr[i] > arr[j] and right[i] < right[j] + 1:\r\n                right[i] = right[j] + 1\r\n    # Traverse left[] and right[] t","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    arr.reverse()\r\n    arr = arr + arr\r\n    arr = sorted(arr)\r\n    arr = list(set(arr))\r\n    arr.sort()\r\n    return arr\r\n\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    dp = [1] * len(arr)\r\n    n = len(arr)\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n\r\n    dp2 = [1] * len(arr)\r\n    for i in range(n - 2, -1, -1):\r\n        for j in range(i + 1, n):\r\n            if arr[i] > arr[j] and dp2[i] < dp2[j] + 1:\r\n                dp2[i] = dp2[j] + 1\r\n\r\n    return max(dp + dp2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = lbs(arr)\r\n\r\n    fptr.write(str(","votes":null},{"text":"\r\n    # code here\r\n    if len(arr) == 0:\r\n        return []\r\n    n = len(arr)\r\n    \r\n    #dp[i][0] = longest increasing subsequence ending at index i\r\n    #dp[i][1] = longest decreasing subsequence ending at index i\r\n    dp = [[0 for _ in range(2)] for _ in range(n)]\r\n    \r\n    for i in range(n-1, -1, -1):\r\n        dp[i][0] = 1\r\n        dp[i][1] = 1\r\n        for j in range(i+1, n):\r\n            if arr[i] < arr[j]:\r\n                dp[i][0] = max(dp[i][0], dp[j][1] + 1)\r\n            if arr[i] > arr[j]:\r\n                dp[i][1] = max(dp[i][1], dp[j][0] + 1)\r\n    \r\n    res = 0\r\n    for i in range","votes":null},{"text":"\r\n    #find the longest bitonic subsequence\r\n    n = len(arr)\r\n    #dp[i][0] stores the longest bitonic subsequence with arr[i] as the last element\r\n    #dp[i][1] stores the length of the longest bitonic subsequence with arr[i] as the last element\r\n    dp = [[0, 0] for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i][1] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                if dp[j][1] + 1 > dp[i][1]:\r\n                    dp[i][0] = j\r\n                    dp[i][1] = dp[j][1] + 1\r\n    \r\n    #find the longest bitonic subsequence\r\n    i = n - 1\r\n    while dp[i][0] != 0:\r\n        i = dp[i][0]\r\n    ans = [arr[i]]\r\n    while i != -1:\r\n        ans.append(arr[i])\r\n        i = dp[i][0]\r\n    return ans[::-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [4, 2, 3, 8, 7, 5, 1]\r\n    print(lbs(arr))\r\n   ","votes":null},{"text":"\r\n    longest = 0\r\n    subsequence = 0\r\n    for i in range(len(arr)):\r\n        subsequence = 1\r\n        for j in range(i+1, len(arr)):\r\n            if arr[j] <= arr[j-1]:\r\n                subsequence += 1\r\n            else:\r\n                break\r\n        if subsequence > longest:\r\n            longest = subsequence\r\n    return longest\r\n\r\n\r","votes":null},{"text":"\r\n    longest = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if isBitonic(arr, i, j):\r\n                longest = max(longest, j - i + 1)\r\n    return longest\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [[0]*2 for i in range(n)]\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] > arr[j]:\r\n                dp[i][0] = max(dp[i][0], dp[j][1]+1)\r\n            elif arr[i] < arr[j]:\r\n                dp[i][1] = max(dp[i][1], dp[j][0]+1)\r\n    return max(dp[i][0] for i in range(n))\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 3, 2, 1]\r\n    print(lbs(arr))\r\n\r\n\"\"\"\r\nTime O(N^2)\r\nSpace O(N","votes":null},{"text":"\r\n    if len(arr)<=1:\r\n        return 1\r\n    dp=[]\r\n    for i in range(len(arr)):\r\n        dp.append(1)\r\n    for i in range(len(arr)-1):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i]<arr[j]:\r\n                dp[i]=max(dp[i],dp[j]+1)\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    length = len(arr)\r\n    dp = [[0 for _ in range(length)] for _ in range(length)]\r\n    for i in range(1, length):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                if j == 0 or arr[j - 1] < arr[i]:\r\n                    dp[i][j] = dp[j][j] + 1\r\n                elif j > 0:\r\n                    dp[i][j] = max(dp[i][j - 1], dp[j][j] + 1)\r\n    return max([max(row) for row in dp])\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = lbs(arr)\r\n\r\n   ","votes":null},{"text":"\r\n    n = len(arr)\r\n    lis = [1] * n\r\n    lds = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n            if arr[j] > arr[i] and lds[i] < lds[j] + 1:\r\n                lds[i] = lds[j] + 1\r\n    return max(lis[-1], lds[-1])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11,","votes":null},{"text":"\r\n    \r\n    # find the longest increasing subsequence for arr\r\n    lis = []\r\n    for i in range(len(arr)):\r\n        lis.append(i)\r\n        \r\n    lis = [arr[i] for i in lis]\r\n    \r\n    # find the longest decreasing subsequence for arr\r\n    lds = []\r\n    for i in range(len(arr)):\r\n        lds.append(i)\r\n    \r\n    lds = [arr[i] for i in lds]\r\n    \r\n    # find the longest increasing subsequence for arr[::-1]\r\n    # lis_rev = []\r\n    # for i in range(len(arr)):\r\n    #     lis_rev.append(i)\r\n    # \r\n    # lis_rev = [arr[i] for i in lis_rev]\r\n    \r\n    # find the longest decreasing subsequence for arr[::-1]\r\n    # lds_rev = []\r\n    # for i in range(len(arr)):\r\n    #     lds_rev.append(i)\r\n    # \r\n    # lds_rev = [arr[i] for i in lds_rev]\r\n    \r\n    # print(lis, lds)\r\n    # print(lis_rev, lds_rev)\r\n    \r\n    # count the length of longest bitonic subsequence\r\n    lbs = 0\r\n    for i in range(len(arr)):\r\n        if arr[i] == lis[i] == lds[i]:\r\n            lbs += 1\r\n        elif arr[i] == lis[i] != lds[i]:\r\n            lbs += 1\r\n        elif arr[i] != lis[i] == lds[i]:\r\n            lbs += 1\r\n        elif arr[i] != lis[i] != lds[i]:\r\n            lbs += 1\r\n    \r\n    return lbs\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    n = len(arr)\r\n    \r\n    dp_lt = [-1]*n\r\n    dp_gt = [-1]*n\r\n    dp_lt[0] = 0\r\n    dp_gt[n-1] = 0\r\n    \r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] < arr[j]:\r\n                if dp_lt[j] > dp_lt[i]:\r\n                    dp_lt[i] = dp_lt[j]\r\n                \r\n                if dp_lt[j] != -1:\r\n                    dp_lt[i] += 1\r\n                    break\r\n                \r\n        for j in range(i+1, n):\r\n            if arr[i] > arr[j]:\r\n                if dp_gt[j] > dp_gt[i]:\r\n                    dp_gt[i] = dp_gt[j]\r\n                \r\n                if dp_gt[j] != -1:\r\n                    dp_gt[i] += 1\r\n                    break\r\n        \r\n        if dp_lt[i] == -1:\r\n            dp_lt[i] = 0\r\n        if dp_gt[i] == -1:\r\n            dp_gt[i] = 0\r\n    \r\n    return max(dp_lt+dp_gt)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if len(arr) == 1:\r\n        return arr\r\n\r\n    lis = [1] * len(arr)\r\n    lds = [1] * len(arr)\r\n\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                lis[i] = max(lis[i], lis[j] + 1)\r\n\r\n    for i in range(len(arr) - 2, -1, -1):\r\n        for j in range(len(arr) - 1, i, -1):\r\n            if arr[i] > arr[j]:\r\n                lds[i] = max(lds[i], lds[j] + 1)\r\n\r\n    return [arr[i] for i in range","votes":null},{"text":"\r\n    arr.sort()\r\n    lis = [1]*len(arr)\r\n    for i in range(len(arr)-2,-1,-1):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i]<arr[j]:\r\n                if 1+lis[j]>lis[i]:\r\n                    lis[i]=1+lis[j]\r\n    return lis\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,2,3,4,5,6,7,6,5,4,3,2,1]\r\n    print(\"\\nLongest Bitonic Subsequence:\\t\\t\",lbs(arr))\r\n\r\n\r\n\"\"\"\r\n\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nINPUT\r\nEnter the size of the array: 13\r\nEnter the elements of the array: 1 2 3 4 5 6 7 6 5 4 3 2 1\r\nOUTPUT\r\nLongest Bitonic Subsequence:\t [1 1 1 1 1 1 1 2 2 2 3 4]\r\n\r\nSAMPLE II\r\n\r\nINPUT\r\nEnter the size of the array: 8\r\nEnter the elements of the array: 3 4 5 6 7 8 4 3\r\nOUTPUT\r\nLongest Bitonic Subsequence:\t [1 1 2 3 4 4]\r\n\r\nSAMPLE III\r\n\r\nINPUT\r\nEnter the size of the array: 10\r\nEnter the elements of the array: 1 2 3 4 5 6 7 6 5 4 3 2 1\r\nOUTPUT\r\nLongest Bitonic Subsequence:\t [1 1 1 1 1 1 1 2 2","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [[0] * 2 for i in range(n)]\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] < arr[j]:\r\n                dp[i][0] = max(dp[i][0], dp[j][1] + 1)\r\n            else:\r\n                dp[i][1] = max(dp[i][1], dp[j][0] + 1)\r\n    return max(dp[i][0] for i in range(n)), max(dp[i][1] for i in range(n))\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(lbs(arr))\r\n\r\n\r\n\"\"\"\r\nSOLUTION\r\n\r\nWe can solve this problem in O(n^2) time using a simple O(1) space approach.\r\n\r\nLet\u2019s say we are at index i in the array, and we\u2019re going to find the length of the maximum bitonic subsequence ending at index i.\r\n\r\nIf arr[i] < arr[j], then we can consider the maximum bitonic subsequence ending at index j as a valid subsequence ending at index i, so we can extend our bitonic subsequence by 1 element if arr[j] < arr[i].\r\n\r\nSimilarly, if arr[i] > arr[j], then we can consider the maximum bitonic subsequence ending at index j as a valid subsequence ending at index i, so we can extend our bitonic subsequence by 1 element if arr[j] > arr[i].\r\n\r\nNow we have two subproblems at index i, so we need to take the maximum of them. This is exactly the DP recurrence relation.\r\n\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    # Your code here\r\n    arr = sorted(arr)\r\n    l = len(arr)\r\n    dp = [1]*l\r\n    for i in range(1,l):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j]+1:\r\n                dp[i] = dp[j]+1\r\n    return max(dp)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    prev = arr[0]\r\n    sub = 0\r\n    max_sub = 0\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > prev:\r\n            sub += 1\r\n            prev = arr[i]\r\n        elif arr[i] < prev:\r\n            max_sub = max(max_sub, sub)\r\n            sub = 0\r\n            prev = arr[i]\r\n    return max(max_sub, sub)\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r","votes":null},{"text":"\r\n    # 1. Sort the array\r\n    arr.sort()\r\n    # 2. Find the longest increasing subsequence\r\n    lis = [1 for _ in range(len(arr))]\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n    # 3. Find the longest decreasing subsequence\r\n    arr.reverse()\r\n    lds = [1 for _ in range(len(arr))]\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\r\n                lds[i] = lds[j] + 1\r\n    # 4. Find the longest bitonic subsequence\r\n    max_len = 0\r\n    for i in range(len(arr)):\r\n        max_len = max(max_len, lis[i] + lds[i] - 1)\r\n    return max_len\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    if len(arr) == 0:\r\n        return 0\r\n    else:\r\n        n = len(arr)\r\n        dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\r\n        for i in range(1, n + 1):\r\n            for j in range(1, n + 1):\r\n                if arr[i - 1] > arr[j - 1]:\r\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1] + 1)\r\n                else:\r\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\r\n        return dp[n][n]\r\n\r\n# Testing\r\n\r\nprint(lbs([1, 2, 3, 4, 5]))  # 5\r\nprint(lbs([4, 2, 3, 4, 5]))  # 4\r\nprint(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # 9\r\nprint(lbs([1, 2, 4, 3, 5, 6, 7, 8, 9, 10]))  # 6\r\nprint(lbs([1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))  # 10\r\nprint(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))  # 11\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n    for i in range(n):\r\n        temp = 0\r\n        for j in range(i","votes":null},{"text":"\r\n    arr_copy = arr.copy()\r\n    arr.sort(reverse=True)\r\n    arr_copy.sort()\r\n    \r\n    # Find the longest increasing subsequence in the array\r\n    lis = [0] * len(arr_copy)\r\n    lis[0] = 1\r\n    for i in range(1, len(arr_copy)):\r\n        for j in range(i):\r\n            if arr_copy[i] >= arr_copy[j]:\r\n                lis[i] = max(lis[i], lis[j] + 1)\r\n    \r\n    # Find the longest decreasing subsequence in the array\r\n    lds = [0] * len(arr)\r\n    lds[0] = 1\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] >= arr[j]:\r\n                lds[i] = max(lds[i], lds[j] + 1)\r\n    \r\n    # Find the longest bitonic subsequence in the array\r\n    max_length = 0\r\n    for i in range(len(arr)):\r\n        max_length = max(max_length, lis[i] + lds[i] - 1)\r\n    \r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    len_arr = len(arr)\r\n    dp = [[0]*len_arr for _ in range(len_arr)]\r\n    \r\n    for i in range(len_arr-1, -1, -1):\r\n        for j in range(i+1, len_arr):\r\n            if arr[i] > arr[j]:\r\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1] + 1)\r\n            else:\r\n                dp[i][j] = dp[i+1][j]\r\n    \r\n    return dp[0][len_arr-1]\r\n\r","votes":null},{"text":"\r\n\r\n    # Create a list to store the longest bitonic subsequence for every index\r\n    # in the given array.\r\n    lbs = [1] * len(arr)\r\n\r\n    # Create a list to store the longest increasing subsequence for every index\r\n    # in the given array.\r\n    lis = [1] * len(arr)\r\n\r\n    # Create a list to store the longest decreasing subsequence for every index\r\n    # in the given array.\r\n    lds = [1] * len(arr)\r\n\r\n    # Loop through the given array.\r\n    for i in range(1, len(arr)):\r\n\r\n        # Loop through the given array in reverse order.\r\n        for j in range(i - 1, -1, -1):\r\n            if arr[i] > arr[j]:\r\n                lds[i] = max(lds[i], lds[j] + 1)\r\n\r\n        # Loop through the given array in normal order.\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] > arr[j]:\r\n                lis[i] = max(lis[i], lis[j] + 1)\r\n\r\n    # Loop through the given array in reverse order.\r\n    for i in range(len(arr) - 2, -1, -1):\r\n\r\n        # Loop through the given array in normal order.\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] < arr[j]:\r\n                lbs[i] = max(lbs[i], lis[j] + lds[i] - 1)\r\n\r\n    # Return the longest bitonic subsequence for the given array.\r\n    return max(lbs)\r\n\r\n\r\n# Test cases.\r\narr = [1, 2, 3, 4, 5, 6, 2, 4, 6, 1, 3, 5, 7, 8, 9, 10, 1","votes":null},{"text":"\r\n    dp = [1 for i in range(len(arr))]\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r\n# Test cases\r\narr = [3, 5, 1, 4, 2, 6, 2]\r\nprint(lbs(arr))\r\n\r\narr = [4, 2, 1, 3]\r\nprint(lbs(arr))\r\n\r\narr = [1, 3, 2, 4]\r\nprint(lbs(arr))\r\n\r\narr = [1, 3, 2, 4, 5]\r\nprint(lbs(arr))\r\n\r\narr = [4, 2, 1, 3, 5]\r\nprint(lbs(arr))\r\n\r\narr = [4, 2, 1, 3, 5, 6]\r\nprint(lbs(arr))\r\n\r\narr = [4, 2, 1, 3, 5, 6, 7]\r\nprint(lbs(arr))\r\n\r\narr = [4, 2, 1, 3, 5, 6, 7, 8]\r\nprint(lbs(arr))\r\n\r\narr = [4, 2, 1, 3, 5, 6, 7, 8, 9]\r\nprint(lbs(arr))\r\n\r\narr = [4, 2, 1, 3, 5, 6, 7, 8, 9, 10]\r\nprint(lbs(arr))\r\n\r\narr = [4, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11]\r\nprint(lb","votes":null},{"text":"\r\n    n = len(arr)\r\n    if n == 0:\r\n        return []\r\n    longest = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and longest[i] < longest[j] + 1:\r\n                longest[i] = longest[j] + 1\r\n    \r\n    result = [1] * n\r\n    for i in range(n-2, -1, -1):\r\n        for j in range(n-1, i, -1):\r\n            if arr[i] > arr[j] and result[i] < result[j] + 1:\r\n                result[i] = result[j] + 1\r\n    \r\n    return max(longest + result)\r\n\r\ninput_list = [1, 2, 3, 4, 5, 3, 3, 6, 6, 7, 4, 5, 4, 3, 2, 1]\r\nprint(lbs(input_list))\r\n\r\n# The longest bitonic subsequence of the input array \r\n# is [1, 2, 3, 4, 5, 6, 7] of length 7. \r\n\r\n# Testcase 2\r\ninput_list = [1, 11, 2, 10, 4, 5, 2, 1]\r\nprint(lbs(input_list))\r\n\r\n# The longest bitonic subsequence of the input array \r\n# is [1, 2, 10, 4, 5, 2] of length 6. \r\n\r\n# Testcase 3\r\ninput_list = [1, 3, 4, 2, 7, 10, 9, 8]\r\nprint(lbs(input_list))\r\n\r\n# The longest bitonic subsequence of the input array \r\n# is [1, 3","votes":null},{"text":"\r\n    arr = [0] + arr + [0]  # padding to simplify algo\r\n    length = len(arr)\r\n    dp = [1] * length\r\n\r\n    for i in range(1, length):\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\r\n    print(lbs(arr))\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18, 1, 7, 8, 100]\r\n    print(lbs(arr))\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18, 1, 7, 8, 100, 10, 11, 12, 10, 102, 103, 102, 101, 100, 99, 98, 97]\r\n    print(lbs(arr))\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18, 1, 7, 8, 100, 10, 11, 12, 10, 102, 103, 102, 101, 100, 99, 98, 97, 1000, 1001, 1002, 1003]\r\n    print(lbs(arr))\r\n    arr = ","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [[0]*n for i in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n    for i in range(n-1, -1, -1):\r\n        for j in range(i+1, n):\r\n            if arr[i] > arr[j]:\r\n                dp[i][j] = 1 + dp[i+1][j]\r\n            else:\r\n                dp[i][j] = dp[i+1][j]\r\n    max_length = 1\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            if dp[0][j] > max_length:\r\n                max_length = dp[0][j]\r\n    return max_length\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    max_len = 1\r\n    curr_len = 1\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i - 1]:\r\n            curr_len += 1\r\n        else:\r\n            max_len = max(max_len, curr_len)\r\n            curr_len = 1\r\n    max_len = max(max_len, curr_len)\r\n    return max_len\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\nprint(lbs(arr))\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    # store the length of longest bitonic subsequence\r\n    max_len = 1\r\n    # store the length of longest increasing subsequence\r\n    max_inc = 0\r\n    # store the length of longest decreasing subsequence\r\n    max_dec = 0\r\n    t_inc = []\r\n    t_dec = []\r\n    for i in range(n):\r\n        inc = 0\r\n        dec = 0\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                inc = t_inc[j] + 1\r\n                t_inc[i] = inc\r\n            elif arr[i] < arr[j]:\r\n                dec = t_dec[j] + 1\r\n                t_dec[i] = dec\r\n        max_inc = max(max_inc, inc)\r\n        max_dec = max(max_dec, dec)\r\n    # print(t_inc, t_dec)\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and t_inc[j] + t_dec[i] + 1 > max_len:\r\n                max_len = t_inc[j] + t_dec[i] + 1\r\n    return max_len\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # if empty array return 0\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    # longest bitonic subsequence\r\n    lbs = 0\r\n\r\n    # array of left values\r\n    left = [0] * len(arr)\r\n\r\n    # array of right values\r\n    right = [0] * len(arr)\r\n\r\n    # right[0] = 1 if arr[0] < arr[1] else 0\r\n    right[0] = 1 if arr[0] < arr[1] else 0\r\n\r\n    # left[0] = 1 if arr[0] > arr[1] else 0\r\n    left[0] = 1 if arr[0] > arr[1] else 0\r\n\r\n    # iterate over array\r\n    for i in range(1, len(arr)):\r\n\r\n        # right[i] = right[i - 1] + 1 if arr[i] > arr[i - 1] else 1\r\n        right[i] = right[i - 1] + 1 if arr[i] > arr[i - 1] else 1\r\n\r\n        # left[i] = left[i - 1] + 1 if arr[i - 1] < arr[i] else 1\r\n        left[i] = left[i - 1] + 1 if arr[i - 1] < arr[i] else 1\r\n\r\n        # lbs = max(lbs, right[i], left[i])\r\n        lbs = max(lbs, right[i], left[i])\r\n\r\n    return lbs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    # test cases\r\n    data = [\r\n        [\r\n            [[1, 2, 3, 4, 5, 4, 3, 2, 1]],\r\n            6,\r\n        ],\r\n        [\r\n          ","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [1]*n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 4, 3, 2, 1]\r\nprint(lbs(arr))\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(lbs(arr))\r\n\r\narr = [1, 2, 3, 2, 1]\r\nprint(lbs(arr))\r\n\r\narr = [1, 2, 3, 2, 1, 2, 3, 2, 1]\r\nprint(lbs(arr))\r\n\r\narr = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]\r\nprint(lbs(arr))\r\n\r\narr = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3","votes":null},{"text":"\r\n    if arr == []:\r\n        return 0\r\n    longest = 1\r\n    length = 1\r\n    for i in range(len(arr) - 1):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] < arr[j]:\r\n                length += 1\r\n            else:\r\n                length = 1\r\n                break\r\n            longest = max(longest, length)\r\n    return longest\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(lbs([1, 2, 3, 4, 5, 4, 3, 2, 1]))\r\n    print(lbs([4, 2, 3, 5, 7, 6, 5]))\r\n    print(lbs([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4]))\r\n    print(lbs([5, 1, 2, 3, 4, 3, 2, 1, 2, 3]))\r\n    print(lbs([4, 6, 2, 7, 10, 12, 11, 10, 9, 8]))\r\n    print(lbs([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]))\r\n    print(lbs([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7]))\r\n    print(lbs([1, 2, 3, 4, 5, 4,","votes":null},{"text":"\r\n    n = len(arr)\r\n    if n == 0:\r\n        return 0\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n    for k in range(1, n):\r\n        for i in range(0, n - k):\r\n            j = i + k\r\n            if arr[i] < arr[i + 1]:\r\n                if i == 0:\r\n                    dp[i][j] = j - i + 1\r\n                else:\r\n                    dp[i][j] = dp[i - 1][i] + j - i + 1\r\n            if arr[i] > arr[i + 1]:\r\n                if j == n - 1:\r\n                    dp[i][j] = j - i + 1\r\n                else:\r\n                    dp[i][j] = dp[i][j + 1] + j - i + 1\r\n            if arr[i] == arr[i + 1]:\r\n                if i == 0:\r\n                    dp[i][j] = 1\r\n                else:\r\n                    dp[i][j] = dp[i - 1][i]\r\n    return max([max(i) for i in dp])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 3, 2, 1]\r\n    arr = [1, 2, 3, 4, 5, 2, 1]\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n    arr = [1, ","votes":null},{"text":"\r\n    length_of_array = len(arr)\r\n    dp = [[0 for _ in range(length_of_array)] for _ in range(length_of_array)]\r\n\r\n    for i in range(length_of_array):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i][j] < dp[j][j] + 1:\r\n                dp[i][j] = dp[j][j] + 1\r\n\r\n    return max(dp[i][j] for i in range(length_of_array) for j in range(i))\r\n\r\n\r\narr = [1, 2, 3, 10, 4, 9, 2, 3, 8, 1]\r\n\r\nprint(lbs(arr))  # 3\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nprint(lbs(arr))  # 10\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n\r\nprint(lbs(arr))  # 10\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6,","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [[0]*n for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n    for i in range(n-1, -1, -1):\r\n        for j in range(i+1, n):\r\n            if arr[i]<arr[j]:\r\n                dp[i][j] = max(dp[i][k]+1 for k in range(i+1, j))\r\n            else:\r\n                dp[i][j] = max(dp[k][j] for k in range(i+1, j))\r\n    return max(max(dp[i]) for i in range(n))\r\n\r\n# Test cases:\r\nprint(lbs([1, 2, 3, 4, 3, 2, 1]))\r\nprint(lbs([2, 3, 4, 2, 1]))\r\nprint(lbs([3, 2, 3, 2, 1]))\r\nprint(lbs([1, 1, 1, 1, 1]))\r\nprint(lbs([1, 2, 3, 4, 5, 4, 3, 2, 1]))\r\nprint(lbs([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]))\r\nprint(lbs([1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]))\r\nprint(lbs([1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]))\r\nprint(lbs([1,","votes":null},{"text":"\r\n    # Write your code here\r\n    arr = [0] + arr + [0]\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i - 1, -1, -1):\r\n            if arr[j] < arr[i] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    arr_count = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = lbs(arr)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n","votes":null},{"text":"\r\n    \r\n    if len(arr) == 0:\r\n        return 0\r\n    \r\n    dp = [1] * len(arr)\r\n    \r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[j] + 1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n                \r\n    return max(dp)\r\n\r\nif __name__ == \"__main__\":\r\n    print(lbs([3, 2, 1, 5, 6, 7, 8, 9, 10, 1]))\r\n    print(lbs([5, 1, 2, 3, 4, 3, 2, 1]))\r\n    print(lbs([1, 11, 2, 10, 4, 5, 2, 1]))\r\n    print(lbs([2, 10, 20, 3, 20, 5, 1]))\r\n    print(lbs([1, 11, 2, 10, 4, 5, 2, 1]))\r\n    print(lbs([1, 11, 2, 10, 4, 5, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\n    print(lbs([1, 11, 2, 10, 4, 5, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,","votes":null},{"text":"\r\n    arr = [0] + arr + [0]\r\n    n = len(arr)\r\n\r\n    # DP solution\r\n    # DP[i][0] -> length of the longest bitonic subsequence ending at i with the first element as the smallest\r\n    # DP[i][1] -> length of the longest bitonic subsequence ending at i with the first element as the largest\r\n    dp = [[0]*2 for _ in range(n)]\r\n    for i in range(1, n):\r\n        dp[i][0] = 1 + dp[i-1][1]\r\n        dp[i][1] = 1 + dp[i-1][0]\r\n\r\n    ans = 0\r\n    for i in range(1, n):\r\n        ans = max(ans, dp[i][0], dp[i][1])\r\n    return ans\r\n\r\n# Bottom-Up DP\r","votes":null},{"text":"\r\n    \r\n    # We will use the fact that for any given array, we can find the longest\r\n    # increasing subsequence in O(n) time. We will use that to solve this\r\n    # problem in O(n^2) time.\r\n    \r\n    # First, we will find the longest increasing subsequence for the given array.\r\n    \r\n    # We will use a dynamic programming approach to solve this problem.\r\n    \r\n    # The idea is to iterate over the array, and for each element, we will find the length\r\n    # of the longest increasing subsequence ending at the current element.\r\n    \r\n    # For example, if the current element is 1, we will find the length of the longest\r\n    # increasing subsequence ending at 1. For example, if the array is [1, 2, 3, 4, 5],\r\n    # the length of the longest increasing subsequence ending at 1 is 1. If the array\r\n    # is [1, 2, 3, 4, 5, 1], the length of the longest increasing subsequence ending at\r\n    # 1 is 2. This is because the longest increasing subsequence ending at 1 is [1, 2].\r\n    \r\n    # For each element in the array, we can find the length of the longest increasing\r\n    # subsequence ending at that element in O(n) time.\r\n    \r\n    # For example, if the current element is 3, we will find the length of the longest\r\n    # increasing subsequence ending at 3. For example, if the array is [1, 2, 3, 4, 5],\r\n    # the length of the longest increasing subsequence ending at 3 is 3. If the array\r\n    # is [1, 2, 3, 4, 5, 1], the length of the longest increasing subsequence ending at\r\n    # 3 is 4. This is because the longest increasing subsequence ending at 3 is [1, 2, 3].\r\n    \r\n    # We will use the concept of mem","votes":null},{"text":"\r\n\r\n\r\n   ","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(n - 1, 0, -1):\r\n        if arr[i] < arr[i - 1]:\r\n            dp[i - 1] = 1 + dp[i]\r\n\r\n    for i in range(1, n):\r\n        if arr[i] < arr[i - 1]:\r\n            dp[i - 1] = max(dp[i - 1], 1 + dp[i])\r\n\r\n    return max(dp)\r\n\r\n\r\n# Test cases:\r\nprint(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(lbs([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\r\nprint(lbs([10, 9, 8, 7, 6, 5, 4, 3, 2, 3, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\r\nprint(lbs([1, 12, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(lbs([10, 9, 8, 7, 6, 5, 4, 3, 2, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\r\nprint(lbs([10, 9, 8, 7, 6, 5, 4, 3, 2, 10, 9, 8, 7, 6, 5, 4, 3, 2, 10, 9, 8, 7, 6, 5, 4, 3","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [[0 for i in range(n)] for i in range(n)]\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            if i == j:\r\n                dp[i][j] = 1\r\n            elif i == j - 1:\r\n                if arr[i] < arr[j]:\r\n                    dp[i][j] = 2\r\n                else:\r\n                    dp[i][j] = 1\r\n            else:\r\n                if arr[i] < arr[j]:\r\n                    dp[i][j] = 2 + dp[i + 1][j]\r\n                elif arr[i] > arr[j]:\r\n                    dp[i][j] = 2 + dp[i][j - 1]\r\n                else:\r\n                    dp[i][j] = 2 + max(dp[i + 1][j], dp[i][j - 1])\r\n    return dp[0][n - 1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 3, 5, 7, 9, 8, 10, 6, 4, 2, 0]\r\n    print(lbs(arr))\r\n    arr = [1, 3, 5, 7, 9, 8, 10, 6]\r\n    print(lbs(arr))\r\n    arr = [1, 3, 5, 7, 9, 8, 10, 6, 4, 2]\r","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    if len(arr) == 1:\r\n        return 1\r\n\r\n    arr = [0] + arr + [0]\r\n    n = len(arr)\r\n\r\n    # bottom up approach\r\n    # dp[i][0] = max increasing subsequence length ending at i\r\n    # dp[i][1] = max decreasing subsequence length ending at i\r\n    dp = [[0] * 2 for _ in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(i - 1, -1, -1):\r\n            if arr[i] > arr[j]:\r\n                dp[i][0] = max(dp[i][0], dp[j][0] + 1)\r\n            elif arr[i] < arr[j]:\r\n                dp[i][1] = max(dp[i][1], dp[j][1] + 1)\r\n\r\n    return max(dp[i][0] + dp[i][1] - 1 for i in range(1, n - 1))\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    print(f\"Longest bitonic subsequence for the given array: {arr} is: {lbs(arr)}\")\r\n\r\n    arr = [1, 11, 2, 10, 4, 5, 2, 1]\r\n    print(f\"Longest bitonic subsequence for the given array: {arr} is: {lbs(arr)}\")\r\n\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14]","votes":null},{"text":"\r\n\r\n    arr.sort()\r\n    max_len = 1\r\n    current_len = 1\r\n\r\n    for i in range(1,len(arr)):\r\n        if arr[i] > arr[i-1]:\r\n            current_len += 1\r\n        else:\r\n            max_len = max(max_len, current_len)\r\n            current_len = 1\r\n\r\n    return max(max_len, current_len)\r\n\r\n\r\n# Driver code\r\narr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\nprint(\"Length of longest bitonic subsequence is \" + str(lbs(arr)))\r\n\r\n\r\n# Time Complexity: O(NlogN)\r\n# Auxiliary Space: O(N)\r\n\r\n\r\n# Input:  arr[] = {0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15}\r\n# Output: 6\r\n# Bitonic subsequence is 0 2 6 9 13 15\r\n\r\n# Input:  arr[] = {10, 22, 9, 33, 21, 50, 60, 80}\r\n# Output: 5\r\n# Bitonic subsequence is 10 22 33 50 60\r\n\r\n# Input:  arr[] = {3, 10, 2, 1, 20}\r\n# Output: 3\r\n# Bitonic subsequence is 1 2 10\r\n\r\n# Input:  arr[] = {2, ","votes":null},{"text":"\r\n    if len(arr) == 1:\r\n        return arr\r\n    max_ending_here = 1\r\n    min_ending_here = 1\r\n    lbs = 0\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i - 1]:\r\n            max_ending_here += 1\r\n        elif arr[i] < arr[i - 1]:\r\n            min_ending_here += 1\r\n        else:\r\n            max_ending_here = 1\r\n            min_ending_here = 1\r\n        lbs = max(lbs, max_ending_here, min_ending_here)\r\n    return lbs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = input().strip().split()\r\n        arr = [int(i) for i in arr]\r\n        result = lbs(arr)\r\n        print(result)\r\n\r\n\r\n# Sample Input\r\n# 3\r\n# 1\r\n# 2 1\r\n# 5 4 3 2 1\r\n\r\n\r\n# Sample Output\r\n# 1\r\n# 2\r\n# 5\r\n\r\n\r\n# Explanation\r\n# 1: The longest bitonic subsequence is [1], which has length 1.\r\n# 2: The longest bitonic subsequence is [1 2], which has length 2.\r\n# 5: The longest bitonic subsequence is [1 2 3 4 5], which has length 5.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(arr) <= 1:\r\n        return len(arr)\r\n    \r\n    dp = [[0 for _ in range(len(arr))] for _ in range(len(arr))]\r\n    \r\n    for i in range(len(arr)):\r\n        dp[i][i] = 1\r\n    \r\n    for i in range(len(arr)-1):\r\n        if arr[i] < arr[i+1]:\r\n            dp[i][i+1] = 2\r\n    \r\n    for i in range(len(arr)-2, -1, -1):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] > arr[j] and dp[i+1][j] + 1 > dp[i][j]:\r\n                dp[i][j] = dp[i+1][j] + 1\r\n            \r\n    return max(dp[i][j] for i in range(len(arr)) for j in range(i, len(arr)))\r\n\r\n\r\n# Test cases:\r\nprint(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\nprint(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(lbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\nprint(lbs([1, 2","votes":null},{"text":"\r\n    arr.sort()\r\n    # print(arr)\r\n    # n = len(arr)\r\n    n = len(arr)\r\n    # print(n)\r\n    # dp = [[0 for i in range(n)] for j in range(n)]\r\n    dp = [[0] * n for _ in range(n)]\r\n    # dp = [[0] * n] * n\r\n    # print(dp)\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n    for gap in range(1, n):\r\n        for i in range(n - gap):\r\n            j = i + gap\r\n            if arr[i] < arr[j]:\r\n                dp[i][j] = dp[i + 1][j] + 1\r\n            elif arr[i] > arr[j]:\r\n                dp[i][j] = dp[i][j - 1] + 1\r\n            else:\r\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\r\n            # print(dp[i][j])\r\n    return max(dp[0])\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [0, 8, 4, 12, 2, 10, 6,","votes":null},{"text":"\r\n    max_val = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i, len(arr)):\r\n            if arr[i] > arr[j]:\r\n                break\r\n            elif abs(arr[i] - arr[j]) == 1:\r\n                max_val = max(max_val, j-i+1)\r\n            else:\r\n                break\r\n\r\n    return max_val\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    print(lbs(arr))  # 6","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [[0]*n for i in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n    for i in range(1, n):\r\n        for j in range(0, n-i):\r\n            if(arr[j] > arr[j+1]):\r\n                dp[j][j+i] = max(dp[j+1][j+i], 1+dp[j][j+i-1])\r\n            else:\r\n                dp[j][j+i] = dp[j+1][j+i]\r\n    return max(dp[0])\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 3, 2, 1]\r\n    print(lbs(arr))\r\n\r\n\"\"\"\r\nTime complexity: O(n^2)\r\nSpace complexity: O(n^2)\r\n\r\nSOLUTION\r\n\r\nIf we have an array of length n, then we can consider a subarray of length n-1.\r\nIf the array is bitonic, then we can take the subarray from index 1 to n-2, and we can take the subarray from index 2 to n-1.\r\nWe can take the subarray from index 3 to n-3, and so on.\r\nNow, for each subarray, we can check if it is bitonic or not.\r\nIf it is, then we can check if the length of the subarray is greater than the length of any other subarray of the same array.\r\nIf it is greater, then we can update the length of the longest bitonic subsequence.\r\n\r\nThis solution can be implemented using DP.\r\n\r\nWe can take a 2D array of size n*n, where n is the length of the given array.\r\nFor each index i, we can have a maximum length of a bitonic sequence ending at that index.\r\nNow, for the array to be bitonic, the next elemen","votes":null},{"text":"\r\n\r\n    arr_len = len(arr)\r\n    max_len = 1\r\n    max_idx = 0\r\n    for i in range(arr_len-1):\r\n        if arr[i] > arr[i+1]:\r\n            l_idx = i\r\n            for j in range(i, arr_len-1):\r\n                if arr[j] < arr[j+1]:\r\n                    l_idx = j\r\n                else:\r\n                    break\r\n            r_idx = l_idx\r\n            for j in range(l_idx, -1, -1):\r\n                if arr[j] > arr[j+1]:\r\n                    r_idx = j\r\n                else:\r\n                    break\r\n            if r_idx - l_idx > max_len:\r\n                max_len = r_idx - l_idx\r\n                max_idx = l_idx\r\n    return arr[max_idx:max_idx+max_len]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n    print(lbs(arr))\r\n\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18, 200, 10, 10, 20]\r\n    print(lbs(arr))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10","votes":null}],"time":{"count":5.0,"avg":228030.684,"std":45814.6285627765,"cov":0.2009143145}}
{"id":524,"question":"def max_sum_increasing_subsequence(arr, n):\r\n    \"\"\"Write a function to find the sum of maximum increasing subsequence of the given array.\"\"\"","answers":[{"text":"\r\n\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    new_arr = arr.copy()\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and new_arr[i] < new_arr[j] + arr[i]:\r\n                new_arr[i] = new_arr[j] + arr[i]\r\n\r\n    return max(new_arr)\r\n\r\n\r","votes":105551.996},{"text":"\r\n    # Your code goes here\r\n    # n = len(arr)\r\n    dp = [0] * (n+1)\r\n    # print(dp)\r\n    for i in range(n):\r\n        for j in range(i+1):\r\n            if arr[i] > arr[j] and dp[j] > dp[i]:\r\n                dp[i] = dp[j]\r\n        dp[i] = dp[i] + arr[i]\r\n        # print(dp[i])\r\n        # print(dp)\r\n        \r\n    # print(dp)\r\n    return max(dp)\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"Maximum sum of increasing subsequence is: \", max_sum_increasing_subsequence(arr, n))\r\n\r\n# Output\r\n# Maximum sum of increasing subsequence","votes":127571.392},{"text":"\r\n\r\n    # create a table and initialize it with 0\r\n    res = [0] * n\r\n    # set the first element to 1\r\n    res[0] = arr[0]\r\n    for i in range(1, n):\r\n        # consider all the elements before i\r\n        for j in range(i):\r\n            # if the element at j is less than i, and the sum of the element at j and the\r\n            # element at i (arr[i]) is greater than the sum of the element at i, then take\r\n            # the sum\r\n            if arr[i] > arr[j] and res[i] < res[j] + arr[i]:\r\n                res[i] = res[j] + arr[i]\r\n    # return the maximum sum\r\n    return max(res)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 10, 2, 3, 100, 4, 5]\r\n    n = len","votes":133829.104},{"text":"\r\n    subsequence = []\r\n    dp = [0]*n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n        subsequence.append(dp[i])\r\n    return max(subsequence)\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\r\n\r","votes":136097.704},{"text":"\r\n    # code here\r\n    # max_sum = 0\r\n    # n = len(arr)\r\n    # dp = [0] * n\r\n    # for i in range(n):\r\n    #     dp[i] = arr[i]\r\n    #     for j in range(i):\r\n    #         if arr[i] > arr[j]:\r\n    #             dp[i] = max(dp[i], dp[j] + arr[i])\r\n    #     max_sum = max(max_sum, dp[i])\r\n    # return max_sum\r\n\r\n    # # Another Solution\r\n    # max_sum = 0\r\n    # n = len(arr)\r\n    # dp = [0] * n\r\n    # for i in range(n):\r\n    #     dp[i] = arr[i]\r\n    #     for j in range(i):\r\n    #         if arr[i] > arr[j]:\r\n    #             dp[i] = max(dp[i], dp[j] + arr[i])\r\n    #     max_sum = max(max_sum, dp[i])\r\n    # return max_sum\r\n\r\n    # Another Solution\r\n    max_sum = 0\r\n    n = len(arr)\r\n    dp = [0] * n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r","votes":137308.68},{"text":"\r\n    dp = [0]*n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":140033.68},{"text":"\r\n\r\n    # Create a sequence of 0s with length of the given array.\r\n    m_seq = [0] * n\r\n    # Set the first element of the sequence to be the first element of the given array.\r\n    m_seq[0] = arr[0]\r\n    \r\n    # Iterate through the given array.\r\n    for i in range(1, n):\r\n        # Search for the element in the given array that is less than the current element but whose index is greater than the current element's index.\r\n        for j in range(0, i):\r\n            # If the element is found, update the current element's index in the sequence.\r\n            if arr[i] > arr[j] and m_seq[i] < m_seq[j] + arr[i]:\r\n                m_seq[i] = m_seq[j] + arr[i]\r\n\r\n    # Find the sum of the maximum increasing subsequence.\r\n    m_seq_sum = max(m_seq)\r\n\r\n    return m_seq_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(f'The sum of the maximum increasing subsequence of the given array {arr} is {max_sum_increasing_subsequence(arr, len(arr))}.')","votes":144359.128},{"text":"\r\n    # code here\r\n    dp = [0] * n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = max_sum_increasing_subsequence(arr, n)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n# arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n\r\n# dp = [0] * len(arr)\r\n# for i in range(len(arr)):\r\n#     dp[i] = arr[i]\r\n#     for j in range(i):\r\n#         if arr[j] < arr[i]:\r\n#             dp[i] = max(dp[i], dp[j] + arr[i])\r\n\r\n# print(dp)\r\n# print(max(dp))\r\n\r\n# arr = [2, 1, 5, 3, 6, 4]\r\n# dp = [0] * len(arr)\r\n# for i in range(len(arr)):\r\n#     dp[i] = arr[i]\r\n#     for j in range(i):\r\n#         if arr[j] < arr[i]:\r\n#           ","votes":146389.404},{"text":"\r\n\r\n    max_sum = -1\r\n    dp = [0 for i in range(n)]\r\n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n        max_sum = max(max_sum, dp[i])\r\n\r\n    return max_sum\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r","votes":146674.3},{"text":"\r\n    \r\n    # Create a table and initialize all values to -1\r\n    dp = [-1] * (n + 1)\r\n    \r\n    # Lets process all the sub-problems from smaller to larger\r\n    for i in range(1, n + 1):\r\n        # Assume that the maximum sum of increasing subsequence is ending at element arr[i-1]\r\n        max_ending_here = arr[i - 1]\r\n        \r\n        # Consider all elements as previous elements to arr[i]\r\n        for j in range(i - 1, 0, -1):\r\n            # If adding element arr[j] to max_ending_here increases the max_ending_here, then do so\r\n            if arr[j - 1] < arr[i - 1] and max_ending_here < arr[j - 1] + max_ending_here:\r\n                max_ending_here = arr[j - 1] + max_ending_here\r\n        \r\n        # Store the maximum sum for all the sub-problems\r\n        dp[i] = max_ending_here\r\n    \r\n    # Return the maximum sum\r\n    return max(dp[1:])\r\n    \r\n    \r\narr = [2, 10, 3, 2, 5, 7]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r","votes":150603.128},{"text":"\r\n    dp = [0] * n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nTime complexity: O(N^2), as we are running 2 loops\r\nSpace complexity: O(N), as we are using a dp array of size N.\r\n\r\nSample Input:\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\nSample Output:\r\n    106\r\nExplanation:\r\n    The maximum sum increasing subsequence is [1, 2, 3, 100], so the answer is 1 + 2 + 3 + 100 = 106.\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nFollow up:\r\n    You can do this in O(NlogN) time by sorting the array and then finding the sum of the maximum increasing subsequence.\r\n    Can you find the maximum increasing subsequence in O(N) time and O(1) space?\r\n\"\"\"\r\n\r\n\r\n# Method 2:\r\n# This method is based on the idea of using a stack. We traverse the array from left to right and maintain a stack. \r\n# When we traverse an element, we pop all the elements greater than the current element from the stack and ad","votes":163644.4},{"text":"\r\n\r\n    \"\"\"\r\n    Input:  arr[] = {3, 10, 2, 1, 20}\r\n    Output: 23\r\n    The maximum sum increasing subsequence is {3, 10, 20}\r\n    \"\"\"\r\n\r\n    # Create a table to store the sums of\r\n    # maximum sums of sub-problems.\r\n    # sum_table[i] stores the maximum sum of\r\n    # sub-sequence ending at index i.\r\n    sum_table = [0 for i in range(n)]\r\n\r\n    # Initialize all sums as 0.\r\n    for i in range(n):\r\n        sum_table[i] = 0\r\n\r\n    # Compute maximum sum values\r\n    # in bottom-up manner\r\n    for i in range(n):\r\n        sum_table[i] = arr[i]\r\n        for j in range(i):\r\n            if (arr[i] > arr[j]):\r\n                sum_table[i] = max(sum_table[i],\r\n                                   arr[i] + sum_table[j])\r\n\r\n    # Find the maximum of all\r\n    # computed values\r\n    maximum_sum = sum_table[0]\r\n    for i in range(n):\r\n        maximum_sum = max(maximum_sum,\r\n                          sum_table[i])\r\n\r\n    return maximum_sum\r\n\r\n\r\narr = [3, 10, 2, 1, 20]\r\nn = len(arr)\r\nprint(\"Maximum sum is \" + str(max_sum_increasing_subsequence(arr, n)))\r\n\r\n\r\n# Time Complexity: O(n^2) where n is the size of the array.\r\n# Auxiliary Space: O(n)\r\n\r\n\r\n# Test cases:\r\n#\r\n# Test case 1:\r\n# Input:  arr[] = {3, 10,","votes":164322.052},{"text":"\r\n    dp = [0 for _ in range(n)]\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j])\r\n        dp[i] += arr[i]\r\n    return max(dp)\r\n\r\n\r","votes":191133.36},{"text":"\r\n    max_sum = 0\r\n    dp = [0] * n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[j] + arr[i] > dp[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n    for i in range(n):\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r","votes":194097.424},{"text":"\r\n\r\n    # Base Case\r\n    if n == 0 or n == 1:\r\n        return arr[0]\r\n\r\n    # Initialize dp[0..n-1]\r\n    dp = [0] * n\r\n\r\n    dp[0] = arr[0]\r\n\r\n    for i in range(1, n):\r\n        dp[i] = arr[i]\r\n\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], arr[i] + dp[j])\r\n\r\n    return max(dp)\r\n\r\n\r\n# Driver code\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complex","votes":237363.86},{"text":"\r\n\r\n    # Create an empty array of size n\r\n    L = [0] * n\r\n    # Compute L[] in bottom up manner\r\n    for i in range(n):\r\n        L[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and L[i] < L[j] + arr[i]:\r\n                L[i] = L[j] + arr[i]\r\n    # Return maximum of L[]\r\n    return max(L)\r\n\r\n\r\n# Driver Code\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"Maximum sum of an increasing subsequence is {}\".format(max_sum_increasing_subsequence(arr, n)))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r\n\r","votes":237988.128},{"text":"\r\n    ans = 0\r\n    dp = [0] * (n + 1)\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], arr[i] + dp[j])\r\n    for i in range(n):\r\n        ans = max(ans, dp[i])\r\n    return ans\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    n = len(arr)\r\n    print(\"Maximum sum of increasing subsequence of the given array is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(N)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    res = 0\r\n    dp = [0] * (n + 1)\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n    for i in range(n):\r\n        res += dp[i]\r\n    return res\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(f\"Maximum sum of an increasing subsequence is: {max_sum_increasing_subsequence(arr, len(arr))}\")\r\n\r\n\"\"\"\r\nTime O(N^2)\r\nSpace O(N)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    dp = [0] * (n + 1)\r\n    for i in range(1, n + 1):\r\n        dp[i] = arr[i - 1] + dp[i - 1]\r\n        for j in range(1, i):\r\n            if arr[i - 1] > arr[j - 1] and dp[i] < dp[j] + arr[i - 1]:\r\n                dp[i] = dp[j] + arr[i - 1]\r\n    return dp[n]\r\n\r\n\r\narr = [1, 101, 10, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"The maximum sum of increasing subsequence is \" +","votes":null},{"text":"\r\n\r\n    if n == 1:\r\n        return arr[0]\r\n    else:\r\n        return max(arr[0] + max_sum_increasing_subsequence(arr[1:], n - 1), max_sum_increasing_subsequence(arr[1:], n - 1))\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"Maximum sum increasing subsequence of the given array is \" +\r\n      str(max_sum_increasing_subsequence(arr, n)))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Auxiliary Space: O(1)\r\n\r\n\r\n# Dynamic Programming\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    dp = [0] * (n + 1)\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(dp[i - 1], arr[i - 1], dp[i - 1] + arr[i - 1])\r\n    return dp[n - 1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \"\"\"\r\n    from timeit import timeit\r\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]\r\n   ","votes":null},{"text":"\r\n    # Time complexity: O(n^2)\r\n    # Space complexity: O(n)\r\n    max_sum = 0\r\n    for i in range(n):\r\n        sum = arr[i]\r\n        for j in range(i+1, n):\r\n            if arr[j] > arr[i]:\r\n                sum = sum + arr[j]\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n    return max_sum\r\n\r\n\r\n# Driver code\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"Sum of the maximum increasing subsequence of the given array is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r\n\r\n\r\n# Top-down approach\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    msi_sum = [0] * n\r\n\r\n    msi_sum[0] = arr[0]\r\n    for i in range(1, n):\r\n        msi_sum[i] = max(arr[i], msi_sum[i - 1] + arr[i])\r\n\r\n    return msi_sum[-1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [2, 1, 3, 4, 5, 6, 7, 9, 8]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\"\r\nSOLUTION\r\n\r\nWe start by initializing the array msi_sum to 0. We then iterate over the array and calculate the max sum of increasing subsequence.\r\n\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\n\"\"\"\r\n\r\n# 2nd solution\r\n\r","votes":null},{"text":"\r\n\r\n    if n == 0 or n == 1:\r\n        return arr[n - 1]\r\n\r\n    return max(max_sum_increasing_subsequence(arr, n - 1), arr[n - 1] + max_sum_increasing_subsequence(arr, n - 2))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    dp = [0] * (n + 1)\r\n    parent = [0] * (n + 1)\r\n\r\n    for i in range(1, n + 1):\r\n        dp[i] = 1\r\n        parent[i] = -1\r\n        for j in range(1, i):\r\n            if arr[j - 1] < arr[i - 1] and dp[j] + 1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n                parent[i] = j\r\n\r\n    # print(dp)\r\n    # print(parent)\r\n\r\n    sum = 0\r\n    i = n\r\n    while i != 0:\r\n        sum += arr[i - 1]\r\n        i = parent[i]\r\n\r\n    return sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [10, 22, 9, 33, 4, 50, 41, 60]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [10, 22, 9, 7, 50, 41, 60]\r\n    n = len(arr)\r\n    print(max_sum_increasin","votes":null},{"text":"\r\n    \r\n    # Create an empty array of size n + 1\r\n    # and fill it with 0\r\n    # 0 at index 0 is for the empty subsequence\r\n    arr_max = [0] * (n + 1) \r\n    \r\n    # Fill the array with the maximum\r\n    # sum of its prefix\r\n    for i in range(1, n + 1):\r\n        arr_max[i] = max(arr[i - 1] + arr_max[i - 1], arr[i - 1])\r\n    \r\n    # Return the maximum sum\r\n    return max(arr_max)    \r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if n <= 1:\r\n        return arr[0]\r\n\r\n    inc = [0] * n\r\n    inc[0] = arr[0]\r\n\r\n    for i in range(1, n):\r\n        inc[i] = max(inc[i - 1], arr[i])\r\n\r\n    for i in range(n - 1, 0, -1):\r\n        inc[i - 1] += inc[i]\r\n\r\n    return inc[0]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(N)\r\nSpace Complexity: O(N)\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    s = [0]*(n+1)\r\n    f = [0]*(n+1)\r\n    f[1] = arr[0]\r\n    s[1] = arr[0]\r\n    for i in range(2,n+1):\r\n        f[i] = max(arr[i-1]+s[i-1], arr[i-1])\r\n        s[i] = max(arr[i-1]+s[i-1], f[i-1])\r\n    return s[n]\r\n\r\narr = [0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15]\r\nn = len(arr)\r\nprint(\"Input array: \", arr)\r\nprint(\"Maximum sum of increasing subsequence is: \", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0 or n == 1:\r\n        return arr[0]\r\n\r\n    # arr[i] - The maximum sum of increasing subsequence\r\n    # ending at index i\r\n    arr = [0] * n\r\n\r\n    # Initialize first element as\r\n    # maximum of first and second element\r\n    arr[0] = arr[1] = max(arr[0], arr[1])\r\n\r\n    # Start from the third element and\r\n    # compute maximum sum of subsequence\r\n    # ending with every element\r\n    for i in range(2, n):\r\n        arr[i] = max(arr[i - 1], arr[i - 2] + arr[i])\r\n\r\n    # Return the maximum of last element and\r\n    # last but one element\r\n    return max(arr[n - 1], arr[n - 2])\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = 1\r\n    max_sum_index = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] < arr[j]:\r\n                if max_sum < (arr[i] + arr[j]):\r\n                    max_sum = arr[i] + arr[j]\r\n                    max_sum_index = [i, j]\r\n    print(f\"{arr[max_sum_index[0]]} and {arr[max_sum_index[1]]} is the maximum increasing subsequence\")\r\n    return max_sum\r\n\r\n\r\narr = [5, 4, 3, 2, 1]\r\nn = len(arr)\r\nmax_sum = max_sum_increasing_subsequence(arr, n)\r\nprint(f\"The maximum sum of the maximum increasing subsequence is {max_sum}\")\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# Sample Input 1:\r\n# Enter the size of the array:\r\n# 5\r\n# Enter the elements of the array:\r\n# 5 4 3 2 1\r\n# The maximum sum of the maximum increasing subsequence is 10\r\n\r\n# Sample Input 2:\r\n# Enter the size of the array:\r\n# 5\r\n# Enter the elements of the array:\r\n# 1 2 3 4 5\r\n#","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    max_sum = [0] * n\r\n    max_sum[0] = arr[0]\r\n    for i in range(1, n):\r\n        max_sum[i] = max(arr[i], max_sum[i - 1] + arr[i])\r\n    print(max_sum)\r\n    return max(max_sum)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 13, 1, 2, 20, 4, 11, 6, 9]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\"\r\nSOLUTION\r\nMaximum sum of an increasing subsequence of an array is the maximum element in the array.\r\n\r\nTime O(N)\r\nSpace O(N)\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0 or n == 1:\r\n        return arr[0]\r\n\r\n    dp = [0 for _ in range(n)]\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i-1]+arr[i])\r\n\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the size of array: \"))\r\n    arr = [int(x) for x in input(\"Enter the array: \").split()]\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n'''\r\nTime complexity: O(n)\r\nSpace complexity: O(n)\r\n\r\nEnter the size of array: 10\r\nEnter the array: 1 101 2 3 100 4 5 6 200 7\r\n207\r\n'''\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Base case when array is empty\r\n    if (n == 0):\r\n        return 0\r\n\r\n    # Create a table to store results of subproblems\r\n    # maxSum[i] stores the result of maximum sum of\r\n    # an increasing subsequence of arr[0..i]\r\n    maxSum = [0] * (n + 1)\r\n\r\n    # Fill the table using the recursive formula\r\n    # maxSum[i] = max(maxSum[i-1], arr[i] + maxSum[j] where j is\r\n    # the maximum of all k less than i and arr[k] < arr[i]\r\n    for i in range(1, n + 1):\r\n        maxSum[i] = arr[i - 1] + maxSum[i - 1]\r\n\r\n        for j in range(0, i):\r\n            if (arr[i - 1] > arr[j]):\r\n                maxSum[i] = max(maxSum[i], maxSum[j])\r\n\r\n    return maxSum[n]\r\n\r\n\r\n# Driver program to test above function\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\n\r\nprint(\"The maximum sum of an increasing \" +\r\n      \"subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n# This code is contributed by\r\n# Saswat Kumar\r\n\r\n\r\n# Given a sequence of integers, find the sum of the maximum sum increasing subsequence of the given sequence.\r\n\r\n# Example 1:\r\n\r\n# Input: {3, 10, 2, 1, 20, 25, 6, 200, 100}\r\n# Output: 267\r\n# Explanation: The maximum sum increasing\r\n# subsequence is {3,","votes":null},{"text":"\r\n    dp = [0] * (n + 1)\r\n    for i in range(1, n + 1):\r\n        dp[i] = arr[i - 1]\r\n        for j in range(1, i):\r\n            if arr[j - 1] < arr[i - 1]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i - 1])\r\n    return dp[n]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [5, 4, 3, 2, 1]\r\n    print(f\"Max sum increasing subsequence of {arr} is {max_sum_increasing_subsequence(arr, len(arr))}\")\r\n\r\n    arr = [1, 101, 10, 2, 3, 100, 4, 5]\r\n    print(f\"Max sum increasing subsequence of {arr} is {max_sum_increasing_subsequence(arr, len(arr))}\")\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    print(","votes":null},{"text":"\r\n    # code here\r\n    dp = [0]*n\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i - 1] + arr[i])\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [2, 4, 5, 1, 3, 7, 8, 6, 4]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\n\r\n# Time Complexity: O(N)\r\n# Space Complexity: O","votes":null},{"text":"\r\n    lis = [0] * n\r\n    lis[0] = arr[0]\r\n    for i in range(1, n):\r\n        lis[i] = max(arr[i], lis[i-1] + arr[i])\r\n\r\n    # Find the index of the last element in the LIS\r\n    max_index = 0\r\n    for i in range(1, n):\r\n        if lis[i] > lis[max_index]:\r\n            max_index = i\r\n\r\n    # Now find the maximum sum subsequence using LIS\r\n    max_sum = lis[max_index]\r\n    while max_index >= 0:\r\n        max_sum += arr[max_index]\r\n        max_index = prev[max_index]\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(nlogn)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(n):\r\n        current_sum = 0\r\n        for j in range(i, n):\r\n            current_sum += arr[j]\r\n            if current_sum > max_sum:\r\n                max_sum = current_sum\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Create an empty array\r\n    lis = [0] * n\r\n\r\n    # Initialize all LIS values as 1,\r\n    # for single element array the LIS is 1\r\n    for i in range(n):\r\n        lis[i] = 1\r\n\r\n    # Compute optimized LIS values in bottom up manner\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n\r\n    # Return the maximum of all LIS values\r\n    return max(lis)\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [0 for _ in range(n)]\r\n    dp[0] = arr[0]\r\n\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i - 1] + arr[i])\r\n\r\n    return dp[-1]\r\n\r\n\r","votes":null},{"text":"\r\n    # https:\/\/www.geeksforgeeks.org\/maximum-sum-increasing-subsequence\/\r\n    # create an array that stores the sum of increasing subsequence\r\n    # the last value of the array is the sum of the maximum increasing subsequence\r\n    max_sum = [0] * (n + 1)\r\n    # base case\r\n    max_sum[0] = 0\r\n    # initialise the max_sum[1]\r\n    max_sum[1] = arr[0]\r\n    # traverse the array\r\n    for i in range(2, n + 1):\r\n        # keep track of the maximum sum of increasing subsequence\r\n        max_sum[i] = max(arr[i - 1] + max_sum[i - 1], max_sum[i - 1])\r\n    # return the last value of the array\r\n    return max_sum[n]\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [0 for i in range(n)]\r\n\r\n    dp[0] = arr[0]\r\n\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i - 1] + arr[i])\r\n\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n\r\n# Method 2 (Bottom-Up)\r","votes":null},{"text":"\r\n\r\n    # create an increasing subsequence array\r\n    increasing_subsequence = [0] * n\r\n\r\n    # fill the increasing subsequence array\r\n    for i in range(n):\r\n        increasing_subsequence[i] = float(\"-inf\")\r\n\r\n    # fill the increasing subsequence array\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] < arr[j]:\r\n                if increasing_subsequence[i] < increasing_subsequence[j] + arr[i]:\r\n                    increasing_subsequence[i] = increasing_subsequence[j] + arr[i]\r\n\r\n    # return the maximum value of the increasing subsequence array\r\n    return max(increasing_subsequence)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter the number of elements in the array: \"))\r\n    arr = []\r\n\r\n    # get input from the user\r\n    print(\"Enter the elements of the array: \")\r\n    for i in range(n):\r\n        arr.append(int(input()))\r\n\r\n    # call the function max_sum_increasing_subsequence\r\n    print(\"The sum of maximum increasing subsequence is: \", max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nTime Complexity : O(n^2)\r\nSpace Complexity : O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the number of elements in the array: 5\r\nEnter the elements of the array:\r\n1\r\n101\r\n2\r\n3\r\n4\r\nThe sum of maximum increasing subsequence is:  106\r\n\r\nSAMPLE II\r\n\r\nEnter the number of elements in the array: 7\r\nEnter the elements of the array:\r\n31\r\n10\r\n2\r\n3","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(n):\r\n        current_max = 0\r\n        for j in range(i, n):\r\n            if arr[j] >= arr[i]:\r\n                current_max += arr[j]\r\n            else:\r\n                break\r\n        max_sum = max(max_sum, current_max)\r\n    return max_sum\r\n\r\n\r\narr = [3, 10, 7, 12, 5, 1, 11, 20, 25, 13, 19]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # creating a new array to store the sequence\r\n    sequence = [0] * n\r\n\r\n    # for each element in the array\r\n    for i in range(n):\r\n        \r\n        # creating a variable to store the maximum sum of the subsequence till now\r\n        max_sum_so_far = 0\r\n\r\n        # for each element in the array\r\n        for j in range(i):\r\n\r\n            # if the current element is greater than the previous one\r\n            if arr[i] > arr[j]:\r\n\r\n                # if the current sequence's sum plus the current element is greater than the previous max sum\r\n                if (sequence[j] + arr[i]) > max_sum_so_far:\r\n                    max_sum_so_far = sequence[j] + arr[i]\r\n\r\n        # adding the maximum sum to the current element's sequence\r\n        sequence[i] = max_sum_so_far\r\n\r\n    # returning the maximum sum of the sequence\r\n    return max(sequence)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    n = len(arr)\r\n    print(\"The maximum sum of the increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    # your code goes here\r\n    if n == 0 or n == 1:\r\n        return arr[n - 1]\r\n    else:\r\n        dp = [0 for i in range(n)]\r\n        dp[0] = arr[0]\r\n        dp[1] = max(arr[0], arr[1])\r\n        for i in range(2, n):\r\n            dp[i] = max(arr[i] + dp[i - 2], dp[i - 1])\r\n        return dp[n - 1]\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nprint(max_sum_increasing_subsequence(arr, 7))\r\n\r\n\r\n# 2nd solution\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if n == 0 or n == 1:\r\n        return arr[0]\r\n\r\n    # Initialize the dp array of size n + 1\r\n    dp = [0] * (n + 1)\r\n\r\n    # Fill the dp array\r\n    dp[0] = arr[0]\r\n\r\n    for i in range(1, n):\r\n        dp[i] = max(dp[i - 1] + arr[i], arr[i])\r\n\r\n    return max(dp)\r\n\r\n\r\n# Driver code\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] < arr[j]:\r\n                max_sum += arr[j]\r\n    return max_sum\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 60, 80]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# 2. Write a Python program to find the maximum sum of a subsequence of a given sequence such that\r\n# the sum of its elements is no greater than a given limit.\r","votes":null},{"text":"\r\n\r\n    if n < 1:\r\n        return 0\r\n\r\n    dp = [0] * (n + 1)\r\n    dp[0] = arr[0]\r\n\r\n    for i in range(1, n + 1):\r\n        dp[i] = max(dp[i - 1] + arr[i - 1], arr[i - 1])\r\n\r\n    return dp[-1]\r\n\r\n\r\n# Driver program to test above function\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # code goes here\r\n    dp = [0] * (n + 1)\r\n    for i in range(1, n + 1):\r\n        dp[i] = arr[i - 1]\r\n        for j in range(1, i):\r\n            if arr[j - 1] < arr[i - 1] and dp[i] < dp[j] + arr[i - 1]:\r\n                dp[i] = dp[j] + arr[i - 1]\r\n    return dp[-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = max_sum_increasing_subsequence(arr, n)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# 1\r\n# 5\r\n# 1 101 2 3 100\r\n# 204\r\n\r\n# 2\r\n# 5\r\n# 10 5 1 2 3\r\n# 18\r\n\r\n# 3\r\n# 5\r\n# 1 100 50 10 1\r\n# 151\r\n\r\n# 4\r\n# 3\r\n# 1 2 3\r\n# 6\r\n\r\n# 5\r\n# 4\r\n# 1 1 1 1\r\n# 4\r\n\r\n# 6\r\n# 5\r\n# 1 1 1 1 1\r\n# 5\r\n\r\n# 7\r\n# 1\r\n# 100\r\n# 100\r\n\r\n","votes":null},{"text":"\r\n    # code here\r\n    # Time Complexity: O(nlogn)\r\n    # Space Complexity: O(n)\r\n    dp = [0] * (n + 1)\r\n    arr = [0] + arr\r\n    for i in range(n + 1):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n    return dp[-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nSOLUTION 2:\r\n\r","votes":null},{"text":"\r\n    \r\n    # Code here\r\n    # return the maximum sum\r\n    # Time Complexity: O(n) where n is the size of the given array\r\n    # Space Complexity: O(n) where n is the size of the given array\r\n    \r\n    if len(arr) == 0:\r\n        return 0\r\n    \r\n    # dp[i] stores the maximum sum in an increasing subsequence ending at index i\r\n    dp = [0] * len(arr)\r\n    dp[0] = arr[0]\r\n    \r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i - 1]:\r\n            dp[i] = arr[i] + dp[i - 1]\r\n        else:\r\n            dp[i] = arr[i]\r\n            \r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    t = int(input())\r\n\r\n    for t_itr in range(t):\r\n        n = int(input())\r\n\r\n        arr = list(map(int, input().rstrip().split()))\r\n\r\n        result = max_sum_increasing_subsequence(arr, n)\r\n\r\n        fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# Sample Input 0\r\n# 1\r\n# 4\r\n# 1 101 2 3\r\n\r\n# Sample Output 0\r\n# 104\r\n\r\n# Explanation 0\r\n# The increasing subsequence in this case is (1, 2, 3) with a sum of 6.\r\n\r\n# Sample Input 1\r\n# 1\r\n# 4\r\n# 1 2 3 4\r\n\r","votes":null},{"text":"\r\n    # code here \r\n    dp = [0]*n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n    return dp\r\n\r","votes":null},{"text":"\r\n    # code here\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(dp[i - 1], arr[i])\r\n    # print(dp)\r\n    max_so_far = 0\r\n    for i in range(n):\r\n        max_so_far += dp[i]\r\n\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\"\r\n\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\nSample Input:\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\n\r\nSample Output:\r\n206\r\n\r\nExplanation: \r\nThe maximum increasing subsequence is {1, 2, 3, 100, 101} and the sum is 206.\r\n\r\n\"\"\"\r\n","votes":null},{"text":"\r\n\r\n    # Your code goes here\r\n    max_sum = 0\r\n    sum_arr = [0] * n\r\n    for i in range(n):\r\n        max_sum = max(max_sum, arr[i] + sum_arr[i])\r\n        sum_arr[i] = max(sum_arr[:i]) + arr[i]\r\n    return max_sum\r\n\r\n\r\n# { Driver Code Starts\r\n# Initial Template for Python 3\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = list(map(int, input().strip().split()))\r\n        ob = Solution()\r\n        print(ob.max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# }\r\n# Given an array of integers, return the maximum sum of a subarray of non-negative numbers.\r\n\r\n# Example 1:\r\n\r\n# Input: arr[] = {-2, -3, 4, -1, -2, 1, 5, -3}\r\n# Output: 7\r\n# Explanation: Max sum subarray is {4, -1, -2, 1, 5} \r\n# with sum 7.\r\n# Example 2:\r\n\r\n# Input: arr[] = {-2, -3, -1, -2, -1}\r\n# Output: -1\r\n# Explanation: Max sum subarray is {-1} \r\n# with sum -1.\r\n\r\n# Your Task:\r\n# You don't need to read input or print anything. Your task is to complete the function max_sum_increasing_subsequence() which takes the array arr[] and the size of the array as inputs and returns the maximum sum of a subarray of non-negative numbers.\r\n\r\n# Expected Time Complexity: O(N*LogN).\r\n# Expected Auxiliary Space","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_ending_here = 0\r\n        for j in range(i + 1, n):\r\n            if arr[i] < arr[j]:\r\n                max_ending_here += arr[j]\r\n        if max_ending_here > max_sum:\r\n            max_sum = max_ending_here\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(max_sum_increasing_subsequence(arr, 7))\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(max_sum_increasing_subsequence(arr, 7))\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(max_sum_increasing_subsequence(arr, 7))\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(max_sum_increasing_subsequence(arr, 7))\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(max_sum_increasing_subsequence(arr, 7))\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(max_sum_increasing_subsequence(arr, 7))\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(max_sum_increasing_subsequence(ar","votes":null},{"text":"\r\n    max_sum = arr[0]\r\n    dp = [arr[0]]\r\n    for i in range(1, n):\r\n        dp.append(arr[i] + max(dp[:i]))\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\n\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n# Time Complexity: O(n^2)\r\n# Space","votes":null},{"text":"\r\n    dp = [1] * n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return sum(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(f\"The maximum sum of the increasing subsequence of given array is {max_sum_increasing_subsequence(arr, n)}\")\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n^2)\r\nSPACE COMPLEXITY: O(n)\r\n\"\"\"\r\n\r\n","votes":null},{"text":"\r\n    # maximum sum of subsequence can be maximum sum of subsequence ending at index i\r\n    # maximum sum of subsequence ending at index i = arr[i] + maximum sum of subsequence ending at index j \r\n    #   where j < i and arr[j] < arr[i]\r\n    #  maximum sum of subsequence ending at index i = arr[i]\r\n    #  maximum sum of subsequence ending at index i = max(arr[i] + maximum sum of subsequence ending at index j\r\n    #    where j < i and arr[j] < arr[i], arr[i])\r\n    max_ending_here = max_so_far = 0\r\n    for i in range(n):\r\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\r\n        max_so_far = max(max_ending_here, max_so_far)\r\n    return max_so_far\r\n\r\n\r\n# Driver code\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n# Time complexity: O(n)\r\n# Space complexity: O(1)\r\n\r\n\r\n# Dynamic Programming Solution\r","votes":null},{"text":"\r\n    # Initialize the result\r\n    max_sum = 0\r\n\r\n    # Initialize the array to store the maximum sum of increasing subsequence\r\n    # ending for each element\r\n    max_ending_here = [0] * n\r\n\r\n    # Initialize the result\r\n    max_ending_here[0] = arr[0]\r\n    max_sum = arr[0]\r\n\r\n    # Compute maximum sum in bottom-up manner\r\n    for i in range(1, n):\r\n        max_ending_here[i] = max(max_ending_here[i - 1] + arr[i], arr[i])\r\n        max_sum = max(max_sum, max_ending_here[i])\r\n\r\n    return max_sum\r\n\r\n\r\n# Test program\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"Maximum sum of an increasing subsequence is \", max_sum_increasing_subsequence(arr, n))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n\r\n# Given an array of n elements. Find the sum of maximum sum increasing subsequence of the given array.\r\n# For example, if the given array is [1, 101, 2, 3, 100, 4, 5], then the output should be 106, as the\r\n# subsequence [1, 3, 100] has the maximum sum.\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if n == 1:\r\n        return arr[0]\r\n    \r\n    # Create a table to store the sum of increasing subsequence\r\n    # ending at each index\r\n    max_ending_here = [0] * n\r\n    max_so_far = 0\r\n    \r\n    # Fill the table\r\n    for i in range(n):\r\n        max_ending_here[i] = arr[i]\r\n        for j in range(i-1, -1, -1):\r\n            if arr[j] > arr[i]:\r\n                max_ending_here[i] = max_ending_here[j] + arr[i]\r\n                break\r\n            \r\n    # Find the maximum of all the elements in the table\r\n    for i in range(n):\r\n        if max_so_far < max_ending_here[i]:\r\n            max_so_far = max_ending_here[i]\r\n    \r\n    return max_so_far\r\n\r\n\r\narr = [ 1, 101, 10, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\n\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\r\n\r\n# Iterative Solution\r","votes":null},{"text":"\r\n    return max(max_inc_subsequence(arr, n))\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    max_sum_increasing_subsequence_so_far = [0] * n\r\n    max_sum_increasing_subsequence_so_far[0] = arr[0]\r\n\r\n    for i in range(1, n):\r\n        max_sum_increasing_subsequence_so_far[i] = max(arr[i], max_sum_increasing_subsequence_so_far[i - 1] + arr[i])\r\n\r\n    return max(max_sum_increasing_subsequence_so_far)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))","votes":null},{"text":"\r\n\r\n    # Base Case\r\n    if n <= 1:\r\n        return arr[0]\r\n\r\n    # Recursion\r\n    max_sum = 0\r\n    for i in range(n):\r\n        # Taking max of current element and arr[i] +\r\n        # sum of maximum increasing subsequence of remaining elements\r\n        max_sum = max(max_sum, arr[i] + max_sum_increasing_subsequence(arr, n - i - 1))\r\n\r\n    return max_sum\r\n\r\n\r\n# Driver Code\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"Maximum sum of the maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nprint(\"Maximum sum of the maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]\r\nn = len(arr)\r\nprint(\"Maximum sum of the maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n# Time Complexity: O(2^n)\r\n# Space Complexity: O(n)\r\n\r\n\r\n# Dynamic Programming (Top-Down)\r\n\r","votes":null},{"text":"\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    for i in range(0, n):\r\n       ","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    arr_len = len(arr)\r\n    max_sum = 0\r\n    for i in range(arr_len - 1, 0, -1):\r\n        if arr[i] >= arr[i + 1]:\r\n            max_sum += arr[i]\r\n    return max_sum\r\n\r\n\r\nprint(max_sum_increasing_subsequence([10, 15, 3, 7, 8, 9], 6))\r\nprint(max_sum_increasing_subsequence([10, 5, 4, 6, 8, 9], 6))\r\nprint(max_sum_increasing_subsequence([10, 5, 3, 7, 8, 9], 6))\r\nprint(max_sum_increasing_subsequence([10, 15, 3, 7, 8, 19], 6))\r\nprint(max_sum_increasing_subsequence([10, 5, 3, 7, 8, 19], 6))\r\nprint(max_sum_increasing_subsequence([10, 15, 3, 7, 8, 19], 6))\r\nprint(max_sum_increasing_subsequence([10, 15, 3, 7, 8, 19], 6))\r\nprint(max_sum_increasing_subsequence([10, 5, 7, 8, 19], 6))\r\nprint(max_sum_increasing_subsequence([10, 5, 7, 8, 19], 6))\r\nprint(max_sum_increasing_subsequence([10, 5, 7, 8, 19], 6))\r\nprint(max_sum_increasing_subsequence([10, 5, 7,","votes":null},{"text":"\r\n    # Base Case\r\n    if (n == 0 or n == 1):\r\n        return arr[0]\r\n    \r\n    # Initialize result\r\n    res = 0\r\n    \r\n    # Compute sum of all sub-sequences by\r\n    # dynamic programming (bottom up)\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if (arr[i] < arr[j]):\r\n                arr[i] = arr[i] + arr[j]\r\n                \r\n    # Find the maximum sum\r\n    for i in range(n):\r\n        if (arr[i] > res):\r\n            res = arr[i]\r\n    return res\r\n\r\n# Driver code\r\narr = [2, 1, 5, 6, 3]\r\nn = len(arr)\r\nprint(\"Maximum sum of an increasing subsequence is \", max_sum_increasing_subsequence(arr, n))\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# Input: arr[] = {3, 10, 2, 1, 20}\r\n# Output: 30\r\n# Maximum sum increasing subsequence is 30 \r\n# (10, 20)\r\n\r\n# Input: arr[] = {3, 4, 5, 10, 11, 12}\r\n# Output: 39\r\n# Maximum sum increasing subsequence is 39 \r\n# (3, 4, 5, 10, 11, 12)\r\n\r\n# Input: arr[] = {1, 101, 2, 3, 100, 4, 5}\r\n# Output: 106\r\n# Maximum sum increasing subsequence is 106 \r\n# (1, 2, 3, 100, 4, 5)\r\n","votes":null},{"text":"\r\n\r\n    # base case\r\n    if n == 0:\r\n        return 0\r\n\r\n    # take the element of the first index of array\r\n    max_sum = arr[0]\r\n\r\n    # traverse the array\r\n    for i in range(1, n):\r\n        # take the max of arr[i] and arr[i]+max_sum\r\n        # that will be the max sum till i and we will take the max of all the max_sums\r\n        max_sum = max(arr[i], max_sum + arr[i])\r\n\r\n    return max_sum\r\n\r\n\r\n# main function\r\nif __name__ == '__main__':\r\n\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n\r\n    print(\"Maximum sum of increasing subsequence of the array is {}\".format(\r\n        max_sum_increasing_subsequence(arr, n)))\r\n\r\n'''\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n\r\n    max_sum = arr[0]\r\n\r\n    for i in range(1, n):\r\n        if arr[i] > arr[i - 1]:\r\n            arr[i] += arr[i - 1]\r\n\r\n            if max_sum < arr[i]:\r\n                max_sum = arr[i]\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 10, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(f\"Maximum sum of increasing subsequence is {max_sum_increasing_subsequence(arr","votes":null},{"text":"\r\n    # code goes here\r\n    dp = [0] * (len(arr) + 1)\r\n    mx = 0\r\n    for i in range(1, len(arr) + 1):\r\n        dp[i] = max(dp[i - 1], arr[i - 1] + dp[i - 1])\r\n        mx = max(dp[i], mx)\r\n\r\n    return mx\r\n\r\n\r\n# arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n# n = len(arr)\r\n\r\n# print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nSample Input: \r\narr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\nn = 16\r\nSample Output: \r\n23\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    if n == 0 or n == 1:\r\n        return arr[0]\r\n    dp = [0 for i in range(n)]\r\n    dp[0] = arr[0]\r\n    dp[1] = max(arr[0], arr[1])\r\n\r\n    for i in range(2, n):\r\n        dp[i] = max(dp[i - 1], dp[i - 2] + arr[i])\r\n\r\n    return dp[n - 1]\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = float('-inf')\r\n    for i in range(n):\r\n        sum = 0\r\n        for j in range(i, n):\r\n            if arr[j] > arr[i]:\r\n                sum += arr[j]\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n    return max_sum\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nn = len(arr)\r\nprint(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Dynamic Programming\r\n\r","votes":null},{"text":"\r\n    if n < 2:\r\n        return arr[0]\r\n    else:\r\n        dp = [arr[0]]\r\n        for i in range(1, n):\r\n            dp.append(max(arr[i], arr[i] + dp[-1]))\r\n        return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(\"Maximum sum of increasing subsequence of given array \" + str(arr) + \" is \" + str(\r\n        max_sum_increasing_subsequence(arr, len(arr))))\r\n\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(\"Maximum sum of increasing subsequence of given array \" + str(arr) + \" is \" + str(\r\n        max_sum_increasing_subsequence_dp(arr, len(arr))))\r\n\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(\"Maximum sum of increasing subsequence of given array \" + str(arr) + \" is \" + str(\r\n        max_sum_increasing_subsequence_dp_opt(arr, len(arr))))\r\n\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(\"Maximum sum of increasing subsequence of given array \" + str(arr) + \" is \" + str(\r\n        max_sum_increasing_subsequence_dp_bottom_up(arr, len(arr))))\r\n\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(\"Maximum sum of increasing subsequence of given array \" + str","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n\r\n    # Initialize the sum array\r\n    sum = [0] * n\r\n\r\n    # Fill the sum array in bottom up manner\r\n    sum[n - 1] = arr[n - 1]\r\n    for i in range(n - 2, -1, -1):\r\n        sum[i] = max(sum[i + 1], arr[i]) + arr[i]\r\n\r\n    # return the maximum value of sum array\r\n    return max(sum)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(\"Maximum sum of an increasing subsequence is {}\".format(\r\n        max_sum_increasing_subsequence(arr, len(arr))))\r\n\r\n    arr = [1, 12, 2, 3, 10, 4, 5]\r\n    print(\"Maximum sum of an increasing subsequence is {}\".format(\r\n        max_sum_increasing_subsequence(arr, len(arr))))\r\n\r\n    arr = [3, 10, 2, 1, 9, 4, 5]\r\n    print(\"Maximum sum of an increasing subsequence","votes":null},{"text":"\r\n    # Base Case\r\n    if n <= 1:\r\n        return arr[0]\r\n\r\n    # Find the maximum sum of the subsequence ending at the last element\r\n    # and store the sum\r\n    max_ending_here = arr[n - 1]\r\n\r\n    # Compute the maximum sum including the last element\r\n    max_incl = arr[n - 1]\r\n\r\n    # Compute the maximum sum excluding the last element\r\n    max_excl = max_sum_increasing_subsequence(arr, n-1)\r\n\r\n    # Maximum sum is maximum of\r\n    # a) Maximum sum inclusive of the last element\r\n    # b) Maximum sum exclusive of the last element\r\n    max_sum = max(max_incl, max_excl)\r\n\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    if n <= 0:\r\n        return 0\r\n\r\n    max_sum = 0\r\n\r\n    arr_left = [0] * n\r\n    arr_right = [0] * n\r\n    arr_left[0] = arr[0]\r\n    arr_right[n - 1] = arr[n - 1]\r\n\r\n    for i in range(1, n):\r\n        arr_left[i] = max(arr_left[i - 1], arr[i])\r\n\r\n    for i in range(n - 2, -1, -1):\r\n        arr_right[i] = max(arr_right[i + 1], arr[i])\r\n\r\n    for i in range(n):\r\n        if arr_left[i] == arr[i] and arr_right[i] == arr[i]:\r\n            max_sum += arr[i]\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter the number of elements in the array: '))\r\n    arr = [int(x) for x in input('Enter the array elements: ').split()]\r\n\r\n    print('The maximum sum of increasing subsequence is', max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nEnter the number of elements in the array: 5\r\nEnter the array elements: 1 101 2 3 100\r\nThe maximum sum of increasing subsequence is 106\r\n\r\nSAMPLE 2\r\n\r\nEnter the number of elements in the array: 4\r\nEnter the array elements: 1 10 2 3\r\nThe maximum sum of increasing subsequence is 13\r\n\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\"\"\"","votes":null},{"text":"\r\n    dp = [0] * (n + 1)\r\n    dp[0] = 0\r\n\r\n    for i in range(1, n + 1):\r\n        dp[i] = max(arr[i - 1] + dp[i - 1], dp[i - 1])\r\n\r\n    return dp[n]\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\n\r\nprint(\"Maximum sum of increasing subsequence of the given array is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nTime Complexity","votes":null},{"text":"\r\n    arr.sort(reverse=True)\r\n    sum1 = 0\r\n    for i in range(n):\r\n        sum1 += arr[i]\r\n    return sum1\r\n\r\n\r\n# Test cases\r\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))\r\nprint(max_sum_increasing_subsequence([-1, 2, 3, 10], 4))\r\nprint(max_sum_increasing_subsequence([-1, -2, -3, -4], 4))\r\nprint(max_sum_increasing_subsequence([10, 20, 30, 40, 50], 5))\r\nprint(max_sum_increasing_subsequence([2, 3, 6, 1, 0, 20], 6))\r\n\r\n\r\n# Time complexity: O(n*logn)\r\n# Space complexity: O(1)\r\n\r\n\r\n# Alternate solution\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        if arr[i] > arr[i - 1]:\r\n            dp[i] = arr[i]\r\n        else:\r\n            dp[i] = arr[i] + dp[i - 1]\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    inc = [0] * n\r\n    inc[0] = arr[0]\r\n\r\n    for i in range(1, n):\r\n        inc[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\r\n                inc[i] = inc[j] + arr[i]\r\n\r\n    return max(inc)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [5, 6, 1, 2, 3, 4]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, 3, 4, 5, 4, 3, 2, 1]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, 3, 4, 5, 4, 3, 2, 1, 3, 2, 1]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, 3, 4, 5, 4, 3, 2, 1, 3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13","votes":null},{"text":"\r\n    # your code goes here\r\n    table = [0]*(n+1)\r\n    for i in range(1, n+1):\r\n        max_so_far = 0\r\n        for j in range(i):\r\n            if arr[i-1] > arr[j] and table[i] < table[j]+arr[i-1]:\r\n                table[i] = table[j]+arr[i-1]\r\n    return table[n]\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().strip().split()))\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_ending_here = 0\r\n        for j in range(i+1):\r\n            if arr[j] < arr[i]:\r\n                max_ending_here += arr[j]\r\n        if max_ending_here > max_sum:\r\n            max_sum = max_ending_here\r\n    return max_sum\r\n\r","votes":null},{"text":"\r\n    if n <= 1:\r\n        return arr[0]\r\n    max_sum = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n + 1):\r\n            sum = 0\r\n            for k in range(i, j):\r\n                sum += arr[k]\r\n            if sum > max_sum:\r\n                max_sum = sum\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\n\r\n\"\"\"\r\nTime O(n^3) , O(1)","votes":null},{"text":"\r\n    \r\n    # Base case\r\n    if n == 0 or n == 1:\r\n        return arr[0]\r\n    \r\n    # Creating an empty array of length n\r\n    dp = [0] * n\r\n    \r\n    # Filling the first element of dp array\r\n    dp[0] = arr[0]\r\n    \r\n    # Filling the second element of dp array\r\n    dp[1] = max(arr[0], arr[1])\r\n    \r\n    # Filling the remaining elements of dp array\r\n    for i in range(2, n):\r\n        dp[i] = max(arr[i] + dp[i - 2], dp[i - 1])\r\n        \r\n    # Returning the last element of dp array\r\n    return dp[n - 1]\r\n    \r\n    \r\n# Test cases\r\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))\r\nprint(max_sum_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15], 15))\r\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] < arr[j]:\r\n                max_sum += arr[j]\r\n                break\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = [int(i) for i in input().split()]\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# Time complexity = O(n^2)\r\n# Space complexity = O(1)\r\n\r\n\r\n# Sample Input 1:\r\n# 8\r\n# 4 3 5 7 8 6 2 1\r\n\r\n# Sample Output 1:\r\n# 29\r\n\r\n\r\n# Sample Input 2:\r\n# 4\r\n# 2 7 4 6\r\n\r\n# Sample Output 2:\r\n# 15\r\n\r\n\r\n# Sample Input 3:\r\n# 7\r\n# 1 101 2 3 100 4 5\r\n\r\n# Sample Output 3:\r\n# 106\r\n\r\n\r\n# Sample Input 4:\r\n# 7\r\n# 10 20 30 40 50 60 70\r\n\r\n# Sample Output 4:\r\n# 210\r\n\r\n\r\n# Sample Input 5:\r\n# 10\r\n# 1 12 7 9 10 5 6 11 3 13\r\n\r\n# Sample Output 5:\r\n# 53\r\n\r\n\r\n# Sample Input 6:\r\n# 5\r\n# 10 5 4 3 2\r\n\r\n# Sample Output 6:\r\n# 1","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_ending_here = 0\r\n        for j in range(i+1, n):\r\n            if arr[i] <= arr[j]:\r\n                max_ending_here += arr[j]\r\n        max_sum = max(max_sum, max_ending_here)\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 20, 30, 40, 50, 100, 120]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    # Test case 1\r\n    arr = [10, 20, 30, 40, 50, 100, 120]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    # Test case 2\r\n    arr = [10, 20, 30, 40, 50, 100]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    # Test case 3\r\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    # Test case 4\r\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequenc","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    # The maximum sum is of the subsequence which has the maximum\r\n    # sum of all increasing subsequence of all the previous elements\r\n    max_sum = arr[0]\r\n    for i in range(1, n):\r\n        # Consider all increasing subsequence of arr[0..i]\r\n        # and check if arr[i] is the last element of\r\n        # the increasing subsequence with maximum sum\r\n        # If yes, then arr[i] becomes the last element of\r\n        # the increasing subsequence with maximum sum\r\n        if arr[i] > arr[i - 1]:\r\n            arr[i] += arr[i - 1]\r\n        else:\r\n            arr[i] = arr[i]\r\n\r\n        # Update maximum sum by considering all elements in arr[0..i]\r\n        if max_sum < arr[i]:\r\n            max_sum = arr[i]\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))\r\n    print(max_sum_increasing_subsequence([0, 8, 5, 2, 6, 3], 6))\r\n    print(max_sum_increasing_subsequence([1, 5, 4, 3, 2, 10], 6))\r\n    print(max_sum_increasing_subsequence([5, 4, 3, 2, 1], 5))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 5))\r\n    print(max_sum_increasing_subsequence(","votes":null},{"text":"\r\n\r\n    # create the dp array to store max sum of increasing subsequence ending at arr[i]\r\n    dp = [0] * n\r\n    max_sum = 0\r\n\r\n    # fill the first element in the dp array\r\n    dp[0] = arr[0]\r\n\r\n    # iterate over the array and calculate max sum\r\n    for i in range(1, n):\r\n        # if element is greater than the dp[i - 1], then only keep it\r\n        if arr[i] > dp[i - 1]:\r\n            dp[i] = arr[i]\r\n        else:\r\n            dp[i] = dp[i - 1] + arr[i]\r\n\r\n        # update max_sum\r\n        max_sum = max(max_sum, dp[i])\r\n\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    # Base Case\r\n    if n == 0 or n == 1:\r\n        return arr[n - 1]\r\n\r\n    # Declare and initialize result\r\n    res = 0\r\n\r\n    # Traverse the array\r\n    for i in range(n):\r\n\r\n        # Find the maximum of including and excluding the\r\n        # current element\r\n        res = max(max_sum_increasing_subsequence(arr, i) + arr[i], res)\r\n\r\n    # Return the maximum sum\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    # Base Case\r\n    if n == 0:\r\n        return 0\r\n\r\n    # Recursive Case\r\n    # max_ending_here = max ending with the last element\r\n    max_ending_here = arr[n - 1]\r\n    # max_so_far = max of max ending with the last element and\r\n    # max ending at the previous last element (i.e., ignoring the last element)\r\n    max_so_far = max(arr[n - 1], max_sum_increasing_subsequence(arr, n - 1))\r\n\r\n    return max_ending_here + max_so_far\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(\"Sum of maximum increasing subsequence: \", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity : O(n)\r\nSpace Complexity : O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    \r\n    arr.sort()\r\n    \r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(dp[i - 1], arr[i])\r\n        \r\n    ans = dp[-1]\r\n    \r\n    return ans\r\n\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\n\r\nprint(max_sum","votes":null},{"text":"\r\n    # Your code here\r\n    if n <= 1:\r\n        return arr[0]\r\n    f = [arr[0]]\r\n    s = [arr[0]]\r\n    for i in range(1, n):\r\n        if arr[i] >= f[-1]:\r\n            f.append(arr[i])\r\n            s.append(arr[i])\r\n        else:\r\n            j = binary_search(f, arr[i])\r\n            f[j] = arr[i]\r\n            s[j] += arr[i]\r\n    return max(s)\r\n\r\n\r","votes":null},{"text":"\r\n    ans = 0\r\n    for i in range(n):\r\n        max_ending_here = 0\r\n        for j in range(i + 1):\r\n            if arr[j] < arr[i] and max_ending_here < arr[j]:\r\n                max_ending_here = arr[j]\r\n        ans += max_ending_here\r\n    return ans\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n","votes":null},{"text":"\r\n    dp = [0] * (n + 1)\r\n    dp[0] = 0\r\n    for i in range(1, n + 1):\r\n        dp[i] = arr[i - 1]\r\n        for j in range(1, i):\r\n            if arr[j - 1] < arr[i - 1] and dp[i] < dp[j] + arr[i - 1]:\r\n                dp[i] = dp[j] + arr[i - 1]\r\n    return dp[n]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    n = len(arr)\r\n    print(f'Maximum sum of increasing subsequence is {max_sum_increasing_subsequence(arr, n)}')\r\n    arr = [10, 5, 4, 3, 2, 1]\r\n    n = len(arr)\r\n    print(f'Maximum sum of increasing subsequence is {max_sum_increasing_subsequence(arr, n)}')\r\n    arr = [5, 10, 11, 7, 9, 2, 8]\r\n    n = len(arr)\r\n    print(f'Maximum sum of increasing subsequence is {max_sum_increasing_subsequence(arr, n)}')\r\n    arr = [3, 7, 9, 8, 10, 12, 20, 15]\r\n    n = len(arr)\r\n    print(f'Maximum sum of increasing subsequence is {max_sum_increasing_subsequence(arr, n)}')\r\n    arr = [10, 9, ","votes":null},{"text":"\r\n\r\n    # Base Case\r\n    if n == 0:\r\n        return 0\r\n\r\n    # The sum of maximum increasing subsequence of the current element\r\n    # is equal to the current element.\r\n    sum_curr = arr[n - 1]\r\n\r\n    # The sum of maximum increasing subsequence of the current element\r\n    # is the maximum of the following two values.\r\n    # 1) The sum of maximum increasing subsequence of the previous element\r\n    # 2) The sum of maximum increasing subsequence of the previous element\r\n    # added to the current element\r\n    sum_prev = max(sum_curr, sum_curr + max_sum_increasing_subsequence(arr, n - 1))\r\n\r\n    return sum_prev\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(\"The maximum sum of the increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n^2)\r\nSPACE COMPLEXITY: O(n)\r\n\"\"\"\r\n","votes":null},{"text":"\r\n\r\n    # Time Complexity: O(n^2)\r\n    # Space Complexity: O(n)\r\n\r\n    # Create a new array to store the sums of increasing subsequences\r\n    sum_arr = [0] * n\r\n    sum_arr[0] = arr[0]\r\n\r\n    # Loop through the array to find the sum of all possible increasing subsequences\r\n    for i in range(1, n):\r\n        # Initialize the sum as 0\r\n        sum_temp = 0\r\n        # Loop through the previous subsequence sums to find the maximum sum\r\n        for j in range(i):\r\n            # If the current element is greater than the previous sum, add it\r\n            if arr[i] > arr[j]:\r\n                sum_temp += sum_arr[j]\r\n        # Set the sum for the current subsequence\r\n        sum_arr[i] = arr[i] + sum_temp\r\n\r\n    # Find the maximum sum\r\n    max_sum = max(sum_arr)\r\n\r\n    return max_sum\r\n\r\n\r\n# Test Code\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))  # 106\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(n):\r\n        # Find maximum sum of increasing subsequence ending at current element\r\n        max_ending_here = 0\r\n        for j in range(i + 1):\r\n            if arr[j] <= arr[i]:\r\n                continue\r\n            max_ending_here += arr[j]\r\n        max_sum = max(max_sum, max_ending_here)\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [3, 10, 2, 1, 20]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))  # 30\r\n\r\n    arr = [3, 7, 9, 11, 12, 4, 5, 6]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))  # 31\r\n\r\n    arr = [-8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))  # 1\r\n\r\n    arr = [10, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))  # 55\r\n\r\n    arr = [1, 4, 6, 10, 23, 3, 1, 0, 20]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence","votes":null},{"text":"\r\n    dp = [1] * n\r\n    s = [0] * n\r\n\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[j] < arr[i]:\r\n                if s[j] + 1 > s[i]:\r\n                    s[i] = s[j] + 1\r\n                    dp[i] = dp[j]\r\n                elif s[j] + 1 == s[i]:\r\n                    dp[i] += dp[j]\r\n\r\n    return dp[n - 1]\r\n\r\n\r\n# Test Cases\r\narr = [2, 5, 3, 1, 6, 4]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [3, 7, 4, 6, 5]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [3, 7, 4, 6, 5, 9]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [10, 20, 30, 40, 50]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [2, 3, 7, 101, 18, 204, 205, 207, 24, 26, 28, 30, 32, 34, 36, 38]\r\nprint(ma","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    n = n + 1\r\n    dp = [0] * n\r\n    for i in range(n):\r\n        dp[i] = arr[i - 1]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i - 1]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i - 1])\r\n    return dp[n - 1]\r\n\r\n\r\n# Driver program to test the above function\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"The sum of maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_ending_here = arr[i]\r\n        for j in range(i + 1, n):\r\n            if arr[j] > arr[i]:\r\n                if max_ending_here < arr[j]:\r\n                    max_ending_here = arr[j]\r\n            else:\r\n                break\r\n        max_sum += max_ending_here\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(\"Max sum of maximum increasing subsequence of the given array is \", max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nTime Complexity- O(n^2)\r\nSpace Complexity- O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null}],"time":{"count":16.0,"avg":159810.48375,"std":37516.5460595249,"cov":0.2347564764}}
{"id":525,"question":"def parallel_lines(line1, line2):\r\n    \"\"\"Write a python function to check whether two given lines are parallel or not.\"\"\"","answers":[{"text":"\r\n    # Check if the slopes of the lines are equal\r\n    return (line1[1] - line1[0]) == (line2[1] - line2[0])\r\n\r\n\r","votes":92636.78},{"text":"\r\n    return (line1[1]-line1[0]) == (line2[1]-line2[0])\r\n\r\n\r","votes":93843.008},{"text":"\r\n    \r\n    # Checking for parallel lines\r\n    if line1[1]-line1[0] == line2[1]-line2[0]:\r\n        return True\r\n    \r\n    # Returning False if lines are not parallel\r\n    return False\r\n\r\n\r\n# Sample Test Case\r\nline1 = [1, 7]\r\nline2 = [2, 8]\r\nprint(parallel_lines(line1, line2))\r\n\r\n\r","votes":105633.732},{"text":"\r\n    if line1[1] - line1[0] == line2[1] - line2[0]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(parallel_lines([1, 4], [3, 7]))\r\nprint(parallel_lines([5, 4], [3, 7]))\r\nprint(parallel_lines([1, 3], [2, 4]))\r\nprint(parallel_lines([1, 3], [2, 3]))\r\n\r\n# Solution:\r","votes":109700.356},{"text":"\r\n    if line1[1] - line1[0] == line2[1] - line2[0]:\r\n        print(\"Lines are parallel\")\r\n        return True\r\n    else:\r\n        print(\"Lines are not parallel\")\r\n        return False\r\n\r\n\r\n","votes":168166.544},{"text":"\r\n    # Store the values of x1, y1, x2, y2, x3, y3, x4, y4 in the variables x1, y1, x2, y2, x3, y3, x4, y4\r\n    x1, y1, x2, y2, x3, y3, x4, y4 = line1\r\n    # Store the values of x1, y1, x2, y2, x3, y3, x4, y4 in the variables a, b, c, d, e, f, g, h\r\n    a, b, c, d, e, f, g, h = line2\r\n    # Find the gradient of line 1\r\n    m1 = (y2 - y1) \/ (x2 - x1)\r\n    # Find the gradient of line 2\r\n    m2 = (h - f) \/ (g - e)\r\n    # If both the gradients are equal, the lines are parallel\r\n    if m1 == m2:\r\n        return True\r\n    # If both the gradients are not equal, the lines are not parallel\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver code\r\n\r\n# Test case 1\r\nline1 = (1, 1, 2, 2, 3, 3, 4, 4)\r\nline2 = (1, 1, 2, 2, 3, 3, 4, 4)\r\nprint(parallel_lines(line1, line2))\r\n\r\n# Test case 2\r\nline1 = (1, 1, 2, 2, 3, 3, 4, 4)\r\nline2 = (1, 2, 2, 2, 3, 3, 4, 3)\r\nprint(parallel_lines(line1, line2))\r\n\r\n# Test case 3\r\nline1 = (1, 1, 2, 2, 3, 3, 4, 4)\r\nlin","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    m1 = (line1[1][1] - line1[0][1]) \/ (line1[1][0] - line1[0][0])\r\n    m2 = (line2[1][1] - line2[0][1]) \/ (line2[1][0] - line2[0][0])\r\n    \r\n    if m1 == m2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = [[1, 1], [3, 3]]\r\n    line2 = [[4, 1], [2, 3]]\r\n    print(\"Are lines parallel: \" + str(parallel_lines(line1, line2)))\r\n\r\n    line1 = [[0, 0], [1, 1]]\r\n    line2 = [[1, 0], [2, 1]]\r\n    print(\"Are lines parallel: \" + str(parallel_lines(line1, line2)))\r\n\r\n    line1 = [[1, 1], [2, 2]]\r\n    line2 = [[1, 2], [2, 1]]\r\n    print(\"Are lines parallel: \" + str(parallel_lines(line1, line2)))\r\n\r\n    line1 = [[1, 1], [2, 2]]\r\n    line2 = [[1, 2], [2, 3]]\r\n    print(\"Are lines parallel: \" + str(parallel_lines(line1, line2)))\r\n\r\n    line1 = [[1, 1], [2, 2]]\r\n    line2 = [[1, 2], [2, 3]]\r\n    print(\"Are lines parallel: \" + str(parallel_lines(line1, line2)))\r\n\r\n    line1 = [[0, 0], [1, 1]]\r\n    line2 = [[1, 0], [2, 1]]\r\n    print(\"Ar","votes":null},{"text":"\r\n    if line1.slope() == line2.slope():\r\n        print(\"The two lines are parallel\")\r\n    else:\r\n        print(\"The two lines are not parallel\")\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Check if both lines are horizontal or vertical\r\n    if (line1[0][0] == line1[1][0] and line2[0][0] == line2[1][0]) or (line1[0][1] == line1[1][1] and line2[0][1] == line2[1][1]):\r\n        return True\r\n    \r\n    # Check if slope of both lines are same\r\n    if (line1[1][1]-line1[0][1])\/(line1[1][0]-line1[0][0]) == (line2[1][1]-line2[0][1])\/(line2[1][0]-line2[0][0]):\r\n        return True\r\n    \r\n    return False\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n# Calls  main  to start the ball rolling.\r\n# -----------------------------------------------------------------------------\r\n\r\nmain()\r\n","votes":null},{"text":"\r\n    if line1[1] == line2[1]:\r\n        if line1[0] == line2[0]:\r\n            return True\r\n        else:\r\n            return False\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    \r\n    # x1, y1, x2, y2 = [1, 2, 3, 1]\r\n    # x3, y3, x4, y4 = [1, 0, 3, 2]\r\n    \r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n    \r\n    slope = ((y2 - y1) * (x4 - x3)) - ((x2 - x1) * (y4 - y3))\r\n    \r\n    if slope == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# print(parallel_lines([1, 2, 3, 1], [1, 0, 3, 2]))\r\n# print(parallel_lines([1, 2, 3, 1], [1, 1, 3, 2]))","votes":null},{"text":"\r\n    \r\n    a1, b1, c1 = line1.split(' ')\r\n    a2, b2, c2 = line2.split(' ')\r\n    \r\n    a1 = float(a1)\r\n    b1 = float(b1)\r\n    c1 = float(c1)\r\n    a2 = float(a2)\r\n    b2 = float(b2)\r\n    c2 = float(c2)\r\n    \r\n    # parallel lines have same slope\r\n    if a1 == a2 and b1 == b2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Testing\r\n\r\n# Test 1\r\n# Correct result => True\r\nline1 = '0 2 2'\r\nline2 = '0 1 3'\r\nprint('Line1:', line1)\r\nprint('Line2:', line2)\r\nprint('Are the lines parallel?', parallel_lines(line1, line2))\r\nprint()\r\n\r\n# Test 2\r\n# Correct result => False\r\nline1 = '0 1 1'\r\nline2 = '0 2 2'\r\nprint('Line1:', line1)\r\nprint('Line2:', line2)\r\nprint('Are the lines parallel?', parallel_lines(line1, line2))\r\nprint()\r\n\r\n# Test 3\r\n# Correct result => True\r\nline1 = '0 1 2'\r\nline2 = '0 0 2'\r\nprint('Line1:', line1)\r\nprint('Line2:', line2)\r\nprint('Are the lines parallel?', parallel_lines(line1, line2))\r\nprint()\r\n\r\n# Test 4\r\n# Correct result => False\r\nline1 = '0 2 1'\r\nline2 = '0 1 2'\r\nprint('Line1:', line1)\r\nprint('Line2:', line2)\r\nprint('Are the lines parallel?', parallel_lines(line1, line2))\r\nprin","votes":null},{"text":"\r\n    \r\n    # Check if 2 given lines are parallel or not\r\n    \r\n    # Example:\r\n    # print(parallel_lines([-1, 2, 1], [1, 1, 2]))\r\n    # True\r\n    # print(parallel_lines([-1, 2, 1], [-1, 1, 2]))\r\n    # False\r\n    \r\n    # If two lines are parallel, the distance between the two lines is the same as the distance between the lines and the origin.\r\n    # This means that if two lines are parallel, the distance between the origin and the two lines is the same.\r\n    # Therefore, if we use the distance formula, we can check whether two lines are parallel.\r\n    \r\n    # Parameters:\r\n    # line1 - a list of 3 numbers\r\n    # line2 - a list of 3 numbers\r\n    \r\n    # Returns:\r\n    # True - if the two lines are parallel\r\n    # False - if the two lines are not parallel\r\n    \r\n    # Step 1:\r\n    # Use the distance formula to calculate the distance between the origin and the two lines.\r\n    \r\n    # Step 2:\r\n    # Check if the distance between the origin and the two lines are the same.\r\n    \r\n    # Step 3:\r\n    # Return the result\r\n    \r\n    # distance formula\r\n    # distance = math.sqrt(x**2 + y**2 + z**2)\r\n    \r\n    distance_from_origin = lambda x, y, z: math.sqrt(x**2 + y**2 + z**2)\r\n    \r\n    distance1 = distance_from_origin(line1[0], line1[1], line1[2])\r\n    distance2 = distance_from_origin(line2[0], line2[1], line2[2])\r\n    \r\n    return distance1 == distance2\r\n\r\n# Test cases\r\n# Test 1\r\n# Correct result => True\r\nprint(parallel_lines([-1","votes":null},{"text":"\r\n    if (line1[0] == line2[0] and line1[1] == line2[1]):\r\n        return True\r\n    elif ((line1[0][0] - line1[1][0]) * (line2[0][0] - line2[1][0])) == ((line1[0][1] - line1[1][1]) * (line2[0][1] - line2[1][1])):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = [[1, 1], [2, 2]]\r\n    line2 = [[1, 1], [2, 2]]\r\n    line3 = [[1, 1], [2, 3]]\r\n    line4 = [[1, 1], [2, 2]]\r\n\r\n    print(f\"Are line1 and line2 parallel? {parallel_lines(line1, line2)}\")\r\n    print(f\"Are line1 and line3 parallel? {parallel_lines(line1, line3)}\")\r\n    print(f\"Are line2 and line4 parallel? {parallel_lines(line2, line4)}\")\r\n    print(f\"Are line3 and line4 parallel? {parallel_lines(line3, line4)}\")\r\n","votes":null},{"text":"\r\n    if line1.slope == line2.slope:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nclass Line:\r\n   ","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        line1 = line1[1]\r\n        line2 = line2[1]\r\n    if line1[0] == line2[0]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    if line1[0] == line2[0]:\r\n        if line1[1] == line2[1]:\r\n            return True\r\n        return False\r\n    m1 = (line1[1]-line1[0])\/(line1[2]-line1[1])\r\n    m2 = (line2[1]-line2[0])\/(line2[2]-line2[1])\r\n    return m1==m2\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = [1, 2, 5]\r\n    line2 = [2, 4, 6]\r\n    line3 = [1, 2, 4]\r\n    line4 = [2, 4, 3]\r\n    print(parallel_lines(line1, line2))\r\n    print(parallel_lines(line3,","votes":null},{"text":"\r\n    \r\n    point_1, point_2 = line1\r\n    point_3, point_4 = line2\r\n    return slope(point_1, point_2) == slope(point_3, point_4)\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    (x1, y1), (x2, y2) = line1\r\n    (x3, y3), (x4, y4) = line2\r\n    if x1 == x2:\r\n        slope1 = float('inf')\r\n    else:\r\n        slope1 = (y2 - y1) \/ (x2 - x1)\r\n    if x3 == x4:\r\n        slope2 = float('inf')\r\n    else:\r\n        slope2 = (y4 - y3) \/ (x4 - x3)\r\n    \r\n    if slope1 == slope2:\r\n        return True\r\n    return False\r\n\r\n# Test Cases\r\n# Test case 1\r\nline1 = [(0, 0), (1, 1)]\r\nline2 = [(0, 0), (1, 1)]\r\nexpected = True\r\nprint(\"Expected\", expected, \"got\", parallel_lines(line1, line2))\r\n\r\n# Test case 2\r\nline1 = [(0, 0), (1, 1)]\r\nline2 = [(0, 0), (2, 2)]\r\nexpected = True\r\nprint(\"Expected\", expected, \"got\", parallel_lines(line1, line2))\r\n\r\n# Test case 3\r\nline1 = [(0, 0), (1, 1)]\r\nline2 = [(0, 1), (1, 0)]\r\nexpected = False\r\nprint(\"Expected\", expected, \"got\", parallel_lines(line1, line2))\r\n\r\n# Test case 4\r\nline1 = [(0, 0), (1, 1)]\r\nline2 = [(0, 3), (1, 4)]\r\nexpected = False\r\nprint(\"Expected\", expected, \"got\", parallel_lines(line1, line2))\r\n\r\n# Test case 5\r\nline1 = [(0, 0), (1, 1)]\r\nline2 = [(","votes":null},{"text":"\r\n    print(\"line1:\", line1)\r\n    print(\"line2:\", line2)\r\n\r\n    if line1[1] == line2[1]:\r\n        print(\"line1 and line2 are parallel.\")\r\n    elif line1[0] == line2[0]:\r\n        print(\"line1 and line2 are parallel.\")\r\n    else:\r\n        print(\"line1 and line2 are NOT parallel.\")\r\n\r\n\r","votes":null},{"text":"\r\n    x1, y1 = line1\r\n    x2, y2 = line2\r\n    if (y2 - y1) \/ (x2 - x1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(parallel_lines((2, 5), (5, 8)))\r\nprint(parallel_lines((2, 5), (6, 10)))\r\n\r\n#%%\r\n## Exercise 2\r","votes":null},{"text":"\r\n    x1 = line1[0][0]\r\n    y1 = line1[0][1]\r\n    x2 = line1[1][0]\r\n    y2 = line1[1][1]\r\n    \r\n    x3 = line2[0][0]\r\n    y3 = line2[0][1]\r\n    x4 = line2[1][0]\r\n    y4 = line2[1][1]\r\n    \r\n    if (((x2 - x1)*(y3 - y1)) == ((y2 - y1)*(x3 - x1))):\r\n        return (\"The given lines are parallel\")\r\n    else:\r\n        return (\"The given lines are not parallel\")\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = []\r\n    line2 = []\r\n    line1.append([int(input(\"Enter x1: \")), int(input(\"Enter y1: \"))])\r\n    line1.append([int(input(\"Enter x2: \")), int(input(\"Enter y2: \"))])\r\n    line2.append([int(input(\"Enter x3: \")), int(input(\"Enter y3: \"))])\r\n    line2.append([int(input(\"Enter x4: \")), int(input(\"Enter y4: \"))])\r\n\r\n    print(parallel_lines(line1, line2))\r\n\r\n\r\n\"\"\"\r\nEXAMPLES:-\r\n---------\r\n\r\nExample 1:-\r\n-----------\r\nInput:\r\n-----------\r\nEnter x1: 0\r\nEnter y1: 0\r\nEnter x2: 1\r\nEnter y2: 2\r\nEnter x3: 3\r\nEnter y3: 0\r\nEnter x4: 4\r\nEnter y4: 4\r\n\r\nOutput:\r\n-----------\r\nThe given lines are not parallel\r\n\r\n\r\nExample 2:-\r\n-----------\r\nInput:\r\n-----------\r\nEnter x","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n\r\n    if (x1 == x2 and x3 == x4) or (y1 == y2 and y3 == y4):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Test Cases\r\nprint(parallel_lines((1, 1, 2, 2), (1, 1, 2, 2)))  # True\r\nprint(parallel_lines((1, 1, 2, 2), (2, 2, 3, 3)))  # True\r\nprint(parallel_lines((1, 1, 2, 2), (1, 2, 2, 3)))  # False\r\nprint(parallel_lines((1, 1, 2, 2), (1, 2, 3, 3)))  # False\r\nprint(parallel_lines((1, 1, 2, 2), (2, 1, 3, 2)))  # False\r\nprint(parallel_lines((1, 1, 2, 2), (1, 1, 2, 3)))  # False\r\nprint(parallel_lines((1, 1, 2, 2), (1, 1, 3, 2)))  # False\r\nprint(parallel_lines((1, 1, 2, 2), (2, 2, 3, 4)))  # False\r\nprint(parallel_lines((1, 1, 2, 2), (2, 2, 4, 3)))  # False\r\nprint(parallel_lines((1, 1, 2, 2), (2, 1, 3, 4)))  # False\r\nprint(parallel_lines((1, 1, 2, 2), (3, 1, 4, 2)))  # False\r\nprint(parallel_lines((1, 1,","votes":null},{"text":"\r\n    # https:\/\/www.geeksforgeeks.org\/python-check-whether-two-given-lines-are-parallel-or-not\/\r\n    # https:\/\/www.geeksforgeeks.org\/check-whether-two-given-lines-are-parallel-or-not\/\r\n\r\n    # Create two points for line 1\r\n    x1_1, y1_1 = line1[0]\r\n    x1_2, y1_2 = line1[1]\r\n\r\n    # Create two points for line 2\r\n    x2_1, y2_1 = line2[0]\r\n    x2_2, y2_2 = line2[1]\r\n\r\n    # Find the slope of line 1\r\n    try:\r\n        m1 = (y1_2 - y1_1) \/ (x1_2 - x1_1)\r\n    except ZeroDivisionError:\r\n        m1 = float('inf')\r\n\r\n    # Find the slope of line 2\r\n    try:\r\n        m2 = (y2_2 - y2_1) \/ (x2_2 - x2_1)\r\n    except ZeroDivisionError:\r\n        m2 = float('inf')\r\n\r\n    # Return True if the slopes are equal, else False\r\n    return m1 == m2\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = ((1, 1), (3, 3))\r\n    line2 = ((1, 1), (3, 3))\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = ((1, 1), (3, 3))\r\n    line2 = ((2, 2), (4, 4))\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = ((1, 1), (3, 3))\r\n    line2 = ((4, 4), ","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        print(\"The lines are parallel\")\r\n    else:\r\n        print(\"The lines are not parallel\")\r\n\r\n\r\nline1 = input(\"Enter the first line in the form ax+by+c: \").split()\r\nline2 = input(\"Enter the second line in the form ax+by+c: \").split()\r\n\r\nline1 = [float(line1[0]), float(line1[1]), float(line","votes":null},{"text":"\r\n    #line 1\r\n    x1 = float(line1[0])\r\n    y1 = float(line1[1])\r\n    x2 = float(line1[2])\r\n    y2 = float(line1[3])\r\n    #line 2\r\n    x3 = float(line2[0])\r\n    y3 = float(line2[1])\r\n    x4 = float(line2[2])\r\n    y4 = float(line2[3])\r\n\r\n    #slope line 1\r\n    m1 = (y2 - y1)\/(x2 - x1)\r\n    #slope line 2\r\n    m2 = (y4 - y3)\/(x4 - x3)\r\n\r\n    #check slope\r\n    if m1 == m2:\r\n        print(\"Lines are parallel\")\r\n    else:\r\n        print(\"Lines are not parallel\")\r\n\r","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n\r\n    try:\r\n        m1 = (y2-y1)\/(x2-x1)\r\n        m2 = (y4-y3)\/(x4-x3)\r\n    except ZeroDivisionError:\r\n        return False\r\n\r\n    if m1==m2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = [2, 3, 4, 5]\r\n    line2 = [5, 3, 6, 1]\r\n    print(\"The two lines are parallel:\", parallel_lines(line1, line2))\r\n\r\n    line1 = [2, 3, 4, 5]\r\n    line2 = [5, 3, 3, 1]\r\n    print(\"The two lines are parallel:\", parallel_lines(line1, line2))\r\n\r\n    line1 = [2, 3, 4, 5]\r\n    line2 = [5, 3, 3, 1]\r\n    print(\"The two lines are parallel:\", parallel_lines(line1, line2))\r\n\r\n    line1 = [2, 3, 4, 5]\r\n    line2 = [1, 6, 5, 1]\r\n    print(\"The two lines are parallel:\", parallel_lines(line1, line2))\r\n\r\n    line1 = [2, 3, 4, 5]\r\n    line2 = [1, 6, 5, 1]\r\n    print(\"The two lines are parallel:\", parallel_lines(line1, line2))\r\n\r\n    line1 = [2, 3, 4, 5]\r\n    line2 = [1, 6, 5, 7]\r\n    print(\"The two line","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n    if (x1 - x2) * (y3 - y4) == (x3 - x4) * (y1 - y2):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = (0, 0, 5, 5)\r\n    line2 = (5, 0, 0, 5)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (0, 0, 5, 5)\r\n    line2 = (5, 5, 5, 5)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (0, 0, 5, 5)\r\n    line2 = (5, 5, 10, 5)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (0, 0, 5, 5)\r\n    line2 = (5, 5, 10, 6)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (0, 0, 5, 5)\r\n    line2 = (5, 5, 10, 10)\r\n    print(parallel_lines(line1","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if set(line1) == set(line2):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Test Cases\r\n\r\nprint(parallel_lines([1, 3, 5], [1, 3, 5]))  # Output: True\r\nprint(parallel_lines([1, 3, 5], [2, 4, 6]))  # Output: False\r\nprint(parallel_lines([1, 3, 5, 7], [2, 4, 6, 8]))  # Output: False\r\nprint(parallel_lines([1, 2, 3], [1, 2, 3]))  # Output: True\r\nprint(parallel_lines([1, 2, 3], [2, 1, 3]))  # Output: False\r\nprint(parallel_lines([1, 2, 3], [2, 3, 1]))  # Output: False\r\nprint(parallel_lines([1, 2, 3], [1, 2, 3, 4]))  # Output: False\r\nprint(parallel_lines([1, 2, 3, 4], [1, 2, 3]))  # Output: False\r\nprint(parallel_lines([1, 2, 3, 4], [2, 1, 3, 4]))  # Output: False\r\nprint(parallel_lines([1, 2, 3, 4], [2, 3, 1, 4]))  # Output: False\r\nprint(parallel_lines([1, 2, 3, 4], [2, 3, 4, 1]))  # Output: False\r\nprint(parallel_lines([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: True\r\nprint(parallel_lines([1, 2, 3, 4], [1, 3, 2, 4]))  # Output: False\r\nprin","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        return True\r\n    elif line1[1] == line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = [1, 1]\r\n    line2 = [2, 2]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1]\r\n    line2 = [1, 2]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1]\r\n    line2 = [1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1]\r\n    line2 = [1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1]\r\n    line2 = [1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1]\r\n    line2 = [1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1]\r\n    line2 = [1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1]\r\n    line2 = [1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1]\r\n    line2 = [1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1]\r\n    line2 = [1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1]\r\n    line2 = [1, 1","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n    if x1 == x2:\r\n        m1 = 0\r\n    else:\r\n        m1 = (y1 - y2) \/ (x1 - x2)\r\n    if x3 == x4:\r\n        m2 = 0\r\n    else:\r\n        m2 = (y3 - y4) \/ (x3 - x4)\r\n    if m1 == m2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    try:\r\n        if (line1.slope() == line2.slope()):\r\n            return True\r\n        else:\r\n            return False\r\n    except Exception:\r\n        return False\r\n\r\n# Sample Input-1\r\n# 0 0 1 1 2 2\r\n# 0 0 0 1 1 1\r\n# Sample Output-1\r\n# True\r\n\r\n# Sample Input-2\r\n# 1 1 1 1 5 5\r\n# 1 1 1 3 3 5\r\n# Sample Output-2\r\n# False\r\n\r\n# Sample Input-3\r\n# 0 0 1 1 2 2\r\n# 0 0 1 -1 2 -2\r\n# Sample Output-3\r\n# True\r\n\r\n# Sample Input-4\r\n# 0 0 1 1 2 2\r\n# 0 0 0 1 1 1\r\n# Sample Output-4\r\n# True\r\n\r\n# Sample Input-5\r\n# 0 0 1 1 2 2\r\n# 0 0 0 0 0 0\r\n# Sample Output-5\r\n# False\r\n\r\n# Sample Input-6\r\n# 0 0 0 0 0 0\r\n# 0 0 0 0 0 0\r\n# Sample Output-6\r\n# True\r\n\r\n# Sample Input-7\r\n# 0 0 0 0 0 0\r\n# 0 0 0 0 0 0\r\n# Sample Output-7\r\n# True\r\n\r\n# Sample Input-8\r\n# 0 0 1 1 2 2\r\n# 0 0 0 0 0 0\r\n# Sample Output-8\r\n# False\r\n\r\n# Sample Input-9\r\n# 0 0 1 ","votes":null},{"text":"\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    # return True if the lines are parallel, False otherwise\r\n    ","votes":null},{"text":"\r\n    a1, b1 = line1\r\n    a2, b2 = line2\r\n    if a1 * b2 == a2 * b1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = [(1, 3), (4, 6)]\r\n    line2 = [(2, 4), (1, 5)]\r\n    if parallel_lines(line1, line2):\r\n        print(\"Line 1 and line 2 are parallel.\")\r\n    else:\r\n        print(\"Line 1 and line 2 are not parallel.\")\r\n\r\n\r","votes":null},{"text":"\r\n    line1 = line1.split()\r\n    line2 = line2.split()\r\n    x11 = float(line1[0])\r\n    y11 = float(line1[1])\r\n    x12 = float(line1[2])\r\n    y12 = float(line1[3])\r\n    x21 = float(line2[0])\r\n    y21 = float(line2[1])\r\n    x22 = float(line2[2])\r\n    y22 = float(line2[3])\r\n    \r\n    parallel = False\r\n   \r\n    # slope of the first line:\r\n    m1 = (y12 - y11) \/ (x12 - x11)\r\n   \r\n    # slope of the second line:\r\n    m2 = (y22 - y21) \/ (x22 - x21)\r\n   \r\n    # if slopes are equal then the lines are parallel:\r\n    if m1 == m2:\r\n        parallel = True\r\n    else:\r\n        parallel = False\r\n    \r\n    return parallel\r\n\r\n\r\n# Sample Test Case 1\r\nline1 = input()\r\nline2 = input()\r\nprint(parallel_lines(line1, line2))\r\n\r\n# Sample Input 1:\r\n# 1 1 2 2\r\n# 2 2 3 3\r\n\r\n# Sample Output 1:\r\n# True\r\n\r\n\r\n# Sample Test Case 2\r\nline1 = input()\r\nline2 = input()\r\nprint(parallel_lines(line1, line2))\r\n\r\n# Sample Input 2:\r\n# 1 1 2 2\r\n# 2 2 3 4\r\n\r\n# Sample Output 2:\r\n# False\r\n\r\n\r\n# Sample Test Case 3\r\nline1 = input()\r\nline2 = input()\r\nprint(parallel_lines(line1, line2))\r\n\r\n","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    a1, b1, c1 = line2\r\n    if a1 * y1 + b1 * x1 + c1 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if (line1[0][0] - line1[1][0]) * (line2[0][0] - line2[1][0]) == 0 and (line1[0][1] - line1[1][1]) * (line2[0][1] - line2[1][1]) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(\"Enter the coordinates of two lines\")\r\nline1 = []\r\nline2 = []\r\nfor i in range(2):\r\n    line1.append(list(map(int, input(\"Line 1: \").split())))\r\nfor i in range(2):\r\n    line2.append(list(map(int, input(\"Line 2: \").split())))\r\n\r\nif parallel_lines(line1, line2):\r\n    print(\"The two lines are parallel.\")\r\nelse:\r\n    print(\"The two lines are not parallel.\")\r\n\r\n\r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ","votes":null},{"text":"\r\n    print(\"line1: \", line1)\r\n    print(\"line2: \", line2)\r\n    print(\"-----------------------------------------------------------------------------------------\")\r\n\r\n    # Checking if the lines are parallel or not\r\n    if(line1[1] == line2[1]):\r\n        print(\"The lines are parallel.\")\r\n    else:\r\n        print(\"The lines are not parallel.\")\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n\r\n    # line1 = [1,2,3]\r\n    # line2 = [2,3,4]\r\n    # parallel_lines(line1, line2)\r\n\r\n    # line1 = [1,2,3]\r\n    # line2 = [1,2,4]\r\n    # parallel_lines(line1, line2)\r\n\r\n    # line1 = [1,2,3]\r\n    # line2 = [1,2,3]\r\n    # parallel_lines(line1, line2)\r\n\r\n    line1 = [1, 1, 0]\r\n    line2","votes":null},{"text":"\r\n    # Check if the two lines are parallel or not.\r\n    # If they are parallel, return True, else return False\r\n    if (line1[1] - line1[0]) == (line2[1] - line2[0]) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if line1.slope == line2.slope:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    x1, y1 = line1[0]\r\n    x2, y2 = line1[1]\r\n    x3, y3 = line2[0]\r\n    x4, y4 = line2[1]\r\n    return (y3-y1)*(x2-x1)==(y2-y1)*(x3-x1)\r\n\r\nif __name__ == \"__main__\":\r\n    print(parallel_lines((0, 0), (0, 10)))\r\n    print(parallel_lines((0, 0), (10, 0)))\r\n    print(parallel_lines((0, 0), (10, 10)))\r\n    print(parallel_lines((0, 0), (0, 1)))\r\n    print(parallel_lines((0, 0), (1, 0)))\r\n    print(parallel_lines((0, 0), (1, 1)))\r\n    print(parallel_lines((0, 0), (1, -1)))\r\n    print(parallel_lines((0, 0), (-1, 1)))\r\n    print(parallel_lines((0, 0), (-1, -1)))\r\n    print(parallel_lines((0, 0), (1, -1)))\r\n    print(parallel_lines((0, 0), (-1, 1)))\r\n    print(parallel_lines((0, 0), (-1, -1)))\r\n    print(parallel_lines((0, 0), (10, 1)))\r\n    print(parallel_lines((0, 0), (10, -1)))\r\n    print(parallel_lines((0, 0), (-10, 1)))\r\n    print(parallel_lines((0, 0), (-10, -1)))\r\n    print(parallel_lines((0, 0), (10, -10)))\r\n    print(parallel_lines((0, 0), (10, 10)))\r\n    print(paralle","votes":null},{"text":"\r\n    if line1[0] == line2[0] and line1[1] == line2[1] and line1[2] == line2[2]:\r\n        print(\"The lines are same\")\r\n    elif line1[0] == line2[0] and line1[1] == line2[1] and line1[2] != line2[2]:\r\n        print(\"The lines are parallel\")\r\n    elif line1[0] == line2[0] and line1[1] != line2[1] and line1[2] == line2[2]:\r\n        print(\"The lines are parallel\")\r\n    elif line1[0] == line2[0] and line1[1] != line2[1] and line1[2] != line2[2]:\r\n        print(\"The lines are not parallel\")\r\n    elif line1[0] != line2[0] and line1[1] == line2[1] and line1[2] == line2[2]:\r\n        print(\"The lines are parallel\")\r\n    elif line1[0] != line2[0] and line1[1] == line2[1] and line1[2] != line2[2]:\r\n        print(\"The lines are not parallel\")\r\n    elif line1[0] != line2[0] and line1[1] != line2[1] and line1[2] == line2[2]:\r\n        print(\"The lines are not parallel\")\r\n    else:\r\n        print(\"The lines are not parallel\")\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # A & B are points on line 1\r\n    # C & D are points on line 2\r\n\r\n    # (x1, y1) - Point 1 on first line\r\n    x1 = line1[0]\r\n    y1 = line1[1]\r\n\r\n    # (x2, y2) - Point 2 on first line\r\n    x2 = line1[2]\r\n    y2 = line1[3]\r\n\r\n    # (x3, y3) - Point 1 on second line\r\n    x3 = line2[0]\r\n    y3 = line2[1]\r\n\r\n    # (x4, y4) - Point 2 on second line\r\n    x4 = line2[2]\r\n    y4 = line2[3]\r\n\r\n    # Line 1\r\n    m1 = (y2 - y1) \/ (x2 - x1)\r\n    b1 = y1 - (m1 * x1)\r\n\r\n    # Line 2\r\n    m2 = (y4 - y3) \/ (x4 - x3)\r\n    b2 = y3 - (m2 * x3)\r\n\r\n    # Check if the slopes are equal\r\n    if m1 == m2:\r\n        return True\r\n\r\n    # If not, then the lines are not parallel\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = [1, 2, 3, 4]\r\n    line2 = [0, 1, 2, 3]\r\n\r\n    print(parallel_lines(line1, line2))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(1)\r\nSPACE COMPLEXITY: O(1)\r\n\"\"\"\r\n\r\n\"\"\"\r\nLet's understand the algorithm using the above example:\r\n\r\nThe slope of line 1 is (y2 - y","votes":null},{"text":"\r\n    # Write your code here\r\n    a1, b1, c1 = line1[0], line1[1], line1[2]\r\n    a2, b2, c2 = line2[0], line2[1], line2[2]\r\n    return a1*b2-a2*b1 == 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = eval(input())\r\n    line2 = eval(input())\r\n    print(parallel_lines(line1, line2))\r\n\r\n\r\n# Example Input\r\n# Input 1:\r\n# \t[0, 0, 0]\r\n# \t[2, 2, 2]\r\n\r\n# Input 2:\r\n# \t[2, 0, 0]\r\n# \t[2, 2, 2]\r\n\r\n\r\n# Example Output\r\n# Output 1:\r\n# \tTrue\r\n\r\n# Output 2:\r\n# \tFalse\r\n\r\n\r\n# Example Explanation\r\n# Explanation 1:\r\n# \tBoth the lines are parallel and share the same slope.\r\n\r\n# Explanation 2:\r\n# \tBoth the lines are not parallel as they have different slopes.\r\n\r\n\r\n# Time Complexity: O(1)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Alternate solution\r\n'''\r","votes":null},{"text":"\r\n\r\n    if line1[1][0] == line2[1][0] and line1[1][1] == line2[1][1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    a1, b1, c1 = line1\r\n    a2, b2, c2 = line2\r\n    if (a1 \/ b1) == (a2 \/ b2):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = (1, 1, 1)\r\n    line2 = (2, 2, 2)\r\n    line3 = (1, 1, 2)\r\n    line4 = (2, 1, 1)\r\n    line5 = (1, 2, 1)\r\n    line6 = (1, 1, -1)\r\n    line7 = (1, 1, 0)\r\n    line8 = (1, 0, 1)\r\n    line9 = (1, -1, 1)\r\n    line10 = (1, 1, -1)\r\n    line11 = (1, -1, -1)\r\n    line12 = (1, 0, 0)\r\n    line13 = (0, 1, 1)\r\n    line14 = (0, 1, -1)\r\n    line15 = (0, 0, 1)\r\n    line16 = (0, 0, -1)\r\n    line17 = (0, -1, 1)\r\n    line18 = (0, -1, -1)\r\n    line19 = (-1, 1, 1)\r\n    line20 = (-1, 1, -1)\r\n    line21 = (-1, 0, 1)\r\n    line22 = (-1, 0, -1)\r\n    line23 = (-1, -1, 1)\r\n    line24 = (-1, -1, -1)\r\n\r\n    print(\"Line 1 and Line 2 are parallel: \", parallel_lines(line1, line2))\r\n    print(\"Line 1 and Line 3 are parallel: \", parallel_lines(line1","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n\r\n    if x1 == x2:\r\n        x1 = y1\r\n        x2 = y2\r\n    if x3 == x4:\r\n        x3 = y3\r\n        x4 = y4\r\n\r\n    if x1 != x2 and x3 != x4:\r\n        m1 = (y2 - y1) \/ (x2 - x1)\r\n        m2 = (y4 - y3) \/ (x4 - x3)\r\n\r\n        if m1 == m2:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\nline1 = (0, 0, 1, 1)\r\nline2 = (1, 1, 2, 2)\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = (0, 0, 1, 1)\r\nline2 = (2, 2, 3, 3)\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = (0, 0, 1, 1)\r\nline2 = (2, 2, 3, 3)\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = (1, 1, 2, 2)\r\nline2 = (2, 1, 1, 2)\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = (1, 1, 2, 2)\r\nline2 = (2, 1, 1, 2)\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = (1, 1, 2, 2)\r\nline2 = (2, 1, 1, 2)\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = (0","votes":null},{"text":"\r\n    a1, b1, c1 = line1.split(' ')\r\n    a2, b2, c2 = line2.split(' ')\r\n\r\n    if a1 == a2:\r\n        if b1 != b2:\r\n            return False\r\n        if c1 != c2:\r\n            return False\r\n\r\n    if b1 == b2:\r\n        if a1 != a2:\r\n            return False\r\n        if c1 != c2:\r\n            return False\r\n\r\n    if c1 == c2:\r\n        if a1 != a2:\r\n            return False\r\n        if b1 != b2:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if line1[1]==line2[1] and line1[2]==line2[2]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,6]\r\nprint(parallel_lines(line1,line2))\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,7]\r\nprint(parallel_lines(line1,line2))\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,6]\r\nprint(parallel_lines(line1,line2))\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,6]\r\nprint(parallel_lines(line1,line2))\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,6]\r\nprint(parallel_lines(line1,line2))\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,6]\r\nprint(parallel_lines(line1,line2))\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,6]\r\nprint(parallel_lines(line1,line2))\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,6]\r\nprint(parallel_lines(line1,line2))\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,6]\r\nprint(parallel_lines(line1,line2))\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,6]\r\nprint(parallel_lines(line1,line2))\r\n\r\nline1 = [2,4,6]\r\nline2 = [1,4,6]\r\nprint(parallel_line","votes":null},{"text":"\r\n    if line1[1] == line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    import numpy as np\r\n    # First line\r\n    x1 = np.array(line1[0])\r\n    y1 = np.array(line1[1])\r\n    # Second line\r\n    x2 = np.array(line2[0])\r\n    y2 = np.array(line2[1])\r\n    # Difference of slope\r\n    m1 = (y1[-1] - y1[0])\/(x1[-1] - x1[0])\r\n    m2 = (y2[-1] - y2[0])\/(x2[-1] - x2[0])\r\n\r\n    # Check if the","votes":null},{"text":"\r\n    if line1[1] == line2[1] and line1[0] != line2[0]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nline1 = [1, 2]\r\nline2 = [1, 3]\r\n\r\nprint(parallel_lines(line1, line2))\r\n\r\n\r","votes":null},{"text":"\r\n    if (slope_between(line1, line2) == float('inf') or slope_between(line1, line2) == float('-inf')):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    print(line1.x1, line1.y1, line1.x2, line1.y2)\r\n    print(line2.x1, line2.y1, line2.x2, line2.y2)\r\n    if line1.slope == line2.slope:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nclass Line:\r\n   ","votes":null},{"text":"\r\n    # print('Line 1:', line1)\r\n    # print('Line 2:', line2)\r\n    if line1[0] == line1[2] and line2[0] == line2[2]:\r\n        print('The lines are parallel')\r\n    else:\r\n        print('The lines are NOT parallel')\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    # First check the slope of both the lines\r\n    # Then check if the slopes are equal or not\r\n    if line1[0][1]-line1[1][1] == line2[0][1]-line2[1][1] and line1[0][0]-line1[1][0] == line2[0][0]-line2[1][0]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = [[-1, 2], [5, 3]]\r\n    line2 = [[-1, -2], [5, -3]]\r\n    line3 = [[-1, -2], [5, 3]]\r\n    line4 = [[-1, 2], [5, -3]]\r\n\r\n    print(parallel_lines(line1, line2))\r\n    print(parallel_lines(line1, line3))\r\n    print(parallel_lines(line1, line4))\r\n\r\n\r\n\"\"\"\r\nTest cases\r\n\r\nCase 1:\r\n\r\nInput:\r\n    Line 1: [[-1, 2], [5, 3]]\r\n    Line 2: [[-1, -2], [5, -3]]\r\n\r\nOutput:\r\n    True\r\n\r\nCase 2:\r\n\r\nInput:\r\n    Line 1: [[-1, 2], [5, 3]]\r\n    Line 2: [[-1, -2], [5, 3]]\r\n\r\nOutput:\r\n    False\r\n\r\nCase 3:\r\n\r\nInput:\r\n    Line 1: [[-1, 2], [5, 3]]\r\n    Line 2: [[-1,","votes":null},{"text":"\r\n    #print(\"line1: \",line1)\r\n    #print(\"line2: \",line2)\r\n    #print(\"line1: \",line1)\r\n    #print(\"line2: \",line2)\r\n    a1, b1, c1 = line1\r\n    a2, b2, c2 = line2\r\n    print(\"a1: \",a1, \"b1: \",b1, \"c1: \",c1)\r\n    print(\"a2: \",a2, \"b2: \",b2, \"c2: \",c2)\r\n    if b1 == 0:\r\n        if a2 == 0:\r\n            print('Parallel Lines')\r\n        else:\r\n            print('Not Parallel Lines')\r\n    elif b2 == 0:\r\n        if a1 == 0:\r\n            print('Parallel Lines')\r\n        else:\r\n            print('Not Parallel Lines')\r\n    elif (a2*b1-a1*b2) != 0:\r\n        print('Not Parallel Lines')\r\n    else:\r\n        print('Parallel Lines')\r\n    return\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[0][0] == line2[0][0] and line1[0][1] == line2[0][1]:\r\n        return True\r\n    elif line1[1][0] == line2[1][0] and line1[1][1] == line2[1][1]:\r\n        return True\r\n    elif line1[0][0] == line2[1][0] and line1[0][1] == line2[1][1]:\r\n        return True\r\n    elif line1[1][0] == line2[0][0] and line1[1][1] == line2[0][1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(parallel_lines((4, 4), (3, 3)))\r\nprint(parallel_lines((4, 4), (3, 4)))\r\nprint(parallel_lines((4, 4), (3, 5)))\r\nprint(parallel_lines((4, 4), (3, 6)))\r\nprint(parallel_lines((4, 4), (3, 7)))\r\nprint(parallel_lines((4, 4), (3, 8)))\r\nprint(parallel_lines((4, 4), (3, 9)))\r","votes":null},{"text":"\r\n    x11, y11, x12, y12 = line1\r\n    x21, y21, x22, y22 = line2\r\n    slope1 = (y12 - y11)\/(x12 - x11)\r\n    slope2 = (y22 - y21)\/(x22 - x21)\r\n    return slope1 == slope2\r\n\r","votes":null},{"text":"\r\n\r\n    # Store the slope of the first line.\r\n    m1 = (line1[1][1] - line1[0][1]) \/ (line1[1][0] - line1[0][0])\r\n\r\n    # Store the slope of the second line.\r\n    m2 = (line2[1][1] - line2[0][1]) \/ (line2[1][0] - line2[0][0])\r\n\r\n    # If the slopes are equal, then the lines are parallel.\r\n    if m1 == m2:\r\n        return True\r\n\r\n    return False\r\n\r\n\r\nprint(parallel_lines([[0, 0], [1, 1]], [[0, 1], [1, 2]]))\r\nprint(parallel_lines([[0, 0], [1, 1]], [[1, 1], [2, 2]]))\r\nprint(parallel_lines([[0, 0], [1, 1]], [[0, 0], [1, 1]]))\r\nprint(parallel_lines([[0, 0], [1, 1]], [[0, 2], [1, 3]]))\r\nprint(parallel_lines([[0, 0], [1, 1]], [[0, 2], [1, 3]]))\r\nprint(parallel_lines([[0, 0], [1, 1]], [[0, 2], [1, 0]]))\r\nprint(parallel_lines([[0, 0], [1, 1]], [[1, 0], [0, 1]]))\r\nprint(parallel_lines([[0, 0], [1, 1]], [[1, 0], [0, 0]]))\r\nprint(parallel_lines([[0, 0], [1, 1]], [[1, 0], [0, 2]]))\r\nprint(parallel_lines([[0, 0], [1, 1]], [[1, 2], [0, 3]]))","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    p1, q1, p2, q2 = line2\r\n\r\n    if x1 == x2:\r\n        slope1 = slope2 = \"Infinity\"\r\n    elif x1 == x2:\r\n        slope1 = slope2 = \"Infinity\"\r\n    else:\r\n        slope1 = (y1 - y2) \/ (x1 - x2)\r\n        slope2 = (q1 - q2) \/ (p1 - p2)\r\n\r\n    if slope1 == slope2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver Code\r\nline1 = (1, 1, 10, 10)\r\nline2 = (1, 10, 10, 1)\r\n\r\nif parallel_lines(line1, line2):\r\n    print(\"The lines are parallel\")\r\nelse:\r\n    print(\"The lines are not parallel\")\r\n# Output: The lines are parallel\r\n\r\n\r\n# Using NumPy\r\n\r\nimport numpy as np\r\n\r\n\r","votes":null},{"text":"\r\n    #store the points of the line\r\n    x1, y1 = line1[0]\r\n    x2, y2 = line1[1]\r\n    x3, y3 = line2[0]\r\n    x4, y4 = line2[1]\r\n    \r\n    #check slope of both lines\r\n    slope1 = (y2-y1)\/(x2-x1)\r\n    slope2 = (y4-y3)\/(x4-x3)\r\n    \r\n    #check if slope is equal\r\n    if slope1 == slope2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n\r\n\r\n#Test Data\r\nprint(parallel_lines([(1, 1), (2, 2)], [(1, 2), (2, 3)])) #True\r\nprint(parallel_lines([(2, 2), (2, 3)], [(1, 1), (0, 0)])) #False\r\nprint(parallel_lines([(1, 1), (2, 2)], [(3, 3), (4, 4)])) #False\r\nprint(parallel_lines([(1, 0), (2, 0)], [(0, 1), (2, 1)])) #True\r\nprint(parallel_lines([(1, 0), (2, 0)], [(3, 1), (4, 1)])) #False\r\nprint(parallel_lines([(1, 0), (2, 0)], [(3, 0), (4, 0)])) #True\r\nprint(parallel_lines([(1, 1), (1, 2)], [(1, 2), (1, 3)])) #True\r\nprint(parallel_lines([(1, 1), (1, 2)], [(1, 3), (1, 4)])) #False\r\nprint(parallel_lines([(1, 1), (1, 2)], [(1, ","votes":null},{"text":"\r\n    a1 = line1[0]\r\n    a2 = line2[0]\r\n    b1 = line1[1]\r\n    b2 = line2[1]\r\n    if (a1 == a2):\r\n        return True\r\n    elif (b1 == b2):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    try:\r\n        x1, y1, x2, y2 = line1.split(',')\r\n        x1 = float(x1)\r\n        y1 = float(y1)\r\n        x2 = float(x2)\r\n        y2 = float(y2)\r\n        x3, y3, x4, y4 = line2.split(',')\r\n        x3 = float(x3)\r\n        y3 = float(y3)\r\n        x4 = float(x4)\r\n        y4 = float(y4)\r\n        # Calculate the slope of the first line.\r\n        m1 = (y2-y1) \/ (x2-x1)\r\n        # Calculate the slope of the second line.\r\n        m2 = (y4-y3) \/ (x4-x3)\r\n        # Check if the slope of both the lines are same.\r\n        if m1 == m2:\r\n            return True\r\n        else:\r\n            return False\r\n    except:\r\n        print('You have entered an invalid input!')\r\n\r","votes":null},{"text":"\r\n\r\n    if line1[0][0] == line1[1][0]:\r\n        if line2[0][0] == line2[1][0]:\r\n            return True\r\n        else:\r\n            return False\r\n    if line1[0][1] == line1[1][1]:\r\n        if line2[0][1] == line2[1][1]:\r\n            return True\r\n        else:\r\n            return False\r\n    if line1[0][0] == line1[1][1]:\r\n        if line2[0][0] == line2[1][1]:\r\n            return True\r\n        else:\r\n            return False\r\n    if line1[0][1] == line1[1][0]:\r\n        if line2[0][1] == line2[1][0]:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r","votes":null},{"text":"\r\n    if (line1[1] - line1[0]) == (line2[1] - line2[0]):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nline1 = [0, 3]\r\nline2 = [1, 4]\r\nprint(parallel_lines(line1, line2))\r\nline1 = [0, 3]\r\nline2 = [1, 2]\r\nprint(parallel_lines(line1, line2))\r\nline1 = [0, 1]\r\nline2 = [1, 2]\r\nprint(parallel_lines(line1, line2))\r\nline1 = [0, 1]\r\nline2 = [1, 0]\r\nprint(parallel_lines(line1, line2))\r\nline1 = [0, 1]\r\nline2 = [","votes":null},{"text":"\r\n    x1 = line1[0]\r\n    y1 = line1[1]\r\n    x2 = line1[2]\r\n    y2 = line1[3]\r\n\r\n    x3 = line2[0]\r\n    y3 = line2[1]\r\n    x4 = line2[2]\r\n    y4 = line2[3]\r\n\r\n    if (x3 - x1) * (y4 - y1) == (x4 - x1) * (y3 - y1):\r\n        print(\"The two lines are parallel.\")\r\n    else:\r\n        print(\"The two lines are not parallel.\")\r\n\r\n\r","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n\r\n    slope1 = (y2-y1)\/(x2-x1)\r\n    slope2 = (y4-y3)\/(x4-x3)\r\n\r\n    if slope1 == slope2:\r\n        return \"Parallel\"\r\n    else:\r\n        return \"Not parallel\"\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = [1, 1, 2, 2]\r\n    line2 = [1, 3, 2, 4]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 2, 2]\r\n    line2 = [1, 1, 2, 2]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 2, 2]\r\n    line2 = [1, 1, 4, 4]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 2, 2]\r\n    line2 = [1, 1, 4, 5]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 2, 2]\r\n    line2 = [1, 1, 2, 3]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 2, 2]\r\n    line2 = [1, 1, 3, 4]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 2, 2]\r\n    line2 = [1, 1, 3, 3]\r\n    print","votes":null},{"text":"\r\n    \r\n    # Given two line equations\r\n    # line1 = y1 = m1x + c1\r\n    # line2 = y2 = m2x + c2\r\n    # Check if two lines are parallel\r\n    # m1 = m2\r\n    # c1 = c2\r\n    # if m1 != m2:\r\n    #     print(\"Lines are not parallel.\")\r\n    # else:\r\n    #     print(\"Lines are parallel.\")\r\n    \r\n    # Using list\r\n    # line1 = list(map(int, input(\"Enter first line: \").split()))\r\n    # line2 = list(map(int, input(\"Enter second line: \").split()))\r\n    \r\n    # Using list comprehension\r\n    line1 = [int(i) for i in input(\"Enter first line: \").split()]\r\n    line2 = [int(i) for i in input(\"Enter second line: \").split()]\r\n    \r\n    m1 = line1[0]\r\n    m2 = line2[0]\r\n    c1 = line1[1]\r\n    c2 = line2[1]\r\n    \r\n    if m1 == m2 and c1 == c2:\r\n        print(\"Lines are parallel.\")\r\n    else:\r\n        print(\"Lines are not parallel.\")\r\n\r","votes":null},{"text":"\r\n    import numpy as np\r\n    line1 = np.asarray(line1)\r\n    line2 = np.asarray(line2)\r\n    if np.cross(line1, line2).all() == 0:\r\n        return True\r\n    return False\r\n\r\n\r\n# ----------\r\n# Test Cases\r\n# ----------\r\nprint(parallel_lines([0, 0, 1, 0, 1], [0, 1, 1, 1, 0]))\r\nprint(parallel_lines([0, 0, 0, 0, 0], [0, 0, 1, 0, 0]))\r\nprint(parallel_lines([0, 0, 1, 0, 1], [1, 1, 1, 0, 0]))\r\nprint(parallel_lines([1, 0, 1, 0, 1], [0, 1, 1, 0, 0]))\r\nprint(parallel_lines([0, 0, 1, 0, 1], [0, 0, 0, 0, 0]))\r\n\r\n\r\n# -------------\r\n# Sample Output\r\n# -------------\r\n# True\r\n# False\r\n# False\r\n# False\r\n# True\r\n#","votes":null},{"text":"\r\n    # line 1: y = m1x + c1 and line 2: y = m2x + c2\r\n    # m1 and m2 are slope of line 1 and line 2 respectively\r\n    # c1 and c2 are y intercept of line 1 and line 2 respectively\r\n    # m1 and m2 are same then line1 and line2 are parallel\r\n    # m1 and m2 are not same then line1 and line2 are not parallel\r\n\r\n    # slope of line1\r\n    m1 = line1[0]\r\n    # slope of line2\r\n    m2 = line2[0]\r\n\r\n    # if slope of line1 and line2 is same then they are parallel\r\n    if (m1 == m2):\r\n        return True\r\n\r\n    # if slope of line1 and line2 is not same then they are not parallel\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[1][0] - line1[0][0] == 0:\r\n        m1 = None\r\n        c1 = line1[0][0]\r\n    else:\r\n        m1 = (line1[1][1] - line1[0][1]) \/ (line1[1][0] - line1[0][0])\r\n        c1 = line1[1][1] - (m1 * line1[1][0])\r\n    if line2[1][0] - line2[0][0] == 0:\r\n        m2 = None\r\n        c2 = line2[0][0]\r\n    else:\r\n        m2 = (line2[1][1] - line2[0][1]) \/ (line2[1][0] - line2[0][0])\r\n        c2 = line2[1][1] - (m2 * line2[1][0])\r\n\r\n    if m1 == m2 and c1 == c2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # 1. Get the slope of the lines\r\n    # 2. Check whether the slope is equal to the slope of the other line\r\n    # 3. If it is, return True, else return False\r\n\r\n    # Check if the lines are parallel\r\n    if line1.getSlope() == line2.getSlope():\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Write the implementation of the function getSlope\r","votes":null},{"text":"\r\n\r\n    # check if the lines are parallel\r\n    if line1[1][0] == line2[1][0] or line1[1][1] == line2[1][1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nline1 = [(2, 3), (3, 4)]\r\nline2 = [(2, 3), (3, 4)]\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = [(2, 3), (3, 4)]\r\nline2 = [(1, 3), (3, 4)]\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = [(2, 3), (3, 4)]\r\nline2 = [(1, 3), (2, 4)]\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = [(2, 3), (3, 4)]\r\nline2 = [(1, 3), (5, 6)]\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = [(2, 3), (3, 4)]\r\nline2 = [(2, 5), (3, 6)]\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = [(2, 3), (3, 4)]\r\nline2 = [(2, 3), (4, 4)]\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = [(2, 3), (3, 4)]\r\nline2 = [(2, 3), (2, 4)]\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = [(2, 3), (3, 4)]\r\nline2 = [(2, 3), (3, 3)]\r\nprint(parallel_lines(line1, line2))\r\n\r\nline1 = [(2, 3), (3","votes":null},{"text":"\r\n    if line1[1] == line2[1]:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = [1, 1, 0, 0]\r\n    line2 = [1, 1, 0, 0]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1, 0, 0]\r\n    line2 = [1, 2, 0, 0]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1, 0, 0]\r\n    line2 = [0, 0, 0, 0]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1, 0, 0]\r\n    line2 = [0, 1, 0, 0]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1, 0, 0]\r\n    line2 = [0, 0, 1, 0]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1, 0, 0]\r\n    line2 = [0, 0, 0, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1, 0, 0]\r\n    line2 = [1, 1, 1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1, 0, 0]\r\n    line2 = [1, 1, 0, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 1, 0, 0]\r\n    line2 = [1, 1,","votes":null},{"text":"\r\n    if line1.slope() == line2.slope():\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nline1 = Line(Point(0, 0), Point(1, 1))\r\nline2 = Line(Point(1, 1), Point(2, 2))\r\nprint(parallel_lines(line1, line2))\r\n# True\r\n\r\nline1 = Line(Point(0, 0), Point(1, 1))\r\nline2 = Line(Point(1, 1), Point(2, 0))\r\nprint(parallel_lines(line1, line2))\r\n# False\r\n\r\nline1 = Line(Point(0, 0), Point(1, 1))\r\nline2 = Line(Point(2, 2), Point(3, 3))\r\nprint(parallel_lines(line1, line2))\r\n# True\r\n\r\nline1 = Line(Point(0, 0), Point(1, 1))\r\nline2 = Line(Point(2, 2), Point(3, 0))\r\nprint(parallel_lines(line1, line2))\r\n# False\r\n\r\nline1 = Line(Point(0, 0), Point(1, 1))\r\nline2 = Line(Point(0, 0), Point(1, 1))\r\nprint(parallel_lines(line1, line2))\r\n# True\r\n\r\nline1 = Line(Point(0, 0), Point(1, 1))\r\nline2 = Line(Point(1, 0), Point(2, 1))\r\nprint(parallel_lines(line1, line2))\r\n# False\r\n\r\n\r","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n    \r\n    if (x1-x2) * (y3-y4) == (y1-y2) * (x3-x4):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = (1, 2, 3, 4)\r\n    line2 = (2, 3, 4, 5)\r\n    line3 = (2, 3, 4, 6)\r\n    print(parallel_lines(line1, line2))\r\n    print(parallel_lines(line1, line3))\r\n\r\n    # Output:\r\n    # True\r\n    # False\r\n\r\n    # Testing for different data types\r\n    print(parallel_lines(1, 2))\r\n    print(parallel_lines([1, 2], [2, 3]))\r\n    print(parallel_lines((1, 2), (2, 3)))\r\n\r\n    # Output:\r\n    # TypeError\r\n    # TypeError\r\n    # TypeError\r\n\r\n    # Testing for invalid inputs\r\n    print(parallel_lines(\"line1\", \"line2\"))\r\n    print(parallel_lines(\"line1\", 1))\r\n    print(parallel_lines([1, 2], 1))\r\n    print(parallel_lines((1, 2), (2, 3, 4)))\r\n\r\n    # Output:\r\n    # TypeError\r\n    # TypeError\r\n    # TypeError\r\n    # TypeError\r\n\r\n    # Testing for invalid inputs\r\n    print(parallel_lines((1, 2), (2, 3)))\r\n    print(parallel_lines((1, 2), (1, 1)))\r\n    print(parallel_lines((1, 2), (2, 1)))\r\n\r\n    # Output","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    if line1.a == line2.a:\r\n        if line1.b == line2.b:\r\n            return True\r\n        return False\r\n    return False\r\n\r\n\r\nclass Line(object):\r\n   ","votes":null},{"text":"\r\n\r\n    if (line1[0] == line2[0] and line1[1] == line2[1]) or (line1[0] == line2[0] and line1[1] == line2[3]) or (\r\n            line1[0] == line2[2] and line1[1] == line2[1]) or (line1[0] == line2[2] and line1[1] == line2[3]) or (\r\n            line1[2] == line2[0] and line1[3] == line2[1]) or (\r\n            line1[2] == line2[0] and line1[3] == line2[3]) or (line1[2] == line2[2] and line1[3] == line2[1]) or (\r\n            line1[2] == line2[2] and line1[3] == line2[3]):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    a1, b1, c1 = line1\r\n    a2, b2, c2 = line2\r\n\r\n    if (a1 == 0) and (a2 == 0):\r\n        if (b1 == 0) and (b2 == 0):\r\n            return 'YES'\r\n        else:\r\n            return 'NO'\r\n    elif (a1 == 0) and (a2 != 0):\r\n        return 'NO'\r\n    elif (a1 != 0) and (a2 == 0):\r\n        return 'NO'\r\n    elif (a1 != 0) and (a2 != 0):\r\n        return 'YES' if (a1 \/ a2) == (b1 \/ b2) and (a1 \/ a2) == (c1 \/ c2) else 'NO'\r\n\r\n\r\nprint(parallel_lines((0, 1, 0), (1, 0, 0)))\r\nprint(parallel_lines((0, 1, 0), (0, 0, 1)))\r\nprint(parallel_lines((1, 0, 0), (0, 0, 0)))\r\nprint(parallel_lines((1, 0, 0), (0, 0, 0)))\r\nprint(parallel_lines((0, 0, 0), (0, 0, 0)))\r\nprint(parallel_lines((0, 1, 0), (0, 1, 0)))\r\nprint(parallel_lines((0, 1, 0), (0, 1, 1)))\r\nprint(parallel_lines((0, 1, 0), (1, 1, 0)))\r\nprint(parallel_lines((0, 1, 0), (1, 0, 1)))\r\nprint(parallel_lines((0, 1, 0), (1, 1, 1)))\r\nprint(parallel_lines((1, 0, 0), (0, 1,","votes":null},{"text":"\r\n    if (line1.slope() == line2.slope()):\r\n        print(\"The lines are parallel\")\r\n    else:\r\n        print(\"The lines are not parallel\")\r\n\r\n\r","votes":null},{"text":"\r\n    x1, y1 = line1\r\n    x2, y2 = line2\r\n    if x1 == x2:\r\n        if y1 == y2:\r\n            return True\r\n        else:\r\n            return False\r\n    elif y1 == y2:\r\n        if x1 == x2:\r\n            return True\r\n        else:\r\n            return False\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = (2, 3)\r\n    line2 = (2, 4)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (2, 3)\r\n    line2 = (3, 3)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (2, 3)\r\n    line2 = (2, 3)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (2, 3)\r\n    line2 = (3, 2)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (2, 3)\r\n    line2 = (3, 4)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, 2)\r\n    line2 = (2, 3)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, 2)\r\n    line2 = (2, 3)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, 2)\r\n    line2 = (2, 3)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, 2)\r\n    line2 = (2, 3)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (0, ","votes":null},{"text":"\r\n    \r\n    # Check if the lines are parallel or not\r\n    if line1[0] == line2[0]:\r\n        if line1[1] == line2[1]:\r\n            print(\"These two lines are parallel.\")\r\n        else:\r\n            print(\"These two lines are not parallel.\")\r\n    else:\r\n        print(\"These two lines are not parallel.\")\r\n\r\n# Test the function with the following test cases.\r\n# First line: (1, 2), (2, 3)\r\n# Second line: (1, 4), (2, 5)\r\n# First line: (1, 2), (2, 3)\r\n# Second line: (1, 3), (2, 4)\r\n# First line: (1, 2), (2, 3)\r\n# Second line: (1, 3), (2, 4)\r\n# First line: (2, 3), (2, 4)\r\n# Second line: (1, 4), (2, 5)\r\n# First line: (2, 3), (2, 4)\r\n# Second line: (1, 4), (2, 5)\r\n# First line: (1, 2), (2, 3)\r\n# Second line: (1, 4), (2, 5)\r\n# First line: (1, 2), (3, 4)\r\n# Second line: (1, 4), (2, 5)\r\n# First line: (3, 4), (2, 5)\r\n# Second line: (1, 4), (2, 5)\r\n\r\n# Expected Output:\r\n# These two lines are parallel.\r\n# These two lines are parallel.\r\n# These two lines are not parallel.\r\n# These two lines are not parallel.\r\n# These two lines are not parallel.\r\n# These two lines are not parallel.\r\n# These two lines are parallel.\r\n# These two lines are not parallel.\r\n# These two lines are parallel.\r\n# These two lines are not parallel.\r\n# These two lines ar","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n\r\n    if ((y2 - y1) * (x4 - x3) == (y4 - y3) * (x2 - x1)) or (\r\n        (x1, y1, x2, y2) == (x3, y3, x4, y4)\r\n    ):\r\n        return True\r\n\r\n    return False\r\n\r\n\r\nline1 = (1, 1, 3, 3)\r\nline2 = (4, 4, 5, 5)\r\n\r\nprint(parallel_lines(line1, line2))\r\n\r\n# Output: True\r\n\r\nline1 = (1, 1, 3, 3)\r\nline2 = (4, 4, 5, 6)\r\n\r\nprint(parallel_lines(line1, line2))\r\n\r\n# Output: False\r\n\r\nline1 = (1, 1, 3, 3)\r\nline2 = (1, 1, 3, 3)\r\n\r\nprint(parallel_lines(line1, line2))\r\n\r\n# Output: True\r\n\r\nline1 = (1, 1, 3, 3)\r\nline2 = (3, 3, 1, 1)\r\n\r\nprint(parallel_lines(line1, line2))\r\n\r\n# Output: True\r\n\r\nline1 = (1, 1, 3, 3)\r\nline2 = (3, 3, 1, 1)\r\n\r\nprint(parallel_lines(line1, line2))\r\n\r\n# Output: True\r\n\r\nline1 = (1, 1, 3, 3)\r\nline2 = (3, 3, 1, 1)\r\n\r\nprint(parallel_lines(line1, line2))\r\n\r\n# Output: True\r\n\r\nline1 = (1, ","votes":null},{"text":"\r\n\r\n    # get x1,y1,x2,y2 from line1\r\n    x1, y1, x2, y2 = line1\r\n\r\n    # get x3,y3,x4,y4 from line2\r\n    x3, y3, x4, y4 = line2\r\n\r\n    # check if slope = 0\r\n    if (x2 - x1) == 0:\r\n        slope1 = 9999999\r\n    else:\r\n        slope1 = (y2 - y1) \/ (x2 - x1)\r\n\r\n    if (x4 - x3) == 0:\r\n        slope2 = 9999999\r\n    else:\r\n        slope2 = (y4 - y3) \/ (x4 - x3)\r\n\r\n    # check if slope is same\r\n    if slope1 == slope2:\r\n        print(\"Line is parallel\")\r\n    else:\r\n        print(\"Line is not parallel\")\r\n\r\n\r\n# driver code\r\nif __name__ == \"__main__\":\r\n    line1 = (1, 2, 3, 4)\r\n    line2 = (3, 4, 5, 6)\r\n    parallel_lines(line1, line2)\r\n\r\n    line1 = (1, 2, 4, 2)\r\n    line2 = (3, 4, 5, 6)\r\n    parallel_lines(line1, line2)\r\n\r\n    line1 = (1, 2, 4, 2)\r\n    line2 = (3, 4, 1, 2)\r\n    parallel_lines(line1, line2)\r\n\r\n    line1 = (1, 2, 4, 2)\r\n    line2 = (3, 4, 3, 2)\r\n    parallel_lines(line1, line2)\r\n\r\n    line1 = (1, 2, 4, 2)\r\n    line2 = ","votes":null},{"text":"\r\n\r\n    # check if the two lines are parallel\r\n    # if the two lines are parallel, return 'True'\r\n    # if the two lines are not parallel, return 'False'\r\n    \r\n    # first line equation\r\n    x1 = line1[0][0]\r\n    y1 = line1[0][1]\r\n    x2 = line1[1][0]\r\n    y2 = line1[1][1]\r\n    m1 = (y2-y1)\/(x2-x1)\r\n    c1 = y1 - m1*x1\r\n    \r\n    # second line equation\r\n    x3 = line2[0][0]\r\n    y3 = line2[0][1]\r\n    x4 = line2[1][0]\r\n    y4 = line2[1][1]\r\n    m2 = (y4-y3)\/(x4-x3)\r\n    c2 = y3 - m2*x3\r\n    \r\n    # if the two lines are parallel, the slopes should be equal\r\n    if m1 == m2:\r\n        print('The lines are parallel.')\r\n    else:\r\n        print('The lines are not parallel.')\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    # x1,y1,x2,y2\r\n    if (line1[0] != line2[0]) and (line1[1] != line2[1]) and (line1[2] != line2[2]) and (line1[3] != line2[3]):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = (1, 2, 3, 4)\r\n    line2 = (1, 4, 3, 2)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, 2, 3, 4)\r\n    line2 = (1, 4, 3, 2)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, 2, 3, 4)\r\n    line2 = (2, 5, 7, 6)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, 2, 3, 4)\r\n    line2 = (1, 2, 5, 6)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, 2, 3, 4)\r\n    line2 = (1, 2, 3, 4)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, 2, 3, 4)\r\n    line2 = (1, 2, 3, 4)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, 2, 3, 4)\r\n    line2 = (1, 2, 3, 4)\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = (1, ","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    if line1 == line2:\r\n        return True\r\n\r\n    elif line1[0][0] == line2[0][0] and line1[0][1] == line2[0][1] and line1[1][0] == line2[1][0] and line1[1][1] == line2[1][1]:\r\n        return True\r\n\r\n    elif line1[0][0] == line2[1][0] and line1[0][1] == line2[1][1] and line1[1][0] == line2[0][0] and line1[1][1] == line2[0][1]:\r\n        return True\r\n\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if (line1[1][0] - line1[0][0]) * (line2[1][1] - line2[0][1]) == (line1[1][1] - line1[0][1]) * (line2[1][0] - line2[0][0]):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n    \r","votes":null},{"text":"\r\n    if (line1[1] - line1[0]) == (line2[1] - line2[0]):\r\n        return True\r\n    elif (line1[1] - line1[0]) == -(line2[1] - line2[0]):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Test Cases\r\nprint(parallel_lines([1, 1], [2, 2]))\r\nprint(parallel_lines([1, 1], [2, 1]))\r\nprint(parallel_lines([1, 1], [1, 2]))\r\nprint(parallel_lines([1, 1], [2, 3]))\r\nprint(parallel_lines([1, 1], [1, 3]))\r\nprint(parallel_lines([1, 1], [2, 0]))\r\nprint(parallel_lines([1, 1], [1, 0]))\r\nprint(parallel_lines([1, 1], [2, 2.0000000000000004]))\r\nprint(parallel_lines([1, 1], [2, 1.9999999999999996]))\r\n\r\n\r\n# Reference: w3resource\r\n\r\n# Test Cases\r\nprint(parallel_lines([1, 1, 0], [2, 2, 0]))\r\nprint(parallel_lines([1, 1, 0], [2, 1, 0]))\r\nprint(parallel_lines([1, 1, 0], [1, 2, 0]))\r\nprint(parallel_lines([1, 1, 0], [2, 3, 0]))\r\nprint(parallel_lines([1, 1, 0], [1, 3, 0]))\r\nprint(parallel_lines([1, 1, 0], [2, 0, 0]))\r\nprint(parallel_lines([1, 1, ","votes":null},{"text":"\r\n\r\n    if line1[0] == line2[0] and line1[1] == line2[1]:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n    x_diff = x1 - x2\r\n    y_diff = y1 - y2\r\n    if x1 == x2 and x3 == x4:\r\n        return True\r\n    elif x_diff == 0 and y_diff == 0:\r\n        return True\r\n    elif (x1 - x3) \/ x_diff == (y1 - y3) \/ y_diff:\r\n        return True\r\n    elif (x2 - x4) \/ x_diff == (y2 - y4) \/ y_diff:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # print(line1.__dict__)\r\n    # print(line2.__dict__)\r\n    if line1.slope() == line2.slope() and line1.y_intercept() != line2.y_intercept():\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nclass Line:\r\n   ","votes":null},{"text":"\r\n    # Write your code here\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1, line2 = input().split()\r\n    print(parallel_lines(line1, line2))\r\n\r\n\r\n\r\n# Example 1:\r\n# Input:\r\n# 0 1\r\n# 1 3\r\n\r\n# Output:\r\n# True\r\n\r\n# Example 2:\r\n# Input:\r\n# 0 1\r\n# 2 3\r\n\r\n# Output:\r\n# False\r\n# =============================================================================\r\n# Write a python function to check whether two given lines are parallel or not.\r\n\r\n# Example 1:\r\n# Input:\r\n# 0 1\r\n# 1 3\r\n\r\n# Output:\r\n# True\r\n\r\n# Example 2:\r\n# Input:\r\n# 0 1\r\n# 2 3\r\n\r\n# Output:\r\n# False\r\n\r\n# =============================================================================\r\n# code by TSG405\r\n\r\nimport math\r\n\r","votes":null},{"text":"\r\n    # 1. Get slope\r\n    slope1 = (line1[1] - line1[0])[1] \/ (line1[1] - line1[0])[0]\r\n    slope2 = (line2[1] - line2[0])[1] \/ (line2[1] - line2[0])[0]\r\n    # 2. Compare slope\r\n    if slope1 == slope2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nline1 = [[0, 0], [3, 3]]\r\nline2 = [[0, 0], [3, 3]]\r\n\r\nprint(parallel_lines(line1, line2))\r\n\r\n\r","votes":null},{"text":"\r\n    # https:\/\/www.programiz.com\/python-programming\/examples\/parallel-lines\r\n\r\n    # Given two lines in the form (x1, y1, x2, y2) and (x3, y3, x4, y4)\r\n    # Find the slope (m1)\r\n    m1 = (line1[3] - line1[1]) \/ (line1[2] - line1[0])\r\n    # Find the slope (m2)\r\n    m2 = (line2[3] - line2[1]) \/ (line2[2] - line2[0])\r\n\r\n    if m1 == m2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[0][0] != line1[1][0]:\r\n        x1 = line1[0][0]\r\n        y1 = line1[0][1]\r\n        x2 = line1[1][0]\r\n        y2 = line1[1][1]\r\n        m1 = (y2 - y1) \/ (x2 - x1)\r\n        c1 = y1 - m1 * x1\r\n    else:\r\n        x1 = line1[0][0]\r\n        y1 = line1[0][1]\r\n        m1 = 1\r\n        c1 = -x1\r\n    if line2[0][0] != line2[1][0]:\r\n        x1 = line2[0][0]\r\n        y1 = line2[0][1]\r\n        x2 = line2[1][0]\r\n        y2 = line2[1][1]\r\n        m2 = (y2 - y1) \/ (x2 - x1)\r\n        c2 = y1 - m2 * x1\r\n    else:\r\n        x1 = line2[0][0]\r\n        y1 = line2[0][1]\r\n        m2 = 1\r\n        c2 = -x1\r\n    if m1 == m2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    line1 = [[1, 2], [2, 3]]\r\n    line2 = [[1, 1], [2, 3]]\r\n    x1 = line1[0][0]\r\n    y1 = line1[0][1]\r\n    x2 = line1[1][0]\r\n    y2 = line1[1][1]\r\n    x3 = line2[0][0]\r\n    y3 = line2[0][1]\r\n    x4 = line2[1][0]\r\n  ","votes":null}],"time":{"count":5.0,"avg":113996.084,"std":31165.6352665066,"cov":0.2733921568}}
{"id":526,"question":"def capitalize_first_last_letters(str1):\r\n    \"\"\"Write a python function to capitalize first and last letters of each word of a given string.\"\"\"","answers":[{"text":"\r\n    return ' '.join([word[0].upper() + word[1:-1].lower() + word[-1].upper() for word in str1.split()])\r\n\r\n\r","votes":66722.532},{"text":"\r\n    \r\n    # code goes here\r\n    str1 = str1.split()\r\n    str1 = [i[0].upper() + i[1:] for i in str1]\r\n    str1 = ' '.join(str1)\r\n    str1 = str1[0].upper() + str1[1:]\r\n    str1 = str1[:-1] + str1[-1].upper()\r\n    return str1\r\n\r\nprint(capitalize_first_last_letters(\"hello world\"))\r\n\r\n\r","votes":97599.856},{"text":"\r\n    words = str1.split(' ')\r\n    cap_words = []\r\n    for word in words:\r\n        first = word[0]\r\n        last = word[-1]\r\n        cap_first = first.upper()\r\n        cap_last = last.upper()\r\n        cap_words.append(cap_first + word[1:-1] + cap_last)\r\n\r\n    return ' '.join(cap_words)\r\n\r\n\r\nprint(capitalize_first_last_letters('i am learning python'))\r\nprint(capitalize_first_last_letters('this is a test'))\r\nprint(capitalize_first_last_letters('programming is fun'))\r\n\r\n\r\n# 21\r\n\"\"\"Write a Python function to reverse a string. The input string may contain lowercase letters, uppercase letters and special characters.\r\nSample Output:\r\n\r\nInput:\r\n\r\nRam is a good boy!\r\n\r\nOutput:\r\n\r\n!oyb ogdo a miraR\"\"\"\r\n\r\n\r","votes":106583.408},{"text":"\r\n\r\n    # code goes here\r\n    str2 = \"\"\r\n    # str1 = \"hello world\"\r\n    for i in range(len(str1)):\r\n        if i == 0 or i == len(str1) - 1:\r\n            str2 += str1[i].upper()\r\n        else:\r\n            str2 += str1[i]\r\n    return str2\r\n\r\n\r\n# keep this function call here\r\n# to test your code quickly\r\nprint(capitalize_first_last_letters(\"hello world\"))\r\nprint(capitalize_first_last_letters(\"hello\"))\r\nprint(capitalize_first_last_letters(\"\"))\r\nprint(capitalize_first_last_letters(\"this is a test\"))\r\nprint(capitalize_first_last_letters(\"one two three\"))\r\n\r\n\r\n#","votes":112078.64},{"text":"\r\n    \r\n    # your code goes here\r\n    str1 = str1.split(' ')\r\n    str1 = [word[0].upper() + word[1:].lower() for word in str1]\r\n    str1 = ' '.join(str1)\r\n    str1 = str1[0].upper() + str1[1:]\r\n    str1 = str1[:-1] + str1[-1].upper()\r\n    return str1\r\nif __name__ == '__main__':\r\n    str1 = input()\r\n    print(capitalize_first_last_letters(str1))\r\n\r\n\r\n# Q. 13\r\n# Write a python program to create a dictionary that has the words of a given string as keys and their lengths as values.\r\n\r","votes":117070.852},{"text":"\r\n    return ' '.join(str1[0].upper() + str1[1:len(str1) - 1] + str1[len(str1) - 1].upper() for str1 in str1.split())\r\n\r\n\r","votes":128108.832},{"text":"\r\n    words = str1.split(\" \")\r\n    for index in range(len(words)):\r\n        first_letter = words[index][0].upper()\r\n        last_letter = words[index][len(words[index])-1].upper()\r\n        words[index] = first_letter + words[index][1:len(words[index])-1] + last_letter\r\n    return \" \".join(words)\r\n\r\n\r","votes":145538.568},{"text":"\r\n\r\n    str1 = str1.split()\r\n    for i in range(len(str1)):\r\n        str1[i]=str1[i][0].upper() + str1[i][1:].lower()\r\n        if i==0:\r\n            str1[i]=str1[i][0].upper() + str1[i][1:].lower()\r\n        if i==len(str1)-1:\r\n            str1[i]=str1[i][0].upper() + str1[i][1:].lower()\r\n    str1=' '.join(str1)\r\n    return str1\r\n\r\n\r\nif __name__ == '__main__':\r\n    str1 = input(\"Enter a string: \")\r\n\r\n    print(capitalize_first_last_letters(str1))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# %%\r\n\r\n\r\n\r\n# %%\r","votes":null},{"text":"\r\n    # code goes here\r\n    return ' '.join([str1[0].upper() + str1[1:].lower(), str1[-1].upper() + str1[:-1].lower()])\r\n\r\n\r\nprint(capitalize_first_last_letters('hello world'))\r\n\r\n# Expected Output :\r\n# HEllo wOrld\r\n\r\n\r","votes":null},{"text":"\r\n    return \" \".join([str1[0].upper() + str1[1:].lower(), str1[-1].upper() + str1[:-1].lower()])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return ' '.join([w[:1].upper() + w[1:] for w in str1.split()])\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    return ' '.join([x[0].upper()+x[1:].lower() for x in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = str1.split(' ')\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][0].upper()+list1[i][1:].lower())\r\n    return ' '.join(list2)\r\n\r\n\r\nprint(capitalize_first_last_letters(\"python is a programming language\"))\r\nprint(capitalize_first_last_letters(\"this is a sample string\"))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    return ' '.join([s[0].capitalize() + s[1:] for s in str1.split(' ')])\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    str1 = input()\r\n\r\n    result = capitalize_first_last_letters(str1)\r\n\r\n    fptr.write(result + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return ' '.join([x[0].upper() + x[1:].lower() for x in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return ' '.join([x[0].upper() + x[1:].lower() for x in str1.split()])\r\n\r","votes":null},{"text":"\r\n\r\n    a = str1.split()\r\n    b = [x.capitalize() for x in a]\r\n    c = \" \".join(b)\r\n    return c\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    str1 = str1.split()\r\n    str2 = \"\"\r\n    for i in range(len(str1)):\r\n        str2 += str1[i][0].upper() + str1[i][1:len(str1[i])] + \" \"\r\n    return str2[:len(str2) - 1]\r\n\r\n\r\nprint(capitalize_first_last_letters(\"my name is mukul\"))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # code goes here\r\n    new_str = ''\r\n    words = str1.split()\r\n    for word in words:\r\n        new_str += word[0].upper() + word[1:len(word)].lower() + ' '\r\n    return new_str[:len(new_str) - 1]\r\n\r\n\r\nprint(capitalize_first_last_letters('hello world'))\r\nprint(capitalize_first_last_letters('hello world'))\r\nprint(capitalize_first_last_letters('hello world'))\r\nprint(capitalize_first_last_letters('hello world'))\r\n\r\n\r\n# Another solution\r","votes":null},{"text":"\r\n\r\n    return ' '.join(word.capitalize() for word in str1.split())\r\n\r\n\r","votes":null},{"text":"\r\n    return ' '.join([word[0].upper()+word[1:].lower() if word != word.upper() else word.upper() for word in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Input: \"python is awesome\"\r\n    # Output: \"Python Is Awesome\"\r\n\r\n    words = str1.split()\r\n    for i in range(len(words)):\r\n        words[i] = words[i].capitalize()\r\n        \r\n    return \" \".join(words)\r\n\r\nprint(capitalize_first_last_letters(\"python is awesome\"))  # Python Is Awesome\r\n\r\n# Method 2\r\n\r","votes":null},{"text":"\r\n    return ' '.join([x[0].upper() + x[1:].lower() for x in str1.split(' ')])\r\n\r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    capitalized_words = []\r\n    for word in words:\r\n        capitalized_words.append(word[0].upper() + word[1:].lower())\r\n    return ' '.join(capitalized_words)\r\n\r\n\r\nprint(capitalize_first_last_letters('python is a programming language'))\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = str1.split(' ')\r\n    list2 = []\r\n    for i in list1:\r\n        list2.append(i[0].upper() + i[1:].lower())\r\n    return ' '.join(list2)\r\n\r\n\r\nprint(capitalize_first_last_letters(\"python is awesome\"))\r\n# Python Is Awesome\r\n\r\n\r","votes":null},{"text":"\r\n    newstr = \"\"\r\n    for word in str1.split():\r\n        newstr += word[0].upper() + word[1:].lower() + \" \"\r\n    return newstr.strip()[:-1]\r\n\r\n\r","votes":null},{"text":"\r\n    # code goes here\r\n    str1 = str1.split()\r\n    str1 = [i.capitalize() for i in str1]\r\n    str1 = ' '.join(str1)\r\n    return str1\r\n\r\n\r\nprint(capitalize_first_last_letters('my name is anil'))\r\n\r\n\r","votes":null},{"text":"\r\n    return ' '.join([str1[0].upper() + str1[1:].lower(), str1[-1].upper() + str1[:-1].lower()])\r\n\r\nprint(capitalize_first_last_letters(\"python\"))\r\nprint(capitalize_first_last_letters(\"java\"))\r\nprint(capitalize_first_last_letters(\"C\"))\r\nprint(capitalize_first_last_letters(\"cpp\"))\r\nprint(capitalize_first_last_letters(\"csharp\"))\r\n\r\n# Test cases\r\n# Test 1\r\n# Correct result\r\n# PYTHON\r\n# java\r\n# C\r\n# cpp\r\n# csharp\r\n\r\n# Test 2\r\n# Wrong result\r\n# Python\r\n# Java\r\n# C\r\n# Cpp\r\n# Csharp\r\n\r\n# Test 3\r\n# Wrong result\r\n# PYTHON\r\n# Java\r\n# c\r\n# cpp\r\n# csharp\r\n\r\n# Test 4\r\n# Wrong result\r\n# PYTHON\r\n# java\r\n# c\r\n# Cpp\r\n# Csharp\r\n\r\n# Test 5\r\n# Wrong result\r\n# PYTHON\r\n# java\r\n# C\r\n# cpp\r\n# Csharp\r\n\r\n# Test 6\r\n# Correct result\r\n# PYTHON\r\n# Java\r\n# C\r\n# Cpp\r\n# Csharp\r\n\r\n# Test 7\r\n# Wrong result\r\n# python\r\n# java\r\n# c\r\n# cpp\r\n# csharp\r\n\r\n# Test 8\r\n# Wrong result\r\n# PYTHON\r\n# java\r\n# c\r\n# cpp\r\n# csharp\r\n\r\n# Test 9\r\n# Wrong result\r\n# PYTHON\r\n# Java\r\n# c\r\n# cpp","votes":null},{"text":"\r\n    return ' '.join([word.capitalize() for word in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n    str2 = \"\"\r\n    for i in range(len(str1)):\r\n        if i == 0 or i == (len(str1)-1) or str1[i] == \" \":\r\n            str2 += str1[i].upper()\r\n        else:\r\n            str2 += str1[i]\r\n    return str2\r\n\r\nstr = input(\"Enter a string: \")\r\nprint(\"The capitalized string is: \", capitalize_first_last_letters(str))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    for i in range(len(str1)):\r\n        str1[i] = str1[i].capitalize()\r\n    str1 = ' '.join(str1)\r\n    return str1\r\n\r\n\r","votes":null},{"text":"\r\n    return ' '.join([word[0].upper() + word[1:].lower() for word in str1.split(' ')])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    n = len(str1)\r\n    str1 = str1.replace(\" \", \"\")\r\n    str1 = str1.lower()\r\n    str1 = str1[0].upper() + str1[1:n - 1]\r\n    str1 = str1 + str1[n - 1].upper()\r\n    return str1\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    result = \"\"\r\n    for word in str1.split():\r\n        result += word[0].upper() + word[1:].lower() + \" \"\r\n\r\n    return result[:-1]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return ' '.join([w[0].upper() + w[1:].lower() for w in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n    # code goes here\r\n    # return \" \".join([str1[0].upper() + str1[1:].lower(), str1[-1].upper() + str1[:-1].lower()])\r\n    return \" \".join([str1[0].upper() + str1[1:], str1[-1].upper() + str1[:-1]])\r\n\r\n\r","votes":null},{"text":"\r\n    word_list = str1.split()\r\n    for i in range(0, len(word_list)):\r\n        word_list[i] = word_list[i][0].upper() + word_list[i][1:len(word_list[i])].lower()\r\n    str1 = ' '.join(word_list)\r\n    str1 = str1[0].upper() + str1[1:len(str1)].lower()\r\n    return str1\r\n\r\n\r\nprint(capitalize_first_last_letters('python is a programming language'))\r\n\r\n\r\n# 10\r","votes":null},{"text":"\r\n    return ' '.join(x.title() for x in str1.split())\r\n\r","votes":null},{"text":"\r\n    \r\n    return ' '.join(list(map(lambda x: x[0].upper() + x[1:].lower(), str1.split())))\r\n\r\n#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    words = str1.split(\" \")\r\n    new_words = []\r\n    for word in range(len(words)):\r\n        new_words.append(words[word][0].upper() + words[word][1:len(words[word])].lower())\r\n    for word in range(len(new_words)):\r\n        if word == len(new_words)-1:\r\n            new_words[word] = new_words[word][0].upper() + new_words[word][1:len(new_words[word])].lower()\r\n    return \" \".join(new_words)\r\n\r\n\r","votes":null},{"text":"\r\n    return ' '.join(x.capitalize() for x in str1.split())\r\n\r\n\r","votes":null},{"text":"\r\n    new_string = [i.capitalize() for i in str1.split()]\r\n    return ' '.join(new_string)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # print(str1)\r\n    list1 = str1.split()\r\n    # print(list1)\r\n    \r\n    for i in range(0,len(list1)):\r\n        if i == 0 or i == len(list1) - 1:\r\n            list1[i] = list1[i].capitalize()\r\n        else:\r\n            list1[i] = list1[i].lower()\r\n            \r\n    str1 = ' '.join(list1)\r\n    return str1\r\n\r\n\r\ncapitalize_first_last_letters(\"java is better than c++\")\r\n\r\n# 2. Write a python function that takes a string and convert it to a list without using built-in functions.\r\n\r","votes":null},{"text":"\r\n    #code here\r\n    return ' '.join([w[0].upper() + w[1:].lower() for w in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    str_list = str1.split()\r\n    \r\n    str_list[0] = str_list[0][0].upper() + str_list[0][1:].lower()\r\n    str_list[-1] = str_list[-1][0].upper() + str_list[-1][1:].lower()\r\n    \r\n    str1 = \" \".join(str_list)\r\n    \r\n    return str1\r\n","votes":null},{"text":"\r\n    \r\n    return ' '.join(map(lambda s: s[0].upper() + s[1:].lower(), str1.split()))\r\n\r\n\r\nprint(capitalize_first_last_letters('python is fun'))\r\nprint()\r\nprint(capitalize_first_last_letters('python is fun'))\r\nprint()\r\nprint(capitalize_first_last_letters('python is fun'))\r\nprint()\r\nprint(capitalize_first_last_letters('python is fun'))\r\nprint()\r\nprint(capitalize_first_last_letters('python is fun'))\r\nprint()\r\nprint(capitalize_first_last_letters('python is fun'))\r\nprint()\r\nprint(capitalize_first_last_letters('python is fun'))\r\nprint()\r\nprint(capitalize_first_last_letters('python is fun'))\r\nprint()\r\nprint","votes":null},{"text":"\r\n    return ' '.join(map(lambda x: x[0].upper() + x[1:], str1.split()))\r\n\r\n\r","votes":null},{"text":"\r\n    return \" \".join([x[0].upper() + x[1:] for x in str1.split(\" \")])\r\n\r\n\r","votes":null},{"text":"\r\n    return ' '.join([word[0].upper() + word[1:].lower() for word in str1.split()])\r\n\r\nprint(capitalize_first_last_letters(\"python is my favorite language\"))\r\n\r\n\"\"\"\r\nOutput:\r\n    Python Is My Favorite Language\r\n    \r\nExplanation:\r\n    The first letter of each word is capitalized and the remaining letters are lowercased.\r\n\"\"\"\r\n\r\n# Method 2\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    return ' '.join([str1[0][0].upper() + str1[0][1:], *str1[1:-1], str1[-1][0].upper() + str1[-1][1:]])\r\n\r\n\r\nprint(capitalize_first_last_letters('hello world'))\r\n\r\n\r\n# 11. Write a python function to get the count of the maximum occurring character in a given string.\r","votes":null},{"text":"\r\n\r\n    # return str1.title()\r\n    # or\r\n    # return str1.capitalize()\r\n    # or\r\n    # return str1.replace(str1[0], str1[0].upper())\r\n    # or\n    # return str1[0].upper() + str1[1:]\r\n    # or\r\n    return ' '.join([i.title() for i in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return ' '.join([str1[:1].upper() + str1[1:].lower(), str1[-1:].upper() + str1[:-1].lower()])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # code goes here\r\n    return \" \".join([word[0].upper()+word[1:].lower() for word in str1.split()])\r\n\r\n\r\n# Keep this function call here to return the output value.\r\nprint(capitalize_first_last_letters(input()))\r\n\r\n\r\n\r\n# Output Format\r\n#\r\n# The function must return a string. Do not print the output value.\r\n#\r\n# Sample Input\r\n#\r\n# python\r\n# Sample Output\r\n#\r\n# PyThon\r\n# Explanation\r\n#\r\n# The first letter of the string python is capitalized, and the last letter is capitalized.\r\n\r\n\r\n#!\/bin\/python3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n#\r\n# Complete the 'findDigits' function below.\r\n#\r\n# The function is expected to return an INTEGER.\r\n# The function accepts INTEGER n as parameter.\r\n#\r\n\r","votes":null},{"text":"\r\n    str1 = str1.lower()\r\n    res = []\r\n    for word in str1.split():\r\n        res.append(word.capitalize())\r\n    return ' '.join(res)\r\n\r\n\r","votes":null},{"text":"\r\n    capitalized_words = []\r\n    words = str1.split()\r\n    for word in words:\r\n        new_word = word[0].upper() + word[1:].lower()\r\n        capitalized_words.append(new_word)\r\n    return ' '.join(capitalized_words)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(capitalize_first_last_letters('python is cool'))\r\n    print(capitalize_first_last_letters('java is also cool'))\r\n    print(capitalize_first_last_letters('c++ is the best'))\r\n    print(capitalize_first_last_letters('","votes":null},{"text":"\r\n    return \" \".join([word.capitalize() for word in str1.split(\" \")])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return ' '.join([x[0].upper() + x[1:].lower() for x in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n    return \" \".join(map(lambda x: x[0].upper() + x[1:].lower(), str1.split()))\r\n\r\n\r","votes":null},{"text":"\r\n    capitalized = ''\r\n    for word in str1.split():\r\n        capitalized += word[0].upper() + word[1:].lower() + ' '\r\n    return capitalized.strip()\r\n\r\n\r\nprint(capitalize_first_last_letters('this is an example'))\r\n\r\n\r\n# 2. Write a python program to get the first letter of each word in a given string.\r","votes":null},{"text":"\r\n    str2 = str1.title()\r\n    return str2\r\n\r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    cap_words = []\r\n    for word in words:\r\n        cap_words.append(word[:1].upper() + word[1:].lower())\r\n    str2 = ' '.join(cap_words)\r\n    return str2\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    \r\n    #code goes here\r\n    return ' '.join([i[0].upper() + i[1:].lower() for i in str1.split()])\r\n    \r\n\r\n#keep this function call here    \r\nprint(capitalize_first_last_letters(input()))\r\n\r\n\r\n#Example Input\r\n#john doe\r\n\r\n#Example Output\r\n#John Doe\r\n\r\n\r\n#Example Input\r\n#hello world\r\n\r\n#Example Output\r\n#Hello World\r\n\r\n\r\n#Example Input\r\n#python programming\r\n\r\n#Example Output\r\n#Python Programming\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#Write a Python function to compute the sum of all the numbers in a given list.\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return \" \".join(word[0].upper() + word[1:].lower() for word in str1.split())\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # solution\r\n    s = \" \".join([s[0].upper() + s[1:].lower() for s in str1.split()])\r\n    return s[:1].upper() + s[1:]\r\n\r\n\r\n# test function\r","votes":null},{"text":"\r\n\r\n    return \" \".join([s[0].upper() + s[1:].lower() for s in str1.split()])\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(capitalize_first_last_letters('hello world'))\r\n    print(capitalize_first_last_letters('python is awesome'))\r\n    print(capitalize_first_last_letters('capitalize first last letters'))\r\n    print(capitalize_first_last_letters(''))\r\n    print(capitalize_first_last_letters('a'))\r\n\r\n\"\"\"\r\nInput:\r\n","votes":null},{"text":"\r\n    \r\n    #split string at words\r\n    words = str1.split(' ')\r\n    \r\n    #iterate through words and capitalize first and last letters\r\n    for i in range(len(words)):\r\n        words[i] = words[i][0].upper() + words[i][1:len(words[i])-1] + words[i][len(words[i])-1].upper()\r\n        \r\n    #join words back into string\r\n    words = ' '.join(words)\r\n    \r\n    return words\r\n\r\n\r\n#Test run\r\nprint(capitalize_first_last_letters('the quick brown fox jumps over the lazy dog'))\r\nprint(capitalize_first_last_letters('i love my dog'))\r\nprint(capitalize_first_last_letters('the quick brown fox jumps over the lazy dog'))\r\nprint(capitalize_first_last_letters('i love my dog'))\r\nprint(capitalize_first_last_letters('the quick brown fox jumps over the lazy dog'))\r\nprint(capitalize_first_last_letters('i love my dog'))\r\nprint(capitalize_first_last_letters('the quick brown fox jumps over the lazy dog'))\r\nprint(capitalize_first_last_letters('i love my dog'))\r\nprint(capitalize_first_last_letters('the quick brown fox jumps over the lazy dog'))\r\nprint(capitalize_first_last_letters('i love my dog'))\r\nprint(capitalize_first_last_letters('the quick brown fox jumps over the lazy dog'))\r\nprint(capitalize_first_last_letters('i love my dog'))\r\nprint(capitalize_first_last_letters('the quick brown fox jumps over the lazy dog'))\r\nprint(capitalize_first_last_letters('i love my dog'))\r\nprint(capita","votes":null},{"text":"\r\n\r\n    # str1 = input(\"Enter a sentence: \")\r\n\r\n    words = str1.split()\r\n\r\n    for i in range(len(words)):\r\n        words[i] = words[i][0].upper() + words[i][1:]\r\n        words[i] = words[i][:-1].upper() + words[i][-1]\r\n\r\n    str1 = \" \".join(words)\r\n\r\n    print(str1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # code goes here\r\n    return ' '.join([x[0].upper() + x[1:].lower() for x in str1.split()])\r\n\r\n\r\nprint(capitalize_first_last_letters(\"python is a great","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    for i in range(len(str1)):\r\n        str1[i] = str1[i].capitalize()\r\n    str1 = \" \".join(str1)\r\n    return str1\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    list1 = str1.split()\r\n    first_letter = []\r\n    last_letter = []\r\n    for i in list1:\r\n        first_letter.append(i[0].upper()+i[1:])\r\n        last_letter.append(i[:-1]+i[-1].upper())\r\n    return ' '.join(first_letter) + ' ' + ' '.join(last_letter)\r\n\r\nprint(capitalize_first_last_letters(\"hello world\"))\r\nprint(capitalize_first_last_letters(\"good bye world\"))\r\n\r\n# Output:\r\n# Hello World\r\n# Good Bye World\r\n\r\n#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    \r\n    #Splitting the string into a list of words.\r\n    list1 = str1.split()\r\n    \r\n    #Capitalizing the first letter of each word.\r\n    list1 = [word.capitalize() for word in list1]\r\n    \r\n    #Capitalizing the first letter of the string.\r\n    list1[0] = list1[0].capitalize()\r\n    \r\n    #Capitalizing the first letter of the last word.\r\n    list1[-1] = list1[-1].capitalize()\r\n    \r\n    #Joining the words of the list into a string.\r\n    str1 = ' '.join(list1)\r\n    \r\n    #Returning the string.\r\n    return str1\r\n\r\n\r\n#Example Test Case\r\nprint(capitalize_first_last_letters(\"this is a sample string\"))\r\n# output: This Is A Sample String\r\n\r\nprint(capitalize_first_last_letters(\"hi\"))\r\n# output: Hi\r\n\r\nprint(capitalize_first_last_letters(\"hello\"))\r\n# output: Hello\r\n\r\nprint(capitalize_first_last_letters(\"HELLO WORLD\"))\r\n# output: Hello World\r\n\r\nprint(capitalize_first_last_letters(\"wELL","votes":null},{"text":"\r\n    return ' '.join(x[0].upper() + x[1:].lower() for x in str1.split())\r\n\r\n\r","votes":null},{"text":"\r\n    return ' '.join([word[:1].upper() + word[1:].lower() for word in str1.split()])\r\n\r","votes":null},{"text":"\r\n    word = str1.split()\r\n    for i in range(len(word)):\r\n        word[i] = word[i].lower()\r\n        word[i] = word[i][0].upper() + word[i][1:]\r\n    word[-1] = word[-1].lower()[0].upper() + word[-1].lower()[1:]\r\n    str1 = \" \".join(word)\r\n    return str1\r\n\r\n\r\ncapitalize_first_last_letters(\"python 3.4\")\r\n\r\n\r","votes":null},{"text":"\r\n    return ' '.join([str1[0].upper() + str1[1:].lower(), str1[-1].upper() + str1[:-1].lower()])\r\n\r\n\r\nprint(capitalize_first_last_letters('python'))\r\n\r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    first_letter = words[0][0].upper()\r\n    last_letter = words[-1][-1].upper()\r\n    words = [first_letter + word[1:-1] + last_letter for word in words]\r\n    return \" \".join(words)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(capitalize_first_last_letters(\"python is awesome\"))\r\n\r\n\r\n\"\"\"\r\nSample Input:\r\npython is awesome\r\n\r\nSample Output:\r\nPynthon Is Awesome\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O","votes":null},{"text":"\r\n    \r\n    # create a function\r\n   ","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    new_str = []\r\n\r\n    for word in str1:\r\n        word = word.capitalize()\r\n        new_str.append(word)\r\n\r\n    return ' '.join(new_str)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    words = str1.split(' ')\r\n    new_words = []\r\n    for word in words:\r\n        new_words.append(word[0].upper() + word[1:].lower())\r\n    return ' '.join(new_words)\r\n\r\n\r\nprint(capitalize_first_last_letters('hello world'))\r\nprint(capitalize_first_last_letters('hello World'))\r\nprint(capitalize_first_last_letters('hElLo WoRlD'))\r\n\r\n\r\n# 6. Write a Python function to get a list of dictionaries from a list of lists.\r\n# Examples:\r\n# print(get_list_of_dictionaries([['id', 'name', 'url'], [1, 'Google', 'http:\/\/google.com'], [2, 'Runoob', 'http:\/\/runoob.com']]))\r\n# [{'id': 1, 'name': 'Google', 'url': 'http:\/\/google.com'}, {'id': 2, 'name': 'Runoob', 'url': 'http:\/\/runoob.com'}]\r\n\r","votes":null},{"text":"\r\n\r\n    words = str1.split()\r\n    capitalized_words = []\r\n\r\n    for word in words:\r\n        capitalized_word = word[0].upper() + word[1:].lower()\r\n        capitalized_words.append(capitalized_word)\r\n\r\n    capitalized_string = ' '.join(capitalized_words)\r\n\r\n    return capitalized_string\r\n\r\n\r\nif __name__ == '__main__':\r\n    str1 = input('Enter a string: ')\r\n    print(f'The","votes":null},{"text":"\r\n    result = str1.split()\r\n    result[0] = result[0].capitalize()\r\n    result[-1] = result[-1].capitalize()\r\n    return \" \".join(result)\r\n    \r\n# Test Cases\r\n\r\nprint(\"Test Case 1:\")\r\nprint(capitalize_first_last_letters(\"python is the best language\"))\r\n\r\nprint(\"\\nTest Case 2:\")\r\nprint(capitalize_first_last_letters(\"i am a python developer\"))\r\n\r\nprint(\"\\nTest Case 3:\")\r\nprint(capitalize_first_last_letters(\"java is a programming language\"))\r\n\r\n# Question 2\r","votes":null},{"text":"\r\n    return str1.capitalize().replace(\" \", \" \")\r\n\r\n\r","votes":null},{"text":"\r\n    return ' '.join([word[0].upper() + word[1:].lower() for word in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    final_str = \"\"\r\n    \r\n    for i in range(len(str1) - 1):\r\n        if str1[i].isalpha() == True and str1[i + 1].isalpha() == True:\r\n            final_str += str1[i].upper() + str1[i + 1].lower()\r\n        else:\r\n            final_str += str1[i]\r\n    \r\n    if str1[len(str1) - 1].isalpha() == True:\r\n        final_str += str1[len(str1) - 1].upper()\r\n    else:\r\n        final_str += str1[len(str1) - 1]\r\n    \r\n    return final_str\r\n\r\n\r","votes":null},{"text":"\r\n    return ' '.join([s[0].upper() + s[1:].lower() for s in str1.split(' ')])\r\n\r\n\r","votes":null},{"text":"\r\n    return str1.title()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    str1 = input(\"Enter a string: \")\r\n    print(capitalize_first_last_letters(str1))\r\n\r\n\r\n# Test Cases\r\n# Sample Input\r\n# Enter a string: hello world\r\n\r\n# Sample Output\r\n# Hello World\r\n\r\n# Explanation\r\n# We need to capitalize the first and last letters of each word in the string.\r\n# We use the title() method to capitalize the first and last letters of each word.\r\n\r\n# Sample Input\r\n# Enter a string: john doe\r\n\r\n# Sample Output\r\n# John Doe\r\n\r\n# Explanation\r\n# We need to capitalize the first and last letters of each word in the string.\r\n# We use the title() method to capitalize the first and last letters of each word.\r\n\r\n# Sample Input\r\n# Enter a string: pYThoN\r\n\r\n# Sample Output\r\n# Python\r\n\r\n# Explanation\r\n# We need to capitalize the first and last letters of each word in the string.\r\n# We use the title() method to capitalize the first and last letters of each word.\r\n\r\n# Sample Input\r\n# Enter a string: i LOVE YOU\r\n\r\n# Sample Output\r\n# I Love You\r\n\r\n# Explanation\r\n# We need to capitalize the first and last letters of each word in the string.\r\n# We use the title() method to capitalize the first and last letters of each word.\r\n\r\n# Sample Input\r\n# Enter a string: I LOVE YOU\r\n\r\n# Sample Output\r\n# I Love You\r\n\r\n# Explanation\r\n# We need to capitalize the first and last letters of each word in the string.\r\n# We use the title() method to capitalize the first and last letters of each word.\r\n\r\n# Sample Input\r\n# Enter a string: I. Love. You.\r","votes":null},{"text":"\r\n    words = str1.split(\" \")\r\n    new_words = []\r\n    for word in words:\r\n        temp = word[0].upper() + word[1:].lower()\r\n        new_words.append(temp)\r\n    return \" \".join(new_words)\r\n\r\n\r\nprint(capitalize_first_last_letters(\"python is a programming language\"))\r\n# Python Is A Programming Language\r\n\r\nprint(capitalize_first_last_letters(\"python\"))\r\n# Python\r\n\r\nprint(capitalize_first_last_letters(\"python is a programming language\"))\r\n# Python Is A Programming Language\r\n\r\nprint(capitalize_first_","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    str1[0] = str1[0].capitalize()\r\n    str1[-1] = str1[-1].capitalize()\r\n    return \" \".join(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # list comprehension\r\n    return \" \".join([i[0].upper() + i[1:].lower() for i in str1.split()])\r\n\r\n# Test case\r\nprint(capitalize_first_last_letters('python is a programming language'))\r\n\r\n# Output\r\n# Python Is A Programming Language\r\n\r\n# Test case\r\nprint(capitalize_first_last_letters('hello world'))\r\n\r\n# Output\r\n# Hello World\r\n\r\n# Test case\r\nprint(capitalize_first_last_letters('hello'))\r\n\r\n# Output\r\n# Hello\r\n\r\n# Test case\r\nprint(capitalize_first_last_letters('HELLO'))\r\n\r\n# Output\r\n# HELLO\r\n\r\n# Test case\r\nprint(capitalize_first_last_letters(''))\r\n\r\n# Output\r\n# ''\r\n\r\n# Test case\r\nprint(capitalize_first_last_letters('1234567890'))\r\n\r\n# Output\r\n# 1234567890\r\n\r\n# Test case\r\nprint(capitalize_first_last_letters('!@#$%^&*()'))\r\n\r\n# Output\r\n# !@#$%^&*()\r\n\r\n# Test case\r\nprint(capitalize_first_last_letters('1234567890!@#$%^&*()'))\r\n\r\n# Output\r\n# 1234567890!@#$%^&*()\r\n\r\n# Test case\r\nprint(capitalize_first_last_letters('1234567890!@#$%^&*() '))\r\n\r\n# Output\r\n# 1234567890!@#$%^&*() \r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    capitalized_words = []\r\n    for word in words:\r\n        capitalized_words.append(word[0].upper() + word[1:].lower())\r\n\r\n    return capitalized_words\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    return ' '.join(word.capitalize() if i==0 or i==len(str1.split())-1 else word for i, word in enumerate(str1.split()))\r\n\r\n\r\nprint(capitalize_first_last_letters(\"python is fun\"))\r\nprint(capitalize_first_last_letters(\"i am from new york\"))\r\n\r\n# other solution\r","votes":null},{"text":"\r\n    str2 = str1.strip()\r\n    if str2 == \"\":\r\n        return \"\"\r\n    words = str2.split()\r\n    word_list = []\r\n    for word in words:\r\n        word = word[0].upper() + word[1:] + word[-1].upper() + word[-2:-1]\r\n        word_list.append(word)\r\n    return \" \".join(word_list)\r\n\r\n\r\nprint(capitalize_first_last_letters(\"hello world\"))\r\nprint(capitalize_first_last_letters(\"hello world  \"))\r\nprint(capitalize_first_last_letters(\"  hello world\"))\r\nprint(capitalize_first_last_letters(\"  hello world  \"))\r\nprint(capitalize_first_last_letters(\"  hello world  \"))\r\nprint(capitalize_first_last_letters(\"1 2 3\"))\r\nprint(capitalize_first_last_letters(\"123\"))\r\nprint(capitalize_first_last_letters(\"123 456\"))\r\nprint(capitalize_first_last_letters(\"123 456 \"))\r\nprint(capitalize_first_last_letters(\"\"))\r\nprint(capitalize_first_last_letters(\" \"))\r\nprint(capitalize_first_last_letters(\"  \"))\r\nprint(capitalize_first_last_letters(\"   \"))\r\nprint(capitalize_first_last_letters(\"123 456 789\"))\r\nprint(capitalize_first_last_letters(\"123 456 789 \"))\r\nprint(capitalize_first_last_letters(\"123 456 789  \"))\r\nprint(capitalize_first_last_letters(\"1 2 3 4 5 6 7 ","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    str1 = [x[0].upper()+x[1:].lower() for x in str1]\r\n    str1 = ' '.join(str1)\r\n    str1 = str1[0].upper() + str1[1:].lower()\r\n    return str1\r\n\r","votes":null},{"text":"\r\n    \r\n    # code goes here\r\n    return \" \".join(w[0].upper() + w[1:].lower() if w else w for w in str1.split())\r\n\r\n\r\n# keep this function call here\r\nprint(capitalize_first_last_letters(input()))\r\n\r\n\r\n#---------------------------------------------------------------------#\r\n\r","votes":null},{"text":"\r\n    return \" \".join(f\"{w[0].upper()}{w[1:]}\" for w in str1.split())\r\n\r\n\r\nprint(capitalize_first_last_letters(\"i love python\"))\r\nprint(capitalize_first_last_letters(\"python\"))\r\nprint(capitalize_first_last_letters(\"i love python\"))\r\nprint(capitalize_first_last_letters(\"python python python\"))\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    str1 = [x[0].upper() + x[1:].lower() for x in str1]\r\n    return \" \".join(str1)\r\n\r\n\r","votes":null}],"time":{"count":7.0,"avg":110528.9554285714,"std":24771.1345986906,"cov":0.2241144368}}
{"id":527,"question":"def get_pairs_count(arr, n, sum):\r\n    \"\"\"Write a function to find all pairs in an integer array whose sum is equal to a given number.\"\"\"","answers":[{"text":"\r\n    pairs = 0\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r","votes":83597.228},{"text":"\r\n    count = 0\r\n    arr.sort()\r\n    for i in range(0, n - 1):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                print(\"{0} + {1} = {2}\".format(arr[i], arr[j], sum))\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":98686.392},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":99752.812},{"text":"\r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r","votes":104786.892},{"text":"\r\n    count = 0\r\n    for i in range(0, n-1):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":105944.42},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r","votes":108779.684},{"text":"\r\n    pair_count = 0\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pair_count += 1\r\n    return pair_count\r\n\r\n\r","votes":110065.432},{"text":"\r\n\r\n    pairs = []\r\n    for i in range(0, len(arr) - 1):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n\r\n    print(f\"{pairs}\")\r\n    return len(pairs)\r\n\r\n\r","votes":114464.068},{"text":"\r\n    pairs_count = 0\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r\n# Driver Program\r\narr = [10, 5, 2, 3]\r\nn = len(arr)\r\nsum = 17\r\nprint(\"The number of pairs are \", get_pairs_count(arr, n, sum))\r\n\r\n# Time Complexity -> O(n^2)\r\n# Space Complexity -> O(1)\r\n\r\n\r\n# Method 2 (Hashing)\r","votes":115393.872},{"text":"\r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().strip().split()))\r\n    sum = int(input())\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n# Given an array of integers, return the number of pairs of indices whose difference is 1. For example, if there are 4 elements in the array, and the array is [1, 2, 2, 4], then you should return 2, since the pairs are (0, 1) and (2, 3).\r\n# Input: [1, 2, 2, 4]\r\n# Output: 2\r\n\r","votes":116806.468},{"text":"\r\n\r\n    count = 0\r\n\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n\r\n    return count\r\n\r\n\r\narr = [3, 5, 1, 2, 4]\r\nsum = 5\r\nn = len(arr)\r\n\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n\r\n\"\"\"This is a python program to find all pairs in an integer array whose sum is equal to a given number.\"\"\"\r\n\r\n\r","votes":116808.184},{"text":"\r\n    # Write your code here\r\n    freq = {}\r\n    pairs = 0\r\n    for i in range(n):\r\n        if sum - arr[i] in freq:\r\n            pairs += freq[sum - arr[i]]\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    fptr = open","votes":116873.004},{"text":"\r\n    pair_count = 0\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                print(arr[i], arr[j])\r\n                pair_count += 1\r\n    return pair_count\r\n\r\n\r","votes":117427.864},{"text":"\r\n\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    sum = 6\r\n\r\n","votes":117611.94},{"text":"\r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 5, 7, -1, 5]\r\n    sum = 6\r\n    n = len(arr)\r\n    print(\"The number of pairs with a given sum is\", get_pairs_count(arr, n, sum))\r\n\r\n\r\n# Time complexity: O(n^2)\r\n# Space complexity: O(1)\r\n\r\n# Sample Input\/Output\r\n\r\n# Input:\r\n# Array: [1, 5, 7, -1, 5]\r\n# Sum: 6\r\n\r\n# Output:\r\n# The number of pairs with a given sum is 2\r\n\r\n# Input:\r\n# Array: [1, 5, 7, -1, 5]\r\n# Sum: 10\r\n\r\n# Output:\r\n# The number of pairs with a given sum is 4\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# Sample Input\/Output\r\n\r\n# Input:\r\n# Array: [1, 5, 7, -1, 5]\r\n# Sum: 6\r\n\r\n# Output:\r\n# The number of pairs with a given sum is 2\r\n\r\n# Input:\r\n# Array: [1, 5, 7, -1, 5]\r\n# Sum: 10\r\n\r\n# Output:\r\n# The number of pairs with a given sum is 4\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# Sample Input\/Output\r\n\r\n# Input:\r\n# Array","votes":123335.464},{"text":"\r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = list(map(int, input().split()))\r\n        sum = int(input())\r\n        print(get_pairs_count(arr, n, sum))\r\n\r\n# 3\r\n# 5\r\n# 1 5 3 4 2\r\n# 7\r\n# 4\r\n# 1 4 3 1 2\r\n# 6\r\n# 5\r\n# 1 2 3 4 5\r\n# 15\r\n# 4\r\n# 1 4 3 1\r\n# 6\r\n# 2\r\n# 1 1\r\n# 2\r\n# 3\r\n# 3 3 4\r\n# 15\r\n# 4\r\n# 1 4 3 1\r\n# 6\r\n# 2\r\n# 1 1\r\n# 2\r\n# 3\r\n# 3 3 4\r\n# 15\r\n# 4\r\n# 1 4 3 1\r\n# 6\r\n# 2\r\n# 1 1\r\n# 2\r\n# 3\r\n# 3 3 4\r\n# 15\r\n# 4\r\n# 1 4 3 1\r\n# 6\r\n# 2\r\n# 1 1\r\n# 2\r\n# 3\r\n# 3 3 4\r\n# 15\r\n# 4\r\n# 1 4 3 1","votes":124147.724},{"text":"\r\n\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    sum = 3\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n# Time Complexity: O(N^2)\r\n# Space Complexity: O(1)\r\n","votes":124387.952},{"text":"\r\n\r\n    pairs_count = 0\r\n    for i in range(n - 1):\r\n        first_num = arr[i]\r\n        for j in range(i + 1, n):\r\n            second_num = arr[j]\r\n            if first_num + second_num == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 8, 3, 16, 7, 12, 9, 11, 10, 14, 13]\r\n    sum = 15\r\n    n = len(arr)\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# Sample Input:\r\n# arr = [1, 2, 3, 4, 5, 8, 3, 16, 7, 12, 9, 11, 10, 14, 13]\r\n# sum = 15\r\n# n = len(arr)\r\n# \r\n# Sample Output:\r\n# 11\r\n\r\n# Sample Input:\r\n# arr = [1, 2, 3, 4, 5, 8, 3, 16, 7, 12, 9, 11, 10, 14, 13]\r\n# sum = 25","votes":127711.16},{"text":"\r\n    count = 0\r\n    # Write your code here\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    sum = int(input())\r\n\r\n    result = get_pairs_count(arr, n, sum)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# Given an integer array arr of size n and an integer sum, find and return the number of pairs of elements with\r\n# the sum of equal to the given sum.\r\n#\r\n# Function Description\r\n#\r\n# Complete the getPairsCount function in the editor below. It should return an integer representing the number of\r\n# pairs.\r\n#\r\n# getPairsCount has the following parameter(s):\r\n#\r\n# int arr[n]: the array of integers\r\n# int n: the number of integers\r\n# int sum: the sum\r\n#\r\n# Input Format\r\n#\r\n# The first line contains an integer n, the size of arr.\r\n# The second line contains n space-separated integers arr[i] where 0 \u2264 i < n.\r\n# The third line contains an integer sum.\r\n#\r\n# Constraints\r\n#\r\n# 1 \u2264 n \u2264 10^5\r\n# -10^4 \u2264 arr[i], sum \u2264 10^4\r\n#\r\n# Output Format\r\n#\r\n# Print an integer denoting the number of pairs of integers in arr whose sum is equal to sum.\r\n#\r\n# Sampl","votes":132088.696},{"text":"\r\n    total_pairs = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                total_pairs += 1\r\n    return total_pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 5, 7, 9, 11]\r\n    sum = 10\r\n    n = len(arr)\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSample Input-1:\r\narr = [1, 5, 7, 9, 11]\r\nsum = 10\r\nn = 5\r\n\r\nSample Output-1:\r\n2\r\n\r\nSample Input-2:\r\narr = [1, 5, 7, 9, 11]\r\nsum = 11\r\nn = 5\r\n\r\nSample Output-2:\r\n3\r\n\r\nSample Input-3:\r\narr = [1, 5, 7, 9, 11]\r\nsum = 100\r\nn = 5\r\n\r\nSample Output-3:\r\n0\r\n\"\"\"\r\n\r\n\r\n# Method-2: Using Dict\r","votes":133490.544},{"text":"\r\n\r\n    pairs_count = 0\r\n\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n\r\n    return pairs_count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    sum = 6\r\n\r\n    print(get_pairs_count(arr, n, sum))\r\n","votes":133695.38},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                print(str(arr[i]) + \" + \" + str(arr[j]) + \" = \" + str(sum))\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 3, 5, 7, 12]","votes":135740.276},{"text":"\r\n    c = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                c += 1\r\n    return c\r\n\r\n\r","votes":137886.112},{"text":"\r\n    count = 0\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter the size of the array: \"))\r\n    arr = []\r\n    print(\"Enter the elements of the array: \")\r\n    for i in range(0, n):\r\n        arr.append(int(input()))\r\n    print(\"Enter the sum: \")\r\n    sum = int(input())\r\n    count = get_pairs_count(arr, n, sum)\r\n    print(f\"The total number of pairs with the given sum are: {count}\")\r\n\r\n\"\"\"\r\nEnter the size of the array: 5\r\nEnter the elements of the array: \r\n1\r\n2\r\n3\r\n4\r\n5\r\nEnter the sum: \r\n6\r\nThe total number of pairs with the given sum are: 6\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(N^2), where N is the size of the array\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n\r\n\r","votes":142278.136},{"text":"\r\n    if n < 2:\r\n        return 0\r\n    hash = {}\r\n    count = 0\r\n    for i in range(n):\r\n        if (sum - arr[i]) in hash:\r\n            count += hash[sum - arr[i]]\r\n        hash[arr[i]] = hash.get(arr[i], 0) + 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [2, 3, 4, 5]\r\n    n = len(arr)\r\n    sum = 7\r\n    ans = get_pairs_count","votes":145500.676},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\n# Driver program to test above function\r\narr = [1, 5, 7, -1, 5]\r\nsum","votes":151200.44},{"text":"\r\n    pairs_count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r","votes":158837.504},{"text":"\r\n    # return the pairs count in an array\r\n    pairs_count = 0\r\n    # iterate over the array\r\n    for i in range(0, n):\r\n        # iterate over the array again\r\n        for j in range(i + 1, n):\r\n            # if the sum of two elements is equal to the given sum\r\n            if arr[i] + arr[j] == sum:\r\n                # increment the counter\r\n                pairs_count += 1\r\n    # return the pairs count\r\n    return pairs_count\r\n\r\n\r\n# main function\r\nif __name__ == '__main__':\r\n    # test case 1\r\n    arr = [2, 3, 4, 5]\r\n    n = len(arr)\r\n    sum = 8\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    # test case 2\r\n    arr = [2, 3, 4, 5, 6, 8, 9, 11, 13]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    # test case 3\r\n    arr = [2, 3, 4, 5, 6, 8, 9, 11, 13]\r\n    n = len(arr)\r\n    sum = 20\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    # test case 4\r\n    arr = [2, 3, 4, 5, 6, 8, 9, 11, 13]\r\n    n = len(arr)\r","votes":164461.38},{"text":"\r\n    count = 0\r\n    for i in range(n - 1):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nmy_arr = [1, 3, 5, 2, 2]\r\nmy_sum = 4\r\nn = len(my_arr)\r\nprint(get_pairs_count(my_arr, n, my_sum))\r\n\r\n\r","votes":174430.6},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if (arr[i] + arr[j]) == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 5, 7, -1, 5]\r\n    n = len(arr)\r\n    sum = 6\r\n    print(get_pairs_count(arr, n, sum))\r\n","votes":176332.936},{"text":"\r\n    # create a dictionary\r\n    d = {}\r\n    count = 0\r\n    for i in range(n):\r\n        # if the sum is already present\r\n        if sum - arr[i] in d:\r\n            count += d[sum - arr[i]]\r\n        \r\n        # if the sum is not present\r\n        if arr[i] in d:\r\n            d[arr[i]] += 1\r\n        else:\r\n            d[arr[i]] = 1\r\n    \r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 3, 5, 7, 5, 9, 10, 11, 12]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 3, 5, 7, 5, 9, 10, 11, 12]\r\n    n = len(arr)\r\n    sum = 13\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 3, 5, 7, 5, 9, 10, 11, 12]\r\n    n = len(arr)\r\n    sum = 1\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 3, 5, 7, 5, 9, 10, 11, 12]\r\n    n = len(arr)\r\n    sum = 11\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 3, 5, 7, 5, 9, 10, 11, 12]\r\n    n = len(arr)\r\n  ","votes":192990.948},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 3, 5, 6, 2]\r\n    sum = 8\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    sum = 6\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [10, 5, 2, 3, 7, 5]\r\n    sum = 12\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [10, 5, 2, 3, 7, 5]\r\n    sum = 20\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [10, 5, 2, 3, 7, 5]\r\n    sum = 25\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [10, 5, 2, 3, 7, 5]\r\n    sum = 30\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [10, 5, 2, 3, 7, 5]\r\n    sum = 35\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [10, 5, 2, 3, 7, 5]\r\n    sum ","votes":206250.416},{"text":"\r\n    # code here\r\n    count = 0\r\n    i = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1, n):\r\n            if(arr[i]+arr[j] == sum):\r\n                count += 1\r\n    return count\r\n\r\n# { Driver Code Starts.\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for i in range(t):\r\n        n = int(input())\r\n        Arr = list(map(int, input().strip().split()))\r\n        sum = int(input())\r\n        print(get_pairs_count(Arr, n, sum))\r\n\r\n\r\n# } Driver Code Ends\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n'''\r\nSample Input 1:\r\n2\r\n6\r\n1 2 3 4 5 6\r\n7\r\n2 3 4 5 6 7 8\r\n\r\nSample Output 1:\r\n3\r\n2\r\n\r\nSample Input 2:\r\n2\r\n10\r\n1 2 3 4 5 6 7 8 9 10\r\n7\r\n1 2 3 4 5 6 7\r\n\r\nSample Output 2:\r\n4\r\n0\r\n'''\r\n\r\n\r\n# Alternate Solution\r\n\r\n\r","votes":226349.068},{"text":"\r\n    pairs = 0\r\n    for i in range(n):\r\n        if arr[i] == sum:\r\n            pairs += 1\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 3, 2, 4, 1]\r\n    n = len(arr)\r\n    sum = 4\r\n    print(f\"The number of pairs in the array {arr} whose sum is {sum} is {get_pairs_count(arr, n, sum)}\")\r\n\r\n'''\r\nTime Complexity  \r\nThe time complexity of the above algorithm will be O(N^2) as two nested for loops are used.\r\n\r\nSpace Complexity  \r\nThe space complexity of the above algorithm will be O(1) as only two variables are used.\r\n\r\n'''\r\n\r\n\r\n# Python3 program to find all pairs in an array\r\n# whose sum is equal to a given number\r\n\r\n\r","votes":231243.856},{"text":"\r\n    dict = {}\r\n    for i in range(n):\r\n        if arr[i] in dict:\r\n            dict[arr[i]].append(i)\r\n        else:\r\n            dict[arr[i]] = [i]\r\n    \r\n    ans = 0\r\n    for i in range(n):\r\n        if arr[i] in dict:\r\n            del dict[arr[i]]\r\n        else:\r\n            dict[sum-arr[i]] = 1\r\n        if i in dict:\r\n            ans += len(dict[i])\r\n    return ans\r\n    \r\n    \r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                print(arr[i], arr[j])\r\n                count += 1\r\n    return count\r\n\r\n\r\narr = [1, 4,","votes":null},{"text":"\r\n    from collections import defaultdict\r\n\r\n    # Initialize the dictionary\r\n    d = defaultdict(list)\r\n\r\n    # Store all pairs\r\n    for i in range(n):\r\n        d[arr[i]].append(i)\r\n\r\n    # Iterate over the dictionary\r\n    # and find pairs of numbers\r\n    # whose sum is equal to the sum\r\n    pairs = 0\r\n    for i in range(n):\r\n        if (sum - arr[i]) in d:\r\n            if d[sum - arr[i]] != [i]:\r\n                pairs += 1\r\n\r\n    return pairs\r\n\r\n\r\n# Driver code\r\narr = [1, 5, 7, 1, 3, 4]\r\nn = len(arr)\r\nsum = 12\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    \r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    \r\n    return pairs\r\n\r\n# Driver code\r\narr = [2, 3, 4, 5, 6, 7, 8]\r\nsum = 10\r\nn = len(arr)\r\nprint(get","votes":null},{"text":"\r\n    if n < 2:\r\n        return 0\r\n    elif n == 2:\r\n        return 1 if sum == arr[0] + arr[1] else 0\r\n    else:\r\n        count = 0\r\n        for i in range(n-1):\r\n            count += get_pairs_count(arr[i+1:], n-i-1, sum - arr[i])\r\n        return count\r\n\r\n\r","votes":null},{"text":"\r\n    d = {}\r\n    pairs = []\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            pairs.append([arr[i], d[arr[i]]])\r\n        d[sum - arr[i]] = arr[i]\r\n    return pairs\r\n\r\n\r\nprint(get_pairs_count([1, 2, 3, 4, 5], 5, 10))\r\n# This will print [[2,8],[3,7],[4,6]]\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    # Create a hash map\r\n    hash_map = {}\r\n    # Traverse through the entire array\r\n    for i in range(0, n):\r\n        if arr[i] in hash_map:\r\n            count += hash_map[arr[i]]\r\n        hash_map[sum - arr[i]] = hash_map.get(sum - arr[i], 0) + 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 5, 2, 3]\r\n    n = len(arr)\r\n    sum = 7\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace","votes":null},{"text":"\r\n    # Initialize the hashmap\r\n    hashmap = {}\r\n    for i in range(n):\r\n        # If the sum is found\r\n        if arr[i] in hashmap and hashmap[arr[i]] != i:\r\n            return 1\r\n        else:\r\n            hashmap[sum - arr[i]] = i\r\n    return 0\r\n\r\n\r","votes":null},{"text":"\r\n    pair_count = 0\r\n    arr.sort()\r\n    left, right = 0, n-1\r\n    while right >=0:\r\n        if arr[left] + arr[right] == sum:\r\n            pair_count += 1\r\n            left += 1\r\n            right -= 1\r\n        elif arr[left] + arr[right] > sum:\r\n            right -= 1\r\n        else:\r\n            left += 1\r\n    return pair_count\r\n\r\n\r\n### Test Cases\r\nprint(get_pairs_count([1, 4, 45, 6, 10, 8], 6, 16))\r\nprint(get_pairs_count([1, 4, 45, 6, 10, 8], 6, 17))\r\nprint(get_pairs_count([1, 4, 45, 6, 10, 8], 5, 9))\r\nprint(get_pairs_count([1, 4, 45, 6, 10, 8], 5, 11))\r\nprint(get_pairs_count([1, 4, 45, 6, 10, 8], 6, 7))\r\nprint(get_pairs_count([1, 4, 45, 6, 10, 8], 6, 13))\r\nprint(get_pairs_count([1, 4, 45, 6, 10, 8], 6, 1))\r\nprint(get_pairs_count([1, 4, 45, 6, 10, 8], 6, 0))\r\nprint(get_pairs_count([], 0, 1))\r\nprint(get_pairs_count([1], 1, 2))\r\nprint(get_pairs_count([1, ","votes":null},{"text":"\r\n\r\n    # Find all pairs in an integer array whose sum is equal to a given number.\r\n\r\n    # 1. Initialize the dictionary with all the elements as key.\r\n    # 2. Take sum of the element and subtract it from the given sum. \r\n    # 3. If the value is present in the dictionary then return 1 else 0.\r\n    # 4. If the value is not present then update the value in the dictionary.\r\n    # 5. Return the count.\r\n\r\n    # 1. Initialize the dictionary with all the elements as key.\r\n    dict = {}\r\n    for i in range(n):\r\n        dict[arr[i]] = i\r\n    # 2. Take sum of the element and subtract it from the given sum. \r\n    # 3. If the value is present in the dictionary then return 1 else 0.\r\n    # 4. If the value is not present then update the value in the dictionary.\r\n    # 5. Return the count.\r\n    count = 0\r\n    for i in range(n):\r\n        if (sum - arr[i]) in dict and dict[sum - arr[i]] != i:\r\n            count += 1\r\n    return count\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    arr = [1, 5, 7, 1, 3, 4, 3, 2]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n# Input: arr[] = {1, 5, 7, 1, 3, 4, 3, 2}, sum = 10\r\n# Output: 5\r\n# 1 is repeated twice and (5, 5), (3, 7) are the pairs with sum 10.\r\n\r\n# Input: arr[","votes":null},{"text":"\r\n    pairs = 0\r\n\r\n    # Sort the array\r\n    arr.sort()\r\n\r\n    # Take two indices\r\n    left = 0\r\n    right = len(arr) - 1\r\n\r\n    # Iterate through the array\r\n    while left < right:\r\n        # If the sum is equal, increment the count\r\n        if arr[left] + arr[right] == sum:\r\n            pairs += 1\r\n            left += 1\r\n            right -= 1\r\n        # If the sum is less, increment the left index\r\n        elif arr[left] + arr[right] < sum:\r\n            left += 1\r\n        # If the sum is greater, decrement the right index\r\n        elif arr[left] + arr[right] > sum:\r\n            right -= 1\r\n\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 5, 3, 2, 4, 6]\r\n    n = len(arr)\r\n    sum = 6\r\n\r\n    count = get_pairs_count(arr, n, sum)\r\n    print(f\"The number of pairs in the array whose sum is {sum} is {count}\")\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n log n)\r\nSPACE COMPLEXITY: O(1)\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTEST CASES\r\n\r\nINPUT 1:\r\n    arr = [1, 5, 3, 2, 4, 6]\r\n    n = len(arr)\r\n    sum = 6\r\n\r\nOUTPUT 1:\r\n    The number of pairs in the array whose sum is 6 is 3\r\n\r\nINPUT 2:\r\n    arr = [1, 2, 4, 5, 6, 8, 7]\r\n    n = len(ar","votes":null},{"text":"\r\n    pairs = {}\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs[(arr[i], arr[j])] = 1\r\n    return len(pairs)\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = {}\r\n    for i in range(n):\r\n        diff = sum - arr[i]\r\n        if diff in pairs:\r\n            print(str(arr[i]) + \" and \" + str(diff) + \" at index \" + str(i) + \" and \" + str(pairs[diff]) + \" respectively\")\r\n        else:\r\n            pairs[arr[i]] = i\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter the size of the array :\"))\r\n    arr = []\r\n    for i in range(n):\r\n        arr.append(int(input(\"Enter the element of the array :\")))\r\n    sum = int(input(\"Enter the sum to find the pairs :\"))\r\n    get_pairs_count(arr, n, sum)\r\n\r\n\r\n\"\"\"\r\nTime Complexity : O(n)\r\nSpace Complexity : O(n)\r\n\r\nInput :\r\nEnter the size of the array :4\r\nEnter the element of the array :1\r\nEnter the element of the array :2\r\nEnter the element of the array :3\r\nEnter the element of the array :4\r\nEnter the sum to find the pairs :6\r\n\r\nOutput :\r\n1 and 5 at index 0 and 3 respectively\r\n2 and 4 at index 1 and 2 respectively\r\n3 and 3 at index 2 and 2 respectively\r\n","votes":null},{"text":"\r\n    pairs_count = 0\r\n    arr.sort()\r\n    for i in range(0, n-1):\r\n        j = n-1\r\n        while(i < j):\r\n            if(arr[i]+arr[j] == sum):\r\n                pairs_count += 1\r\n                i += 1\r\n                j -= 1\r\n            elif(arr[i]+arr[j] > sum):\r\n                j -= 1\r\n            else:\r\n                i += 1\r\n    return pairs_count\r\n\r\nif __name__ == '__main__':\r\n    arr = [2, 5, 3, 6, 8, 1]\r\n    n = len(arr)\r\n    print(\"Pairs of elements whose sum is\", n, \"are:\")\r\n    print(get_pairs_count(arr, n, 10))\r\n    print(get_pairs_count(arr, n, 12))\r\n    print(get_pairs_count(arr, n, 16))\r\n    print(get_pairs_count(arr, n, 18))\r\n    print(get_pairs_count(arr, n, 20))\r\n    print(get_pairs_count(arr, n, 21))\r\n    print(get_pairs_count(arr, n, 22))\r\n    print(get_pairs_count(arr, n, 23))\r\n    print(get_pairs_count(arr, n, 24))\r\n    print(get_pairs_count(arr, n, 25))\r\n    print(get_pairs_count(arr, n, 26))\r\n    print(get_pairs_count(arr, n, 27))\r\n    print(get_pairs_count(arr, n, 28))\r\n    print(get_pairs_count(arr, n, 29))","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    hashmap = {}\r\n    count = 0\r\n    for i in range(n):\r\n        if sum - arr[i] in hashmap:\r\n            count += hashmap[sum - arr[i]]\r\n        if arr[i] in hashmap:\r\n            hashmap[arr[i]] += 1\r\n        else:\r\n            hashmap[arr[i]] = 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    sum = int(input())\r\n\r\n    result = get_pairs_count(arr, n, sum)\r\n\r\n    fptr.write(str(","votes":null},{"text":"\r\n    pairs = 0\r\n    for i in range(0, n - 1):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 5, 7, 1, 3]\r\n    n = len(arr)\r\n    sum = 6\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nInput:\r\narr = [1, 5, 7, 1, 3]\r\nn = 5\r\nsum = 6\r\n\r\nOutput:\r\n2\r\n\r\nExplanation:\r\nThe two pairs of elements are (5, 1) and (3, 3)\r\n\r\nSAMPLE II\r\n\r\nInput:\r\narr = [1, 5, 7, 1, 3]\r\nn = 5\r\nsum = 8\r\n\r\nOutput:\r\n3\r\n\r\nExplanation:\r\nThe three pairs are (1, 7), (5, 3) and (1, 3)\r\n\r\nSAMPLE III\r\n\r\nInput:\r\narr = [1, 5, 7, 1, 3]\r\nn = 5\r\nsum = 10\r\n\r\nOutput:\r\n4\r\n\r\nExplanation:\r\nThe four pairs are (1, 9), (5, 5), (7, 3) and (1, 3)\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AN","votes":null},{"text":"\r\n    arr.sort()\r\n    count = 0\r\n    left = 0\r\n    right = n-1\r\n\r\n    while left < right:\r\n        if arr[left] + arr[right] == sum:\r\n            count += 1\r\n            left += 1\r\n            right -= 1\r\n        elif arr[left] + arr[right] < sum:\r\n            left += 1\r\n        else:\r\n            right -= 1\r\n\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    # create an empty hash set\r\n    hashset = set()\r\n    # create an empty hash set\r\n    result = set()\r\n    # iterate over the array\r\n    for i in range(n):\r\n        # check if the current element is present in hashset\r\n        if (sum - arr[i]) in hashset:\r\n            # add the pair to the result\r\n            result.add((arr[i], sum - arr[i]))\r\n        # add the current element to the hashset\r\n        hashset.add(arr[i])\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(0, n):\r\n        if arr[i] in d:\r\n            d[arr[i]].append(i)\r\n        else:\r\n            d[arr[i]] = [i]\r\n    count = 0\r\n    for i in range(0, n):\r\n        if (sum - arr[i]) in d and d[sum - arr[i]] != [i]:\r\n            count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if (arr[i] + arr[j] == sum):\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 15\r\n    print(\"Total pairs with sum \", sum, \" are \", get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 20\r\n    print(\"Total pairs with sum \", sum, \" are \", get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 25\r\n    print(\"Total pairs with sum \", sum, \" are \", get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 30\r\n    print(\"Total pairs with sum \", sum, \" are \", get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 35\r\n    print(\"Total pairs with sum \", sum","votes":null},{"text":"\r\n    count = 0\r\n    i, j = 0, 1\r\n    while j < n:\r\n        if arr[i] + arr[j] == sum:\r\n            count += 1\r\n            i += 1\r\n            j += 1\r\n        elif arr[i] + arr[j] < sum:\r\n            j += 1\r\n        else:\r\n            i += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Enter the size of the array\")\r\n    n = int(input())\r\n    print(\"Enter the array elements\")\r\n    arr = [int(x) for x in input().split(\" \")]\r\n    print(\"Enter the sum\")\r\n    sum = int(input())\r\n    print(f\"The count of pairs with the sum of {sum} is {get_pairs_count(arr, n, sum)}\")\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the size of the array\r\n5\r\nEnter the array elements\r\n10 20 30 40 50\r\nEnter the sum\r\n100\r\nThe count of pairs with the sum of 100 is 6\r\n\r\nSAMPLE II\r\n\r\nEnter the size of the array\r\n5\r\nEnter the array elements\r\n10 20 30 40 50\r\nEnter the sum\r\n150\r\nThe count of pairs with the sum of 150 is 0\r\n\r\nSAMPLE III\r\n\r\nEnter the size of the array\r\n5\r\nEnter the array elements\r\n10 20 30 40 50\r\nEnter the sum\r\n10\r\nThe","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\nif __name__ == '__main__':\r\n    arr = [7, 5, 2, 4, 3]\r\n    sum = 10\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nINPUT\r\n[7, 5, 2, 4, 3]\r\n10\r\n\r\nOUTPUT\r\n[(7, 3), (5, 5)]\r\n\r\nSAMPLE II\r\n\r\nINPUT\r\n[1, 3, 5, 7, 9]\r\n10\r\n\r\nOUTPUT\r\n[(7, 3)]\r\n\r\nSAMPLE III\r\n\r\nINPUT\r\n[1, 4, 5, 4, 3, 2]\r\n5\r\n\r\nOUTPUT\r\n[(1, 4), (1, 4), (5, 4)]\r\n\r\nSAMPLE IV\r\n\r\nINPUT\r\n[1, 1, 1, 1, 1, 1, 1, 1]\r\n3\r\n\r\nOUTPUT\r\n[(1, 2), (1, 2)]\r\n\r\nSAMPLE V\r\n\r\nINPUT\r\n[1, 1, 1, ","votes":null},{"text":"\r\n    # code goes here\r\n    pairs=[]\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]+arr[j]==sum:\r\n                pairs.append([arr[i],arr[j]])\r\n    return pairs\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input().strip())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    sum = int(input().strip())\r\n\r\n    result = get_pairs_count(arr, n, sum)\r\n\r\n    fptr.write('\\n'.join(map(lambda x: ' '.join(map(str, x)), result)))\r\n    fptr.write('\\n')\r\n\r\n    fptr.close()\r\n\r\n# Input:\r\n# 6\r\n# 1 5 3 4 2 6\r\n# 7\r\n# Output:\r\n# 5 2\r\n# 3 4\r\n# 4 3\r\n# 1 6\r\n# 5 1\r\n# 6 1\r\n\r\n# Input:\r\n# 5\r\n# 1 4 3 2 5\r\n# 7\r\n# Output:\r\n# 1 6\r\n# 4 3\r\n# 2 5\r\n# 1 5\r\n# 3 2\r\n# 5 1\r\n\r\n# Input:\r\n# 5\r\n# 1 4 3 2 5\r\n# 8\r\n# Output:\r\n# 4 4\r\n# 3 5\r\n# 2 6\r\n# 1 7\r\n# 5 1\r\n# 4 3\r\n# 3 4\r\n# 2 5\r\n#","votes":null},{"text":"\r\n    arr.sort()\r\n    left, right = 0, n - 1\r\n    count = 0\r\n    while left < right:\r\n        if arr[left] + arr[right] == sum:\r\n            count += 1\r\n            left += 1\r\n            right -= 1\r\n        elif arr[left] + arr[right] < sum:\r\n            left += 1\r\n        else:\r\n            right -= 1\r\n\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 4, 4, 3, 3, 0, 9, 2, 3]\r\n    n = len(arr)\r\n    sum = 6\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 4, 4, 3, 3, 0, 9, 2, 3]\r\n    n = len(arr)\r\n    sum = 5\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 4, 4, 3, 3, 0, 9, 2, 3]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 4, 4, 3, 3, 0, 9, 2, 3]\r\n    n = len(arr)\r\n    sum = 11\r\n    print(get_pairs_count","votes":null},{"text":"\r\n    \r\n    # Sort the array\r\n    arr.sort()\r\n    \r\n    # Initialize the result and two pointers\r\n    result = []\r\n    left = 0\r\n    right = n - 1\r\n    \r\n    # Loop until left pointer crosses right pointer\r\n    while left < right:\r\n        \r\n        # If the sum is equal to the desired sum\r\n        if arr[left] + arr[right] == sum:\r\n            result.append(arr[left])\r\n            result.append(arr[right])\r\n            left += 1\r\n            right -= 1\r\n            \r\n        # If the sum is greater than the desired sum\r\n        elif arr[left] + arr[right] > sum:\r\n            right -= 1\r\n            \r\n        # If the sum is lesser than the desired sum\r\n        else:\r\n            left += 1\r\n    \r\n    return result\r\n\r\n# Test program\r\narr = [1, 5, 7, 1, 3, 4, 4, 5]\r\nsum = 6\r\nprint(get_pairs_count(arr, len(arr), sum))\r\n\r\n# Time Complexity: O(nlogn + n)\r\n#","votes":null},{"text":"\r\n\r\n    pairs = set()\r\n\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.add((arr[i], arr[j]))\r\n\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9","votes":null},{"text":"\r\n    # Time Complexity O(n^2)\r\n    # Space Complexity O(1)\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if (i != j and arr[i] + arr[j] == sum):\r\n                print(str(arr[i]) + \", \" + str(arr[j]))\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [5, 2, 3, 1, 3, 5, 2, 3]\r\n    n = len(arr)\r\n    sum = 3\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n# Time Complexity O(n^2)\r\n# Space Complexity O(n)\r","votes":null},{"text":"\r\n    count = 0\r\n\r\n    if n <= 1:\r\n        return count\r\n\r\n    arr.sort()\r\n\r\n    i = 0\r\n    j = n - 1\r\n\r\n    while i < j:\r\n        if arr[i] + arr[j] == sum:\r\n            count += 1\r\n\r\n            i += 1\r\n            j -= 1\r\n\r\n        elif arr[i] + arr[j] < sum:\r\n            i += 1\r\n\r\n        else:\r\n            j -= 1\r\n\r\n    return count\r\n\r\n\r\narr = [1, 3, 4, 2, 2]\r\nn = len(arr)\r\nsum = 4\r\n\r\nprint(\"Sum of the pairs are: \", get_pairs_count(arr, n, sum))\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nsum = 5\r\n\r\nprint(\"Sum of the pairs are: \", get_pairs_count(arr, n, sum))\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nsum = 2\r\n\r\nprint(\"Sum of the pairs are: \", get_pairs_count(arr, n, sum))\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nsum = 3\r\n\r\nprint(\"Sum of the pairs are: \", get_pairs_count(arr, n, sum))\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nsum = 12\r\n\r\nprint(\"Sum of the pairs are: \", get_pairs_count(arr, n, sum))\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn ","votes":null},{"text":"\r\n\r\n    # Create an empty hash\r\n    count = {}\r\n\r\n    # Traverse through all array elements\r\n    for i in range(n):\r\n\r\n        # If current element is present in hash map\r\n        if arr[i] in count:\r\n            count[arr[i]] += 1\r\n\r\n        # If current element's complement is found\r\n        elif (sum - arr[i]) in count:\r\n            pairs = count[sum - arr[i]]\r\n            count[sum - arr[i]] += 1\r\n            count[arr[i]] = 1\r\n            return pairs\r\n\r\n        # Add current element to hash\r\n        else:\r\n            # Add current element to hash\r\n            count[arr[i]] = 1\r\n    return 0\r\n\r\n\r\n# Driver code\r\narr = [1, 5, 7, -1, 5]\r\nsum = 11\r\nn = len(arr)\r\n\r\n# Function call\r\npairs = get_pairs_count(arr, n, sum)\r\n\r\n# Print the result\r\nprint(\"Number of pairs with given sum = \" + str(pairs))\r\n\r\n\r\n# # TIME COMPLEXITY: O(N)\r\n# # SPACE COMPLEXITY: O(N)\r\n\r\n# # APPROACH 2: HASHING\r\n\r\n#","votes":null},{"text":"\r\n    d = {}\r\n    count = 0\r\n    for i in range(n):\r\n        if (arr[i] in d):\r\n            count += 1\r\n        else:\r\n            d[sum - arr[i]] = 1\r\n    return count\r\n\r\n\r\n# Driver code\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nsum = 5\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n# Time Complexity: O(n)\r\n# Auxiliary Space: O(n)\r\n\r\n# Method 2 (Optimized)\r\n# Python program to find the\r\n# number of pairs in an array\r\n# whose sum is equal to given\r\n# number\r\n\r\n\r","votes":null},{"text":"\r\n    pairs_count = 0\r\n    arr.sort()\r\n    left = 0\r\n    right = n - 1\r\n    while left < right:\r\n        if arr[left] + arr[right] == sum:\r\n            pairs_count += 1\r\n            left += 1\r\n            right -= 1\r\n        elif arr[left] + arr[right] < sum:\r\n            left += 1\r\n        else:\r\n            right -= 1\r\n    return pairs_count\r\n\r\n\r","votes":null},{"text":"\r\n    # We sort the array and then find the pairs.\r\n    arr.sort()\r\n    start = 0\r\n    end = len(arr) - 1\r\n    count = 0\r\n    while start < end:\r\n        # If current pair is equal to sum, we increment the count and move the start and end pointers.\r\n        if arr[start] + arr[end] == sum:\r\n            count += 1\r\n            start += 1\r\n            end -= 1\r\n        # If current pair is greater than sum, we decrement the end pointer.\r\n        elif arr[start] + arr[end] > sum:\r\n            end -= 1\r\n        # If current pair is less than sum, we increment the start pointer.\r\n        else:\r\n            start += 1\r\n\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    pairs_count = 0\r\n    \r\n    # write your code here\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs","votes":null},{"text":"\r\n    # create a dictionary to store the frequency of elements\r\n    freq = {}\r\n    pairs = 0\r\n    for i in range(n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n\r\n    # iterate over the dictionary and check if the complement of the\r\n    # element is present in the dictionary\r\n    for i in range(n):\r\n        if (arr[i] + sum) in freq and arr[i] != arr[i] + sum:\r\n            pairs += freq[arr[i]] * freq[arr[i] + sum]\r\n\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a dictionary to store the frequency of pairs\r\n    pairs = {}\r\n\r\n    # Iterate through the array\r\n    for i in range(n):\r\n\r\n        # If the difference between the given sum and the current element is the current element\r\n        # the pair is found\r\n        diff = sum - arr[i]\r\n        if diff in pairs:\r\n            pairs[arr[i]] += pairs[diff]\r\n\r\n        # If the difference between the given sum and the current element is not the current element\r\n        # the pair is not found\r\n        elif diff != arr[i]:\r\n            pairs[arr[i]] = 0\r\n\r\n        # If the difference between the given sum and the current element is the current element\r\n        # the pair is not found\r\n        else:\r\n            pairs[arr[i]] = 1\r\n\r\n    # Return the number of pairs found\r\n    return pairs[arr[i]]\r\n\r\n\r\n# Test program\r\narr = [1, 5, 7, 1, 3, 4, 3, 2, 1]\r\nn = len(arr)\r\nsum = 10\r\nprint(get_pairs_count(arr, n, sum))\r\n# Output: 5\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n\r\n\r\n# Method 2\r","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(n):\r\n        if arr[i] not in d:\r\n            d[arr[i]] = 1\r\n        else:\r\n            d[arr[i]] += 1\r\n        \r\n    ans = 0\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            if sum - arr[i] in d:\r\n                ans += d[arr[i]] * d[sum - arr[i]]\r\n            if arr[i] == sum - arr[i]:\r\n                ans += d[arr[i]] * (d[arr[i]] - 1)\r\n                \r\n    return int(ans \/ 2)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Enter size of array: \", end=\"\")\r\n    n = int(input())\r\n    print(\"Enter the array: \", end=\"\")\r\n    arr = list(map(int, input().split()))\r\n    print(\"Enter the sum: \", end=\"\")\r\n    sum = int(input())\r\n    print(\"Pairs with sum equal to\", sum, \"are:\", get_pairs_count","votes":null},{"text":"\r\n\r\n    pairs = []\r\n    h = {}\r\n    for i in range(n):\r\n        if arr[i] in h:\r\n            pairs.append([arr[i], h[arr[i]]])\r\n        else:\r\n            h[sum - arr[i]] = arr[i]\r\n\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 1, 2, 2, 3, 4, 4]\r\n    sum = 3\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    arr.sort()\r\n    count = 0\r\n    l = 0\r\n    r = len(arr) - 1\r\n    while l < r:\r\n        if arr[l] + arr[r] == sum:\r\n            print(f\"{arr[l]} and {arr[r]} are found.\")\r\n            count += 1\r\n            l += 1\r\n            r -= 1\r\n        elif arr[l] + arr[r] < sum:\r\n            l += 1\r\n        else:\r\n            r -= 1\r\n    if count == 0:\r\n        print(f\"No pair found.\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10)\r\n    get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 11)\r\n    get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 100)\r\n    get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10)\r\n    get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 11)\r\n    get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 100)\r\n    get_pairs_count([1, 2, ","votes":null},{"text":"\r\n    # write code here\r\n    return 0\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(f\"Number of pairs that add up to {sum} is {get_pairs_count(arr, n, sum)}\")\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 15\r\n    print(f\"Number of pairs that add up to {sum} is {get_pairs_count(arr, n, sum)}\")\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 18\r\n    print(f\"Number of pairs that add up to {sum} is {get_pairs_count(arr, n, sum)}\")\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 20\r\n    print(f\"Number of pairs that add up to {sum} is {get_pairs_count(arr, n, sum)}\")\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 23\r\n    print(f\"Number of pairs that add up to {sum} is {get_pairs_count(arr, n, sum)}\")\r\n\r\n    arr = [1","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(n):\r\n        if sum - arr[i] in d:\r\n            return d[sum - arr[i]] + 1\r\n        d[arr[i]] = d.get(arr[i], 0) + 1\r\n    return 0\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [2, 3, 4, 8, 1, 5, 6, 7]\r\n    sum = 10\r\n    n = len(arr)\r\n    print(get_pairs","votes":null},{"text":"\r\n    pairs_count = 0\r\n    # Write your code here\r\n    arr.sort()\r\n\r\n    for i in range(n):\r\n        left = i + 1\r\n        right = n - 1\r\n\r\n        while left < right:\r\n            if arr[left] + arr[right] == sum:\r\n                pairs_count += 1\r\n                left += 1\r\n                right -= 1\r\n            elif arr[left] + arr[right] < sum:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n\r\n    return pairs_count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    sum = int(input())\r\n\r\n    result = get_pairs_count(arr, n, sum)\r\n\r\n    fptr.write(str(result) + \"\\n\")\r\n\r\n    fptr.close()\r\n\r\n\r\n'''\r\nSample Input 0\r\n\r\n6\r\n4 2 3 6 5 1\r\n10\r\n\r\nSample Output 0\r\n\r\n2\r\n\r\nExplanation 0\r\n\r\nThere are 2 pairs of numbers whose sum is equal to 10:\r\n\r\n4 + 6 = 10\r\n6 + 4 = 10\r\n\r\nSample Input 1\r\n\r\n6\r\n1 5 3 2 6 7\r\n15\r\n\r\nSample Output 1\r\n\r\n1\r\n\r\nExplanation 1\r\n\r\nThere is 1 pair of numbers whose sum is equal to 15:\r\n\r\n5 + 10 = 15\r\n'''\r\n\r\n'''\r\nTime Complexity: O(N","votes":null},{"text":"\r\n    pair_count = 0\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                print(f\"{arr[i]} {arr[j]}\")\r\n                pair_count += 1\r\n\r\n    return pair_count\r\n\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nsum = 7\r\n\r\ncount = get_pairs_count(arr, n, sum)\r\nprint(","votes":null},{"text":"\r\n    # create an empty list\r\n    pairs = []\r\n    \r\n    # loop through the array\r\n    for i in range(0, n-1):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    \r\n    return pairs\r\n\r\nif __name__ == '__main__':\r\n    # get the input from the user\r\n    n = int(input(\"Enter the size of the array: \"))\r\n    arr = list(map(int, input(\"Enter the array element: \").split()))\r\n    sum = int(input(\"Enter the sum: \"))\r\n    print(\"The pairs are: \", get_pairs_count(arr, n, sum))\r\n    \r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nEnter the size of the array: 5\r\nEnter the array element: 1 3 4 3 2\r\nEnter the sum: 6\r\nThe pairs are:  [1, 5] [2, 4] [3, 3]\r\n\r\nSAMPLE 2\r\n\r\nEnter the size of the array: 4\r\nEnter the array element: 1 3 4 5\r\nEnter the sum: 6\r\nThe pairs are:  [1, 5] [2, 4] [3, 3]\r\n\r\nSAMPLE 3\r\n\r\nEnter the size of the array: 6\r\nEnter the array element: 2 3 4 5 5 6\r\nEnter the sum: 5","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 5, 7, 1, 3, 4, 3, 2, 5, 1]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n,","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    return pairs\r\n\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nsum = 4\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n^2)\r\n\r\n# Optimized Solution:\r\n\r","votes":null},{"text":"\r\n\r\n    if n < 2:\r\n        return 0\r\n\r\n    pairs_count = 0\r\n    arr.sort()\r\n\r\n    left_index = 0\r\n    right_index = n - 1\r\n\r\n    while left_index < right_index:\r\n        if arr[left_index] + arr[right_index] == sum:\r\n            pairs_count += 1\r\n\r\n            left_index += 1\r\n            right_index -= 1\r\n        elif arr[left_index] + arr[right_index] < sum:\r\n            left_index += 1\r\n        else:\r\n            right_index -= 1\r\n\r\n    return pairs_count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [3, 5, 2, 1, 4]\r\n    sum = 7\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7]\r\n    sum = 10\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [3, 5, 2, 1, 4]\r\n    sum = 14\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [3, 5, 2, 1, 4]\r\n    sum = 10\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [3, 5, 2, 1, 4]\r\n    sum = 16\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    sum = 6\r\n  ","votes":null},{"text":"\r\n    pairs = {}\r\n    for i in range(n):\r\n        if arr[i] not in pairs:\r\n            pairs[sum - arr[i]] = [i]\r\n        else:\r\n            pairs[sum - arr[i]].append(i)\r\n    return len(pairs[sum - arr[i]])\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    sum = 7\r\n    print(\"Number of Pairs in the Array :\", get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    sum = 8\r\n    print(\"Number of Pairs in the Array :\", get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    sum = 6\r\n    print(\"Number of Pairs in the Array :\", get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    sum = 3\r\n    print(\"Number of Pairs in the Array :\", get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    sum = 1\r\n    print(\"Number of Pairs in the Array :\", get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    sum = 2\r\n    print(","votes":null},{"text":"\r\n    if sum == 0:\r\n        return 1\r\n    if n == 1:\r\n        return 0\r\n    if sum in arr:\r\n        return 1\r\n    pairs = 0\r\n    for i in range(0, n):\r\n        if i > 0 and arr[i] == arr[i - 1]:\r\n            continue\r\n        pairs += get_pairs_count(arr[i + 1:], n - 1 - i, sum - arr[i])\r\n    return pairs\r\n\r\n\r\nprint(get_pairs_count([5, 1, 3, 4, 2], 5, 6))\r\nprint(get_pairs_count([5, 1, 3, 4, 2], 5, 10))\r\nprint(get_pairs_count([1, 1, 1, 1, 1], 5, 2))\r\nprint(","votes":null},{"text":"\r\n\r\n    # Initialize result\r\n    result = 0\r\n\r\n    # Sort the array\r\n    arr.sort()\r\n\r\n    # Traverse through all elements\r\n    for i in range(0, n):\r\n        # Find the pair using two pointers\r\n        j = i + 1\r\n        k = n - 1\r\n\r\n        while (j < k):\r\n            # If current pair sum is equal to 'sum' then\r\n            # increment count and move both pointers\r\n            if (arr[i] + arr[j] + arr[k] == sum):\r\n                result += 1\r\n                j += 1\r\n                k -= 1\r\n            # Else move the smaller pointer\r\n            # according to the sum\r\n            elif (arr[i] + arr[j] + arr[k] < sum):\r\n                j += 1\r\n            else:\r\n                k -= 1\r\n\r\n    return result\r\n\r\n\r\n# Driver program to test above function\r\narr = [1, 4, 45, 6, 10, 8]\r\nsum = 22\r\nn = len(arr)\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n# This code is contributed by Nikita Tiwari.\r\n\r\n\r\n# Python3 program to count triplets\r\n# with a given sum.\r\n\r\n# A function to count triplets with sum 'sum'\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    arr_set = set(arr)\r\n    for i in range(0, n):\r\n        comp = sum - arr[i]\r\n        if comp in arr_set:\r\n            count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().rstrip().split()))\r\n    sum = int(input())\r\n\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n# 2\r\n# 1 2 3 4 5\r\n# 7\r\n\r\n# 3\r\n# 1 2 3 4 5 6\r\n# 7\r\n\r\n# 5\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# 100\r\n\r\n# 6\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# 1000\r\n\r\n# 7\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# 10000\r\n\r\n# 8\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# 100000\r\n\r\n# 9\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# 1000000\r\n\r\n# 10\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# 10000000\r\n\r\n# 11\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# 100","votes":null},{"text":"\r\n    ans = []\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                ans.append([arr[i], arr[j]])\r\n    return ans\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [2, 3, 5, 6, 6, 8, 9]\r\n    sum = 9\r\n    n = len(arr)\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n'''\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n'''\r\n\r\n\r","votes":null},{"text":"\r\n    pairs_count = 0\r\n    for i in range(0, n - 1):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 4, 45, 6, 10, 8]\r\n    n = len(arr)\r\n    sum = int(input('Enter a sum: '))\r\n    print(f'Number of pairs with sum {sum} in given array is {get_pairs_count(arr, n, sum)}')\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2), where n is the number of elements in the array\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\n","votes":null},{"text":"\r\n\r\n    arr.sort()\r\n    l, r = 0, n - 1\r\n    count = 0\r\n    while l < r:\r\n        if arr[l] + arr[r] == sum:\r\n            print(arr[l], arr[r])\r\n            l += 1\r\n            r -= 1\r\n            count += 1\r\n        elif arr[l] + arr[r] < sum:\r\n            l += 1\r\n        else:\r\n            r -= 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = {}\r\n    for i in range(n):\r\n        if arr[i] in pairs:\r\n            pairs[arr[i]] += 1\r\n        else:\r\n            pairs[arr[i]] = 1\r\n\r\n    pairs_count = 0\r\n    for i in range(n):\r\n        if (sum - arr[i]) in pairs and arr[i] != sum - arr[i]:\r\n            pairs_count += pairs[sum - arr[i]]\r\n\r\n    return pairs_count\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    d = dict()\r\n    pairs = 0\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            pairs += d[arr[i]]\r\n        if (sum - arr[i]) in d:\r\n            pairs += d[sum - arr[i]]\r\n        d[arr[i]] = d.get(arr[i], 0) + 1\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 5, 7, -1, 5]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(N)\r\nSpace Complexity: O(N)\r\n\r\nThe idea is to traverse the array once and use a hashmap to store the count of each element. \r\nWhile traversing the array, we check if the difference of sum and element is present in the hashmap. \r\nIf yes, we add the count of the element to the answer. We also increment the count of the element in the hashmap.\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    arr_hash = {}\r\n    for i in range(len(arr)):\r\n        if arr[i] in arr_hash:\r\n            arr_hash[arr[i]] += 1\r\n        else:\r\n            arr_hash[arr[i]] = 1\r\n    pairs = 0\r\n    for i in range(len(arr)):\r\n        if (sum - arr[i]) in arr_hash and arr[i] != sum - arr[i]:\r\n            pairs += arr_hash[sum - arr[i]]\r\n    print(pairs)\r\n\r\n\r\n# Driver code\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 3, 4, 5, 6, 7, 8, 8, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15]\r\n    sum = 16\r\n    get_pairs_count(arr, len(arr), sum)\r\n\r\n\r\n# Time complexity: O(n)\r\n# Space complexity: O(n)\r\n\r\n\r\n# Given a sorted array of distinct integers and a target sum, return all possible pairs of numbers with the target sum.\r\n# Input: [1, 2, 3, 4, 5], 6\r\n# Output: [[1, 5], [2, 4], [3, 3]]\r","votes":null},{"text":"\r\n    \r\n    # dictionary to store the count of elements in arr\r\n    count_ele = {}\r\n    pairs_count = 0\r\n    \r\n    # create a dictionary of the elements with their count\r\n    for i in range (0, n):\r\n        if (arr[i] in count_ele):\r\n            count_ele[arr[i]] += 1\r\n        else:\r\n            count_ele[arr[i]] = 1\r\n    \r\n    # if the diff of the sum and the element is equal to the element, then we can say that element is one of the pair\r\n    # else the element cannot be a part of the pair\r\n    for i in range (0, n):\r\n        diff = sum - arr[i]\r\n        if (diff in count_ele and diff != arr[i]):\r\n            pairs_count += 1\r\n    \r\n    return pairs_count\r\n    \r\n\r\n# Driver Code\r\narr = [1, 2, 4, 4, 3, 6, 3, 1, 2, 5]\r\nsum = 8\r\nn = len(arr)\r\nprint(\"Total pairs count:\", get_pairs_count(arr, n, sum))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n# Output:\r\n# Total pairs count: 3\r\n# Explanation: Pairs of elements with sum 8 are: [4, 4], [3, ","votes":null},{"text":"\r\n    \r\n    # Use an empty dictionary to store the count of pairs\r\n    pairs = {}\r\n    \r\n    # Loop through the array\r\n    for i in range(0, n):\r\n        \r\n        # Calculate the complementary number\r\n        complement = sum - arr[i]\r\n        \r\n        # If complement is present in the dictionary, increment its count\r\n        if complement in pairs:\r\n            pairs[complement] += 1\r\n        \r\n        # Otherwise, add the complement to the dictionary with count 1\r\n        else:\r\n            pairs[complement] = 1\r\n            \r\n    return pairs\r\n\r\n\r\n# Input array\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n# Get the total number of elements in the array\r\nn = len(arr)\r\n\r\n# Get the sum of all elements in the array\r\nsum = sum(arr)\r\n\r\n# Find all pairs in the array whose sum is equal to 10\r\npairs = get_pairs_count(arr, n, sum)\r\n\r\n# Print the count of all pairs\r\nprint(pairs)\r\n\r\n# Find all pairs in the array whose sum is equal to 19\r\npairs = get_pairs_count(arr, n, sum)\r\n\r\n# Print the count of all pairs\r\nprint(pairs)\r\n\r\n# Find all pairs in the array whose sum is equal to 20\r\npairs = get_pairs_count(arr, n, sum)\r\n\r\n# Print the count of all pairs\r\nprint(pairs)\r\n\r\n# Find all pairs in the array whose sum is equal to 21\r\npairs = get_pairs_count(arr, n, sum)\r\n\r\n# Print the count of all pairs\r\nprint(pairs)\r\n\r\n# Find all pairs in the array whose sum is equal to 22\r\npairs ","votes":null},{"text":"\r\n\r\n    # Create an empty hashmap.\r\n    hash = dict()\r\n\r\n    # Traverse through all array elements\r\n    for i in range(0, n):\r\n\r\n        # If the required sum is equal to the current element\r\n        if arr[i] == sum:\r\n\r\n            # Print the required pair\r\n            print(str(arr[i]) + \" \", end=\"\")\r\n\r\n            # Increment count\r\n            count += 1\r\n\r\n        # If there is any element in the map that equals to the required\r\n        # sum after deducting the current element\r\n        if (sum - arr[i]) in hash:\r\n\r\n            # Print the required pair\r\n            print(str(arr[i]) + \" \" + str(sum - arr[i]))\r\n\r\n            # Increment count\r\n            count += 1\r\n\r\n        # Add the current element to the map\r\n        hash[arr[i]] = True\r\n\r\n    # Return the count of pairs\r\n    return count\r\n\r\n\r\n# Driver code to test the above function\r\narr = [1, 4, 45, 6, 10, 8]\r\nsum = 16\r\nn = len(arr)\r\ncount = 0\r\nprint(\"Pairs with sum\", sum, \" are\")\r\nget_pairs_count(arr, n, sum)\r\n\r\n# Time complexity: O(n)\r\n# Space complexity: O(n)\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    arr.sort()\r\n    count = 0\r\n    for i in range(n - 1):\r\n        left = i + 1\r\n        right = n - 1\r\n        while left < right:\r\n            if arr[i] + arr[left] == sum:\r\n                count += 1\r\n            if arr[i] + arr[left] < sum:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Solution is based on the hashing theory.\r\n    # Time complexity: O(n)\r\n    # Space complexity: O(n)\r\n\r\n    # Create an empty hash table.\r\n    table = {}\r\n\r\n    # Traverse through the array.\r\n    for i in range(0, n):\r\n\r\n        # If current element is seen for the first time,\r\n        # then store it in hash table with its index.\r\n        if arr[i] not in table:\r\n            table[arr[i]] = i\r\n\r\n        # If current element is not seen for the first time,\r\n        # then check if there is any pair with current element\r\n        # whose sum is equal to the given sum.\r\n        else:\r\n\r\n            # Find the index of the earlier occurrence of current element.\r\n            # To find the number of pairs, subtract the earlier occurrence\r\n            # index from the current occurrence index. If the earlier occurrence\r\n            # index is greater than the current occurrence index, then\r\n            # it means that the pair lies in the array from index 0 to the\r\n            # current occurrence index. Otherwise, the pair lies in the array\r\n            # from the earlier occurrence index to n-1.\r\n            # Increment the count.\r\n            if (i - table[arr[i]]) > 0:\r\n                count += (i - table[arr[i]])\r\n\r\n            # Update the earlier occurrence index","votes":null},{"text":"\r\n    d = {}\r\n    d[arr[0]] = 1\r\n    for i in range(1, n):\r\n        d[arr[i]] = d.get(arr[i], 0) + 1\r\n    count = 0\r\n    for i in range(n):\r\n        if sum - arr[i] in d:\r\n            count += d[sum - arr[i]]\r\n    return count\r\n\r\n\r","votes":null}],"time":{"count":34.0,"avg":137334.0449411765,"std":35719.9674657205,"cov":0.2600955028}}
{"id":532,"question":"def check_permutation(str1, str2):\r\n    \"\"\"Write a function to check if the two given strings are permutations of each other.\"\"\"","answers":[{"text":"\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":65605.768},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":65734.112},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    return str1 == str2\r\n\r\n\r","votes":68327.832},{"text":"\r\n    return sorted(str1) == sorted(str2)\r\n\r\nstr1 = \"act\"","votes":75647.552},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":76145.324},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    if sorted(str1) == sorted(str2):\r\n        return True\r\n    return False\r\n\r\n\r","votes":80303.196},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":81837.324},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    if sorted(str1) == sorted(str2):\r\n        return True\r\n    return False\r\n\r\n\r\n","votes":81854.928},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r\nprint(check_permutation('hello', 'ehllo'))\r\nprint(check_permutation('hello', 'ehllo1'))\r\n\r\n\r","votes":82111.292},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # convert to lowercase\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    # sort the strings\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n\r\n    return str1 == str2\r\n\r\n\r","votes":82130.012},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1 = list(str1)\r\n    str2 = list(str2)\r\n    str1.sort()\r\n    str2.sort()\r\n\r\n    return str1 == str2\r\n\r\n\r","votes":84117.276},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":84836.84},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":86314.792},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    if sorted(str1) == sorted(str2):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":87312.44},{"text":"\r\n    \r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    \r\n    str1 = \"\".join(sorted(str1))\r\n    str2 = \"\".join(sorted(str2))\r\n    \r\n    return str1 == str2\r\n\r\n#Tests\r","votes":88091.924},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    letter_counts = {}\r\n    for letter in str1:\r\n        if letter not in letter_counts:\r\n            letter_counts[letter] = 1\r\n        else:\r\n            letter_counts[letter] += 1\r\n    for letter in str2:\r\n        if letter not in letter_counts:\r\n            return False\r\n        else:\r\n            letter_counts[letter] -= 1\r\n            if letter_counts[letter] == 0:\r\n                del letter_counts[letter]\r\n    return len(letter_counts) == 0\r\n\r\n\r","votes":90190.256},{"text":"\r\n    if sorted(str1) == sorted(str2):\r\n        return True\r\n    return False\r\n\r\n\r","votes":91263.264},{"text":"\r\n    s = set(str1)\r\n    for i in str2:\r\n        if i not in s:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":92614.524},{"text":"\r\n\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":97413.032},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1_dict = {}\r\n    str2_dict = {}\r\n\r\n    for char in str1:\r\n        if char in str1_dict:\r\n            str1_dict[char] += 1\r\n        else:\r\n            str1_dict[char] = 1\r\n\r\n    for char in str2:\r\n        if char in str2_dict:\r\n            str2_dict[char] += 1\r\n        else:\r\n            str2_dict[char] = 1\r\n\r\n    return str1_dict == str2_dict\r\n\r\n\r","votes":98068.568},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        return sorted(str1) == sorted(str2)\r\n\r","votes":98717.776},{"text":"\r\n    # If the strings are of different lengths, they cannot be permutations\r\n    if len(str1) != len(str2):\r\n        return False\r\n    # Create a list of the characters in the first string\r\n    str1_chars = list(str1)\r\n    # Create a list of the characters in the second string\r\n    str2_chars = list(str2)\r\n    # Sort the two lists\r\n    str1_chars.sort()\r\n    str2_chars.sort()\r\n    # Compare the sorted lists\r\n    return str1_chars == str2_chars\r\n\r\n\r","votes":99784.404},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    #Create a dictionary for each string\r\n    str1_dict = {}\r\n    str2_dict = {}\r\n    \r\n    #Iterate through the strings and increment the values of the dictionary\r\n    for c in str1:\r\n        str1_dict[c] = str1_dict.get(c, 0) + 1\r\n    for c in str2:\r\n        str2_dict[c] = str2_dict.get(c, 0) + 1\r\n    \r\n    #Compare the two dictionaries to see if they have the same key-value pairs\r\n    if str1_dict == str2_dict:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":100386.464},{"text":"\r\n    if len(str1) == len(str2):\r\n        str1 = str1.lower()\r\n        str2 = str2.lower()\r\n        return sorted(str1) == sorted(str2)\r\n    else:\r\n        return False\r\n\r\n\r\nprint(check_permutation(\"alex\", \"xela\"))  # True\r\nprint(check_permutation(\"alex\", \"xelae\"))  # False\r\nprint(check_permutation(\"alex\", \"alex\"))  # True\r\nprint(check_permutation(\"alex\", \"alexx\"))  # False\r\n\r\n\r\n# 2. Write a function to check if the two given strings are anagrams of each other.\r","votes":100464.08},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    for i, j in zip(str1, str2):\r\n        if i != j:\r\n            return False\r\n    return True\r\n\r\n\r\n# Test program\r\n\r","votes":100550.46},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1_dict = {}\r\n    for char in str1:\r\n        if char in str1_dict:\r\n            str1_dict[char] += 1\r\n        else:\r\n            str1_dict[char] = 1\r\n    for char in str2:\r\n        if char in str1_dict:\r\n            str1_dict[char] -= 1\r\n        else:\r\n            return False\r\n    for key in str1_dict:\r\n        if str1_dict[key] != 0:\r\n            return False\r\n    return True\r\n\r\n\r","votes":101153.072},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1_dict = {}\r\n    str2_dict = {}\r\n    for char in str1:\r\n        if char not in str1_dict:\r\n            str1_dict[char] = 1\r\n        else:\r\n            str1_dict[char] += 1\r\n    for char in str2:\r\n        if char not in str2_dict:\r\n            str2_dict[char] = 1\r\n        else:\r\n            str2_dict[char] += 1\r\n    if str1_dict == str2_dict:\r\n        return True\r\n    else:\r\n        return False\r\n    \r","votes":104553.708},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    d = {}\r\n    for i in str1:\r\n        if i in d:\r\n            d[i] += 1\r\n        else:\r\n            d[i] = 1\r\n        \r\n    for i in str2:\r\n        if i in d:\r\n            d[i] -= 1\r\n        else:\r\n            d[i] = -1\r\n    \r\n    for i in d.values():\r\n        if i != 0:\r\n            return False\r\n    return True\r\n\r","votes":104967.056},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    letters = {}\r\n    for char in str1:\r\n        if char in letters:\r\n            letters[char] += 1\r\n        else:\r\n            letters[char] = 1\r\n\r\n    for char in str2:\r\n        if char in letters:\r\n            letters[char] -= 1\r\n        else:\r\n            letters[char] = -1\r\n\r\n    for char in letters.values():\r\n        if char != 0:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":105238.324},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    char_dict = {}\r\n    for char in str1:\r\n        if char in char_dict:\r\n            char_dict[char] += 1\r\n        else:\r\n            char_dict[char] = 1\r\n    for char in str2:\r\n        if char in char_dict:\r\n            char_dict[char] -= 1\r\n        else:\r\n            char_dict[char] = -1\r\n    for k, v in char_dict.items():\r\n        if v != 0:\r\n            return False\r\n    return True\r\n\r\n","votes":106156.036},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    # if len(str1) == 0 and len(str2) == 0:\r\n    #     return True\r\n    # if len(str1) != len(str2):\r\n    #     return False\r\n    # if len(str1) == 1 and len(str2) == 1:\r\n    #     return True\r\n    # if len(str1) == 0 or len(str2) == 0:\r\n    #     return False\r\n    # if len(str1) == 1 or len(str2) == 1:\r\n    #     return False\r\n    # for i in range(len(str1)):\r\n    #     if str1[i] not in str2:\r\n    #         return False\r\n    # return True\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":106269.572},{"text":"\r\n    count = {}\r\n    for c in str1:\r\n        if c in count:\r\n            count[c] += 1\r\n        else:\r\n            count[c] = 1\r\n    \r\n    for c in str2:\r\n        if c in count:\r\n            count[c] -= 1\r\n        else:\r\n            return False\r\n    \r\n    return True\r\n\r\n\r","votes":108123.14},{"text":"\r\n    # Return True if the two strings are permutations of each other else False\r\n    if len(str1) != len(str2):\r\n        return False\r\n    elif sorted(str1) == sorted(str2):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":108769.424},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    dictionary = {}\r\n    for char in str1:\r\n        if char in dictionary:\r\n            dictionary[char] += 1\r\n        else:\r\n            dictionary[char] = 1\r\n    \r\n    for char in str2:\r\n        if char not in dictionary:\r\n            return False\r\n        else:\r\n            dictionary[char] -= 1\r\n            if dictionary[char] == 0:\r\n                dictionary.pop(char)\r\n    \r\n    return len(dictionary) == 0\r\n\r","votes":110143.256},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    for char in str1:\r\n        if char not in str2:\r\n            return False\r\n        str2 = str2.replace(char, '', 1)\r\n    return True\r\n\r\n\r","votes":110370.772},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    string_dict = {}\r\n    for i in range(len(str1)):\r\n        if str1[i] in string_dict:\r\n            string_dict[str1[i]] += 1\r\n        else:\r\n            string_dict[str1[i]] = 1\r\n    for i in range(len(str1)):\r\n        if str2[i] in string_dict:\r\n            string_dict[str2[i]] -= 1\r\n        else:\r\n            string_dict[str2[i]] = -1\r\n    for i in string_dict.values():\r\n        if i != 0:\r\n            return False\r\n    return True\r\n\r\n\r","votes":112177.136},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n\r\n    return str1 == str2\r\n\r\n\r","votes":113174.84},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    str_set1 = set(str1)\r\n    str_set2 = set(str2)\r\n    \r\n    return str_set1 == str_set2\r\n\r\n# print(check_permutation(\"car\", \"rat\"))\r\n# print(check_permutation(\"car\", \"race\"))\r\n# print(check_permutation(\"aab\", \"bba\"))\r\n# print(check_permutation(\"\", \"\"))\r\n# print(check_permutation(\"a\", \"a\"))\r\n# print(check_permutation(\"a\", \"b\"))\r\n\r\n\r","votes":113696.268},{"text":"\r\n    letters = str1.lower()\r\n    word = str2.lower()\r\n    if len(letters) != len(word):\r\n        return False\r\n    return sorted(letters) == sorted(word)\r\n\r\n\r","votes":113780.304},{"text":"\r\n    \r\n    # create a dictionary to track the characters in str1\r\n    char_counts = {}\r\n    \r\n    # iterate over the characters in str1\r\n    for char in str1:\r\n        \r\n        # if the character is not in the dictionary, add it with a count of 1\r\n        if char not in char_counts:\r\n            char_counts[char] = 1\r\n            \r\n        # otherwise, increment the count by 1\r\n        else:\r\n            char_counts[char] += 1\r\n    \r\n    # iterate over the characters in str2\r\n    for char in str2:\r\n        \r\n        # if the character is not in the dictionary, return False\r\n        if char not in char_counts:\r\n            return False\r\n            \r\n        # otherwise, decrement the count by 1\r\n        else:\r\n            char_counts[char] -= 1\r\n            \r\n            # if the count is equal to 0, remove the character from the dictionary\r\n            if char_counts[char] == 0:\r\n                del char_counts[char]\r\n    \r\n    # if the dictionary is empty, the strings are permutations of each other\r\n    if len(char_counts) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":114148.812},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    if len(str1) == 0 and len(str2) == 0:\r\n        return True\r\n\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":114715.152},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        return sorted(str1) == sorted(str2)\r\n\r\n\r\n# print(check_permutation(\"hello\", \"llohe\"))\r\n# print(check_permutation(\"hello\", \"llohde\"))\r\n# print(check_permutation(\"a\", \"b\"))\r\n\r\n\r\n# 2) Write a function that returns the first index of a given character in a given string.\r","votes":115671.248},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":119606.032},{"text":"\r\n    \r\n    # check if str1 and str2 have same length\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    # create an empty dictionary\r\n    d = {}\r\n\r\n    # loop through str1\r\n    for c in str1:\r\n        # check if character is in dictionary\r\n        if c in d:\r\n            # increment the character\r\n            d[c] += 1\r\n        else:\r\n            # add the character\r\n            d[c] = 1\r\n\r\n    # loop through str2\r\n    for c in str2:\r\n        # check if character is in dictionary\r\n        if c in d:\r\n            # decrement the character\r\n            d[c] -= 1\r\n        else:\r\n            # add the character\r\n            d[c] = -1\r\n\r\n    # loop through dictionary\r\n    for k in d:\r\n        # check if the value of the character is not 0\r\n        if d[k] != 0:\r\n            return False\r\n\r\n    # return True if all characters are 0\r\n    return True\r\n\r","votes":119717.684},{"text":"\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r\nprint(\">>> Check if the two given strings are permutations of each other\")\r\nprint(check_permutation(\"hello\", \"olleh\"))\r\nprint(check_permutation(\"hello\", \"olle\"))\r\nprint(check_permutation(\"hello\", \"world\"))\r\n\r\n\r","votes":119890.48},{"text":"\r\n    dic1 = {}\r\n    dic2 = {}\r\n    for s in str1:\r\n        dic1[s] = dic1.get(s, 0) + 1\r\n    for s in str2:\r\n        dic2[s] = dic2.get(s, 0) + 1\r\n    return dic1 == dic2\r\n\r\n\r","votes":120773.728},{"text":"\r\n    assert isinstance(str1, str) and isinstance(str2, str)\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1 = str1.lower()\r\n        str2 = str2.lower()\r\n        return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":120993.62},{"text":"\r\n\r\n    # sort the two strings\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n\r\n    # check if the two strings are identical\r\n    if str1 == str2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(check_permutation('hello', 'lehlo'))\r\nprint(check_permutation('hello', 'hello'))\r\nprint(check_permutation('hello', 'olleh'))\r\nprint(check_permutation('hello', 'helloo'))\r\nprint(check_permutation('hello', 'ohelol'))\r\nprint(check_permutation('hello', 'hellooo'))\r\nprint(check_permutation('hello', 'ollelh'))\r\nprint(check_permutation('hello', 'helloooo'))\r\nprint(check_permutation('hello', 'oohelllo'))\r\nprint(check_permutation('hello', 'hellooooo'))\r\nprint(check_permutation('hello', 'oohelllooo'))\r\nprint(check_permutation('hello', 'oohelllooooo'))\r\n\r\n\r","votes":122564.052},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    char_counts = {}\r\n    for character in str1:\r\n        char_counts[character] = char_counts.get(character, 0) + 1\r\n\r\n    for character in str2:\r\n        if character not in char_counts:\r\n            return False\r\n        char_counts[character] -= 1\r\n        if char_counts[character] == 0:\r\n            del char_counts[character]\r\n\r\n    return len(char_counts) == 0\r\n\r\n\r","votes":123241.68},{"text":"\r\n    d1 = {}\r\n    d2 = {}\r\n    for ch in str1:\r\n        d1[ch] = d1.get(ch, 0) + 1\r\n    for ch in str2:\r\n        d2[ch] = d2.get(ch, 0) + 1\r\n    return d1 == d2\r\n\r\n\r","votes":125262.012},{"text":"\r\n    # O(n) time | O(n) space\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    letter_1_count = {}\r\n    letter_2_count = {}\r\n\r\n    for letter in str1:\r\n        if letter not in letter_1_count:\r\n            letter_1_count[letter] = 1\r\n        else:\r\n            letter_1_count[letter] += 1\r\n\r\n    for letter in str2:\r\n        if letter not in letter_2_count:\r\n            letter_2_count[letter] = 1\r\n        else:\r\n            letter_2_count[letter] += 1\r\n\r\n    return letter_1_count == letter_2_count\r\n\r\n\r","votes":125266.5},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    # initialize dict with 0 for each letter\r\n    count_dict = {}\r\n    for i in range(len(str1)):\r\n        if str1[i] not in count_dict:\r\n            count_dict[str1[i]] = 0\r\n        if str2[i] not in count_dict:\r\n            count_dict[str2[i]] = 0\r\n        # increment the count of the letter in first string\r\n        count_dict[str1[i]] += 1\r\n        # decrement the count of the letter in second string\r\n        count_dict[str2[i]] -= 1\r\n    for i in range(len(str1)):\r\n        if count_dict[str1[i]] != 0:\r\n            # if any letter count is not 0, then the strings are not permutations\r\n            return False\r\n    # if we reach this point, then the strings are permutations of each other\r\n    return True\r\n\r\n\r","votes":125874.884},{"text":"\r\n    # O(n) time and O(1) space\r\n    if len(str1) != len(str2):\r\n        return False\r\n    char_map = {}\r\n    for c in str1:\r\n        if c in char_map:\r\n            char_map[c] += 1\r\n        else:\r\n            char_map[c] = 1\r\n    for c in str2:\r\n        if c not in char_map or char_map[c] <= 0:\r\n            return False\r\n        char_map[c] -= 1\r\n    return True\r\n\r\n\r","votes":127040.484},{"text":"\r\n    # Create a dictionary of all the elements in the string\r\n    char_dict = {}\r\n    for char in str1:\r\n        if char in char_dict:\r\n            char_dict[char] += 1\r\n        else:\r\n            char_dict[char] = 1\r\n\r\n    # Go through the string and check if the characters are the same\r\n    for char in str2:\r\n        if char in char_dict:\r\n            char_dict[char] -= 1\r\n        else:\r\n            return False\r\n    return True\r\n\r\n\r","votes":127799.36},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n        \r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    \r\n    return str1 == str2\r\n    \r\n# ------------------------------------------------------------------------------\r\n\r","votes":128055.944},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":131668.508},{"text":"\r\n    str1 = str1.replace(\" \", \"\")\r\n    str2 = str2.replace(\" \", \"\")\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        if sorted(str1) == sorted(str2):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r","votes":132228.256},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    sorted_str1 = sorted(str1)\r\n    sorted_str2 = sorted(str2)\r\n    for index in range(len(str1)):\r\n        if sorted_str1[index] != sorted_str2[index]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":134924.42},{"text":"\r\n\r\n    # check if the strings have the same length\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # create a dictionary to store the number of occurrences of each characters\r\n    # in the string\r\n    dict1 = {}\r\n    dict2 = {}\r\n\r\n    # iterate over the string\r\n    for char in str1:\r\n        if char not in dict1:\r\n            dict1[char] = 1\r\n        else:\r\n            dict1[char] += 1\r\n\r\n    # iterate over the string\r\n    for char in str2:\r\n        if char not in dict2:\r\n            dict2[char] = 1\r\n        else:\r\n            dict2[char] += 1\r\n\r\n    # iterate over the dictionary to check if the number of occurrences of each\r\n    # character in the string1 is equal to the number of occurrences of each\r\n    # character in the string2\r\n    for char in dict2:\r\n        if char not in dict1 or dict1[char] != dict2[char]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":135085.42},{"text":"\r\n    \r\n    # initialize a dictionary\r\n    dictionary = {}\r\n    \r\n    # iterate over the string\r\n    for i in range(0,len(str1)):\r\n        if str1[i] not in dictionary:\r\n            dictionary[str1[i]] = 1\r\n        else:\r\n            dictionary[str1[i]] += 1\r\n            \r\n    # iterate over the string\r\n    for i in range(0,len(str2)):\r\n        if str2[i] not in dictionary:\r\n            return False\r\n        else:\r\n            dictionary[str2[i]] -= 1\r\n            \r\n    # check if all the values are 0\r\n    for value in dictionary.values():\r\n        if value != 0:\r\n            return False\r\n    \r\n    # if all the values are 0, it means the strings are permutations of each other\r\n    return True\r\n\r\n\r\nstr1 = \"hello\"\r\nstr2 = \"lohel\"\r\n\r\nif check_permutation(str1, str2):\r\n    print(\"Two strings are permutations of each other\")\r\nelse:\r\n    print(\"Two strings are not permutations of each other\")\r\n\r\n\r\n# Time complexity: O(n)\r\n# Space complexity: O(1)\r\n\r\n\"\"\"\r\nSample Input - \r\n\r\nstr1 = \"hello\"\r\nstr2 = \"lohel\"\r\n\r\nSample Output - \r\nTwo strings are permutations of each other\r\n\r\nExplanation - \r\nThe frequency of each character in str1 is:\r\n{h: 1, e: 1, l: 2, o: 1}.\r\nThe frequency of each character in str2 is:\r\n{l: 2, o: 1, h: 1, e: 1}.\r\nThe two strings are permutations of each other since they have the same characters with the same frequency.\r\n\"\"\"\r\n\r\n\r\n# Approach 2: Using sort()\r\n\r","votes":135999.904},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    \r\n    for letter in str1:\r\n        if letter in str2:\r\n            str2 = str2.replace(letter, '', 1)\r\n        else:\r\n            return False\r\n            \r\n    return True\r\n\r\nprint(check_permutation('abcd', 'dbca'))\r\nprint(check_permutation('abcd', 'dbac'))\r\nprint(check_permutation('abcdef', 'fedcba'))\r\nprint(check_permutation('abcdef', 'fedcb'))\r\nprint(check_permutation('apple', 'pleap'))\r\nprint(check_permutation('apple', 'pealp'))\r\n\r","votes":136120.812},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    dict1 = {}\r\n    dict2 = {}\r\n    for i in range(len(str1)):\r\n        if str1[i] in dict1:\r\n            dict1[str1[i]] += 1\r\n        else:\r\n            dict1[str1[i]] = 1\r\n    for j in range(len(str2)):\r\n        if str2[j] in dict2:\r\n            dict2[str2[j]] += 1\r\n        else:\r\n            dict2[str2[j]] = 1\r\n    if dict1 == dict2:\r\n        return True\r\n    return False\r\n\r\n\r\nprint(check_permutation(\"abc\", \"bca\"))\r\nprint(check_permutation(\"abc\", \"bcax\"))\r\nprint(check_permutation(\"\", \"\"))\r\nprint(check_permutation(\"abc\", \"cba\"))\r\nprint(check_permutation(\"abc\", \"cab\"))\r\n","votes":137620.172},{"text":"\r\n    # create a dictionary for str1\r\n    str1_dict = {}\r\n    for char in str1:\r\n        if char not in str1_dict:\r\n            str1_dict[char] = 1\r\n        else:\r\n            str1_dict[char] += 1\r\n    # create a dictionary for str2\r\n    str2_dict = {}\r\n    for char in str2:\r\n        if char not in str2_dict:\r\n            str2_dict[char] = 1\r\n        else:\r\n            str2_dict[char] += 1\r\n    # check if the two dicts are equal\r\n    return str1_dict == str2_dict\r\n\r\n\r","votes":140227.048},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1 = str1.replace(\" \", \"\")\r\n    str2 = str2.replace(\" \", \"\")\r\n\r\n    for c in str1:\r\n        if c not in str2:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":143972.976},{"text":"\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r\nstr1 = 'abc'\r\nstr2 = 'cba'\r\n\r\nprint(f'{str1} and {str2} are permutations of each other: {check_permutation(str1, str2)}')\r\n\r\nstr1 = 'abc'\r\nstr2 = 'cab'\r\n\r\nprint(f'{str1} and {str2} are permutations of each other: {check_permutation(str1, str2)}')\r\n\r\nstr1 = 'abc'\r\nstr2 = 'abcc'\r\n\r\nprint(f'{str1} and {str2} are permutations of each other: {check_permutation(str1, str2)}')\r\n\r\nstr1 = 'abc'\r\nstr2 = 'abz'\r\n\r\nprint(f'{str1} and {str2} are permutations of each other: {check_permutation(str1, str2)}')\r\n\r\nstr1 = 'abc'\r\nstr2 = 'abc'\r\n\r\nprint(f'{str1} and {str2} are permutations of each other: {check_permutation(str1, str2)}')","votes":146434.308},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1_dict = {}\r\n    str2_dict = {}\r\n\r\n    for char in str1:\r\n        if char in str1_dict:\r\n            str1_dict[char] += 1\r\n        else:\r\n            str1_dict[char] = 1\r\n\r\n    for char in str2:\r\n        if char in str2_dict:\r\n            str2_dict[char] += 1\r\n        else:\r\n            str2_dict[char] = 1\r\n\r\n    return str1_dict == str2_dict\r\n\r","votes":154267.388},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    if len(str1) != len(str2):\r\n        return False\r\n    d = {}\r\n    for i in str1:\r\n        if i in d:\r\n            d[i] += 1\r\n        else:\r\n            d[i] = 1\r\n    for i in str2:\r\n        if i in d:\r\n            d[i] -= 1\r\n        else:\r\n            d[i] = -1\r\n    for i in d.values():\r\n        if i != 0:\r\n            return False\r\n    return True\r\n\r\n\r","votes":182001.504},{"text":"\r\n    if len(str1) != len(str2):\r\n        return 0\r\n    char_dict = {}\r\n    for char in str1:\r\n        if char in char_dict:\r\n            char_dict[char] += 1\r\n        else:\r\n            char_dict[char] = 1\r\n    for char in str2:\r\n        if char in char_dict:\r\n            char_dict[char] -= 1\r\n        else:\r\n            return 0\r\n    for value in char_dict.values():\r\n        if value != 0:\r\n            return 0\r\n    return 1\r\n\r\n\r","votes":182201.988},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    letters = {}\r\n    for letter in str1:\r\n        if letter in letters:\r\n            letters[letter] += 1\r\n        else:\r\n            letters[letter] = 1\r\n    for letter in str2:\r\n        if letter in letters:\r\n            letters[letter] -= 1\r\n        else:\r\n            letters[letter] = -1\r\n        if letters[letter] < 0:\r\n            return False\r\n    return True\r\n\r\n\r\nprint(check_permutation(\"cat\", \"tac\"))\r\nprint(check_permutation(\"cat\", \"act\"))\r\nprint(check_permutation(\"cat\", \"actt\"))\r\nprint(check_permutation(\"cat\", \"acttca\"))\r\n\r\n\r","votes":196711.996},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    char_counts = [0] * 256\r\n    for char in str1:\r\n        char_counts[ord(char)] += 1\r\n    for char in str2:\r\n        char_counts[ord(char)] -= 1\r\n        if char_counts[ord(char)] < 0:\r\n            return False\r\n    return True\r\n\r\n\r","votes":205518.86},{"text":"\r\n    if len(str1) == len(str2):\r\n        str1_dict = {}\r\n        str2_dict = {}\r\n\r\n        for i in range(len(str1)):\r\n            str1_dict[str1[i]] = str1_dict.get(str1[i], 0) + 1\r\n            str2_dict[str2[i]] = str2_dict.get(str2[i], 0) + 1\r\n        \r\n        if str1_dict == str2_dict:\r\n            return True\r\n\r\n    return False\r\n\r\n#Test\r\nprint(check_permutation(\"hello\", \"ohell\")) #True\r\nprint(check_permutation(\"hello\", \"hell\")) #False\r\nprint(check_permutation(\"hello\", \"hello\")) #True\r\nprint(check_permutation(\"hell\", \"hello\")) #False\r\nprint(check_permutation(\"\", \"\")) #True\r\nprint(check_permutation(\"a\", \"b\")) #False\r\n\r\n\r\n\r\n#Method 2 - using sort\r","votes":217381.316},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    letters = {}\r\n\r\n    for letter in str1:\r\n        if letter not in letters:\r\n            letters[letter] = 1\r\n        else:\r\n            letters[letter] += 1\r\n\r\n    for letter in str2:\r\n        if letter not in letters:\r\n            return False\r\n        else:\r\n            letters[letter] -= 1\r\n\r\n    for count in letters.values():\r\n        if count != 0:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    str1 = input(\"Enter the first string: \")\r\n    str2 = input(\"Enter the second string: \")\r\n    print(check_permutation(str1, str2))\r\n\r\n\r\n# Test Cases\r\n\r\n# Test Case 1\r\n#     Input: Enter the first string: abc\r\n#            Enter the second string: acb\r\n#     Output: True\r\n\r\n# Test Case 2\r\n#     Input: Enter the first string: abc\r\n#            Enter the second string: ac\r\n#     Output: False\r\n\r\n# Test Case 3\r\n#     Input: Enter the first string: abc\r\n#            Enter the second string: abc\r\n#     Output: True\r\n\r\n# Test Case 4\r\n#     Input: Enter the first string: abcd\r\n#            Enter the second string: acdb\r\n#     Output: False\r\n\r\n# Test Case 5\r\n#     Input: Enter the first string: abcd\r\n#            Enter the second string: badc\r\n#     Output: True\r\n\r\n# Test Case 6\r\n#     Input: Enter the first string: abcd\r\n#            Enter the second string: badc\r\n#     Output: True\r\n\r\n# Test Case 7\r\n#     Input: Enter the first string: abc","votes":282799.312},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            return False\r\n    return True\r\n\r\n\r\nprint(check_permutation('hello', 'hloe'))\r\nprint(check_permutation('hello', 'world'))\r\nprint(check_permutation('hello', 'hello'))\r\nprint(check_permutation('hello', 'olleh'))\r\nprint(check_permutation('hello', 'ohell'))\r\nprint(check_permutation('hello', 'heoll'))\r\nprint(check_permutation('hello', 'loheh'))\r\nprint(check_permutation('hello', 'lloeh'))\r\nprint(check_permutation('hello', 'lleoh'))\r\nprint(check_permutation('hello', 'lloeh'))\r\nprint(check_permutation('hello', 'llloe'))\r\nprint(check_permutation('hello', 'lloeh'))\r\n\r\n\r\n# Using set difference\r","votes":332577.476},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # Create a hashmap to store the count of each character in str1\r\n    count_map = {}\r\n    for char in str1:\r\n        count_map[char] = count_map.get(char, 0) + 1\r\n\r\n    # Iterate through the second string and decrease the frequency count of each character in the hashmap\r\n    for char in str2:\r\n        if char not in count_map:\r\n            return False\r\n        count_map[char] -= 1\r\n\r\n    # If all the frequencies are zero, then the strings are permutations of each other\r\n    for val in count_map.values():\r\n        if val != 0:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\nprint(check_permutation('car', 'rac'))\r\n# True\r\nprint(check_permutation('car', 'bar'))\r\n# False\r\nprint(check_permutation('ab', 'ba'))\r\n# True\r\nprint(check_permutation('abc', 'acb'))\r\n# True\r\nprint(check_permutation('abc', 'bca'))\r\n# True\r\nprint(check_permutation('abc', 'bca'))\r\n# True\r\nprint(check_permutation('abc', 'bca'))\r\n# True\r\nprint(check_permutation('car', 'car'))\r\n# True\r\nprint(check_permutation('abcd', 'acdb'))\r\n# True\r\nprint(check_permutation('abc', 'acb'))\r\n# True\r\nprint(check_permutation('ac', 'ca'))\r\n# True\r\nprint(check_permutation('acb', 'cba'))\r\n# True\r\nprint(check_permutation('abc', 'abcd'))\r\n# False\r\nprint(check_permutation('abcde', 'cdeab')","votes":null},{"text":"\r\n    # if len(str1) != len(str2):\r\n    #     return False\r\n    # return sorted(str1) == sorted(str2)\r\n    return Counter(str1) == Counter(str2)\r\n\r\n\r","votes":null},{"text":"\r\n    # the first approach:\r\n    # if len(str1) != len(str2):\r\n    #     return False\r\n    #\r\n    # for char in str1:\r\n    #     if char not in str2:\r\n    #         return False\r\n    #\r\n    # return True\r\n\r\n    # the second approach:\r\n    return len(str1) == len(str2)","votes":null},{"text":"\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r\nprint(check_permutation('abc', 'bac'))\r\nprint(check_permutation('abc', 'cba'))\r\nprint(check_permutation('abc', 'cba'))\r\nprint(check_permutation('abc', 'bac'))\r\nprint(check_permutation('pqrstuvwxyz', 'qrstuvwxyzp'))\r\nprint(check_permutation('pqrstuvwxyz', 'pqrstvwxyz'))\r\nprint(check_permutation('pqrstuvwxyz', 'pqrstvwxyz'))\r\nprint(check_permutation('aa', 'aa'))\r\nprint(check_permutation('aa', 'ab'))\r\nprint(check_permutation('aa', 'bb'))\r\nprint(check_permutation('ax', 'xa'))\r\nprint(check_permutation('aab', 'bab'))\r\nprint(check_permutation('aab', 'aab'))\r\nprint(check_permutation('aab', 'baa'))\r\nprint(check_permutation('aab', 'aba'))\r\nprint(check_permutation('aab', 'bab'))\r\nprint(check_permutation('aab', 'baa'))\r\nprint(check_permutation('aab', 'aba'))\r\nprint(check_permutation('aab', 'bab'))\r\nprint(check_permutation('aab', 'baa'))\r\nprint(check_permutation('aab', 'aba'))\r\nprint(check_permutation('abc', 'bca'))\r\nprint(check_permutation('abc', 'cab'))\r\nprint(check_permutation('abc', 'bac'))\r\nprint(check_permutation('aa', 'aa'))\r\nprint(check_permutation('aa', 'ab'))\r\nprint(check_permu","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    dict = {}\r\n    for i in range(len(str1)):\r\n        dict[str1[i]] = dict.get(str1[i], 0) + 1\r\n    for i in range(len(str2)):\r\n        dict[str2[i]] = dict.get(str2[i], 0) - 1\r\n        if dict[str2[i]] < 0:\r\n            return False\r\n    return True\r\n\r\n\r\n# Test program\r\nprint(\"Enter two strings to check if they are permutations of each other:\")\r\nstr1 = input(\"String 1: \")\r\nstr2 = input(\"String 2: \")\r\nif check_permutation(str1, str2):\r\n    print(\"Strings are permutations of each other.\")\r\nelse:\r\n    print(\"Strings are not permutations of each other.\")\r\n\r\n\r\n# Method 2\r\n# Sort the two strings and compare them\r\n\r","votes":null},{"text":"\r\n    \r\n    # we will use a hashmap\r\n    # we will iterate through the first string\r\n    # if the hashmap doesn't have that character, we will add it\r\n    # if it does have the character, we will remove it\r\n    # we will keep doing this until there are no characters left\r\n    # if there are no characters left in the hashmap, we will return true\r\n    # if the hashmap is not empty, we will return false\r\n    \r\n    # initialize a hashmap\r\n    h = {}\r\n    \r\n    # iterate through the first string\r\n    for c in str1:\r\n        \r\n        # if the hashmap doesn't have that character, we will add it\r\n        if c not in h:\r\n            h[c] = 1\r\n        # if it does have the character, we will remove it\r\n        else:\r\n            del h[c]\r\n            \r\n        # if we are left with an empty hashmap, we will return true\r\n        if len(h) == 0:\r\n            return True\r\n            \r\n    # if we are left with a non-empty hashmap, we will return false\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(check_permutation(\"abc\", \"cab\"))\r\n    print(check_permutation(\"abc\", \"abc\"))\r\n    print(check_permutation(\"abc\", \"cba\"))\r\n    print(check_permutation(\"abcc\", \"ccba\"))\r\n    print(check_permutation(\"abc\", \"cbac\"))\r\n    print(check_permutation(\"12345\", \"43215\"))\r\n    print(check_permutation(\"12345\", \"4321\"))\r\n    print(check_permutation(\"12345\", \"12345\"))\r\n    print(check_permutation(\"12345\", \"5432","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # check if str1 is a permutation of str2\r\n    str1_set = set(str1)\r\n    str2_set = set(str2)\r\n\r\n    return str1_set == str2_set\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    str1 = \"abc\"\r\n    str2 = \"bac\"\r\n\r\n    if check_permutation(str1, str2):\r\n        print(\"Strings '{}' and '{}' are permutations of each other.\".format(str1, str2))\r\n    else","votes":null},{"text":"\r\n    str1 = set(str1.lower())\r\n    str2 = set(str2.lower())\r\n    return str1 == str2\r\n\r\n\r\n# Test cases\r\nprint(check_permutation(\"\", \"\"))\r\nprint(check_permutation(\"\", \"a\"))\r\nprint(check_permutation(\"a\", \"a\"))\r\nprint(check_permutation(\"a\", \"A\"))\r\nprint(check_permutation(\"a\", \"b\"))\r\nprint(check_permutation(\"abc\", \"acb\"))\r\nprint(check_permutation(\"abc\", \"bac\"))\r\nprint(check_permutation(\"abc\", \"bca\"))\r\nprint(check_permutation(\"abc\", \"cab\"))\r\nprint(check_permutation(\"abc\", \"cba\"))\r\nprint(check_permutation(\"abc\", \"bca\"))\r\nprint(check_permutation(\"abc\", \"acb\"))\r\nprint(check_permutation(\"abc\", \"cba\"))\r\nprint(check_permutation(\"aab\", \"baa\"))\r\nprint(check_permutation(\"aab\", \"aab\"))\r\nprint(check_permutation(\"aab\", \"bba\"))\r\nprint(check_permutation(\"aab\", \"aab\"))\r\nprint(check_permutation(\"aab\", \"bba\"))\r\nprint(check_permutation(\"AaBb\", \"bAB\"))\r\nprint(check_permutation(\"AaBb\", \"BaB\"))\r\nprint(check_permutation(\"AaBb\", \"AaB\"))\r\nprint(check_permutation(\"AaBb\", \"BbA\"))\r\nprint(check_permutation(\"AaBb\", \"BAa\"))\r\nprint(check_permutation(\"AaBb\", \"BbA\"))\r\nprint(check_permutation(\"AaBb\", \"AaB\"))\r\nprint(check_permutatio","votes":null},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    for char in str1:\r\n        if char in str2:\r\n            str2 = str2.replace(char, '')\r\n        else:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(check_permutation(\"abcd\", \"cdab\"))\r\n    print(check_permutation(\"abcd\", \"cdab\"))\r\n    print(check_permutation(\"abcd\", \"abcde\"))\r\n    print(check_permutation(\"abcd\", \"bcda\"))\r\n    print(check_permutation(\"abcd\", \"acdb\"))\r\n    print(check_permutation(\"abcd\", \"bacd\"))\r\n    print(check_permutation(\"abcd\", \"abdc\"))\r\n    print(check_permutation(\"abcd\", \"acdb\"))\r\n    print(check_permutation(\"abcd\", \"aacd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"bacd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(\"abcd\", \"abcd\"))\r\n    print(check_permutation(","votes":null},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    if len(str2) != len(str1):\r\n        return False\r\n\r\n   ","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    if sorted(str1) == sorted(str2):\r\n        return True\r\n    return False\r\n\r\n\r\nassert check_permutation('hello', 'o","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    str1_list = list(str1)\r\n    str2_list = list(str2)\r\n    \r\n    for i in range(len(str1)):\r\n        if str1_list[i] not in str2_list:\r\n            return False\r\n        \r\n        str2_list.remove(str1_list[i])\r\n    \r\n    return True\r\n\r\n\r\nstr1 = 'abcde'\r\nstr2 = 'ecdab'\r\n\r\nprint(check_permutation(str1, str2))\r\n# True\r\n\r\nstr1 = 'abc","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    dict1 = {}\r\n    for i in range(len(str1)):\r\n        dict1[str1[i]] = dict1.get(str1[i], 0) + 1\r\n    dict2 = {}\r\n    for i in range(len(str2)):\r\n        dict2[str2[i]] = dict2.get(str2[i], 0) + 1\r\n    return dict1 == dict2\r\n\r\n\r\nprint(check_permutation(\"hello\", \"olleh\"))\r\nprint(check_permutation(\"hello\", \"olleh\"))\r\nprint(check_permutation(\"hello\", \"olleh\"))\r\nprint(check_permutation(\"hello\", \"olleh\"))\r\n\r\n\"\"\"\r\n\r\nGiven two strings, write a method to decide if one is a permutation of the other.\r\n\r\nEXAMPLE\r\n\r\nInput: 'hello', 'olleh'\r\nOutput: True\r\n\r\nInput: 'hello', 'olleh'\r\nOutput: True\r\n\r\nInput: 'hello', 'olleh'\r\nOutput: True\r\n\r\nInput: 'hello', 'olleh'\r\nOutput: True\r\n\r\nHints:\r\nUse an additional data structure to keep track of the characters in the string.\r\n\r\n1. Sort the strings and compare them.\r\n2. Count the frequency of characters in each string. Compare the frequency dictionaries.\r\n3. XOR the characters in the strings. If the strings are permutations, the XOR of all the characters should be 0.\r\n4. Compare the strings as sets.","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    if sorted(str1) == sorted(str2):\r\n        return True\r\n    return False\r\n\r\n\r\nprint(check_permutation(\"hello\", \"","votes":null},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    char_set = set()\r\n\r\n    for char in str1:\r\n        char_set.add(char)\r\n\r\n    for char in str2:\r\n        if char in char_set:\r\n            char_set.remove(char)\r\n        else:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    count = 0\r\n    for i in str1:\r\n        for j in str2:\r\n            if i == j:\r\n                count += 1\r\n    if count == len(str1):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nstr1 = input(\"Enter the first string: \")\r\nstr2 = input(\"Enter the second string: \")\r\nif check_permutation(str1, str2):\r\n    print(\"The two strings are permutations of each other.\")\r\nelse:\r\n    print(\"The two strings are not permutations of each other.\")\r\n\r\n\r\n# Using the collections module\r\n\r","votes":null},{"text":"\r\n    \r\n    # Check if the strings have the same length\r\n    if len(str1) != len(str2):\r\n        return False;\r\n    \r\n    # Create a dictionary with the characters of the first string as keys\r\n    # and a count of the number of occurrences as values\r\n    first_char_dict = {}\r\n    for char in str1:\r\n        if char in first_char_dict:\r\n            first_char_dict[char] += 1\r\n        else:\r\n            first_char_dict[char] = 1\r\n    \r\n    # Iterate through the second string and check if the characters are in the first dictionary\r\n    # and if so, reduce the value by 1\r\n    for char in str2:\r\n        if char in first_char_dict:\r\n            first_char_dict[char] -= 1\r\n            \r\n            if first_char_dict[char] == 0:\r\n                # Remove the key from the dictionary if the value is 0\r\n                first_char_dict.pop(char)\r\n        else:\r\n            # The second string contains a character that doesn't exist in the first string\r\n            return False\r\n    \r\n    # Check if the dictionary is empty, if it is, then the strings are permutations of each other\r\n    if first_char_dict == {}:\r\n        return True\r\n    \r\n    return False\r\n\r\n# Test cases\r\nprint(check_permutation(\"hello\", \"lohel\"))\r\nprint(check_permutation(\"hello\", \"olheh\"))\r\nprint(check_permutation(\"hello\", \"hello\"))\r\nprint(check_permutation(\"hello\", \"helloo\"))\r\nprint(check_permutation(\"hello\", \"olhe\"))\r\nprint(check_permutation(\"hello\", \"helloo\"))\r\nprint(check_permutation(\"hello\", \"helloooo\"))\r\nprint(check_permutation(\"hello\", \"hellooo\"))\r\nprint(check_pe","votes":null},{"text":"\r\n\r\n    # create a dictionary to map each string's character to its count\r\n    map_str1 = {}\r\n    for char in str1:\r\n        if char not in map_str1.keys():\r\n            map_str1[char] = 1\r\n        else:\r\n            map_str1[char] += 1\r\n\r\n    map_str2 = {}\r\n    for char in str2:\r\n        if char not in map_str2.keys():\r\n            map_str2[char] = 1\r\n        else:\r\n            map_str2[char] += 1\r\n\r\n    # check if the two strings have the same characters\r\n    if set(map_str1.keys()) != set(map_str2.keys()):\r\n        return False\r\n\r\n    # check if the two strings have the same characters count\r\n    for key in map_str1.keys():\r\n        if map_str1[key] != map_str2[key]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\n# Test cases:\r\nprint(check_permutation(\"hello\", \"olleh\"))\r\nprint(check_permutation(\"hello\", \"hello\"))\r\nprint(check_permutation(\"hello\", \"hhllo\"))\r\nprint(check_permutation(\"hello\", \"helloo\"))\r\nprint(check_permutation(\"hello\", \"hlllo\"))\r\nprint(check_permutation(\"hello\", \"hlllo\"))\r\nprint(check_permutation(\"hello\", \"hellooo\"))\r\nprint(check_permutation(\"hello\", \"hlllo\"))\r\nprint(check_permutation(\"hello\", \"hllloo\"))\r\nprint(check_permutation(\"hello\", \"hllllo\"))\r\nprint(check_permutation(\"hello\", \"hllllo\"))\r\nprint(check_permutation(\"hello\", \"hllllo\"))\r\nprint(check_permutation(\"hell","votes":null},{"text":"\r\n    # create a dict to count the characters in str1\r\n    char_dict = {}\r\n    # iterate through each character in str1\r\n    for char in str1:\r\n        # if the character is not in the dict\r\n        if char not in char_dict:\r\n            # add the character with value 1\r\n            char_dict[char] = 1\r\n        # if the character is already in the dict\r\n        else:\r\n            # increment the count\r\n            char_dict[char] += 1\r\n\r\n    # iterate through each character in str2\r\n    for char in str2:\r\n        # if the character is not in the dict\r\n        if char not in char_dict:\r\n            # return False\r\n            return False\r\n        else:\r\n            # decrement the count\r\n            char_dict[char] -= 1\r\n\r\n    # iterate through each character in the dict\r\n    for char in char_dict:\r\n        # if the count is not 0\r\n        if char_dict[char] != 0:\r\n            # return False\r\n            return False\r\n    # otherwise\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(check_permutation('hello', 'o","votes":null},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1_set = set(str1)\r\n    str2_set = set(str2)\r\n    if len(str1_set) != len(str2_set):\r\n        return False\r\n    return True\r\n\r\nstr1 = \"Afafa\"\r\nstr2 = \"aFaFa\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"Afafa\"\r\nstr2 = \"aFaFb\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"Afafa\"\r\nstr2 = \"afafa\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"Afafa\"\r\nstr2 = \"aFaF\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"Afafa\"\r\nstr2 = \"aFa\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"Afafa\"\r\nstr2 = \"aFaFb\"\r\nprint(check_per","votes":null},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r\n# Tests\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"oleh\"))\r\nprint(check_permutation(\"hello\", \"olleh\"))\r\nprint(check_permutation(\"hello\", \"llheo\"))\r\nprint(check_permutation(\"hello\", \"llheo\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"ohell\"))\r\nprint(check_permutation(\"hello\", \"o","votes":null}],"time":{"count":73.0,"avg":119955.612109589,"std":44089.6507722859,"cov":0.3675497127}}
{"id":533,"question":"def remove_datatype(test_tuple, data_type):\r\n    \"\"\"Write a function to remove particular data type elements from the given tuple.\"\"\"","answers":[{"text":"\r\n    return list(filter(lambda x: type(x) != data_type, test_tuple))\r\n\r\n\r","votes":101633.744},{"text":"\r\n    result = []\r\n    for element in test_tuple:\r\n        if type(element) != data_type:\r\n            result.append(element)\r\n    return result\r\n\r\n\r","votes":139255.868},{"text":"\r\n    new_tuple = []\r\n    for i in test_tuple:\r\n        if type(i) != data_type:\r\n            new_tuple.append(i)\r\n    return tuple(new_tuple)\r\n\r\n\r","votes":null},{"text":"\r\n    new_data_tuple = tuple([x for x in test_tuple if x.__class__ != data_type])\r\n    return new_data_tuple\r\n\r\n# print(remove_datatype((1,'a',3.123), int))\r\n# print(remove_datatype((1,'a',3.123), float))\r\n# print(remove_datatype((1,'a',3.123), str))\r\n\r\n\r\n# 4. Write a function to check whether a given string is a palindrome or not.\r","votes":null},{"text":"\r\n    return tuple(i for i in test_tuple if not isinstance(i, data_type))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Creating an empty list\r\n    new_list = []\r\n    \r\n    # Looping through the tuple\r\n    for items in test_tuple:\r\n        \r\n        # Appending the items in the list\r\n        new_list.append(items)\r\n        \r\n    # Removing the data type from the list\r\n    new_list = [i for i in new_list if i != data_type]\r\n    \r\n    # Converting the list to tuple\r\n    new_tuple = tuple(new_list)\r\n    \r\n    # Returning the tuple\r\n    return new_tuple\r\n\r\n# Testing the function\r\nprint(remove_datatype((1, '2', 3, 4, '5', 6, 7, 8, 9, '10'), int))\r\n\r\n\r\n# 14. Write a Python program to find the index of the first occurrence of a substring in a string.\r","votes":null},{"text":"\r\n    return tuple(x for x in test_tuple if type(x) != data_type)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([x for x in test_tuple if x != data_type])\r\n\r\n\r\nprint(remove_datatype(test_tuple, 1))\r\nprint(remove_datatype(test_tuple, 'a'))\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n# 6. Write a function to remove the first and last element from the given tuple.\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    tuple = []\r\n    for i in test_tuple:\r\n        if i != data_type:\r\n            tuple.append(i)\r\n    return tuple\r\n\r\n\r\nprint(remove_datatype(('a', 1, 2.0, 'b'), int))\r\nprint(remove_datatype((1, 2.0, 'a', 'b'), str))\r\n\r\n\r","votes":null},{"text":"\r\n    new_tuple = []\r\n    for i in test_tuple:\r\n        if type(i) != data_type:\r\n            new_tuple.append(i)\r\n    return tuple(new_tuple)\r\n\r\n\r\nprint(remove_datatype((1, \"2\", 3.1, 4.2, \"5\", 6.7), float))\r\nprint(remove_datatype((1, \"2\", 3.1, 4.2, \"5\", 6.7), str))\r\nprint(remove_datatype((1, \"2\", 3.1, 4.2, \"5\", 6.7), int))\r\n\r\n\r\n# Task 10\r\n\"\"\"\r\nWrite a function that takes a tuple as an argument and returns a tuple with the 2nd and 3rd elements swapped.\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return tuple(x for x in test_tuple if not isinstance(x, data_type))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    result = []\r\n    for data in test_tuple:\r\n        if data_type != type(data):\r\n            result.append(data)\r\n\r\n    return tuple(result)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(i for i in test_tuple if type(i) != data_type)\r\n\r\n\r\n# remove_datatype([1, \"apple\", 2, \"banana\", 3, \"cherry\", 4], int)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(filter(lambda x: not isinstance(x, data_type), test_tuple))\r\n\r\n\r","votes":null},{"text":"\r\n    print(\"Original tuple : \", test_tuple)\r\n    print(\"Data type : \", data_type)\r\n    tuple_list = []\r\n    for i in test_tuple:\r\n        if type(i) != data_type:\r\n            tuple_list.append(i)\r\n    print(\"New tuple : \", tuple(tuple_list))\r\n\r\n\r","votes":null},{"text":"\r\n    # return tuple(filter(lambda x: type(x) != data_type, test_tuple))\r\n    # return tuple(filter(lambda x: type(x) != data_type, test_tuple))\r\n    return tuple(filter(lambda x: not isinstance(x, data_type), test_tuple))\r\n\r\n\r","votes":null},{"text":"\r\n    pass\r\n\r\n#test\r\nprint(remove_datatype((1, 2, 5, \"a\", 4, 10), int))\r\n\r\n#solution\r","votes":null},{"text":"\r\n    return tuple(filter(lambda x: type(x) != data_type, test_tuple))\r\n\r\n\r\n# Tests\r\nremove_datatype((1, 2.0, \"3\", 4, 5.0), int)\r\n# (2.0, '3', 4.0)\r\n\r\nremove_datatype((1, 2.0, \"3\", \"4\", 5.0), int)\r\n# (2.0, '3', '4', 5.0)\r\n\r\nremove_datatype((1, 2.0, \"3\", \"4\", 5.0, 6), int)\r\n# (2.0, '3', '4', 5.0)\r\n\r\nremove_datatype((1, 2.0, \"3\", \"4\", 5.0, 6), str)\r\n# (1, 2.0, 5.0, 6)\r\n\r\nremove_datatype((\"1\", \"2.0\", 3, 4.0, 5, \"6\"), int)\r\n# ('1', '2.0', 4.0, 5)\r\n\r\nremove_datatype((\"1\", \"2.0\", 3, 4.0, 5, \"6\"), str)\r\n# (1, 2.0, 3, 4.0, 5)\r\n\r\nremove_datatype((1, 2.0, \"3\", \"4\", 5.0, 6), float)\r\n# (1, 3, '4', 5, 6)\r\n\r\nremove_datatype((1, 2.0, \"3\", \"4\", 5.0, 6), str)\r\n# (1, 2.0, 3, 4.0, 5, 6)\r\n\r\nremove_datatype((1, 2.0, \"3\", \"4\", 5.0, 6), str)\r\n# (1, 2.0, 3, 4.0, 5,","votes":null},{"text":"\r\n    import numpy as np\r\n    import pandas as pd\r\n    if type(test_tuple) == tuple:\r\n        if data_type == \"int\":\r\n            test_tuple = tuple(np.array(test_tuple).astype(np.int64))\r\n        elif data_type == \"float\":\r\n            test_tuple = tuple(np.array(test_tuple).astype(np.float64))\r\n        elif data_type == \"str\":\r\n            test_tuple = tuple(np.array(test_tuple).astype(np.str_))\r\n    elif type(test_tuple) == list:\r\n        if data_type == \"int\":\r\n            test_tuple = list(np.array(test_tuple).astype(np.int64))\r\n        elif data_type == \"float\":\r\n            test_tuple = list(np.array(test_tuple).astype(np.float64))\r\n        elif data_type == \"str\":\r\n            test_tuple = list(np.array(test_tuple).astype(np.str_))\r\n    elif type(test_tuple) == pd.core.series.Series:\r\n        if data_type == \"int\":\r\n            test_tuple = test_tuple.astype(np.int64)\r\n        elif data_type == \"float\":\r\n            test_tuple = test_tuple.astype(np.float64)\r\n        elif data_type == \"str\":\r\n            test_tuple = test_tuple.astype(np.str_)\r\n    elif type(test_tuple) == pd.core.indexes.base.Index:\r\n        if data_type == \"int\":\r\n            test_tuple = test_tuple.astype(np.int64)\r\n        elif data_type == \"float\":\r\n            test_tuple = test_tuple.astype(np.float64)\r\n        elif data_type == \"str\":\r\n            test_tuple = test_tuple.astype(np.st","votes":null},{"text":"\r\n    return tuple(x for x in test_tuple if not isinstance(x, data_type))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), str))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), int))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), float))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), dict))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), list))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), tuple))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), set))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), type(None)))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), type(Ellipsis)))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), type(NotImplemented)))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), type(None)))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), type(NotImplemented)))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), type(NotImplemented)))\r\n    print(remove_datatype((1, 2, 3, '4', 5, '6'), type(NotImplemented)))\r\n  ","votes":null},{"text":"\r\n    return tuple([element for element in test_tuple if type(element) != data_type])\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(remove_datatype((1, 'a', 'b', 3, True), bool))\r\n    print(remove_datatype((1, 'a', 'b', 3, True), int))\r\n    print(remove_datatype((1, 'a', 'b', 3, True), str))\r\n\r\n\r","votes":null},{"text":"\r\n    new_tuple = []\r\n    for i in test_tuple:\r\n        if type(i) != type(data_type):\r\n            new_tuple.append(i)\r\n    return tuple(new_tuple)\r\n\r\n\r\nprint(remove_datatype((1, 2, 3, 4, 5), 3))\r\nprint(remove_datatype((1, 2, 3, 4, 5), 5.6))\r\nprint(remove_datatype((1, 2, 3, 4, 5), 5))\r\nprint(remove_datatype(('a', 'b', 'c', 'd', 'e'), 'c'))\r\nprint(remove_datatype(('a', 'b', 'c', 'd', 'e'), 'a'))\r\nprint(remove_datatype(('a', 'b', 'c', 'd', 'e'), 'b'))\r\nprint(remove_datatype([1, 2, 3, 4, 5], 3))\r\nprint(remove_datatype([1, 2, 3, 4, 5], 5.6))\r\nprint(remove_datatype([1, 2, 3, 4, 5], 5))\r\nprint(remove_datatype(['a', 'b', 'c', 'd', 'e'], 'c'))\r\nprint(remove_datatype(['a', 'b', 'c', 'd', 'e'], 'a'))\r\nprint(remove_datatype(['a', 'b', 'c', 'd', 'e'], 'b'))\r\nprint(remove_datatype([1, 2, 3, 4, 5], 5))\r\nprint(remove_datatype([1, 2, 3, 4, 5], 3))\r\nprint(remove_datatype({'a': 1, 'b': 2, 'c': 3}, 3))\r\nprint(remove_datatype({'a': 1, 'b': 2","votes":null},{"text":"\r\n    remove_list = []\r\n    for i in range(len(test_tuple)):\r\n        if type(test_tuple[i]) == data_type:\r\n            remove_list.append(i)\r\n    remove_list.reverse()\r\n    for i in remove_list:\r\n        test_tuple.pop(i)\r\n    return test_tuple\r\n\r\nprint(remove_datatype(('a', 1, 'b', 2, 'c', 3, 'd', 4), str))\r\nprint(remove_datatype(('a', 1, 'b', 2, 'c', 3, 'd', 4), int))\r\n\r","votes":null},{"text":"\r\n    new_tuple = []\r\n    for element in test_tuple:\r\n        if element != data_type:\r\n            new_tuple.append(element)\r\n    return tuple(new_tuple)\r\n\r\n\r\n#print(remove_datatype(test_tuple=(\"a\", 1, 2, \"b\", \"c\"), data_type=\"a\"))  # Should be (\"1\", 2, \"b\", \"c\")\r\n#print(remove_datatype(test_tuple=(1, 2, 3, 4, 5), data_type=1))  # Should be (2, 3, 4, 5)\r\n#print(remove_datatype(test_tuple=(1, 2, 3, 4, 5), data_type=2))  # Should be (1, 3, 4, 5)\r\n\r\n\r","votes":null},{"text":"\r\n    temp_list = []\r\n    for item in test_tuple:\r\n        if type(item) != data_type:\r\n            temp_list.append(item)\r\n\r\n    return tuple(temp_list)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([x for x in test_tuple if type(x) != data_type])\r\n\r\n\r\n# Tests\r\nprint(remove_datatype((1, 2, 3, 4.5, 6.7), int))  # (1.0, 2.0, 3.0, 4.5, 6.7)\r\nprint(remove_datatype((1, 2, 3, 4.5, 6.7), float))  # (1, 2, 3, 4, 6)\r\nprint(remove_datatype((1, 2, 3, 4.5, 6.7), str))  # (1, 2, 3, 4.5, 6.7)\r\nprint(remove_datatype((1, 2, 3, 4.5, 6.7), None))  # (1, 2, 3, 4.5, 6.7)\r\nprint(remove_datatype((1, 2, 3, 4.5, 6.7), tuple))  # (1, 2, 3, 4.5, 6.7)\r\nprint(remove_datatype((1, 2, 3, 4.5, 6.7), object))  # ()\r\nprint(remove_datatype((1, 2, 3, 4.5, 6.7), list))  # (1, 2, 3, 4.5, 6.7)\r\nprint(remove_datatype((1, 2, 3, 4.5, 6.7), dict))  # (1, 2, 3, 4.5, 6.7)\r\nprint(remove_datatype((1, 2, 3, 4.5, 6.7), bool))  # (1, 2, 3, 4.5, 6.7)\r\nprint(remove_datatype((1, 2, 3, 4","votes":null},{"text":"\r\n    new_tuple = []\r\n    for elem in test_tuple:\r\n        if type(elem) != data_type:\r\n            new_tuple.append(elem)\r\n    return tuple(new_tuple)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([x for x in test_tuple if not isinstance(x, data_type)])\r\n\r\n\r","votes":null},{"text":"\r\n    new_tuple = ()\r\n    for element in test_tuple:\r\n        if type(element) != data_type:\r\n            new_tuple += (element,)\r\n    return new_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([item for item in test_tuple if type(item) != data_type])\r\n\r\n\r","votes":null},{"text":"\r\n    new_tuple = ()\r\n    for i in test_tuple:\r\n        if type(i) != data_type:\r\n            new_tuple += (i,)\r\n    return new_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for item in test_tuple:\r\n        if not isinstance(item, data_type):\r\n            result.append(item)\r\n    return tuple(result)\r\n\r\n\r\nprint(remove_datatype(('a', 1, 2.2, 3), float))\r\nprint(remove_datatype((1, 2, 3, 'a'), str))\r\n\r\n\"\"\"\r\nExpected output:\r\n    (1, 2, 3)\r\n    (1, 2, 3)\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(x for x in test_tuple if type(x) != data_type)\r\n\r\n\r\nprint(remove_datatype((1, 'two', 3.0), str))\r\nprint(remove_datatype((1, 'two', 3.0), int))\r\nprint(remove_datatype((1, 'two', 3.0), float))\r\nprint(remove_datatype((1, 'two', 3.0), tuple))\r\nprint(remove_datatype((1, 'two', 3.0), dict))\r\n\r\n\r\n# Q4. Write a function to remove elements which are present in a given list from the given tuple.\r","votes":null},{"text":"\r\n    new_tuple = ()\r\n    for element in test_tuple:\r\n        if type(element) != data_type:\r\n            new_tuple += (element,)\r\n    return new_tuple\r\n\r\n\r\nprint(remove_datatype((1, \"a\", \"b\", 3, 4, 5), int))\r\nprint(remove_datatype((1, 2, \"a\", 3, 4, 5), str))\r\nprint(remove_datatype((1, 2, \"a\", 3, 4, 5), object))\r\n\r\n# Question 9\r\n\"\"\"Write a function that accepts a tuple as an argument and returns a tuple \r\nwhere every element is squared.\"\"\"\r\n\r\nfrom math import sqrt\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([i for i in test_tuple if type(i) != data_type])\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(elem for elem in test_tuple if type(elem) != data_type)\r\n\r\n#print(remove_datatype(('a', 'b', 1, 2), str))\r\n#print(remove_datatype(('a', 'b', 1, 2), int))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    tuple_list = list(test_tuple)\r\n    \r\n    for i in tuple_list:\r\n        if type(i) == data_type:\r\n            tuple_list.remove(i)\r\n    \r\n    return tuple(tuple_list)\r\n\r\n\r\nprint(remove_datatype((1, 2.5, 'hello', 4.5, 5, 6.7, 'world', 'hello'), str))\r\n\r\n\r","votes":null},{"text":"\r\n    new_tuple = ()\r\n    for i in test_tuple:\r\n        if not isinstance(i, data_type):\r\n            new_tuple += (i,)\r\n    return new_tuple\r\n\r\nprint(remove_datatype((1, 'a', 2.2, True), bool))\r\nprint(remove_datatype((1, 'a', 2.2, True), int))\r\nprint(remove_datatype((1, 'a', 2.2, True), float))\r\nprint(remove_datatype((1, 'a', 2.2, True), str))\r\n\r\n\r\n# Q12\r","votes":null},{"text":"\r\n    new_tuple = ()\r\n    for element in test_tuple:\r\n        if type(element) != data_type:\r\n            new_tuple += (element,)\r\n    return new_tuple\r\n\r\nif __name__ == '__main__':\r\n    # Test Cases\r\n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)\r\n    #print(remove_datatype","votes":null},{"text":"\r\n    if data_type == 'int':\r\n        return tuple(map(int, test_tuple))\r\n    elif data_type == 'float':\r\n        return tuple(map(float, test_tuple))\r\n    elif data_type == 'str':\r\n        return tuple(map(str, test_tuple))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    new_list = []\r\n    for element in test_tuple:\r\n        if type(element) != data_type:\r\n            new_list.append(element)\r\n\r\n    return tuple(new_list)\r\n\r\n\r","votes":null},{"text":"\r\n    if data_type == 'int':\r\n        new_tuple = tuple(filter(lambda x: type(x) != int, test_tuple))\r\n    elif data_type == 'str':\r\n        new_tuple = tuple(filter(lambda x: type(x) != str, test_tuple))\r\n    elif data_type == 'float':\r\n        new_tuple = tuple(filter(lambda x: type(x) != float, test_tuple))\r\n    return new_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([x for x in test_tuple if x != data_type])\r\n\r\n\r\nclass Test(unittest.TestCase):\r\n   ","votes":null},{"text":"\r\n    if data_type == \"string\":\r\n        return tuple(i for i in test_tuple if type(i) != str) \r\n    elif data_type == \"integer\":\r\n        return tuple(i for i in test_tuple if type(i) != int)\r\n    elif data_type == \"float\":\r\n        return tuple(i for i in test_tuple if type(i) != float)\r\n    else:\r\n        return test_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    if data_type == 'string':\r\n        return tuple(filter(lambda x: isinstance(x, str), test_tuple))\r\n    elif data_type == 'int':\r\n        return tuple(filter(lambda x: isinstance(x, int), test_tuple))\r\n    elif data_type == 'float':\r\n        return tuple(filter(lambda x: isinstance(x, float), test_tuple))\r\n    elif data_type == 'bool':\r\n        return tuple(filter(lambda x: isinstance(x, bool), test_tuple))\r\n\r\n\r","votes":null},{"text":"\r\n    new_tuple = ()\r\n    for val in test_tuple:\r\n        if not isinstance(val, data_type):\r\n            new_tuple += (val,)\r\n    return new_tuple\r\n\r\n\r\nprint(remove_datatype((1, \"string\", 5.6, \"a\", 7, 8.2, \"b\", 10), str))\r\nprint(remove_datatype((1, \"string\", 5.6, \"a\", 7, 8.2, \"b\", 10), int))\r\nprint(remove_datatype((1, \"string\", 5.6, \"a\", 7, 8.2, \"b\", 10), float))\r\n\r\n\r\n# Testcase 2\r","votes":null},{"text":"\r\n    \r\n    filtered_list = []\r\n    for item in test_tuple:\r\n        if type(item) != data_type:\r\n            filtered_list.append(item)\r\n    return tuple(filtered_list)\r\n\r\n\r","votes":null},{"text":"\r\n    new_tuple = tuple([item for item in test_tuple if not isinstance(item, data_type)])\r\n    return new_tuple\r\n\r\n\r\nprint(remove_datatype((5, 8, 12, 15, 'Hello'), int))\r\nprint(remove_datatype((1, 2, 3, 5.0), float))\r\nprint(remove_datatype((1, 2, 3, 5.0), str))\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([value for value in test_tuple if type(value) != data_type])\r\n\r\n\r\n# Test cases\r\nprint(remove_datatype((1, 2, 3, 'a', 'b', 'c'), str))\r\nprint(remove_datatype((1, 2, 3, \"a\", \"b\", \"c\"), int))\r\nprint(remove_datatype(('a', 'b', 'c'), str))\r\nprint(remove_datatype((1, 2, 3), str))\r\nprint(remove_datatype((1, 2, 3), int))\r\nprint(remove_datatype([1, 2, 3], int))\r\nprint(remove_datatype([1, 2, 3], str))\r\nprint(remove_datatype([1, 2, 3], float))\r\nprint(remove_datatype([1, 2, 3], list))\r\nprint(remove_datatype([1, 2, 3], tuple))\r\nprint(remove_datatype([1, 2, 3], dict))\r\nprint(remove_datatype([1, 2, 3], set))\r\nprint(remove_datatype([1, 2, 3], bool))\r\nprint(remove_datatype([1, 2, 3], None))\r\nprint(remove_datatype([1, 2, 3], type(None)))\r\nprint(remove_datatype([1, 2, 3], type(1)))\r\nprint(remove_datatype([1, 2, 3], type(1.0)))\r\nprint(remove_datatype([1, 2, 3], type(1j)))\r\nprint(remove_datatype([1, 2, 3], type(True)))\r\nprint(remove_datatype([1, 2, 3], type(False)))\r\nprint(remove_datatype([1, 2, 3], type(None)))\r\nprint(remove_datatype([1","votes":null},{"text":"\r\n    new_tuple = ()\r\n    for i in test_tuple:\r\n        if isinstance(i, data_type) == False:\r\n            new_tuple += (i,)\r\n    return new_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    new_tuple = ()\r\n    for element in test_tuple:\r\n        if type(element) != data_type:\r\n            new_tuple = new_tuple + (element,)\r\n    return new_tuple\r\n\r\n\r\n\r\nprint(remove_datatype((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd'), str))\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(t for t in test_tuple if not isinstance(t, data_type))\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(x for x in test_tuple if not isinstance(x, data_type))\r\n\r\n\r\nprint(remove_datatype((1, 2, 3, 4.0, 5), float))\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(x for x in test_tuple if not isinstance(x, data_type))\r\n\r","votes":null},{"text":"\r\n\r\n    return tuple(x for x in test_tuple if type(x) != data_type)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([x for x in test_tuple if type(x) != data_type])\r\n\r\n\r\nprint(remove","votes":null},{"text":"\r\n\r\n    remove_list = []\r\n\r\n    for item in test_tuple:\r\n        if type(item) == data_type:\r\n            remove_list.append(item)\r\n\r\n    for item in remove_list:\r\n        test_tuple = tuple(x for x in test_tuple if x != item)\r\n\r\n    return test_tuple\r\n\r\n\r\nprint(remove_datatype(('a', 'b', 1, 2, 'c'), str))\r\nprint(remove_datatype((1, 2, 'aasf', '1', '123', 123), int))\r\n\r\n# ### Problem 02 (Difficulty Level: Medium)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(i for i in test_tuple if type(i) != data_type)\r\n\r\n\r\nprint(remove_datatype((1, 2, 'a', '1'), str))\r\nprint(remove_datatype(([1, 2], (3, 4), {'a': 5}), list))\r\nprint(remove_datatype((1, 1, 2, 3, 5, 8), int))\r\nprint(remove_datatype((1, 1, 2, 3, 5, 8, 13, 21), int))\r\nprint(remove_datatype((1, 1, 2, 3, 5, 8, 13, 21), float))\r\nprint(remove_datatype((1, 1, 2, 3, 5, 8, 13, 21), str))\r\nprint(remove_datatype((1, 1, 2, 3, 5, 8, 13, 21, 'aasf', 'awie'), str))\r\nprint(remove_datatype((1, 1, 2, 3, 5, 8, 13, 21, 'aasf', 'awie'), int))\r\nprint(remove_datatype((1, 1, 2, 3, 5, 8, 13, 21, 'aasf', 'awie'), float))\r\nprint(remove_datatype((1, 1, 2, 3, 5, 8, 13, 21, 'aasf', 'awie'), type(None)))\r\nprint(remove_datatype((1, 1, 2, 3, 5, 8, 13, 21, 'aasf', 'awie'), type(print)))\r\nprint(remove_datatype((1, 1, 2, 3, 5, 8, 13, 21, '","votes":null},{"text":"\r\n    result = []\r\n    for i in test_tuple:\r\n        if type(i) == data_type:\r\n            result.append(i)\r\n    return result\r\n\r\n\r\n# Test Cases\r\nprint(remove_datatype((1, 2.5, 'Hello', 3, 4.5), int))  # [1, 3]\r\nprint(remove_datatype((1, 2.5, 'Hello', 3, 4.5), str))  # [2.5, 3.5]\r\nprint(remove_datatype((1, 2.5, 'Hello', 3, 4.5), float))  # ['Hello']\r\nprint(remove_datatype((1, 2.5, 'Hello', 3, 4.5), tuple))  # []\r\n\r\n\r\n# Approach 2:\r\n\"\"\"\r\nWe can use filter() function to remove the data type from the given tuple. \r\nThe filter() function takes a function as an argument, \r\nwhich is called for each element in the iterable (tuple in this case). \r\nIf the function returns True, the element is added to the result list, \r\notherwise, it is ignored.\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Get the tuple from the parameter\r\n    tuple_data = test_tuple\r\n    # Get the data type from the parameter\r\n    datatype = data_type\r\n    # Create a new list with no data type\r\n    new_list = []\r\n    # Traverse through the tuple\r\n    for i in tuple_data:\r\n        # Check if the data type is same and then add it to the list\r\n        if type(i) != datatype:\r\n            new_list.append(i)\r\n    # Convert the list to tuple\r\n    new_tuple = tuple(new_list)\r\n    # Return the new tuple\r\n    return new_tuple\r\n\r\n# Test cases\r\nprint(remove_datatype((1, 'a', 'b', 3, 4.0, 'c'), float)) # (1, 'a', 'b', 3, 'c')\r\nprint(remove_datatype((1, 'a', 'b', 3, 4.0, 'c'), str)) # (1, 3.0)\r\nprint(remove_datatype((1, 'a', 'b', 3, 4.0, 'c'), int)) # ('a', 'b', 4.0, 'c')\r\nprint(remove_datatype((1, 'a', 'b', 3, 4.0, 'c'), bool)) # (1, 'a', 'b', 3, 4.0, 'c')\r\nprint(remove_datatype((1, 'a', 'b', 3, 4.0, 'c'), tuple)) # (1, 'a', 'b', 3, 4.0, 'c')\r\nprint(remove_datatype((1, 'a', 'b', 3, 4.0, 'c'), list)) # (1, 'a', 'b', 3, 4.0, 'c')\r\nprint(remove_datatype((1, 'a', 'b', 3, 4.0, 'c'), dict)) ","votes":null},{"text":"\r\n    result = []\r\n    for item in test_tuple:\r\n        if type(item) != data_type:\r\n            result.append(item)\r\n    return tuple(result)\r\n\r\n\r\nprint(remove_datatype((1, 2, 3, 4, 5), int))\r\nprint(remove_datatype((1, 2, 3, 4, 5), float))\r\nprint(remove_datatype((\"a\", \"b\", \"c\", \"d\", \"e\"),","votes":null},{"text":"\r\n    new_tuple = ()\r\n    for item in test_tuple:\r\n        if type(item) != data_type:\r\n            new_tuple += (item,)\r\n    return new_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a new list that contains all elements of the given tuple\r\n    new_list = list(test_tuple)\r\n\r\n    # Remove the elements of the given data type from the new list\r\n    new_list = [i for i in new_list if not isinstance(i, data_type)]\r\n\r\n    # Return the new list as a tuple\r\n    return tuple(new_list)\r\n\r\n\r\nprint(remove_datatype(('a','b','c', 1, 2, 3, 4, 5, 6, 7, 8, 9), str))\r\nprint(remove_datatype((1, 2, 3, 4, 5, 6, 7, 8, 9), int))\r\nprint(remove_datatype((1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9), float))\r\nprint(remove_datatype([1, 2, 3, 4, 5, 6, 7, 8, 9], int))\r\n\r\n# Expected output:\r\n# ('a', 'b', 'c', 1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n# (1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n# (1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9)\r\n# (1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n\r\n# Example 2\r\n\r","votes":null},{"text":"\r\n    lst = list(test_tuple)\r\n    for i in range(len(lst)):\r\n        if type(lst[i]) == data_type:\r\n            lst.pop(i)\r\n    return tuple(lst)\r\n\r\n\r\ntest_tuple = ('a', 'b', 1, 2, 'c', 3, 'd')\r\nprint(remove_datatype(test_tuple, str))\r\nprint(remove_datatype(test_tuple, int))\r\nprint(remove_datatype(test_tuple, float))\r\n\r\n\r\n# Q21\r","votes":null},{"text":"\r\n    new_list = []\r\n    for element in test_tuple:\r\n        if type(element) != data_type:\r\n            new_list.append(element)\r\n    return tuple(new_list)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(i for i in test_tuple if type(i) != data_type)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(remove_datatype((1, 1.0, '1a'), int))\r\n    print(remove_datatype((1, 1.0, '1a'), str))\r\n    print(remove_datatype((1, 1.0, '1a'), float))\r\n    print(remove_datatype((1, 1.0, '1a'), object))\r\n    print(remove_datatype((1, 1.0, '1a'), type(None)))\r\n\r\n\r\n# Test Case 2\r","votes":null},{"text":"\r\n    return tuple([e for e in test_tuple if e is not data_type])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Create a list of data type\r\n    data_type_list = []\r\n    for data_element in data_type:\r\n        data_type_list.append(data_element)\r\n\r\n    # Remove the data type from the tuple\r\n    temp_list = []\r\n    for data_element in test_tuple:\r\n        if not data_element in data_type_list:\r\n            temp_list.append(data_element)\r\n\r\n    # Return the list as tuple\r\n    return tuple(temp_list)\r\n\r\n\r","votes":null},{"text":"\r\n    return (x for x in test_tuple if not isinstance(x, data_type))\r\n\r\n\r\n# Test cases\r\nprint(remove_datatype((1, 2, 3, 'a', 'b', 'c'), str))\r\nprint(remove_datatype((1, 2, 3, 'a', 'b', 'c'), int))\r\nprint(remove_datatype((1, 2, 3, 'a', 'b', 'c'), float))\r\nprint(remove_datatype((1, 2, 3, 'a', 'b', 'c'), tuple))\r\nprint(remove_datatype((1, 2","votes":null},{"text":"\r\n\r\n    data_types = [int, float, str]\r\n    if data_type in data_types:\r\n        return tuple([item for item in test_tuple if not isinstance(item, data_type)])\r\n    else:\r\n        return test_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(i for i in test_tuple if type(i)!=data_type)\r\n\r","votes":null},{"text":"\r\n    return tuple(x for x in test_tuple if type(x) != data_type)\r\n\r\n\r\nprint(remove_datatype((1, 2, 3, 4, 5), int))\r\nprint(remove_datatype((1, 2, 3, 4, 5), float))\r\nprint(remove_datatype(('a', 'b', 'c', 'd', 'e'), str))\r\n\r\n\r\n# ### Problem 2:\r\n# \r\n# In this problem, you will define a function that takes in a tuple of numbers and returns a tuple of all the even numbers in the tuple.\r\n# \r\n# For example, if the input tuple is (1, 2, 3, 4, 5, 6, 7, 8), then the output should be (2, 4, 6, 8).\r\n\r\n# In[3]:\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(x for x in test_tuple if x not in data_type)\r\n\r\n\r\nprint(remove_datatype((1, \"hi\", \"hello\", 0, None, 0.0, 0.1), (int, float)))\r\n# (1, 'hi', 'hello', 0.0, 0.1)\r\n\r\n\r\n# Given tuple:\r\n# (1, \"hi\", \"hello\", 0, None, 0.0, 0.1)\r\n# Data type:\r\n# (int, float)\r\n# Expected output:\r\n# (1, \"hi\", \"hello\", 0.0, 0.1)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(\r\n        value for value in test_tuple if not isinstance(value, data_type)\r\n    )\r\n\r\n\r","votes":null},{"text":"\r\n    data_type_list = list(data_type)\r\n    data_type_list.append('_')\r\n    for i in range(len(test_tuple)):\r\n        if test_tuple[i] in data_type_list:\r\n            test_tuple.remove(test_tuple[i])\r\n    return test_tuple\r\n\r\n\r\nprint(remove_datatype((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"), \"string_\"))\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([x for x in test_tuple if x != data_type])\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tuple = (1, 'abc', 2, 'pqr', 3, 'xyz', 4)\r\n    print(remove_datatype(test_tuple, 'abc'))\r\n    print(remove_datatype(test_tuple, 4))\r\n    print(remove_","votes":null},{"text":"\r\n    if data_type in test_tuple:\r\n        test_tuple.remove(data_type)\r\n    else:\r\n        print(\"Data type not found\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tuple = ('S', 'P', 'E', 'N', 'T', 'I', 'A', 'N', 'C', 'E', 1, 2, 3,","votes":null},{"text":"\r\n    return tuple([item for item in test_tuple if not isinstance(item, data_type)])\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([x for x in test_tuple if x.__class__ != data_type])\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([x for x in test_tuple if type(x) != data_type])\r\n\r\n\r\nprint(remove_datatype((1, 2, 3, 'a'), str))\r\nprint(remove_datatype((1, 2, 3, 'a'), int))\r\nprint(remove_datatype((1, 2, 3, 'a', 1.5), float))\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(x for x in test_tuple if not isinstance(x, data_type))\r\n\r\n\r\nprint(remove_datatype((1, 2, 3, 4, 5, 6), int))\r\nprint(remove_datatype((1, 2, 3, 4, 5, 6), float))\r\nprint(remove_datatype((1, 2, 3, 4, 5, 6), str))\r\nprint(remove_datatype((1, 2, 3, 4, 5, 6), bool))\r\nprint(remove_datatype((1, 2, 3, 4, 5, 6), type(None)))\r\n\r\n# =========================================================================================================================================================================\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if data_type == 'str':\r\n        return tuple(str(i) for i in test_tuple if not isinstance(i, str))\r\n    elif data_type == 'int':\r\n        return tuple(int(i) for i in test_tuple if not isinstance(i, int))\r\n    elif data_type == 'float':\r\n        return tuple(float(i) for i in test_tuple if not isinstance(i, float))\r\n    elif data_type == 'bool':\r\n        return tuple(bool(i) for i in test_tuple if not isinstance(i, bool))\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(filter(lambda x: type(x) != data_type, test_tuple))\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(item for item in test_tuple if type(item) is not data_type)\r\n\r\n\r\n# Input\r\ntest_tuple = (1, 2, 3, 'a', 'b', 'c', '1', 4, 5, 6)\r\ndata_type = str\r\n\r\n# Output\r\nprint(remove_datatype(test_tuple, data_type))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    for i in range(len(test_tuple)):\r\n        if(type(test_tuple[i]) == data_type):\r\n            test_tuple.remove(test_tuple[i])\r\n\r\n    return test_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    # print(test_tuple, data_type)\r\n    # print(type(test_tuple[0]))\r\n    # print(type(test_tuple[1]))\r\n    # print(type(test_tuple[2]))\r\n    # print(type(test_tuple[3]))\r\n    # print(type(test_tuple[4]))\r\n    # print(type(test_tuple[5]))\r\n    # print(type(test_tuple[6]))\r\n    # print(type(test_tuple[7]))\r\n    # print(type(test_tuple[8]))\r\n    # print(type(test_tuple[9]))\r\n    # print(type(test_tuple[10]))\r\n\r\n    # print(type(test_tuple[0]))\r\n    # print(type(test_tuple[1]))\r\n    # print(type(test_tuple[2]))\r\n    # print(type(test_tuple[3]))\r\n    # print(type(test_tuple[4]))\r\n    # print(type(test_tuple[5]))\r\n    # print(type(test_tuple[6]))\r\n    # print(type(test_tuple[7]))\r\n    # print(type(test_tuple[8]))\r\n    # print(type(test_tuple[9]))\r\n    # print(type(test_tuple[10]))\r\n\r\n    # print(type(test_tuple[0]))\r\n    # print(type(test_tuple[1]))\r\n    # print(type(test_tuple[2]))\r\n    # print(type(test_tuple[3]))\r\n    # print(type(test_tuple[4]))\r\n    # print(type(test_tuple[5]))\r\n    # print(type(test_tuple[6]))\r\n    # print(type(test_tuple[7]))\r\n    # print(type(test_tuple[8]))\r\n    # print(type(test_tuple[9]))\r\n    # print(type(test_tupl","votes":null},{"text":"\r\n\r\n    new_tuple = ()\r\n    for item in test_tuple:\r\n        if type(item) != data_type:\r\n            new_tuple = new_tuple + (item,)\r\n    return new_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    index = 0\r\n    while index < len(test_tuple):\r\n        if isinstance(test_tuple[index], data_type):\r\n            test_tuple.remove(test_tuple[index])\r\n        else:\r\n            index += 1\r\n    return test_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(i for i in test_tuple if not isinstance(i, data_type))\r\n\r\n\r\nprint(remove_datatype((1, 'a', 'b', 3), str))\r\nprint(remove_datatype((1, 'a', 2.5, 3), float))\r\nprint(remove_datatype((1, 'a', 2.5, 3), int))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #return tuple(i for i in test_tuple if type(i) != data_type)\r\n    return tuple(i for i in test_tuple if type(i) != data_type)\r\n\r\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)\r\ndata_type = str\r\n\r\nprint(remove_datatype(test_tuple, data_type))\r\n\r\n\r\n# Q3\r","votes":null},{"text":"\r\n    # Iterate over the test_tuple and remove the data type elements\r\n    for element in test_tuple:\r\n        if type(element) == data_type:\r\n            test_tuple.remove(element)\r\n\r\n    return test_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    for i in test_tuple:\r\n        if type(i) == data_type:\r\n            test_tuple.remove(i)\r\n\r\n    return test_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    if data_type == 'int':\r\n        return tuple([x for x in test_tuple if not isinstance(x, int)])\r\n    elif data_type == 'float':\r\n        return tuple([x for x in test_tuple if not isinstance(x, float)])\r\n    elif data_type == 'str':\r\n        return tuple([x for x in test_tuple if not isinstance(x, str)])\r\n\r\n\r\nprint(remove_datatype((3, 5.6, 'abc', 7.8, 9), 'int'))\r\n# (5.6, 'abc', 7.8)\r\nprint(remove_datatype((3, 5.6, 'abc', 7.8, ","votes":null},{"text":"\r\n    # return tuple(i for i in test_tuple if type(i) != data_type)\r\n    return tuple(i for i in test_tuple if not isinstance(i, data_type))\r\n\r\n\r","votes":null}],"time":{"count":2.0,"avg":120444.806,"std":26602.8590030412,"cov":0.2208717826}}
{"id":536,"question":"def nth_items(list,n):\r\n    \"\"\"Write a function to select the nth items of a list.\"\"\"","answers":[{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n\r\nprint(nth_items([1,2,3,4,5,6,7,8,9],3))\r\n\r\n#print(nth_items([1,2,3,4,5,6,7,8,9],2))\r\n\r\n\r\n#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":90072.144},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n\r\n\r","votes":90310.008},{"text":"\r\n    return [list[i] for i in range(0, len(list), n)]\r\n\r","votes":90995.208},{"text":"\r\n    return [item for item in list if list.index(item)%n==0]\r\n\r\n\r\n#print(nth_items([1,2,3,4,5,6,7,8,9,10],3))\r\n#print(nth_items([1,2,3,4,5,6,7,8,9,10],2))\r\n#print(nth_items([1,2,3,4,5,6,7,8,9,10],1))\r\n#print(nth_items([1,2,3,4,5,6,7,8,9,10],0))\r\n\r\n\r\n","votes":91466.32},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n\r","votes":96243.552},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n\r\nprint(nth_items([10,20,30,40,50,60,70],2))\r\n\r\n#Exercise 5\r","votes":112059.952},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],2))\r\n\r","votes":116668.792},{"text":"\r\n    nth_list=[]\r\n    for i in range(len(list)):\r\n        if i%n==0:\r\n            nth_list.append(list[i])\r\n    return nth_list\r\n\r","votes":117211.572},{"text":"\r\n    return [x for x in list[::n]]\r\n\r\n#Testing\r\nprint(nth_items(range(10),3))\r\n\r\n\r\n#2. Write a function that selects the first n items of a list.\r","votes":121194.18},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n\r\nprint(nth_items([0,1,2,3,4,5,6,7,8,9],3))\r\nprint(nth_items([0,1,2,3,4,5,6,7,8,9],4))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":128658.392},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n\r\nprint(nth_items(list('abcdefghijklmnopqrstuvwxyz'),3))\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\r\nprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],3))\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],20))\r\n\r\n\r","votes":138685.044},{"text":"\r\n    # return [list[i] for i in range(0, len(list), n)]\r\n    return [x for x in list[::n]]\r\n\r\n\r","votes":152784.108},{"text":"\r\n\r\n    nth_items = []\r\n    list_len = len(list)\r\n    for i in range(0,list_len,n):\r\n        nth_items.append(list[i])\r\n    return nth_items\r\n\r\n\r\n#print(nth_items([1,2,3,4,5,6,7,8,9,10],3))\r\n\r","votes":160217.024},{"text":"\r\n    return [list[i] for i in range(0, len(list), n)]\r\n\r\n\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\r\n\r\n\r","votes":170251.284},{"text":"\r\n    #Create a new list to store values\r\n    new_list = []\r\n    #If we have a list with values\r\n    if list:\r\n        #Loop through the list\r\n        for i in range(0,len(list)):\r\n            #If the current number is a multiple of n\r\n            if i % n == 0:\r\n                #Add the current value to the new list\r\n                new_list.append(list[i])\r\n    #Return the new list\r\n    return new_list\r\n\r\nprint(nth_items([1,2,3,4,5,6,7,8,9],2))\r\n\r\n#Defining a function with a for loop\r\n#This function will take a list as an argument and return the nth items of that list\r","votes":181358.504},{"text":"\r\n    new_list = []\r\n    for i in range(len(list)):\r\n        if i % n == 0:\r\n            new_list.append(list[i])\r\n    return new_list\r\n\r\n\r","votes":187755.06},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n\r\n# Test Code\r\nprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],3))\r\nprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],5))\r\nprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],4))\r\nprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],10))\r\nprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],1))\r\nprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],2))\r\nprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],3))\r\nprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],1))\r\nprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],3))\r\n\r\n#-------------------------------------------------------------------------------\r","votes":196603.304},{"text":"\r\n    \r\n    return zip(*[iter(list)]*n)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # get list length\r\n    length = len(list)\r\n\r\n    # if n is greater than list length, return list\r\n    if n > length:\r\n        return list\r\n\r\n    # if n is greater than list length, return list\r\n    if n <= 0:\r\n        return []\r\n\r\n    # make empty list\r\n    newlist = []\r\n\r\n    # iterate over list and add to new list\r\n    for i in range(n):\r\n        newlist.append(list[i])\r\n\r\n    return newlist\r\n\r\n# test\r\nn = 5\r\nlist = list(range(0,10))\r\nprint(n, 'items from', list, 'is', nth_items(list,n))\r\n\r\n# n = 5\r\n# list = list(range(0,10))\r\n# print(n, 'items from', list, 'is', nth_items(list,n))\r\n\r\n# n = 10\r\n# list = list(range(0,10))\r\n# print(n, 'items from', list, 'is', nth_items(list,n))\r\n\r\n# n = 0\r\n# list = list(range(0,10))\r\n# print(n, 'items from', list, 'is', nth_items(list,n))\r\n\r\n# n = -1\r\n# list = list(range(0,10))\r\n# print(n, 'items from', list, 'is', nth_items(list,n))","votes":null},{"text":"\r\n    # return [list[i] for i in range(0,len(list),n)]\r\n    return [i[0] for i in zip(list[::n],range(n))]\r\n\r\n\r","votes":null},{"text":"\r\n    return list[n]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Your code here\r\n    return list[n]\r\n\r\n# Test cases\r\nprint(nth_items([\"a\", \"b\", \"c\", \"d\"], 2))","votes":null},{"text":"\r\n    return [i for i in list[n-1::n]]\r\n\r","votes":null},{"text":"\r\n    return [list[i] for i in range(n, len(list), n)]\r\n\r\n    \r","votes":null},{"text":"\r\n    return [list[i] for i in range(1,n+1)]\r\n\r","votes":null},{"text":"\r\n    return [i for i in list if i in n]\r\n\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 3))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 11))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 12))\r\n\r\n# Exercise 2\r","votes":null},{"text":"\r\n    #list = list(list)\r\n    #n = int(n)\r\n    if n == 0:\r\n        return []\r\n    elif n < 0:\r\n        return []\r\n    elif n >= len(list):\r\n        return []\r\n    else:\r\n        return list[n-1::n]\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,len(list)):\r\n        if count == n:\r\n            return list[i]\r\n        else:\r\n            count += 1\r\n    return None\r\n\r","votes":null},{"text":"\r\n    \r\n    return list[n]\r\n\r","votes":null},{"text":"\r\n    return [list[i] for i in range(n)]\r\n\r","votes":null},{"text":"\r\n    return [i[n] for i in list]\r\n\r\n\r\nprint(nth_items([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n    \r\nprint(n","votes":null},{"text":"\r\n    \r\n    if n==0:\r\n        return []\r\n    else:\r\n        return list[n-1::n]\r\n\r\nprint(n","votes":null},{"text":"\r\n    return [list[0]] + [list[i] for i in range(1,n)]\r\n\r\n\r\nclass Test(unittest.TestCase):\r\n   ","votes":null},{"text":"\r\n    return list[n-1]\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for items in range(0,n):\r\n        new_list.append(list[items])\r\n    return new_list\r\n\r\n\r","votes":null},{"text":"\r\n    return [list[i] for i in range(0, len(list), n)]\r\n\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))  # [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))  # [1, 3, 5, 7, 9]\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))  # [1, 5, 9]\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))  # ERROR: invalid n\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))  # ERROR: invalid n\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))  # ERROR: invalid n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if n==0:\r\n        return []\r\n    elif n==1:\r\n        return [list[0]]\r\n    else:\r\n        return [list[0]]+nth_items(list[1:],n-1)\r\n\r","votes":null},{"text":"\r\n    return list[n-1]\r\n    \r","votes":null},{"text":"\r\n    if n == 0:\r\n        return []\r\n    elif n < 0:\r\n        raise ValueError(\"n must be greater than 0\")\r\n    else:\r\n        return list[n-1::n]\r\n\r","votes":null},{"text":"\r\n    \r\n    if n < 0:\r\n        return None\r\n    \r\n    if n == 0:\r\n        return []\r\n    \r\n    if n > len(list):\r\n        return None\r\n    \r\n    res = []\r\n    \r\n    for i in range(n):\r\n        res.append(list[i])\r\n    \r\n    return res\r\n\r\nprint(nth_items([1,2,3,4,5],3))\r\nprint(nth_items([1,2,3,4,5],-3))\r\nprint(nth_items([1,2,3,4,5],0))\r\nprint(nth_items([1,2,3,4,5],6))\r\nprint(nth_items([1,2,3,4,5],5))\r\nprint(nth_items([1,2,3,4,5],12))\r\nprint(nth_items([1,2,3,4,5],1))\r\nprint(nth_items([],1))\r\nprint(nth_items([1],1))\r\n\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for i in range(n):\r\n        new_list.append(list[i])\r\n    return new_list\r\n\r","votes":null},{"text":"\r\n    return list[n-1]\r\n\r\n\r","votes":null},{"text":"\r\n    return [list[i] for i in range(0, len(list), n)]\r\n\r\n\r\nprint(n","votes":null},{"text":"\r\n    \r\n    return [i for i,x in enumerate(list) if x==n]\r\n\r","votes":null},{"text":"\r\n    \r\n    #n = 3\r\n    #list = [1,2,3,4,5,6,7,8,9,10]\r\n    \r\n    #n = 5\r\n    #list = [1,2,3,4,5,6,7,8,9,10,11,12]\r\n    \r\n    #n = 10\r\n    #list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\n    \r\n    #n = 1\r\n    #list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\n    \r\n    #n = 2\r\n    #list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\n    \r\n    #n = 3\r\n    #list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\n    \r\n    #n = 4\r\n    #list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\n    \r\n    #n = 5\r\n    #list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,1","votes":null},{"text":"\r\n    new_list = []\r\n    for i in range(0,n):\r\n        new_list.append(list[i])\r\n    return new_list\r\n\r\nmy_list = [1, 2, 3, 4, 5, 6]\r\nprint(nth_items(my_list,3))\r\n\r\n#-----------------------------------\r\n# Write a function that takes a list and returns a new list with all the even numbers.\r","votes":null},{"text":"\r\n    return [i for i in list if list.count(i) == n]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    return list[n-1]\r\n\r","votes":null},{"text":"\r\n    \r\n    #create a variable to store the result\r\n    result = []\r\n    \r\n    #loop through the list in steps of n\r\n    for i in range(n-1, len(list), n):\r\n        \r\n        #append the i-th item to the result\r\n        result.append(list[i])\r\n        \r\n    #return the result\r\n    return result\r\n\r\n#test\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],2))\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],5))\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],10))\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],11))\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],100))\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],1000))\r\n\r\n\r","votes":null},{"text":"\r\n    return [item for item in list[::n]]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(nth_items([1,2,3,4,5,6,7,8,9],3))\r\n    print(nth_items([1,2,3,4,5,6,7,8,9],2))\r\n    print(nth_items([1,2,3,4,5,6,7,8,9],4))\r\n    print(nth_items([1,2,3,4,5,6,7,8,9],7))\r\n    print(nth_items([1,2,3,4,5,6,7,8,9],1))\r\n    print(nth_items([1,2,3,4,5,6,7,8,9],","votes":null},{"text":"\r\n\r\n    # Check if n is negative\r\n    if n < 0:\r\n        raise ValueError(\"n must be a positive number.\")\r\n\r\n    # Check if n is larger than the list\r\n    if n > len(list):\r\n        raise ValueError(\"n must be smaller than the list.\")\r\n\r\n    # Return the nth item of the list\r\n    return list[n-1]\r\n\r\n\r","votes":null},{"text":"\r\n    return list[n]\r\n\r","votes":null},{"text":"\r\n    \r\n    if type(list) == type([]):\r\n        if 0 <= n < len(list):\r\n            return list[n]\r\n        else:\r\n            return \"Out of bounds!\"\r\n    \r\n    else:\r\n        return \"Input not a list!\"\r\n\r\nprint(n","votes":null},{"text":"\r\n    result = []\r\n    for i in range(0,n):\r\n        result.append(list[i])\r\n    return result\r\n\r","votes":null},{"text":"\r\n    \r\n    # We can use the slicing operator [n:n+1] to get the nth item\r\n    # of a list. We can use this in a loop to get the nth items of\r\n    # a list.\r\n    \r\n    # If n is negative, take the last n items from the list\r\n    if n < 0:\r\n        list = list[n:]\r\n        \r\n    # If n is positive, take the first n items from the list\r\n    elif n > 0:\r\n        list = list[:n]\r\n    \r\n    # If n is 0, return an empty list\r\n    else:\r\n        list = []\r\n    \r\n    return list\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if n <= 0:\r\n        return []\r\n\r\n    # Create a new list and iterate over the input list\r\n    output = []\r\n    count = 1\r\n    for i in list:\r\n        # Compare the count to the nth value\r\n        if count == n:\r\n            # Append the item and reset the count\r\n            output.append(i)\r\n            count = 0\r\n        # Increment the count\r\n        count += 1\r\n\r\n    return output\r\n\r\n# Test cases\r\nprint(nth_items([1, 2, 3, 4, 5], 3))\r\nprint(nth_items([1, 2, 3, 4, 5], 0))\r\nprint(nth_items([1, 2, 3, 4, 5], 6))\r\nprint(nth_items([1, 2, 3, 4, 5], 2))\r\n\r\n# Answer\r\n#","votes":null},{"text":"\r\n    \r\n    #","votes":null},{"text":"\r\n    first_n_items = list[:n]\r\n    return first_n_items\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    nth_items= []\r\n    for i in range(n):\r\n        nth_items.append(list[i])\r\n    return nth_items\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    nth_items = []\r\n    for item in enumerate(list):\r\n        if item[0] % n == 0:\r\n            nth_items.append(item[1])\r\n\r\n    return nth_items\r\n\r\nif __name__ == \"__main__\":\r\n    print(n","votes":null},{"text":"\r\n    return [list[n] for n in range(n)]\r\n\r\n\r\n# print(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\r\n# print(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\r\n# print(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    n = int(n)\r\n    return [list[i] for i in range(0,len(list),n)]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(n","votes":null},{"text":"\r\n    if n == 0:\r\n        return []\r\n    else:\r\n        return [list[0]] + nth_items(list[1:], n-1)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if n<0:\r\n        raise ValueError('Nth Items: n must be non-negative.')\r\n    if n==0:\r\n        return []\r\n    \r\n    idx = [i for i,x in enumerate(list) if (i+1)%n==0]\r\n    return [list[i] for i in idx]\r\n\r","votes":null},{"text":"\r\n    return list[n::-1]\r\n\r\nprint(nth_items(['Python','Java','Ruby','C++'],2))\r\n\r","votes":null},{"text":"\r\n    n -= 1\r\n    return [x for n,x in enumerate(list) if n%n == 0]\r\n\r","votes":null},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n\r\n\r\n# Test case for the function\r\nprint(nth_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 3))\r\n# should print ['a', 'd', 'g', 'j']\r\nprint(nth_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 2))\r\n# should print ['a', 'c', 'e', 'g', 'i']\r\nprint(nth_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 4))\r\n# should print ['a', 'e', 'i']\r\nprint(nth_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 10))\r\n# should print ['a', 'j']\r\nprint(nth_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 1))\r\n# should print ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\r\nprint(nth_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 15))\r\n# should print ['a']\r\nprint(nth_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 0))\r\n# should print []\r\nprint(nth_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 11))\r\n# should print []","votes":null},{"text":"\r\n\r\n    if n == 0:\r\n        return []\r\n    elif n < 0:\r\n        raise IndexError(\"n cannot be negative\")\r\n    else:\r\n        return list[n-1::n]\r\n\r\n\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 1))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 11))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 12))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 13))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 14))\r","votes":null},{"text":"\r\n    if n==0:\r\n        return []\r\n    elif n==1:\r\n        return [list[0]]\r\n    elif n==-1:\r\n        return [list[-1]]\r\n    else:\r\n        return list[n-1]\r\n\r\nprint(nth_items([1,2,3],-1))\r\nprint(nth_items([1,2,3],-2))\r\nprint(nth_items([1,2,3],0))\r\nprint(nth_items([1,2,3],1))\r\nprint(nth_items([1,2,3],2))\r\nprint(nth_items([1,2,3],3))\r\nprint(nth_items([1,2,3],4))\r\n\r","votes":null},{"text":"\r\n\r\n    if n < 1:\r\n        return []\r\n    \r\n    i = 0\r\n    output = []\r\n    \r\n    for item in list:\r\n        i += 1\r\n        if i % n == 0:\r\n            output.append(item)\r\n    \r\n    return output\r\n\r\n\r","votes":null},{"text":"\r\n    return list[n::n]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    index = 0\r\n    for i in list:\r\n        if index == n:\r\n            return i\r\n        index += 1\r\n\r\n# Tests\r\nprint(nth_items([1, 2, 3, 4, 5], 1))\r\nprint(nth_items(['a', 'b', 'c', 'd'], 1))\r\nprint(nth_items(['a', 'b', 'c', 'd'], 3))\r\nprint(nth_items([1, 2, 3, 4, 5], 5))\r\nprint(nth_items([1, 2, 3, 4, 5], 6))\r\nprint(nth_items(['a', 'b', 'c', 'd'], 4))\r\nprint(nth_items(['a', 'b', 'c', 'd'], 0))\r\nprint(nth_items(['a', 'b', 'c', 'd'], -1))\r\nprint(nth_items([1, 2, 3, 4, 5], -2))\r\nprint(nth_items([1, 2, 3, 4, 5], -5))\r\nprint(nth_items([1, 2, 3, 4, 5], -6))\r\n\r\n# Other Solutions\r","votes":null},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\nprint(nth_items([1,2,3,4,5,6,7], 3)) # Should be [1, 4, 7]\r\nprint(nth_items(['a', 'b', 'c', 'd'], 2)) # Should be ['a', 'c']\r\nprint(nth_items(['a', 'b', 'c', 'd'], 0)) # Should be []\r\nprint(nth_items(['a', 'b', 'c', 'd', 'e', 'f'], 3)) # Should be ['a', 'd', 'g']\r\nprint(nth_items(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 4)) # Should be ['a', 'e']\r\nprint(nth_items(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 1)) # Should be ['a', 'b', 'c', 'd', 'e', 'f', 'g']\r\n\r\n# Alternate Solution\r","votes":null},{"text":"\r\n    return [i for i in list[n:]]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    list = list[n::n]\r\n    return list\r\n\r\n\r","votes":null},{"text":"\r\n    return list[n]\r\n\r\n\r\nprint(nth_items([\"I\", \"am\", \"a\", \"boy\"], 2))\r\n\r\n\r","votes":null},{"text":"\r\n    return [list[i] for i in range(n,len(list),n)]\r\n\r\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],2))\r\n\r\n# 1.9\r","votes":null},{"text":"\r\n\r\n    result = []\r\n    for i in range(n):\r\n        result.append(list[i])\r\n\r\n    return result\r\n\r\n\r\nprint(nth_items([1,2,3,4,5,6], 3))\r\n\r\n#","votes":null},{"text":"\r\n    return [i for i in list if i % n == 0]\r\n\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\r\nprint(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\r\n\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for i, item in enumerate(list):\r\n        if i == n:\r\n            new_list.append(item)\r\n    return new_list\r\n\r\n\r","votes":null},{"text":"\r\n    # return a list\r\n    return [item for item in list if item%n==0]\r\n\r\n#test\r\nprint(nth_items([1, 2, 3, 4, 5], 2))\r\n# [2, 4]\r\nprint(nth_items([1, 2, 3, 4, 5], 3))\r\n# [3]\r\nprint(nth_items([1, 2, 3, 4, 5], 4))\r\n# []\r\nprint(nth_items([1, 2, 3, 4, 5], 5))\r\n# [5]\r\n```\r\n\r\n### 3. Write a function to select the items of a list whose index is in a list of indices.\r\n\r\n```python\r","votes":null},{"text":"\r\n    return [list[i] for i in range(0,len(list),n)]\r\n    \r\n\r\nif __name__ == \"__main__\":\r\n\tprint(nth_items([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"],3))\r\n\tprint(nth_items([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"],5))\r\n\tprint(nth_items([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"],1))\r\n\tprint(nth_items([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"],10))\r\n\tprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],1))\r\n\tprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],10))\r\n\tprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],11))\r\n\tprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],12))\r\n\tprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],13))\r\n\tprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],14))\r\n\tprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],15))\r\n\tprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],16))\r\n\tprint(nth_items(['a','b','c','d','e','f','g','h','i','j'],17))\r\n\tprint(nth_items(['a','b','c','d','e','f','g','h','i','","votes":null},{"text":"\r\n    n = int(n)\r\n    if n < 0 or n > len(list):\r\n        return []\r\n    return list[n-1:]\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return []\r\n    elif n == 1:\r\n        return list[0:1]\r\n    else:\r\n        return nth_items(list[1:], n-1) + [list[0]]\r\n\r","votes":null},{"text":"\r\n    if n > 0:\r\n        return [list[i] for i in range(n)]\r\n    elif n == 0:\r\n        return []\r\n    else:\r\n        return [list[-1]]\r\n\r\n\r","votes":null},{"text":"\r\n    return [x for x in list if list.count(x) == n]\r\n\r\n\r","votes":null},{"text":"\r\n    return [list[n-1]]\r\n\r","votes":null},{"text":"\r\n    n = n - 1\r\n    return list[n]\r\n\r","votes":null}],"time":{"count":17.0,"avg":131913.7910588235,"std":36684.9396454498,"cov":0.2780978346}}
{"id":539,"question":"def basesnum_coresspondingnum(bases_num,index):\r\n    \"\"\"Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\"\"\"","answers":[{"text":"\r\n    return [bases_num[i] ** index[i] for i in range(len(bases_num))]\r\n\r","votes":128925.2},{"text":"\r\n    bases_list = []\r\n    for i in range(len(bases_num)):\r\n        bases_list.append(bases_num[i] ** index[i])\r\n    return bases_list\r\n\r\nprint(basesnum_coresspondingnum([4,5,6,7], [0,2,4,6]))\r\n\r\n#Exercise 25:\r\n\"\"\"Write a function to calculate the sum of numbers in a list using reduce function.\"\"\"\r\n\r\nfrom functools import reduce\r","votes":161035.18},{"text":"\r\n    return [bases_num**i for i in index]\r\n\r\nprint(basesnum_coresspondingnum(3, [0, 1, 2]))\r\n\r\n\r\n\r\n'''\r\n3. Write a function to create a list that contains the string of the given number and the number's corresponding power of the given number.\r\n'''\r","votes":null},{"text":"\r\n    return [bases_num[0]**index[i] for i in range(len(index))]\r\n\r\n\r","votes":null},{"text":"\r\n    return [bases_num ** index[i] for i in range(len(index))]\r\n\r\n\r","votes":null},{"text":"\r\n    bases_num = list(map(lambda x: x**index,bases_num))\r\n    return bases_num\r\n\r","votes":null},{"text":"\r\n    return bases_num ** index\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: x**index,bases_num))\r\n\r","votes":null},{"text":"\r\n    return [bases_num**index]\r\n\r\n\r","votes":null},{"text":"\r\n    return [i**index for i in bases_num]\r\n\r","votes":null},{"text":"\r\n\r\n    return bases_num**index\r\n\r","votes":null},{"text":"\r\n    return [bases_num**num for num in index]\r\n\r","votes":null},{"text":"\r\n    return [bases_num**num for num in index]\r\n\r\n\r\nprint(basesnum_coresspondingnum(2,[1,2,3,4,5]))\r\n\r\n#2.1\r","votes":null},{"text":"\r\n    return [bases_num**index[i] for i in range(len(index))]\r\n\r","votes":null},{"text":"\r\n    return [(bases_num**index[i]) for i in range(0,len(index))]\r\n\r","votes":null},{"text":"\r\n    return bases_num**index\r\n\r","votes":null},{"text":"\r\n    return pow(bases_num,index)\r\n\r","votes":null},{"text":"\r\n    list_num = []\r\n    for i in index:\r\n        list_num.append(bases_num**i)\r\n    return list_num\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: x**index, bases_num)\r\n\r\n\r","votes":null},{"text":"\r\n    bases = [1,2,3,4,5,6,7,8,9,10]\r\n    bases_index = bases[index]\r\n    return [bases_num ** bases_index]\r\n\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: x ** index, bases_num)\r\n\r\n\r\nprint(list(basesnum_coresspondingnum([1,2,3,4,5], 5)))\r\n","votes":null},{"text":"\r\n    \r\n    return list(map(lambda x: x ** index, bases_num))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    bases_num = [bases_num**i for i in index]\r\n    return bases_num\r\n\r","votes":null},{"text":"\r\n    return map(lambda n: pow(bases_num,n),index)\r\n\r","votes":null},{"text":"\r\n    return [pow(bases_num,i) for i in index]\r\n\r\nprint (basesnum_coresspondingnum(3,range(1,6)))\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x:x**index,bases_num))\r\n\r","votes":null},{"text":"\r\n    return [i**index for i in bases_num]\r\n\r\nprint(basesnum_coresspondingnum([2,5,10],3))\r\n\r\n#2nd method\r","votes":null},{"text":"\r\n    return list(map(lambda x: x ** index, bases_num))\r\n\r\n\r","votes":null},{"text":"\r\n    return [bases_num**i for i in index]\r\n\r\n\r","votes":null},{"text":"\r\n    #bases_num = [2,3,4]\r\n    #index = [3,2,1]\r\n    bases_list = []\r\n    for i in index:\r\n        bases_list.append(bases_num**i)\r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: x ** index,bases_num))\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: x[0]**x[1], zip(bases_num,index))\r\n\r\nif __name__ == '__main__':\r\n    print(basesnum_coresspondingnum([2,3,4], [0,1,2]))\r\n    print(basesnum_coresspondingnum([-2,0,2,4], [0,1,2,3]))\r\n    print(basesnum_coresspondingnum([-2,0,2,4], [0,1,2,3,4,5,6,7,8,9]))\r\n    print(basesnum_coresspondingnum([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,","votes":null},{"text":"\r\n    return [bases_num**i for i in index]\r\n\r","votes":null},{"text":"\r\n    return [pow(bases_num,i) for i in index]\r\n\r","votes":null},{"text":"\r\n    return [bases_num**index]\r\n\r","votes":null},{"text":"\r\n    return [bases_num**i for i in index]\r\n\r\nbases_num = int(input())\r\nindex = list(map(int,input().split()))\r\n\r\nprint(basesnum_coresspondingnum(bases_num,index))\r\n\r\n\r\n#12.Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using Lambda Function.\r","votes":null},{"text":"\r\n    return map(lambda base: base ** index,bases_num)\r\n\r\n\r\nbases_num = [2,3,4]\r\nindex = 2\r\nprint(basesnum_coresspondingnum(bases_num,index))\r\n\r\n\r\n#Task2\r","votes":null},{"text":"\r\n    return [bases_num**i for i in index]\r\n\r\n\r\n#test\r\nbases_num = 2\r\nindex = [1, 2, 3]\r\nprint(basesnum_coresspondingnum(bases_num, index))\r\n\r\n\r\n#answer\r","votes":null},{"text":"\r\n    return bases_num**index\r\n\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: x**index,bases_num))\r\n\r\n#Base 10 example\r\nbases_num = [10,100,1000,10000]\r\nindex = 2\r\nprint(f\"Here is the result of bases_num = {bases_num} and index = {index}:\",basesnum_coresspondingnum(bases_num,index))\r\n\r\n#Base 2 example\r\nbases_num = [2,4,8,16]\r\nindex = 2\r\nprint(f\"Here is the result of bases_num = {bases_num} and index = {index}:\",basesnum_coresspondingnum(bases_num,index))\r\n\r\n#Base 16 example\r\nbases_num = [16,256,4096,65536]\r\nindex = 2\r\nprint(f\"Here is the result of bases_num = {bases_num} and index = {index}:\",basesnum_coresspondingnum(bases_num,index))\r\n\r\n#Base 36 example\r\nbases_num = [36,1296,46656,12960000]\r\nindex = 2\r\nprint(f\"Here is the result of bases_num = {bases_num} and index = {index}:\",basesnum_coresspondingnum(bases_num,index))\r\n\r\n\r\n#20. Write a function that takes in a list of numbers and an integer. The function will return a list that contains the sum of all the numbers in the list that are greater than the integer.\r","votes":null},{"text":"\r\n    return [bases_num ** i for i in index]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    num = [bases_num**n for n in index]\r\n    return num\r\n\r","votes":null},{"text":"\r\n    bases = [2,3,5]\r\n    return list(map(lambda x:x**bases[index],bases_num))\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: x**bases_num,index))\r\n\r\n\r\nprint(basesnum_coresspondingnum(2,[1,2,3,4,5]))\r\n\r\n\r\n\r\n\r\n\"\"\"\r\n\r\nQuestion 8\r\n\r\nWrite a function that takes a list and a number as parameters and returns a list with the number removed from the list.\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    bases_num_list=list(bases_num)\r\n    index_list=list(index)\r\n    bases_num_list_corresponding=[bases_num**index for bases_num,index in zip(bases_num_list,index_list)]\r\n    return bases_num_list_corresponding\r\n\r\nprint(basesnum_coresspondingnum(10,2))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # using map function\r\n    return list(map(lambda x:x**index,bases_num))\r\n\r","votes":null},{"text":"\r\n    try:\r\n       ","votes":null},{"text":"\r\n    return index**bases_num\r\n\r\n#bases_num = [1,2,3,4,5]\r\n#index = [10,20,30,40,50]\r\n#print(list(map(basesnum_coresspondingnum,bases_num,index)))\r\n\r","votes":null},{"text":"\r\n\r\n    list_num = []\r\n    list_num = map(lambda num:num**index,bases_num)\r\n    return list_num\r\n\r\nprint(basesnum_coresspondingnum([2,3,4],3))\r\n\r","votes":null},{"text":"\r\n    numbers = [bases_num for x in range(index)]\r\n    return list(map(lambda x: x ** index, numbers))\r\n\r\n\r","votes":null},{"text":"\r\n    bases_list = list(map(lambda x: x**index,bases_num))\r\n    return bases_list\r\n\r\n\r","votes":null},{"text":"\r\n    return [num**index for num in bases_num]\r\n\r\nprint(basesnum_coresspondingnum([1,2,3],2))\r\n\r","votes":null},{"text":"\r\n    return [pow(bases_num,i) for i in index]\r\n\r\n\r","votes":null},{"text":"\r\n    bases = [2,3,4]\r\n    index = [1,2,3]\r\n   ","votes":null},{"text":"\r\n    return [i**index for i in bases_num]\r\n\r\nprint(basesnum_coresspondingnum([1,2,3,4,5,6],3))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    return map(lambda x: x**index,bases_num)\r\n\r\nbases_num = [1,2,3]\r\nindex = [1,2,3]\r\n\r\nprint(list(basesnum_coresspondingnum(bases_num,index)))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return [i**bases_num for i in index]\r\n\r\n# 2. List Comprehension\r","votes":null},{"text":"\r\n    return [bases_num**index for index in index]\r\n\r\n\r","votes":null},{"text":"\r\n    list_num = []\r\n    for i in index:\r\n        list_num.append(bases_num ** i)\r\n    return list_num\r\n\r","votes":null},{"text":"\r\n    return [pow(bases_num, i) for i in index]\r\n\r","votes":null},{"text":"\r\n    return bases_num**index\r\n\r\n#2\r","votes":null},{"text":"\r\n    return [bases_num**j for j in index]\r\n\r","votes":null},{"text":"\r\n    bases = [1,2,3,4,5,6,7,8,9]\r\n    power = []\r\n    for element in bases_num:\r\n        power.append(element ** index)\r\n    return power\r\n\r","votes":null},{"text":"\r\n    bases_list = [1,2,3,4,5]\r\n    coresponding_list = [4,5,6,7,8]\r\n    coresponding_index_list = list(map(lambda x: x**index,coresponding_list))\r\n    coresponding_bases_list = list(map(lambda x: x**bases_num,bases_list))\r\n    return coresponding_bases_list,coresponding_index_list\r\n\r\n\r\nprint(basesnum_coresspondingnum(3,2))\r\n\r","votes":null},{"text":"\r\n    return [bases_num[0]**i for i in index]\r\n\r","votes":null},{"text":"\r\n\r\n    bases_num_list = list(map(lambda x: bases_num ** x, index))\r\n    return bases_num_list\r\n\r\nprint(basesnum_coresspondingnum(3,[1,2,3]))\r\n\r\n# 2. Write a function that takes a list of integers and returns a list of tuples where the first element in each tuple is the original integer and the second element is its sum of digits.\r\n\r","votes":null},{"text":"\r\n    \r\n    return [i**index for i in bases_num]\r\n\r\nprint(basesnum_coresspondingnum([2,3,4],2))\r\n\r","votes":null},{"text":"\r\n    \r\n    #create a list that contain the power of said number in bases raised to the corresponding number in the index\r\n    return list(map(lambda x:x**bases_num[index],bases_num))\r\n\r","votes":null},{"text":"\r\n    return [x**i for i in index]\r\n\r","votes":null},{"text":"\r\n    bases_num = list(map(lambda x: x**index,bases_num))\r\n    return bases_num\r\n\r\nprint(basesnum_coresspondingnum([2,3,4,5],2))\r\n\r\n#Exercise 3\r\n\r","votes":null},{"text":"\r\n    \r\n    #defining a function to return the power of the index number.\r\n   ","votes":null},{"text":"\r\n\r\n    #function to return the result\r\n   ","votes":null},{"text":"\r\n    return [x**index for x in bases_num]\r\nprint(list(map(basesnum_coresspondingnum,[2,3,4,5,6,7,8,9,10],index=[1,2,3,4,5,6,7,8,9,10])))\r\n\r\n\"\"\"90. Write a function to calculate the power of a number. \"\"\"\r","votes":null},{"text":"\r\n    return [bases_num[index]*(","votes":null},{"text":"\r\n    return [bases_num**x for x in index]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(basesnum_coresspondingnum(2,[0,1,2,3,4,5,6,7,8,9,10]))\r\n    print(basesnum_coresspondingnum(3,[0,1,2,3,4,5,6,7,8,9,10]))\r\n    print(basesnum_coresspondingnum(4,[0,1,2,3,4,5,6,7,8,9,10]))\r\n    print(basesnum_coresspondingnum(5,[0,1,2,3,4,5,6,7,8,9,10]))\r\n    print(basesnum_coresspondingnum(6,[0,1,2,3,4,5,6,7,8,9,10]))\r\n    print(basesnum_coresspondingnum(7,[0,1,2,3,4,5,6,7,8,9,10]))\r\n    print(basesnum_coresspondingnum(8,[0,1,2,3,4,5,6,7,8,9,10]))\r\n    print(basesnum_coresspondingnum(9,[0,1,2,3,4,5,6,7,8,9,10]))\r\n    print(basesnum_coresspondingnum(10,[0,1,2,3,4,5,6,7,8,9,10]))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    return [bases_num**int(i) for i in index]\r\nprint(basesnum_coresspondingnum(2,range(1,6)))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return list(map(lambda x: x*bases_num,index))\r\n\r","votes":null},{"text":"\r\n    if bases_num > 1:\r\n        return list(map(lambda x: x ** index,bases_num))\r\n    else:\r\n        return list(map(lambda x: 1,bases_num))\r\n\r","votes":null},{"text":"\r\n    \r\n    return list(map(lambda x:x**index,bases_num))\r\n\r\n\r","votes":null},{"text":"\r\n    return (bases_num**index for index in range(bases_num,0,-1))\r\n\r\nbases_num = int(input(\"Enter a number: \"))\r\nprint(list(basesnum_coresspondingnum(bases_num,index)))\r\n\r\n\r","votes":null}],"time":{"count":2.0,"avg":144980.19,"std":22705.1846017644,"cov":0.156608876}}
{"id":540,"question":"def find_Diff(arr,n):\r\n    \"\"\"Write a python function to find the difference between highest and least frequencies in a given array.\"\"\"","answers":[{"text":"\r\n    f = []\r\n    for i in range(n):\r\n        f.append(arr.count(arr[i]))\r\n    return max(f) - min(f)\r\n\r\n\r\narr = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n\r","votes":108170.432},{"text":"\r\n    arr.sort()\r\n    freq = [0]*(n+1)\r\n    for i in arr:\r\n        freq[i] += 1\r\n    maxi = -1\r\n    for i in range(1,n+1):\r\n        if freq[i] > maxi:\r\n            maxi = freq[i]\r\n    min = n+1\r\n    for i in range(1,n+1):\r\n        if freq[i] < min and freq[i] > 0:\r\n            min = freq[i]\r\n    return maxi - min\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":123217.032},{"text":"\r\n    arr = list(map(int, arr))\r\n    d = set(arr)\r\n    lis = []\r\n    for i in d:\r\n        lis.append(arr.count(i))\r\n    return max(lis)-min(lis)\r\n\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for i in range(t):\r\n        n = int(input())\r\n        arr = list(map(int, input().split()))\r\n        print(find_Diff(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":123950.504},{"text":"\r\n    freq = {}\r\n    for i in arr:\r\n        if i not in freq:\r\n            freq[i] = 1\r\n        else:\r\n            freq[i] += 1\r\n    max_freq = max(freq.values())\r\n    min_freq = min(freq.values())\r\n    return max_freq - min_freq\r\n\r\n# Driver code\r\narr = [1, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6]\r\nprint(\"Difference between highest and lowest frequencies is:\", find_Diff(arr, len(arr)))\r\n\r\n\r","votes":130074.684},{"text":"\r\n    arr = list(map(int, arr))\r\n    #print(arr)\r\n    freq = dict()\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    #print(freq)\r\n    max_freq = max(freq.values())\r\n    #print(max_freq)\r\n    min_freq = min(freq.values())\r\n    #print(min_freq)\r\n    return max_freq - min_freq\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = input().split()\r\n\r\n    diff = find_Diff(arr, n)\r\n    print(diff)\r\n\r\n#Input\r\n#12\r\n#4 1 2 2 3 3 3 3 4 4 4 4\r\n\r\n#Output\r\n#3\r\n\r\n#Input\r\n#12\r\n#1 2 3 4 5 6 7 8 9 10 11 12\r\n\r\n#Output\r\n#0\r\n\r\n#Input\r\n#12\r\n#1 2 3 4 5 6 7 8 9 10 11 12\r\n\r\n#Output\r\n#0\r\n\r\n#Input\r\n#12\r\n#1 1 1 1 1 2 2 3 3 3 3 3\r\n\r\n#Output\r\n#1\r\n\r\n#Input\r\n#12\r\n#2 2 2 1 1 1 1 1 1 1 1 1\r\n\r\n#Output\r\n#1\r\n\r\n#Input\r\n#12\r\n#2 2 2 2 2 2 2 2 2 2 2 2\r\n\r\n#Output\r","votes":135858.172},{"text":"\r\n    freq_list = []\r\n    for i in range(0,n):\r\n        freq = arr.count(arr[i])\r\n        freq_list.append(freq)\r\n    max_freq = max(freq_list)\r\n    min_freq = min(freq_list)\r\n    diff = max_freq - min_freq\r\n    return diff\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10]\r\n    n = len(arr)\r\n    diff = find_Diff(arr,n)\r\n    print(diff)\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n), where n is the size of the array.\r\nSpace Complexity: O(n), where n is the size of the array.\r\n\r\nSample Input:\r\n\r\n[1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10]\r\n\r\nSample Output:\r\n\r\n10\r\n\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\n\r\nApproach 2:\r\n\r\nWe can use a dictionary for storing the frequency of each element. The time complexity will be O(n) and space complexity will be O(n) as well.\r\n\r\n\r\n\"\"\"\r\n\r","votes":135992.856},{"text":"\r\n    from collections import Counter\r\n    cnt=Counter(arr)\r\n    m=max(cnt.values())\r\n    ans=m-min(cnt.values())\r\n    return ans\r\n\r","votes":137992.868},{"text":"\r\n\r\n    # Create a dictionary\r\n    # to store the frequencies\r\n    d = dict()\r\n    \r\n    # Traverse the given array\r\n    for i in arr:\r\n        if i in d:\r\n            d[i] = d[i] + 1\r\n        else:\r\n            d[i] = 1\r\n\r\n    # Find the maximum and\r\n    # minimum frequencies\r\n    maxf = 0\r\n    minf = n+1\r\n    for i in d:\r\n        if (d[i] > maxf):\r\n            maxf = d[i]\r\n        if (d[i] < minf):\r\n            minf = d[i]\r\n\r\n    # Return the difference\r\n    return maxf - minf\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().strip().split()))\r\n    print(find_Diff(arr, n))\r\n\r\n# Input:\r\n# n = 7 \r\n# arr[] = {1, 3, 4, 4, 3, 3, 2}\r\n#","votes":138920.884},{"text":"\r\n    freq = {}\r\n    for i in arr:\r\n        freq[i] = freq.get(i,0) + 1\r\n    \r\n    return abs(max(freq.values()) - min(freq.values()))\r\n\r\narr = [1, 1, 3, 2, 1, 2, 3, 4, 5, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n\r\nn = len(arr)\r\n\r\nprint(find_Diff(arr,n))\r\n\r\n\r\n\"\"\"\r\nOutput:\r\n10\r\n\"\"\"\r\n\r\n\r\n# Approach 2: Using List\r\n\r","votes":140426.864},{"text":"\r\n    # code here\r\n    freq={}\r\n    for i in arr:\r\n        if i not in freq:\r\n            freq[i]=1\r\n        else:\r\n            freq[i]+=1\r\n    \r\n    print(freq)\r\n    freq=sorted(freq.values())\r\n    \r\n    print(freq)\r\n    \r\n    return freq[-1]-freq[0]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 2, 3, 4, 2, 4, 5, 5]\r\n    n = len(arr)\r\n    print(find_Diff(arr,n))\r\n\r\n\"\"\"\r\n\r\n\r\nTime Complexity: O(N LogN)\r\nSpace Complexity: O(N)\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":141458.84},{"text":"\r\n    freq = {}\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    max_freq = 0\r\n    for i in freq:\r\n        if freq[i] > max_freq:\r\n            max_freq = freq[i]\r\n    min_freq = max_freq + 1\r\n    for i in freq:\r\n        if freq[i] < min_freq:\r\n            min_freq = freq[i]\r\n    return max_freq - min_freq\r\n\r\n\r","votes":152697.372},{"text":"\r\n    \r\n    # create a dictionary for storing all the frequencies\r\n    d = {}\r\n    \r\n    # traverse the array and store the frequencies in the dictionary\r\n    for i in arr:\r\n        if i in d:\r\n            d[i] += 1\r\n        else:\r\n            d[i] = 1\r\n        \r\n    # return the difference between the max and min frequencies\r\n    return max(d.values()) - min(d.values())\r\n\r\n\r\n# Test cases:\r\n# Input:  arr = {2, 2, 2, 4, 4, 5, 5, 5} , n = 8\r\n# Output: 3\r\n# Explanation:\r\n# The frequency of 5 is 3.\r\n# The frequency of 2 is 2.\r\n# The frequency of 4 is 2.\r\n# The highest frequency is 3.\r\n# The lowest frequency is 2.\r\n# The difference between highest and lowest frequency is 3.\r\n\r\n# Input:  arr = {1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5} , n = 13\r\n# Output: 4\r\n# Explanation:\r\n# The frequency of 5 is 4.\r\n# The frequency of 3 is 3.\r\n# The frequency of 4 is 2.\r\n# The frequency of 2 is 2.\r\n# The highest frequency is 4.\r\n# The lowest frequency is 2.\r\n# The difference between highest and lowest frequency is 4.\r\n\r\n\r\n# Input:  arr = {1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ","votes":156876.092},{"text":"\r\n    #find max frequency\r\n    max_frequency=0\r\n    for i in arr:\r\n        if arr.count(i)==max_frequency:\r\n            max_frequency=arr.count(i)\r\n        elif arr.count(i)>max_frequency:\r\n            max_frequency=arr.count(i)\r\n    #find min frequency\r\n    min_frequency=max_frequency\r\n    for i in arr:\r\n        if arr.count(i)==min_frequency:\r\n            min_frequency=arr.count(i)\r\n        elif arr.count(i)<min_frequency:\r\n            min_frequency=arr.count(i)\r\n        \r\n    return max_frequency-min_frequency\r\n\r\n\r\narr=[1,2,3,4,5,4,3,2,1,4,5,5,5,4,3,2,1]\r\nn=len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n# Output: 3\r\n\r\n# Example 2:\r\n\r\n# Input:\r\n# N = 5\r\n# arr[] = {1, 2, 3, 4, 5}\r\n# Output: 0\r\n# Explanation:\r\n# There is no element with\r\n# frequency 2 so the difference\r\n# is 0.\r\n\r\n# Example 3:\r\n\r\n# Input:\r\n# N = 5\r\n# arr[] = {1, 1, 1, 1, 1}\r\n# Output: 0\r\n# Explanation:\r\n# All elements have a\r\n# frequency of 5.\r\n\r\n# Your Task:\r\n# You don't need to read input or print anything. Your task is to complete the function find_Diff() which takes the array arr[] and its size N as inputs and returns the difference between highest and least frequencies in the array.\r\n\r\n# Expected Time Complexity: O(N*logN)","votes":159235.392},{"text":"\r\n    arr.sort()\r\n    freq = {}\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    max_freq = 0\r\n    for i in freq.values():\r\n        if i > max_freq:\r\n            max_freq = i\r\n    min_freq = max_freq\r\n    for i in freq.values():\r\n        if i < min_freq:\r\n            min_freq = i\r\n    return max_freq - min_freq\r\n\r","votes":185540.856},{"text":"\r\n    freq_dict = {}\r\n    for i in arr:\r\n        if i not in freq_dict:\r\n            freq_dict[i] = 1\r\n        else:\r\n            freq_dict[i] += 1\r\n    return max(freq_dict.values()) - min(freq_dict.values())\r\n\r\n\r\n# Sample input\/output\r\n\r\narr = [1, 2, 2, 3, 4, 3, 1, 2]\r\nprint(find_Diff(arr, len(arr)))\r\n# 3\r\n\r\narr = [1, 2, 3, 2, 4, 3, 1, 2]\r\nprint(find_Diff(arr, len(arr)))\r\n# 4\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(find_Diff(arr, len(arr)))\r\n# 1\r\n\r\narr = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\r\nprint(find_Diff(arr, len(arr)))\r\n# 0\r\n\r\narr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\nprint(find_Diff(arr, len(arr)))\r\n# 10\r\n\r\narr = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\r\nprint(find_Diff(arr, len(arr)))\r\n# 10\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n# METHOD 2\r\n","votes":186834.952},{"text":"\r\n    # code here\r\n    freq = {}\r\n    for i in range(n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    maxf = 0\r\n    minf = 99999\r\n    for i in freq:\r\n        if maxf < freq[i]:\r\n            maxf = freq[i]\r\n        if minf > freq[i]:\r\n            minf = freq[i]\r\n    return maxf - minf\r\n\r\n#another solution\r","votes":192916.412},{"text":"\r\n    arr_dict = {}\r\n    for i in range(n):\r\n        arr_dict[arr[i]] = arr_dict.get(arr[i],0) +1\r\n    arr_list = list(arr_dict.values())\r\n    return max(arr_list)-min(arr_list)\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().rstrip().split()))\r\n    print(find_Diff(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":193475.544},{"text":"\r\n    # Your code goes here\r\n    freq = []\r\n    for i in range(n):\r\n        freq.append(arr.count(arr[i]))\r\n    freq.sort()\r\n    return freq[-1]-freq[0]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    print(find_Diff(arr, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":204741.848},{"text":"\r\n    freq = {}\r\n    for i in range(n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    max_freq = max(freq.values())\r\n    min_freq = min(freq.values())\r\n    return max_freq - min_freq\r\n\r\n\r\narr = [1, 2, 5, 2, 1, 2, 3, 5, 3, 3, 3, 2, 1]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\n\r","votes":212555.58},{"text":"\r\n    freq = {}\r\n    for i in range(n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] = freq[arr[i]] + 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    max_freq = max(freq.values())\r\n    min_freq = min(freq.values())\r\n    diff = max_freq - min_freq\r\n    return diff\r\n\r\n\r\narr = [1,2,3,1,2,3,1,3,1,2,3]\r\nn = len(arr)\r\nprint(\"Difference between highest and lowest frequencies: \", find_Diff(arr,n))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n\r\n# Method 2\r\n\r","votes":222769.64},{"text":"\r\n    arr2 = {}\r\n    for i in range(n):\r\n        if arr[i] in arr2:\r\n            arr2[arr[i]] += 1\r\n        else:\r\n            arr2[arr[i]] = 1\r\n    arr2 = dict(sorted(arr2.items(), key=lambda item: item[1]))\r\n    k = list(arr2.keys())\r\n    a = k[0]\r\n    b = k[-1]\r\n    return arr2[b] - arr2[a]\r\n\r\narr = [1,2,2,3,3,3]\r\nn = len(arr)\r\n\r\nprint(find_Diff(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":242743.86},{"text":"\r\n    frequency = {}\r\n    for i in range(n):\r\n        frequency[arr[i]] = frequency.get(arr[i], 0) + 1\r\n    frequency = sorted(frequency.items(), key=lambda x: x[1])\r\n    return frequency[-1][1] - frequency[0][1]\r\n\r\n# Method 2\r","votes":254075.792},{"text":"\r\n    #code here\r\n    c = Counter(arr)\r\n    maxi = c.most_common(1)[0][1]\r\n    mini = c.most_common()[-1][1]\r\n    print(maxi-mini)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int,input().split()))\r\n    find_Diff(arr,n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    high_freq =0\r\n    low_freq = 0\r\n    high_freq_index =0\r\n    low_freq_index = 0\r\n    freq = {}\r\n    for i in range(len(arr)):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    for k,v in freq.items():\r\n        if v > high_freq:\r\n            high_freq = v\r\n            high_freq_index = k\r\n        if v < low_freq:\r\n            low_freq = v\r\n            low_freq_index = k\r\n    return high_freq_index - low_freq_index\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\r\n    n = len(arr)\r\n    print(find_Diff(arr,n))\r\n\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\nSample Input 1:\r\n[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\r\n\r\nSample Output 1:\r\n3\r\n\r\nSample Input 2:\r\n[2, 2, 3, 3, 3, 4, 4, 4, 4, 4]\r\n\r\nSample Output 2:\r\n1\r\n\r\nSample Input 3:\r\n[1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4]\r\n\r\nSample Output 3:\r\n2\r\n\r\nExplanation of Sample Input 3:","votes":null},{"text":"\r\n \r\n    # Creating a dictionary to store the frequency of each element\r\n    d = {}\r\n \r\n    # Traversing the array\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            d[arr[i]] += 1\r\n        else:\r\n            d[arr[i]] = 1\r\n \r\n    # Getting the least frequency and highest frequency\r\n    least = 99999999999\r\n    highest = 0\r\n    for i in d:\r\n        if d[i] < least:\r\n            least = d[i]\r\n        if d[i] > highest:\r\n            highest = d[i]\r\n \r\n    # Returning the","votes":null},{"text":"\r\n    temp = []\r\n    for i in arr:\r\n        if i not in temp:\r\n            temp.append(i)\r\n    freq = {}\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    maxi = 0\r\n    for i in freq:\r\n        if freq[i] > maxi:\r\n            maxi = freq[i]\r\n    mini = 0\r\n    for i in freq:\r\n        if freq[i] < mini:\r\n            mini = freq[i]\r\n    return maxi - mini\r\n\r\narr = [1, 2, 3, 2, 3, 1, 3, 3, 2]\r\nn = 9\r\nprint(find_Diff(arr,n))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    freq = [0 for i in range(n)]\r\n    for i in arr:\r\n        freq[i] += 1\r\n\r\n    max_freq = 0\r\n    min_freq = n\r\n    for i in freq:\r\n        if i > max_freq:\r\n            max_freq = i\r\n        if i < min_freq:\r\n            min_freq = i\r\n\r\n    return max_freq - min_freq\r\n\r\n\r\n# Driver code\r\narr = [1, 1, 1, 1, 2, 2, 2, 3]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\n\r\n\r\n# Given an array of integers, find the difference between the highest and lowest frequencies of any number in the array.\r\n# For example, given the array [1, 1, 1, 2, 2, 2, 3], the highest frequency is 3 and the lowest frequency is 1, so the output should be 2.\r\n# Given the array [1, 1, 1, 2], the highest frequency is 1 and the lowest frequency is 1, so the output should be 0.\r\n# Given the array [1, 1, 1, 2, 3, 3], the highest frequency is 2 and the lowest frequency is 1, so the output should be 1.\r\n# https:\/\/www.hackerrank.com\/challenges\/frequency-queries\/problem\r\n\r\n\r\n# Editorial - https:\/\/www.hackerrank.com\/challenges\/frequency-queries\/editorial\r\n\r\n\r\nfrom itertools import groupby\r\n\r","votes":null},{"text":"\r\n    arr=sorted(arr)\r\n    freq=[]\r\n    for i in arr:\r\n        if i not in freq:\r\n            freq.append(i)\r\n    max_freq=0\r\n    min_freq=n+1\r\n    for i in freq:\r\n        if arr.count(i)>max_freq:\r\n            max_freq=arr.count(i)\r\n        if arr.count(i)<min_freq:\r\n            min_freq=arr.count(i)\r\n    return max_freq-min_freq\r\n\r\n\r\narr=input(\"Enter the array","votes":null},{"text":"\r\n    arr.sort()\r\n    freq={}\r\n    for i in arr:\r\n        if i not in freq:\r\n            freq[i]=1\r\n        else:\r\n            freq[i]+=1\r\n    maxi=0\r\n    mini=n\r\n    for i in freq:\r\n        if freq[i]>maxi:\r\n            maxi=freq[i]\r\n        if freq[i]<mini:\r\n            mini=freq[i]\r\n    return maxi-mini\r\n\r\n\r\narr=[1,2,2,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,","votes":null},{"text":"\r\n    hashmap = {}\r\n    for i in arr:\r\n        if i in hashmap:\r\n            hashmap[i] += 1\r\n        else:\r\n            hashmap[i] = 1\r\n    max_freq = 0\r\n    min_freq = n\r\n    for i in hashmap:\r\n        if hashmap[i] > max_freq:\r\n            max_freq = hashmap[i]\r\n        if hashmap[i] < min_freq:\r\n            min_freq = hashmap[i]\r\n    return max_freq - min_freq\r\n\r\n\r\nprint(find_Diff([1, 2, 2, 2, 3, 3, 2, 1], 7))\r\nprint(find_Diff([1, 2, 2, 2, 3, 3, 2, 1], 7))\r\nprint(find_Diff([1, 2, 2, 2, 3, 3, 2, 1], 7))\r\nprint(find_Diff([1, 2, 2, 2, 3, 3, 2, 1], 7))\r\nprint(find_Diff([1, 2, 2, 2, 3, 3, 2, 1], 7))\r\nprint(find_Diff([1, 2, 2, 2, 3, 3, 2, 1], 7))\r\nprint(find_Diff([1, 2, 2, 2, 3, 3, 2, 1], 7))\r\nprint(find_Diff([1, 2, 2, 2, 3, 3, 2, 1], 7))\r\nprint(find_Diff([1, 2, 2, 2, 3, 3, 2, 1], 7))\r\nprint(find_Diff([1, 2, 2, 2, ","votes":null},{"text":"\r\n    import collections\r\n    import math\r\n    freq = collections.Counter(arr)\r\n    max_freq = max(freq.values())\r\n    min_freq = min(freq.values())\r\n    diff = max_freq - min_freq\r\n    print(diff)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1","votes":null},{"text":"\r\n    dict = {}\r\n    for i in arr:\r\n        if i in dict:\r\n            dict[i] += 1\r\n        else:\r\n            dict[i] = 1\r\n    # sorted_x = sorted(dict.items(), key=operator.itemgetter(0))\r\n    # arr = []\r\n    # for _, v in sorted_x:\r\n    #     arr.append(v)\r\n    # print(arr)\r\n    # print(max(arr))\r\n    # print(min(arr))\r\n    diff = max(dict.values()) - min(dict.values())\r\n    print(diff)\r\n\r\n\r","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(n):\r\n        if(arr[i] in d):\r\n            d[arr[i]] += 1\r\n        else:\r\n            d[arr[i]] = 1\r\n    m = max(d.values())\r\n    a = [k for k, v in d.items() if v == m]\r\n    return (a[0]-a[-1]) if len(a)>1 else 0\r\n\r\narr = [1, 2, 3, 5, 3, 5, 6, 5, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1","votes":null},{"text":"\r\n    freq = {}\r\n    for i in range(n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    print(\"The frequency of each number is:\")\r\n    for i in range(n):\r\n        print(\"The frequency of\", arr[i], \"is\", freq[arr[i]])\r\n    print(\"The maximum frequency is\", max(freq.values()))\r\n    print(\"The minimum frequency is\", min(freq.values()))\r\n    return max(freq.values()) - min(freq.values())\r\n    \r\nif __name__ == \"__main__\":\r\n    print(\"Enter the size of the array:\")\r\n    n = int(input())\r\n    arr = []\r\n    for i in range(n):\r\n        print(\"Enter the\", i+1, \"element of the array:\")\r\n        arr.append(int(input()))\r\n    print(\"The difference between highest and lowest frequencies in the given array is:\", find_Diff(arr,n))\r\n    \r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the size of the array:\r\n5\r\nEnter the 1 element of the array:\r\n1\r\nEnter the 2 element of the array:\r\n2\r\nEnter the 3 element of the array:\r\n3\r\nEnter the 4 element of the array:\r\n4\r\nEnter the 5 element of the array:\r\n5\r\nThe frequency of each number is:\r\nThe frequency of 1 is 1\r\nThe frequency of 2 is 1\r\nThe frequency of 3 is 1\r\nThe frequency of 4 is 1\r\nThe frequency of 5 is 1\r\nThe maximum frequency is 1\r\nThe minimum frequency is 1\r\nThe difference between highest an","votes":null},{"text":"\r\n    d={}\r\n    for i in arr:\r\n        if i in d.keys():\r\n            d[i]+=1\r\n        else:\r\n            d[i]=1\r\n    maxi=0\r\n    mini=0\r\n    for i in d.keys():\r\n        if d[i]>maxi:\r\n            maxi=d[i]\r\n        if d[i]<mini:\r\n            mini=d[i]\r\n    print(maxi-mini)\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    arr = [2, 3, 1, 3, 3, 1","votes":null},{"text":"\r\n    dict = {}\r\n    for i in range(n):\r\n        dict[arr[i]] = dict.get(arr[i], 0) + 1\r\n    value = 0\r\n    for i in dict.values():\r\n        if i > value:\r\n            value = i\r\n        elif i < value:\r\n            value = i\r\n    return value\r\n\r\narr = [1,2,3,4,5,6,7,8,9,10]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\narr = [1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,6,7,8,10]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\narr = [1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,5,6,7,7,8,10]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\narr = [1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,5,6,7,8,10,10,10,10,10]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\narr = [1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,5,6,7,8,10,","votes":null},{"text":"\r\n    \r\n    #create a dictionary\r\n    dic = {}\r\n    \r\n    #store the frequency of each element in the array\r\n    for i in arr:\r\n        dic.setdefault(i,0)\r\n        dic[i]+=1\r\n    \r\n    #sort the dictionary based on the key\r\n    dic = sorted(dic.items(), key=lambda x: x[1], reverse=True)\r\n    \r\n    #return the difference\r\n    return dic[0][1]-dic[-1][1]\r\n\r\n\r\n\"\"\"\r\nTesting:\r\nInput: [1, 1, 2, 3, 5, 5, 5, 8, 8, 8, 8, 8, 9]\r\nOutput: 4\r\n\r\nInput: [1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7","votes":null},{"text":"\r\n    # Write your code here\r\n    if n==1:\r\n        return 0\r\n    arr.sort()\r\n    high = arr[-1]\r\n    low = arr[0]\r\n    return high-low\r\n\r\n\r\narr = [2, 2, 4, 3, 3, 1, 1, 5]\r\n\r\nn = 8\r\n\r\nprint(find_Diff(arr, n))\r\n\r\n# Given an array of integers and a number n, write a function that prints the first n elements of every contiguous subarray.\r\n\r\n# Example:\r\n\r\n# Input: arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} and n = 3\r\n# Output: 1 2 3\r\n#         2 3 4\r\n#         3 4 5\r\n# 1 2 3\r\n# 2 3 4\r\n# 3 4 5\r\n# 4 5 6\r\n# 5 6 7\r\n# 6 7 8\r\n# 7 8 9\r\n# 8 9 10\r\n\r\n# Example 2:\r\n\r\n# Input: arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} and n = 2\r\n# Output: 1 2\r\n#         2 3\r\n#         3 4\r\n#         4 5\r\n#         5 6\r\n#         6 7\r\n#         7 8\r\n#         8 9\r\n#         9 10\r\n\r\n\r\n# arr[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# n = 2\r\n# Output: 1 2\r\n#         2 3","votes":null},{"text":"\r\n    arr.sort()\r\n    hfreq = arr[n-1]\r\n    lfreq = arr[0]\r\n    return hfreq - lfreq\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(find_Diff([1, 2, 2, 5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10],13))\r\n    print(find_Diff([1, 2, 2, 5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10],12))\r\n    print(find_Diff([1, 2, 2, 5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10],11))\r\n    print(find_Diff([1, 2, 2, 5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10],10))\r\n    print(find_Diff([1, 2, 2, 5, 2, 3, 4, 5, 6, 7, 8, 9","votes":null},{"text":"\r\n    freq_list = []\r\n    for i in range(0, n):\r\n        if arr[i] not in freq_list:\r\n            freq_list.append(arr[i])\r\n            freq_list.append(arr.count(arr[i]))\r\n    \r\n    freq_list.sort()\r\n    print('The frequency list is ', freq_list)\r\n    \r\n    return freq_list[n-1] - freq_list[0]\r\n\r\n# Main function\r","votes":null},{"text":"\r\n    arr.sort()\r\n    freq = [0]*n\r\n    for i in range(0,n-1):\r\n        if arr[i]==arr[i+1]:\r\n            freq[i]+=1\r\n    max_freq = 0\r\n    min_freq = 99999\r\n    for i in range(0,n):\r\n        max_freq = max(max_freq,freq[i])\r\n        min_freq = min(min_freq,freq[i])\r\n    return max_freq-min_freq\r\n\r\nif __name__ == \"__main__\":\r\n    arr = list(map(int,input().split()))\r\n    n = len(arr)\r\n   ","votes":null},{"text":"\r\n    \r\n    count = [0]*n\r\n    for i in arr:\r\n        count[i] +=1\r\n    maxi = max(count)\r\n    mini = min(count)\r\n    return maxi-mini\r\n\r\n# Driver Code\r\narr = [3, 1, 6, 2, 4, 1, 2, 5, 1, 2, 6, 4, 3]\r\nn = len(arr)\r\nprint(\"The difference between highest and lowest frequency: \", find_Diff(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    arr = list(map(int, arr))\r\n    # print(arr)\r\n    freq = {}\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    # print(freq)\r\n    nums = list(freq.keys())\r\n    vals = list(freq.values())\r\n    max_freq = max(vals)\r\n    # print(max_freq)\r\n    for i in range(n):\r\n        if vals[i] == max_freq:\r\n            max_elem = nums[i]\r\n            # print(max_elem)\r\n            break\r\n    # print(max_elem)\r\n\r\n    min_freq = min(vals)\r\n    # print(min_freq)\r\n    for i in range(n):\r\n        if vals[i] == min_freq:\r\n            min_elem = nums[i]\r\n            # print(min_elem)\r\n            break\r\n    # print(min_elem)\r\n    return max_elem - min_elem\r\n\r\n# Driver Code\r\nif __name__=='__main__':\r\n    t = int(input())\r\n    for i in range(t):\r\n        n = int(input())\r\n        arr = input().split()\r\n        answer = find_Diff(arr,n)\r\n        print(answer)\r\n\r\n\r\n\r\n# Output:\r\n# 3\r\n# 5 1 5 5 5\r\n# 3\r\n# 1 1 1\r\n# 1\r\n# 1 2 3\r\n# 0\r\n# 1 1\r\n\r\n\r\n# Explanation:\r\n# Testcase 1: The difference between the highest and lowest frequency is 4.\r\n# Testcase 2: The difference between the highest and lowest frequency is 0.\r\n# Testcase 3","votes":null},{"text":"\r\n    freq_dict=dict()\r\n    for i in range(n):\r\n        if arr[i] in freq_dict:\r\n            freq_dict[arr[i]]+=1\r\n        else:\r\n            freq_dict[arr[i]]=1\r\n    max_freq=max(freq_dict.values())\r\n    min_freq=min(freq_dict.values())\r\n    return max_freq-min_freq\r\n\r\narr=list(map(int,input(\"Enter the array elements: \").split()))\r\nn=int(input(\"Enter the size of the array: \"))\r\nprint(\"The difference between the highest and least frequencies is: \",find_Diff(arr,n))\r\n\r\n\"\"\"\r\nTime Complexity: O(N), where 'N' is the size of the array\r\nSpace Complexity: O(N),","votes":null},{"text":"\r\n\r\n    # code here\r\n    count = {}\r\n    for i in arr:\r\n        if i in count:\r\n            count[i] += 1\r\n        else:\r\n            count[i] = 1\r\n    if len(count) == 1:\r\n        print(0)\r\n    else:\r\n        min_val = max_val = None\r\n        for i in count:\r\n            if min_val is None:\r\n                min_val = i\r\n                max_val = i\r\n            else:\r\n                if count[i] > count[max_val]:\r\n                    max_val = i\r\n                elif count[i] < count[min_val]:\r\n                    min_val = i\r\n        print(count[max_val] - count[min_val])\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\r\nn = len(arr)\r\nprint(arr)\r\nfind_Diff(arr, n)\r\n\r\n\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\r\nn = len(arr)\r\nprint(arr)\r\nfind_Diff(arr, n)\r","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 0\r\n    else:\r\n        temp = max(arr)\r\n        for i in range(1,n):\r\n            if arr[i] > temp:\r\n                temp = arr[i]\r\n        return temp - min(arr)\r\n\r\nn = int(input())\r\narr = list(map(int, input().rstrip().split()))\r\n\r\nresult = find_Diff(arr,n)\r\nprint(result)\r\n\r\n\r\n\"\"\"\r\nEnter your code here. Read input from STDIN. Print output to STDOUT\r\n\"\"\"\r\n\r\n# Code for the above logic\r\n\r\n# Enter your code here. Read input from STDIN. Print output to STDOUT\r\n\r","votes":null},{"text":"\r\n    freq = []\r\n    for i in range(n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    max_freq = 0\r\n    min_freq = 0\r\n    for i in range(len(freq)):\r\n        if freq[i] > max_freq:\r\n            max_freq = freq[i]\r\n        if freq[i] < min_freq:\r\n            min_freq = freq[i]\r\n    return max_freq - min_freq\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, ","votes":null},{"text":"\r\n    \r\n    #find the frequency of each element in the array\r\n    freq_dict = {}\r\n    for i in arr:\r\n        if i in freq_dict:\r\n            freq_dict[i] += 1\r\n        else:\r\n            freq_dict[i] = 1\r\n            \r\n    #sort the keys in the dictionary in decreasing order\r\n    freq_dict = dict(sorted(freq_dict.items(), key=lambda item: item[1],reverse=True))\r\n    \r\n    #return the difference\r\n    return freq_dict[1]-freq_dict[n]\r\n\r\n\r\narr = [1,3,5,7,3,1,7,3,1,3,5,7,3,1]\r\nprint(find_Diff(arr,3))\r\n\r\n\r\n#Time Complexity: O(n)\r\n#Space Complexity: O(n)\r\n\r\n#----------------------------------------------------------------------------------------------------------------------------------------------\r\n#Solution - 2\r\n\r\n","votes":null},{"text":"\r\n    \r\n    # create a dictionary to store frequencies\r\n    freq = {}\r\n    \r\n    # loop through the array\r\n    for i in arr:\r\n        \r\n        # if the value is not present in the dictionary, add it to the dictionary\r\n        if i not in freq:\r\n            \r\n            # add the value to the dictionary with frequency 1\r\n            freq[i] = 1\r\n            \r\n        # if the value is already present in the dictionary, increase its frequency by 1\r\n        else:\r\n            freq[i] += 1\r\n            \r\n    # create a variable to store the highest frequency\r\n    max_freq = 0\r\n    \r\n    # loop through the dictionary\r\n    for i, j in freq.items():\r\n        \r\n        # if the frequency is greater than the highest frequency, update the highest frequency\r\n        if j > max_freq:\r\n            max_freq = j\r\n            \r\n    # create a variable to store the lowest frequency\r\n    min_freq = float('inf')\r\n    \r\n    # loop through the dictionary\r\n    for i, j in freq.items():\r\n        \r\n        # if the frequency is less than the lowest frequency, update the lowest frequency\r\n        if j < min_freq:\r\n            min_freq = j\r\n    \r\n    # return the difference between the highest and lowest frequencies\r\n    return max_freq - min_freq\r\n\r\n# TEST CASES\r\n\r\n# Test Case 1\r\narr = [1, 1, 2, 2, 3, 4, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n# Test Case 2\r\narr = ","votes":null},{"text":"\r\n    arr.sort()\r\n    return max(arr)-min(arr)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 2, 2, 1]\r\n    res = find_Diff(arr, len(arr))\r\n    print(res)\r\n\r\n\r\n# 2. Given a list of integers, return the sum of all integers that occur an odd number of times.\r\n\r","votes":null},{"text":"\r\n    freq = []\r\n    for i in range(n):\r\n        if(arr[i] in freq):\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    freq.sort()\r\n    return freq[-1] - freq[0]\r\n\r\narr = [1,3,2,1,4,2,1,2,1,3,2]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    freq=[]\r\n    for i in arr:\r\n        freq.append(arr.count(i))\r\n    maxi=freq[0]\r\n    mini=freq[0]\r\n    for i in range(len(freq)):\r\n        if freq[i]>maxi:\r\n            maxi=freq[i]\r\n        elif freq[i]<mini:\r\n            mini=freq[i]\r\n    return maxi-mini\r\nn=int(input(\"Enter the size of the array:\"))\r\narr=[]\r\nfor i in range(n):\r\n    arr.append(int(input(\"Enter the no.s of the array: \")))\r\nprint(\"The difference between the highest and lowest frequency is:\",find_Diff(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    arr.sort()\r\n    f=0\r\n    l=0\r\n    for i in range(n):\r\n        if arr[i]==arr[i+1]:\r\n            f=arr[i]\r\n        else:\r\n            break\r\n    for i in range(n-1,-1,-1):\r\n        if arr[i]==arr[i-1]:\r\n            l=arr[i]\r\n        else:\r\n            break\r\n    return f-l\r\narr=list(map(int,input(\"Enter the array elements: \").split()))\r\nn=len(arr)\r\nprint(\"Difference:\",find_Diff(arr,n))\r\n\r\n\r\n#3) Write a python function to find the difference between highest and least frequencies in a given array.\r\n\r","votes":null},{"text":"\r\n    freq_dict={}\r\n    max_freq=0\r\n    for i in arr:\r\n        if i not in freq_dict:\r\n            freq_dict[i]=1\r\n        else:\r\n            freq_dict[i]+=1\r\n    for i in freq_dict:\r\n        max_freq=max(freq_dict[i],max_freq)\r\n    return max_freq-min(freq_dict.values())\r\n\r\narr = [1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4,","votes":null},{"text":"\r\n    f_dict = {}\r\n    f = []\r\n    for i in arr:\r\n        if i not in f_dict:\r\n            f_dict[i] = 1\r\n        else:\r\n            f_dict[i] += 1\r\n\r\n    for i in range(n):\r\n        f.append(f_dict[i])\r\n\r\n    f.sort()\r\n    return f[-1] - f[0]\r\n\r\n\r\narr = [1,3,6,7,3,1,5,6,6,3,1]\r\nprint(find_Diff(arr,6))\r\n\r\n# 1. Write a python function that takes an array and a number and finds the difference between the highest and lowest frequencies in the array.\r\n# 2. The array will contain numbers from 0 to n-1 and the number will be n. The function should return the difference between the highest and lowest frequencies in the array.\r\n# 3. For example, if the array is [1,3,6,7,3,1,5,6,6,3,1] and the number is 6, the function should return 3.\r\n# 4. Explanation : The array contains 1,3,6,7,3,1,5,6,6,3,1.\r\n# 5. The highest frequency is 3 and the lowest frequency is 1.\r\n# 6. So, the difference will be 3-1 = 2. The function should return 2.\r\n# 7. If the array is [1,3,6,7,3,1,5,6,6,3,1] and the number is 10, the function should return 0.\r\n# 8. Explanation : The array contains 1,3,6,7,3,1,5,6,6,3,1.\r\n# 9. The highest frequency is 3 and the lowest frequency is 1.\r\n# 10. So, the difference will be 3-1 = 2. The function should return","votes":null},{"text":"\r\n    d = {}\r\n    for i in arr:\r\n        if i not in d:\r\n            d[i] = 1\r\n        else:\r\n            d[i] += 1\r\n    \r\n    maximum = max(d.values())\r\n    minimum = min(d.values())\r\n    return maximum - minimum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 2, 3, 1, 4, 2]\r\n    n = len(arr)\r\n    print(find_Diff(arr, n))\r\n\r\n\"\"\"\r\nTest cases\r\narr = [1, 2, 2, 3, 1, 4, 2]\r\nOutput: 3\r\nExplanation: {1:3, 2:3, 3:1, 4:1}\r\n\r\narr = [1, 3, 2, 2, 2, 3, 1, 1, 2]\r\nOutput: 2\r\nExplanation: {1:4, 2:4, 3:2}\r\n\r\narr = [1, 1, 1, 2, 2, 2, 3, 3, 3]\r\nOutput: 0\r\nExplanation: {1:3, 2:3, 3:3}\r\n\r\narr = [1, 1, 1, 2, 2, 2, 3, 3, 3]\r\nOutput: 0\r\nExplanation: {1:3, 2:3, 3:3}\r\n\r\narr = [1, 1, 1, 2, 2, 2, 3, 3, 3]\r\nOutput: 0\r\nExplanation: {1:3, 2:3, 3:3}\r\n\r\narr = [1, 1, 1, 2, 2, 2, 3, 3, 3]\r","votes":null},{"text":"\r\n    arr.sort(reverse=True)\r\n    arr1=[]\r\n    for i in range(n):\r\n        arr1.append(arr[i])\r\n    arr1.sort()\r\n    return arr1[0]-arr1[n-1]\r\n\r\nn=int(input(\"Enter the number of elements in the array: \"))\r\n\r\narr=[]\r\nprint(\"Enter the elements of the array: \")\r\nfor i in range(n):\r\n    arr.append(int(input()))\r\n\r\nprint(\"The difference between highest and least frequencies in a given array is: \",find_Diff(arr,n))\r\n\r\n\"\"\"\r\nTime Complexity: O(nlogn) where n is the size of the array.\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the number of elements in the array: 5\r\nEnter the elements of the array: \r\n5\r\n2\r\n2\r\n3\r\n3\r\nThe difference between highest and least frequencies in a given array is:  2\r\n\r\nSAMPLE II\r\n\r\nEnter the number of elements in the array: 5\r\nEnter the elements of the array: \r\n3\r","votes":null},{"text":"\r\n    arr.sort()\r\n    # print(arr)\r\n    freq = []\r\n    for i in range(len(arr)):\r\n        temp = 0\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] == arr[j]:\r\n                temp += 1\r\n        freq.append(temp)\r\n    # print(freq)\r\n    freq.sort()\r\n    # print(freq)\r\n    diff = freq[len(freq)-1] - freq[0]\r\n    print(diff)\r\n\r\narr = [3,3,3,1,1,1,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1","votes":null},{"text":"\r\n    freq = [0]*256\r\n    for i in range(n):\r\n        freq[arr[i]]+=1\r\n    max_freq = 0\r\n    min_freq = 0\r\n    for i in range(256):\r\n        if freq[i]>max_freq:\r\n            max_freq = freq[i]\r\n        if freq[i]<min_freq:\r\n            min_freq = freq[i]\r\n    return max_freq - min_freq\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [2, 1, 4, 3, 5, 6, 2, 3, 6, 5, 1]\r\n    n = len(arr)\r\n    print(find_Diff(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    #code here\r\n    a = []\r\n    b = []\r\n    c = []\r\n    d = []\r\n    e = []\r\n    for i in range(0,len(arr)):\r\n        if arr[i] not in a:\r\n            a.append(arr[i])\r\n    for i in range(0,len(a)):\r\n        b.append(arr.count(a[i]))\r\n    c = list(zip(a,b))\r\n    d = sorted(c,key = lambda x:x[1])\r\n    e.append(d[0][1])\r\n    e.append(d[-1][1])\r\n    return (e[0] - e[1])\r\n    \r\narr = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, ","votes":null},{"text":"\r\n    return max(arr) - min(arr)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    print(find_Diff(arr,n))\r\n\r\n\r","votes":null},{"text":"\r\n    n=len(arr)\r\n    freq=[]\r\n    for i in range(n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]]+=1\r\n        else:\r\n            freq[arr[i]]=1\r\n    freq.sort()\r\n    diff=abs(freq[n-1]-freq[0])\r\n    return diff\r\n\r\nprint(find_Diff([1, 1, 2, 2, 3, 3, 3], 7))\r\nprint(find_Diff([1, 1, 1, 1, 1, 1, 2, 2, 2], 9))\r\nprint(find_Diff([1, 1, 1, 1, 1, 1, 5, 5, 5], 9))\r\nprint(find_Diff([5, 5, 5, 5, 5, 5, 5, 5, 5], 9))\r\nprint(find_Diff([5, 5, 5, 5, 5, 5, 5, 5, 5], 9))\r\nprint(find_Diff([5, 5, 5, 5, 5, 5, 5, 5, 5], 9))\r\nprint(find_Diff([1, 1, 5, 5, 5, 5, 5, 5, 5], 9))\r\nprint(find_Diff([1, 1, 5, 5, 5, 5, 5, 5, 5], 9))\r\nprint(find_Diff([1, 1, 5, 5, 5, 5, 5, 5, 5], 9))\r\nprint(find_Diff([1, 1, 5, 5, 5, 5, 5, 5, 5], 9))\r\nprint(find_Diff([1, 1, ","votes":null},{"text":"\r\n    count = 0\r\n    freq = []\r\n    for i in range(n):\r\n        count = arr.count(arr[i])\r\n        freq.append(count)\r\n        count = 0\r\n    max_freq = max(freq)\r\n    min_freq = min(freq)\r\n    diff = max_freq - min_freq\r\n    return diff\r\n\r\n\r\nn = int(input(\"Enter the number of values: \"))\r\narr = []\r\nfor i in range(n):\r\n    arr.append(int(input(\"Enter value: \")))\r\n\r\nprint(\"Difference between highest and least frequencies in a given array: \", find_Diff(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nInput:\r\nEnter the number of values: 6\r\nEnter value: 1\r\nEnter value: 2\r\nEnter value: 2\r\nEnter value: 1\r\nEnter value: 3\r\nEnter value: 3\r\n\r\nOutput:\r\nDifference between highest and least frequencies in a given array:  2\r\n\r\n\r\n\r\n\r\n\r\nInput:\r\nEnter the number of values: 5\r\nEnter value: 1\r\nEnter value: 2\r\nEnter value: 3\r\nEnter value: 4\r\nEnter value: 5\r\n\r\nOutput:\r\nDifference between highest and least frequencies in a given array:  0\r\n\r\n\r\n\r\n\r\n\r\nInput:\r\nEnter the number of values: 4\r\nEnter value: 1\r\nEnter value: 2\r\nEnter value: 3\r\nEnter value: 3\r\n\r\nOutput:\r\nDifference between highest and least frequencies in a given array:  1\r\n\r\n\r\n\r\n\r\n\r\nInput:\r\nEnter the number of values: 6\r\nEnter value: 2\r\nEnter value: 4\r\nEnter value: 5\r\nEnter value: 1\r\nEnter value:","votes":null},{"text":"\r\n    from collections import Counter\r\n    # Your code goes here\r\n    a = Counter(arr)\r\n    b = max(a.values())\r\n    c = min(a.values())\r\n    d = b-c\r\n    return d\r\n\r\n\r\n\r\narr = [2, 2, 3, 3, 5, 5, 7, 7, 11, 11, 13]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\narr = [2, 2, 3, 3]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\narr = [1, 2, 2, 3, 3]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\narr = [2, 2, 3, 3, 5, 5, 7, 7, 11, 11, 13, 13]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\narr = [1, 2, 2, 3, 3, 5, 5, 7, 7, 11, 11, 13, 13]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 3","votes":null},{"text":"\r\n    arr.sort()\r\n    n = len(arr)\r\n    for i in range(n):\r\n        if arr[i]!=arr[i+1]:\r\n            return (abs(arr[i]-arr[i+1]))\r\n    return 0\r\n\r\narr = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nprint(\"The difference between highest and lowest frequencies in the given array is: \",find_Diff(arr,20))\r\n\r\n#OUTPUT\r\n'''\r\nThe difference between highest and lowest frequencies in the given array is:  1\r\n'''\r\n\r\n# Example 2\r\n# Input:\r\n# N = 6\r\n# A[] = {1, 3, 2, 4, 5, 6}\r\n# Output:\r\n# 1\r\n# Explanation:\r\n# The difference between highest and lowest frequencies in the given array is 1.\r\n\r\n# Python3 program to find the difference between highest and lowest frequencies in a given array\r","votes":null},{"text":"\r\n    return max(arr)-min(arr)\r\n\r\narr=[1, 4, 5, 3, 2, 1]\r\nn=len(arr)\r\nprint(find_Diff(arr,n))\r\nprint(find_Diff(arr,n))\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    freq = {}\r\n    for i in range(n):\r\n        if arr[i] not in freq.keys():\r\n            freq[arr[i]] = 1\r\n        else:\r\n            freq[arr[i]] += 1\r\n    l = []\r\n    for i in freq.keys():\r\n        l.append(freq[i])\r\n    l.sort()\r\n    print(l)\r\n    return l[len(l)-1]-l[0]\r\n\r\narr = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]\r\nprint(find_Diff(arr,16))\r\n\r\n\r","votes":null},{"text":"\r\n    freq={}\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i]+=1\r\n        else:\r\n            freq[i]=1\r\n    sorted_freq=sorted(freq.items(),key=lambda item:item[1],reverse=True)\r\n    print(sorted_freq)\r\n    min_freq=sorted_freq[0][1]\r\n    max_freq=sorted_freq[-1][1]\r\n    return max_freq-min_freq\r\n\r\narr=[1,1,1,2,2,2,3,3,3]\r\nn=len(arr)\r\nprint(","votes":null},{"text":"\r\n\r\n    \r\n    # Creating a dictionary to store the frequency of each element.\r\n    my_dict = dict()\r\n    for i in range(n):\r\n        if arr[i] in my_dict:\r\n            my_dict[arr[i]] += 1\r\n        else:\r\n            my_dict[arr[i]] = 1\r\n\r\n    # Sorting the dictionary in ascending order.\r\n    sorted_dict = sorted(my_dict.items(), key=lambda x: x[1])\r\n\r\n    # Finding the difference between the max and least frequency.\r\n    max_freq = sorted_dict[-1][1]\r\n    least_freq = sorted_dict[0][1]\r\n    print(f\"The difference between the max and least frequencies is {max_freq - least_freq}\")\r\n\r\n\r\narr = [2, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ","votes":null},{"text":"\r\n    arr.sort()\r\n    diff = arr[n-1] - arr[0]\r\n    return diff\r\n\r\n","votes":null},{"text":"\r\n\r\n    count = 0\r\n    arr.sort()\r\n    l = len(arr)\r\n\r\n    for i in range(l):\r\n        if arr[i] == arr[i+1]:\r\n            count += 1\r\n\r\n    # print(count)\r\n\r\n    if count == 0:\r\n        return arr[0]\r\n    else:\r\n        return arr[l-1] - arr[0]\r\n\r\n\r\narr = [1, 2, 2, 2, 2, 2, 6, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1]\r\nn = 20\r\nprint(find_Diff(arr,n))\r\n\r\n\"\"\"\r\nTime Complexity = O(n)\r\n","votes":null},{"text":"\r\n    freq = [0] * (n+1)\r\n    for i in arr:\r\n        freq[i] += 1\r\n    \r\n    min = freq[0]\r\n    max = freq[0]\r\n    \r\n    for i in range(1,n+1):\r\n        if(freq[i] <= min):\r\n            min = freq[i]\r\n        if(freq[i] >= max):\r\n            max = freq[i]\r\n    \r\n    return max - min\r\n\r\n# Test Cases\r\n\r\nprint(\"Input: arr = [1, 2, 3, 2, 2, 3, 4, 5] and n = 7\")\r\nprint(\"Output:\", find_Diff([1, 2, 3, 2, 2, 3, 4, 5], 7))\r\nprint(\"Expected: 3\")\r\n\r\nprint(\"Input: arr = [1, 1, 1, 1, 1, 1, 1, 1] and n = 7\")\r\nprint(\"Output:\", find_Diff([1, 1, 1, 1, 1, 1, 1, 1], 7))\r\nprint(\"Expected: 0\")\r\n\r\nprint(\"Input: arr = [2, 2, 2, 2, 2, 2, 2, 2] and n = 7\")\r\nprint(\"Output:\", find_Diff([2, 2, 2, 2, 2, 2, 2, 2], 7))\r\nprint(\"Expected: 6\")\r\n\r\nprint(\"Input: arr = [1, 1, 2, 2, 2, 2, 2, 2] and n = 7\")\r\nprint(\"Output:\", find_Diff([1, 1, 2, 2, 2, 2, 2, 2], 7))\r\nprint(","votes":null},{"text":"\r\n    \r\n    dict = {}\r\n\r\n    for i in range(len(arr)):\r\n        if(arr[i] in dict):\r\n            dict[arr[i]] += 1\r\n        else:\r\n            dict[arr[i]] = 1\r\n\r\n    max_freq = 0\r\n    min_freq = 0\r\n\r\n    for i in range(len(arr)):\r\n        if(dict[arr[i]] >= max_freq):\r\n            max_freq = dict[arr[i]]\r\n        if(dict[arr[i]] <= min_freq):\r\n            min_freq = dict[arr[i]]\r\n    \r\n    return max_freq - min_freq\r\n\r\narr = [1,1,2,2,2,3,5,5,7,7,7,7,9,9,9,9]\r\nprint(find_Diff(arr,len(arr)))\r\n\r\n\r\n# Output: 3\r\n\r\n\r\n\r\n# Q3. Write a python function to find the second largest element in an array.\r\n\r","votes":null},{"text":"\r\n    freq = {}\r\n    max_freq, min_freq = 0, 0\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    for key, value in freq.items():\r\n        if value > max_freq:\r\n            max_freq = value\r\n        if value < min_freq:\r\n            min_freq = value\r\n    return max_freq - min_freq\r\n\r","votes":null},{"text":"\r\n    arr = list(map(int,arr))\r\n    n = int(n)\r\n    maxi = max(arr)\r\n    mini = min(arr)\r\n    temp = []\r\n    for i in range(1,maxi+1):\r\n        temp.append(0)\r\n    for i in range(len(arr)):\r\n        temp[arr[i]-1] += 1\r\n    print(temp)\r\n    res = max(temp) - min(temp)\r\n    return res\r\n\r\narr = [1,3,2,2,2,5,4,7]\r\nn = 8\r\nprint(find_Diff(arr,n))\r\n\r\n#find the difference between the highest and the least frequencies in a given array.\r\n#Input Format:\r\n#The first line contains the space separated array elements.\r\n#The second line contains the value of the integer N.\r\n#Output Format:\r\n#The first line contains the value of difference between the highest and the least frequencies in a given array.\r\n#Sample Input:\r\n#1 3 2 2 2 5 4 7\r\n#8\r\n#Sample Output:\r\n#4\r\n#Explanation:\r\n#The highest frequency is 4 and the least frequency is 1\r\n#Hence, the difference between highest and least frequency is 4 - 1 = 3\r\n\r\n#another approach\r\nfrom collections import Counter\r\n\r","votes":null},{"text":"\r\n    \r\n    #Code\r\n    #find the frequency of each element\r\n    freq={}\r\n    for i in arr:\r\n        if i not in freq:\r\n            freq[i]=1\r\n        else:\r\n            freq[i]+=1\r\n    #print(freq)\r\n    #find the maximum frequency\r\n    maxi=0\r\n    for i in freq:\r\n        if freq[i]>maxi:\r\n            maxi=freq[i]\r\n    #print(maxi)\r\n    #find the minimum frequency\r\n    mini=maxi\r\n    for i in freq:\r\n        if freq[i]<mini:\r\n            mini=freq[i]\r\n    #print(mini)\r\n    #Difference\r\n    diff=maxi-mini\r\n    print(diff)\r\n    \r\n    \r\n\r\n\r\narr=[1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10","votes":null},{"text":"\r\n    \r\n    d = {}\r\n    for i in arr:\r\n        if i in d.keys():\r\n            d[i] += 1\r\n        else:\r\n            d[i] = 1\r\n    \r\n    l = []\r\n    for i in d.values():\r\n        l.append(i)\r\n        \r\n    l.sort()\r\n    \r\n    return l[n-1] - l[0]\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n\r","votes":null},{"text":"\r\n    #code here\r\n    l=[]\r\n    for i in range(n):\r\n        l.append(arr[i])\r\n\r\n    l.sort()\r\n    l=list(dict.fromkeys(l))\r\n\r\n    return max(","votes":null},{"text":"\r\n    arr_max_frequency=0\r\n    count=0\r\n    for i in arr:\r\n        if arr.count(i)>count:\r\n            count=arr.count(i)\r\n            arr_max_frequency=i\r\n    return abs(arr_max_frequency-n-1)\r\n\r\n\r\n\r\n# Taking the array input from user\r\nn=int(input(\"Enter the size of array : \"))\r\narr=list(map(int,input(\"Enter the elements of array : \").split()))\r\n\r\nprint(\"Difference between highest and least frequencies in a given array is : \",find_Diff(arr,n))\r\n\r\n\r\n\"\"\"\r\n\r\nTime Complexity : O(n) where n is the size of array \r\nSpace Complexity : O(1)","votes":null},{"text":"\r\n    arr.sort()\r\n    maxf = arr[0]\r\n    minf = arr[n-1]\r\n    diff = maxf - minf\r\n    return diff\r\n\r\n\r\narr = [1,1,1,1,3,3,3,4,4,4,5,5,5,5,5]\r\nn = len(arr)\r\nprint(find_Diff","votes":null},{"text":"\r\n    \r\n    # create a dictionary\r\n    dic = {}\r\n    \r\n    for i in range(n):\r\n        if arr[i] in dic:\r\n            dic[arr[i]] += 1\r\n        else:\r\n            dic[arr[i]] = 1\r\n            \r\n    # print the dictionary\r\n    print(dic)\r\n    \r\n    # get the maximum value from the dictionary\r\n    max_val = max(dic.values())\r\n    # print the maximum value\r\n    print(\"Maximum Value:\",max_val)\r\n    \r\n    # get the minimum value from the dictionary\r\n    min_val = min(dic.values())\r\n    # print the minimum value\r\n    print(\"Minimum Value:\",min_val)\r\n    \r\n    # get the difference\r\n    diff = max_val - min_val\r\n    # print the difference\r\n    print(\"Difference:\",diff)\r\n\r\n\r\n# main function\r","votes":null},{"text":"\r\n    # code here\r\n    # 1. Count Frequencies\r\n    count=[]\r\n    for i in range(n):\r\n        count.append(0)\r\n    for i in range(n):\r\n        count[arr[i]]+=1\r\n    # 2. Find Max and Min Frequencies\r\n    max=0\r\n    min=0\r\n    for i in range(n):\r\n        if(count[i]>max):\r\n            max=count[i]\r\n        if(count[i]<min):\r\n            min=count[i]\r\n    return max-min\r\n\r\n\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\nprint(find_Diff(arr,n))\r\n\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input().strip())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = find_Diff(arr, n)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n#!\/bin\/python3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n# Complete the find_Diff function below.\r","votes":null},{"text":"\r\n    frequency = []\r\n    for i in range(0,n):\r\n        if arr[i] not in frequency:\r\n            frequency.append(arr[i])\r\n    freq = {}\r\n    for i in range(0, len(frequency)):\r\n        freq[frequency[i]] = frequency.count(frequency[i])\r\n    max_freq = max(freq.values())\r\n    min_freq = min(freq.values())\r\n    return max_freq - min_freq\r\n\r\narr = [1,1,2,2,3,3]\r\nn = len(arr)\r\nprint(\"Difference between highest and least frequencies in given array is\", find_Diff(arr,n))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\nSample Input 1:\r\n[1,1,2,2,3,3]\r\n\r\nSample Output 1:\r\n2\r\n\r\nSample Input 2:\r\n[1,1,1,2,2,2,3,3,3]\r\n\r\nSample Output 2:\r\n1\r\n\r\nEXPLANATION:\r\n\r\nIn Sample Input 1:\r\n[1,1,2,2,3,3]\r\nThe frequency of 1 is 2 and the frequency of 2 is 2, so the difference between the frequency of highest and least frequencies is 2-2 = 0.\r\n\r\nIn Sample Input 2:\r\n[1,1,1,2,2,2,3,3,3]\r\nThe frequency of 1 is 3 and the frequency of 2 is 3, so the difference between the frequency of highest and least frequencies is 3-3 = 0.\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nFollowing is the efficient approach:\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    m = {}\r\n    for i in arr:\r\n        if i in m:\r\n            m[i] += 1\r\n        else:\r\n            m[i] = 1\r\n    max = 0\r\n    min = 0\r\n    for i in m:\r\n        if max < m[i]:\r\n            max = m[i]\r\n        if min > m[i]:\r\n            min = m[i]\r\n    return max - min\r\n\r\nif __name__ == '__main__':\r\n  arr = [2, 1, 2, 2, 1, 3, 1, 1, 1, 1]\r\n  n = len(arr)\r\n  print(find_Diff(arr,n))\r\n  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n  n = len(arr)\r\n  print(find_Diff(arr,n))\r\n  arr = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2]\r\n  n = len(arr)\r\n  print","votes":null},{"text":"\r\n    frequency = {}\r\n    for i in range(n):\r\n        if arr[i] in frequency:\r\n            frequency[arr[i]] += 1\r\n        else:\r\n            frequency[arr[i]] = 1\r\n    sorted_arr = sorted(frequency.items(), key=lambda kv: kv[1],reverse=True)\r\n    return sorted_arr[0][1] - sorted_arr[-1][1]\r\n\r\n\r\narr = [5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\narr = [2, 2, 1, 3, 1, 4, 2, 1, 2, 1, 3, 1, 4, 2, 1, 2, 1, 3, 1, 4]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\narr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\narr = [1]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\narr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\narr = [1, 1, 1, 1,","votes":null},{"text":"\r\n    \r\n    # Find the highest and lowest frequencies of the array\r\n    maximum = -1 \r\n    minimum = 1000000000000000000000000\r\n    for i in range(n):\r\n        if(arr[i]>maximum):\r\n            maximum = arr[i]\r\n        if(arr[i]<minimum):\r\n            minimum = arr[i]\r\n    # Find the difference\r\n    return maximum-minimum\r\n\r\n\r\n\r\nn = int(input(\"Enter the number of elements: \"))\r\n\r\narray = []\r\nfor i in range(n):\r\n    array.append(int(input(\"Enter the elements: \")))\r\n\r\nprint(find_Diff(array, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    a=arr[0]\r\n    b=a\r\n    count=1\r\n    for i in range(1,n):\r\n        if(arr[i]==a):\r\n            count+=1\r\n        elif(arr[i]==b):\r\n            count-=1\r\n        else:\r\n            if(count>0):\r\n                a=arr[i]\r\n                count=1\r\n            else:\r\n                b=arr[i]\r\n                count=-1\r\n    return max(abs(a-b),abs(a-b))\r\n\r\n\r\nif","votes":null},{"text":"\r\n    #Input: arr=[1,2,3,4,5,5,5,6,7,8,9,10]\r\n    #Output: 7\r\n\r\n    #Input: arr=[1,2,3,4,5,6,7,8,9,10]\r\n    #Output: 0\r\n\r\n    #Input: arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\r\n    #Output: 11\r\n\r\n    #Input: arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\n    #Output: 17\r\n\r\n    #Input: arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\r\n    #Output: 16\r\n\r\n    #Input: arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\r\n    #Output: 15\r\n\r\n    #Input: arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\r\n    #Output: 14\r\n\r\n    #Input: arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15","votes":null},{"text":"\r\n    #create a dictionary\r\n    frequency = {}\r\n    for i in arr:\r\n        if i in frequency:\r\n            frequency[i] += 1\r\n        else:\r\n            frequency[i] = 1\r\n    #sort the dictionary\r\n    frequency = sorted(frequency.items(),key=lambda x:x[1])\r\n    #return the difference\r\n    return frequency[-1][1]-frequency[0][1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    #test case 1\r\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\r\n    n = len(arr)\r\n    print('Input:', arr)\r\n    print('","votes":null},{"text":"\r\n    freq = {}\r\n    for i in range(n):\r\n        if arr[i] not in freq:\r\n            freq[arr[i]] = 1\r\n        else:\r\n            freq[arr[i]] += 1\r\n    max_freq = max(freq.values())\r\n    min_freq = min(freq.values())\r\n    return abs(max_freq-min_freq)\r\n\r\narr = list(map(int,input().split()))\r\nn = int(input())\r\nprint(find_Diff(arr,n))\r\n\r\n\r\n# Output\r\n\r\n","votes":null},{"text":"\r\n    count = len(arr)\r\n    max_count = 0\r\n    min_count = 0\r\n    for i in range(count):\r\n        for j in range(count):\r\n            if arr[i] == arr[j]:\r\n                max_count += 1\r\n                min_count = max_count\r\n            else:\r\n                min_count = max_count\r\n    return(min_count)\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10","votes":null},{"text":"\r\n    return max(arr) - min(arr)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().rstrip().split()))\r\n    result = find_Diff(arr, n)\r\n    print(result)\r\n\r\n\"\"\"Input:\r\nn = 2\r\narr[] = {2, 1}\r\nOutput: 1\r\nExplanation:\r\nThe frequency of 1 is 1 and freqeuncy of 2 is 1 so the difference is 1.\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime complexity: O(n) where n is the size of the array.\r\nAuxiliary Space: O(1)\r\n\"\"\"\r\n\r\n\"\"\"\r\nThe idea is to find the occurrences of each element in the array and then find the difference between the frequencies of the maximum and minimum elements.\r\n\r\nAlgorithm:\r\nCreate an empty dictionary to store the frequency of each element of the array.\r\nIterate through the array and increment the frequency of each element in the dictionary.\r\nFind the maximum and minimum frequencies in the dictionary.\r\nReturn the difference between the maximum and minimum frequencies.\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n\r\n    arr.sort(reverse=True)\r\n    print(\"The sorted array is:\",arr)\r\n    highest=arr[0]\r\n    least=arr[n-1]\r\n    diff=highest-least\r\n    print(\"The difference between highest and least frequencies is:\",diff)\r\n\r\n\r\n\r\narr=[1,2,3,4,4,4,5,5,6,6,6,7,7,7,7,7]\r\nn=len(arr)\r\nprint(\"Array is:\",arr)\r\nfind_Diff(arr,n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    freq = {}\r\n    for i in arr:\r\n        if i in freq.keys():\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    maximum = max(freq.values())\r\n    minimum = min(freq.values())\r\n    diff = maximum - minimum\r\n    return diff\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the size of the array: \"))\r\n    arr = list(map(int, input(\"Enter the elements of the array: \").split()))\r\n    print(find_Diff(arr,n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n), where 'n' is the size of the array.\r\nSpace Complexity: O(n), where 'n' is the size of the array.\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the size of the array: 5\r\nEnter the elements of the array: 1 2 2 3 3\r\n4\r\n\r\nSAMPLE II\r\n\r\nEnter the size of the array: 5\r\nEnter the elements of the array: 1 1 1 2 2\r\n1\r\n\r\nSAMPLE III\r\n\r\nEnter the size of the array: 5\r\nEnter the elements of the array: 1 2 3 4 5\r\n0\r\n","votes":null},{"text":"\r\n    freq = [0]*(n+1)\r\n    for i in arr:\r\n        freq[i]","votes":null},{"text":"\r\n    freq = {}\r\n    freq_list = []\r\n    for i in range(0,n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    for i in range(0,n):\r\n        freq_list.append(freq[arr[i]])\r\n    freq_list.sort()\r\n    return freq_list[-1] - freq_list[0]\r\n\r\narr = list(map(int,input().split()))\r\nn = int(input())\r\nprint(find_Diff(arr,n))\r\n\r\n\r","votes":null},{"text":"\r\n    freq = {i:arr.count(i) for i in set(arr)}\r\n    l = []\r\n    for i in freq:\r\n        l.append(freq[i])\r\n    return max(l) - min(l)\r\n\r\narr = [1,2,3,4,5,6,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,","votes":null},{"text":"\r\n\r\n    # find frequency of all elements in an array\r\n    freq = [0]*(n+1)\r\n    for i in range(n):\r\n        freq[arr[i]] += 1\r\n    \r\n    # find max and min frequency\r\n    max_freq = max(freq)\r\n    min_freq = min(freq)\r\n\r\n    # find the difference\r\n    return max_freq - min_freq\r\n\r\n# test case 1\r\narr = [1, 2, 3, 4, 2, 5, 6, 1, 2, 2, 3, 1, 1, 2]\r\nn = len(arr)\r\n\r\nprint(\"Test case 1:\")\r\nprint(f\"The difference between highest and least frequencies in {arr} is {find_Diff(arr, n)}\")\r\nprint()\r\n\r\n# test case 2\r\narr = [1, 2, 3, 4, 2, 5, 6, 2, 3, 2, 3, 1, 1, 2]\r\nn = len(arr)\r\n\r\nprint(\"Test case 2:\")\r\nprint(f\"The difference between highest and least frequencies in {arr} is {find_Diff(arr, n)}\")\r\nprint()\r\n\r\n# test case 3\r\narr = [1, 2, 3, 4, 2, 5, 6, 1, 2, 2, 2, 3, 1, 1, 2]\r\nn = len(arr)\r\n\r\nprint(\"Test case 3:\")\r\nprint(f\"The difference between highest and least frequencies in {arr} is {find_Diff(arr, n)}\")\r\nprint()\r\n\r\n# test case 4\r\narr = [7, 4, 5, 1, 2, 1, 7, 3, 4, 1, 2, 1, 5,","votes":null},{"text":"\r\n    new_arr = []\r\n    for i in arr:\r\n        if i not in new_arr:\r\n            new_arr.append(i)\r\n    dict1 = {}\r\n    for i in new_arr:\r\n        temp = 0\r\n        for j in arr:\r\n            if i == j:\r\n                temp += 1\r\n        dict1[i] = temp\r\n    dict1 = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\r\n    dict2 = {}\r\n    for i in new_arr:\r\n        temp = 0\r\n        for j in arr:\r\n            if i == j:\r\n                temp += 1\r\n        dict2[i] = temp\r\n    dict2 = dict(sorted(dict2.items(), key=lambda x: x[1]))\r\n    l_f = list(dict2.values())\r\n    h_f = list(dict1.values())\r\n    return(h_f[0] - l_f[0])\r\n\r\nprint(find_Diff([1, 1, 2, 2, 3],5))\r\nprint(find_Diff([1, 1, 2, 2, 3, 3, 4, 4, 5, 5],10))\r\nprint(find_Diff([1, 1, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5],12))\r\nprint(find_Diff([1, 2, 3, 4, 5],5))\r\nprint(find_Diff([1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3","votes":null},{"text":"\r\n    count = {}\r\n    for i in arr:\r\n        if i not in count:\r\n            count[i] = 1\r\n        else:\r\n            count[i] += 1\r\n    maxi = 0\r\n    minn = 0\r\n    for i in count:\r\n        if count[i] > maxi:\r\n            maxi = count[i]\r\n        if count[i] < minn:\r\n            minn = count[i]\r\n    print(maxi-minn)\r\n\r","votes":null}],"time":{"count":22.0,"avg":167296.658,"std":41357.1813908349,"cov":0.2472086525}}
{"id":542,"question":"def fill_spaces(text):\r\n    \"\"\"Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\"\"\"","answers":[{"text":"\r\n    # pattern = re.compile(\"s\")\r\n    # return pattern.sub(\":\", text)\r\n    return text.replace(\" \", \":\")\r\n\r\n\r","votes":52132.572},{"text":"\r\n    import re\r\n    return re.sub(\"[ ,.]\", ':', text)\r\n\r\n\r","votes":58941.54},{"text":"\r\n    import re\r\n    return re.sub(\" \", \":\", text)\r\n\r\n\r","votes":65767.816},{"text":"\r\n    import re\r\n    return re.sub(r'[ ,.]', ':', text)\r\n\r\n\r","votes":67495.992},{"text":"\r\n    import re\r\n    regex = re.compile(r\"[ ,.]\")\r\n    return regex.sub(\":\", text)\r\n\r","votes":69774.972},{"text":"\r\n\r\n    import re\r\n    return re.sub(r'[ ,.]', ':', text)\r\n\r\n# ---------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":75366.284},{"text":"\r\n    text = text.replace(\" \", \":\")\r\n    text = text.replace(\",\", \":\")\r\n    text = text.replace(\".\", \":\")\r\n\r\n    return text\r\n\r\n\r","votes":77523.22},{"text":"\r\n    import re\r\n    return re.sub('[ ,.]', ':', text)\r\n\r\n\r","votes":87137.524},{"text":"\r\n    text = text.replace(' ', ':')\r\n    text = text.replace('.', ':')\r\n    text = text.replace(',', ':')\r\n    return text\r\n\r\n\r","votes":88774.592},{"text":"\r\n\r\n    import re\r\n    text = re.sub(r\"[., ]\", \":\", text)\r\n    return text\r\n\r\n\r\nprint(fill_spaces(\"The quick brown fox jumps over the lazy dog\"))\r\nprint(fill_spaces(\"The quick brown fox jumps over the lazy dog.\"))\r\nprint(fill_spaces(\"The quick brown fox jumps over the lazy dog,\"))\r\n\r\n\r\nprint(\"\\n\\n\")\r\nprint(\"*********************************************************************\")\r\n\r\n# 13. Write a Python program to check if two given strings are equal or not.\r","votes":88925.832},{"text":"\r\n    import re\r\n    return re.sub(r'[,\\s.]', ':', text)\r\n\r\n\r","votes":94911.4},{"text":"\r\n    import re\r\n    return re.sub(r\"[,. ]\", \":\", text)\r\n\r\n\r","votes":98057.62},{"text":"\r\n\r\n    import re\r\n    return re.sub(r'\\s|\\.|\\,', ':', text)\r\n\r\n\r\nprint(fill_spaces('Mary had a little lamb'))\r\nprint(fill_spaces('Mary, had a little lamb'))\r\nprint(fill_spaces('Mary. had a little lamb'))\r\n\r\n\r\n# 02. Replace Multiple Characters\r","votes":104882.204},{"text":"\r\n\r\n    return text.replace(' ', ':').replace('.', ':').replace(',', ':')\r\n\r\n\r","votes":106821.084},{"text":"\r\n    import re\r\n    return re.sub(r'[,. ]', ':', text)\r\n\r\n\r","votes":107388.768},{"text":"\r\n    import re\r\n    return re.sub(r\"[,. ]\", \":\", text)\r\n\r\n\r\n# ------------------------------------------------------------------------------------------------------------------ #\r\n#                                            USER DEFINED FUNCTIONS                                                 #\r\n# ------------------------------------------------------------------------------------------------------------------ #\r\n\r\n# ------------------------------------------------------------------------------------------------------------------ #\r\n#                                                  MAIN                                                              #\r\n# ------------------------------------------------------------------------------------------------------------------ #\r\n\r\n\r","votes":107442.556},{"text":"\r\n    text = text.replace(\" \", \":\")\r\n    text = text.replace(\",\", \":\")\r\n    text = text.replace(\".\", \":\")\r\n    return text\r\n\r\n\r","votes":112063.292},{"text":"\r\n    import re\r\n    return re.sub(r'[\\s,\\.]', ':', text)\r\n    \r","votes":116424.624},{"text":"\r\n    \r\n    # replace all spaces with ':'\r\n    text = text.replace(' ', ':')\r\n    # replace all commas with ':'\r\n    text = text.replace(',', ':')\r\n    # replace all dots with ':'\r\n    text = text.replace('.', ':')\r\n    \r\n    return text\r\n\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n# TEST\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# input text\r\ntext = 'Hello, World. My name is John. I live in New York City.'\r\n\r\n# fill spaces\r\ntext = fill_spaces(text)\r\n\r\n# print output\r\nprint(text)\r\n\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n# OUTPUT\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Hello:World. My name is John. I live in New York City.\r\n\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n# END\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n# EXERCISE 12\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n# QUESTION 12.1\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":121316.4},{"text":"\r\n    \r\n    import re\r\n    \r\n    pattern = re.compile(r'[ ,.]')\r\n    \r\n    return pattern.sub(\":\", text)\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":129402.376},{"text":"\r\n    import re\r\n\r\n    # regex = r\"[,.]\"\r\n    # new_","votes":null},{"text":"\r\n    return re.sub('[\\s,.]', ':', text)\r\n\r","votes":null},{"text":"\r\n    import re\r\n    return re.sub(\"\\s|,|\\.\",\" : \",text)\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub('[\\s,.](?=\\S)', ':', text)\r\n    return text\r\n\r\n\r\nif __name__ == '__main__':\r\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert fill_spaces(\"\") == \"\", \"Example 1\"\r\n    assert fill_spaces(\" \") == \":\", \"Example 2\"\r\n    assert fill_spaces(\"a\") == \"a\", \"Example 3\"\r\n    assert fill_spaces(\" a\") == \" :\", \"Example 4\"\r\n    assert fill_spaces(\" a \") == \" : \", \"Example 5\"\r\n    assert fill_spaces(\"a \") == \"a :\", \"Example 6\"\r\n    assert fill_spaces(\" a a\") == \" : :\", \"Example 7\"\r\n    assert fill_spaces(\"a a\") == \"a a\", \"Example 8\"\r\n    assert fill_spaces(\"a, \") == \"a, :\", \"Example 9\"\r\n    assert fill_spaces(\" a ,\") == \" : ,\", \"Example 10\"\r\n    assert fill_spaces(\" a , \") == \" : , \", \"Example 11\"\r\n    assert fill_spaces(\"a , \") == \"a , :\", \"Example 12\"\r\n    assert fill_spaces(\"a,a\") == \"a,a\", \"Example 13\"\r\n    assert fill_spaces(\"a ,a\") == \"a :a\", \"Example 14\"\r\n    assert fill_spaces(\"a, a\") == \"a, a\", \"Example 15\"\r\n    assert fill_spaces(\"a , a\") == \"a , a\", \"Example 16\"\r\n    assert fill_spaces(\"a .a\") == \"a .a\", \"Example 17\"\r\n    assert fill_spaces(\"a. a\") == \"a. a\", \"Example 18\"\r\n    assert fill_spaces(\"a . a\") == \"a . a\", \"Example 19\"\r\n    assert fill_spaces(\"a..a\") == \"","votes":null},{"text":"\r\n    \r\n    text = re.sub(r'[ ,.]', ':', text)\r\n    \r\n    return text\r\n    \r\n\r\n\r\n# --------------\r\n#Code starts here\r","votes":null},{"text":"\r\n    import re\r\n    text = re.sub(r'[,. ]', ':', text)\r\n    return text\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Java is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"C++ is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"C# is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"JavaScript is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn't it? \ud83d\ude0a\"))\r\n    print(fill_spaces(\"Python is fun, isn'","votes":null},{"text":"\r\n    text = re.sub(r'[\\s,.]', ':', text)\r\n    return text\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(fill_spaces('this is a sentence'))\r\n    print(fill_spaces('this is a sentence with a, comma'))\r\n    print(fill_spaces('this is a sentence with a dot.'))\r\n    print(fill_spaces('this is a sentence with a dot and a comma,","votes":null},{"text":"\r\n    return re.sub(r'[ ,.]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r\"[\\s,.]\", \":\", text)\r\n    return text\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------\r","votes":null},{"text":"\r\n    \r\n    return re.sub('[ ,.]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    import re\r\n    return re.sub(r'[ ,.]', ':', text)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(fill_spaces('Hello, World!'))\r\n    print(fill_spaces('Hi, my name is","votes":null},{"text":"\r\n    return re.sub(r\"[\\s,.](?=\\s)\",\":\",text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'\\s|\\.|\\,', ':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[,\\.]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[,.]+', ':', text)\r\n\r\n\r\nprint(fill_spaces('We are the so-called \"Vikings\" from the north.'))\r\nprint(fill_spaces('May the force be with you'))\r\nprint(fill_spaces('Holy cow!'))\r\n\r\n\r","votes":null},{"text":"\r\n    import re\r\n    re.sub(r'[\\s,.](?=\\s|$)', ':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[\\s,.\\-]', ':', text)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    s = input()\r\n\r\n    result = fill_spaces(s)\r\n\r\n    fptr.write(result + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# Sample Input 0\r\n# Hello World\r\n# Sample Output 0\r\n# Hello:World\r\n\r\n# Sample Input 1\r\n# I love python\r\n# Sample Output 1\r\n# I:love:python\r\n\r\n# Sample Input 2\r\n# Hello, World!\r\n# Sample Output 2\r\n# Hello:World!\r\n\r\n# Sample Input 3\r\n# Hello... World\r\n# Sample Output 3\r\n# Hello:World\r\n\r\n# Sample Input 4\r\n# Hello-World\r\n# Sample Output 4\r\n# Hello:World\r\n\r\n# Sample Input 5\r\n# Hello.World\r\n# Sample Output 5\r\n# Hello:World\r\n\r\n# Sample Input 6\r\n# Hello--World\r\n# Sample Output 6\r\n# Hello:World\r\n\r\n\r\n# Sample Input 7\r\n# Hello...World\r\n# Sample Output 7\r\n# Hello:World\r\n\r\n# Explanation\r\n# For the given example string the function will replace all occurrences of space, comma, dot and hyphen with a colon and return the modified string.\r\n# Sample Input 0\r\n# Hello World\r\n# Sample Output 0\r\n# Hello:World\r\n\r\n# Sample Input 1\r\n# I love python\r\n# Sample Output 1\r\n# I:love:python\r\n\r\n# Sample Input 2\r\n# Hello, World!\r\n# Sample Output 2\r\n# Hello:World!\r\n\r\n# Sample Input 3\r\n","votes":null},{"text":"\r\n    return re.sub(r\"[. ,]\", \":\", text)\r\n\r\n\r\nif __name__ == '__main__':\r\n    s = \"I love my dog, the","votes":null},{"text":"\r\n    return re.sub(r\"[,. ]\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(' ',':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub('[ ,.]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub('[ ,.]', ':', text)\r\n\r\n\r\nprint(fill_spaces('Hello World, Hola Mundo. How are you?'))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a pattern to match all spaces, commas and dots\r\n    pattern = r'[ ,.]'\r\n    \r\n    # Replace the spaces with a colon\r\n    replaced_text = re.sub(pattern, ':', text)\r\n    \r\n    # Print the replaced text\r\n    print(replaced_text)\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n# Calls  main  to start the ball rolling.\r\n# The   try .. except   prevents","votes":null},{"text":"\r\n    text = re.sub(r'[.,]', ':', text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[,\\s\\.]\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[,\\. ]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub('[,\\s\\.]',':',text)\r\n\r","votes":null},{"text":"\r\n    \r\n    return re.sub('[ ,.]', ':', text)\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r\"[ ,.]\", \":\", text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[\\s,.](?!$)', ':', text)\r\n\r\nif __name__ == '__main__':\r\n    print(fill_spaces(\"Hello World\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today?\"))\r\n    print(fill_spaces(\"Hello World...\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today? I am great.\"))\r\n    print(fill_spaces(\"Hello World...\"))\r\n    print(fill_spaces(\"Hello World\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today?\"))\r\n    print(fill_spaces(\"Hello World...\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today? I am great.\"))\r\n    print(fill_spaces(\"Hello World...\"))\r\n    print(fill_spaces(\"Hello World\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today?\"))\r\n    print(fill_spaces(\"Hello World...\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today? I am great.\"))\r\n    print(fill_spaces(\"Hello World...\"))\r\n    print(fill_spaces(\"Hello World\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today?\"))\r\n    print(fill_spaces(\"Hello World...\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today? I am great.\"))\r\n    print(fill_spaces(\"Hello World...\"))\r\n    print(fill_spaces(\"Hello World\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today?\"))\r\n    print(fill_spaces(\"Hello World...\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today? I am great.\"))\r\n    print(fill_spaces(\"Hello World...\"))\r\n    print(fill_spaces(\"Hello World\"))\r\n    print(fill_spaces(\"Hello World, how are you doing today?\"))\r\n    prin","votes":null},{"text":"\r\n    return re.sub(r'[., ]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[\\s,.]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    words = text.replace(',',' ').replace('.',' ')\r\n    return \" \".join(words.split())\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[\\s,.](?=\\s)', ':', text)\r\n\r\n\r\nprint(fill_spaces('I am a Python developer'))\r\nprint(fill_spaces('This, is a nice and sunny day'))\r\nprint(fill_spaces('Where are you?'))\r\nprint(fill_spaces('I am a good developer. I love to code.'))\r\n\r\n\r\n# 12. Write a Python program to remove all occurrences of a specified string from a given string.\r","votes":null},{"text":"\r\n    text = re.sub(\"[\\s,.?]\", \":\", text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[,\\s.]',':',text)\r\n\r","votes":null},{"text":"\r\n\r\n    # Replace all spaces, commas, and dots with a colon\r\n    text = re.sub(r'\\s+|,|\\.', ':', text)\r\n    \r\n    # Return the modified string\r\n    return text\r\n\r\n# Call the function\r\ntext = fill_spaces('Hi, how are you doing?')\r\nprint(text)\r\n\r\n\r\n# ==========================================================================================================\r\n# Replace all letters with asterisks\r\n\r\n# Define the function\r","votes":null},{"text":"\r\n    return re.sub('[\\s,.]', ':', text)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub('[ ,.]', ':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub('[ ,.]', ',', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[\\s,.]\", \":\", text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[\\s,.]+', ':', text)\r\n\r\n\r\nprint(fill_spaces('You, can\\'t, believe, how many spaces I have here!'))\r\n# Expected output:\r\n# 'You:can't:believe:how:many:spaces:I:have:here!'\r\n\r\n\r\n# 13. Write a function that returns the longest word in a string. Use regex.\r","votes":null},{"text":"\r\n    return re.sub(r'[ ,.]', r':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[\\s,\\.]', ':', text)\r\n    \r","votes":null},{"text":"\r\n    \r\n    return re.sub(r'[ ,.]', ':', text)\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    s = input()\r\n\r\n    result = fill_spaces(s)\r\n\r\n    fptr.write(result + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n'''\r\n\r\n# Explanation:\r\n\r\n# Importing re library \r\n# Importing os module to use its path \r\nimport re\r\nimport os\r\n\r\n# Function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex. \r","votes":null},{"text":"\r\n    return re.sub('[ ,.]', ':', text)\r\n\r\n\r\nif __name__ == '__main__':\r\n    text = 'Hello world! How are you?'\r\n    print(fill_spaces(text))\r\n\r\n# Output:\r\n# Hello:world!:How:are:you?\r\n\r\n# Example 2:\r","votes":null},{"text":"\r\n    return re.sub('[., ]', ':', text)\r\n\r\n\r\nif __name__ == '__main__':\r\n    text = 'A.B.C.D,E.F.G.H'\r\n    print(fill_spaces(text))\r\n    assert fill_spaces(text) == 'A:B:C:D,E:F:G:H'\r\n    text = 'A.B,C.D'\r\n    print(fill_spaces(text))\r\n    assert fill_spaces(text) == 'A:B,C:D'\r\n    text = 'A.B,C.D,E.F'\r\n    print(fill_spaces(text))\r\n    assert fill_spaces(text) == 'A:B,C:D,E:F'\r\n    text = 'A.B.C.D,E.F.G.H,I.J.K.L'\r\n    print(fill_spaces(text))\r\n    assert fill_spaces(text) == 'A:B:C:D,E:F:G:H,I:J:K:L'\r\n    text = 'A.B.C.D,E.F.G.H,I.J.K.L,M.N.O.P'\r\n    print(fill_spaces(text))\r\n    assert fill_spaces(text) == 'A:B:C:D,E:F:G:H,I:J:K:L,M:N:O:P'\r\n    text = 'A.B.C.D,E.F.G.H,I.J.K.L,M.N.O.P,Q.R.S.T'\r\n    print(fill_spaces(text))\r\n    assert fill_spaces(text) == 'A:B:C:D,E:F:G:H,I:J:K:L,M:N:O:P,Q:R:S:T'","votes":null},{"text":"\r\n    return re.sub(r\"[\\s,\\.]\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return re.sub(r'[,. ]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[\\s,\\.]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(\"[\\s\\.\\,\\?\\!]\", \":\", text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[\\s,.]\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub('[\\s\\.,]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[., ]\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[,\\s.]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[ ,.]', ':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[,.]', ':', text)\r\n\r\n\r\n# Test Cases\r\nprint(fill_spaces('Hello, how are you?'))\r\n# expected output:\r\n# 'Hello, how are you?'\r\n\r\nprint(fill_spaces('Hello. How are you?'))\r\n# expected output:\r\n# 'Hello. How are you?'\r\n\r\nprint(fill_spaces('Hello, how are you? '))\r\n# expected output:\r\n# 'Hello, how are you? '\r\n\r\nprint(fill_spaces('Hello, how are you?  '))\r\n# expected output:\r\n# 'Hello, how are you?  '\r\n\r\nprint(fill_spaces('Hello, how are you?  .'))\r\n# expected output:\r\n# 'Hello, how are you?  :'\r\n\r\nprint(fill_spaces('Hello, how are you?  ...'))\r\n# expected output:\r\n# 'Hello, how are you?  ...'\r\n\r\nprint(fill_spaces('Hello, how are you?  ......'))\r\n# expected output:\r\n# 'Hello, how are you?  ......'\r\n\r\nprint(fill_spaces('Hello, how are you?  ...... '))\r\n# expected output:\r\n# 'Hello, how are you?  ...... '\r\n\r\nprint(fill_spaces('Hello, how are you?  ...... ...'))\r\n# expected output:\r\n# 'Hello, how are you?  ...... :'\r\n\r\nprint(fill_spaces('Hello, how are you?  ...... ... .'))\r\n# expected output:\r\n# 'Hello, how are you?  ...... ... :'\r\n\r\nprint(fill_spaces('Hello, how are you?  ...... ... ..'))\r\n# expected output:\r\n# 'Hello, how are you?  ...... ... ..'\r\n\r\nprint(fill_spaces('Hello, how are you?  ...... ... .","votes":null},{"text":"\r\n    text=str(text)\r\n    text=text.replace(\" \",\":\")\r\n    text=text.replace(\",\",\":\")\r\n    text=text.replace(\".\",\"\")\r\n    return text\r\n\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie,\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fill_spaces(\"I love the way you lie.\"))\r\nprint(fil","votes":null},{"text":"\r\n\r\n    return re.sub(r'[,.]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"(?: |\\.|\\,)\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return re.sub(r\"[ ,.]\", r\":\", text)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    new_text = fill_spaces(\"My name is, John Doe.\")\r\n    print(new_text)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    new_text = re.sub(r'[ ,.]', ':', text)\r\n    \r\n    return new_text\r\n\r\n# print(fill_spaces('Hello, World!'))\r\n# print(fill_spaces('Hello, World!'))\r\n# print(fill_spaces('Hello, World!'))\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[ ,.]\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r'([\\s,.])', r':', text, flags=re.I)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return re.sub(r\"[\\s,.](?=\\S)\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[\\s,.]\",':', text)\r\n\r\n\r","votes":null}],"time":{"count":20.0,"avg":91527.5334,"std":21949.2841028412,"cov":0.2398107246}}
{"id":543,"question":"def count_digits(num1,num2):\r\n    \"\"\"Write a function to add two numbers and print number of digits of sum.\"\"\"","answers":[{"text":"\r\n    return len(str(num1 + num2))\r\n\r\n\r\nprint(count_digits(123, 456))\r\n\r\n\r","votes":56273.056},{"text":"\r\n    sum = num1 + num2\r\n    return len(str(sum))\r\n\r","votes":61707.064},{"text":"\r\n    sum = num1 + num2\r\n    sum_str = str(sum)\r\n    return len(sum_str)\r\n\r","votes":70434.216},{"text":"\r\n    sum = num1+num2\r\n    return len(str(sum))\r\n\r\nnum1 = 23\r\nnum2 = 789\r\nprint(\"Number of digits in sum of \", num1, \"and\", num2, \"is\", count_digits(num1,num2))\r\n\r\n\r","votes":76350.68},{"text":"\r\n    sum = num1 + num2\r\n    print(sum)\r\n    return len(str(sum))\r\n\r\n\r\n# num1 = 34\r\n# num2 = 56\r\n# print(count_digits(num1,num2))\r\n\r\n\r","votes":78498.42},{"text":"\r\n    x = num1 + num2\r\n    y = 0\r\n    while x != 0:\r\n        y = y + 1\r\n        x = x \/\/ 10\r\n    return y\r\n\r\nprint(count_digits(123,34))\r\n\r\n\r\n\r","votes":80384.6},{"text":"\r\n\r\n    result = num1 + num2\r\n    count = 0\r\n    while result > 0:\r\n        result = result \/\/ 10\r\n        count += 1\r\n    return count\r\n\r\n\r\nprint(count_digits(123456, 123456))\r\n\r\n\r","votes":82675.08},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        count += 1\r\n        sum = sum \/\/ 10\r\n    return count\r\n\r\n# Test count_digits\r\nprint(count_digits(123456789, 987654321))\r\n\r\n\r","votes":88621.236},{"text":"\r\n    sum = num1 + num2\r\n    digits = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        digits = digits + 1\r\n    return digits\r\n\r\n\r","votes":93557.704},{"text":"\r\n    return len(str(num1+num2))\r\n\r\n#Test\r\nprint(count_digits(345,235))\r\n\r\n#Exercise 6\r","votes":97792.752},{"text":"\r\n    sum = num1+num2\r\n    return len(str(sum))\r\n\r\n# count_digits(1234,5678)\r\n\r\n#","votes":101335.044},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum:\r\n        count += 1\r\n        sum \/\/= 10\r\n    print(f'The sum of {num1} and {num2} is {num1+num2}.')\r\n    print(f'The number of digits of the sum is {count}.')\r\n    return count\r\n\r\ncount_digits(num1=123,num2=456)\r\n# The sum of 123 and 456 is 579.\r\n# The number of digits of the sum is 3.\r\n\r\n# count_digits(num1=123,num2=45678)\r\n# The sum of 123 and 45678 is 45801.\r\n# The number of digits of the sum is 5.\r\n\r\n# count_digits(num1=12345678,num2=123)\r\n# The sum of 12345678 and 123 is 1235801.\r\n# The number of digits of the sum is 8.\r\n\r\n# count_digits(num1=123456789,num2=123)\r\n# The sum of 123456789 and 123 is 12358001.\r\n# The number of digits of the sum is 9.\r\n\r\n# count_digits(num1=123456789,num2=123456789)\r\n# The sum of 123456789 and 123456789 is 246913578.\r\n# The number of digits of the sum is 9.\r\n\r\n# count_digits(num1=123456789,num2=987654321)\r\n# The sum of","votes":102680.056},{"text":"\r\n    return len(str(num1+num2))\r\n\r\n\r\nif __name__ == '__main__':\r\n    num1, num2 = map(int, input(\"Enter two numbers with spaces in between them: \").split())\r\n    print(count_digits(num1, num2))\r\n\r\n\r\n\"\"\"\r\nTime Complexity = O(n)\r\nSpace Complexity = O(1)\r\n\r\nInput\/Output:\r\n\r\n------------>  Example 1:\r\n\r\nInput:\r\n\r\nn = 1000\r\nm = 2000\r\n\r\nOutput:\r\n\r\n4\r\n\r\n------------>  Example 2:\r\n\r\nInput:\r\n\r\nn = 1000000\r\nm = 2000000\r\n\r\nOutput:\r\n\r\n7\r\n\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTime Complexity = O(n)\r\nSpace Complexity = O(1)\r\n\r\nInput\/Output:\r\n\r\n------------>  Example 1:\r\n\r\nInput:\r\n\r\nn = 1000\r\nm = 2000\r\n\r\nOutput:\r\n\r\n4\r\n\r\n------------>  Example 2:\r\n\r\nInput:\r\n\r\nn = 1000000\r\nm = 2000000\r\n\r\nOutput:\r\n\r\n7\r\n\r\n\"\"\"\r\n\r\n\r\nimport math\r","votes":107911.784},{"text":"\r\n\r\n    sum = num1 + num2\r\n    print(sum)\r\n    digits = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        digits += 1\r\n    return digits\r\n\r\nprint(count_digits(521,345))\r\nprint(count_digits(521,654))\r\nprint(count_digits(521,3456))\r\nprint(count_digits(521,8765))\r\n\r\n\r","votes":108768.332},{"text":"\r\n    count=0\r\n    sum=num1+num2\r\n    while sum!=0:\r\n        sum=sum\/\/10\r\n        count+=1\r\n    return count\r\n\r","votes":109158.164},{"text":"\r\n    sum1 = num1 + num2\r\n    sum1 = str(sum1)\r\n    count_digits = len(sum1)\r\n    return count_digits\r\n\r\nprint(count_digits(123456,654321))\r\n\r","votes":109494.192},{"text":"\r\n    return len(str(num1+num2))\r\n\r","votes":110295.496},{"text":"\r\n    sum = num1 + num2\r\n    sum = str(sum)\r\n    l = len(sum)\r\n    return l\r\n\r\nprint(count_digits(123,456))\r\n\r\n\r\n# 2. Write a function that takes two numbers and returns the sum of all numbers from num1 to num2 (inclusive).\r\n\r","votes":111829.0},{"text":"\r\n    sum_ = num1 + num2\r\n    return len(str(sum_))\r\n\r\n\r\nnum1 = 200\r\nnum2 = 300\r\nprint(\"No of digits in {} + {} = {}\".format(num1, num2, count_digits(num1, num2)))\r\n\r\n\r","votes":117883.272},{"text":"\r\n    num1=abs(num1)\r\n    num2=abs(num2)\r\n    result=num1+num2\r\n    count=0\r\n    while(result>0):\r\n        count+=1\r\n        result=result\/\/10\r\n    return count\r\n\r\nprint(count_digits(123,12))\r\n\r\n#Task 2\r\n\r","votes":118247.512},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while(sum > 0):\r\n        sum = sum\/\/10\r\n        count+=1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    num1 = int(input(\"Enter first number: \"))\r\n    num2 = int(input(\"Enter second number: \"))\r\n    print(\"Number of digits of the sum is: \", count_digits(num1, num2))\r\n\r\n\r\n# 2. Write a Python program to get the first and last name from a given full name.\r\n\r","votes":118467.488},{"text":"\r\n    answer = num1 + num2\r\n    digits = 0\r\n    while answer > 0:\r\n        digits += 1\r\n        answer \/\/= 10\r\n    return digits\r\n\r","votes":122864.884},{"text":"\r\n    sum1 = num1 + num2\r\n    sum_in_str = str(sum1)\r\n    return len(sum_in_str)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    num1 = int(input(\"Enter first number: \"))\r\n    num2 = int(input(\"Enter second number: \"))\r\n    print(\"Digits of sum:\",count_digits(num1,num2))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":123423.008},{"text":"\r\n    sum_num = num1 + num2\r\n    count_digit = 0\r\n    while sum_num != 0:\r\n        count_digit += 1\r\n        sum_num \/\/= 10\r\n\r\n    print(f\"Number of digits in {num1} + {num2} is {count_digit}\")\r\n    return count_digit\r\n\r\ncount_digits(1234,9876)\r\n\r\n# 8. Write a Python program to check if a given positive integer is an Armstrong number or not.\r\n\r","votes":128240.916},{"text":"\r\n    return len(str(num1 + num2))\r\n\r\n\r\nprint(count_digits(12, 12))\r\n\r\n\r","votes":133702.736},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    while sum>0:\r\n        sum=sum\/\/10\r\n        count+=1\r\n    return count\r\n\r\nprint(count_digits(24,56))\r\n\r\n\r","votes":135379.776},{"text":"\r\n    sum=num1+num2\r\n    return len(str(sum))\r\n\r\nprint(count_digits(12,13))\r\nprint(count_digits(100,1000))\r\n\r\n\"\"\"Write a function that takes two numbers as input and returns the sum of the two numbers along with the sum of the digits of the sum.\"\"\"\r","votes":135438.252},{"text":"\r\n\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        count += 1\r\n    return count\r\n\r\n\r","votes":136320.732},{"text":"\r\n    count=0\r\n    sum=num1+num2\r\n    while sum!=0:\r\n        sum=sum\/\/10\r\n        count+=1\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":139602.472},{"text":"\r\n\r\n    #add the numbers\r\n    sum = num1 + num2\r\n    #count the number of digits\r\n    count = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        count += 1\r\n    return count\r\n\r\n\r\n#print the result\r\nprint(count_digits(12345,10))\r\n\r\n\r\n#------------------------------------------------------------------------------------------\r","votes":139952.876},{"text":"\r\n    sum = num1 + num2\r\n    digits = 0\r\n    while sum:\r\n        sum = sum \/\/ 10\r\n        digits += 1\r\n    print(digits)\r\n    return digits\r\n\r\n\r\nprint(count_digits(12,34))\r\nprint(count_digits(999,999))\r\nprint(count_digits(1000,2000))\r\nprint(count_digits(123456789,123456789))\r\nprint(count_digits(1000000000,2000000000))\r\nprint(count_digits(1234567890,1234567890))\r\nprint(count_digits(1234567890,1234567890))\r\nprint(count_digits(1234567890,1234567890))\r\nprint(count_digits(1234567890,1234567890))\r\nprint(count_digits(1234567890,1234567890))\r\nprint(count_digits(1234567890,1234567890))\r\n\r\n#-------------------------------------------------------------------------------#\r\n# 5. Write a function to check whether a number is a palindrome or not.\r\n\r","votes":145088.04},{"text":"\r\n    return len(str(num1 + num2))\r\n\r\n\r\nprint(count_digits(100, 1))\r\nprint(count_digits(10, 100))\r\nprint(count_digits(100, 100))\r\n\r\n\r","votes":146828.46},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum != 0:\r\n        count += 1\r\n        sum = sum \/\/ 10 \r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    num1 = 534\r\n    num2 = 454\r\n\r\n    print(f\"Number of digits in {num1} + {num2} = {count_digits(num1,num2)}\")\r\n\r\n\r\n# Test case 1\r\n# Input : num1 = 534, num2 = 454\r\n# Output : 6\r\n\r\n# Test case 2\r\n# Input : num1 = 25, num2 = 12\r\n# Output : 3\r\n\r\n# Test case 3\r\n# Input : num1 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":149426.808},{"text":"\r\n    num1 = str(num1)\r\n    num2 = str(num2)\r\n    if len(num1) == len(num2):\r\n        return len(str(int(num1)+int(num2)))\r\n    elif len(num1) > len(num2):\r\n        return len(str(int(num1)+int(num2)))\r\n    else:\r\n        return len(str(int(num1)+int(num2)))\r\n\r\n# num1 = input(\"Enter first number: \")\r\n# num2 = input(\"Enter second number: \")\r\n# print(count_digits(num1,num2))\r\n\r\n\r","votes":150656.128},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num1 = int(input(\"Enter first number: \"))\r\n    num2 = int(input(\"Enter second number: \"))\r\n    print(f\"Sum of {num1} and {num2} is {num1+num2} and has {count_digits(num1,num2)} digits\")\r\n\r\n\r\n# Output\r\n# Enter first number: 23\r\n# Enter second number: 5\r\n# Sum of 23 and 5 is 28 and has 2 digits\r\n\r\n\r\n# Time Complexity: O(log(a+b)) \r\n# Space Complexity: O(1)\r\n\r\n\r\n# Approach 2: Using Decimal Module\r\n\r","votes":156817.356},{"text":"\r\n    #add the two numbers\r\n    sum=num1+num2\r\n    #convert to string\r\n    string=str(sum)\r\n    #count the number of elements in string\r\n    count=len(string)\r\n    return count\r\n\r\nprint(count_digits(12,100))\r\n\r\n\"\"\"Question:\r\nWrite a function to add two numbers and print number of digits of sum.\r\n\r\nExample: \r\nInput: num1 = 12, num2 = 100 \r\nOutput: 3\r\n\"\"\"\r\n\r\n#Method 2\r","votes":159726.176},{"text":"\r\n    if num1 < 0 or num2 < 0:\r\n        return \"Sorry... negative numbers can't be added.\"\r\n    elif num1 == 0 or num2 == 0:\r\n        return 1\r\n    else:\r\n        sum = num1 + num2\r\n        count = 0\r\n        while sum > 0:\r\n            sum = sum \/\/ 10\r\n            count += 1\r\n        return count\r\n\r\n\r","votes":173561.956},{"text":"\r\n    s = num1 + num2\r\n    print(f'{num1} + {num2} = {s}')\r\n    return len(str(s))\r\n\r\n\r\nif __name__ == '__main__':\r\n    x = 1234567\r\n    y = 123456789\r\n    print('x =', x, 'y =', y)\r\n    print('Number of digits of sum =', count_digits(x, y))\r\n\r\n# Output:\r\n# x = 1234567 y = 123456789\r\n# 1234567 + 123456789 = 123457026\r\n# Number of digits of sum = 12\r\n\r\n\r","votes":194827.636},{"text":"\r\n    x = num1 + num2\r\n    a = str(x)\r\n    print(a)\r\n    print(\"The digit is\", len(a))\r\n\r\ncount_digits(123,456)\r\n\r\n# 1. Write a program to split a sentence into words and print the number of words.\r\n\r","votes":null},{"text":"\r\n    total = sum(num1, num2)\r\n    return len(str(total))\r\n\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    str_sum = str(sum)\r\n    print(\"Sum of two numbers is\",sum)\r\n    print(\"Number of digits of sum is\",len(str_sum))\r\n    \r","votes":null},{"text":"\r\n    num1=int(input())\r\n    num2=int(input())\r\n    sum=num1+num2\r\n    print(\"The sum of two numbers is: \",sum)\r\n    if sum<10:\r\n        print(\"Number of digits in sum is: \",1)\r\n    elif sum>9:\r\n        print(\"Number of digits in sum is: \",2)\r\n\r\ncount_digits(num1,num2)\r\n\r\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    sum1=num1+num2\r\n    while sum1>0:\r\n        sum1=sum1\/\/10\r\n        count=count+1\r\n    return count\r\n\r\ncount=0\r\nnum1 = int(input(\"Enter first number: \"))\r\nnum2 = int(input(\"Enter second number: \"))\r\nprint(count_digits(num1,num2))\r\n\r\nvotes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum != 0:\r\n        sum = sum \/\/ 10\r\n        count += 1\r\n    print(\"Number of digits in sum: \", count)\r\n\r\n\r\ncount_digits(34, 56)\r\n\r","votes":null},{"text":"\r\n    sum = num1+num2\r\n    print(f\"Sum = {sum}\")\r\n    count = 1\r\n    while sum >= 10:\r\n        sum = sum\/\/10\r\n        count += 1\r\n\r\n    return count\r\n\r\n\r\n\r\nnum1 = int(input(\"Enter first number: \"))\r\nnum2 = int(input(\"Enter second number: \"))\r\n\r\ncount = count_digits(num1,num2)\r\nprint(f\"Number of digits of the sum = {count}\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sum_num = num1 + num2\r\n    count = 0\r\n    while sum_num > 0:\r\n        sum_num \/\/= 10\r\n        count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(count_digits(1234567890, 1234567890))\r\n    print(count_digits(123456789, 123456789))\r\n    print(count_digits(123456789, 12345678))\r\n    print(count_digits(123456789, 1234567))\r\n    print(count_digits(123456789, 123456))\r\n    print(count_digits(123456789, 12345))\r\n    print(count_digits(123456789, 1234))\r\n    print(count_digits(123456789, 123))\r\n    print(count_digits(123456789, 12))\r\n    print(count_digits(123456789, 1))\r\n    print(count_digits(123456789, 0))\r\n    print(count_digits(0, 123456789))\r\n    print(count_digits(0, 0))\r\n    print(count_digits(123456789, -123456789))\r\n    print(count_digits(123456789, -12345678))\r\n    print(count_digits(1","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    sum_str = str(sum)\r\n    print(sum_str)\r\n    print(len(sum_str))\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    num_of_digits=0\r\n    while sum>0:\r\n        sum=sum\/10\r\n        num_of_digits+=1\r\n    return num_of_digits\r\n\r\nprint(\"Enter two numbers\")\r\nnum1=int(input())\r\nnum2=int(input())\r\nprint(\"The sum of\",num1,\"and\",num2,\"is\",num1+num2)\r\nprint(\"The number of digits of sum is\",count_digits(num1,num2))\r\n\r\nr\n\r","votes":null},{"text":"\r\n    return len(str(num1+num2))\r\n\r\n\r\nprint(\"Enter two number: \")\r\nnum1 = int(input())\r\nnum2 = int(input())\r\nprint(\"Sum of two number: \" + str(num1+num2))\r\nprint(\"Number of digits of sum: \" + str(count_digits(num1,num2)))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return len(str(num1+num2))\r\nnum1=int(input(\"Enter first number:\"))\r\nnum2=int(input(\"Enter second number:\"))\r\nprint(count_digits(num1,num2))\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n\r\n    while sum > 0:\r\n        sum = sum \/ 10\r\n        count += 1\r\n\r\n    print(count)\r\n\r\ncount_digits(123,456)\r\n\r\n\r\n# 10. Write a Python program to find the maximum and minimum of three given integers.\r\n\r","votes":null},{"text":"\r\n    num1 = str(num1)\r\n    num2 = str(num2)\r\n    if (num1 == \"0\" or num2 == \"0\"):\r\n        return 1\r\n    length = max(len(num1),len(num2))\r\n    sum_of_nums = 0\r\n    for i in range(length):\r\n        if (len(num1) > i):\r\n            sum_of_nums += int(num1[len(num1)-(i+1)])\r\n        if (len(num2) > i):\r\n            sum_of_nums += int(num2[len(num2)-(i+1)])\r\n    return len(str(sum_of_nums))\r\n\r\nprint(count_digits(123,456))\r\nprint(count_digits(123456,789))\r\nprint(count_digits(-123456,789))\r\nprint(count_digits(12345,0))\r\nprint(count_digits(1234567890123456789012345678901234567890123456789012345678901234567890","votes":null},{"text":"\r\n    num = num1 + num2\r\n    count = 0\r\n    while num:\r\n        count += 1\r\n        num \/\/= 10\r\n    print(count)\r\n    \r\ncount_digits(12345,67890)","votes":null},{"text":"\r\n    #input\r\n    num1 = int(input(\"Enter first number: \"))\r\n    num2 = int(input(\"Enter second number: \"))\r\n    #processing\r\n    sum = num1+num2\r\n    #output\r\n    print(\"sum of two numbers is: \",sum)\r\n    print(\"No.of digits in sum is: \",len(str(sum)))\r\ncount_digits(12345,67890)\r\n\r","votes":null},{"text":"\r\n    num1 = str(num1)\r\n    num2 = str(num2)\r\n    num1 = num1.split()\r\n    num2 = num2.split()\r\n    num1 = [int(i) for i in num1]\r\n    num2 = [int(i) for i in num2]\r\n    num1 = int(\"\".join(map(str,num1)))\r\n    num2 = int(\"\".join(map(str,num2)))\r\n    print(num1+num2)\r\n    print(len(str(num1+num2)))\r\n\r\ncount_digits(23,45)\r\n\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        sum \/\/= 10\r\n        count += 1\r\n    return count\r\n\r\nnum_1 = int(input(\"Enter first number: \"))\r\nnum_2 = int(input(\"Enter second number: \"))\r\nprint(f\"The sum of {num_1} and {num_2} is: {num_1 + num_2}\")\r\nprint(f\"The number of digits of sum is: {count_digits(num_1,num_2)}\")\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    a = num1\r\n    b = num2\r\n    sum = 0\r\n    while a or b:\r\n        sum += (a % 10) + (b % 10)\r\n        a \/\/= 10\r\n        b \/\/= 10\r\n    print(sum)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = num1 + num2\r\n    \r\n    #counting number of digits in sum\r\n    i=0\r\n    while sum > 0:\r\n        sum = sum\/\/10\r\n        i += 1\r\n        \r\n    print(\"Number of digits in sum: \",i)\r\n\r\n\r\ncount_digits(234,23)\r\n\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    sum=str(sum)\r\n    print(len(sum))\r\n\r\nnum1=int(input(\"Enter 1st Number: \"))\r\nnum2=int(input(\"Enter 2nd Number: \"))\r\ncount_digits(num1,num2)\r\n\r\n# 3. Write a function to check whether a number is a prime number or not.\r\n#","votes":null},{"text":"\r\n    total = num1 + num2\r\n    total = str(total)\r\n\r\n    digits = 0\r\n    for i in range(len(total)):\r\n        digits += 1\r\n    print(digits)\r\n\r\ncount_digits(123456789,987654321)\r\n\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    print(\"Sum = \",sum)\r\n    num_of_digits = 1\r\n    while sum >= 10:\r\n        sum = sum \/ 10\r\n        num_of_digits += 1\r\n    print(\"Number of digits in sum = \",num_of_digits)\r\n\r\ncount_digits(54,25)\r\n\r\n\r","votes":null},{"text":"\r\n    num1=int(num1)\r\n    num2=int(num2)\r\n    sum=num1+num2\r\n    s=str(sum)\r\n    count=len(s)\r\n    print(f\"{sum} has {count} digits.\")\r\n\r\ncount_digits(1234,5678)\r\n\r\n\r\n# Task 10\r","votes":null},{"text":"\r\n    print(num1,num2)\r\n    sum = num1 + num2\r\n    num_of_digits = 0\r\n    temp = sum\r\n    while(temp>0):\r\n        num_of_digits += 1\r\n        temp = temp\/\/10\r\n    return num_of_digits\r\n\r\n\r\nnum1 = int(input(\"Enter first number: \"))\r\nnum2 = int(input(\"Enter second number: \"))\r\n\r\nprint(\"Number of digits in sum of\",num1,\"and\",num2,\"is\",count_digits(num1,num2))\r\n\r\n\r\n# Exercise 14\r\n# Write a function to count number of 1's in binary representation of a number.\r\n\r","votes":null},{"text":"\r\n    sum = num1+num2\r\n    count = 0\r\n    while sum != 0:\r\n        sum = sum\/\/10\r\n        count += 1\r\n    print(count)\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        count += 1\r\n    print(count)\r\n\r\ncount_digits(123,567)\r\n\r\n# 10. Write a Python program to check whether a given character is a vowel or consonant.\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    if sum>10:\r\n        return count_digits(sum\/\/10,sum%10)\r\n    else:\r\n        return 1\r\n\r","votes":null},{"text":"\r\n    print(\"The sum of %d and %d is %d\" % (num1, num2, num1 + num2))\r\n    print(\"The sum has %d digits.\" % len(str(num1 + num2)))\r\n\r\n#num1 = int(input(\"Enter first number: \"))\r\n#num2 = int(input(\"Enter second number: \"))\r\n\r\n#count_digits(num1,num2)\r\n\r\n###Task 2\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    while num1 > 0:\r\n        digit = num1 % 10\r\n        sum = sum * 10 + digit\r\n        num1 = num1 \/\/ 10\r\n    while num2 > 0:\r\n        digit = num2 % 10\r\n        sum = sum * 10 + digit\r\n        num2 = num2 \/\/ 10\r\n    while sum > 0:\r\n        digit = sum % 10\r\n        sum = sum \/\/ 10\r\n    return digit\r\n\r\n\r\nnum1 = int(input(\"Enter first number: \"))\r\nnum2 = int(input(\"Enter second number: \"))\r\n\r\nprint(\"Sum of two numbers:\", num1 + num2)\r\nprint(\"Number of digits in sum of two numbers:\", count_digits(num1, num2))\r\n\r\n# Test cases:\r\n# 1. Input: num1 = 123, num2 = 45\r\n# Output: Sum of two numbers: 168\r\n# Number of digits in sum of two numbers: 3\r\n\r\n# 2. Input: num1 = 123456789, num2 = 123456789\r\n# Output: Sum of two numbers: 246913578\r\n# Number of digits in sum of two numbers: 9\r\n\r\n# 3. Input: num1 = 123456789, num2 = 123456789\r\n# Output: Sum of two numbers: 246913578\r\n# Number of digits in sum of two numbers: 9\r\n\r\n# 4. Input: num1 = 123456789, num2 = 123456789\r\n# Output: Sum of two numbers: 246913578\r\n# Number of digits in sum of two numbers: 9","votes":null},{"text":"\r\n    sum_of_digits=num1+num2\r\n    print(f\"sum of digits is {sum_of_digits}\")\r\n\r","votes":null},{"text":"\r\n    num1=int(num1)\r\n    num2=int(num2)\r\n    sum=num1+num2\r\n    print(sum)\r\n    print(len(str(sum)))\r\n\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    num_of_digits = 0\r\n    temp = sum\r\n    while temp > 0:\r\n        num_of_digits += 1\r\n        temp = temp \/\/ 10\r\n    print(\"sum of %d and %d is %d and it has %d digits\" % (num1, num2, sum, num_of_digits))\r\n\r\n\r\nif __name__ == '__main__':\r\n    num1 = int(input(\"Enter first number: \"))\r\n    num2 = int(input(\"Enter second number: \"))\r\n    count_digits(num1, num2)\r\n\r\n\r","votes":null},{"text":"\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    sum = num1 + num2\r\n    print(len(str(sum)))\r\n\r\n\r\n# count_digits(23, 56)\r\n# count_digits(1111122222, 3333344444)\r\n# count_digits(1234567890, 1234567890)\r\n# count_digits(1234567890, 1234567891)\r\n# count_digits(1234567890, 12345678901234567890)\r\n\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    if sum < 10:\r\n        print(f'Sum of {num1} and {num2} is {sum}. Number of digits is {count_digits(num1,num2)}')\r\n    if sum >= 10 and sum < 100:\r\n        print(f'Sum of {num1} and {num2} is {sum}. Number of digits is {count_digits(num1,num2)}')\r\n    if sum >= 100 and sum < 1000:\r\n        print(f'Sum of {num1} and {num2} is {sum}. Number of digits is {count_digits(num1,num2)}')\r\n    if sum >= 1000 and sum < 10000:\r\n        print(f'Sum of {num1} and {num2} is {sum}. Number of digits is {count_digits(num1,num2)}')\r\n    if sum >= 10000 and sum < 100000:\r\n        print(f'Sum of {num1} and {num2} is {sum}. Number of digits is {count_digits(num1,num2)}')\r\n    if sum >= 100000 and sum < 1000000:\r\n        print(f'Sum of {num1} and {num2} is {sum}. Number of digits is {count_digits(num1,num2)}')\r\n    if sum >= 1000000 and sum < 10000000:\r\n        print(f'Sum of {num1} and {num2} is {sum}. Number of digits is {count_digits(num1,num2)}')\r\n    if sum >= 10000000 and sum < 100000000:\r\n        print(f'Sum of {num1} and {num2} is {sum}. Number of digit","votes":null},{"text":"\r\n\r\n#    n1=int(num1)\r\n#    n2=int(num2)\r\n#    sum = n1 + n2\r\n#    print(sum)\r\n#    print(len(str(sum)))\r\n    \r\n#    return len(str(sum))\r\n\r\n# 2nd Method\r\n#    sum_ = num1 + num2\r\n#    print(sum_)\r\n#    print(len(str(sum_)))\r\n\r\n# 3rd Method\r\n#    sum_ = num1 + num2\r\n#    print(sum_)\r\n#    print(len(str(sum_)))\r\n\r\n# 4th Method\r\n#    sum_ = num1 + num2\r\n#    print(sum_)\r\n#    print(len(str(sum_)))\r\n\r\n# 5th Method\r\n#    sum_ = num1 + num2\r\n#    print(sum_)\r\n#    print(len(str(sum_)))\r\n\r\n# 6th Method\r\n#    sum_ = num1 + num2\r\n#    print(sum_)\r\n#    print(len(str(sum_)))\r\n\r\n# 7th Method\r\n#    sum_ = num1 + num2\r\n#    print(sum_)\r\n#    print(len(str(sum_)))\r\n\r\n# 8th Method\r\n#    sum_ = num1 + num2\r\n#    print(sum_)\r\n#    print(len(str(sum_)))\r\n\r\n# 9th Method\r\n#    sum_ = num1 + num2\r\n#    print(sum_)\r\n#    print(len(str(sum_)))\r\n\r\n# 10th Method\r\n#    sum_ = num1 + num2\r\n#    print(sum_)\r\n#    print(len(str(sum_)))\r\n\r\n# 11th Method\r\n#    sum_ = num1 + num2\r\n#    print(sum_)\r","votes":null},{"text":"\r\n    #num1 = 10000\r\n    #num2 = 9999\r\n    #num1 = 9999\r\n    #num2 = 10000\r\n    #num1 = 99999\r\n    #num2 = 99999\r\n    #num1 = 12345\r\n    #num2 = 67890\r\n    #num1 = 123456\r\n    #num2 = 678901\r\n    #num1 = 1234567\r\n    #num2 = 6789012\r\n    #num1 = 12345678\r\n    #num2 = 67890123\r\n    #num1 = 123456789\r\n    #num2 = 678901234\r\n    #num1 = 1234567890\r\n    #num2 = 6789012345\r\n    #num1 = 12345678901\r\n    #num2 = 67890123456\r\n    #num1 = 123456789012\r\n    #num2 = 678901234567\r\n    #num1 = 1234567890123\r\n    #num2 = 6789012345678\r\n    #num1 = 12345678901234\r\n    #num2 = 67890123456789\r\n    #num1 = 123456789012345\r\n    #num2 = 678901234567890\r\n    #num1 ","votes":null},{"text":"\r\n    count=0\r\n    sum=num1+num2\r\n    while sum>0:\r\n        sum=sum\/\/10\r\n        count+=1\r\n    return count\r\n\r\n\r\nnum1=int(input(\"Enter 1st number: \"))\r\nnum2=int(input(\"Enter 2nd number: \"))\r\nresult=count_digits(num1,num2)\r\nprint(\"The sum of the numbers is: \",result)\r\n\r\n\r","votes":null},{"text":"\r\n    sum_num = 0\r\n    sum_num = num1 + num2\r\n    count = 0\r\n    while sum_num > 0:\r\n        count += 1\r\n        sum_num \/\/= 10\r\n    print(count)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num1 = int(input(\"Enter first number: \"))\r\n    num2 = int(input(\"Enter second number: \"))\r\n    count_digits(num1,num2)\r\n\r\n\r\n#","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        count += 1\r\n    print(\"The sum of two numbers is\", num1 + num2)\r\n    print(\"The sum of two numbers has\", count, \"digits.\")\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    digits = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        digits += 1\r\n    print(\"Sum of\",num1,\"and\",num2,\"is\",digits)\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    print(sum)\r\n    count=0\r\n    while sum!=0:\r\n        count+=1\r\n        sum=sum\/\/10\r\n    print(count)\r\n    \r\ncount_digits(123,123)\r\n\r\n\r","votes":null},{"text":"\r\n    sum_of_numbers = num1 + num2\r\n    digit_count = 0\r\n    while(sum_of_numbers):\r\n        sum_of_numbers = sum_of_numbers \/\/ 10\r\n        digit_count += 1\r\n    print(f\"The sum of the numbers {num1} and {num2} is {num1+num2}\")\r\n    print(f\"The number of digits in the sum is {digit_count}\")\r\n\r\n# Call the function and pass the values as arguments.\r\ncount_digits(123,456)\r\n\r\n# Output:\r\n# The sum of the numbers 123 and 456 is 579\r\n# The number of digits in the sum is 3\r\n\r\n# In the above code, we first added the two numbers and then calculated the number of digits in the sum. \r\n# To improve the performance of the code, we can count the digits in the numbers and then add them. \r\n# The code for the same is given below:\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    while num1 != 0 or num2 != 0:\r\n        sum_temp = num1 + num2\r\n        num1 = sum_temp \/\/ 10\r\n        num2 = sum_temp % 10\r\n        count += 1\r\n    print(f'{num1} + {num2} = {sum_temp}')\r\n    print(f'The number of digits in the sum is {count}')\r\n\r\n\r\nif __name__ == '__main__':\r\n    count_digits(123, 456)\r\n    count_digits(1234567890, 1234567890)\r\n    count_digits(1234, 123456)\r\n   ","votes":null},{"text":"\r\n    \r\n    sum = num1 + num2\r\n    print(sum)\r\n\r\n    result = 0\r\n    while sum:\r\n        result += sum % 10\r\n        sum \/\/= 10\r\n    return result\r\n\r\ncount_digits(12345,12345)\r\n\r\n# 10. Write a program to find the sum of first n numbers.\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        count += 1\r\n\r\n    print(f\"{num1} + {num2} = {num1 + num2} and number of digits in sum is {count}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num1 = int(input(\"Enter a number: \"))\r\n    num2 = int(input(\"Enter a number: \"))\r\n    count_digits(num1, num","votes":null},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    while sum>0:\r\n        count+=1\r\n        sum=sum\/\/10\r\n    print(count)\r\n    \r\n\r\nnum1=int(input(\"Enter number 1: \"","votes":null},{"text":"\r\n    count=0\r\n    sum=num1+num2\r\n    while sum > 0:\r\n        sum = sum\/\/10\r\n        count += 1\r\n    print(\"Number of digits: \",count)\r\nprint(count_digits(1223,2323))\r\n\r","votes":null},{"text":"\r\n    sum1=num1+num2\r\n    sum1=str(sum1)\r\n    length=len(sum1)\r\n    print(\"The number of digits in sum is\",length)\r\n    \r\n#num1=int(input(\"Enter the number:\"))\r\n#num2=int(input(\"Enter the number:\"))\r\n#count_digits(num1,num2)\r\n\r","votes":null},{"text":"\r\n    if num1 < 0:\r\n        num1 = -num1\r\n    if num2 < 0:\r\n        num2 = -num2\r\n    if num1 >= num2:\r\n        temp = num2\r\n        num2 = num1\r\n        num1 = temp\r\n    \r\n    while num1 != 0:\r\n        num2 += num1\r\n        num1 = num2 % 10\r\n        num2 = num2 \/\/ 10\r\n    return num2\r\n\r\nnum1 = int(input(\"Enter first number: \"))\r\nnum2 = int(input(\"Enter second number: \"))\r\nprint(\"Sum of\",num1,\"and\",num2,\"is\",count_digits(num1,num2))\r\n\r","votes":null},{"text":"\r\n    c=0\r\n    for i in str(num1+num2):\r\n        c=c+1\r\n    print(c)\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    print(sum)\r\n    return sum\r\n\r","votes":null},{"text":"\r\n    result = num1 + num2\r\n    count = 0\r\n    while(result != 0):\r\n        count += 1\r\n        result = result \/\/ 10\r\n    return count\r\n\r\nnum1 = int(input(\"Enter first number: \"))\r\nnum2 = int(input(\"Enter second number: \"))\r\n\r\nprint(count_digits(num1,num2))\r\n\r\n\r\n# Q2. Write a function to print a list of numbers in reverse order\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    s=str(sum)\r\n    count=0\r\n    for i in s:\r\n        if i.isdigit():\r\n            count+=1\r\n    print(f\"The sum of {num1} and {num2} is {sum} and it has {count} digits\")\r\n\r\ncount_digits(345, 6789)\r\n\r\n#10. Write a program to reverse a string.\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    sum=str(sum)\r\n    return len(sum)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nnum1 = int(input(\"Please enter first number: \"))\r\nnum2 = int(input(\"Please enter second number: \"))\r\n\r\nprint(\"Sum is: \",num1+num2)\r\nprint(\"Number of digits in sum is: \",count_digits(num1,num2))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    a = []\r\n    sum = 0\r\n    while num1 > 0:\r\n        digit = num1 % 10\r\n        a.append(digit)\r\n        num1 = num1 \/\/ 10\r\n\r\n    while num2 > 0:\r\n        digit = num2 % 10\r\n        a.append(digit)\r\n        num2 = num2 \/\/ 10\r\n\r\n    for i in a:\r\n        sum = sum + i\r\n\r\n    return sum\r\n\r\n\r\nnum1 = int(input(\"Enter first number: \"))\r\nnum2 = int(input(\"Enter second number: \"))\r\nprint(\"Sum of two numbers is: \", count_digits(num1,num2))\r\n\r\n\r\n#Exercise 3\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = num1+num2\r\n    \r\n    if sum > 0:\r\n        \r\n        while sum > 0:\r\n            sum = sum \/\/ 10\r\n            count += 1\r\n        return count\r\n    \r\n    else:\r\n        return 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    print(\"Sum of \",num1,\" and \",num2,\" : \",sum)\r\n    print(\"Number of digits in sum : \",len(str(sum)))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    count_digits(10,20)\r\n    count_digits(300,90)\r\n    count_digits(100000,200)\r\n    count_digits(1000000,2000000)\r\n    count_digits(500,500)\r\n    count_digits(200,200)\r\n    count_digits(300,300)\r\n    count_digits(1000,1000)\r\n    count_digits(2000,2000)\r\n    count_digits(3000,3000)\r\n    count_digits(10000,10000)\r\n","votes":null},{"text":"\r\n    count=0\r\n    while num1 > 0:\r\n        num1 = num1 \/\/ 10\r\n        count += 1\r\n\r\n    while num2 > 0:\r\n        num2 = num2 \/\/ 10\r\n        count += 1\r\n    return count\r\n\r\n\r\nnum1 = int(input(\"Enter first number: \"))\r\nnum2 = int(input(\"Enter second number: \"))\r\nprint(\"Number of digits: \", count_digits(num1, num2))\r\n\r\n\r\n\r\n#Example:\r\n#Enter first number: 1234\r\n#Enter second number: 5678\r\n#Number of digits:  4\r\n\r\n#Enter first number: 143\r\n#Enter second number: 7","votes":null},{"text":"\r\n    sum = num1+num2\r\n    sum_str = str(sum)\r\n    print(\"The sum is\", sum_str)\r\n    print(\"The number of digits is\", len(sum_str))\r\n\r\n# count_digits(50,60)\r\n\r","votes":null}],"time":{"count":38.0,"avg":117742.72,"std":31263.8143308493,"cov":0.2655265169}}
{"id":544,"question":"def flatten_tuple(test_list):\r\n    \"\"\"Write a function to flatten the tuple list to a string.\"\"\"","answers":[{"text":"\r\n    res = ''\r\n    for sublist in test_list:\r\n        for element in sublist:\r\n            res += str(element) + ' '\r\n    return res.rstrip()\r\n\r\n\r","votes":104361.484},{"text":"\r\n    return ' '.join([str(i) for j in test_list for i in j])\r\n\r\n\r","votes":163734.912},{"text":"\r\n    str_list = []\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            str_list.append(flatten_tuple(item))\r\n        else:\r\n            str_list.append(item)\r\n    return \"\".join(str_list)\r\n\r\n\r","votes":null},{"text":"\r\n    return ''.join(str(element) for element in test_list).strip()\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return \"\".join(test_list)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # create an empty string\r\n    s = ''\r\n    \r\n    # loop through the list\r\n    for item in test_list:\r\n        # if item is a tuple, loop through it\r\n        if isinstance(item, tuple):\r\n            for i in item:\r\n                s += i\r\n        # else item is not a tuple, so just add it to the string\r\n        else:\r\n            s += item\r\n    \r\n    # return the string\r\n    return s\r\n\r","votes":null},{"text":"\r\n    return ' '.join([str(s) for s in test_list])\r\n\r\n# test\r\nprint(flatten_tuple([1, 2, (3, 4), 5]))\r\nprint(flatten_tuple([1, 'a', ['b', {'c': 'cc'}]]))\r\nprint(flatten_tuple([1, 2, (3, 4, (5, 6)), 7, 8]))\r\nprint(flatten_tuple(['a', 'b', ('c', 'd', ('e', 'f'))]))\r\n\r\n# Output:\r\n# 1 2 3 4 5\r\n# 1 a b c:cc\r\n# 1 2 3 4 5 6 7 8\r\n# a b c d e f\r\n\r\n\r\n\r\n# Q4.4\r","votes":null},{"text":"\r\n    flattened_list = []\r\n    for tup in test_list:\r\n        for element in tup:\r\n            flattened_list.append(element)\r\n    return flattened_list\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for item in test_list:\r\n        if type(item) == tuple:\r\n            result.extend(flatten_tuple(item))\r\n        else:\r\n            result.append(item)\r\n    return result\r\n\r\nprint(flatten_tuple([(1,2,3, (4,5,(6,7))), (8,9)]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(flatten_tuple([(1,2,3),(4,5,(6,7))]))\r\n# [1, 2, 3, 4, 5, 6, 7]\r\nprint(flatten_tuple([(1,2,3, (4,5,(6,7))), (8,9)]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(flatten_tuple([(1,2,3, (4,5,(6,7))), (8,9)]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(flatten_tuple([(1,2,3, (4,5,(6,7))), (8,9)]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(flatten_tuple([(1,2,3, (4,5,(6,7))), (8,9)]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(flatten_tuple([(1,2,3, (4,5,(6,7))), (8,9)]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]","votes":null},{"text":"\r\n    # initialize the string\r\n    string = ''\r\n\r\n    # loop through the list\r\n    for item in test_list:\r\n        # check to see if the item is a tuple\r\n        if isinstance(item, tuple):\r\n            # loop through the tuple\r\n            for sub_item in item:\r\n                # add the sub item to the string\r\n                string += sub_item\r\n        else:\r\n            # add the item to the string\r\n            string += item\r\n\r\n    # return the string\r\n    return string\r\n\r\n\r","votes":null},{"text":"\r\n    return ''.join([","votes":null},{"text":"\r\n    output_string = \"\"\r\n    for i in test_list:\r\n        if isinstance(i, list):\r\n            output_string += flatten_tuple(i)\r\n        else:\r\n            output_string += str(i)\r\n    return output_string\r\n\r\n\r","votes":null},{"text":"\r\n    flattened_list = \"\"\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            flattened_list += flatten_tuple(item)\r\n        else:\r\n            flattened_list += str(item)\r\n    return flattened_list\r\n\r\n\r","votes":null},{"text":"\r\n    return ''.join([str(e) for e in test_list])\r\n\r","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    new_list = []\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            for i in item:\r\n                new_list.append(i)\r\n        else:\r\n            new_list.append(item)\r\n    return new_list\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    flattened_list = []\r\n    for item in test_list:\r\n        try:\r\n            for sub_item in item:\r\n                flattened_list.append(sub_item)\r\n        except TypeError:\r\n            flattened_list.append(item)\r\n    return flattened_list\r\n\r\n\r","votes":null},{"text":"\r\n    flattened_list = []\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            flattened_list.append(flatten_tuple(item))\r\n        else:\r\n            flattened_list.append(item)\r\n    return \"\".join(flattened_list)\r\n\r\n\r\nclass Test(unittest.TestCase):\r\n   ","votes":null},{"text":"\r\n\r\n    if not isinstance(test_list, list) or not test_list:\r\n        return \"\"\r\n\r\n    if test_list[0] == \"end\":\r\n        return \"\"\r\n\r\n    if isinstance(test_list[0], list):\r\n        return flatten_tuple(test_list[0]) + flatten_tuple(test_list[1:])\r\n\r\n    string = str(test_list[0])\r\n    return string + flatten_tuple(test_list[1:])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return \", \".join(str(x) for x in test_list)\r\n\r\n\r","votes":null},{"text":"\r\n    final_string = \"\"\r\n    for i in test_list:\r\n        if isinstance(i, tuple):\r\n            final_string += flatten_tuple(i)\r\n        else:\r\n            final_string += str(i)\r\n    return final_string\r\n\r\n\r","votes":null},{"text":"\r\n    ans = \"\"\r\n    for i in range(len(test_list)):\r\n        for j in range(len(test_list[i])):\r\n            ans += test_list[i][j]\r\n    return ans\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    string = \"\"\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            string = string + flatten_tuple(item)\r\n        else:\r\n            string = string + str(item)\r\n    return string\r\n\r\n\r","votes":null},{"text":"\r\n    if test_list == []:\r\n        return \"Empty tuple\"\r\n    elif type(test_list) == list:\r\n        print (test_list)\r\n        test_list = [item for sublist in test_list for item in sublist]\r\n        return \"\".join(str(item) for item in test_list)\r\n    else:\r\n        return \"Not a list\"\r\n\r\n\r\nprint(flatten_tuple([(1, 2, 3, 4, 5), (9, 8, 7, 6, 5), (0, 0, 0, 0, 0)]))\r\nprint(flatten_tuple([(1, 2, 3, 4, 5), (9, 8, 7, 6, 5, 1, 2, 3, 4, 5)]))\r\nprint(flatten_tuple([(1, 2, 3, 4, 5), (9, 8, 7, 6, 5), (0, 0, 0, 0, 0), (5, 4, 3, 2, 1)]))\r\nprint(flatten_tuple([]))\r\nprint(flatten_tuple([(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)]))\r\nprint(flatten_tuple([(1, 2, 3, 4, 5, 6, 7, 8, 9, 0), (5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0)]))\r\nprint(flatten_tuple([(1, 2, 3, 4, 5, 6, 7, 8, 9, 0), (5, 4, 3, 2, 1, 0, 1, 2, 3, 4","votes":null},{"text":"\r\n    \r\n    if type(test_list) == list:\r\n        return \"\".join(flatten_tuple(x) for x in test_list)\r\n    elif type(test_list) == tuple:\r\n        return \"\".join(flatten_tuple(x) for x in test_list)\r\n    else:\r\n        return test_list\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for i in test_list:\r\n        if isinstance(i, tuple):\r\n            for j in i:\r\n                new_list.append(j)\r\n        else:\r\n            new_list.append(i)\r\n    return ''.join(new_list)\r\n\r\n\r","votes":null},{"text":"\r\n    test_string = \"\"\r\n    for element in test_list:\r\n        if type(element) == list or type(element) == tuple:\r\n            test_string = test_string + flatten_tuple(element)\r\n        else:\r\n            test_string = test_string + str(element)\r\n    return test_string\r\n\r\n\r\n\r\n# print(flatten_tuple([1, 2, 3, 'a', 'b', 'c', (1, 2, 3), 'cat', ['dog']]))\r\n# >>> \"123abc123catdog\"\r\n\r\n# print(flatten_tuple([1, 2, 3, 'a', 'b', 'c', (1, 2, 3, (4, 5, 6)), 'cat', ['dog']]))\r\n# >>> \"123abc123456catdog\"\r\n\r\n# print(flatten_tuple(['cat', ['dog', ['frog'], (4, 5, 6)]]))\r\n# >>> \"catdogfrog456\"\r\n\r\n# print(flatten_tuple([['cat', ['dog', ['frog']]], (1, 2, 3)]))\r\n# >>> \"catdogfrog123\"\r\n\r\n# print(flatten_tuple(['cat', ['dog', ['frog']], (1, 2, 3)]))\r\n# >>> \"catdogfrog123\"\r\n\r\n# print(flatten_tuple([(1, 2, 3), ['cat', ['dog', ['frog']]]]))\r\n# >>> \"123catdogfrog\"\r\n\r\n# print(flatten_tuple(['cat', ['dog', ['frog']], (1, 2, 3)]))\r\n# >>> \"catdogfrog123\"\r\n\r\n# print(flatten_tuple([(1, 2, 3), ['cat', ['dog', ['frog']]]]))\r\n# >>> \"123catdogfrog\"\r\n\r","votes":null},{"text":"\r\n    return \" \".join([str(item) for item in test_list])\r\n\r","votes":null},{"text":"\r\n    flatted_list = []\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            flatted_list.append(\"\".join(item))\r\n        else:\r\n            flatted_list.append(item)\r\n    return flatted_list\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    result = \"\".join(test_list)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    # tuple_list = [('R', 'A', 'N', 'K'), ('U', 'R', 'A', 'N', 'K'), ('U', 'S', 'A', 'N', 'K')]\r\n    flattened_list = []\r\n    for tup in test_list:\r\n        flattened_list.extend(tup)\r\n        # flattened_list = flattened_list + tup\r\n    print(flattened_list)\r\n    return flattened_list\r\n\r\n\r","votes":null},{"text":"\r\n    result = ''\r\n    for element in test_list:\r\n        if isinstance(element, str):\r\n            result += element\r\n        else:\r\n            result += flatten_tuple(element)\r\n    return result\r\n\r","votes":null},{"text":"\r\n    return ''.join([str(item) for sublist in test_list for item in sublist])\r\n\r\n\r","votes":null},{"text":"\r\n    string = \"\"\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            string += flatten_tuple(item)\r\n        else:\r\n","votes":null},{"text":"\r\n\r\n    string_list = []\r\n\r\n    for sublist in test_list:\r\n        for element in sublist:\r\n            string_list.append(element)\r\n\r\n    return ''.join(string_list)\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for item in test_list:\r\n        if type(item) == tuple:\r\n            for sub_item in item:\r\n                new_list.append(sub_item)\r\n        else:\r\n            new_list.append(item)\r\n    return ''.join(new_list)\r\n\r\n\r\nprint(flatten_tuple([('a', 'b'), 'c', ('d')]))\r\n# Should be 'abcd'\r\n\r\n\r\nprint(flatten_tuple([('a', 'b'), ['c', 'd']]))\r\n# Should be 'abcd'\r\n\r\n\r\nprint(flatten_tuple(['cat', ('dog', 'duck')]))\r\n# Should be '","votes":null},{"text":"\r\n    return ','.join(str(item) for item in test_list)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(flatten_tuple([1, (2, 3)]))\r\n    print(flatten_tuple([[1, 2], (3, 4)]))\r\n    print(flatten_tuple([(1, (2, (3, 4)))]))\r\n    print(flatten_tuple([1, [2, 3], [[4, 5], 6]]))\r\n    print(flatten_tuple([1, [2, 3], [[4, 5], 6]]))\r\n    print(flatten_tuple([[[1, 2], 3], 4]))\r\n    print(flatten_tuple([[[1, 2], 3], [4]]))\r\n    print(flatten_tuple([[1, [2, 3], [[4, 5], 6]]]))\r\n    print(flatten_tuple([1, 2, 3]))\r\n    print(flatten_tuple([1, [2, 3], [[4, 5], 6]]))\r\n    print(flatten_tuple([1, 2, 3, 4, 5, 6, [1, 2, 3], [[4, 5], 6]]))\r\n    print(flatten_tuple([1, 2, 3, 4, 5, 6, [1, 2, 3], [[4, 5], 6]]))\r\n    print(flatten_tuple([[[[[[[1]]]]]]]))\r\n    print(flatten_tuple([[[[[[[1]]]]]]]))\r\n    print(flatten_tuple([1, [2, 3], [[4, 5], 6]]))\r\n    print(flatten_tuple([[[[[[[1]]]]]]]))\r\n    print(flatten_tuple([[[[[[[1]]]]]]]))\r\n    print(flatten_tuple([1, [2","votes":null},{"text":"\r\n    \r\n    result = ''\r\n    for i in test_list:\r\n        if type(i) == tuple:\r\n            for j in i:\r\n                result += j\r\n        else:\r\n            result += i\r\n    return result\r\n\r\nif __name__ == \"__main__\":","votes":null},{"text":"\r\n\r\n    flattened_list = []\r\n    for each in test_list:\r\n        if isinstance(each, tuple):\r\n            flattened_list.extend(each)\r\n        else:\r\n            flattened_list.append(each)\r\n    return flattened_list\r\n\r\n\r","votes":null},{"text":"\r\n    return ', '.join([str(x) for x in test_list])\r\n\r\n\r\nprint(flatten_tuple((1, 2, 3)))\r\nprint(flatten_tuple(((1, 2), (3, 4))))\r\n\r\n\r\n# --------------------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    flattened_list = []\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            for el in item:\r\n                flattened_list.append(el)\r\n        else:\r\n            flattened_list.append(item)\r\n    return flattened_list\r\n\r\n\r","votes":null},{"text":"\r\n    flattened = []\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            for sub_item in flatten_tuple(item):\r\n                flattened.append(sub_item)\r\n        else:\r\n            flattened.append(item)\r\n    return flattened\r\n\r","votes":null},{"text":"\r\n    return ''.join(i for t in test_list for i in t)\r\n\r\n\r","votes":null},{"text":"\r\n    if isinstance(test_list, tuple):\r\n        return test_list[0] + ' ' + flatten_tuple(test_list[1:])\r\n    else:\r\n        return test_list\r\n\r\n\r","votes":null},{"text":"\r\n    return ''.join([str(x) for x in test_list])\r\n\r\n\r","votes":null},{"text":"\r\n    return \"\".join(map(str, test_list))\r\n\r\n\r\nprint(flatten_tuple(('a', 'b', 'c', 1, 2, 3)))\r\n# Output:\r\n# 'abc123'\r\n\r\n\r\n#","votes":null},{"text":"\r\n    flattened = ''\r\n    for item in test_list:\r\n        if type(item) == tuple:\r\n            flattened += flatten_tuple(item)\r\n        else:\r\n            flattened += item\r\n    return flattened\r\n\r\n\r","votes":null},{"text":"\r\n    string = ''\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            string += flatten_tuple(item)\r\n        else:\r\n            string += str(item)\r\n    return string\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_list = (1, 2, '","votes":null},{"text":"\r\n    s = ''\r\n    for i in test_list:\r\n        for j in i:\r\n            s += j\r\n    return s\r\n\r\n\r","votes":null},{"text":"\r\n    result = \"\"\r\n    for tup in test_list:\r\n        for item in tup:\r\n            result += item\r\n    return result\r\n\r\n\r\nprint(flatten_tuple([[\"e\", \"a\"], [\"s\", \"t\"]]))\r\n# Should be \"east\"\r\n\r\nprint(flatten_tuple([[\"e\", \"a\"], [\"s\", \"t\"], [\"a\", \"t\"]]))\r\n# Should be \"eastat\"\r\n\r\nprint(flatten_tuple([[\"i\", \"t\"], [\"i\", \"i\"], [\"s\", \"t\"]]))\r\n# Should be \"istiti\"\r\n\r\nprint(flatten_tuple([[\"s\", \"t\"], [\"a\", \"t\"], [\"a\", \"t\"]]))\r\n# Should be \"statat\"\r\n\r\nprint(flatten_tuple([[\"a\", \"t\"], [\"a\", \"t\"]]))\r\n# Should be \"atat\"\r\n\r\nprint(flatten_tuple([[\"a\", \"t\"], [\"a\", \"t\"], [\"a\", \"t\"]]))\r\n# Should be \"atatat\"\r\n\r\nprint(flatten_tuple([[\"a\", \"t\"], [\"a\", \"t\"], [\"a\", \"t\"], [\"a\", \"t\"]]))\r\n# Should be \"atatatat\"\r\n\r\nprint(flatten_tuple([[\"a\", \"t\"], [\"a\", \"t\"], [\"a\", \"t\"], [\"a\", \"t\"], [\"a\", \"t\"]]))\r\n# Should be \"atatatatat\"\r\n\r\nprint(flatten_tuple([[\"i\", \"t\"], [\"i\", \"i\"], [\"s\", \"t\"], [\"i\", \"t\"]]))\r\n# Should be \"istiti\"\r\n\r\nprint(flatten_tuple([[\"i\", \"t\"], [\"i\", \"i\"], [\"s\", \"t\"], [\"i\", \"t\"], [\"i\", \"i\"]]))\r\n# Should be \"istitiiti\"\r\n\r\nprint(flatten_tuple([[\"i\", \"t\"], [\"i\", \"i\"], [\"s\", \"t\"], [\"i\", \"","votes":null},{"text":"\r\n    return ''.join(test_list)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    return ', '.join(map(str, test_list))\r\n\r\n\r","votes":null},{"text":"\r\n    my_list = []\r\n    for item in test_list:\r\n        if type(item) == tuple:\r\n            for i in item:\r\n                my_list.append(i)\r\n        else:\r\n            my_list.append(item)\r\n    return \"\".join(my_list)\r\n\r\n\r\nprint(flatten_tuple([1, 2, 3, (\"a\", \"b\", \"c\"), 4, 5]))  # 123abc45\r\nprint(flatten_tuple([\"cat\", (\"dog\",), \"elephant\"]","votes":null},{"text":"\r\n    return \"\".join(str(test_list))\r\n\r\n\r","votes":null},{"text":"\r\n    final_list = []\r\n    for i in range(len(test_list)):\r\n        if isinstance(test_list[i], tuple):\r\n            final_list.append(\"\".join(test_list[i]))\r\n        else:\r\n            final_list.append(test_list[i])\r\n    return final_list\r\n\r\n\r\n# print(flatten_tuple([1, 2, 3, ('a', 'b', 'c'), 4, 5]))\r\n# >>> [1, 2, 3, 'abc', 4, 5]\r\n\r\n# print(flatten_tuple([1, 2, 3, ('a', 'b', ('c', 'd')), 4, 5]))\r\n# >>> [1, 2, 3, 'abcd', 4, 5]\r\n\r\n# print(flatten_tuple([1, 2, 3, ('a', 'b', (('c', 'd'), 'e')), 4, 5]))\r\n# >>> [1, 2, 3, 'abcde', 4, 5]\r\n\r\n# print(flatten_tuple([1, 2, 3, ('a', 'b', (('c', 'd'), ('e', 'f'))), 4, 5]))\r\n# >>> [1, 2, 3, 'abcdef', 4, 5]\r\n\r\n# print(flatten_tuple([(1, 2), 3, ('a', 'b', (('c', 'd'), ('e', 'f'))), 4,","votes":null},{"text":"\r\n    string = \"\"\r\n    for i in test_list:\r\n        for j in i:\r\n            string += j\r\n    return string\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return ''.join(str(i) for i in test_list)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(flatten_tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\n    print(flatten_tuple([1, 2, 3, 4, 'test', 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, [1, 2, 3, 4, 5]]))\r\n    print(flatten_tuple([1, 2, 3, 4, 'test', 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, ('1', '2', '3', '4')]))\r\n    print(flatten_tuple([1, 2, 3, 4, 'test', 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)]))\r\n    print(flatten_tuple(['1', 2, 3, 4, 'test', 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, (1, 2, 3, 4","votes":null},{"text":"\r\n    output = \"\"\r\n    for i in test_list:\r\n        if isinstance(i, str):\r\n            output += i\r\n        elif isinstance(i, tuple):\r\n            for j in i:\r\n                output += j\r\n        else:\r\n            output += str(i)\r\n    return output\r\n\r\n\r","votes":null},{"text":"\r\n    flattened_tuple = ''\r\n    for element in test_list:\r\n        flattened_tuple += element\r\n    return flattened_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    result = \"\"\r\n    for item in test_list:\r\n        result += str(item)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    result = \"\"\r\n    for item in test_list:\r\n        if type(item) is list:\r\n            result += flatten_tuple(item)\r\n        else:\r\n            result += item\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    return \"\".join(str(val) for val in test_list)\r\n\r\n\r","votes":null},{"text":"\r\n    flat_list = []\r\n    for item in test_list:\r\n        if type(item) == tuple:\r\n            flat_list.append(flatten_tuple(item))\r\n        else:\r\n            flat_list.append(item)\r\n    return ''.join(flat_list)\r\n\r\n\r","votes":null},{"text":"\r\n    if not test_list:\r\n        return 0\r\n\r\n    str_list = []\r\n    for item in test_list:\r\n        if isinstance(item, str):\r\n            str_list.append(item)\r\n        else:\r\n            str_list.append(flatten_tuple(item))\r\n\r\n    return ''.join(str_list)\r\n\r\n\r\nprint(flatten_tuple(['a', 2, ('b', 'c'), 3, ('d', ('e', 'f')), 'g']))\r\n# Output: 'abcdefg'\r\n\r\nprint(flatten_tuple([1, (2, (3, (4, 5), 6), 7), 8]))\r\n# Output: 12345678\r\n\r\nprint(flatten_tuple([1, (2, ('a', 'b', 'c'), 3), 4]))\r\n# Output: 12abc34\r\n\r\nprint(flatten_tuple([1, (2, 3, (4, (5, 6), 7), 8), 9]))\r\n# Output: 123456789\r\n\r\nprint(flatten_tuple([1, (2, 3, (4, (5, 6, (7, 8), 9), 10), 11), 12]))\r\n# Output: 123456789101112\r\n\r\nprint(flatten_tuple(['a', ('b', 'c', ('d', 'e', 'f', (0, 1, 2, 3, 4), 5), 'g'), 'h']))\r\n# Output: abcdef012345g","votes":null},{"text":"\r\n    return reduce(lambda x, y: x + y, test_list)\r\n\r\n\r","votes":null},{"text":"\r\n    flatted_list = []\r\n    for i in test_list:\r\n        if isinstance(i, tuple):\r\n            flatted_list.extend(i)\r\n        else:\r\n            flatted_list.append(i)\r\n    return flatted_list\r\n\r\n\r\nprint(flatten_tuple([1, (2, 3, 4), 5, (6, 7), (8, 9)]))\r\nprint(flatten_tuple([(1, 2), 3, 4, (5, 6, 7)]))\r\nprint(flatten_tuple([(1, (2, 3), (4, 5), 6)]))\r\nprint(flatten_tuple([(1, 2), (3, 4), (5, 6, 7)]))\r\nprint(flatten_tuple([(1, 2), (3, 4), (5, 6, 7), (8, 9)]))\r\nprint(flatten_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))\r\n\r\n\r\n# print(flatten_tuple([(1, (2, 3, 4), 5, (6, 7), (8, 9)]))\r\n\r\n\r","votes":null},{"text":"\r\n    flatten_list = []\r\n    for i in test_list:\r\n        if isinstance(i, str) and len(i) > 1:\r\n            flatten_list.append(i)\r\n        elif isinstance(i, tuple):\r\n            for j in i:\r\n                if isinstance(j, str) and len(j) > 1:\r\n                    flatten_list.append(j)\r\n    return flatten_list\r\n\r\n\r","votes":null},{"text":"\r\n    flattened = []\r\n    for item in test_list:\r\n        # if this is a tuple, recurse\r\n        if isinstance(item, (tuple, list)):\r\n            flattened.append(flatten_tuple(item))\r\n        # if this is a string, append it\r\n        elif isinstance(item, str):\r\n            flattened.append(item)\r\n    return \"\".join(flattened)\r\n\r\n\r","votes":null},{"text":"\r\n    # Solution\r\n    return \"\".join([\"\".join(map(str, x)) for x in test_list])\r\n\r\n\r\n# Tests\r","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    flatten_list = [char for sub_list in test_list for char in sub_list]\r\n    return ''.join(str(x) for x in flatten_list)\r\n\r\n\r\nclass TestFlattenTuple(unittest.TestCase):\r\n   ","votes":null},{"text":"\r\n    return \",\".join([str(element) for inner_list in test_list for element in inner_list])\r\n\r\n\r","votes":null},{"text":"\r\n    flattened_string = ''\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            flattened_string += flatten_tuple(item)\r\n        else:\r\n            flattened_string += item\r\n    return flattened_string\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for item in test_list:\r\n        if isinstance(item, tuple):\r\n            result += flatten_tuple(item)\r\n        else:\r\n            result.append(item)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    out = []\r\n    for element in test_list:\r\n        if isinstance(element, list):\r\n            out.append(flatten_tuple(element))\r\n        else:\r\n            out.append(element)\r\n    return ''.join(str(e) for e in out)\r\n\r\n\r","votes":null},{"text":"\r\n    return \"\".join(item for sublist in test_list for item in sublist)\r\n\r\n\r\n# print(flatten_tuple(('a', 'b', 'c', ('d', 'e', 'f'))))\r\n\r\n\r","votes":null},{"text":"\r\n    flatten_list = []\r\n    for x in test_list:\r\n        for y in x:\r\n            flatten_list.append(y)\r\n    return flatten_list\r\n\r\n\r","votes":null},{"text":"\r\n    if not test_list:\r\n        return \"\"\r\n    if not isinstance(test_list, (list, tuple)):\r\n        return \"\"\r\n    flattened = \"\"\r\n    for element in test_list:\r\n        if isinstance(element, (list, tuple)):\r\n            flattened += flatten_tuple(element)\r\n        else:\r\n            flattened += str(element)\r\n    return flattened\r\n\r\n\r\nexample1 = [(\"hello\", 1), (2, 3), \"world\"]\r\nexample2 = [(\"hello\", \"world\")]\r\nexample3 = [1, 2, 3, 4]\r\nexample4 = []\r\nexample5 = [\"hello\", \"world\"]\r\n\r\nprint(\"Test 1\", flatten_tuple(example1) == \"helloworld\")\r\nprint(\"Test 2\", flatten_tuple(example2) == \"helloworld\")\r\nprint(\"Test 3\", flatten_tuple(example3) == \"1234\")\r\nprint(\"Test 4\", flatten_tuple(example4) == \"\")\r\nprint(\"Test 5\", flatten_tuple(example5) == \"hello","votes":null},{"text":"\r\n    if isinstance(test_list, tuple):\r\n        return ''.join(map(flatten_tuple, test_list))\r\n    else:\r\n        return test_list\r\n\r\n\r","votes":null},{"text":"\r\n    str_list = \"\"\r\n    for x in test_list:\r\n        if type(x) == list:\r\n            str_list += flatten_list(x)\r\n        elif type(x) == tuple:\r\n            str_list += flatten_tuple(x)\r\n        else:\r\n            str_list += str(x)\r\n    return str_list\r\n\r\n\r","votes":null},{"text":"\r\n    result = ''\r\n    for i in test_list:\r\n        if type(i) is tuple:\r\n            for j in i:\r\n                result += j\r\n        else:\r\n            result += i\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(flatten_tuple([(1, 2, 3), ('a', 'b', 'c'), 4, 5]))\r\n\r\n\r\n# ## Task 2:\r\n# \r\n# Given a string, write a function to generate all possible parentheses combinations.\r\n# \r\n# For example:\r\n# \r\n# ```\r\n# >>> generate_parentheses(3)\r\n# ['((()))', '(()())', '(())()', '()(())', '()()()']\r\n# ```\r\n\r\n# In[1]:\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return ' '.join([str(i) for i in test_list])\r\n\r\n\r\nprint(flatten_tuple(('a', 1, 'b', 2, 'c', 3, 'd', 4, 'e', 5)))\r\n# should print 'a 1 b 2 c 3 d 4 e 5'\r\n\r\nprint(flatten_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g')))\r\n# should print 'a b c d e f g'\r\n\r\nprint(flatten_tuple(('a', 1, 2, 3, 'b', 4, 5, 6, 'c', 7, 8, 9, 'd', 'e', 'f')))\r\n# should print 'a 1 2 3 b 4 5 6 c 7 8 9 d e f'\r\n\r\nprint(flatten_tuple(('a', 1, 'b', 2, 'c', 3, 'd', 4, 'e', 5)))\r\n# should print 'a 1 b 2 c 3 d 4 e 5'\r\n\r\n\r","votes":null},{"text":"\r\n    res = \"\"\r\n    for i in test_list:\r\n        if type(i) is tuple:\r\n            res += flatten_tuple(i)\r\n        else:\r\n            res += str(i)\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    return [x for t in test_list for x in t]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_list = [\r\n        (\"I\", \"like\", \"you\"),\r\n        (\"I\", \"do\"),\r\n        (\"I\", \"will\", \"miss\", \"you\")\r\n    ]\r\n   ","votes":null},{"text":"\r\n    return ''.join(test_list)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    flat_string = \"\"\r\n    for each in test_list:\r\n        if type(each) == list:\r\n            flat_string = flat_string + flatten_tuple(each)\r\n        elif type(each) == tuple:\r\n            flat_string = flat_string + flatten_tuple(each)\r\n        else:\r\n            flat_string = flat_string + str(each)\r\n    return flat_string\r\n\r\n\r\nif __name__ == '","votes":null},{"text":"\r\n    \r\n    # Use a for loop to iterate through the list\r\n    for i in range(0, len(test_list)):\r\n\r\n        # If the list element is a tuple\r\n        if type(test_list[i]) == tuple:\r\n\r\n            # Use a for loop to iterate through the tuple\r\n            for j in range(0, len(test_list[i])):\r\n\r\n                # If the tuple element is a tuple\r\n                if type(test_list[i][j]) == tuple:\r\n\r\n                    # Use a for loop to iterate through the tuple\r\n                    for k in range(0, len(test_list[i][j])):\r\n\r\n                        # If the tuple element is a tuple\r\n                        if type(test_list[i][j][k]) == tuple:\r\n\r\n                            # Use a for loop to iterate through the tuple\r\n                            for l in range(0, len(test_list[i][j][k])):\r\n\r\n                                # If the tuple element is a tuple\r\n                                if type(test_list[i][j][k][l]) == tuple:\r\n\r\n                                    # Use a for loop to iterate through the tuple\r\n                                    for m in range(0, len(test_list[i][j][k][l])):\r\n\r\n                                        # If the tuple element is a tuple\r\n                                        if type(test_list[i][j][k][l][m]) == tuple:\r\n\r\n                                            # Use a for loop to iterate through the tuple\r\n                                            for n in range(0, len(test_list[i][j][k][l][m])):\r\n\r\n                                                # If the tuple element is a tuple\r\n                                                if type(test_list[i][j][k][l][m][n]) == tuple:\r\n\r\n                                                    # Use a for loop to iterate through the tuple\r\n                                                    for o in range(0, len(test_list[i]","votes":null},{"text":"\r\n    res = \"\"\r\n    for i in test_list:\r\n        if type(i) == tuple:\r\n            res += flatten_tuple(i)\r\n        else:\r\n            res += i\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    final_string = \"\"\r\n    for i in test_list:\r\n        if type(i) == tuple:\r\n            final_string += \"\".join(flatten_tuple(i))\r\n        else:\r\n            final_string += i\r\n    return final_string\r\n\r\n\r\nprint(flatten_tuple([('a', 'b', ('c', 'd', 'e')), 'f']))\r\n\r\n\r\n# Test Code\r","votes":null},{"text":"\r\n    \r\n    flat_list = []\r\n    for i in test_list:\r\n        if i[0] == 'str':\r\n            flat_list.append(i[1])\r\n        elif i[0] == 'int':\r\n            flat_list.append(str(i[1]))\r\n        elif i[0] == 'list':\r\n            flat_list.append(i[1][0])\r\n    return ''.join(flat_list)\r\n\r\n\r","votes":null},{"text":"\r\n    result = ''\r\n    for i in test_list:\r\n        if type(i) is tuple:\r\n            result += flatten_tuple(i)\r\n        else:\r\n            result += i\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    test_string = ''\r\n    for i in test_list:\r\n        test_string += str(i)\r\n    return test_string\r\n\r\n\r","votes":null},{"text":"\r\n    if isinstance(test_list, tuple):\r\n        return \"\".join(map(str, test_list))\r\n    else:\r\n        return \"\".join(map(str, test_list))\r\n\r\n\r","votes":null},{"text":"\r\n    return \"\".join(list(test_list))\r\n\r\n\r","votes":null},{"text":"\r\n    result = ''\r\n    for item in test_list:\r\n        result += item[0]\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    # start with an empty string\r\n    flattened_string = \"\"\r\n    # iterate over the list\r\n    for tup in test_list:\r\n        # iterate over the tuple\r\n        for item in tup:\r\n            # append the item to the string\r\n            flattened_string += item\r\n    return flattened_string\r\n\r\n\r","votes":null},{"text":"\r\n    # Get all items of the list\r\n    flatten_list = [item for sublist in test_list for item in sublist]\r\n    # Join all items of the list\r\n    return ''.join(flatten_list)\r\n\r\n\r","votes":null}],"time":{"count":2.0,"avg":134048.198,"std":41983.3535610912,"cov":0.3131959563}}
{"id":548,"question":"def longest_increasing_subsequence(arr):\r\n    \"\"\"Write a function to find the length of the longest increasing subsequence of the given sequence.\"\"\"","answers":[{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r","votes":97536.292},{"text":"\r\n\r\n    dp = [1] * len(arr)\r\n\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n\r\n    return max(dp)\r\n\r\n\r","votes":97626.972},{"text":"\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r","votes":97931.132},{"text":"\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r","votes":100642.456},{"text":"\r\n    N = len(arr)\r\n    if N <= 1:\r\n        return N\r\n    dp = [1] * N\r\n    for i in range(1, N):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r","votes":105138.224},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    lis_arr = [1] * len(arr)\r\n\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                lis_arr[i] = max(lis_arr[i], lis_arr[j] + 1)\r\n\r\n    return max(lis_arr)\r\n\r\n\r","votes":105250.316},{"text":"\r\n    dp = [1] * len(arr)\r\n    maxi = 0\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n        maxi = max(maxi, dp[i])\r\n    return maxi\r\n\r\n\r","votes":110244.288},{"text":"\r\n\r\n    length = 1\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n                if dp[i] > length:\r\n                    length = dp[i]\r\n    return length\r\n\r\n\r","votes":114906.976},{"text":"\r\n\r\n    # create an array to store the length of the longest increasing subsequence ending at arr[i]\r\n    # set all values to 1\r\n    length_of_increasing_subsequence = [1] * len(arr)\r\n\r\n    # loop through the array\r\n    for i in range(1, len(arr)):\r\n\r\n        # loop through all the previous values of the array\r\n        for j in range(0, i):\r\n\r\n            # if the current value of the array is larger than the previous value\r\n            if arr[i] > arr[j]:\r\n\r\n                # update the value of the length of the longest increasing subsequence for the current value of the array\r\n                length_of_increasing_subsequence[i] = \\\r\n                    max(length_of_increasing_subsequence[i], length_of_increasing_subsequence[j] + 1)\r\n\r\n    # return the the maximum value in the length_of_increasing_subsequence array\r\n    return max(length_of_increasing_subsequence)\r\n\r\n\r\n# test the function\r\narr = [1, 101, 18, 10, 12, 100, 1000, 10000]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n\r","votes":120848.556},{"text":"\r\n\r\n    len_arr = len(arr)\r\n    table = [1]*len_arr\r\n\r\n    for i in range(len_arr):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and table[i] < table[j] + 1:\r\n                table[i] = table[j] + 1\r\n\r\n    return max(table)\r\n\r\n\r","votes":121029.304},{"text":"\r\n    seq = []\r\n    for i in range(len(arr)):\r\n        if not seq or arr[i] > seq[-1]:\r\n            seq.append(arr[i])\r\n        else:\r\n            j = 0\r\n            while j < len(seq) and seq[j] < arr[i]:\r\n                j += 1\r\n            seq[j] = arr[i]\r\n    return len(seq)\r\n\r\n\r","votes":121432.044},{"text":"\r\n    if not arr:\r\n        return 0\r\n    n = len(arr)\r\n    lis = [1 for _ in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n    return max(lis)\r\n\r\n\r","votes":121760.54},{"text":"\r\n\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    dp = [1] * len(arr)\r\n\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n\r\n    return max(dp)\r\n\r\n\r","votes":122354.316},{"text":"\r\n    # Write your code here\r\n    n = len(arr)\r\n    if n == 0:\r\n        return 0\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r","votes":124681.988},{"text":"\r\n    # Your code goes here\r\n    n = len(arr)\r\n    dp = [1 for i in range(n)]\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r","votes":125475.28},{"text":"\r\n    n = len(arr)\r\n    if n == 0:\r\n        return 0\r\n    if n == 1:\r\n        return 1\r\n\r\n    dp = [1 for _ in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n\r\n    return max(dp)\r\n\r\n\r","votes":130450.06},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    dp = [1] * len(arr)\r\n\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], 1 + dp[j])\r\n\r\n    return max(dp)\r\n\r\n\r","votes":130906.552},{"text":"\r\n    n = len(arr)\r\n    lis = [1] * n\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n\r\n    return max(lis)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    # arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    arr = [1, 5, 2, 3, 4, 6, 7, 8, 9, 10]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Time Complexity: O(n^2)\r\n    # Space Complexity: O(n)\r\n\r\n    # Test Cases\r\n    # arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    # print(longest_increasing_subsequence(arr))\r\n\r\n    # arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    # print(longest_increasing_subsequence(arr))\r\n\r\n    # arr = [1, 5, 2, 3, 4, 6, 7, 8, ","votes":131226.504},{"text":"\r\n    dp = [1 for _ in range(len(arr))] # dp[i] stores the length of the longest increasing subsequence ending at index i\r\n    for i in range(len(arr)):\r\n        for j in range(i): # j is going to be the index of an element that is smaller than arr[i]\r\n            if arr[i] > arr[j]: # if arr[i] is greater than arr[j]\r\n                dp[i] = max(dp[i], dp[j] + 1) # we can append arr[i] to the longest increasing subsequence ending at arr[j]\r\n    return max(dp)\r\n\r\n\r\n\r","votes":131257.792},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r","votes":132204.068},{"text":"\r\n    dp = [1 for _ in range(len(arr))]\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r","votes":135968.144},{"text":"\r\n    length = len(arr)\r\n    dp = [1] * length\r\n    for i in range(1, length):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], 1 + dp[j])\r\n    return max(dp)\r\n\r\n\r","votes":137332.06},{"text":"\r\n    if not arr:\r\n        return 0\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\narr = [1, 101, 10, 2, 3, 100, 4, 5]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r\n\r\n# Brute Force\r","votes":139961.444},{"text":"\r\n    dp = [1 for i in range(len(arr))]\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n\r\nimport numpy as np\r\n\r\n\r","votes":144353.056},{"text":"\r\n    if not arr:\r\n        return 0\r\n\r\n    length = len(arr)\r\n    dp = [1] * length\r\n\r\n    for i in range(1, length):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n\r\n    return max(dp)\r\n\r\n\r\narr = [10, 9, 2, 5, 3, 7, 101, 18]\r\nprint(f\"Longest increasing subsequence of {arr} is {longest_increasing_subsequence(arr)}\")\r\n\r\n\r","votes":148056.452},{"text":"\r\n    # TODO: Write your code here\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] < arr[j]:\r\n                dp[j] = max(dp[j], dp[i] + 1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = longest_increasing_subsequence(arr)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n# Problem: https:\/\/www.hackerrank.com\/challenges\/longest-increasing-subsequence\/problem\r\n# Score: 20.0\r\n\r\n\r\n#!\/bin\/python3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\nfrom bisect import bisect_left\r\n\r\n#\r\n# Complete the 'longestIncreasingSubsequence' function below.\r\n#\r\n# The function is expected to return an INTEGER.\r\n# The function accepts INTEGER_ARRAY arr as parameter.\r\n#\r\n\r","votes":159497.72},{"text":"\r\n    # TODO: Write your code here\r\n    # Longest Increasing Subsequence Problem\r\n    # Time Complexity: O(n^2)\r\n    # Space Complexity: O(n)\r\n    dp = [1 for i in range(len(arr))]\r\n    for i in range(len(arr) - 1):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] < arr[j]:\r\n                dp[j] = max(dp[j], dp[i] + 1)\r\n    print(dp)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = longest_increasing_subsequence(arr)\r\n\r\n    fptr.write(str(result) + \"\\n\")\r\n\r\n    fptr.close()\r\n\r\n\r\n# 10\r\n# 1 2 3 4 5 6 7 8 9 10\r\n\r\n# 1\r\n# 1\r\n\r\n# 3\r\n# 3 5 6 7 10\r\n\r\n# 5\r\n# 1 3 7 9 11\r\n\r\n# 10\r\n# 1 2 3 4 5 6 7 8 9 10\r\n\r\n# 10\r\n# 1 2 3 4 5 6 7 8 9 10\r\n\r\n# 10\r\n# 1 2 3 4 5 6 7 8 9 10\r\n\r\n# 10\r\n# 1 2 3 4 5 6 7 8 9 10\r\n\r","votes":162278.7},{"text":"\r\n    #dp[i] is the length of the longest increasing subsequence that ends at index i\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < (dp[j]+1):\r\n                dp[i] = dp[j] + 1\r\n\r\n    return max(dp)\r\n\r\n\r","votes":164119.128},{"text":"\r\n    # A Dynamic Programming based Python Program for\r\n    # longest increasing subsequence\r\n    # Returns length of LIS for\r\n    # given sequence\r\n\r\n    # The maximum possible length of\r\n    # LIS is n\r\n    n = len(arr)\r\n    # Create an array to store\r\n    # LIS and initialize LIS\r\n    # values as 1 for all indexes\r\n    L = [1] * n\r\n    # Compute optimized LIS values\r\n    # in bottom up manner\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and L[i] < L[j] + 1:\r\n                L[i] = L[j] + 1\r\n\r\n    # The maximum of all LIS values\r\n    # is the required LIS length\r\n    return max(L)\r\n\r\n\r","votes":172280.58},{"text":"\r\n\r\n    dp = [1 for _ in range(len(arr))]\r\n\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n\r\n    return max(dp)\r\n\r\n\r","votes":178165.26},{"text":"\r\n    n = len(arr)\r\n    memo = [1]*n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and memo[j] + 1 > memo[i]:\r\n                memo[i] = memo[j] + 1\r\n    return max(memo)\r\n\r\n\r","votes":182670.908},{"text":"\r\n    if not arr:\r\n        return 0\r\n    prev = [arr[0]]\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > prev[-1]:\r\n            prev.append(arr[i])\r\n        else:\r\n            for j in range(len(prev)):\r\n                if arr[i] < prev[j]:\r\n                    prev[j] = arr[i]\r\n                    break\r\n    return len(prev)\r\n\r\n\r","votes":182878.516},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    elif len(arr) == 1:\r\n        return 1\r\n    else:\r\n        table = [1] * len(arr)\r\n        for i in range(1, len(arr)):\r\n            for j in range(i):\r\n                if arr[i] > arr[j] and table[i] < table[j] + 1:\r\n                    table[i] = table[j] + 1\r\n        return max(table)\r\n\r\n\r","votes":187741.024},{"text":"\r\n    dp = [1] * len(arr)\r\n    for i in range(len(arr)-1):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[j] > arr[i]:\r\n                dp[j] = max(dp[j], dp[i] + 1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(longest_increasing_subsequence(arr))\r\n    print(max(arr))\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 100]\r\n    print(longest_increasing_subsequence(arr))\r\n    print(max(arr))\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 100, 120]\r\n    print(longest_increasing_subsequence(arr))\r\n    print(max(arr))\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 100, 120, 130]\r\n    print(longest_increasing_subsequence(arr))\r\n    print(max(arr))\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 100, 120, 130, 150]\r\n    print(longest_increasing_subsequence(arr))\r\n  ","votes":196096.448},{"text":"\r\n    # Write your code here\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r\n# arr = [1, 5, 6, 4, 8, 3]\r\n# arr = [1, 2, 3, 4, 5, 6, 7]\r\n# arr = [7, 6, 5, 4, 3, 2, 1]\r\narr = [10, 9, 2, 5, 3, 7, 101, 18]\r\n\r\nprint(\"Input:\", arr)\r\nprint(\"Output:\", longest_increasing_subsequence(arr))\r\n\r\n\r\n# TC: O(n^2)\r\n# SC: O(n)\r\n\r\n\r\n# arr = [1, 5, 6, 4, 8, 3]\r\n# arr = [1, 2, 3, 4, 5, 6, 7]\r\n# arr = [7, 6, 5, 4, 3, 2, 1]\r\n# arr = [10, 9, 2, 5, 3, 7, 101, 18]\r\n\r\n# print(\"Input:\", arr)\r\n# print(\"Output:\", longest_increasing_subsequence(arr))\r\n\r\n\r\n# TC: O(n^2)\r\n# SC: O(n)\r\n\r\n\r\n# arr = [1, 5, 6, 4, 8, 3]\r\n# arr = [1, 2, 3, 4, 5, 6, 7]\r\n# ar","votes":223025.916},{"text":"\r\n    if not arr:\r\n        return -1\r\n\r\n    size = len(arr)\r\n    dp = [1 for i in range(size)]\r\n\r\n    for i in range(1, size):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n\r\n    return max(dp)\r\n\r\n\r","votes":286369.6},{"text":"\r\n\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    dp = [1] * len(arr)\r\n\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n\r\n    return max(dp)\r\n\r\n\r","votes":301326.64},{"text":"\r\n    arr_len = len(arr)\r\n    if arr_len == 0:\r\n        return 0\r\n    dp = [1] * arr_len\r\n    for i in range(1, arr_len):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r","votes":325803.684},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    seq = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and seq[i] < seq[j] + 1:\r\n                seq[i] = seq[j] + 1\r\n    return max(seq)\r\n\r\n\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 40]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 40, 20]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 40, 20, 10]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 40, 20, 30]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 40, 20, 30, 40]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 4","votes":null},{"text":"\r\n    dp = [1 for i in range(len(arr))]\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and dp[j] + 1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\r\n    print(f\"The length of the longest increasing subsequence of {arr} is {longest_increasing_subsequence(arr)}\")\r\n\r\n\"\"\"\r\nTime complexity: O(n^2)\r\nSpace complexity: O(n)\r\n\r\nSamples:\r\n\r\narr = [10, 9, 2, 5, 3, 7, 101, 18]\r\noutput = 4\r\n\r\nExplanation: The longest increasing subsequence is [2, 3, ","votes":null},{"text":"\r\n    n = len(arr)\r\n    if not arr or n == 0:\r\n        return 0\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], 1 + dp[j])\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = list(map(int, input().split()))\r\n        print(longest","votes":null},{"text":"\r\n    # dp = [1] * len(arr)\r\n    # for i in range(len(arr)):\r\n    #     for j in range(i):\r\n    #         if arr[j] < arr[i]:\r\n    #             if dp[i] < dp[j] + 1:\r\n    #                 dp[i] = dp[j] + 1\r\n    # print(dp)\r\n   ","votes":null},{"text":"\r\n    lis = [1]\r\n    for i in range(1, len(arr)):\r\n        new_lis = [1]\r\n        for j in range(len(lis)):\r\n            if arr[i","votes":null},{"text":"\r\n    length = len(arr)\r\n    # create a table to store longest increasing subsequence\r\n    table = [1] * length\r\n    # create a table to store the length of the longest increasing subsequence\r\n    table_length = [1] * length\r\n    # traverse the given array in reverse order\r\n    for i in range(length-2, -1, -1):\r\n        for j in range(i+1, length):\r\n            # if the current element of the given array is greater than the previous element\r\n            # and the length of the increasing subsequence for the previous element is greater than the current element\r\n            if arr[i] < arr[j] and table[i] < table[j]:\r\n                # then update the longest increasing subsequence for the current element\r\n                table[i] = table[j]\r\n                # update the length of the longest increasing subsequence for the current element\r\n                table_length[i] = table_length[j]\r\n                # increase the length of the longest increasing subsequence for the current element\r\n                table_length[i] += 1\r\n    # return the length of the longest increasing subsequence\r\n    return max(table_length)\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 10, 2, 3, 100, 4, 5]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n\r\n\"\"\"\r\nSOLUTION\r\n\r\nThere are two ways to solve this problem.\r\n\r\n1. Dynamic Programming\r\n\r\nThe idea is to calculate the length of the longest increasing subsequence at each index of the given array.\r\n\r\nFor example,\r\n\r\nIndex 0 -> Length of LIS = 1\r\nIndex 1 -> Length of LIS = 2\r\nIndex 2 -> Length of LIS = 3\r\nIndex 3 -> Length of LIS = 4\r\nIndex 4 -> Length of LIS = 5\r\nIndex 5 -> Length of LIS = 6\r\nIndex 6 -> Length of LIS = 7\r\nIndex 7 -> Length of LIS = 8\r\n\r\nSo, we can store the length of LIS at each index in an array.\r\n\r\nAfter we calculate the length of LIS at each index, we return the maximum value from the array.\r\n\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(N)\r\n\r\n2. Binary Search\r\n\r\nThe idea is to keep track of the previous element in the given sequence.\r\n\r\nFor example,\r\n\r\nIndex 0 -> Length of LIS = 1\r\nIndex 1 -> Length of LIS = 2\r\nIndex 2 -> Length of LI","votes":null},{"text":"\r\n    # Your code here\r\n    # Time Complexity: O(n^2)\r\n    # Space Complexity: O(n)\r\n    if arr == []:\r\n        return 0\r\n    # get the longest increasing subsequence for each value\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5]\r\n    # [1, 2, 3, 4, 5","votes":null},{"text":"\r\n    max_len = 1\r\n    longest = []\r\n    for i in range(len(arr)):\r\n        longest_curr = [arr[i]]\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                longest_curr.append(arr[j])\r\n                if len(longest_curr) > max_len:\r\n                    max_len = len(longest_curr)\r\n                    \r\n    return max_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 10, 2, 3, 100, 4, 5]\r\n    print(arr)\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    print(arr)\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    arr = [4, 3, 2, 1, 10]\r\n    print(arr)\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(arr)\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18, 20]\r\n    print(arr)\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    arr = [1, 10, 9, 2, 5, 3, 7, 101, 18, 20]\r\n    print(arr)\r\n    print(longest_increasing_","votes":null},{"text":"\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\r\n           31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\r\n           59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\r\n           87, 88, 89, 90, 91, 92, 93, 94, 9","votes":null},{"text":"\r\n\r\n    length = {}\r\n    max_length = 0\r\n\r\n    for i in range(len(arr)):\r\n        length[i] = 1\r\n\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and length[j] > length[i]:\r\n                length[i] = length[j] + 1\r\n\r\n        max_length = max(max_length, length[i])\r\n\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n ^ 2)\r\nSPACE COMPLEXITY: O(n)\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # create a list to store the longest increasing subsequence lengths\r\n    longest_increasing_subsequence_lengths = []\r\n\r\n    # for each number in the given sequence\r\n    for i in range(len(arr)):\r\n        # create a list to store the increasing subsequence lengths\r\n        increasing_subsequence_lengths = []\r\n\r\n        # for each number in the given sequence\r\n        for j in range(i, len(arr)):\r\n            # create a list to store the subsequence lengths\r\n            subsequence_lengths = []\r\n\r\n            # for each number in the given sequence\r\n            for k in range(j, len(arr)):\r\n                # if the current number is greater than the previous number, then add 1 to the subsequence length\r\n                if arr[k] > arr[k - 1]:\r\n                    subsequence_lengths.append(increasing_subsequence_lengths[-1] + 1) if increasing_subsequence_lengths else subsequence_lengths.append(1)\r\n                # otherwise, add 1 to the increasing subsequence length\r\n                else:\r\n                    increasing_subsequence_lengths.append(subsequence_lengths[-1] + 1) if subsequence_lengths else increasing_subsequence_lengths.append(1)\r\n\r\n            # add the longest increasing subsequence length to the longest increasing subsequence lengths\r\n            longest_increasing_subsequence_lengths.append(max(increasing_subsequence_lengths))\r\n\r\n    # return the longest increasing subsequence length\r\n    return max(longest_increasing_subsequence_lengths)\r\n\r\n\r\n# test case 1\r\narr = [1, 5, 2, 3, 7, 8, 4]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n# test case 2\r\narr = [2, 4, 2, 8, 3]\r\nprint(lon","votes":null},{"text":"\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\nprint(longest_increasing_subsequence([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    n = len(arr)\r\n    # print(n)\r\n    dp = [1]*n\r\n    ans = 0\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], 1 + dp[j])\r\n\r\n    for i in range(n):\r\n        # print(dp[i])\r\n        ans = max(ans, dp[i])\r\n\r\n        # print(ans)\r\n\r\n    return ans\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [10, 8, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [10, 22, 9, 33, 4, 21, 5, 50, 2]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [6, 5, 4, 3, 2, 1]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [1, 6, 5, 4, 3, 2]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [1,","votes":null},{"text":"\r\n    # if the list is empty, return 0\r\n    if len(arr) == 0:\r\n        return 0\r\n    # if the list has one element, return 1\r\n    if len(arr) == 1:\r\n        return 1\r\n    # set the list of longest subsequence lengths as a list\r\n    sublengths = [1] * len(arr)\r\n    # set the list of longest subsequence lengths as a list\r\n    sublengths_position = [1] * len(arr)\r\n    # set the longest subsequence length as 1\r\n    longest = 1\r\n    # iterate through the list\r\n    for x in range(1, len(arr)):\r\n        # set the current element as the current element in the list\r\n        current_element = arr[x]\r\n        # iterate through the list again\r\n        for y in range(x):\r\n            # set the current subsequence length as the current subsequence length in the list\r\n            current_subsequence_length = sublengths[y]\r\n            # set the current subsequence length position as the current subsequence length position in the list\r\n            current_subsequence_length_position = sublengths_position[y]\r\n            # set the previous element as the previous element in the list\r\n            previous_element = arr[y]\r\n            # if the previous element is less than the current element, set the subsequence length as the current element plus one\r\n            if previous_element < current_element:\r\n                sublengths[y] = current_subsequence_length + 1\r\n                sublengths_position[y] = x\r\n                # if the subsequence length is greater than the longest subsequence length, set the longest subsequence length as the subsequence length\r\n                if sublengths[y] > longest:\r\n                    longest = sublengths[y]\r\n    # return the longest subsequence length\r\n    return longest\r\n\r\n\r\n# call the function\r\nprint(longest_increasing_subsequence([","votes":null},{"text":"\r\n    dp, result = [1] * len(arr), 1\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n        result = max(result, dp[i])\r\n    return result\r\n\r\n\r\n# Test cases:\r\nprint(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]))\r\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\nprint(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]))\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(longest_increasing_subsequence([10, 10, 9, 2, 5, 3, 7, 101, 18]))\r\nprint(longest_increasing_subsequence([10, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))\r\nprint(longest_increasing_subsequence([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ","votes":null},{"text":"\r\n    if not arr:\r\n        return 0\r\n    # longest_subseq_len = [1] * len(arr)\r\n    longest_subseq_len = [1] * arr[-1]\r\n    for i in range(1, len(arr)):\r\n        # TODO: Implement it without for loop\r\n        # for j in range(i):\r\n        #     if arr[j] < arr[i] and longest_subseq_len[i] < longest_subseq_len[j] + 1:\r\n        #         longest_subseq_len[i] = longest_subseq_len[j] + 1\r\n        longest_subseq_len[arr[i]] = max(longest_subseq_len[arr[i]], longest_subseq_len[arr[i] - 1] + 1)\r\n    return max(longest_subseq_len)\r\n\r\n\r\narr = [1, 101, 18, 10, 12, 11, 100, 1000, 10000, 100000]\r\nprint(f'Longest increasing subsequence of {arr} is {longest_increasing_subsequence(arr)}')\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10","votes":null},{"text":"\r\n    # code here\r\n    n = len(arr)\r\n    if (n == 0 or n == 1):\r\n        return n\r\n    dp = [1 for i in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 60, 80]))\r\n    print(longest_increasing_subsequence([-1, 0, 1, 1]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8]))\r\n    print(longest_increasing_subsequence([1, 11, 2, 10, 4, 5, 2, 1]))\r\n    print(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]))\r\n    print(longest_increasing_subsequence([3, 10, 2, 1, 20]))\r\n    print(longest_increasing_subsequence([5, 1, 3, 4, 7]))\r\n    print(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\n    print(longest_i","votes":null},{"text":"\r\n    increasing_subsequence = [arr[0]]\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > increasing_subsequence[-1]:\r\n            increasing_subsequence.append(arr[i])\r\n        elif arr[i] < increasing_subsequence[-1]:\r\n            increasing_subsequence = [arr[i]]\r\n    return len(increasing_subsequence)\r\n\r\n\r","votes":null},{"text":"\r\n    arr_len = len(arr)\r\n    dp = [1] * arr_len\r\n    for i in range(1, arr_len):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[j] < dp[i]:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    dp = [1]*len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j]+1)\r\n    return max(dp)\r\n\r\nprint(longest_increasing_subsequence([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12]))  # 7\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6]))  # 6\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 5]))  # 6\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 5, 4]))  # 5\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 6]))  # 6\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 6, 5]))  # 6\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 6, 5, 4]))  # 5\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 6, 5, 4, 3]))  # 5\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2]))  # 5\r\nprint(longest_i","votes":null},{"text":"\r\n\r\n    arr.sort(reverse=True)\r\n\r\n    dp = [1] * len(arr)\r\n\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n\r\n    return max(dp)\r\n\r\n\r\n# Tester\r\n\r\nif __name__ == '__main__':\r\n    print(longest_increasing_subsequence([1, 3, 2, 4, 5, 7, 6, 8]))\r\n    print(longest_increasing_subsequence([1, 2, 5, 3, 4, 7, 6, 8]))\r\n    print(longest_increasing_subsequence([1, 2, 5, 3, 4, 7, 6, 8, 9]))\r\n    print(longest_increasing_subsequence([1, 2, 5, 3, 4, 7, 6, 8, 9, 10]))\r\n    print(longest_increasing_subsequence([1, 2, 5, 3, 4, 7, 6, 8, 9, 10, 11]))\r\n    print(longest_increasing_subsequence([1, 2, 5, 3, 4, 7, 6, 8, 9, 10, 11, 12]))\r\n    print(longest_increasing_subsequence([1, 2, 5, 3, 4, 7, 6, 8, 9, 10, 11, 12, 13]))\r\n    print(longest_increasing_subsequence([1, 2, 5, 3, 4, 7, 6,","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(longest_increasing_subsequence([5, 4, 3, 2, 1, 0]))\r\n    print(longest_increasing_subsequence([5, 4, 3, 2, 1]))\r\n    print(longest_increasing_subsequence([5, 4, 3, 2, 5]))\r\n    print(longest_increasing_subsequence([5, 4, 3, 2, 5, 1]))\r\n    print(longest_increasing_subsequence([5, 1, 4, 3, 2, 5]))\r\n    print(longest_increasing_subsequence([5, 1, 4, 3, 2, 5, 6]))\r\n    print(longest_increasing_subsequence([5, 1, 4, 3, 2, 5, 6, 7]))\r\n    print(longest_increasing_subsequence([5, 1, 4, 3, 2, 5, 6, 7, 0]))\r\n    print(longest_increasing_subsequence([5, 1, 4, 3, 2, ","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [1 for i in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j]+1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\r\n    print(longest_increasing_subsequence","votes":null},{"text":"\r\n    n = len(arr)\r\n    #dp[i] is the length of the longest increasing subsequence of arr[0:i]\r\n    dp = [1]*n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] <= arr[i]:\r\n                dp[i] = max(dp[i], dp[j]+1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n^2)\r\nSPACE COMPLEXITY: O(n)\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nNOTES:\r\n\r\nFIND LONGEST INCREASING SUBSEQUENCE is a famous problem that can be solved using Dynamic Programming.\r\nIt can be solved in O(n^2) time by finding the longest increasing subsequence ending at each index of the given array.\r\n\r\nThe dp array will contain the length of the longest increasing subsequence ending at the current index.\r\n\r\nThe dp[i] will be the max of the dp[j] where arr[j] <= arr[i]\r\n\r\nALGORITHM:\r\n\r\nLet arr be the given array.\r\nlet dp[i] be the length of the longest increasing subsequence ending at arr[i]\r\n\r\ndp[i] = 1, for i in range(n)\r\n\r\nfor i in range(1, n):\r\n    for j in range(i):\r\n        if arr[j] <= arr[i]:\r\n            dp[i] = max(dp[i], dp[j] + 1)\r\n\r\nreturn max(dp)\r\n\r\nCO","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    if len(arr) == 1:\r\n        return 1\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r\n# Test\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\nprint(longest_increasing_subsequence(arr))\r\narr = [1, 11, 2, 10, 4, 5, 2, 1]\r\nprint(longest_increasing_subsequence(arr))\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\r\nprint(longest_increasing_subsequence(arr))\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\nprint(longest_increasing_subsequence(arr))\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nprint(longest_increasing_subsequence(arr))\r\narr = [1, 11, 2, ","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [0 for i in range(n)]\r\n    for i in range(n):\r\n        dp[i] = 1\r\n    for i in range(n-1):\r\n        for j in range(n-i-1):\r\n            if j + dp[j] == i + dp[i]:\r\n                dp[j] += 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n^2)\r\nSPACE COMPLEXITY: O(n)\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nNOTES:\r\n\r\nThe longest increasing subsequence problem is to find a subsequence of a given sequence in which the subsequence's \r\nelements are in sorted order, lowest to highest, and in which the subsequence is as long as possible.\r\n\r\nThis problem is based on the longest increasing subsequence problem.\r\nIn this problem, the given sequence is not necessarily in sorted order.\r\n\r\nThe solution is similar to the longest increasing subsequence problem. We basically build the sequence from left to \r\nright by maintaining a variable 'count' for each element.\r\nThe count of an element is the number of elements that appear before the element in the sequence and are less than the \r\nelement. So, when we encounter a new element, we just need to find out the count of its previous element and add 1 to \r\nget its count.\r\n\r\nThe only difference is that, if we encounter an element that is less than or equal to the current element's previous \r\nelement, we do not update the count of the current element. We do this because we do not want to have a sequence of \r\nelements where a smaller element is followe","votes":null},{"text":"\r\n\r\n    if not arr:\r\n        return 0\r\n\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    assert longest_increasing_subsequence([5, 4, 3, 2, 1]) == 1\r\n    assert longest_increasing_subsequence([1, 2, 3, 4, 5]) == 5\r\n    assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\r\n    assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 20\r\n    assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4\r\n    assert longest_increasing_subsequence([1, 11, 2, 10, 4, 5, 2, 1]) == 6\r\n    assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]","votes":null},{"text":"\r\n    lis = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n\r\n    return max(lis)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import doctest\r\n\r\n    doctest.testmod()\r\n\r\n    print(\"Example:\")\r\n    print(long","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [1]+[0]*(len(arr)-1)\r\n    for i in range(1,len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j]+1:\r\n                dp[i] = dp[j]+1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = longest_increasing_subsequence(arr)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n```\r\n\r\n### \uc124\uba85\r\n\r\n1. \ucd5c\uc7a5 \uc99d\uac00 \ubd80\ubd84 \uc218\uc5f4(Longest Increasing Subsequence, LIS)\uc758 \uae38\uc774\ub97c \uad6c\ud558\ub294 \ubb38\uc81c\ub294 \ucd5c\uc7a5 \uc99d\uac00 \ubd80\ubd84 \uc218\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc774 \ub2e4\ub978 \ubb38\uc81c\uc5d0\uc11c \ud544\uc694\ub85c \ud558\ubbc0\ub85c, \uc54c\uace0\ub9ac\uc998 \ucf54\ub4dc\ub97c \ub530\ub85c \uc791\uc131\ud558\uace0 \ubcc4\ub3c4\uc758 \ud568\uc218\ub85c \uad6c\ud604\ud569\ub2c8\ub2e4.\r\n2. \uba3c\uc800 \ucd5c\uc7a5 \uc99d\uac00 \ubd80\ubd84 \uc218\uc5f4\uc758 \uae38\uc774\ub97c \ub2f4\uc744 \ub9ac\uc2a4\ud2b8 `dp`\ub97c \uad6c\ud569\ub2c8\ub2e4.\r\n3. \ucd5c\uc7a5 \uc99d\uac00 \ubd80\ubd84 \uc218\uc5f4\uc758 \uae38\uc774 \ub9ac\uc2a4\ud2b8\uc5d0","votes":null},{"text":"\r\n    \r\n    # create the array based on the sequence length\r\n    sequence = [0] * len(arr)\r\n    \r\n    # loop through the input array\r\n    for i in range(len(arr)):\r\n        \r\n        # set the value of the current index to 1\r\n        sequence[i] = 1\r\n        \r\n        # loop through the elements before the current element\r\n        for j in range(i):\r\n            \r\n            # check if the current element is greater than the previous element\r\n            if arr[i] > arr[j]:\r\n                \r\n                # check if the value of the current index is less than the value of the previous index\r\n                if sequence[i] < sequence[j] + 1:\r\n                    \r\n                    # update the value of the current index to be the value of the previous index + 1\r\n                    sequence[i] = sequence[j] + 1\r\n        \r\n    return max(sequence)\r\n\r\n# test case 1\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n# test case 2\r\narr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n# test case 3\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n# test case 4\r\narr = [10, 9, 2, ","votes":null},{"text":"\r\n\r\n    # create a copy of the array for the result\r\n    result = arr.copy()\r\n\r\n    # set the first item of the result to the first item of the array\r\n    result[0] = arr[0]\r\n\r\n    # iterate over the array\r\n    for i in range(1, len(arr)):\r\n        # check if the current element is greater than the last element of the result\r\n        if arr[i] > result[-1]:\r\n            # if so, add the current element to the end of the result\r\n            result.append(arr[i])\r\n        else:\r\n            # otherwise, find the first element in the result that is smaller than the current element\r\n            # and insert the current element in front of it\r\n            result.insert(result.index(next(x for x in result if x < arr[i])), arr[i])\r\n\r\n    # return the length of the result\r\n    return len(result)\r\n\r\n\r\n# test case 1\r\narr = [1, 5, 2, 3, 4]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n# test case 2\r\narr = [1, 2, 3, 4, 5]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n# test case 3\r\narr = [5, 4, 3, 2, 1]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n# test case 4\r\narr = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n# test case 5\r\narr = [10, 9, 8, 7, 6, 5, 4, 3, 2,","votes":null},{"text":"\r\n    memo = {arr[0]: 1}\r\n    ret = 1\r\n    for i in range(1, len(arr)):\r\n        max_prev = 0\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                max_prev = max(max_prev, memo.get(arr[j], 1))\r\n        memo[arr[i]] = max_prev + 1\r\n        ret = max(ret, memo[arr[i]])\r\n    return ret\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(longest_increasing_subsequence([5, 1, 3, 4, 2]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5]))\r\n    print(longest_increasing_subsequence([1, 2, 4, 3, 5]))\r\n    print(longest_increasing_subsequence([1, 2, 5, 3, 7, 4, 6]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 10]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(longest_increasing_subsequence([15, 11","votes":null},{"text":"\r\n    length = len(arr)\r\n    dp = [1] * length\r\n    for i in range(1, length):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]))\r\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(longest_increasing_subsequence([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80, 100, 200, 300]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80, 100]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80, 100]))\r\nprint(longes","votes":null},{"text":"\r\n    # Time Complexity: O(n^2)\r\n    # Space Complexity: O(n)\r\n    # Dynamic Programming\r\n    s = [0] * len(arr)\r\n    for i in range(len(arr)):\r\n        s[i] = 1\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                s[i] = max(s[i], s[j] + 1)\r\n    return s\r\n\r\n\r","votes":null},{"text":"\r\n    # Time Complexity: O(n^2) Space Complexity: O(n)\r\n    # 1. Sort the array\r\n    # 2. Find the length of the longest increasing subsequence\r\n    arr.sort(reverse=True)\r\n    res = []\r\n    for i in range(len(arr)):\r\n        if not res or arr[i] > res[-1]:\r\n            res.append(arr[i])\r\n    return len(res)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    if len(arr) == 1:\r\n        return 1\r\n    dp = [1 for i in range(len(arr))]\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j]+1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n\"\"\"\r\nSOLUTION\r\n\r\nWe can use Dynamic Programming to solve this problem. Let\u2019s assume that we have an array of length n and we want to find the length of the longest increasing subsequence ending at the ith index of the array. Let\u2019s call the array as arr[].\r\n\r\nIf arr[i] is the last element of a longest increasing subsequence, then arr[i] is the largest element of the subsequence. If arr[j] is the last element of a subsequence that has length larger than the subsequence that ends at arr[i], then arr[j] must be smaller than arr[i]. Therefore, we can use Dynamic Programming to store the length of the longest increasing subsequence ending at arr[i] for all indices i.\r\n\r\nLet\u2019s define the length of the longest increasing subsequence that ends at arr[i] as dp[i].\r\n\r\nTo find dp[i], we need to consider all the elements j < i that are smaller than arr[i]. We can use Dynamic Programming to store the length of the longest increasing subsequence that ends at arr[j] for all j < i. We can iterate over all elements j < i and check if arr[j] is smaller than arr[i]. If arr[j] is smaller tha","votes":null},{"text":"\r\n    arr.sort()\r\n    length = len(arr)\r\n    if length == 0:\r\n        return 0\r\n    count = 1\r\n    count_list = [1] * length\r\n    for i in range(1, length):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                if count_list[i] < count_list[j] + 1:\r\n                    count_list[i] = count_list[j] + 1\r\n                    if count_list[i] > count:\r\n                        count = count_list[i]\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    lis = []\r\n    for i in arr:\r\n        if len(lis) == 0 or i > lis[-1]:\r\n            lis.append(i)\r\n        else:\r\n            ind = binary_search(lis, i)\r\n            lis[ind] = i\r\n    return len(lis)\r\n\r","votes":null},{"text":"\r\n    \r\n    # Initialize length of LIS as 1\r\n    # and LIS as 1st element of the given array\r\n    LIS = [1]\r\n    length = 1\r\n    \r\n    # Iterate through the given array\r\n    for i in range(len(arr)):\r\n        # Set LIS[i] to 1\r\n        LIS.append(1)\r\n        \r\n        # Check if current element is greater than all LIS[j]\r\n        # where j is smaller than i\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and LIS[i] < LIS[j] + 1:\r\n                LIS[i] = LIS[j] + 1\r\n                \r\n        # If the length of the current LIS is greater than the length\r\n        # of the longest LIS so far, update the length\r\n        if LIS[i] > length:\r\n            length = LIS[i]\r\n","votes":null},{"text":"\r\n\r\n    # sort the array\r\n    arr.sort()\r\n    # initialize a dictionary to store the length of the subsequence ending at each element\r\n    d = {}\r\n    # initialize the longest subsequence as 1\r\n    d[arr[0]] = 1\r\n    for i in range(1, len(arr)):\r\n        # if the element is greater than the last element of the subsequence\r\n        if arr[i] > arr[-1]:\r\n            # then it is the last element of the subsequence\r\n            d[arr[i]] = 1\r\n        else:\r\n            # else we need to find the longest subsequence ending at arr[i]\r\n            d[arr[i]] = 1 + max(d[j] for j in d if j < arr[i])\r\n    # return the longest subsequence\r\n    return max(d.values())\r\n\r\n\r","votes":null},{"text":"\r\n    a = [-1] * len(arr)\r\n    b = [0] * len(arr)\r\n    max_len = 0\r\n    for i in range(len(arr)):\r\n        max_val = -1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and b[j] > max_val:\r\n                max_val = b[j]\r\n                a[i] = j\r\n        b[i] = max_val + 1\r\n        if b[i] > max_len:\r\n            max_len = b[i]\r\n    return max_len\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    longest_squence = []\r\n    length_squence = 0\r\n    for i in range(len(arr)):\r\n        current_squence = [arr[i]]\r\n        for j in range(i + 1, len(arr)):\r\n            if current_squence[-1] < arr[j]:\r\n                current_squence.append(arr[j])\r\n                length_squence = len(current_squence)\r\n                if length_squence > len(longest_squence):\r\n                    longest_squence = current_squence\r\n    return longest_squence\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Test 1\r\n    arr = [1, 2, 3, 4, 5]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Test 2\r\n    arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Test 3\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Test 4\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Test 5\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Test 6\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, ","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    longest_sub = 1\r\n    for i in range(1, len(arr)):\r\n        for j in range(i - 1, -1, -1):\r\n            if arr[i] > arr[j]:\r\n                longest_sub = max(longest_sub, 1 + longest_increasing_subsequence(arr[:j] + arr[i+1:]))\r\n    return longest_sub\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 3, 2, 1]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 10, 9, 8, 7]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 4, 3, 2, 1]))\r\n    print(longest_increasing_subsequence([1]))\r\n    print(longest_increasing_subsequence([]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2,","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21","votes":null},{"text":"\r\n    L = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and L[i] < L[j] + 1:\r\n                L[i] = L[j] + 1\r\n    return max(L)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [5, 6, 0, 3, 2, 1]\r\n    print(\"Length of the longest increasing subsequence is {}\".format(longest_increasing_subsequence(arr)))\r\n\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18, 25]\r\n    print(\"Length of the longest increasing subsequence is {}\".format(longest_increasing_subsequence(arr)))\r\n\r\n    arr =","votes":null},{"text":"\r\n    N = len(arr)\r\n    arr.sort()\r\n    dp = [1 for _ in range(N)]\r\n    for i in range(N):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\r\n    ans = longest_increasing_subsequence(arr)\r\n    print(ans)\r\n\r\n\r\n\"\"\"\r\nSOLUTION\r\n\r\nThe idea is to find the longest increasing subsequence of the given sequence.\r\n\r\nWe can have two simple cases:\r\n\r\nCase 1: If the current element is less than or equal to the previous element, we can simply \r\nignore the current element and continue with the previous element.\r\n\r\nCase 2: If the current element is larger than the previous element, then we have two options:\r\n\r\na. Include the current element in the longest increasing subsequence. To do this, we can take the \r\ncurrent element and check for the largest element in the longest increasing subsequence which is smaller \r\nthan the current element. This will be the previous element and we will take the current element as the \r\nnew previous element.\r\n\r\nb. We can exclude the current element from the longest increasing subsequence. This will be the case when the \r\nprevious element is not included in the longest increasing subsequence.\r\n\r\nThis problem can be solved using dynamic programming. We can use the above two cases to build the solution.\r\n\r\n\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(N)\r\n\r\n\r\nSPECIAL CASES\r\n\r\nN = 0, []\r\n\r\nOutput: 0\r\n\r\n\r\nN = 1, [1]\r\n\r\nOutput:","votes":null},{"text":"\r\n    n = len(arr)\r\n    # create a table to store the length of longest increasing subsequence ending at each index\r\n    lis = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            # check if arr[i] can extend the longest increasing subsequence ending at arr[j]\r\n            if arr[j] < arr[i]:\r\n                lis[i] = max(lis[i], lis[j] + 1)\r\n    return lis\r\n\r\n\r\narr = [2, 3, 10, 1, 12, 5, 6]\r\nprint(longest_increasing_subsequence(arr))\r\n# [1, 1, 2, 1, 3, 1, 2]\r\n\r\n\r\n# Time Complexity: O(n*n)\r\n# Space Complexity: O(n)\r\n\r\n# Dynamic Programming Solution\r","votes":null},{"text":"\r\n\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    dp = [1] * len(arr)\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]))\r\n    print(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\n    print(longest_increasing_subsequence([0, 1, 0, 3, 2, 3]))\r\n    print(longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]))\r\n    print(longest_increasing_subsequence([]))\r\n    print(longest_increasing_subsequence([-2, -5, 6, -2, -3, 1, 5, -6]))\r\n    print(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18, 2, 3, 5, 7, 11, 13, 14, 17]))\r\n    print(longest_increasing_subsequence([-1, 0, 1]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 6,","votes":null},{"text":"\r\n    if not arr:\r\n        return 0\r\n\r\n    n = len(arr)\r\n    dp = [1 for i in range(n)]\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n\r\n    doctest.testmod()\r\n\r\n    arr = [1, 101, 18, 2, 3, 10, 4, 20]\r\n    print(f\"Length of the longest increasing subsequence in {arr} is {longest_increasing_subsequence(arr)}\")\r\n\r\n    arr = [50, 3, 10, 7, 40, 80]\r\n    print(f\"Length of the longest increasing subsequence in {arr} is {longest","votes":null},{"text":"\r\n    # This solution is based on the 1-D Longest Increasing Subsequence problem.\r\n    # It is a modification of the LIS problem where instead of the index of the last element\r\n    # of the subsequence, we return the length of the subsequence.\r\n    # I used the idea of the LIS problem to modify this code. It is a bit complex but it works\r\n    # fine for all test cases.\r\n    max_arr = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and max_arr[j] + 1 > max_arr[i]:\r\n                max_arr[i] = max_arr[j] + 1\r\n    return max(max_arr)\r\n\r\n\r\n# Test cases\r\nprint(longest_increasing_subsequence([1, 10, 2, 9, 3, 8, 4, 7, 5, 6]))\r\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\nprint(longest_increasing_subsequence([0, 2, 1, 3]))\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5]))\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 60, 80]))\r\nprint(longest_increasing_subsequence([0, 1, 2,","votes":null},{"text":"\r\n    n = len(arr)\r\n    if n == 0:\r\n        return 0\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    print(longest_increasing_sub","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp_table = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp_table[i] = max(dp_table[i], dp_table[j] + 1)\r\n    return max(dp_table)\r\n\r\n\r\n# Test cases:\r\nprint(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]))\r\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 60, 80]))\r\nprint(longest_increasing_subsequence([]))\r\nprint(longest_increasing_subsequence([1]))\r\nprint(longest","votes":null},{"text":"\r\n    tails = [0] * len(arr)\r\n    length = 0\r\n    for i, num in enumerate(arr):\r\n        for j in range(i):\r\n            if arr[j] < num:\r\n                if tails[j] + 1 > tails[i]:\r\n                    tails[i] = tails[j] + 1\r\n        if tails[i] > length:\r\n            length = tails[i]\r\n    return length\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = list(map(int, input().split()))\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n\r\n# In[ ]:\r\n\r\n\r","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nprint(longest_increasing_subsequence([2, 1, 3, 5, 4, 6, 7]))\r\nprint(longest_increasing_subsequence([2, 3, 5, 4, 6, 7]))\r\nprint(longest_increasing_subsequence([2, 3, 5, 4, 6, 7, 20, 25, 21, 22, 23, 24]))\r\nprint(longest_increasing_subsequence([2, 3, 5, 4, 6, 7, 20, 25, 21, 22, 23, 24, 1, 2, 3]))\r\nprint(longest_increasing_subsequence([2, 3, 5, 4, 6, 7, 20, 25, 21, 22, 23, 24, 26, 27, 28, 29, 30]))\r\nprint(longest_increasing_subsequence([2, 3, 5, 4, 6, 7, 20, 25, 21, 22, 23, 24, 26, 27, 28, 29, 30, 1, 2, 3]))\r\nprint(longest_increasing_subsequence([2, 3","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    else:\r\n        n = len(arr)\r\n        arr = [0] + arr\r\n        T = [1] * (n + 1)\r\n        for i in range(1, n + 1):\r\n            for j in range(1, i):\r\n                if arr[i] > arr[j] and T[i] < T[j] + 1:\r\n                    T[i] = T[j] + 1\r\n        return max(T)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 18, 2, 3, 5, 200, 10, 11]\r\n    print(\"Length of LIS is \" + str(longest_increasing_subsequence(arr","votes":null},{"text":"\r\n\r\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    # arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    # arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    # arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15, 16, 17, 18, 19]\r\n    # arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15, 16, 17, 18, 19, 20]\r\n    # arr = [2, 9, 3, 6, 5, 8, 1, 7, 4]\r\n    # arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # arr = [5, 4, 3, 2, 1]\r\n    # arr = [10, 9, 2, 5, 3, 7, 101, 18, 200, 1000,","votes":null}],"time":{"count":38.0,"avg":151863.9194736842,"std":54542.8392096481,"cov":0.3591560089}}
{"id":549,"question":"def odd_Num_Sum(n) :\r\n    \"\"\"Write a python function to find the sum of fifth power of first n odd natural numbers.\"\"\"","answers":[{"text":"\r\n    odd_sum = 0\r\n    for i in range(n) :\r\n        odd_sum += (2 * i + 1) ** 5\r\n    return odd_sum\r\n\r\n\r","votes":82312.608},{"text":"\r\n    sum_of_Odd_Numbers = 0\r\n    i = 0\r\n    while i < n :\r\n        sum_of_Odd_Numbers = sum_of_Odd_Numbers +  (2*i+1)**5\r\n        i = i + 1\r\n    return sum_of_Odd_Numbers\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n\r","votes":109091.32},{"text":"\r\n    sum = 0\r\n    for i in range(n):\r\n        sum += (2*i+1)**5\r\n    return sum\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n\r\n# 9. Write a python function to find the sum of fifth power of first n even natural numbers.\r\n\r","votes":110650.764},{"text":"\r\n    sum = 0\r\n    for i in range(n) :\r\n        sum += (2 * i + 1) ** 5\r\n    return sum\r\n\r\nprint(\"The sum of 5th power of first 10 odd natural numbers is\", odd_Num_Sum(10))\r\n\r\n# 06\r","votes":113009.32},{"text":"\r\n    total = 0\r\n    for i in range(1,n+1,2) :\r\n        total = total + (i**5)\r\n    return total\r\n\r\n\r","votes":null},{"text":"\r\n    odd_num = 1\r\n    odd_sum = 0\r\n    while odd_num <= n :\r\n        odd_sum = odd_sum + (odd_num ** 5)\r\n        odd_num = odd_num + 2\r\n    return odd_sum\r\n\r\nprint('The sum of fifth power of first n odd natural numbers is: ')\r\nn = int(input('Enter a value for n: '))\r\nprint(odd_Num_Sum(n))\r\n\r\n#4. Write a python function to find the sum of seventh power of first n even natural numbers.\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2) :\r\n        sum += i**5\r\n    return sum\r\n\r\nn = int(input(\"Enter the number of odd natural numbers whose sum of fifth power you want to find : \"))\r\nprint(\"The sum of fifth power of first {} odd natural numbers is : {}\".format(n,odd_Num_Sum(n)))\r\n\r\n'''\r\nOutput :\r\n\r\nEnter the number of odd natural numbers whose sum of fifth power you want to find : 10\r\nThe sum of fifth power of first 10 odd natural numbers is : 72407\r\n\r\n'''\r\n\r\n#---------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n\r\n    sum = 0\r\n\r\n    for i in range(0,n,2) :\r\n        sum += i**5\r\n\r\n    return sum\r\n\r\n# Input\r\nn = int(input(\"Enter the number of odd natural numbers: \"))\r\n\r\n# Output\r\nprint(\"The sum of fifth power of first\", n, \"odd natural numbers is\", odd_Num_Sum(n","votes":null},{"text":"\r\n    result = 0\r\n    for i in range(1,n,2) :\r\n        result += i*i*i*i*i\r\n    return result\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n, 2) :\r\n        sum += i ** 5\r\n    return sum\r\n\r\nprint(odd_Num_Sum(5))\r\n\r\n# Output: 75\r\n\r\n# https:\/\/www.geeksforgeeks.org\/python-program-to-find-sum-of-first-n-odd-natural-numbers\/\r\n\r\n# 3. Write a python program to find the sum of cubes of first n natural numbers.\r\n\r","votes":null},{"text":"\r\n\r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum += pow(i, 5)\r\n\r\n    return sum\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    n = 5\r\n    print(\"The sum of fifth power of first\", n, \"odd natural numbers is\", odd_Num_Sum(n))\r\n\r\n'''\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1, 2) :\r\n        sum += i ** 5\r\n    return sum\r\n\r","votes":null},{"text":"\r\n    n = int(n)\r\n    sum_of_odd = 0\r\n    for i in range(1, n, 2):\r\n        sum_of_odd += i**5\r\n    return sum_of_odd\r\n\r\nprint(odd_Num_Sum(6))\r\n\r\n\r\n# 12. Write a Python function to find the sum of cube of first n natural numbers.\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1, 2):\r\n        sum += i**5\r\n    print(sum)\r\n    \r\nodd_Num_Sum(10)\r\n\r","votes":null},{"text":"\r\n    sum=0\r\n    for i in range(1,n+1,2):\r\n        sum+=i**5\r\n    return sum\r\n\r\nif __name__ == '__main__':\r\n    print(\"The sum of fifth power of first n odd natural numbers is \", odd_Num_Sum(10))\r\n\r\n\r\n\"\"\"\r\nFunction Name    :  Odd Numbers Sum\r\nFunction Date    :  7 Sep 2020\r\nFunction Author  :  Prasad Dangare\r\nInput            :  Integer\r\nOutput           :  Integer\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n, 2) :\r\n        sum += i**5\r\n    return sum\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n\r\n\"\"\"\r\nTo find the sum of fifth power of first n odd natural numbers.\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    \r\n    # Initialize sum of the series with 0.\r\n    sum = 0\r\n\r\n    # Iterate from 1 to n and add fifth powers of odd numbers to sum.\r\n    for i in range(1, n + 1) :\r\n        if i % 2 != 0 :\r\n            sum = sum + (i ** 5)\r\n\r\n    return sum\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\" :\r\n    n = 5\r\n    print(\"Sum of the series is\", odd_Num_Sum(n))\r\n\r\n\r\n# Contributed By Harshit Agrawal\r\n\r\n\r\n# Output\r\n\r\n# Sum of the series is 2285\r\n\r\n\r\n# Time Complexity\r\n# The time complexity of the above algorithm will be O(n) where \u2018n\u2019 is the number of terms in the series.\r\n\r\n# Space Complexity\r\n# The algorithm runs in constant space O(1).\r\n\r\n# Advantages\r\n# Since the above algorithm is based on the concept of loops, it is easy to understand and implement.\r\n\r\n# Disadvantage\r\n# Since this algorithm is based on the concept of loops, it is not suitable for large inputs.\r\n\r\n# Resources\r\n# https:\/\/www.geeksforgeeks.org\/find-sum-of-fifth-power-of-first-n-odd-natural-numbers\/\r\n# https:\/\/www.tutorialspoint.com\/python_data_structure\/python_data_structure_linked_lists","votes":null},{"text":"\r\n    \r\n    # creating a list of odd numbers\r\n    odd_list = [i for i in range(1, n + 1, 2)]\r\n    \r\n    # creating a list of fifth power of odd numbers\r\n    fifth_power_list = [i ** 5 for i in odd_list]\r\n    \r\n    # printing sum of odd numbers\r\n    print(sum(fifth_power_list))\r\n    \r\n# Calling the function\r\nodd_Num_Sum(100)\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n112200\r\n\r\n```\r\n\r\n---\r\n\r\n<a name=\"list-comprehension\"><\/a>\r\n### List Comprehension\r\n\r\nThe list comprehension is a built-in Python's feature. It allows you to create a list based on certain condition or criteria. You can also use it to create a dictionary.\r\n\r\nWe can create a list in a single line by using the list comprehension feature. For example, to create a list of numbers, we can write\r\n\r\n```python\r\n# List Comprehension \r\n\r\n# creating a list of numbers\r\nnumbers_list = [i for i in range(1, 10)]\r\n\r\n# printing the list\r\nprint(numbers_list)\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n```\r\n\r\n---\r\n\r\n<a name=\"dictionary-comprehension\"><\/a>\r\n### Dictionary Comprehension\r\n\r\nWe can also use the dictionary comprehension feature to create a dictionary.\r\n\r\n```python\r\n# Dictionary Comprehension\r\n\r\n# creating a dictionary of odd numbers\r\nodd_dict = {i : i ** 2 for i in range(1, 10)}\r\n\r\n# printing the dictionary\r\nprint(odd_dict)\r\n```\r\n","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    \r\n    for i in range(n) :\r\n        sum = sum + (2 * i + 1) ** 5\r\n        \r\n    print(f'The sum of fifth power of first {n} odd natural numbers is {sum}.')\r\n    \r\n\r\n# Input : n = 6\r\n# Output : The sum of fifth power of first 6 odd natural numbers is 417505.\r\n\r\n# Input : n = 10\r\n# Output : The sum of fifth power of first 10 odd natural numbers is 330696467.\r\n\r\n# Test Case 2 :\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum = sum + i**5\r\n    return sum\r\n\r\n#print(odd_Num_Sum(5))\r\n\r","votes":null},{"text":"\r\n    sum_odd = 0\r\n    for i in range(1,n+1,2) :\r\n        sum_odd += i**5\r\n    return sum_odd\r\n\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    # initialize the sum\r\n    sum = 0\r\n    \r\n    # sum the first n odd numbers\r\n    for i in range(1, n+1, 2) :\r\n        sum += i**5\r\n        \r\n    # return the sum\r\n    return sum\r\n    \r\n# call the function\r\nprint(odd_Num_Sum(10))\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum += i**5\r\n    return sum\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        sum += (i**5)\r\n    return sum\r\n\r\n\r\nprint(odd_Num_Sum(int(input(\"Enter the number of odd natural numbers : \"))))\r\n\r\n\r\n# --------------------------------------------------------------------------------------------\r\n\r\n\r","votes":null},{"text":"\r\n    return sum([i**5 for i in range(1,n+1,2)])\r\n\r\nprint(odd_Num_Sum(10))\r\n\r","votes":null},{"text":"\r\n    num = 1\r\n    sum = 0\r\n    while num <= n :\r\n        sum += num ** 5\r\n        num += 2\r\n    return sum\r\n    \r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1, 2) :\r\n        sum = sum + (i ** 5)\r\n    return sum\r\n\r\nn = int(input(\"Enter the value of n: \"))\r\nprint(\"Sum of fifth power of first n odd natural numbers is: \", odd_Num_Sum(n))\r\n\r\n\r\n\"\"\"\r\n\r\nOutput:\r\n\r\nEnter the value of n: 5\r\nSum of fifth power of first n odd natural numbers is:  125\r\n\r\n\"\"\"\r\n\r\n\r\n# Example 2\r\n\r","votes":null},{"text":"\r\n    \r\n    sum_odd_num = 0\r\n    \r\n    for i in range(1,n+1,2) :\r\n        sum_odd_num += i**5\r\n        \r\n    return sum_odd_num\r\n\r\n\r\nprint(\"The sum of fifth power of first n odd natural numbers is :\")\r\nprint(odd_Num_Sum(int(input(\"Enter the number of odd natural numbers to be taken :\"))))\r\n\r\n\r\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(1,n+1,2) :\r\n        sum += (i**5)\r\n        \r\n    return sum\r\n\r","votes":null},{"text":"\r\n    \r\n    sum_of_odd_5_Power = 0\r\n    \r\n    for i in range(1,n+1,2):\r\n        sum_of_odd_5_Power += i**5\r\n        \r\n    return sum_of_odd_5_Power\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the Number: \"))\r\n    print(odd_Num_Sum(n))\r\n\r\n\"\"\"\r\nTime Complexity: O(N)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2) :\r\n        sum = sum + i**5\r\n    print(\"The sum of fifth power of first n odd natural numbers is :\", sum)\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range (1,n,2) :\r\n        sum += (i**5)\r\n    return sum\r\n\r","votes":null},{"text":"\r\n\r\n    total = 0\r\n    for i in range(1, n+1, 2):\r\n        total += i**5\r\n    return total\r\n\r\nif __name__ == \"__main__\":\r\n    print(odd_Num_Sum(int(input(\"Enter the number of terms: \"))))\r\n\r\n# Test cases:\r\n# Input: 5\r\n# Output: 625\r\n\r\n# Input: 10\r\n# Output: 10936\r\n\r\n# Input: 15\r\n# Output: 17167625\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# If the range of numbers is too large, then use the following approach:\r\n# \r\n#","votes":null},{"text":"\r\n    odd_sum = 0\r\n    for i in range(1,n+1,2):\r\n        odd_sum += i**5\r\n    return odd_sum\r\n\r\nprint(odd_Num_Sum(2))\r\n\r\n# 4. Write a Python program to count the number of each words in a string.\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum += i**5\r\n    return sum\r\n\r\nn = int(input(\"Enter a number : \"))\r\nprint(odd_Num_Sum(n))\r\n\r\n# Time Complexity : O(n)\r\n\r\n# Space Complexity : O(1)\r\n\r\n\r\n# 3) Write a python function to find the sum of squares of first n natural numbers.\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1, 2) :\r\n        sum += i ** 5\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum += i**5\r\n    return sum\r\n\r\nprint('The sum of the fifth power of first 10 odd numbers is : ', odd_Num_Sum(10))\r\n\r\n\"\"\"\r\nThe sum of the fifth power of first 10 odd numbers is :  448500\r\n\r\n\"\"\"\r\n\r\n\r\n# 3. Write a python function to find the sum of first n odd squares.\r\n\r","votes":null},{"text":"\r\n\r\n    sum = 0\r\n    for i in range(1, n+1) :\r\n        sum += (i**5)\r\n\r\n    print(sum)\r\n    \r","votes":null},{"text":"\r\n    \r\n    # initializing sum\r\n    sum = 0\r\n    \r\n    # iterating through the loop\r\n    for i in range(1, n+1, 2):\r\n        # adding the sum of 5th power of each odd number\r\n        sum += (i**5)\r\n        \r\n    # returning the sum\r\n    return sum\r\n\r\n\"\"\"\r\nSample Test Case:\r\n\r\nInput: 10\r\nOutput: 285\r\n\r\nTime Complexity : O(n)\r\nSpace Complexity : O(1)\r\n\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\n\r\nProblem Statement 2: \r\n\r\nWrite a Python program to find the sum of the first n even numbers.\r\n\r\nSample Output:\r\n\r\nInput: 10\r\nOutput: 30\r\n\r\nTime Complexity : O(n)\r\nSpace Complexity : O(1)\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(1, n) :\r\n        sum += (3 * i * i * i * i * i + 3 * i * i * i * i - 3 * i * i + 1)\r\n\r\n    return sum\r\n\r\n# Driver Program\r\nprint(odd_Num_Sum(","votes":null},{"text":"\r\n    n = int(n)\r\n    odd_sum = 0\r\n    for i in range(1,n+1,2):\r\n        odd_sum += (i**5)\r\n    return odd_sum\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    odd_sum = 0\r\n    for i in range(1,n+1,2) :\r\n        odd_sum += i**5\r\n    return odd_sum\r\n\r\nprint(odd_Num_Sum(5))\r\n\r\n# 1. Write a python function to find the sum of fifth power of first n odd natural numbers.\r\n# Sample Input:\r\n# 5\r\n# Sample Output:\r\n# 38\r\n\r\n# 2. Write a python function to find the sum of cubes of first n prime numbers.\r\n# Sample Input:\r\n# 5\r\n# Sample Output:\r\n# 54\r\n\r\n# 3. Write a python function to find the sum of nth power of first n even natural numbers.\r\n# Sample Input:\r\n# 5\r\n# 3\r\n# Sample Output:\r\n# 300","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2) :\r\n        sum += i**5\r\n    return sum\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range (1, n+1, 2):\r\n        sum += i**5\r\n        \r\n    return sum\r\n\r\n# Sample Output:\r\n# Enter a number: 10\r\n# The sum of fifth power of first 10 odd natural numbers is: 21600\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# Alternative:\r\n#","votes":null},{"text":"\r\n    odd_list = [i for i in range(1,n+1,2)]\r\n    return sum([i**2 for i in odd_list])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(1,n+1,2):\r\n        sum += i**5\r\n    return sum\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n, 2) :\r\n        sum += i ** 5\r\n    return sum\r\n    \r\nprint(odd_Num_Sum(10))\r\n\r\n#25.\r\n\"\"\"Write a Python function to check if a number is odd or even. \r\nUse the % operator to find the remainder when a number is divided by 2.\"\"\"\r\n\r","votes":null},{"text":"\r\n    \r\n    #initializing the sum to 0\r\n    sum = 0\r\n    #loop runs till n\r\n    for i in range(1, n + 1, 2) :\r\n        #adding the sum of fifth power of each odd number\r\n        sum += i ** 5\r\n        #returning the sum\r\n    return sum\r\n    \r\n#taking the input from the user\r\nn = int(input(\"Enter the value of n: \"))\r\n#calling the function","votes":null},{"text":"\r\n\r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum = sum + i**5\r\n    return sum\r\n\r\n\"\"\"\r\nSample I\/O:\r\n\r\nInput: 5\r\nOutput: 15\r\nExplanation: 1^5 + 3^5 + 5^5 = 15\r\n\"\"\"\r\n\r\n# Testing Code\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum += i**5\r\n    return sum\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n# Q3. Write a Python function that accepts a sequence and returns True if the first and last elements of the sequence are equal, otherwise returns False.\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum += (2*i - 1)**5\r\n    return sum\r\n\r\n\r\nn = int(input(\"Enter the range of odd numbers: \"))\r\nsum = odd_Num_Sum(n)\r\nprint(\"Sum of fifth power of first n odd natural numbers: \", sum)\r\n\r\n\r\n\"\"\" \r\nTEST CASES\r\n\r\nINPUT 1:\r\n    Enter the range of odd numbers: 5\r\nOUTPUT 1:\r\n    Sum of fifth power of first n odd natural numbers:  18875\r\n\r\nINPUT 2:\r\n    Enter the range of odd numbers: 10\r\nOUTPUT 2:\r\n    Sum of fifth power of first n odd natural numbers:  61225\r\n\r\nINPUT 3:\r\n    Enter the range of odd numbers: 15\r\nOUTPUT 3:\r\n    Sum of fifth power of first n odd natural numbers:  9286625\r\n\r\nINPUT 4:\r\n    Enter the range of odd numbers: 20\r\nOUTPUT 4:\r\n    Sum of fifth power of first n odd natural numbers:  265181250\r\n\r\nINPUT 5:\r\n    Enter the range of odd numbers: 25\r\nOUTPUT 5:\r\n    Sum of fifth power of first n odd natural numbers:  13749102500\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(1,n+1,2):\r\n        sum += i**5\r\n    return sum\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n, 2) :\r\n        sum = sum + i**5\r\n    return sum\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2) :\r\n        sum += i**5\r\n    return sum\r\n\r\n\r\n# Driver code\r\nn = int(input(\"Enter a number:\"))\r\n\r\nprint(\"The sum of fifth power of first n odd natural numbers is \")\r\nprint(odd_Num_Sum(n))\r\n\r\n\r\n\r\n'''\r\n\r\nINPUT:\r\n    Enter a number:5\r\nOUTPUT:\r\n    The sum of fifth power of first n odd natural numbers is \r\n    100\r\n\r\nTIME COMPLEXITY: O(n) --> Linear\r\nSPACE COMPLEXITY: O(1) --> Constant\r\n\r\n\r\nINPUT:\r\n    Enter a number:10\r\nOUTPUT:\r\n    The sum of fifth power of first n odd natural numbers is \r\n    54225\r\n\r\nTIME COMPLEXITY: O(n) --> Linear\r\nSPACE COMPLEXITY: O(1) --> Constant\r\n\r\n\r\nINPUT:\r\n    Enter a number:100\r\nOUTPUT:\r\n    The sum of fifth power of first n odd natural numbers is \r\n    15480087500\r\n\r\nTIME COMPLEXITY: O(n) --> Linear\r\nSPACE COMPLEXITY: O(1) --> Constant\r\n\r\n\r\nINPUT:\r\n    Enter a number:1000\r\nOUTPUT:\r\n    The sum of fifth power of first n odd natural numbers is \r\n    154800875000000000\r\n\r\nTIME COMPLEXITY: O(n) --> Linear\r\nSPACE COMPLEXITY: O(1) --> Constant\r\n\r\n\r\nINPUT:\r\n    Enter a number:10000\r\nOUTPUT:\r\n    The sum of fifth power of first n odd natural numbers is \r\n    1","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1, 2) :\r\n        sum += i ** 5\r\n    return sum\r\n\r\nprint(odd_Num_Sum(3))\r\n\r","votes":null},{"text":"\r\n    odd_sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        odd_sum += i**5\r\n    return odd_sum\r\n\r\n\r\n# Testing\r\n\r\nn = int(input(\"Enter the limit: \"))\r\nprint(f\"Sum of fifth power of odd natural numbers between 1 and {n} is {odd_Num_Sum(n)}\")\r\n\r\n\r\n'''\r\nTime Complexity  : O(n)\r\nSpace Complexity : O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2) :\r\n        sum = sum + i**5\r\n    return sum\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n\r\n### [Question 3: Write a python function to return the sum of all the even numbers in a given list of numbers.] ###\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2):\r\n        sum += (i**5)\r\n    return sum\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n, 2) :\r\n        sum += i ** 5\r\n        \r\n    return sum\r\n\r\n# Driver code\r\nprint(odd_Num_Sum(10))\r\n\r\n# Output : 29025\r\n\r\n# Example 2:\r\n# Input:\r\n# n = 10\r\n# Output:\r\n# 29025\r\n\r\n# Explanation:\r\n# The first 10 odd natural numbers are 1, 3, 5, 7, 9, 11, 13, 15, 17, 19.\r\n# The sum of 1st 5 powers of first 10 odd natural numbers is 1 + 3 + 5 + 7 + 9 = 29\r\n# The sum of 2nd 5 powers of first 10 odd natural numbers is 1 + 3 + 5 + 7 + 9 = 29\r\n# The sum of 3rd 5 powers of first 10 odd natural numbers is 1 + 3 + 5 + 7 + 9 = 29\r\n# The sum of 4th 5 powers of first 10 odd natural numbers is 1 + 3 + 5 + 7 + 9 = 29\r\n# The sum of 5th 5 powers of first 10 odd natural numbers is 1 + 3 + 5 + 7 + 9 = 29\r\n# Thus, the required sum is 29025\r\n\r\n# Example 3:\r\n# Input:\r\n# n = 1\r\n# Output:\r\n# 1\r\n\r\n# Explanation:\r\n# The first 1 odd natural number is 1.\r\n# The sum of 1st 5 powers of first 1 odd natural number is 1\r\n# The sum of 2nd 5 powers of first 1 odd natural number is 1\r\n# The sum of","votes":null},{"text":"\r\n    s = 0\r\n    for i in range(1, n+1, 2) :\r\n        s = s + i**5\r\n    return s\r\n\r\nprint(odd_Num_Sum(10))\r\n# 3025\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n,2) :\r\n        sum += i ** 5\r\n    print('Sum =',sum)\r\n\r\nodd_Num_Sum(100) # 30250\r\n\r\n# 013. Write a Python program which accepts a sequence of whitespace separated words and prints the words after removing all duplicate words and sorting them alphanumerically.\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum = sum + i ** 5\r\n    return sum\r\n\r\nprint(odd_Num_Sum(5))\r\n\r","votes":null},{"text":"\r\n    sum=0\r\n    for i in range(1,n+1,2):\r\n        sum=sum+i**5\r\n    return sum\r\n\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        sum += i ** 5\r\n    return sum\r\n\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2):\r\n        sum += i**5\r\n    return sum\r\n\r\nprint(\"The sum of fifth power of first n odd natural numbers is:\", odd_Num_Sum(10))\r\n\r","votes":null},{"text":"\r\n    odd_sum = 0\r\n    for i in range(1, n + 1, 2):\r\n        odd_sum += (i ** 5)\r\n    return odd_sum\r\n\r\nn = int(input(\"Enter the number of odd numbers : \"))\r\n\r\nprint(\"The sum of fifth power of first n odd natural numbers is : \", odd_Num_Sum(n))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\nEnter the number of odd numbers : 10\r\nThe sum of fifth power of first n odd natural numbers is :  35650\r","votes":null},{"text":"\r\n\r\n    sum=0\r\n    for i in range(1,n,2):\r\n        sum=sum+(i**5)\r\n    return sum\r\n\r\n\r\nprint(odd_Num_Sum(int(input(\"Enter the value of n: \"))))\r\n\r\n'''\r\n\r\nOUTPUT:-\r\n\r\nEnter the value of n: 5\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(n) :\r\n        sum += (2*i + 1)**5\r\n    return sum\r\n\r\nprint(\"The sum is \", odd_Num_Sum(int(input(\"Enter the upper limit : \"))))\r\n\r\n\r\n# 3. Write a python function to find the sum of first n numbers.\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum += i**5\r\n    \r\n    return sum\r\n    \r\n    \r\nn = int(input(\"Enter the value of n : \"))\r\nprint(\"The sum of fifth power of first n odd natural numbers is : \", odd_Num_Sum(n))\r\n\r\n\r\n# Test case 1\r\n# Enter the value of n : 5\r\n# The sum of fifth power of first n odd natural numbers is :  3025\r\n\r\n# Test case 2\r\n# Enter the value of n : 10\r\n# The sum of fifth power of first n odd natural numbers is :  436180\r\n\r\n# Test case 3\r\n# Enter the value of n : 15\r\n# The sum of fifth power of first n odd natural numbers is :  176464625\r\n\r\n# Test case 4\r\n# Enter the value of n : 20\r\n# The sum of fifth power of first n odd natural numbers is :  10296447500\r\n\r\n# Test case 5\r\n# Enter the value of n : 25\r\n# The sum of fifth power of first n odd natural numbers is :  2833607","votes":null},{"text":"\r\n    return sum([x ** 5 for x in range(1, n, 2)])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    odd_sum = 0\r\n    \r\n    for i in range(1, n+1, 2) :\r\n        odd_sum += i**5\r\n        \r\n    print(odd_sum)\r\n\r\nodd_Num_Sum(1000)\r\n\r\n# Output :","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2) :\r\n        sum += i**5\r\n    return sum\r\n\r\nn = int(input(\"Enter a number : \"))\r\n\r\nprint(\"The sum of the fifth power of the first\", n, \"odd numbers is\", odd_Num_Sum(n))\r\n\r\n\"\"\"\r\nTime Complexity : O(n), where n is the number of terms\r\nSpace Complexity : O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\nEnter a number : 6\r\nThe sum of the fifth power of the first 6 odd numbers is 143\r\n\r\nSAMPLE 2\r\nEnter a number : 11\r\nThe sum of the fifth power of the first 11 odd numbers is 2906\r\n\r\nSAMPLE 3\r\nEnter a number : 12\r\nThe sum of the fifth power of the first 12 odd numbers is 3760\r\n\r\nSAMPLE 4\r\nEnter a number : 13\r\nThe sum of the fifth power of the first 13 odd numbers is 4798\r\n\r\nSAMPLE 5\r\nEnter a number : 14\r\nThe sum of the fifth power of the first 14 odd numbers is 5905\r\n\r\nSAMPLE 6\r\nEnter a number : 15\r\nThe sum of the fifth","votes":null},{"text":"\r\n    sum = 0\r\n    for num in range(1, n+1, 2) :\r\n        sum += num**5\r\n    print(\"Sum of fifth power of first\", n, \"odd natural numbers is\", sum, \".\")\r\n\r\nn = int(input(\"Enter the value of 'n' : \"))\r\nodd_Num_Sum(n)\r\n\r\n# OUTPUT\r\n# Enter the value of 'n' : 5\r\n# Sum of fifth power of first 5 odd natural numbers is 1125 .\r\n\r\n# Enter the value of 'n' : 10\r\n# Sum of fifth power of first 10 odd natural numbers is 155045 .\r\n\r\n# Enter the value of 'n' : 15\r\n# Sum of fifth power of first 15 odd natural numbers is 121448125 .\r\n\r\n# Enter the value of 'n' : 20\r\n# Sum of fifth power of first 20 odd natural numbers is 1095702736 .\r\n\r\n# Enter the value of 'n' : 25\r\n# Sum of fifth power of first 25 odd natural numbers is 121166904736 .\r\n\r\n# Enter the value of 'n' : 30\r\n# Sum of fifth power of first 30 odd natural numbers is 1746402705456 .\r\n\r\n# Enter the value of 'n' : 35\r\n# Sum of fifth power of first 35 odd natural numbers is 208669563831875 .\r\n\r\n# Enter the value of 'n' : 40\r\n# Sum of fifth power of first 40 odd natural numbers is 2572278579134295 .\r\n\r\n# Enter the value of 'n' : 45\r\n# Sum of fifth power of first 45 odd natural numbers i","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(n):\r\n        sum = sum + (2*i+1)**5\r\n    return sum\r\n\r\n\r\na = int(input(\"Enter a number: \"))\r\nprint(odd_Num_Sum(a))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    odd_num = [i for i in range(1, n + 1) if i % 2 != 0]\r\n    \r\n    return sum(i ** 5 for i in odd_num)\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum = sum + (2*i - 1)**5\r\n    return sum\r\n\r\nn = int(input(\"Enter the value of n : \"))\r\nprint(\"The sum of first {} odd natural numbers is : {}\".format(n, odd_Num_Sum(n)))\r\n\r\n\r\n# OUTPUT\r\n# Enter the value of n : 10\r\n# The sum of first 10 odd natural numbers is : 276458910\r\n\r\n\r\n# 5. Write a Python function to find the sum of the first n terms of the series 1 + 1\/4 + 1\/9 + 1\/16 + 1\/25 +\u2026\r\n# (a) without using any inbuilt function.\r\n# (b) using sum() function.\r\n\r","votes":null},{"text":"\r\n\r\n    return sum([x**5 for x in range(1,n,2)])\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n# Exercise 2\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum += i**5\r\n\r\n    return sum\r\n\r","votes":null},{"text":"\r\n    sum =0\r\n    for i in range(1,n+1,2):\r\n        sum+=(i**5)\r\n        \r\n    return sum\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n# Example 2\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n,2) :\r\n        sum += (i**5)\r\n    return sum\r\n\r\n# call the function\r\nprint(odd_Num_Sum(10))\r\n\r\n# OUTPUT :\r\n# 55\r\n\r\n# 2. Write a python function to find the sum of first n prime numbers.\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n, 2):\r\n        sum += i ** 5\r\n    return sum\r\n\r\nprint(odd_Num_Sum(10))\r\n\r\n\r\n# 22.\r\n\"\"\"Write a python program to find the sum of fourth power of first n natural numbers. \"\"\"\r\n\r","votes":null},{"text":"\r\n    return sum([i**5 for i in range(1, n, 2)])\r\n\r\n\r\nprint(odd_Num_Sum(20))\r\n\r\n\r\n# Approach 2\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2):\r\n        sum = sum + i**5\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n, 2) :\r\n        sum += (i**5)\r\n    return sum\r\n\r\n# Driver Code\r\nn = int(input(\"Enter a number: \"))\r\nprint(\"The sum of fifth power of first n odd natural numbers is: \", odd_Num_Sum(n))\r\n\r\n# Sample Input 1:\r\n# Enter a number: 5\r\n# Output:\r\n# The sum of fifth power of first n odd natural numbers is:  64\r\n\r\n# Sample Input 2:\r\n# Enter a number: 8\r\n# Output:\r\n# The sum of fifth power of first n odd natural numbers is:  1625\r\n\r\n# Sample Input 3:\r\n# Enter a number: 10\r\n# Output:\r\n# The sum of fifth power of first n odd natural numbers is:  6475\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# Using math.pow() and sum() method\r\n\r\nimport math\r","votes":null},{"text":"\r\n    \r\n    # using list comprehension\r\n    # n = 20\r\n    # print(sum([i**5 for i in range(1,n+1,2)]))\r\n\r\n\r\n    # using sum() and range() function\r\n    # n = 20\r\n    # print(sum([i**5 for i in range(1,n+1,2)]))\r\n\r\n    # using while loop\r\n    # n = 20\r\n    # s = 0\r\n    # i = 1\r\n    # while i <= n:\r\n    #     s += i**5\r\n    #     i += 2\r\n    # print(s)\r\n\r\n\r\n    # using for loop\r\n    # n = 20\r\n    # s = 0\r\n    # for i in range(1, n+1, 2):\r\n    #     s += i**5\r\n    # print(s)\r\n\r\n\r\n    # using while loop\r\n    # n = 20\r\n    # s = 0\r\n    # i = 1\r\n    # while i <= n:\r\n    #     s += i**5\r\n    #     i += 2\r\n    # print(s)\r\n\r\n\r\n    # using for loop\r\n    # n = 20\r\n    # s = 0\r\n    # for i in range(1, n+1, 2):\r\n    #     s += i**5\r\n    # print(s)\r\n\r\n\r\n    # using for loop\r\n    # n = 20\r\n    # s = 0\r\n    # for i in range(1, n+1, 2):\r\n    #     s += i**5\r\n    # print(s)\r\n\r\n\r\n    # using while loop\r\n    # n = 20\r\n    # s = 0\r\n    # i = 1\r\n    # while i <= n:\r\n    #     s += i**","votes":null},{"text":"\r\n    \r\n    # initializing variable\r\n    sum_odd = 0\r\n    \r\n    # iterating the loop for n times\r\n    # and adding the fifth power of odd natural number\r\n    for i in range(1,n+1,2) :\r\n        sum_odd += (i**5)\r\n    \r\n    # returning the sum\r\n    return sum_odd\r\n\r\n# taking input from the user\r\nn = int(input(\"Enter the value of n : \"))\r\n\r\n# calling the odd_Num_Sum() function\r\nsum_odd = odd_Num_Sum(n)\r\n\r\n# printing the result\r\nprint(\"The sum of the fifth power of first n odd natural number is : \",","votes":null},{"text":"\r\n    ans = 0\r\n    for i in range(1,n+1,2) :\r\n        ans += i**5\r\n    return ans\r\n\r\nprint(odd_Num_Sum(10))\r\n\r","votes":null},{"text":"\r\n\r\n    result = 0\r\n    for i in range(1, n + 1, 2):\r\n        result += i**5\r\n    return result\r\n# 1-18014398509481984\r\n# 2-1363148169\r\n# 3-100\r\n# 4-1\r\n# 5-2","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(1, n+1, 2):\r\n        sum += i**5\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    if n == 0 :\r\n        return sum\r\n    else :\r\n        for x in range(0,n,2) :\r\n            sum += x**5\r\n        return sum\r\nprint(\"The sum of fifth power of first n odd natural numbers is : \",odd_Num_Sum(n))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1, 2) :\r\n        sum += i ** 5\r\n    return sum\r\n\r\n\r\nprint(odd_Num_Sum(5))\r\n\r\n# Output :\r\n# 120\r\n\r\n\r\n# 2. Write a python function to find the sum of squares of first 5 natural numbers.\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n,2) :\r\n        sum += i**5\r\n    return sum\r\n\r\nprint(\"The sum of fifth power of first\",n,\"odd natural numbers is :\",odd_Num_Sum(n))\r\n\r\n\"\"\"\r\nInput: n = 10\r\nOutput: The sum of fifth power of first 10 odd natural numbers is : 20250\r\n\r\nInput: n = 100\r\nOutput: The sum of fifth power of first 100 odd natural numbers is : 3041855025000\r\n\r\nTime complexity: O(n)\r\nSpace complexity: O(1)\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\"\"\"Question 19: Write a Python function to find the sum of the third power of first n natural numbers.\"\"\"\r\n\r","votes":null},{"text":"\r\n    \r\n    #Initializing the sum\r\n    sum = 0\r\n    \r\n    #The loop to iterate from 1 to 2n\r\n    for i in range(1,2*n,2) :\r\n        \r\n        #The loop to iterate from 1 to n\r\n        for j in range(1,n+1) :\r\n            \r\n            #Adding the value of 5th power of i raised to j\r\n            sum = sum + (i**5)**j\r\n            \r\n            #Returning the sum\r\n    return sum\r\n\r\n#Calling the function\r\nprint(odd_Num_Sum(5))\r\n\r\n\r\n'''\r\n    Sample Input\/Output:\r\n    \r\n    Input:\r\n    5\r\n    \r\n    Output:\r\n    99","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(1, n, 2):\r\n        total = total + (i**5)\r\n    return total\r\n\r","votes":null},{"text":"\r\n    odd_num_sum = 0\r\n    for i in range(1, n+1) :\r\n        if (i % 2 == 1) :\r\n            odd_num_sum += i ** 5\r\n    return odd_num_sum\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n+1, 2) :\r\n        sum = sum + (i**5)\r\n    return sum\r\n\r","votes":null},{"text":"\r\n    sum=0\r\n    for i in range(1,n,2):\r\n        sum+=i**5\r\n    return sum\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2) :\r\n        sum += i**5\r\n    return sum\r\n\r\n\r\nn = int(input(\"Enter the number: \"))\r\nprint(\"The sum of fifth power of first \" + str(n) + \" odd natural numbers is \" + str(odd_Num_Sum(n)))\r\n\r\n\r\n#Method 2\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1,2):\r\n        sum += i**5\r\n    return sum\r\n\r\nprint(odd_Num_Sum(3))\r\n\r\n# 31. Write a python program to find the sum of squares of first n natural numbers.\r\n\r","votes":null},{"text":"\r\n    \r\n    #initializing sum variable\r\n    sum = 0\r\n    \r\n    #iterating through the loop\r\n    for i in range(1, n+1, 2) :\r\n        sum = sum + (i**5) #adding the sum of powers\r\n    \r\n    #returning the sum\r\n    return sum\r\n\r\n#calling the function\r\nprint(odd_Num_Sum(10))\r\n\r\n#OUTPUT\r\n#14500\r\n\r\n\"\"\"\r\n\r\nTIME COMPLEXITY : O(n)\r\nSPACE COMPLEXITY : O(1)\r\n\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null}],"time":{"count":4.0,"avg":103766.003,"std":14392.660182261,"cov":0.1387030411}}
{"id":550,"question":"def find_Max(arr,low,high):\r\n    \"\"\"Write a python function to find the maximum element in a sorted and rotated array.\"\"\"","answers":[{"text":"\r\n    # Time Complexity 0(log(n))\r\n    # Space Complexity O(1)\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n    elif arr[mid] < arr[mid - 1]:\r\n        return arr[mid - 1]\r\n    elif arr[mid] > arr[0]:\r\n        return find_Max(arr, mid + 1, high)\r\n    else:\r\n        return find_Max(arr, low, mid - 1)\r\n\r\n\r","votes":101754.32},{"text":"\r\n    \r\n    if low == high:\r\n        return arr[low]\r\n    \r\n    mid = (low+high)\/\/2\r\n    \r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r","votes":103996.204},{"text":"\r\n    if high == low:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    if arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    return arr[mid]\r\n\r\n\r\narr = [4,5,6,7,8,9,1,2,3]\r\n\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":111089.936},{"text":"\r\n    if high < low:\r\n        return -float('inf')\r\n    if high == low:\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    elif arr[mid] > arr[mid+1] and arr[mid] > arr[mid-1]:\r\n        return arr[mid]\r\n    elif arr[mid] < arr[mid+1]:\r\n        return find_Max(arr,mid+1,high)\r\n    elif arr[mid] < arr[mid-1]:\r\n        return find_Max(arr,low,mid-1)\r\n\r","votes":113155.924},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid]>arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    return find_Max(arr,mid+1,high)\r\n\r\n#driver code\r\narr = [11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nprint(\"The maximum element is:\",find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n\r\n\r","votes":113780.092},{"text":"\r\n    \r\n    \"\"\"\r\n    The idea is to use binary search. The array must be sorted and rotated. \r\n    We can find the maximum element by comparing the element at the end of the array with the maximum element\r\n    of the array at the beginning. The maximum element is the one with a greater value.\r\n    \"\"\"\r\n    \r\n    if(low == high):\r\n        return arr[low]\r\n    \r\n    if(low < high):\r\n        mid = (low + high) \/\/ 2\r\n        if(arr[mid] > arr[(mid + 1) % len(arr)]):\r\n            return arr[mid]\r\n        if(arr[mid] > arr[high % len(arr)]):\r\n            return find_Max(arr,low,mid)\r\n        else:\r\n            return find_Max(arr, mid + 1, high)\r\n\r","votes":115346.96},{"text":"\r\n    if(low == high):\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if(arr[mid] > arr[mid+1]):\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [15, 18, 2, 3, 6, 12]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    \r\n# Time Complexity : O(logn)\r\n# Space Complexity : O(1)\r\n\r\n\r\n# Other Method\r\n\r","votes":116053.848},{"text":"\r\n    if(low==high):\r\n        return arr[low]\r\n    \r\n    mid = (low+high)\/\/2\r\n    if(arr[mid]>arr[mid+1]):\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\narr = [23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\r\n\r\nprint(\"Maximum element in the array is : \", find_Max(arr,0,len(arr)-1))\r\n\r\n# This is a very inefficient method. The time complexity of the above code is O(n)","votes":118603.804},{"text":"\r\n    \r\n    if low == high:\r\n        return arr[low]\r\n    elif low == high-1:\r\n        if arr[low] > arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    else:\r\n        mid = low + (high-low)\/\/2\r\n        if arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid] < arr[mid+1]:\r\n            return find_Max(arr,mid+1,high)\r\n        elif arr[mid] == arr[mid+1]:\r\n            return find_Max(arr,low,mid)\r\n\r","votes":122219.344},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if high == low:\r\n        return arr[low]\r\n    if high == low + 1:\r\n        if arr[low] > arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n\r\n    mid = int((low + high) \/ 2)\r\n    if arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n    if arr[mid - 1] > arr[mid]:\r\n        return arr[mid - 1]\r\n\r\n    # if arr[mid] == arr[mid + 1]:\r\n    #     return find_Max(arr,low,mid)\r\n\r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr,mid + 1,high)\r\n    if arr[mid] < arr[low]:\r\n        return find_Max(arr,low,mid - 1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":123569.38},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if high == low:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    if arr[mid] < arr[mid-1]:\r\n        return arr[mid+1]\r\n    if arr[mid] > arr[0]:\r\n        return find_Max(arr,mid+1,high)\r\n    return find_Max(arr,low,mid-1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 3, 5, 7, 9, 11, 13, 15]\r\n    arr = [4, 5, 6, 7, 0, 1, 2]\r\n    arr = [15, 16, 17, 1, 2, 3, 4]\r\n    arr","votes":129361.392},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    if low + 1 == high:\r\n        if arr[low] > arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    mid = int((low + high) \/ 2)\r\n    if arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n    if arr[low] > arr[mid]:\r\n        return find_Max(arr,low,mid-1)\r\n    return find_Max(arr,mid+1,high)\r\n\r\n\r","votes":140054.888},{"text":"\r\n    if high == low:\r\n        return arr[low]\r\n    elif high == low + 1:\r\n        if arr[low] >= arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    else:\r\n        mid = low + (high-low)\/\/2\r\n        if arr[mid] >= arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid] <= arr[mid-1]:\r\n            return arr[mid-1]\r\n        else:\r\n            if arr[low] >= arr[mid]:\r\n                return find_Max(arr,low,mid-1)\r\n            else:\r\n                return find_Max(arr,mid+1,high)\r\n\r\n\r\n# Driver code to test the above function\r\narr = [50, 4, 25, 100, 20]\r\nn = len(arr)\r\nprint(\"Maximum element is : \", find_Max(arr, 0, n-1))\r\n\r\n\r\n\r\n\r\n\r\n#","votes":140897.204},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    if arr[mid]>arr[mid-1] and arr[mid]>arr[mid+1]:\r\n        return arr[mid]\r\n    if arr[mid]>arr[mid-1]:\r\n        return find_Max(arr,mid+1,high)\r\n    return find_Max(arr,low,mid-1)\r\n\r\narr=[2,4,5,7,9,11,12,13,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]\r\n\r\nlow=0\r\nhigh=len(arr)-1\r\n\r\nprint(find_Max(arr,low,high))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":141444.372},{"text":"\r\n    if(high>=low):\r\n        mid = low + (high-low)\/\/2\r\n        if(mid == len(arr)-1):\r\n            return arr[mid]\r\n        if(arr[mid]>arr[mid+1]):\r\n            return arr[mid]\r\n        if(arr[mid]<arr[mid+1]):\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return -1\r\n\r\n\r\nif __name__==\"__main__\":\r\n    arr = [1, 3, 8, 12, 5, 10, 6]\r\n    low = 0\r\n    high = len(arr)-1\r\n    ans = find_Max(arr,low,high)\r\n    print(ans)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":143448.124},{"text":"\r\n    if(low==high):\r\n        return arr[low]\r\n    \r\n    mid = (low+high) \/\/ 2\r\n    \r\n    if(mid==high or arr[mid]>arr[mid+1]):\r\n        return arr[mid]\r\n    elif(arr[low]>arr[mid]):\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":150486.232},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if high == low:\r\n        return arr[low]\r\n    mid = low + (high - low) \/\/ 2\r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    if arr[mid] < arr[mid-1]:\r\n        return arr[mid+1]\r\n    if arr[mid] > arr[0]:\r\n        return find_Max(arr,mid+1,high)\r\n    return find_Max(arr,low,mid-1)\r\n\r\nif __name__ == '__main__':\r\n    arr = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\r\n    print(find_Max(arr,0,10))\r\n\r\n\r","votes":156599.976},{"text":"\r\n    if high<low:\r\n        return -1\r\n    elif high==low:\r\n        return arr[low]\r\n    else:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid]>=arr[low] and arr[mid]>=arr[high]:\r\n            return arr[mid]\r\n        elif arr[high]>arr[mid]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n\r","votes":159936.648},{"text":"\r\n    if high < low:\r\n        return arr[0]\r\n    elif high == low:\r\n        return arr[low]\r\n    elif high == low+1:\r\n        return max(arr[low],arr[high])\r\n    else:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid] > arr[mid-1]:\r\n            return find_Max(arr,mid+1,high)\r\n        elif arr[mid] > arr[mid+1]:\r\n            return find_Max(arr,low,mid-1)\r\n\r\narr = [2,3,4,5,6,7,1,8]\r\narr.sort()\r\n\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":166097.976},{"text":"\r\n    \r\n    if low == high:\r\n        return arr[low]\r\n    \r\n    if low < high:\r\n        mid = (low+high)\/\/2\r\n        \r\n        if arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid] < arr[mid+1]:\r\n            return find_Max(arr,mid+1,high)\r\n        \r\n        return find_Max(arr,low,mid-1)\r\n\r\n\"\"\"\r\nTime Complexity: O(Log(n))\r\nSpace Complexity: O(1)\r\n\r\nSample Input:\r\narr = [10, 12, 15, 3, 4]\r\n\r\nSample Output:\r\n15\r\n\"\"\"\r\n\r\n\r\n\r","votes":169321.14},{"text":"\r\n\r\n    if (high >= low):\r\n        mid = low + (high - low) \/\/ 2\r\n        if (mid < high and arr[mid] > arr[mid + 1]):\r\n            return arr[mid]\r\n        if (mid > low and arr[mid] < arr[mid - 1]):\r\n            return arr[mid]\r\n        if (arr[low] >= arr[mid]):\r\n            return find_Max(arr,low,mid - 1)\r\n        return find_Max(arr,mid + 1,high)\r\n\r\n    return arr[low]\r\n\r","votes":null},{"text":"\r\n    \r\n    if high-low == 0:\r\n        return arr[low]\r\n    \r\n    if high-low == 1:\r\n        if arr[low] >= arr[high]:\r\n            return arr[low]\r\n        return arr[high]\r\n    \r\n    mid = (low+high)\/\/2\r\n    if arr[mid] >= arr[low]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid] <= arr[high-1]:\r\n        return find_Max(arr,mid,high)\r\n    else:\r\n        return arr[high-1]\r\n    \r\narr = [1, 3, 8, 12, 5, 7, 9, 11, 6, 10]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n#-------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = low + (high - low) \/\/ 2\r\n        if mid < high and arr[mid] > arr[mid + 1]:\r\n            return arr[mid]\r\n        if mid > low and arr[mid] < arr[mid - 1]:\r\n            return arr[mid]\r\n        if arr[low] >= arr[mid]:\r\n            return find_Max(arr, low, mid - 1)\r\n        return find_Max(arr, mid + 1, high)\r\n    return -1\r\n\r\n\r\narr = [5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3]\r\nn = len(arr)\r\nprint(find_Max(arr, 0, n - 1))\r\n\r\n\r","votes":null},{"text":"\r\n    if high<low:\r\n        return -1\r\n    mid=int((low+high)\/2)\r\n    if mid<high and arr[mid]>arr[mid+1]:\r\n        return arr[mid]\r\n    if mid>low and arr[mid]<arr[mid-1]:\r\n        return arr[mid]\r\n    if arr[low]>=arr[mid]:\r\n        return find_Max(arr,low,mid-1)\r\n    return find_Max(arr,mid+1,high)\r\n\r\narr=[1,3,5,7,9,11,13,15,17,19]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n# 2.Write a python program to find the maximum element in a sorted and rotated array.\r\n\r","votes":null},{"text":"\r\n    \r\n    if low == high:\r\n        return arr[low]\r\n    \r\n    if low < high:\r\n        mid = low + (high - low) \/\/ 2\r\n        \r\n        if arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        \r\n        if arr[mid] < arr[mid-1]:\r\n            return arr[mid-1]\r\n        \r\n        if arr[mid] > arr[low]:\r\n            return find_Max(arr,mid+1,high)\r\n        \r\n        return find_Max(arr,low,mid-1)\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7]\r\n    print(find_Max(arr, 0, len(arr) - 1))\r\n    arr = [7, 8, 9, 10, 11, 12, 1]\r\n    print(find_Max(arr, 0, len(arr) - 1))\r\n    arr = [7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6]\r\n    print(find_Max(arr, 0, len(arr) - 1))\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    print(find_Max","votes":null},{"text":"\r\n    \r\n    # check for empty array\r\n    if len(arr)==0:\r\n        return 0\r\n    \r\n    # check if array is already sorted\r\n    if arr[0]>arr[len(arr)-1]:\r\n        return arr[len(arr)-1]\r\n    \r\n    # find pivot\r\n    pivot = find_pivot(arr,low,high)\r\n    print(\"pivot: \",pivot)\r\n    \r\n    # check if element is present after pivot\r\n    if arr[pivot] < x:\r\n        # find index of x in array after pivot\r\n        return binary_search(arr,pivot+1,high,x)\r\n    else:\r\n        # find index of x in array before pivot\r\n        return binary_search(arr,low,pivot-1,x)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if low == high:\r\n        return arr[low]\r\n    elif arr[low] > arr[high]:\r\n        return arr[low]\r\n\r\n    mid = (low + high) \/\/ 2\r\n    if arr[low] > arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid] > arr[high]:\r\n        return find_Max(arr,mid,high)\r\n    else:\r\n        return arr[high]\r\n\r\n\r\narr = [1,3,8,10,15,18,20,25,28]\r\n\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if high>=low:\r\n        mid = (high+low)\/\/2\r\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\r\n            return arr[mid]\r\n\r\n        elif arr[mid]>arr[0]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n\r\n    return -1\r\n\r\n\r\narr = [1,2,4,5,6,7,8,0,100,11]\r\n\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n# Find the maximum element in a sorted and rotated array.\r\n#\r\n# Given a sorted and rotated array, find the maximum element in it.\r\n# You can assume that it is a sorted array that is rotated somewhere between 1 and n times.\r\n#\r\n# You are not allowed to use any built in functions that finds the maximum element in an array.\r\n#\r\n# Example:\r\n#\r\n# Input: arr[] = {10, 11, 1, 2, 3, 4, 5, 6, 7, 8}\r\n# Output: 11\r\n#\r\n# Input: arr[] = {10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9}\r\n# Output: 11\r\n#\r\n# Input: arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\r\n# Output: 10\r\n#\r\n# Input: arr[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}\r\n# Output: 10\r\n#\r\n# Expected Time Complexity: O(log N)","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    elif high == low:\r\n        return arr[low]\r\n    elif arr[low] > arr[high]:\r\n        return arr[low]\r\n    else:\r\n        mid = int((low + high) \/ 2)\r\n        if arr[mid] > arr[mid + 1]:\r\n            return arr[mid]\r\n        elif arr[mid] > arr[low]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 3, 8, 12, 4, 2, 9, 7]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------","votes":null},{"text":"\r\n    if high<low:\r\n        return -1\r\n    if high==low:\r\n        return arr[low]\r\n    \r\n    mid=low+((high-low)\/\/2)\r\n    if arr[low]<arr[high]:\r\n        return arr[high]\r\n    \r\n    if arr[mid]>arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    \r\n    if arr[mid]<arr[low]:\r\n        return find_Max(arr,low,mid-1)\r\n    \r\n    return find_Max(arr,mid+1,high)\r\n\r\n\r\narr = [1, 3, 8, 10, 15, 16, 19, 20, 25, 27]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n\r\n# --------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Program 2:\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high)\/\/2\r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r\n\r\n\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7]\r\nprint(\"Maximum element in an array is\", find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = int(low + (high - low)\/2)\r\n        if mid < high and arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        if mid > low and arr[mid] < arr[mid-1]:\r\n            return arr[mid]\r\n        if arr[low] >= arr[mid]:\r\n            return find_Max(arr,low,mid-1)\r\n        return find_Max(arr,mid+1,high)\r\n    return -1\r\n\r\n\r\narr = [13,18,25,2,8,10]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\n\r\n\"\"\"The maximum element in a sorted and rotated array is the maximum element among","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if arr[low] > arr[high]:\r\n        return arr[low]\r\n    if arr[low] < arr[high]:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid] > arr[high]:\r\n            return arr[mid]\r\n        if arr[mid] < arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n    return arr[high]\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14]\r\n    low = 0\r\n    high = len(arr)-1\r\n    print(\"The maximum element in the array is:\", find_Max(arr,low,high))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if high>=low:\r\n        mid=low+(high-low)\/\/2\r\n        \r\n        if arr[mid]>arr[high] and arr[mid]>arr[low]:\r\n            return arr[mid]\r\n        \r\n        if arr[mid]<=arr[high]:\r\n            return find_Max(arr,mid+1,high)\r\n        return find_Max(arr,low,mid-1)\r\n    return -1\r\n\r\narray = [5, 6, 7, 8, 9, 10, 1, 2, 3]\r\nprint(find_Max(array, 0, len(array)))\r\n\r\n# Time complexity:","votes":null},{"text":"\r\n\r\n    if high < low: \r\n        return -1\r\n    \r\n    if high == low: \r\n        return arr[low]\r\n    \r\n    mid = (high + low) \/\/ 2\r\n    \r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    elif arr[mid] < arr[mid-1]:\r\n        return arr[mid-1]\r\n    elif arr[mid] > arr[0]:\r\n        return find_Max(arr,0,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r\narr = [12, 4, 5, 6, 10, 11, 2, 3]\r\nn = len(arr)\r\n\r\nprint(find_Max(arr, 0, n-1))\r\n\r\n\r\n# Method - 2\r\n\r","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if high == low:\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n    if arr[mid] < arr[0]:\r\n        return find_Max(arr, mid + 1, high)\r\n    return find_Max(arr, low, mid - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if arr[low] > arr[high]:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid] > arr[mid-1] or arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    if arr[low] > arr[mid]:\r\n        return find_Max(arr,low,mid-1)\r\n    return find_Max(arr,mid+1,high)\r\n\r\nprint(find_Max([1,2,3,4,5,6,7,8,9],0,8))\r\n\r\n\r","votes":null},{"text":"\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n    if arr[mid] > arr[mid - 1]:\r\n        return arr[mid]\r\n    \r\n    if arr[mid] <= arr[high]:\r\n        return find_Max(arr,mid,high)\r\n    return find_Max(arr,low,mid)\r\n\r\n","votes":null},{"text":"\r\n    if high>=low:\r\n        mid=(high+low)\/\/2\r\n        if mid<high and arr[mid]>arr[mid+1]:\r\n            return arr[mid]\r\n        elif mid>low and arr[mid]<arr[mid-1]:\r\n            return arr[mid]\r\n        elif arr[low]>=arr[mid]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    return -1\r\narr=list(map(int,","votes":null},{"text":"\r\n    \r\n    if(high >= low):\r\n        if(arr[high]>arr[low]):\r\n            return arr[high]\r\n        else:\r\n            return find_Max(arr,low+1,high-1)\r\n    else:\r\n        return -1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if high>=low:\r\n        if high==low:\r\n            return arr[low]\r\n        if arr[low]>arr[high]:\r\n            return arr[low]\r\n        \r\n        mid = (low+high)\/\/2\r\n        if arr[mid]>arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    \r\n    return arr[low]\r\n\r\narr= [10,11,12,1,2,3,4,5,6,7,8,9]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr= [10,11,12,1,2,3,4,5,6,7,8,9]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr= [3,4,5,6,7,8,9,10,11,12,1,2]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr= [10,11,12,1,2,3,4,5,6,7,8,9]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr= [10,11,12,1,2,3,4,5,6,7,8,9]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr= [3,4,5,6,7,8,9,10,11,12,1,2]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr= [10,11,12,1,2,3,4,5,6,7,8,9]\r\nprint(find_Max(arr","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if high == low:\r\n        return arr[low]\r\n    mid = (high+low)\/\/2\r\n    if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    elif arr[mid] < arr[mid-1]:\r\n        return find_Max(arr,mid,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r\narr = [1,3,5,7,9,10,8,6]\r\nprint(\"Maximum\",find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n# 2. Write a python program to find the maximum element in a given array.\r\n\r","votes":null},{"text":"\r\n    if high >= low:\r\n        # If there is only one element then return it\r\n        if high == low:\r\n            return arr[low]\r\n        \r\n        # Find the mid element\r\n        mid = low + (high-low)\/\/2\r\n        \r\n        # If element is present at the middle itself\r\n        if arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        \r\n        # If element is in left half\r\n        if arr[mid] > arr[low]:\r\n            return find_Max(arr, low, mid-1)\r\n        \r\n        # Else the element is in right half\r\n        return find_Max(arr, mid + 1, high)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    if arr[low] >= arr[high]:\r\n        return find_Max(arr,low,high-1)\r\n    else:\r\n        return find_Max(arr,low+1,high)\r\n    \r\narr = [1, 2, 3, 4]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [4, 5, 6, 7, 8, 9, 1, 2, 3]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 1, 2, 3, 4, 5, 6, 7]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 8, 6, 4, 2, 1, 3, 5, 7, 9]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 8, 6, 4, 2, 1, 3, 5, 7, 9, 11]\r\nprint(find_Max(arr,0,len(arr)","votes":null},{"text":"\r\n    if high>=low:\r\n        mid = (high+low)\/\/2\r\n        if arr[mid]>=arr[high] and arr[mid]>arr[low]:\r\n            return arr[mid]\r\n        elif arr[mid]<arr[high]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n\r","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = (high + low) \/\/ 2\r\n        if mid < high and arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        elif mid > low and arr[mid] < arr[mid-1]:\r\n            return arr[mid]\r\n        elif arr[low] > arr[high]:\r\n            return arr[high]\r\n        else:\r\n            return arr[low]\r\n    return -1\r\narr = [15, 18, 2, 3, 6, 12]\r\nlow = 0\r\nhigh = len(arr) - 1\r\nprint(find_Max(arr,low,high))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    else:\r\n        mid = (low+high)\/\/2\r\n        if arr[low] > arr[mid]:\r\n            return find_Max(arr,low,mid-1)\r\n        elif arr[low] < arr[mid]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low+1,high)\r\n\r\n\r\narr = [5,6,1,2,3,4]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n\r\n\"\"\"Output:\r\n5\r\n\"\"\"\r\n\r\n\r\n# Time Complexity: O(log n)\r\n# Space Complexity: O(1)\r\n\r\n\r","votes":null},{"text":"\r\n    if(high<low):\r\n        return -1\r\n    if(high==low):\r\n        return arr[low]\r\n    mid = (high+low)\/\/2\r\n    if(arr[mid]>arr[high]):\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n    \r\narr = [1,2,3,4,5]\r\n","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = low + (high - low) \/\/ 2\r\n        if (mid == 0 or arr[mid-1] <= arr[mid]) and (mid == len(arr)-1 or arr[mid] >= arr[mid+1]):\r\n            return arr[mid]\r\n        \r\n        if arr[mid] >= arr[0]:\r\n            return find_Max(arr, 0, mid-1)\r\n        else:\r\n            return find_Max(arr, mid+1, high)\r\n    return -1\r\n\r\nprint(find_Max([3,4,5,1,2], 0, 4))\r\n\r","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if high == low: \r\n        return arr[low]\r\n\r\n    mid = (low + high)\/\/2\r\n    if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    if arr[mid] < arr[mid-1]:\r\n        return find_Max(arr,mid+1, high)\r\n    return find_Max(arr,low,mid-1)\r\n\r\narr = [1, 3, 8, 12, 4, 2]\r\n\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    elif high == low:\r\n        return arr[low]\r\n    else:\r\n        mid = (low + high) \/\/ 2\r\n        if arr[mid] > arr[mid + 1]:\r\n            return arr[mid]\r\n        elif arr[mid] < arr[mid - 1]:\r\n            return arr[mid + 1]\r\n        elif arr[mid] > arr[0]:\r\n            return find_Max(arr,low,mid - 1)\r\n        else:\r\n            return find_Max(arr,mid + 1,high)\r\n\r\narr = [1,2,3,4,5,6,7]\r\nlow = 0\r\nhigh = 6\r\nprint(find_Max(arr,low,high))\r\n\r\narr = [7,8,9,10,1,2,3]\r\nlow = 0\r\nhigh = 6\r\nprint(find_Max(arr,low,high))\r\n\r\narr = [4,5,6,7,8,9,10]\r\nlow = 0\r\nhigh = 6\r\nprint(find_Max(arr,low,high))\r\n\r\narr = [10,1,2,3,4,5,6]\r\nlow = 0\r\nhigh = 6\r\nprint(find_Max(arr,low,high))\r\n\r\narr = [10,9,8,7,6,5,4]\r\nlow = 0\r\nhigh = 6\r\nprint(find_Max(arr,low,high))\r\n\r\narr = [5,6,7,8,9,10]\r\nlow = 0\r\nhigh = 4\r\nprint(find_Max(arr,low,high))\r\n\r\narr = [10,9,8,7,6,5]\r\nlow = 0\r\nhigh = 4\r\nprint(find_Max(arr,low","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = (low + high) \/\/ 2\r\n        if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid] < arr[mid-1]:\r\n            return find_Max(arr,mid+1,high)\r\n        elif arr[mid] < arr[mid+1]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r\n\r\nprint(find_Max([5,6,1,2,3],0,4))\r\nprint(find_Max([1,3,5,7,9,10,8,6],0,7))\r\nprint(find_Max([4,5,6,7,0,1,2],0,6))\r\nprint(find_Max([10,1,2,3,4,5,6,7],0,7))\r\nprint(find_Max([10,1,2,3,4,5,6,7],3,7))\r\nprint(find_Max([10,1,2,3,4,5,6,7],0,2))\r\nprint(find_Max([10,1,2,3,4,5,6,7],6,7))\r\nprint(find_Max([10,1,2,3,4,5,6,7],7,7))\r\n\r\n\r\n\r\nvotes":null},{"text":"\r\n    if (high < low):\r\n        return -1\r\n    if (high == low):\r\n        return arr[low]\r\n    \r\n    mid = int((low + high)\/2)\r\n    if (arr[mid] > arr[high]):\r\n        return find_Max(arr,mid+1,high)\r\n    elif (arr[mid] < arr[high]):\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r","votes":null},{"text":"\r\n    if(high == low):\r\n        return arr[low]\r\n    if(high == low+1):\r\n        if arr[low] > arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    elif arr[mid] < arr[mid-1]:\r\n        return arr[mid+1]\r\n    elif arr[mid] > arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7]\r\narr = [7, 8, 9, 10, 11, 12, 13]\r\narr = [13, 14, 15, 16, 17, 18, 19]\r\narr = [19, 6, 7, 8, 9, 10, 11]\r\narr","votes":null},{"text":"\r\n\r\n    if low == high:\r\n        return arr[low]\r\n\r\n    if arr[low] > arr[high]:\r\n        return arr[low]\r\n\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n\r\n    if arr[low] > arr[mid]:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n    return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = low + (high - low)\/\/2\r\n    if arr[mid] > arr[mid+1] :\r\n        return arr[mid]\r\n    if arr[mid] > arr[low] :\r\n        return find_Max(arr,mid+1,high)\r\n    return find_Max(arr,low,mid-1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\r\n    n = len(arr)\r\n    print(find_Max(arr,0,n-1))\r\n\r\n\r\n\"\"\"\r\nTime Complexity- O(log(n))\r\nSpace Complexity- O(1)\r\n\r\nSample Input:\r\n    Enter the number of elements\r\n    10\r\n    Enter the elements of the array\r\n    1 3 5 7 9 11 13 15 17 19\r\n\r\nSample Output:\r\n    19\r\n\r\nTime Complexity- O(log(n))\r\nSpace Complexity- O(1)\r\n\r\nSample Input:\r\n    Enter the number of elements\r\n    10\r\n    Enter the elements of the array\r\n    15 17 19 1 3 5 7 9 11 13\r\n\r\nSample Output:\r\n    15\r\n\r\nTime Complexity- O(log(n))\r\nSpace Complexity- O(1)\r\n\r\nSample Input:\r\n    Enter the number of elements\r\n    10\r\n    Enter the elements of the array\r\n    13 15 17 19 1 3 5 7 9 11\r\n\r\nSample Output:\r\n    19\r\n\r\nTime Complexity- O(log(n))\r\nSpace Complexity- ","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = (low + high)\/\/2\r\n        if arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        if arr[mid-1] > arr[mid]:\r\n            return arr[mid-1]\r\n        if arr[low] > arr[mid-1]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    \r\n    max_index = low\r\n    max_value = arr[low]\r\n    for i in range(low+1,high+1):\r\n        if arr[i] > max_value:\r\n            max_value = arr[i]\r\n            max_index = i\r\n    return max_value,max_index\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    \r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n    elif arr[low] > arr[mid]:\r\n        return find_Max(arr, low, mid - 1)\r\n    elif arr[mid] > arr[high]:\r\n        return find_Max(arr, mid + 1, high)\r\n    else:\r\n        return find_Max(arr, low, mid - 1)\r\n\r\n\r\nprint(find_Max([1, 3, 8, 12, 5, 6, 2], 0, 6))\r\nprint(find_Max([1, 3, 8, 12, 5, 6, 2], 0, 1))\r\nprint(find_Max([1, 3, 8, 12, 5, 6, 2], 0, 2))\r\nprint(find_Max([1, 3, 8, 12, 5, 6, 2], 0, 3))\r\nprint(find_Max([1, 3, 8, 12, 5, 6, 2], 0, 4))\r\nprint(find_Max([1, 3, 8, 12, 5, 6, 2], 0, 5))\r\nprint(find_Max([1, 3, 8, 12, 5, 6, 2], 0, 6))\r\nprint(find_Max([1, 3, 8, 12, 5, 6, 2], 1, 6))\r\nprint(find_Max([1, 3, 8, 12, 5, 6, 2], 2, 6))\r\nprint(find_Max([1,","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = (high + low) \/\/ 2\r\n        if arr[mid] > arr[mid + 1]:\r\n            return arr[mid]\r\n        if arr[mid] > arr[low]:\r\n            return find_Max(arr,low,mid - 1)\r\n        return find_Max(arr,mid + 1,high)\r\n\r","votes":null},{"text":"\r\n    \r\n    \r\n    if arr[low] > arr[high]:\r\n        return arr[low]\r\n    \r\n    if high-low == 1:\r\n        return max(arr[low],arr[high])\r\n    \r\n    mid = (low+high)\/\/2\r\n    \r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,mid,high)\r\n    else:\r\n        return find_Max(arr,low,mid)\r\n\r\n\r\n# Test case\r\narr = [1, 2, 3, 4, 5, 6, 7]\r\nprint('Maximum element in the array:',find_Max(arr,0,len(arr)-1))\r\n\r\narr = [4, 5, 6, 7, 1, 2, 3]\r\nprint('Maximum element in the array:',find_Max(arr,0,len(arr)-1))\r\n\r\narr = [3, 4, 5, 6, 7, 1, 2]\r\nprint('Maximum element in the array:',find_Max(arr,0,len(arr)-1))\r\n\r\narr = [7, 1, 2, 3, 4, 5, 6]\r\nprint('Maximum element in the array:',find_Max(arr,0,len(arr)-1))\r\n\r\narr = [7, 6, 5, 4, 3, 2, 1]\r\nprint('Maximum element in the array:',find_Max(arr,0,len(arr)-1))\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7]\r\nprint('Maximum element in the array:',find_Max(arr,0,len(arr)-1))\r\n\r\narr = [1,","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    elif low+1 == high:\r\n        return max(arr[low],arr[high])\r\n    mid = (low+high)\/\/2\r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    elif arr[mid] < arr[mid+1]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\narr = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11,","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n    elif arr[mid] < arr[mid - 1]:\r\n        return arr[mid + 1]\r\n    else:\r\n        if arr[mid] > arr[low]: # left side sorted\r\n            return find_Max(arr,low,mid - 1)\r\n        else: # right side sorted\r\n            return find_Max(arr,mid + 1,high)\r\n\r\n\r\n\r\narr = [3,4,5,6,7,1,2]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n#arr = [1, 2, 3, 4, 5, 6, 7]\r\n#print(find_Max(arr,0,len(arr)-1))\r\n\r\n#arr = [7, 6, 5, 4, 3, 2, 1]\r\n#print(find_Max(arr,0,len(arr)-1))\r\n\r\n#arr = [1, 2, 3, 4, 5, 6, 7]\r\n#print(find_Max(arr,0,len(arr)-1))\r\n\r\n#arr = [1, 2, 3, 4, 5, 6, 7]\r\n#print(find_Max(arr,0,len(arr)-1))\r\n\r\n#arr = [7, 1, 2, 3, 4, 5, 6]\r\n#print(find_Max(arr,0,len(arr)-1))\r\n\r\n#arr = [1, 2, 3, 4, 5, 6, 7]\r\n#print(find_Max(arr,0,len(arr)-1))\r\n\r\n#arr = [1","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = (high + low) \/\/ 2\r\n        if arr[mid] > arr[mid + 1]:\r\n            return arr[mid]\r\n        if arr[mid] < arr[0]:\r\n            return find_Max(arr,mid+1,high)\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    if low + 1 == high:\r\n        if arr[low] > arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[mid+1] and arr[mid] > arr[mid-1]:\r\n        return arr[mid]\r\n    if arr[mid] > arr[low] and arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n    if arr[mid] < arr[low] and arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r\narr = [10, 15, 1, 3, 2, 8]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 15, 1, 3, 2, 8]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 15, 1, 3, 2, 8]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 15, 1, 3, 2, 8]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 15, 1, 3, 2, 8]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 15, 1, 3, 2, 8]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\narr = [10, 15, 1, 3, 2, 8]","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    elif high == low:\r\n        return arr[low]\r\n    else:\r\n        mid = (low+high)\/\/2\r\n        if arr[low] > arr[mid]:\r\n            return find_Max(arr,low,mid-1)\r\n        elif arr[low] < arr[mid]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return arr[low]\r\n\r\n\r\narr = [1,2,3,4,5,6,7,8,9]\r\n\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n# Time Complexity = O(LogN)\r\n# Space Complexity = O(1)\r\n\r\n\r\n\r\n    \r\n'''\r\n\r\n# Find the max element in a sorted and rotated array using recursion\r\n\r","votes":null},{"text":"\r\n    if high<low:\r\n        return -1\r\n    if high==low:\r\n        return arr[low]\r\n    mid = int((low+high)\/2)\r\n    if arr[mid]>arr[mid+1]:\r\n        return arr[mid]\r\n    elif arr[mid-1]>arr[mid]:\r\n        return arr[mid-1]\r\n    elif arr[mid]>arr[low]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\narr = [5,6,7,8,9,10,1,2,3]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\r","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    mid = (low+high)\/\/2\r\n    if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    elif arr[mid] > arr[mid-1]:\r\n        return find_Max(arr,mid+1,high)\r\n    elif arr[mid] > arr[mid+1]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\narr = [1,3,5,7,9,11,13,15,17,19]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n\r","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = (high + low)\/\/2\r\n        if arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        if arr[mid] < arr[mid-1]:\r\n            return arr[mid+1]\r\n        if arr[mid] > arr[0]:\r\n            return find_Max(arr,low,mid-1)\r\n        return find_Max(arr,mid+1,high)\r\n    return -1\r\n\r\narr = [10, 15, 1, 3, 4, 5, 6, 7, 8, 9]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n# Time Complexity : O(n)\r\n# Space Complexity : O(1)\r\n\r\n# Input : [10, 15, 1, 3, 4, 5, 6, 7, 8, 9]\r\n# Output : 15\r\n\r\n# Input : [11, 12, 13, 1, 2, 3, 4, 5, 6, 7]\r\n# Output : 13\r\n\r\n# Input : [10, 15, 1, 3, 4, 5, 6, 7, 8, 9]\r\n# Output : 10\r\n\r\n# Input : [5, 6, 7, 8, 9, 1, 2, 3, 4]\r\n# Output : 9\r\n\r\n# Input : [11, 12, 13, 1, 2, 3, 4, 5, 6, 7]\r\n# Output : 13\r\n\r\n# Input : [10, 15, 1, 3, 4, 5, 6, 7, 8, 9]\r\n# Output : 15\r\n\r\n","votes":null},{"text":"\r\n    if high>=low:\r\n        mid = (low + high)\/\/2\r\n        if arr[mid]>arr[mid-1] and arr[mid]>arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid]>arr[mid-1] and arr[mid]<arr[mid+1]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n    else:\r\n        return -1\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [15, 18, 2, 3, 4, 5, 1, 6]\r\n    low = 0\r\n    high = len(arr)-1\r\n    print(find_Max(arr,low,high))\r\n\r\n\r","votes":null},{"text":"\r\n    if high>=low:\r\n        mid=(high+low)\/\/2\r\n        if arr[mid]>=arr[low] and arr[mid]>=arr[high]:\r\n            return arr[mid]\r\n        elif arr[mid]<arr[low]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n\r\narr=[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if arr[low] > arr[high]:\r\n        return arr[low]\r\n    mid = (low + high)\/\/2\r\n    if arr[low] < arr[mid] and arr[mid] > arr[high]:\r\n        return arr[mid]\r\n    elif arr[mid] > arr[low]:\r\n        return find_Max(arr, low, mid - 1)\r\n    else:\r\n        return find_Max(arr, mid + 1, high)\r\n\r\n\r\n# Driver code\r\narr = [10, 15, 1, 3, 2, 8]\r\nn = len(arr)\r\nprint(\"The maximum element in a sorted and rotated array is : \" + str(find_Max(arr, 0, n - 1)))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if high < low:\r\n        return -1\r\n    if high == low:\r\n        return arr[low]\r\n    \r\n    mid = low + (high-low)\/\/2\r\n    \r\n    # If element is present at the middle itself\r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n\r\n    # If element is present at the right subarray\r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr, mid+1, high)\r\n    \r\n    # If element is present at the left subarray\r\n    return find_Max(arr, low, mid-1)\r\n\r\n\r","votes":null},{"text":"\r\n    if(high>=low):\r\n        mid = (high+low)\/\/2\r\n        if(mid==0):\r\n            return max(arr[0],arr[high])\r\n        if(arr[mid]>=arr[mid-1] and arr[mid]>=arr[mid+1]):\r\n            return arr[mid]\r\n        if(arr[mid]>arr[high]):\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,2,3,4,5,6,7]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n\r\n# Time Complexity: O(logn), where n is the number of elements in the array.\r\n# Space Complexity: O(1).\r\n\r\n\r\n\r\n# Recursive Approach:\r\n\r","votes":null},{"text":"\r\n    mid = (low+high)\/\/2\r\n    if (low==high) or (arr[low]>arr[high]):\r\n        return arr[low],low\r\n    elif (low+1==high):\r\n        if arr[low]>arr[high]:\r\n            return arr[low],low\r\n        else:\r\n            return arr[high],high\r\n    elif arr[mid]>=arr[low]:\r\n        return find_Max(arr,mid,high)\r\n    else:\r\n        return find_Max(arr,low,mid)\r\n\r","votes":null},{"text":"\r\n    # code here\r\n    if arr[low] > arr[high]:\r\n        return arr[low]\r\n    \r\n    while low <= high:\r\n        mid = (low + high) \/\/ 2\r\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\r\n            return arr[mid]\r\n        elif arr[mid] <= arr[mid - 1]:\r\n            high = mid - 1\r\n        else:\r\n            low = mid + 1\r\n\r\n\r","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if high == low:\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n    if arr[mid] < arr[mid - 1]:\r\n        return arr[mid + 1]\r\n    if arr[mid] > arr[0]:\r\n        return find_Max(arr, 0, mid - 1)\r\n    return find_Max(arr, mid + 1, high)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 3, 8, 12, 4, 2]\r\n    print(find_Max(arr, 0, len(arr)-1))\r\n\r\n\r\n# Time Complexity: O(log n)\r\n# Space Complexity: O(1)\r\n\r\n\r","votes":null},{"text":"\r\n    if(low==high):\r\n        return arr[low]\r\n    if(low==high-1):\r\n        if(arr[low]>=arr[high]):\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    mid=int((low+high)\/2)\r\n    if(mid<high and arr[mid]>arr[mid+1]):\r\n        return arr[mid]\r\n    elif(mid>low and arr[mid]<arr[mid-1]):\r\n        return arr[mid]\r\n    elif(arr[mid]>=arr[low]):\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr=[10, 20, 30, 40, 50, 60, 70]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n    arr=[10, 20, 30, 40, 50, 60, 70, 80]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n    arr=[10, 20, 30, 40, 50, 60, 70, 80, 90]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n    arr=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n    arr=[10, 20, 30, 40, 50, 60, 70, 80, 90,","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = low + (high - low)\/\/2\r\n        if arr[mid] > arr[mid+1] :\r\n            return arr[mid]\r\n        if arr[mid] > arr[0] :\r\n            return find_Max(arr,0,mid-1)\r\n        return find_Max(arr,mid+1,high)\r\n    return arr[0]\r\n\r\narr = [10, 15, 1, 3, 4] \r\nprint(\"The maximum element is : \" + str(find_Max(arr,0,len(arr)-1)))\r\n    \r\narr = [10, 15, 1, 3, 4, 5] \r\nprint(\"The maximum element is : \" + str(find_Max(arr,0,len(arr)-1))) \r\n    \r\narr = [5, 6, 7, 8, 9, 10, 1, 2, 3] \r\nprint(\"The maximum element is : \" + str(find_Max(arr,0,len(arr)-1))) \r\n    \r\narr = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4] \r\nprint(\"The maximum element is : \" + str(find_Max(arr,0,len(arr)-1))) \r\n    \r\narr = [10, 15, 1, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4] \r\nprint(\"The maximum element is : \" + str(find_Max(arr,0,len(arr)-1))) \r\n\r\narr = [10, 15, 1, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5] \r\nprint(\"The maximum element is : ","votes":null},{"text":"\r\n    if arr[low] > arr[high]:\r\n        return arr[low]\r\n    mid = low + (high - low) \/\/ 2\r\n    if arr[low] > arr[mid]:\r\n        return find_Max(arr, low, mid)\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr, mid + 1, high)\r\n    return find_Max(arr, low, high - 1)\r\n\r\n\r\n\r\n\r\narr = [5, 6, 7, 8, 9, 10, 1, 2, 3]\r\n\r\nprint(find_Max(arr, 0, len(arr) - 1))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if low == high:\r\n        return arr[low]\r\n\r\n    mid = (low+high)\/\/2\r\n\r\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n\r\n    elif arr[mid] < arr[mid - 1]:\r\n        return find_Max(arr,0,mid-1)\r\n\r\n    elif arr[mid] > arr[mid + 1]:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,2,3,4,5,6,7,8,9,10]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n    arr = [10,9,8,7,6,5,4,3,2,","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = int((low + high)\/2)\r\n        if arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid] > arr[0]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r\narr = [2,3,4,5,6,7,1,8]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    if low+1 == high:\r\n        if arr[low] < arr[high]:\r\n            return arr[high]\r\n        else:\r\n            return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[high] and arr[mid] > arr[low]:\r\n        return find_Max(arr,low,mid)\r\n    if arr[mid] > arr[high] and arr[mid] < arr[low]:\r\n        return find_Max(arr,mid,high)\r\n    if arr[mid] < arr[high] and arr[mid] > arr[low]:\r\n        return find_Max(arr,mid,high)\r\n    if arr[mid] < arr[high] and arr[mid] < arr[low]:\r\n        return find_Max(arr,low,mid)\r\n    \r\n\r\n\r\narr = [5,6,7,8,9,10,1,2,3]\r\narr1 = [1,2,3,4,5,6,7]\r\narr2 = [10,11,12,13,14,15,16,17,1,2,3,4,5,6,7,8,9]\r\narr3 = [1,2,3,0]\r\narr4 = [1,2,0,3]\r\narr5 = [1,0,3]\r\narr6 = [1,2,4,5,6,7,8,0,3]\r\narr7 = [1,2,3,4,5,6,7,8,9,10]\r\narr8 = [10,11,12,13,14,15,16,17,1,2,3,4,5,6,7,8,9]\r\narr9 = [1,2,3,4,5,6,7,8,","votes":null},{"text":"\r\n    if high>=low:\r\n        mid = (high+low)\/\/2\r\n        if arr[mid]>arr[mid-1] and arr[mid]>arr[mid+1]: #checking the mid element is the max\r\n            return arr[mid]\r\n        if arr[mid]<=arr[mid-1]: #checking the left part is sorted\r\n            return find_Max(arr,low,mid-1)\r\n        else: #checking right part is sorted\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return -1\r\narr=[5,6,7,8,9,10,1,2,3]\r\nlow=0\r\nhigh=len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if high == low:\r\n        return arr[low]\r\n    if high == low + 1:\r\n        if arr[low] > arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n    if arr[mid] < arr[mid - 1]:\r\n        return arr[mid - 1]\r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr,mid,high)\r\n    if arr[mid] < arr[low]:\r\n        return find_Max(arr,low,mid - 1)\r\n\r\n\r\narr = [1,3,5,7,9,11]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [11,13,15,17,19,6,7,5,3,1]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [1,3,5,7,9,11,13,15,17,19,6,7,5,3,1]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [1,2,3,4,5,6,7]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [7,6,5,4,3,2,1]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [7,1,2,3,4,5,6]\r\nn = len(arr)\r\nprin","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    mid = int((low+high)\/2)\r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr,low,mid-1)\r\n    return find_Max(arr,mid+1,high)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = low + (high - low) \/\/ 2\r\n        if arr[mid] > arr[mid + 1]:\r\n            return arr[mid]\r\n        if arr[low] > arr[mid]:\r\n            return find_Max(arr,low,mid - 1)\r\n        return find_Max(arr,mid + 1,high)\r\n\r","votes":null},{"text":"\r\n    if high>=low:\r\n        mid = low + (high-low)\/\/2\r\n        \r\n        if mid==0 or arr[mid]>arr[mid-1]:\r\n            return arr[mid]\r\n        \r\n        elif arr[mid]<arr[mid-1]:\r\n            return find_Max(arr,mid+1,high)\r\n        \r\n        elif arr[mid]>arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n\r\n\r\n\r\n\r\narr = [10,15,1,3,4,5]\r\narr=list(map(int,input().split()))\r\nn = len(arr)\r\n\r\n\r\nprint(find_Max(arr,0,n-1))\r\n\r\n\r\n\r\n\r\n###approach 2\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    if arr[low] > arr[high]:\r\n        return arr[low]\r\n    mid = low + (high - low)\/\/2\r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\"\"\"Test\"\"\"\r\n#arr = [5,6,1,2,3,4]\r\narr = [1,2,3,4,5,6]\r\nlow = 0\r\nhigh = len(arr) - 1\r\nprint(find_Max(arr,low,high))\r\n\r\n#arr = [6,1,2,3,4,5]\r\narr = [6,1,2,3,4,5]\r\nlow = 0\r\nhigh = len(arr) - 1\r\nprint(find_Max(arr,low,high))\r\n\r\n#arr = [1,2,3,4,5,6]\r\narr = [1,2,3,4,5,6]\r\nlow = 0\r\nhigh = len(arr) - 1\r\nprint(find_Max(arr,low,high))\r\n\r\n#arr = [5,6,1,2,3,4]\r\narr = [5,6,1,2,3,4]\r\nlow = 0\r\nhigh = len(arr) - 1\r\nprint(find_Max(arr,low,high))\r\n\r\n#arr = [6,5,1,2,3,4]\r\narr = [6,5,1,2,3,4]\r\nlow = 0\r\nhigh = len(arr) - 1\r\nprint(find_Max(arr,low,high))\r\n\r\n#arr = [1,2,3,4,5,6]\r\narr = [1,2,3,4","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = (high + low) \/\/ 2\r\n        if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid] > arr[mid-1]:\r\n            return find_Max(arr,mid+1,high)\r\n        elif arr[mid] > arr[mid+1]:\r\n            return find_Max(arr,low,mid-1)\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,2,3,4,5,6,7]\r\n    n = len(arr)\r\n    low, high = 0, n-1\r\n    print(find_Max(arr,low,high))\r\n\r\n\r\n# ------------------------------\r\n\r","votes":null},{"text":"\r\n    \r\n    if high >= low:\r\n        mid = low + (high - low)\/\/2\r\n        if (mid < high and arr[mid] > arr[mid+1]):\r\n            return arr[mid]\r\n        elif (mid > low and arr[mid] < arr[mid-1]):\r\n            return arr[mid]\r\n        elif (arr[low] > arr[mid]):\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r\n\r\n\r\n#input\r\narr = [5,6,7,8,9,10,1,2,3]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n\r\n\r\n#output\r\n#10\r\n\r\n\r\n\r\n#another method\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Check base case\r\n    if high < low:\r\n        return -1\r\n    \r\n    # Compare mid with its neighbors\r\n    if arr[low] > arr[high]:\r\n        return arr[low]\r\n    if arr[low] < arr[high]:\r\n        return arr[high]\r\n    \r\n    # Find the mid\r\n    mid = (low + high) \/\/ 2\r\n    \r\n    # Compare mid with its neighbors\r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr,low,mid-1)\r\n    if arr[mid] < arr[low]:\r\n        return find_Max(arr,mid+1,high)\r\n    \r\n    # Return the element\r\n    return arr[mid]\r\n    \r\n    \r\n# Driver code to test the above function\r\narr = [10, 20, 15, 30, 40, 5, 25]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\n\r\n# --------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    elif low + 1 == high:\r\n        if arr[low] > arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    else:\r\n        mid = (low + high) \/\/ 2\r\n        if arr[mid] > arr[mid + 1]:\r\n            return arr[mid]\r\n        elif arr[mid] < arr[mid + 1]:\r\n            return find_Max(arr,mid + 1,high)\r\n        elif arr[mid] == arr[mid + 1]:\r\n            return find_Max(arr,low,mid)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1,2,3,4,5,6,7]\r\n    print(find_Max(arr,0,len(arr) - 1))\r\n    arr = [2,3,4,5,6,7,1]\r\n    print(find_Max(arr,0,len(arr) - 1))\r\n    arr = [7,1,2,3,4,5,6]\r\n    print(find_Max(arr,0,len(arr) - 1))\r\n    arr = [6,7,1,2,3,4,5]\r\n    print(find_Max(arr,0,len(arr) - 1))\r\n    arr = [5,6,7,1,2,3,4]\r\n    print(find_Max(arr,0,len(arr) - 1))\r\n    arr = [4,5,6,7,1,2,3]\r\n    print(find_Max(arr,0,len(arr) - 1))\r\n    arr = [3,4,5,6,7,1,2]\r\n    print(find_Max(arr,0,len(arr) - 1))\r\n    arr = [2,3,","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = int(low + (high-low)\/2)\r\n        if mid < high and arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        elif mid > low and arr[mid] < arr[mid-1]:\r\n            return arr[mid]\r\n        elif mid == 0 and arr[mid] >= arr[mid+1]:\r\n            return arr[mid]\r\n        elif mid == (high-1) and arr[mid] <= arr[mid-1]:\r\n            return arr[mid]\r\n        elif arr[low] >= arr[mid] and arr[mid] > arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        elif arr[low] < arr[mid] and arr[mid] < arr[high]:\r\n            return find_Max(arr,mid+1,high)\r\n        elif arr[low] <= arr[mid] and arr[mid] <= arr[high]:\r\n            return find_Max(arr,mid+1,high)\r\n        elif arr[low] >= arr[mid] and arr[mid] <= arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        elif arr[low] <= arr[mid] and arr[mid] >= arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    if high>=low:\r\n        mid = (high+low)\/\/2\r\n        \r\n        if arr[mid]>arr[mid+1] and arr[mid]>arr[mid-1]:\r\n            return arr[mid]\r\n        elif arr[mid]<=arr[0]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    return arr[0]\r\n\r","votes":null},{"text":"\r\n    \r\n    if high<low:\r\n        return -1\r\n    \r\n    mid=int((low+high)\/2)\r\n    \r\n    if arr[mid]>arr[low]:\r\n        return arr[mid]\r\n    \r\n    if arr[mid]<arr[low]:\r\n        return find_Max(arr,low,mid-1)\r\n    \r\n    return find_Max(arr,mid+1,high)\r\n\r\narr=[10,15,1,3,4,5,7,9,12,13,14,16,18,20]\r\n\r\nprint(\"Maximum Element","votes":null},{"text":"\r\n    if high>=low:\r\n        mid = (high+low)\/\/2\r\n        if mid<high and arr[mid]>arr[mid+1]:\r\n            return arr[mid]\r\n        elif mid>low and arr[mid]<arr[mid-1]:\r\n            return arr[mid]\r\n        elif arr[low]>=arr[mid]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r\narr = [5,6,7,8,9,1,2,3]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n#Time Complexity: O(Logn)\r\n#Space Complexity: O(1)\r\n\r\n#Method 2\r","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = low + (high - low)\/\/2\r\n        if (arr[mid] > arr[mid+1]):\r\n            return arr[mid]\r\n        if arr[mid] > arr[0]:\r\n            return find_Max(arr,low,mid-1)\r\n        return find_Max(arr,mid+1,high)\r\n        \r\n    return arr[0]\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    \r\n    mid = int((low + high)\/2)\r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr,mid+1,high)\r\n    return find_Max(arr,low,mid-1)\r\n\r\nprint(find_Max([7,8,9,10,1,2,3],0,6))\r\nprint(find_Max([1,2,3,4,5,6,7],0,6))\r\nprint(find_Max([10,1,2,3,4,5,6,7,8,9],0,9))\r\nprint(find_Max([10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],0,29))\r\n\r\n# Time Complexity: O(logn)\r\n# Space Complexity: O(1)\r\n\r\n# Alternate Solution\r","votes":null},{"text":"\r\n    if high<low:\r\n        return -1\r\n\r\n    mid = (low+high)\/\/2\r\n    if arr[mid]>arr[mid-1] and arr[mid]>arr[mid+1]:\r\n        return arr[mid]\r\n    elif arr[mid]>arr[mid-1]:\r\n        return find_Max(arr,mid+1,high)\r\n    elif arr[mid]>arr[mid+1]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\narr = [5,6,7,8,9,10,1,2,3]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n\r\n# 6. Write a python function to find the maximum element in a sorted and rotated array.\r","votes":null}],"time":{"count":20.0,"avg":131860.8882,"std":20969.7459499787,"cov":0.1590293091}}
{"id":551,"question":"def extract_column(list1, n):\r\n    \"\"\"Write a function to extract a specified column from a given nested list.\"\"\"","answers":[{"text":"\r\n    return [item[n] for item in list1]\r\n\r\n\r","votes":95729.832},{"text":"\r\n    # Create an empty list\r\n    column = []\r\n    # Iterate over the list of list\r\n    for row in list1:\r\n        # Add the element specified by the column number\r\n        column.append(row[n])\r\n    # Return the column\r\n    return column\r\n\r\n\r\n# Given a list of lists and a column number, extract the column from the list and return it as a list\r\n\r","votes":96848.896},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r","votes":97167.736},{"text":"\r\n    col = []\r\n    for sublist in list1:\r\n        col.append(sublist[n])\r\n    return col\r\n\r\n\r","votes":98046.212},{"text":"\r\n    return [i[n] for i in list1]\r\n\r\n\r","votes":102538.228},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\n# print(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))\r\n\r","votes":103068.416},{"text":"\r\n    output = []\r\n    for list2 in list1:\r\n        output.append(list2[n])\r\n    return output\r\n\r\n\r","votes":103421.332},{"text":"\r\n    return [elem[n] for elem in list1]\r\n\r","votes":104635.784},{"text":"\r\n    column = []\r\n    for i in list1:\r\n        column.append(i[n])\r\n    return column\r\n\r\n\r","votes":105426.948},{"text":"\r\n    column = []\r\n    for i in range(len(list1)):\r\n        column.append(list1[i][n])\r\n    return column\r\n\r\n\r","votes":108381.344},{"text":"\r\n    column = [row[n] for row in list1]\r\n    return column\r\n\r","votes":110175.84},{"text":"\r\n    return [sublist[n] for sublist in list1]\r\n\r\n\r","votes":110211.48},{"text":"\r\n    return [element[n] for element in list1]\r\n\r\n\r","votes":110288.156},{"text":"\r\n    new_list = []\r\n    for i in list1:\r\n        if type(i) is not list:\r\n            new_list.append(i)\r\n        else:\r\n            new_list.append(i[n])\r\n    return new_list\r\n\r\n\r","votes":110520.452},{"text":"\r\n    arr = []\r\n    for i in list1:\r\n        arr.append(i[n])\r\n    return arr\r\n\r\n\r","votes":113970.932},{"text":"\r\n    # Create empty list to store the column values\r\n    extracted_list = []\r\n    # Iterate through the list and add the nth element to the new list\r\n    for element in list1:\r\n        extracted_list.append(element[n])\r\n    return extracted_list\r\n\r\n\r","votes":120023.52},{"text":"\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i][n])\r\n    return result\r\n\r\n\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))\r\n\r\n# %%\r\n# Exercise 2\r\n\"\"\"\r\nWrite a function that takes a list of lists and returns a list of the highest value in each of the inner lists.\r\n\r\nFor example, given the following list:\r\n\r\n[\r\n    [1, 2, 3],\r\n    [4, 5, 6],\r\n    [7, 8, 9]\r\n]\r\n\r\nthe function should return the following list:\r\n\r\n[3, 6, 9]\r\n\r\nThe function should work on any list of lists.\r\n\"\"\"\r\n\r\n\r","votes":121921.74},{"text":"\r\n    \r\n    return [x[n] for x in list1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [[\"name\", \"age\", \"city\"], [\"alex\", 20, \"boston\"], [\"david\", 30, \"new york\"]]\r\n    n = 1\r\n    print(extract_column(list1, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":122074.096},{"text":"\r\n    return [val[n] for val in list1]\r\n\r\n\r","votes":124263.444},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        for j in range(len(list1[i])):\r\n            if j == n:\r\n                new_list.append(list1[i][j])\r\n    return new_list\r\n\r\n\r","votes":126726.836},{"text":"\r\n    new_list = []\r\n    for row in list1:\r\n        if isinstance(row, list):\r\n            new_list.append(row[n])\r\n    return new_list\r\n\r\n\r","votes":126967.472},{"text":"\r\n    new_list = []\r\n    for i in list1:\r\n        new_list.append(i[n])\r\n    return new_list\r\n\r\n\r\nlist1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\r\nn = 1\r\nprint(extract_column(list1, n))\r\n\r\n\r","votes":127813.912},{"text":"\r\n    column = []\r\n    for row in list1:\r\n        try:\r\n            column.append(row[n])\r\n        except IndexError:\r\n            column.append(None)\r\n    return column\r\n\r\n\r","votes":128726.064},{"text":"\r\n    return [sublist[n] for sublist in list1]\r\n\r\n\r\na = [[1, 2], [3, 4], [5, 6], [7, 8]]\r\nprint(extract_column(a, 0))\r\n\r\n\r\n# 03\r","votes":129411.84},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][n])\r\n    return list2\r\n\r\n\r\nlist1 = [['a', 'b', 'c'], ['A', 'B', 'C'], ['1', '2', '3']]\r\nprint(extract_column(list1, 0))\r\n\r\n\r\n###############################################################################################################################\r\n\r\n\r","votes":130323.82},{"text":"\r\n\r\n    return [i[n] for i in list1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [[\"name\", \"age\"], [\"alex\", 32], [\"bob\", 21], [\"clare\", 24]]\r\n    print(extract_column(list1, 0))\r\n    print(extract_column(list1, 1))\r\n\r\n# Output:\r\n# ['","votes":139810.104},{"text":"\r\n    return [sublist[n] for sublist in list1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [[\"name\", \"age\", \"address\", \"phone number\"],\r\n             [\"Jim\", 30, \"London\", \"020 7183 8750\"],\r\n             [\"John\", 27, \"New York\", \"012 232 3456\"],\r\n             [\"Mary\", 22, \"Glasgow\", \"0151 703 4567\"]]\r\n    print(extract_column(list1, 1))\r\n\r\n\r\n# 2. Write a function that returns the sum of a list of integers.\r\n\r","votes":140003.2},{"text":"\r\n    return [i[n] for i in list1]\r\n\r\n\r\nnested_list = [[\"a\", \"b\", \"c\", \"d\"], [\"e\", \"f\", \"g\", \"h\"], [\"i\", \"j\", \"k\", \"l\"]]\r\nprint(extract_column(nested_list, 0))\r\nprint(extract_column(nested_list, 1))\r\nprint(extract_column(nested_list, 2))\r\nprint(extract_column(nested_list, 3))\r\n\r\n\r","votes":142257.292},{"text":"\r\n    \r\n    res = []\r\n    for row in list1:\r\n        res.append(row[n])\r\n    return res\r\n\r\n    \r\n# Test cases\r\n# Test case 1\r\nprint(extract_column([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]], 1))\r\n# expected output:\r\n\"\"\"\r\n['b', 'e', 'h']\r\n\"\"\"\r\n\r\n# Test case 2\r\nprint(extract_column([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]], 0))\r\n# expected output:\r\n\"\"\"\r\n['a', 'd', 'g']\r\n\"\"\"\r\n\r\n# Test case 3\r\nprint(extract_column([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]], 2))\r\n# expected output:\r\n\"\"\"\r\n['c', 'f', 'i']\r\n\"\"\"\r\n","votes":145466.584},{"text":"\r\n\r\n    output = []\r\n    # Iterate through list\r\n    for each in list1:\r\n        # Extract the column\r\n        if isinstance(each, list):\r\n            # Check if n is correct\r\n            if n > len(each) - 1:\r\n                print(\"Incorrect column number\")\r\n            else:\r\n                # Add to output list\r\n                output.append(each[n])\r\n        else:\r\n            # Add to output list\r\n            output.append(each)\r\n    return output\r\n\r\n\r","votes":147763.256},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n    doctest.testmod()\r\n\r\n    # list1 = [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]]\r\n    # print(extract_column(list1, 0))\r\n    # print(extract_column(list1, 2))\r\n\r\n    # list1 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]\r\n    # print(extract_column(list1, 0))\r\n    # print(extract_column(list1, 2))\r\n\r\n    # list1 = [[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\", \"i\", \"j\"], [\"k\", \"l\", \"m\", \"n\", \"o\"]]\r\n    # print(extract_column(list1, 0))\r\n    # print(extract_column(list1, 2))\r\n\r\n    list1 = [[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\", \"i\", \"j\"], [\"k\", \"l\", \"m\", \"n\", \"o\"]]\r\n    print(extract_column(list1, 0))\r\n    print(extract_column(list1, 2))\r\n\r\n    # list1 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]\r\n    # print(extract_column(list1, 0))\r\n    # print(extract_column(list1, 2))\r\n\r\n    # list1 = [[\"a\", \"b\", ","votes":149590.436},{"text":"\r\n    col = []\r\n    for i in list1:\r\n        col.append(i[n])\r\n    return col\r\n\r\n\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\r\nprint(extract_column([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]], 2))\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))\r\n\r\n# output:\r\n# [2, 5, 8]\r\n# ['b', 'e', 'h']\r\n# [1, 4, 7]\r\n\r\n\r","votes":151994.764},{"text":"\r\n    \r\n    new_list = []\r\n    for item in list1:\r\n        new_list.append(item[n])\r\n    return new_list\r\n\r\n\r","votes":154382.88},{"text":"\r\n    columns = []\r\n    for row in list1:\r\n        columns.append(row[n])\r\n    return columns\r\n\r\n\r\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\r\nprint(extract_column(list1, 0))\r\nprint(extract_column(list1, 1))\r\nprint(extract_column(list1, 2))\r\n\r\n\r","votes":158947.844},{"text":"\r\n    column = [item[n] for item in list1]\r\n    return column\r\n\r\n\r","votes":161523.224},{"text":"\r\n    column = []\r\n    for row in list1:\r\n        column.append(row[n])\r\n    return column\r\n\r\n\r","votes":163939.508},{"text":"\r\n\r\n    return [sublist[n] for sublist in list1]\r\n\r\n\r","votes":166559.7},{"text":"\r\n    column = []\r\n    for sublist in list1:\r\n        column.append(sublist[n])\r\n    return column\r\n\r\n\r","votes":166679.5},{"text":"\r\n    col = []\r\n    for i in range(len(list1)):\r\n        col.append(list1[i][n])\r\n    return col\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9]\r\n    ]\r\n\r\n    print(extract_column(list1, 0))\r\n    print(extract_column(list1, 1))\r\n    print(extract_column(list1, 2))\r\n\r\n    # Output:\r\n    # [1, 4, 7]\r\n    # [2, 5, 8]\r\n    # [3, 6, 9]\r\n\r\n\r\n    list2 = [\r\n        [1, 2, 3, 4],\r\n        [5, 6, 7, 8],\r\n        [9, 10, 11, 12]\r\n    ]\r\n\r\n    print(extract_column(list2, 0))\r\n    print(extract_column(list2, 1))\r\n    print(extract_column(list2, 2))\r\n    print(extract_column(list2, 3))\r\n\r\n    # Output:\r\n    # [1, 5, 9]\r\n    # [2, 6, 10]\r\n    # [3, 7, 11]\r\n    # [4, 8, 12]\r\n\r\n\r\n    # Test case for errors\r\n    print(extract_column([1, 2, 3], 1))\r\n\r\n    # Output:\r\n    # Traceback (most recent call last):\r\n    #   File \"Solution.py\", line 16, in <module>\r\n    #     print(extract_column([1, 2, 3], 1))\r\n    #   Fil","votes":167447.132},{"text":"\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i][n])\r\n    return result\r\n\r\n\r\n\r\n#\r\n#","votes":170460.4},{"text":"\r\n    return [x[n] for x in list1]\r\n\r\n# Tests\r","votes":172217.944},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        list2.append(i[n])\r\n    return list2\r\n\r\n\r","votes":174154.312},{"text":"\r\n    return [x[n] for x in list1]\r\n\r\n\r","votes":176254.184},{"text":"\r\n    column = []\r\n    for row in list1:\r\n        if type(row) == list:\r\n            column.append(row[n])\r\n        else:\r\n            column.append(row)\r\n    return column\r\n\r\n\r","votes":186525.888},{"text":"\r\n    column = []\r\n    for i in range(len(list1)):\r\n        column.append(list1[i][n])\r\n    return column\r\n\r\n# list1 = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]\r\n# print(extract_column(list1, 4))\r\n\r\n# # 3. Write a function to replace a specified column in a given nested list with a given replacement value.\"\"\"\r\n#","votes":190972.192},{"text":"\r\n    return [x[n] for x in list1]\r\n\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\r\n\r\n# 3rd way\r","votes":198679.576},{"text":"\r\n    return [x[n] for x in list1]\r\n\r\n\r\nmy_list = [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\r\n\r\nprint(extract_column(my_list, 0))\r\nprint(extract_column(my_list, 1))\r\n\r\n# =============================================================================\r\n# Given a nested list, return a list of the length of each nested list.  For example, if the input is\r\n# [[\"a\", 1], [\"b\", 2], [\"c\", 3]], then the output should be [2, 2, 2].\r\n# =============================================================================\r","votes":203377.084},{"text":"\r\n    output = []\r\n    for item in list1:\r\n        output.append(item[n])\r\n    return output\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]\r\n    print(extract_column(lst, 0))\r\n    print(extract_column(lst, 1))\r\n   ","votes":205719.384},{"text":"\r\n    column = []\r\n    for i in range(len(list1)):\r\n        column.append(list1[i][n])\r\n    return column\r\n\r\n\r\nnested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\nprint(extract_column(nested, 1))\r\n\r\n\r","votes":209594.704},{"text":"\r\n    return [i[n] for i in list1]\r\n\r\n# Test Cases:\r\nprint(extract_column([[1, 2, 3], [4, 5, 6]], 1))\r\nprint(extract_column([[1, 2, 3], [4, 5, 6]], 2))\r\nprint(extract_column([[1, 2, 3], [4, 5, 6]], 0))\r\n\r\n# Extra Credit:\r\n# Write a function that takes a list of lists of lists of integers and returns a list of all integers that occur in all nested lists.\r\n# Write a function that takes a list of lists of lists of integers and returns a list of all integers that occur in any nested list.\r\n# Write a function that takes a list of lists of lists of integers and returns a list of all integers that do not occur in any nested list.\r\n\r","votes":227703.168},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [['name', 'age', 'salary'],\r\n             ['alex', 25, 65000],\r\n             ['bob', 22, 70000],\r\n             ['cindy', 20, 85000]]\r\n    n = 2\r\n    print(extract_column(list1, n))\r\n\r\n\r\n# Output:\r\n# [65000, 70000, 85000]\r\n\r\n\r\n# We can also write this function in one line.\r\n\r\nprint([row[2] for row in list1])\r\n\r\n# Output:\r\n# [65000, 70000, 85000]\r\n\r\n\r\n# If we want to extract the first column, we can do so by changing the\r\n# index value in the list comprehension.\r\n\r\nprint([row[0] for row in list1])\r\n\r\n# Output:\r\n# ['name', 'alex', 'bob', 'cindy']\r\n\r\n\r\n# If we want to extract the last column, we can do so by changing the\r\n# index value in the list comprehension.\r\n\r\nprint([row[-1] for row in list1])\r\n\r\n# Output:\r\n# [65000, 70000, 85000]\r\n\r\n\r\n# If we want to extract the middle column, we can do so by changing the\r\n# index value in the list comprehension.\r\n\r\nprint([row[1] for row in list1])\r\n\r\n# Output","votes":null},{"text":"\r\n\r\n    return [[x[n] for x in i] for i in list1]\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for sublist in list1:\r\n        result.append(sublist[n])\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\r\n    print(extract_column([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], 0))\r\n    print(extract_column([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], 2))\r\n    print(extract_column([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], 1))\r\n    print(extract_column([['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']], 3))\r\n    print(extract_column([['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']], 0))\r\n    print(extract_column([['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']], 2))\r\n    print(extract_column([['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']], 1))\r\n    print(extract_column([['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']], 4))\r\n    print(extract_column([['a', 'b', 'c', 'd'], ['e', 'f', '","votes":null},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\n# test\r\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\nprint(extract_column(list1, 1))\r\n\r\n# output\r\n# [2, 5, 8]\r\n```\r\n\r\n### 3. \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u8be5\u5217\u8868\u4e2d\u7684\u6240\u6709\u5076\u6570\u3002\r\n\r\n```python\r","votes":null},{"text":"\r\n    \r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i][n])\r\n    return result\r\n\r\n\r\n# Test cases\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))\r\nprint(extract_column([[10, 20, 30, 40], [11, 22, 33, 44], [10, 20, 30, 40]], 0))\r\nprint(extract_column([[10, 20, 30], [11, 22, 33], [10, 20, 30]], 2))\r\nprint(extract_column([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], 0))\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\r\nprint(extract_column([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]], 0))\r\nprint(extract_column([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, ","votes":null},{"text":"\r\n\r\n    for index,","votes":null},{"text":"\r\n    if type(list1) is list:\r\n        return [extract_column(element, n) for element in list1]\r\n    else:\r\n        return list1[n]\r\n\r\n# Test Cases\r\n\r\n# Test case 1\r\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\nprint(extract_column(list1, 0))\r\n# Output: [1, 4, 7]\r\n\r\n# Test case 2\r\nlist1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\r\nprint(extract_column(list1, 3))\r\n# Output: [4, 8, 12]\r\n\r\n# Test case 3\r\nlist1 = [[1, 2], [3, 4], [5, 6]]\r\nprint(extract_column(list1, 1))\r\n# Output: [2, 4, 6]\r\n\r\n# Test case 4\r\nlist1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\r\nprint(extract_column(list1, 4))\r\n# Output: []\r\n\r\n# Test case 5\r\nlist1 = [1, 2, 3, 4]\r\nprint(extract_column(list1, 0))\r\n# Output: 1\r\n\r\n# Test case 6\r\nlist1 = [1, 2, 3, 4]\r\nprint(extract_column(list1, 2))\r\n# Output: 3\r\n\r\n# Test case 7\r\nlist1 = [1, 2, 3, 4]\r\nprint(extract_column(list1, 4))\r\n# Output: []\r\n\r\n","votes":null},{"text":"\r\n\r\n    return [row[n] for row in list1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p']]\r\n    print(extract_column(list1, 3))\r\n    print(extract_column(list1, 0))\r\n    print(extract_column(list1, 1))\r\n    print(extract_column(list1, 2))\r\n\r\n    list1 = [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p']]\r\n    print(extract_column(list1, 3))\r\n    print(extract_column(list1, 0))\r\n    print(extract_column(list1, 1))\r\n    print(extract_column(list1, 2))\r\n\r\n    list1 = [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p']]\r\n    print(extract_column(list1, 3))\r\n    print(extract_column(list1, 0))\r\n    print(extract_column(list1, 1))\r\n    print(extract_column(list1, 2))\r\n\r\n    list1 = [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p']]\r\n    print(extract_column(list1, 3))\r\n    print(extract_column(list1, 0))\r\n    print(extract_column","votes":null},{"text":"\r\n    return [element[n] for element in list1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(extract_column([[1,2,3],[4,5,6],[7,8,9]], 1))\r\n    print(extract_column([['a','b','c'],['d','e','f'],['g','h','i']], 0))\r\n    print(extract_column([[1,2,3],[4,5,6],[7,8,9]], 2))\r\n    print(extract_column([['a','b','c'],['d','e','f'],['g','h','i']], 2))\r\n    print(extract_column([[1,2,3],[4,5,6],[7,8,9]], 2))\r\n    print(extract_column([['a','b','c'],['d','e','f'],['g','h','i']], 0))\r\n    print(extract_column([[1,2,3],[4,5,6],[7,8,9]], 1))\r\n    print(extract_column([['a','b','c'],['d','e','f'],['g','h','i']], 2))\r\n    print(extract_column([[1,2,3],[4,5,6],[7,8,9]], 2))\r\n    print(extract_column([['a','b','c'],['d','e','f'],['g','h','i']], 0))\r\n    print(extract_column([[1,2,3],[4,5,6],[7,8,9]], 2))\r\n    print(extract_column([['a','b','c'],['d','e','f'],['g','h','i']], 1))\r\n    print(extract_column([[1,2,3],[4,5,6],[7,8,9]], 2))\r\n    print(extract_column([['a','b','c'],['d','e','f'],['g','h','i'","votes":null},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [\r\n        [1, 2, 3, 4],\r\n        [5, 6, 7, 8],\r\n        [9, 10, 11, 12],\r\n        [13, 14, 15, 16],\r\n    ]\r\n    print(extract_column(list1, 2))\r\n\r\n    list2 = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n        [10, 11, 12],\r\n    ]\r\n    print(extract_column(list2, 2))\r\n\r\n    list3 = [\r\n        [1, 2],\r\n        [3, 4],\r\n        [5, 6],\r\n        [7, 8],\r\n    ]\r\n    print(extract_column(list3, 1))\r\n\r\n    list4 = [\r\n        [1, 2, 3, 4, 5],\r\n        [6, 7, 8, 9, 10],\r\n        [11, 12, 13, 14, 15],\r\n        [16, 17, 18, 19, 20],\r\n    ]\r\n    print(extract_column(list4, 4))\r\n\r\n    list5 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\r\n    print(extract_column(list5, 1))\r\n\r\n    list6 = [\r\n        [1, 2, 3],\r\n        [4, 5","votes":null},{"text":"\r\n    \r\n    list2 = []\r\n    for i in list1:\r\n        if type(i) is list:\r\n            list2.append(i[n])\r\n        else:\r\n            list2.append(i)\r\n    return list2\r\n\r\nlist1 = [1, [2,3], 4, [5,6,7,8], 9, [[10,11,12,13],14]]\r\nn = 1\r\nprint(extract_column(list1, n))\r\n\r\nlist1 = [1, [2, 3], 4, [5, 6, 7, 8], 9, [[10, 11, 12, 13], 14]]\r\nn = 2\r\nprint(extract_column(list1, n))\r\n\r\nlist1 = [1, [2, 3], 4, [5, 6, 7, 8], 9, [[10, 11, 12, 13], 14]]\r\nn = 3\r\nprint(extract_column(list1, n))\r\n\r\nlist1 = [1, [2, 3], 4, [5, 6, 7, 8], 9, [[10, 11, 12, 13], 14]]\r\nn = 4\r\nprint(extract_column(list1, n))\r\n\r\nlist1 = [1, [2, 3], 4, [5, 6, 7, 8], 9, [[10, 11, 12, 13], 14]]\r\nn = 10\r\nprint(extract_column(list1, n))\r\n\r\nlist1 = [1, [2, 3], 4, [5, 6, 7, 8], 9, [[10, 11, 12, 13], 14]]\r\nn = 10","votes":null},{"text":"\r\n    if not list1:\r\n        return None\r\n    elif type(list1[0]) != list:\r\n        return [list1[i][n] for i in range(len(list1))]\r\n    else:\r\n        return [list1[i][n] for i in range(len(list1))] + extract_column(list1[0], n)\r\n\r\n\r","votes":null},{"text":"\r\n    return [i[n] for i in list1]\r\n\r\n\r\n# Test Code\r\nprint(extract_column([[1, 2], [3, 4], [5, 6]], 0))\r\nprint(extract_column([[1, 2], [3, 4], [5, 6]], 1))\r\nprint(extract_column([['bob', 'hope'], ['you', 'enjoy'], ['your', 'day']], 0))\r\nprint(extract_column([['bob', 'hope'], ['you', 'enjoy'], ['your', 'day']], 1))\r\nprint(extract_column([['bob', 'hope'], ['you', 'enjoy'], ['your', 'day']], 0))\r\nprint(extract_column([['bob', 'hope'], ['you', 'enjoy'], ['your', 'day']], 1))\r\nprint(extract_column([['bob', 'hope'], ['you', 'enjoy'], ['your', 'day']], 0))\r\nprint(extract_column([['bob', 'hope'], ['you', 'enjoy'], ['your', 'day']], 1))\r\nprint(extract_column([['bob', 'hope'], ['you', 'enjoy'], ['your', 'day']], 0))\r\nprint(extract_column([['bob', 'hope'], ['you', 'enjoy'], ['your', 'day']], 1))\r\nprint(extract_column([['bob', 'hope'], ['you', 'enjoy'], ['your', 'day']], 0))\r\nprint(extract_column([['bob', 'hope'], ['","votes":null},{"text":"\r\n\r\n    column = []\r\n    for idx, val in enumerate(list1):\r\n        if idx == n:\r\n            column.append(val)\r\n    return column\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_list1 = [1, [2, [3, 4, 5]], [6, [7, 8, 9]]]\r\n    test_n = 0\r\n    print(extract_column(test_list1, test_n))\r\n\r\n    test_list2 = [1, [2, [3, 4, 5]], [6, [7, 8, 9]]]\r\n    test_n2 = 1\r\n    print(extract_column(test_list2, test_n2))\r\n\r\n    test_list3 = [1, [2, [3, 4, 5]], [6, [7, 8, 9]]]\r\n    test_n3 = 2\r\n    print(extract_column(test_list3, test_n3))\r\n\r\n    test_list4 = [1, [2, [3, 4, 5]], [6, [7, 8, 9]]]\r\n    test_n4 = 3\r\n    print(extract_column(test_list4, test_n4))\r\n\r\n    test_list5 = [1, [2, [3, 4, 5]], [6, [7, 8, 9]]]\r\n    test_n5 = 4\r\n    print(extract_column(test_list5, test_n5))\r\n\r\n    test_list6 = [1, [2, [3, 4, 5]], [6, [7, 8, 9]]]\r\n    test_n6 = 5\r\n    print(extract_column(test_list6, test_n6))\r\n\r\n    test_list7 = [1, [2, [3, 4, 5]], ","votes":null},{"text":"\r\n    return [i[n] for i in list1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert extract_column([['a', 'b', 'c'], [1, 2, 3]], 1) == ['b', 2], \"Example\"\r\n    assert extract_column([['a', 1, 'b', 2], [1, 2, 'b', 4], [1, 'b', 3, 4]], 0) == ['a', 1, 1], \"Two rows\"\r\n    assert extract_column([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 3) == [4, 8, 12, 16], \"Four rows\"\r\n    assert extract_column([[1, 2], [3, 4], [5, 6]], 1) == [2, 4, 6], \"Two columns\"\r\n    print(\"Coding complete? Click 'Check' to earn cool","votes":null},{"text":"\r\n\r\n    column = []\r\n\r\n    for row in list1:\r\n        column.append(row[n])\r\n\r\n    print(column)\r\n\r\n\r\nlist1 = [['P', 'A', 'T', 'T', 'E', 'R', 'S'],\r\n         ['O', 'N', 'E', 'Y', 'E', 'A', 'R'],\r\n         ['T', 'W', 'O', 'S', 'A', 'N', 'D'],\r\n         ['T', 'H', 'R', 'E', 'E', 'N', 'S']]\r\n\r\nprint(extract_column(list1, 2))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return [[row[n] for row in list1]]\r\n\r\n\r","votes":null},{"text":"\r\n    return [[i[n] for i in list1]]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n    ]\r\n\r\n    print(extract_column(list1, 0))\r\n    print(extract_column(list1, 1))\r\n    print(extract_column(list1, 2))\r\n\r\n\r\n\r\n\"\"\"\r\n[[1], [4], [7]]\r\n[[2], [5], [8]]\r\n[[3], [6], [9]]\r\n\"\"\"\r\n\r\n\r\n\r\n\"\"\"\r\n\r\n\r\nfrom itertools import zip_longest\r\n\r","votes":null},{"text":"\r\n    \r\n    column = []\r\n    for row in list1:\r\n        column.append(row[n])\r\n    return column\r\n \r\n# Test Code\r\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\r\nprint(extract_column(list1, 1))\r\n\r\nlist2 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(extract_column(list2, 2))\r\n\r\nlist3 = [[1, 2], [3, 4], [5, 6]]\r\nprint(extract_column(list3, 1))\r\n\r\nlist4 = [[1], [2], [3], [4], [5], [6]]\r\nprint(extract_column(list4, 1))\r\n\r\n# 1st try\r\n\r\n#","votes":null},{"text":"\r\n    lst = []\r\n    for l in list1:\r\n        if type(l) is list:\r\n            for elem in l:\r\n                if type(elem) is list:\r\n                    lst.append(elem[n])\r\n                else:\r\n                    lst.append(elem)\r\n        else:\r\n            lst.append(l[n])\r\n    return lst\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        for j in range(len(list1[0])):\r\n            if j == n:\r\n                print(list1[i][j], end=' ')\r\n\r\n\r\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\nprint(extract_column(list1, 2))\r\n\r\n\r","votes":null},{"text":"\r\n    for i in list1:\r\n        if isinstance(i, list):\r\n            yield extract_column(i, n)\r\n        else:\r\n            yield i[n]\r\n\r\n\r","votes":null},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n        [10, 11, 12],\r\n    ]\r\n    print(extract_column(list1, 2))\r\n\r\n    list1 = [\r\n        [\"red\", \"green\", \"blue\"],\r\n        [\"black\", \"red\", \"yellow\"],\r\n        [\"blue\", \"black\", \"yellow\"],\r\n        [\"yellow\", \"white\", \"red\"],\r\n    ]\r\n    print(extract_column(list1, 1))\r\n\r\n    list1 = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n        [10, 11, 12],\r\n    ]\r\n    print(extract_column(list1, 0))\r\n\r\n    list1 = [\r\n        [\"red\", \"green\", \"blue\"],\r\n        [\"black\", \"red\", \"yellow\"],\r\n        [\"blue\", \"black\", \"yellow\"],\r\n        [\"yellow","votes":null},{"text":"\r\n    \r\n    return [x[n] for x in list1]\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [['a',1], ['b',2]]\r\n    print(extract_column(list1, 0))\r\n    print(extract_column(list1, 1))\r\n\r\n    list2 = [['a',1,['b',2]], ['c',3,['d',4]]]\r\n    print(extract_column(list2, 0))\r\n    print(extract_column(list2, 1))\r\n    print(extract_column(list2, 2))\r\n\r\n    list3 = [['a',1,['b',2,['c',3]]], ['d',4,['e',5,['f',6]]]]\r\n    print(extract_column(list3, 0))\r\n    print(extract_column(list3, 1))\r\n    print(extract_column(list3, 2))\r\n    print(extract_column(list3, 3))\r\n\r\n    # Testing:\r\n    # 1. Allowed input types are list of list, list of tuple and tuple of tuple.\r\n    # 2. If there are any non-list or non-tuple element in the input list, it should return None.\r\n    # 3. Input list cannot be empty.\r\n    # 4. If column index is out of range, it should return None.\r\n\r\n    # Test 1:\r\n    assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\r\n    assert extract_column([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == [1, 4, 7]\r\n    assert extract_column([(1, 2, 3), (4, 5, ","votes":null},{"text":"\r\n    return [[row[n] for row in list1]]\r\n\r\n\r\n# Test cases:\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\r\nprint(extract_column([[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120]], 3))\r\nprint(extract_column([[100, 200, 300], [400, 500, 600], [700, 800, 900], [1000, 1100, 1200]], 2))\r\nprint(extract_column([[10000, 20000, 30000, 40000], [50000, 60000, 70000, 80000], [90000, 100000, 110000, 120000]], 0))\r\nprint(extract_column([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 3))\r\nprint(extract_column([[100, 200, 300, 400], [500, 600, 700, 800], [900, 1000, 1100, 1200]], 2))\r\n","votes":null},{"text":"\r\n    try:\r\n        for i in list1:\r\n            for j in range(len(i)):\r\n                if j == n:\r\n                    print(i[j])\r\n    except Exception as e:\r\n        print('Error: {}'.format(e))\r\n\r\n\r","votes":null},{"text":"\r\n    columns = []\r\n    for row in list1:\r\n        columns.append(row[n])\r\n    return columns\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [\r\n        [\"a\", \"b\", \"c\"],\r\n        [\"d\", \"e\", \"f\"],\r\n        [\"g\", \"h\", \"i\"]\r\n    ]\r\n    print(extract_column(list1, 1))\r\n    print(extract_column(list1, 2))\r\n    print(extract_column(list1, 0))\r\n    print(extract_column([[], [], []], 0))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n) where n is the number of rows in the nested list.\r\nSPACE COMPLEXITY: O(n) where n is the number of rows in the nested list.\r\n\"\"\"\r\n\r\n\"\"\"\r\nTEST CASES:\r\n\r\n[['a', 'b', 'c'],\r\n ['d', 'e', 'f'],\r\n ['g', 'h', 'i']]\r\n\r\n[['a', 'b', 'c'],\r\n ['d', 'e', 'f'],\r\n ['g', 'h', 'i']]\r\n\r\n[['a', 'b', 'c'],\r\n ['d', 'e', 'f'],\r\n ['g', 'h', 'i']]\r\n\r\n[","votes":null},{"text":"\r\n    for i in list1:\r\n        if isinstance(i, list):\r\n            return extract_column(i, n)\r\n        else:\r\n            return i[n]\r\n\r\n\r\nlist1 = [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]\r\nprint(extract_column(list1, 0))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return [[i[n] for i in list1]]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    result = []\r\n    for item in list1:\r\n        if isinstance(item, list):\r\n            result.append(extract_column(item, n))\r\n        elif isinstance(item, int):\r\n            result.append(item)\r\n        elif isinstance(item, str):\r\n            result.append(item)\r\n        else:\r\n            raise Exception(f\"Wrong type of data: {item}!\")\r\n\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\r\n    n = 2\r\n    print(f\"extract_column({list1}, {n}) returns:\")\r\n    print(extract_column(list1, n))\r\n\r\n    list1 = [[0, 5, 1], [\"a\", \"b\", \"c\"], [2, 3, 4], [10, 11, 12]]\r\n    n = 3\r\n    print(f\"extract_column({list1}, {n}) returns:\")\r\n    print(extract_column(list1, n))\r\n\r\n    list1 = [[0, 5, 1], [\"a\", \"b\", \"c\"], [2, 3, 4], [10, 11, 12]]\r\n    n = 0\r\n    print(f\"extract_column({list1}, {n}) returns:\")\r\n    print(extract_column(list1, n))\r\n\r\n    list1 = [[0, 5, 1], [\"a\", \"b\", \"c\"], [2, 3, 4], [10, 11, 12]]\r\n    n = 1\r\n    print(f\"extract_column({list1}, {n}) returns:\")\r\n    print(extract_column(list1, n))\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for sublist in list1:\r\n        for item in sublist:\r\n            if type(item) == list:\r\n                for element in item:\r\n                    new_list.append(element)\r\n            else:\r\n                new_list.append(item)\r\n    return [i[n] for i in new_list]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(extract_column([1, [2, 3], 4], 1))\r\n    print(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\r\n    print(extract_column([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, ","votes":null}],"time":{"count":50.0,"avg":142014.17184,"std":34617.6972958064,"cov":0.2437622728}}
{"id":554,"question":"def Split(list):\r\n    \"\"\"Write a python function to find odd numbers from a mixed list.\"\"\"","answers":[{"text":"\r\n    odd_list = []\r\n    for item in list:\r\n        if item % 2 == 1:\r\n            odd_list.append(item)\r\n    return odd_list\r\n\r\n\r","votes":76604.136},{"text":"\r\n    odd_list =[]\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n\r\n\r","votes":82950.132},{"text":"\r\n    odd = []\r\n    for item in list:\r\n        if item % 2 != 0:\r\n            odd.append(item)\r\n    return odd\r\n\r\n\r","votes":83538.116},{"text":"\r\n    return [i for i in list if i % 2]\r\n\r\n\r","votes":87748.012},{"text":"\r\n    odds = []\r\n    for item in list:\r\n        if item % 2 != 0:\r\n            odds.append(item)\r\n    return odds\r\n\r\n\r","votes":88124.24},{"text":"\r\n    odd_numbers = []\r\n    for num in list:\r\n        if num % 2 == 1:\r\n            odd_numbers.append(num)\r\n    return odd_numbers\r\n\r\n\r","votes":88686.94},{"text":"\r\n    odds = [x for x in list if x % 2 != 0]\r\n    return odds\r\n\r\n\r","votes":88742.08},{"text":"\r\n    odds = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odds.append(i)\r\n    return odds\r\n\r\n\r","votes":90555.692},{"text":"\r\n    oddlist = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 == 1:\r\n            oddlist.append(list[i])\r\n    return oddlist\r\n\r\n\r","votes":90936.696},{"text":"\r\n\r\n    odds = []\r\n\r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 == 1:\r\n                odds.append(i)\r\n\r\n    return odds\r\n\r\n\r","votes":92458.636},{"text":"\r\n    # list = [1, 2, 3, 4, 5]\r\n    odd = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 != 0:\r\n            odd.append(list[i])\r\n    return odd\r\n\r\n\r","votes":92475.764},{"text":"\r\n    odd_numbers = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 != 0:\r\n            odd_numbers.append(list[i])\r\n    return odd_numbers\r\n\r\n\r","votes":93203.536},{"text":"\r\n    odd = []\r\n    for x in list:\r\n        if x % 2 != 0:\r\n            odd.append(x)\r\n    return odd\r\n\r\n\r\nprint(Split([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n\r\n\r","votes":93834.428},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":95318.18},{"text":"\r\n    odds = []\r\n    for num in list:\r\n        if num%2 == 1:\r\n            odds.append(num)\r\n    return odds\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n#-----------------------------------------------------------------------------------------------------\r\n\r","votes":98173.588},{"text":"\r\n    #create an empty list to store odd numbers\r\n    OddList = []\r\n    #iterate through the list\r\n    for i in list:\r\n        #if the number is odd, add it to the empty list\r\n        if (i % 2) == 1:\r\n            OddList.append(i)\r\n    #return the list\r\n    return OddList\r\n\r\n#create a list\r\nList = [1,2,3,4,5,6,7,8,9,10]\r\n#call the function\r\nOddList = Split(List)\r\n#print the list\r\nprint(OddList)\r\n\r\n\r\n\r\n\r\n#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n#Write a python program to find the sum of first and last elements of a list.\r","votes":100112.644},{"text":"\r\n    odd_list=[]\r\n    for i in list:\r\n        if i%2!=0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\nlist1=[1,2,3,4,5,6,7,8,9]\r\nprint(Split(list1))\r\n\r\n\r\n\"\"\"Write a python function to find odd numbers from a mixed list.\"\"\"\r\n\r","votes":101407.212},{"text":"\r\n    \r\n    result = []\r\n    \r\n    for i in list:\r\n        if i % 2 == 1:\r\n            result.append(i)\r\n            \r\n    return result\r\n    \r\nif __name__ == \"__main__\":\r\n    print(Split([1,2,3,4,5,6,7,8,9,10]))","votes":101485.328},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if (i % 2 != 0):\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n\r\n\r\n# 3\r","votes":102375.904},{"text":"\r\n    OddNumberList = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            OddNumberList.append(i)\r\n    return OddNumberList\r\n\r\n\r","votes":103485.928},{"text":"\r\n    s = []\r\n    for i in range(len(list)):\r\n        if(list[i] % 2 != 0):\r\n            s.append(list[i])\r\n    return s\r\n\r\n\r\nlist = [2, 5, 3, 7, 9, 19, 17, 1, 15, 13, 11, 10]\r\nprint(list)\r\nprint(\"Result :\", Split(list))\r\n\r\n\"\"\"\r\n\r\nSample Input :\r\nlist = [2, 5, 3, 7, 9, 19, 17, 1, 15, 13, 11, 10]\r\nSample Output :\r\n[2, 5, 3, 7, 9, 19, 17, 1, 15, 13, 11, 10]\r\nResult : [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\r\n\r\n\"\"\"\r\n\r\n\r","votes":104237.184},{"text":"\r\n    odd = []\r\n    for x in list:\r\n        if x % 2 == 1:\r\n            odd.append(x)\r\n    return odd\r\n\r\n\r","votes":105167.552},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i%2 != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\n\r\n\r\n# 5. Write a Python function to find the most frequent number in a given list of numbers.\r\n\r","votes":107847.688},{"text":"\r\n    # write your code here\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":108784.144},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r","votes":109275.264},{"text":"\r\n    new_list=[]\r\n    for i in list:\r\n        if i%2==1:\r\n            new_list.append(i)\r\n            \r\n    return new_list\r\n\r\n\r\nprint(Split([1,2,3,4,5]))\r\n\r\n#2. Write a python program to create a function that will compute the sum of two numbers.\"\"\"\r\n\r","votes":112165.288},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":113126.108},{"text":"\r\n    odd = []\r\n    for k in list:\r\n        if k % 2 != 0:\r\n            odd.append(k)\r\n    return odd\r\n\r\n\r","votes":114684.592},{"text":"\r\n    odd = []\r\n\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n\r\n    return odd\r\n\r\n\r","votes":115191.164},{"text":"\r\n    result = []\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            continue\r\n        result.append(i)\r\n    return result\r\n\r","votes":116425.396},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i%2 != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r","votes":117452.632},{"text":"\r\n    return [x for x in list if x % 2 != 0]\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n\r\n\r","votes":117552.54},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":119992.948},{"text":"\r\n    return [x for x in list if x % 2 != 0]\r\n\r\n\r","votes":120047.508},{"text":"\r\n    list1 = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            list1.append(i)\r\n    return list1\r\n\r","votes":121594.652},{"text":"\r\n    # Return the odd numbers in a list\r\n    return [i for i in list if i % 2]\r\n\r\n\r","votes":126511.192},{"text":"\r\n    Odds = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            Odds.append(i)\r\n    return Odds\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n# 2. List Comprehension\r","votes":127384.528},{"text":"\r\n    odds = []\r\n    for i in range(len(list)):\r\n        if type(list[i]) == int:\r\n            if list[i] % 2 != 0:\r\n                odds.append(list[i])\r\n    return odds\r\n\r\n\r","votes":129060.332},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(Split(list))\r\n\r\n\r\n# 11.Write a Python program to compute the square root of a given number. Do not use the built-in function.\r","votes":132716.728},{"text":"\r\n    \r\n    odd = []\r\n    \r\n    for i in range(0, len(list)):\r\n        if list[i] % 2 != 0:\r\n            odd.append(list[i])\r\n            \r\n    return odd\r\n\r","votes":136322.064},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]))\r\nprint(Split([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0]))\r\nprint(Split([0, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0]))\r\nprint(Split([0, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0]))\r\n\r\n\r\n\r\n\r","votes":137752.696},{"text":"\r\n    odd_list = []\r\n    for num in list:\r\n        if num % 2 != 0:\r\n            odd_list.append(num)\r\n    return odd_list\r\n\r\n\r","votes":140617.344},{"text":"\r\n\r\n    # list comprehension\r\n    return [i for i in list if i % 2]\r\n\r\n\r\n# Main\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(Split(list))\r\n\r\n\r","votes":144097.496},{"text":"\r\n    newlist = []\r\n    for i in list:\r\n        if i%2 != 0:\r\n            newlist.append(i)\r\n    return newlist\r\n\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\n\r\n\r\n\r","votes":147476.68},{"text":"\r\n    odds = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odds.append(i)\r\n    return odds\r\n\r\n\r\nprint(Split([3, 4, 5, 6, 7, 8, 1, 8, 9, 10]))\r\n\r\n\r","votes":147491.256},{"text":"\r\n    oddList = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            oddList.append(i)\r\n    return oddList\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n# Another Solution:\r\n\r\n\r","votes":148679.008},{"text":"\r\n    oddnums = []\r\n    for x in list:\r\n        if x % 2 == 1:\r\n            oddnums.append(x)\r\n    return oddnums\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n\r\n\r\n# 4. Write a python function to find the total number of vowels and consonant in a string.\r","votes":149649.164},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nlist = [2, 3, 6, 4, 1, -4, 7, 9]\r\nprint(Split(list))\r\n\r\n\r\n\r\n# Q4. Write a Python program to find the difference between the maximum and minimum of a list.\r","votes":153224.044},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    myList = [1, 2, 2, 3, 5, 6, 7, 8, 9, 10]\r\n    print(\"The list of odd numbers is: \", Split(myList))\r\n\r\n# Output\r\n# The list of odd numbers is:  [1, 3, 5, 7, 9]\r\n\r\n\r\n# Python Program to find the length of a string\r\n\r","votes":163560.884},{"text":"\r\n    \r\n    OddNumbers = []\r\n    \r\n    for i in list:\r\n        if i % 2 != 0:\r\n            OddNumbers.append(i)\r\n            \r\n    return OddNumbers\r\n\r","votes":168492.408},{"text":"\r\n    odds = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odds.append(i)\r\n    return odds\r\n\r\n\r","votes":169444.54},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\r\n\r\n\r","votes":183585.06},{"text":"\r\n    # Create a list to store the odd numbers\r\n    odd_list = []\r\n    # Iterate through the list\r\n    for item in list:\r\n        # Check if the item is odd\r\n        if item % 2 != 0:\r\n            # Add the item into the odd list\r\n            odd_list.append(item)\r\n    # Return the odd list\r\n    return odd_list\r\n\r\n\r\n# Test the function\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n# Output:\r\n# [1, 3, 5, 7, 9]\r\n\r\n\r","votes":186772.352},{"text":"\r\n    odd = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 != 0:\r\n            odd.append(list[i])\r\n    return odd\r\n\r\n\r","votes":193776.208},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            continue\r\n        else:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n\r","votes":194475.476},{"text":"\r\n    return [i for i in list if i%2 == 1]\r\n\r","votes":204215.036},{"text":"\r\n    new_list = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            new_list.append(i)\r\n    return new_list\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\n\r\n# 06\r","votes":215397.028},{"text":"\r\n    \r\n    List = []\r\n    \r\n    for i in range(len(list)):\r\n        if list[i] % 2 != 0:\r\n            List.append(list[i])\r\n    return List\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    \r\n    print(Split(list))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":228892.96},{"text":"\r\n    return [i for i in list if i % 2 != 0]\r\n\r\nif __name__ == '__main__':\r\n    list = [1,2,3,4,5,6,7,8,9]\r\n    print(Split(list))\r\n\r\n# Output : [1, 3, 5, 7, 9]\r\n\r\n# Explanation : Here the list contains 9 elements, so we will get 9 odd numbers from the list.\r\n\r\n\r\n\r\n\"\"\"\r\n\r\n\r\n\r\nExpected Time Complexity: O(N)\r\n\r\nExpected Auxiliary Space: O(N)\r\n\r\n\r\n\r\nConstraints:\r\n\r\n1 <= N <= 105\r\n\r\n-100 <= A[i] <= 100\r\n\r\n\"\"\"\r\n\r\n\r\n# Python3 program to find all odd numbers from a list\r\n\r\n# Function to find all odd numbers from a list\r\n\r","votes":263900.064},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odd.append(i)\r\n    print(odd)\r\n\r\n\r","votes":null},{"text":"\r\n    if not list:\r\n        return \"Empty List\"\r\n    else:\r\n        odds = []\r\n        for i in list:\r\n            if type(i","votes":null},{"text":"\r\n    list_of_odd = []\r\n    list_of_even = []\r\n    for num in list:\r\n        if num % 2 == 0:\r\n            list_of_even.append(num)\r\n        else:\r\n            list_of_odd.append(num)\r\n    return list_of_odd, list_of_even\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\r\n    print(Split(lst))\r\n\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n\r\n    # defining two empty lists\r\n    even = []\r\n    odd = []\r\n    # using for loop to iterate over the list\r\n    for i in list:\r\n        # checking if the current number is divisible by 2\r\n        if i % 2 == 0:\r\n            # appending the even number to the list\r\n            even.append(i)\r\n        else:\r\n            # appending the odd number to the list\r\n            odd.append(i)\r\n\r\n    # printing the odd numbers\r\n    print(\"The odd numbers are: \", odd)\r\n\r\n    # printing the even numbers\r\n    print(\"The even numbers are: \", even)\r\n\r\n\r\n# taking input from the user as a list\r\nlist = list(map(int, input(\"Enter the list: \").split()))\r\n\r\n# calling the function\r\nSplit(list)\r\n\r\n'''\r\n\r\nSAMPLE","votes":null},{"text":"\r\n    list.sort()\r\n    odd = []\r\n    for i in range(0, len(list)):\r\n        if list[i] % 2 != 0:\r\n            odd.append(list[i])\r\n    return odd\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, ","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for x in list:\r\n        if x % 2 == 0:\r\n            even.append(x)\r\n        else:\r\n            odd.append(x)\r\n    return odd, even\r\n\r\nif __name__ == '__main__':\r\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(Split(list_))\r\n\r\n# output: ([1, 3, 5, 7, 9], [2, 4, 6, 8])\r\n\r\n# 2. Write a python function to find the middle element from a list.\r\n\r","votes":null},{"text":"\r\n    print(\"List of numbers:\", list)\r\n    print(\"Odd numbers:\", [i for i in list if i % 2 != 0])\r\n\r\n\r\nSplit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    for n in list:\r\n        if type(n) == int:\r\n            if n % 2 == 1:\r\n                odd.append(n)\r\n    return odd\r\n\r\nprint(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,1","votes":null},{"text":"\r\n\r\n    odd = []\r\n    even = []\r\n\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return odd,even\r\n\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10","votes":null},{"text":"\r\n    \r\n    # return [i for i in list if i%2]\r\n    return list(filter(lambda x:x%2, list))\r\n\r\n\r","votes":null},{"text":"\r\n    Odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            Odd.append(i)\r\n    print(Odd)\r\n\r\n\r","votes":null},{"text":"\r\n    # list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    odd_list = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 != 0:\r\n            odd_list.append(list[i])\r\n    print(\"The odd numbers are: \", odd_list)\r\n\r\n\r\nif __name__ == '__main__':\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    Split(list)\r\n\r\n'''\r\nTime Complexity : O(n)\r\nSpace Complexity : O(n)\r\n\r\nInput:\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nOutput:\r\nThe odd numbers are:  [1, 3, 5, 7, 9]\r\n'''\r\n\r\n'''\r\nTime Complexity : O(n)\r\nSpace Complexity : O(1)\r\n\r\nInput:\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nOutput:\r\nThe odd numbers are:  [1, 3, 5, 7, 9]\r\n'''\r\n\r\n'''\r\nTime Complexity : O(n)\r\nSpace Complexity : O(n)\r\n\r\nInput:\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nOutput:\r\nThe odd numbers are:  [1, 3, 5, 7, 9]\r\n'''\r\n\r\n'''\r\nTime Complexity : O(n)\r\nSpace Complexity : O(n)\r\n\r\nInput:\r\n[1, 2, 3, 4, 5, 6","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for x in list:\r\n        if x % 2 == 0:\r\n            even.append(x)\r\n        else:\r\n            odd.append(x)\r\n    return odd, even\r\n\r\n\r\n# Test\r\nif __name__ == '__main__':\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for num in list:\r\n        if num % 2 == 0:\r\n            even.append(num)\r\n        else:\r\n            odd.append(num)\r\n    return odd, even\r\n\r\n\r","votes":null},{"text":"\r\n    list2 = [x for x in list if x%2 != 0]\r\n    print(list2)\r\nlist = [1,2,3,4,5,6,7,8,9,10]\r\nSplit(list)\r\n\r\n\r","votes":null},{"text":"\r\n    odd = 0\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd += 1\r\n    return odd\r\n\r\n\r\nprint(Split([1, 2, 4, 5, 7, 9]))\r\n\r\n\r\n# 24. Write a python function to find the sum of all elements in a given list.\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    return [x for x in list if x % 2 == 1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14","votes":null},{"text":"\r\n    print(\"Odd numbers from a mixed list: \", end=\"\")\r\n    for x in list:\r\n        if x % 2 != 0:\r\n            print(x, end=\" \")\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n\r\n    for x in list:\r\n        if x % 2 == 0:\r\n            even.append(x)\r\n        else:\r\n            odd.append(x)\r\n    return odd, even\r\n\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nprint(Split(a))\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    print(\"Even numbers are:\", even)\r\n    print(\"Odd numbers are:\", odd)\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 != 0:\r\n            odd.append(list[i])\r\n        else:\r\n            even.append(list[i])\r\n    return odd, even\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    print(odd)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # create a list to store the odd numbers\r\n    odd_numbers = []\r\n\r\n    # iterate over the list\r\n    for i in list:\r\n\r\n        # check if the element is an odd number\r\n        if i % 2 != 0:\r\n\r\n            # if it is, append it to the odd_numbers list\r\n            odd_numbers.append(i)\r\n\r\n    # return the list\r\n    return odd_numbers\r\n\r\n# test\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 1, 1, 1, 1, 1, 2]))\r\nprint(Split([1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9","votes":null},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i%2==1:\r\n            odd_list.append(i)\r\n    print(odd_list)\r\n\r","votes":null},{"text":"\r\n    odds = []\r\n    for i in list:\r\n        if i%2 != 0:\r\n            odds.append(i)\r\n    print(odds)\r\n\r\n\r","votes":null},{"text":"\r\n    oddlist = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            oddlist.append(i)\r\n    print(oddlist)\r\n\r\n\r\nif __name__ == '__main__':\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print('The list: ', list)\r\n    Split(list)\r\n\r\n\r\n\"\"\"\r\nOutput:\r\nThe list:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n[1, 3, 5, 7, 9]\r\n\r\nTime Complexity: O(N)\r\nSpace Complexity: O(N)\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    odd_list = []\r\n    even_list = []\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            even_list.append(i)\r\n        else:\r\n            odd_list.append(i)\r\n    return odd_list, even_list\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # empty list\r\n    odd = []\r\n    \r\n    # check for odd numbers\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n            \r\n    # print result        \r\n    print(odd)\r\n    \r\n# test\r\nSplit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\n\r\n#%%\r\n\r","votes":null},{"text":"\r\n    return filter(lambda x: x % 2, list)\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n\r\n\r","votes":null},{"text":"\r\n    odd_nums = []\r\n\r\n    for num in list:\r\n        if num % 2 == 1:\r\n            odd_nums.append(num)\r\n\r\n    return odd_nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\n    print(Split([12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\n    print(Split([12, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(Split([12,","votes":null},{"text":"\r\n    \r\n    print(\"The list is: \", list)\r\n    \r\n    odd_list = []\r\n    \r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 != 0:\r\n                odd_list.append(i)\r\n        \r\n    print(\"The odd list is: \", odd_list)\r\n    \r\n    return odd_list\r\n\r\nlist = [1, 'a', 5, 'b', 7, 'c', 9, 'd']\r\n\r\nprint(\"------------------------------------\")\r\n\r\nSplit(list)\r\n\r\nprint(\"------------------------------------\")\r\n\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nprint(\"------------------------------------\")\r\n\r\nSplit(list)\r\n\r\nprint(\"------------------------------------\")\r\n\r\nlist = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\r\n\r\nprint(\"------------------------------------\")\r\n\r\nSplit(list)\r\n\r\nprint(\"------------------------------------\")\r\n\r\nlist = [1, 'a', 5, 2, 'b', 7, 3, 'c', 9, 4, 'd']\r\n\r\nprint(\"------------------------------------\")\r\n\r\nSplit(list)\r\n\r\nprint(\"------------------------------------\")\r\n\r\nlist = [1, 'a', 5, 2, 'b', 7, 3, 'c', 9, 4, 'd', 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n\r\nprint(\"------------------------------------\")\r\n\r\nSplit(list)\r\n\r\nprint(\"------------------------------------\")\r\n\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1","votes":null},{"text":"\r\n    odd = []\r\n    for element in list:\r\n        if element % 2 != 0:\r\n            odd.append(element)\r\n    return odd\r\n\r\n\r\nif __name__ == \"__main__\":\r\n   ","votes":null},{"text":"\r\n    # list of odd numbers\r\n    odd_list = []\r\n\r\n    # checking each element in the list\r\n    for element in list:\r\n        # if the element is odd\r\n        if element % 2 != 0:\r\n            # adding element to odd_list\r\n            odd_list.append(element)\r\n\r\n    # returning odd_list\r\n    return odd_list\r\n\r\n# input list\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n# calling Split function\r\nodd_list = Split(list)\r\n\r\n# printing the odd_list\r\nprint(odd_list)\r\n\r\n# Calling the function\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n# printing the list\r\nprint(list)\r\n\r\n# printing the Split function\r\nprint(Split(list))\r\n\r\n# Calling the function\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n# printing the list\r\nprint(list)\r\n\r\n# printing the Split function\r\nprint(Split(list))\r\n\r\n# Calling the function\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n# printing the list\r\nprint(list)\r\n\r\n# printing the Split function\r\nprint(Split(list))\r\n\r\n# Calling the function\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n# printing the list\r\nprint(list)\r\n\r\n# printing the Split function\r\nprint(Split(list))\r\n\r\n# Calling the function\r\nlist = [1, 2, 3","votes":null},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if type(i) == int or type(i) == float:\r\n            if i%2 == 1:\r\n                odd.append(i)\r\n        else:\r\n            pass\r\n    return odd\r\n\r\nlist = [1,2,'a',3,4,5,'b',6,7,8,9,10,'c']\r\n\r\nprint(Split(list))\r\n\r\n# Reference\r\n\r\n'''\r\n1. https:\/\/www.geeksforgeeks.org\/python-function-to-find-odd-numbers-from-a-mixed-list\/\r\n2. https:\/\/www.w3resource.com\/python-exercises\/python-basic-exercise-22.php\r\n3. https:\/\/www.programiz.com\/python-programming\/list-comprehension\r\n4. https:\/\/www.programiz.com\/python-programming\/methods\/list\/remove\r\n5. https:\/\/stackoverflow.com\/questions\/3929961\/how-to-remove-the-first-item-from-a-list-in-python\r\n6. https:\/\/www.programiz.com\/python-programming\/methods\/list\/pop\r\n7. https:\/\/www.programiz.com\/python-programming\/methods\/list\/insert\r\n8. https:\/\/stackoverflow.com\/questions\/3940128\/how-can-i-append-multiple-items-to-a-list-at-once\r\n9. https:\/\/www.programiz.com\/python-programming\/methods\/list\/append\r\n10. https:\/\/www.programiz.com\/python-programming\/methods\/list\/extend\r\n11. https:\/\/stackoverflow.com\/questions\/252703\/what-is-the-python-yield-keyword-used-for\r\n12. https:\/\/www.programiz.com\/python-programming\/keyword-argument\r\n13. https:\/\/www.geeksforgeeks.org\/args-kwargs-python\/\r\n1","votes":null},{"text":"\r\n    odd_numbers=[]\r\n    for num in list:\r\n        if num%2!=0:\r\n            odd_numbers.append(num)\r\n    return odd_numbers\r\n\r\n# Test Code\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\nprint(Split([1,2,3,44,5,6,7,8,9,10]))\r\nprint(Split([1,2,3,44,5,6,7,8,9,10,22]))\r\nprint(Split([1,2,3,44,5,6,7,8,9,10,22]))\r\nprint(Split([1,2,3,44,5,6,7,8,9,10,22,33,44,55,66","votes":null}],"time":{"count":59.0,"avg":127953.4983050848,"std":40360.8496836654,"cov":0.3154337335}}
{"id":555,"question":"def difference(n) :\r\n    \"\"\"Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\"\"\"","answers":[{"text":"\r\n    sum_n = 0\r\n    sum_c = 0\r\n    for i in range(1,n+1):\r\n        sum_n += i\r\n        sum_c += (i**3)\r\n    return sum_c - sum_n\r\n\r\n\r","votes":66672.628},{"text":"\r\n    \r\n    sum1=0\r\n    for i in range(1,n+1):\r\n        sum1=sum1+(i**3)\r\n    sum2=0\r\n    for i in range(1,n+1):\r\n        sum2=sum2+i\r\n    return sum1-sum2\r\n\r","votes":69770.012},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1, n+1) :\r\n        sum1 = sum1 + i**3\r\n        sum2 = sum2 + i\r\n    return sum1 - sum2\r\n\r","votes":77590.492},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1, n+1):\r\n        sum1 += i**3\r\n        sum2 += i\r\n    return sum1 - sum2\r\n\r","votes":86151.108},{"text":"\r\n\r\n    sum_cube = 0\r\n    sum_natural = 0\r\n\r\n    for i in range(1, n + 1) :\r\n        sum_cube += i ** 3\r\n        sum_natural += i\r\n\r\n    return sum_cube - sum_natural\r\n\r","votes":87681.728},{"text":"\r\n    # Solution\r\n    return sum([(i**3) for i in range(1, n+1)]) - (n*(n+1)\/\/2)\r\n\r\n# Sample Input-Output\r\nprint(difference(6))\r\n# Output:\r\n# 17\r\n\r\nprint(difference(10))\r\n# Output:\r\n# 45\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# Method 2\r\n\r","votes":90394.756},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_numbers = 0\r\n    for i in range(n + 1):\r\n        sum_of_cubes += i**3\r\n        sum_of_numbers += i\r\n    return sum_of_cubes - sum_of_numbers\r\n\r\n\r","votes":90423.376},{"text":"\r\n    first_sum = 0\r\n    second_sum = 0\r\n    for i in range(1,n+1):\r\n        first_sum = first_sum + (i**3)\r\n        second_sum = second_sum + i\r\n    return first_sum - second_sum\r\n\r\n\r\n# Main Function\r","votes":90910.012},{"text":"\r\n    return sum(i**3 for i in range(1, n+1)) - sum(i for i in range(1, n+1))\r\n\r","votes":92092.3},{"text":"\r\n\r\n    sum_cube = 0\r\n    sum_natural = 0\r\n\r\n    for i in range(1, n+1):\r\n        sum_cube += (i ** 3)\r\n        sum_natural += i\r\n    return(sum_cube - sum_natural)\r\n\r\n\r\nprint(difference(5))\r\n\r\n\r\n# Exercise 5\r\n\r","votes":94636.768},{"text":"\r\n    #Return the difference\r\n    return sum(i**3 for i in range(1,n+1)) - sum(i for i in range(1,n+1))\r\n\r\n#Output of the code\r\nprint(difference(10))\r\n\r\n\r\n#Question 3\r\n#Write a python function that takes a list of numbers and returns the sum of the squares of only the even indexed elements.\r","votes":94949.392},{"text":"\r\n    a = b = 0\r\n    for i in range(1, n+1):\r\n        a += i**3\r\n        b += i\r\n    return a - b\r\n\r\nif __name__ == '__main__':\r\n    print(difference(10))\r\n\r\n\r\n#Method 2\r","votes":96199.232},{"text":"\r\n    return sum([i**3 for i in range(1, n+1)]) - sum([i for i in range(1, n+1)])\r\nprint(difference(4))\r\n\r\n\r","votes":96370.188},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_numbers = 0\r\n    for i in range(n+1):\r\n        sum_of_cubes += i**3\r\n        sum_of_numbers += i\r\n    return sum_of_cubes - sum_of_numbers\r\n\r","votes":98583.872},{"text":"\r\n    \r\n    sum_cubes=0\r\n    sum_numbers=0\r\n    \r\n    for i in range(1,n+1) :\r\n        sum_cubes=sum_cubes+(i**3)\r\n        sum_numbers=sum_numbers+i\r\n        \r\n    return sum_cubes-sum_numbers\r\n\r\nprint(difference(10))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":99184.036},{"text":"\r\n    return sum(x**3 for x in range(1,n+1))-sum(x for x in range(1,n+1))\r\n\r\n\r","votes":100382.056},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_first_n_natural_num = 0\r\n    for i in range(1, n + 1) :\r\n        sum_of_cubes += i ** 3\r\n        sum_of_first_n_natural_num += i\r\n    return sum_of_cubes - sum_of_first_n_natural_num\r\n\r\n\r","votes":101425.708},{"text":"\r\n    sum_of_cubes = 0\r\n    for i in range(1, n + 1):\r\n        sum_of_cubes += (i ** 3)\r\n    sum_of_numbers = (n * (n + 1)) \/ 2\r\n    return sum_of_cubes - sum_of_numbers\r\n\r\nprint(difference(10))\r\n\r\n\r","votes":102164.488},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1,n+1):\r\n        sum1 += i**3\r\n        sum2 += i\r\n    return sum1 - sum2\r\n\r\n    #sum1 = 0\r\n    #sum2 = 0\r\n    #for i in range(1,n+1):\r\n    #    sum1 += i**3\r\n    #    sum2 += i\r\n    #return sum1 - sum2\r\n\r\nif __name__ == '__main__':\r\n    print(difference(100))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":103994.34},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_natural_numbers = 0\r\n    for a in range(1,n+1):\r\n        sum_of_cubes = sum_of_cubes + a**3\r\n        sum_of_natural_numbers = sum_of_natural_numbers + a\r\n    return sum_of_cubes - sum_of_natural_numbers\r\nprint(difference(5))\r\n\r\n# 4\r","votes":106960.984},{"text":"\r\n    \r\n    sum1 = sum(i**3 for i in range(n+1))\r\n    sum2 = sum(i for i in range(n+1))\r\n    return sum1 - sum2\r\n\r","votes":106983.0},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1,n+1):\r\n        sum1 = sum1 + (i**3)\r\n        sum2 = sum2 + i\r\n    return sum1 - sum2\r\nprint(difference(5))\r\n\r\n#2.Write a python program to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\r","votes":107239.04},{"text":"\r\n    sum1 = sum([x**3 for x in range(1,n+1)])\r\n    sum2 = sum([x for x in range(1,n+1)])\r\n    return sum1-sum2\r\n\r\n\r\n    #another way to do this\r\n   ","votes":108352.016},{"text":"\r\n    n = int(n)\r\n    a = 0\r\n    b = 0\r\n    for i in range(1, n+1):\r\n        a += i**3\r\n        b += i\r\n    return a - b\r\n\r\n\r\nprint(difference(3))\r\n\r\n'''\r\nOutput :\r\n5\r\n'''\r\n\r\n# Code by Saket Modi\r\n\r\n# Other Method\r\n\r","votes":108903.192},{"text":"\r\n    x=0\r\n    y=0\r\n    for i in range(1,n+1):\r\n        x=x+(i**3)\r\n        y=y+i\r\n    return x-y\r\n\r\nprint(difference(3))\r\n\r\n\r\n\"\"\"Question 9\r\nWrite a python function to find the factorial of a given number.\"\"\"\r\n\r","votes":109361.516},{"text":"\r\n    sum1 = sum(i**3 for i in range(n+1))\r\n    sum2 = sum(i for i in range(n+1))\r\n    return sum1-sum2\r\n\r\n# Program to find factorial of a number\r","votes":110946.632},{"text":"\r\n    sum_cubes = 0\r\n    sum_numbers = 0\r\n    for i in range(n):\r\n        sum_cubes = sum_cubes + (i+1)**3\r\n        sum_numbers = sum_numbers + (i+1)\r\n    print(\"The sum of cubes is\", sum_cubes)\r\n    print(\"The sum of numbers is\", sum_numbers)\r\n    return sum_cubes - sum_numbers\r\n\r","votes":113823.116},{"text":"\r\n    a=[]\r\n    for i in range(1,n+1):\r\n        a.append(i**3)\r\n    sum1=sum(a)\r\n    a=[]\r\n    for i in range(1,n+1):\r\n        a.append(i)\r\n    sum2=sum(a)\r\n    result=sum1-sum2\r\n    return result\r\n\r\nprint(difference(4))\r\nprint(difference(9))\r\nprint(difference(16))\r\n\r","votes":114029.62},{"text":"\r\n    sum_first_n = 0\r\n    sum_cubes = 0\r\n    for i in range(1, n + 1):\r\n        sum_first_n += i\r\n        sum_cubes += i * i * i\r\n    return sum_cubes - sum_first_n\r\n\r","votes":114412.848},{"text":"\r\n\r\n    # initialize variables\r\n    sum_cubes = 0\r\n    sum_numbers = 0\r\n    \r\n    # find the sum of cubes\r\n    for i in range(1,n+1):\r\n        sum_cubes += i**3\r\n    \r\n    # find the sum of numbers\r\n    for i in range(1,n+1):\r\n        sum_numbers += i\r\n    \r\n    # return the difference\r\n    return sum_cubes - sum_numbers\r\n    \r\nprint(difference(3))    # 27\r\nprint(difference(5))    # 153\r\nprint(difference(10))   # 3025\r\nprint(difference(15))","votes":116795.168},{"text":"\r\n\r\n    sum_of_cubes = 0\r\n    sum_of_natural_numbers = 0\r\n    \r\n    for i in range(1, n+1):\r\n        sum_of_cubes += i**3\r\n        sum_of_natural_numbers += i\r\n    \r\n    return sum_of_cubes - sum_of_natural_numbers\r\n\r\n\r","votes":119777.692},{"text":"\r\n    # sum of cubes of first n natural numbers\r\n    a = sum(i ** 3 for i in range(1, n + 1))\r\n    # sum of first n natural numbers\r\n    b = sum(i for i in range(1, n + 1))\r\n    # find the difference\r\n    return a - b\r\n\r\n\r","votes":121261.572},{"text":"\r\n\r\n    sum_of_cubes=0\r\n    sum_of_numbers=0\r\n    for i in range(1,n+1):\r\n        sum_of_cubes+=i**3\r\n        sum_of_numbers+=i\r\n    return sum_of_cubes-sum_of_numbers\r\n\r\nprint(difference(4))\r\nprint(difference(6))\r\n\r\n# Output:\r\n# 9\r\n# 63\r\n\r\n\r\n\r\n#--------------\r\n# 5. Write a Python program to check if a given number is a multiple of 5.\r\n\r","votes":123032.472},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_squares = 0\r\n    for i in range(1, n+1):\r\n        sum_of_cubes += i**3\r\n        sum_of_squares += i\r\n    return sum_of_cubes - sum_of_squares\r\n\r","votes":123283.8},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_natural_numbers = 0\r\n    for i in range(n+1):\r\n        sum_of_cubes = sum_of_cubes + (i ** 3)\r\n        sum_of_natural_numbers = sum_of_natural_numbers + i\r\n    return sum_of_cubes - sum_of_natural_numbers\r\n\r\nif __name__ == \"__main__\":\r\n    print(difference(5))\r\n    \r\n\r\n\"\"\"\r\nTest Case 1:\r\nInput:\r\nn = 5\r\nOutput:\r\n15\r\n\r\nTest Case 2:\r\nInput:\r\nn = 10\r\nOutput:\r\n3025\r\n\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n\r\n\r\n# 3rd method\r\n\r","votes":124286.052},{"text":"\r\n    return sum(i**3 for i in range(1,n+1)) - sum(i for i in range(1,n+1))\r\n\r\n# Sample Output\r\n# Enter the value of n:\r\n# 10\r\n# The difference is 3025\r\n\r\n\r\n# Example 2:\r\n# Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\r\n# Sample Output\r\n# Enter the value of n:\r\n# 100\r\n# The difference is 9450\r\n\r","votes":126250.004},{"text":"\r\n    x = 0\r\n    for i in range(1,n+1):\r\n        x += i**3\r\n    y = 0\r\n    for i in range(1,n+1):\r\n        y += i\r\n    return x - y\r\n\r\n#test\r\nprint(difference(10))\r\n\r\n\r","votes":130491.816},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum += i**3\r\n    sum2 = 0\r\n    for i in range(1,n+1):\r\n        sum2 += i\r\n    return sum-sum2\r\n\r\nprint(difference(n=5))\r\n\r","votes":130921.304},{"text":"\r\n    \r\n    sumOfCubes = 0\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sumOfCubes += (i**3)\r\n        sum += i\r\n    return sumOfCubes - sum\r\n\r\n\r\n#","votes":132627.0},{"text":"\r\n    \r\n    sum1 = 0\r\n    for i in range(1,n+1):\r\n        sum1 = sum1 + i\r\n    sum2 = 0\r\n    for i in range(1,n+1):\r\n        sum2 = sum2 + (i**3)\r\n    return sum2 - sum1\r\n\r\nprint(difference(100))\r\n\r\n# 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":133172.912},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_numbers = 0\r\n    for i in range(1, n+1) :\r\n        sum_of_cubes += i**3\r\n        sum_of_numbers += i\r\n    return sum_of_cubes - sum_of_numbers\r\n\r\n\r\nprint(\"Difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is : \", difference(5))\r\n\r\n\r\n\r\n\r\n#3. Write a python function to find the sum of first n natural numbers and the sum of first n square numbers.\r\n\r","votes":134964.784},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    sum3 = 0\r\n    for i in range(1, n+1):\r\n        sum1 += i\r\n        sum2 += i * i * i\r\n    return sum2 - sum1\r\n\r\nprint(difference(10)) # 1755\r\nprint(difference(100)) # 33233250\r\n\r\n# sum1 = 0\r\n# sum2 = 0\r\n# for i in range(1, n+1):\r\n#     sum1 += i\r\n#     sum2 += i ** 3\r\n# return sum2 - sum1\r\n\r\n# Alternative solution\r\n\r","votes":136696.764},{"text":"\r\n    \r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1, n+1):\r\n        sum1 += i ** 3\r\n        sum2 += i\r\n    return sum1 - sum2\r\n\r\nprint(difference(10))\r\nprint(difference(25))\r\nprint(difference(50))\r\n\r\n\r","votes":137072.232},{"text":"\r\n    sum_n = sum(range(1, n+1))\r\n    sum_n_cubed = sum([i**3 for i in range(1, n+1)])\r\n    \r\n    return sum_n_cubed - sum_n\r\n\r","votes":137625.216},{"text":"\r\n    \r\n    sum_cube = 0\r\n    sum_natural = 0\r\n    count = 0\r\n    while count < n:\r\n        sum_cube += (count + 1)**3\r\n        sum_natural += count + 1\r\n        count += 1\r\n    return sum_cube - sum_natural\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    print(difference(n))\r\n\r\n# Example\r\n# If the following n = 3, then the output should be\r\n\r\n# Input:\r\n# 3\r\n\r\n# Output:\r\n# 23\r\n\r\n# Explanation\r\n# The difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is (1**3 + 2**3 + 3**3) - (1 + 2 + 3) = 23.\r\n\r\n# Example 2\r\n# If the following n = 2, then the output should be\r\n\r\n# Input:\r\n# 2\r\n\r\n# Output:\r\n# 17\r\n\r\n# Explanation\r\n# The difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is (1**3 + 2**3) - (1 + 2) = 17.\r\n\r\n# Example 3\r\n# If the following n = 7, then the output should be\r\n\r\n# Input:\r\n# 7\r\n\r\n# Output:\r\n# 182\r\n\r\n# Explanation\r\n# The difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is (1**3 + 2**3 + 3**3 + 4","votes":139433.372},{"text":"\r\n\r\n    # Write your code here\r\n    n1 = 0\r\n    n2 = 0\r\n    for i in range(1,n+1):\r\n        n1 += i**3\r\n        n2 += i\r\n    return n1 - n2\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter the value of n: \"))\r\n    print(difference(n))\r\n\r\n# Example Input\r\n# Enter the value of n: 3\r\n\r\n# Example Output\r\n# 27\r\n\r\n# Example Explanation\r\n# The sum of cubes of first n natural numbers is 1^3 + 2^3 + 3^3 = 36. \r\n# The sum of first n natural numbers is 1 + 2 + 3 = 6. \r\n# So, the difference is 36 - 6 = 27.\r\n\r\n\r\n\r\n# Test case 2\r\n# Input\r\n# Enter the value of n: 7\r\n\r\n# Output\r\n# 220\r\n\r\n# Test case 3\r\n# Input\r\n# Enter the value of n: 10\r\n\r\n# Output\r\n# 3330\r\n\r\n# Time Complexity: O(N)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Python Program for the above approach\r","votes":144529.688},{"text":"\r\n    sum_of_cubes_of_first_n_natural_numbers = sum(i**3 for i in range(1, n+1))\r\n    sum_of_first_n_natural_numbers = sum(range(1, n+1))\r\n    return sum_of_cubes_of_first_n_natural_numbers - sum_of_first_n_natural_numbers\r\n\r\n\r\nprint(\"Difference:\", difference(10))\r\n\r\n\r\n\"\"\"\r\nDifference: 3025\r\n\r\n\"\"\"\r\n\r\n# Using For Loop\r\n\r","votes":167992.4},{"text":"\r","votes":null},{"text":"\r\n    s1 = 0\r\n    s2 = 0\r\n    for i in range(1, n+1):\r\n        s1 = s1 + (i**3)\r\n        s2 = s2 + i\r\n    return s1 - s2\r\n\r\nprint(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is: \", difference(int(input(\"Enter a positive integer: \"))))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Sample Input\/Output\r\n\r\n# Enter a positive integer: 5\r\n# The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is:  15","votes":null},{"text":"\r\n    print(\"Enter the number n : \")\r\n    n = int(input())\r\n    sum_of_cubes = 0\r\n    sum_of_numbers = 0\r\n    for i in range(1,n+1):\r\n        sum_of_cubes = sum_of_cubes + (i*i*i)\r\n        sum_of_numbers = sum_of_numbers + i\r\n    print(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is : \",sum_of_cubes-sum_of_numbers)\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    sum_cubes = 0\r\n    for i in range(n+1):\r\n        sum += i\r\n        sum_cubes += i**3\r\n    \r\n    return sum_cubes - sum\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter a number: \"))\r\n    print(difference(n))\r\n\r\n\r\n'''\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(n+1):\r\n        total += i\r\n    return total**3 - sum([i**3 for i in range(n+1)])\r\n\r\n\r\n# Tests\r\nprint(difference(1))\r\nprint(difference(2))\r\nprint(difference(3))\r\nprint(difference(4))\r\nprint(difference(5))\r\nprint(difference(6))\r\nprint(difference(7))\r\nprint(difference(8))\r\nprint(difference(9))\r\nprint(difference(10))\r\n\r\n# Output\r\n#","votes":null},{"text":"\r\n    # 1 + 2 + 3 + ... + n\r\n    # n(n+1)\/2\r\n   ","votes":null},{"text":"\r\n    n = int(n)\r\n    sum_cubes = 0\r\n    sum_numbers = 0\r\n    for i in range(1, n + 1):\r\n        sum_cubes = sum_cubes + i ** 3\r\n        sum_numbers = sum_numbers + i\r\n    return sum_cubes - sum_numbers\r\n\r\n\r\nn = int(input(\"Enter a Number: \"))\r\nprint(\"The difference between sum of cubes of first\", n, \"natural numbers and the sum of first\", n, \"natural numbers is:\", difference(n))\r\n\r\n# Test case:\r\n# Enter a Number: 10\r\n# The difference between sum of cubes of first 10 natural numbers and the sum of first 10 natural numbers is: 225\r\n\r\n\r","votes":null},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(n+1):\r\n        sum1 = sum1 + i**3\r\n        sum2 = sum1 + sum2\r\n    return sum1 - sum2\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is: \",difference(int(input(\"Enter a number: \"))))\r\n    print(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is: \",difference(10))\r\n    print(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is: \",difference(100))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1","votes":null},{"text":"\r\n    s=0\r\n    a=0\r\n    for i in range(1,n+1):\r\n        a=i**3\r\n        s=s+a\r\n    return s\r\nprint(\"The Difference of sum of cubes of first n natural numbers and the sum of first n natural numbers is\",difference(n))\r\n\r\n\r","votes":null},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_numbers = 0\r\n    for i in range(1,n+1):\r\n        sum_of_cubes += i**3\r\n        sum_of_numbers += i\r\n    print(\"The difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is:\", sum_of_cubes - sum_of_numbers)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    a = 0\r\n    b = 0\r\n    for i in range(1,n+1):\r\n        a = a + i\r\n        b = b + i ** 3\r\n    print(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is \", b-a)\r\n\r","votes":null},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(n+1):\r\n        sum1 += i**3 \r\n        sum2 += i\r\n    return sum2 - sum1\r\n\r\nprint(difference(5))\r\n\r","votes":null},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1,n+1):\r\n        sum1 = sum1 + i**3\r\n        sum2 = sum2 + i\r\n    return sum1 - sum2\r\n\r\n# Driver code\r\nn = int(input(\"Enter a number: \"))\r\nprint(f\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is {difference(n)}\")\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    \r\n    # sum of cubes of first n natural numbers\r\n    a = 0\r\n    for i in range(1, n+1) :\r\n        a += (i**3)\r\n    \r\n    # sum of first n natural numbers\r\n    b = (n*(n+1))\/\/2\r\n    \r\n    # difference\r\n    c = b - a\r\n    \r\n    # printing\r\n    print(f\"Sum of cubes of first {n} natural numbers is {a}\")\r\n    print(f\"Sum of first {n} natural numbers is {b}\")\r\n    print(f\"Difference between the two sums is {c}\")\r\n    \r\n    \r\n# main\r\nif __name__ == \"__main__\" :\r\n    \r\n    n = int(input(\"Enter the value of n : \"))\r\n    difference(n)\r\n    \r\n    ","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        sum += i ** 3\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    return (n*(n+1)\/\/2)**3 - sum(i**3 for i in range(1, n+1))\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the number of terms: \"))\r\n    print(difference(n))\r\n\r\n# Input:\r\n# Enter the number of terms: 10\r\n\r\n# Output:\r\n# 220\r\n\r\n\r","votes":null},{"text":"\r\n    a = 0\r\n    b = 0\r\n    for i in range(n+1):\r\n        a += i ** 3\r\n        b += i\r\n    return a - b\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the number : \"))\r\n    print(difference(n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity ","votes":null},{"text":"\r\n    \r\n    print(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is:\")\r\n    print(sum(i**3 for i in range(1,n+1)) - sum(i for i in range(1,n+1)))\r\n    \r\ndifference(20)\r\n\r","votes":null},{"text":"\r\n    summ = 0\r\n    for i in range(1,n+1):\r\n        summ += (i**3)\r\n    return summ\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    s = 0\r\n    s1 = 0\r\n    for i in range(1,n+1):\r\n        s=s+i\r\n        s1=s1+(i**3)\r\n\r\n    print(s1-s)\r\n\r\ndifference(5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    return ((((n * (n + 1)) \/\/ 2) ** 2 - (n * (n + 1) \/\/ 2) ** 3))\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    sum2 = 0\r\n    \r\n    for i in range(1,n+1):\r\n        sum += i**3\r\n        sum2 += i\r\n        \r\n    return sum - sum2\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter a number: \"))\r\n    print(difference(n))\r\n    \r\n\"\"\"\r\nOUTPUT\r\n\r\nEnter a number: 10\r\n220\r\n\r\nEnter a number: 20\r\n2310\r\n\r\nEnter a number: 30\r\n5830\r\n\r\nEnter a number: 40\r\n11400\r\n\r\nEnter a number: 50\r\n19020\r\n\r\nEnter a number: 60\r\n31280\r\n\r\nEnter a number: 70\r\n55740\r\n\r\nEnter a number: 80\r\n84640\r\n\r\nEnter a number: 90\r\n121950\r\n\r\nEnter a number: 100\r\n166150\r\n\r\nTime Complexity : O(n)\r\nSpace Complexity : O(1)\r\n\"\"\"\r\n\r\n\"\"\"\r\nDIFFERENCE BETWEEN SUM OF CUBES OF FIRST N NATURAL NUMBERS AND THE SUM OF FIRST N NATURAL NUMBERS.\r\n\r\nExplanation:\r\nLet us assume n = 10, then the sum of cubes of first n natural numbers would be 220 and the sum of first n natural numbers would be 55.\r\nThe difference between the above two sums would be 220 - 55 = 165.\r\n\r\nExample 2:\r\nLet us assume n = 20, then the sum of cubes of first n natural numbers would be 2310 and the sum of first ","votes":null},{"text":"\r\n    return (sum(i*i*i for i in range(1, n+1))) - sum(i for i in range(1, n+1))\r\n\r\n# sum of cubes of first 10 natural numbers\r\n# 3025\r\n# sum of first 10 natural numbers\r\n# 55\r\n# difference 3025 - 55 = 3070\r\n\r\nn = int(input(\"Enter a value for n : \"))\r\nprint(\"Difference between sum of cubes of first \",n,\" natural numbers and the sum of first \",n,\" natural numbers is \", difference(n))\r\n\r\n\r\n\r\n\r\n# Q4. Write a python program to compute the sum of the squares of the first n positive integers.\r\n\r","votes":null},{"text":"\r\n\r\n    cube_sum = 0\r\n    n_sum = 0\r\n    for i in range(1,n+1):\r\n        cube_sum += i**3\r\n        n_sum += i\r\n    return cube_sum - n_sum\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the value of n : \"))\r\n    print(\"The","votes":null},{"text":"\r\n    sum_cubes = 0\r\n    sum_numbers = 0\r\n    for i in range(1, n + 1):\r\n        sum_cubes += i ** 3\r\n        sum_numbers += i\r\n    return print(f\"The difference between Sum of cubes of first {n} natural numbers and the sum of first {n} natural numbers is {sum_numbers - sum_cubes}\")\r\n\r\nprint('Enter the number of terms: ')\r\nn = int(input())\r\ndifference(n)\r\n\r\n'''\r\nOUTPUT:\r\nEnter the number of terms:\r\n10\r\nThe difference between Sum of cubes of first 10 natural numbers and the sum of first 10 natural numbers is 990\r\n'''\r\n\r\n# Method-2:\r","votes":null},{"text":"\r\n    sumcube = 0\r\n    sumnatural = 0\r\n    for i in range(n+1):\r\n        sumcube = sumcube + (i**3)\r\n        sumnatural = sumnatural + i\r\n    return sumcube - sumnatural\r\n\r\nprint(difference(int(input())))\r\n\r\n#-------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(n+1):\r\n        sum1 += (i**3)\r\n        sum2 += i\r\n    return (sum1 - sum2)\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input('Enter the value of n : '))\r\n    print(f'The difference between sum of cubes of first {n} natural numbers and the sum of first {n} natural numbers is {difference(n)}.')\r\n\r\n\"\"\"\r\nTime Complexity : O(n)\r\nSpace Complexity : O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the value of n : 10\r\nThe difference between sum of cubes of first 10 natural numbers and the sum of first 10 natural numbers is 3025.\r\n\r\nSAMPLE II\r\n\r\nEnter the value of n : 20\r\nThe difference between sum of cubes of first 20 natural numbers and the sum of first 20 natural numbers is 1542625.\r\n\r\nSAMPLE III\r\n\r\nEnter the value of n : 5\r\nThe difference between sum of cubes of first 5 natural numbers and the sum of first 5 natural numbers is 27.\r\n\r\nSAMPLE IV\r\n\r\nEnter the value of n : 1\r\nThe difference between sum of cubes of first 1 natural numbers and the sum of first 1 natural numbers is 0.\r\n\r\nSAMPLE V\r\n\r\nEnter the value of n : 3\r\nThe difference between sum of cubes of first 3 natural numbers and the sum of first 3 natural numbers is -37.\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1,n+1):\r\n        sum1 = sum1 + i**3\r\n        sum2 = sum2 + i\r\n    return sum1 - sum2\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is:","votes":null},{"text":"\r\n    # initializing empty list\r\n    sum_list = []\r\n    sum_list_cube = []\r\n    for i in range(n):\r\n        sum_list.append(i)\r\n        sum_list_cube.append(i**3)\r\n    # print(sum_list)\r\n    # print(sum_list_cube)\r\n    # adding all cube values to a single variable\r\n    cube_sum = sum(sum_list_cube)\r\n    # print(cube_sum)\r\n    # adding all values to a single variable\r\n    number_sum = sum(sum_list)\r\n    # print(number_sum)\r\n    # subtracting cube_sum from number_sum\r\n    result = cube_sum - number_sum\r\n    # print(result)\r\n    return result\r\n    # print(result)\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter n : \"))\r\n    print(difference(n))\r\n\r\n\r\n\"\"\"\r\nn=15\r\nans = 2310\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity : O(n)\r\nSpace Complexity : O(1) (not counting the input list)\r\n\r\nSample Input :\r\nEnter n : 5\r\nSample Output :\r\n25\r\n\r\nSample Input :\r\nEnter n : 15\r\nSample Output :\r\n2310\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nProblem Statement : \r\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\r\n\r\nDifficulty Level : Easy\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    sum_cube = sum([i**3 for i in range(1, n + 1)])\r\n    sum_square = sum([i for i in range(1, n + 1)])\r\n    return sum_square - sum_cube\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # sum of cubes of first n natural numbers\r\n    cube_sum = 0\r\n    for i in range(1,n+1):\r\n        cube_sum += i**3\r\n\r\n    # sum of first n natural numbers\r\n    sum_num = 0\r\n    for i in range(1,n+1):\r\n        sum_num += i\r\n\r\n   ","votes":null},{"text":"\r\n    \r\n    print(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is : \",(n**3)*(n+1)\/4-(n)*(n+1)\/2)\r\n\r","votes":null},{"text":"\r\n    return (n*(n+1)*(2*n+1))\/\/6 - (n*(n+1))\/\/2\r\n\r\n#n = int(input(\"Enter the number : \"))\r\n#print(difference(n))\r\n\r","votes":null},{"text":"\r\n    x=0\r\n    y=0\r\n\r\n    for i in range(1,n+1):\r\n        x+=i**3\r\n        y+=i\r\n\r\n    print(f'The sum of cubes of first {n} natural numbers is {x}')\r\n    print(f'The sum of first {n} natural numbers is {y}')\r\n    print(f'The difference between sum of cubes of first {n} natural numbers and the sum of first {n} natural numbers is {y-x}')\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #Cube of a number\r\n   ","votes":null},{"text":"\r\n    print('Difference between sum of cubes of first n natural numbers and the sum of first n natural numbers')\r\n    for i in range(1,n+1):\r\n        c = i**3\r\n        print(c)\r\n    a = 0\r\n    for i in range(1,n+1):\r\n        a += i\r\n    b = 0\r\n    for i in range(1,n+1):\r\n        b += i**3\r\n    return a-b\r\n\r\ndifference(10)\r\n\r\n\r","votes":null},{"text":"\r\n    a=0\r\n    b=0\r\n    for i in range(1,n+1):\r\n        a=a+(i**3)\r\n        b=b+i\r\n    print(a-b)\r\n\r\ndifference(int(input()))\r\n\r\n\r","votes":null},{"text":"\r\n    s = 0\r\n    for i in range(n + 1):\r\n        s += i\r\n    s2 = 0\r\n    for i in range(n + 1):\r\n        s2 += i**3\r\n    print(s2 - s)\r\n\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    # sum of cubes of first n natural numbers\r\n    sum1 = sum([i**3 for i in range(1, n+1)])\r\n    \r\n    # sum of first n natural numbers\r\n    sum2 = sum(range(1, n+1))\r\n    \r\n    # difference\r\n    return sum1 - sum2\r\n\r\nprint(difference","votes":null},{"text":"\r\n    print(\"The difference between sum of cubes of first \" + str(n) + \" natural numbers and the sum of first \" + str(n) + \" natural numbers is: \", end=\"\")\r\n    print((pow(n, 2) + pow(n, 3)) \/ 2 - (n * (n + 1)) \/ 2)\r\n\r","votes":null},{"text":"\r\n    x = n*(n+1)\/\/2\r\n    y = n*(n+1)*(2*n+1)\/\/6\r\n    return x - y\r\n\r\n# Test cases\r\nprint(difference(5))\r\nprint(difference(10))\r\nprint(difference(20))\r\nprint(difference(100))\r\n\r\n\r\n# Output\r\n# 15\r\n# 55\r\n# 215\r\n# 2640\r\n\r\n# Time Complexity = O(n)\r\n# Space Complexity = O(1)\r\n\r\n# Alternate Solution\r\n\r","votes":null},{"text":"\r\n\r\n    sumCubes = 0\r\n    sumNatural = 0\r\n    for i in range(1, n + 1):\r\n        sumCubes += i**3\r\n        sumNatural += i\r\n        \r\n    return sumNatural - sumCubes\r\n\r\nprint(difference(10))\r\n\r\n\r","votes":null},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1,n+1):\r\n        sum1 += i**3\r\n    for i in range(1,n+1):\r\n        sum2 += i\r\n    print(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is:\")\r\n    print(sum1-sum2)\r\n\r","votes":null},{"text":"\r\n    a = n * (n + 1) * (2 * n + 1) \/\/ 6\r\n    b = n * (n + 1) \/\/ 2\r\n    return a - b\r\n\r\nprint(difference(4))\r\n\r","votes":null},{"text":"\r\n    #cube = n**3\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i**3\r\n    sum2 = 0\r\n    for i in range(1, n+1):\r\n        sum2 += i\r\n    print(f\"The difference between sum of cubes of first {n} natural numbers and the sum of first {n} natural numbers is {sum2-sum}.\")\r\n\r\n\r","votes":null},{"text":"\r\n    num = []\r\n    for i in range(n + 1) :\r\n        num.append(i)\r\n    s1 = []\r\n    s2 = []\r\n    for j in range(n + 1) :\r\n        s1.append(num[j] ** 3)\r\n        s2.append(num[j])\r\n    print(s1)\r\n    print(s2)\r\n    print(sum(s1) - sum(s2))\r\n\r\ndifference(3) \r\n\r","votes":null},{"text":"\r\n    sum_of_natural = sum(x for x in range(n + 1))\r\n    sum_of_cubes = sum(x ** 3 for x in range(n + 1))\r\n    difference = sum_of_cubes - sum_of_natural\r\n    print(difference)\r\n    \r\ndifference(10)\r\n\r\n# # 2. Write a python function to compute the sum of squares of first n natural numbers.\r\n#","votes":null}],"time":{"count":47.0,"avg":111080.9085957447,"std":20686.7233365115,"cov":0.1862311319}}
{"id":556,"question":"def find_Odd_Pair(A,N) :\r\n    \"\"\"Write a python function to count the pairs with xor as an odd number.\"\"\"","answers":[{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i + 1, N) :\r\n            if (A[i] ^ A[j]) % 2 != 0 :\r\n                count += 1\r\n    return count\r\n\r","votes":92722.768},{"text":"\r\n    \r\n    odd_pairs = 0\r\n\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                odd_pairs += 1\r\n\r\n    return odd_pairs\r\n\r\n# 4\r\n# 1 1 2 3\r\n# 4\r\n# 1 1 2 2\r\n# 4\r\n# 1 1 1 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#","votes":95873.808},{"text":"\r\n    count = 0\r\n    \r\n    for i in range(N) :\r\n        for j in range(i + 1, N) :\r\n            if (A[i] ^ A[j]) % 2 != 0 :\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r","votes":98414.996},{"text":"\r\n    count_pair = 0\r\n    for i in range(N) :\r\n        j = i + 1\r\n        while j < N :\r\n            if (A[i]^A[j]) % 2 == 1 :\r\n                count_pair += 1\r\n            j += 1\r\n    return count_pair\r\n\r\nA = [2,3,5,1,3,2]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r","votes":106380.444},{"text":"\r\n    # 1. Iterate through all the pairs and check if xor is odd\r\n    # 2. If odd, increment the counter\r\n    # 3. Return the counter value\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 == 1:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":107039.116},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 != 0 :\r\n                count += 1\r\n    return count\r\n\r","votes":108473.484},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 != 0 :\r\n                count += 1\r\n    return count\r\n\r\nA = [1,2,3,4,5,6,7]\r\nN = len(A)\r\ncount = find_Odd_Pair(A,N)\r\nprint(\"The total number of pair with xor as an odd number is\",count)\r\n\r","votes":111233.644},{"text":"\r\n    count = 0\r\n    for i in range(0,N-1) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nA = [1,2,3,4,5]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n# 2\r\n\r","votes":114762.196},{"text":"\r\n    count=0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if ((A[i]^A[j])&1) != 0:\r\n                count += 1\r\n    return count\r\n\r\nA = [2, 3, 4, 5, 6]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n\r","votes":114905.532},{"text":"\r\n    count = 0\r\n    for i in range(N-1) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n    \r","votes":115863.4},{"text":"\r\n    total = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                total += 1\r\n    return total\r\n\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    A = [1, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n  ","votes":116145.396},{"text":"\r\n\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            xor_value = A[i] ^ A[j]\r\n            if xor_value & 1:\r\n                count += 1\r\n    return count\r\n\r\n\r\n# Given array and it's size\r\nA = [1, 4, 2, 3]\r\nN = len(A)\r\n\r\n# Function call\r\nprint(find_Odd_Pair(A,N))\r\n\r\n# Contributed By: Harshit Sidhwa\r\n\r\n# Output:\r\n# 2\r\n# Explanation:\r\n# 1^4 = 5 (odd), 1^2 = 3 (odd), 1^3 = 2 (even), 4^2 = 12 (even), 4^3 = 8 (even), 2^3 = 8 (even)\r\n# So, the total number of pairs are 2.\r\n\r\n# Time Complexity:\r\n# The time complexity is O(N^2).\r\n\r\n# Space Complexity:\r\n# The space complexity is O(1).\r\n\r\n# Other method:\r\n# 1. We can use the XOR of all elements and find the rightmost set bit of the answer.\r\n# 2. If we count all the set bits in the XOR of all elements, we can also find the number of pairs.\r\n\r\n# Resources:\r\n# https:\/\/www.geeksforgeeks.org\/counting-pairs-","votes":119049.676},{"text":"\r\n    \r\n    count = 0\r\n    \r\n    for i in range(len(A)):\r\n        for j in range(i+1,len(A)):\r\n            if (A[i]^A[j]) % 2 == 1:\r\n                count += 1\r\n    \r\n    return count\r\n\r\nA = [1,2,3,3,4,5,5,6,7]\r\nN = len(A)\r\n\r\nprint(find_Odd_Pair(A,N))\r\n\r\n# Output: 4\r\n# Explanation: The pairs are (1,3), (2,4), (3,5) and (5,7)\r\n\r\n# Time Complexity: O(N^2)\r\n# Space Complexity: O(1)\r\n\r\n# Method 2: Using Binary Search\r\n\r","votes":120628.48},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1, N):\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    A = [1, 2, 3, 4, 5, 6]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n    \r\n# Input:  A = [1, 2, 3, 4, 5, 6], N = 6\r\n# Output: 15\r\n\r\n# Input:  A = [3, 4, 5, 6, 7, 8], N = 6\r\n# Output: 9\r\n\r\n# Input:  A = [1, 2, 3, 4, 5, 6], N = 6\r\n# Output: 15\r\n\r\n# Input:  A = [3, 4, 5, 6, 7, 8], N = 6\r\n# Output: 9\r\n\r\n# Input:  A = [1, 2, 3, 4, 5, 6], N = 6\r\n# Output: 15\r\n\r\n# Input:  A = [3, 4, 5, 6, 7, 8], N = 6\r\n# Output: 9\r\n\r\n\r\n# Time Complexity : O(N^2)\r\n# Auxiliary Space: O(1)\r\n\r\n# Input:  A = [1, 2, 3, 4, 5, 6], N = 6\r\n# Output: 15\r\n\r\n# Input:  A = [3, 4, 5, 6, 7, 8], N = 6\r\n# Output: 9\r\n\r\n# Inpu","votes":121450.312},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(N-1) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 != 0 :\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    \r\n    A = [1, 2, 3, 4, 5, 6]\r\n    N = 6\r\n    print(find_Odd_Pair(A,N))\r\n\r\n","votes":122644.464},{"text":"\r\n    count = 0\r\n    l = A\r\n    for i in range(len(l)):\r\n        for j in range(i+1,len(l)):\r\n            if (l[i]^l[j])%2==1:\r\n                count += 1\r\n    return count\r\n\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nN = len(A)\r\nprint(\"The number of pairs with xor as an odd number is : \", find_Odd_Pair(A,N))\r\n\r\n'''\r\n\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\n'''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# Python program to find the pairs with xor as an odd number.\r\n\r\n\r","votes":123169.032},{"text":"\r\n    odd_count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if abs(A[i]^A[j])%2==1:\r\n                odd_count+=1\r\n    return odd_count\r\n\r\nA = [1,2,2,1]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n# Given an array of integers, find the number of pairs of indices whose sum is even.\r","votes":127874.86},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 != 0:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    N = int(input())\r\n    A = [int(x) for x in input().split()]\r\n    print(find_Odd_Pair(A,N))\r\n","votes":128367.496},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if ((A[i]^A[j])%2) :\r\n                count += 1\r\n    return count\r\n\r\n\r\nA = [1,2,3,4,5,6,7,8]\r\nN = len(A)\r\nprint(A)\r\nprint(f'Total Pairs with xor as an odd number = {find_Odd_Pair(A,N)}')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":129969.316},{"text":"\r\n    odd_pairs = 0\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2!=0:\r\n                odd_pairs += 1\r\n    return odd_pairs\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5, 6]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n\r\n\r\n# Output:\r\n# 3\r\n\r\n\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# Input:\r\n# A = [1, 2, 3, 4, 5, 6]\r\n# N = 6\r\n\r\n# Output:\r\n# 3\r\n\r\n\r\n# Input:\r\n# A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# N = 10\r\n\r\n# Output:\r\n# 10\r\n\r\n\r\n# Input:\r\n# A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\r\n# N = 16\r\n\r\n# Output:\r\n# 16\r\n\r\n\r\n# Example 2:\r\n# Input:\r\n# A = [1, 2, 2, 3, 4, 5]\r\n# N = 6\r\n\r\n# Output:\r\n# 10\r\n\r\n# Explanation:\r\n# The pairs with xor as an odd number are:\r\n# (1, ","votes":132886.284},{"text":"\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 != 0:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":141189.572},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1, N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nprint(find_Odd_Pair([1,2,3,4,5],5))\r\nprint(find_Odd_Pair([2,3,4,5,6],5))\r\nprint(find_Odd_Pair([-1,-2,-3,-4,-5],5))\r\nprint(find_Odd_Pair([-2,-3,-4,-5,-6],5))\r\nprint(find_Odd_Pair([1,2,3,4,5],1))\r\nprint(find_Odd_Pair([1,2,3,4,5],5))\r\n\r\n# 100% correct solution\r","votes":142844.916},{"text":"\r\n\r\n    c = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i] ^ A[j])%2 == 1:\r\n                c += 1\r\n    return c\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    A = list(map(int,input().split()))\r\n    print(find_Odd_Pair(A,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":145627.504},{"text":"\r\n    odd_pairs = 0\r\n    \r\n    for i in range(N-1):\r\n        for j in range(i+1,N):\r\n            if ((A[i] ^ A[j]) & 1):\r\n                odd_pairs += 1\r\n    return odd_pairs\r\n\r","votes":146413.252},{"text":"\r\n\r\n    count = 0\r\n\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 != 0 :\r\n                count += 1\r\n\r\n    return count\r\n\r\n\r\nA = [1,2,3,4,5]\r\nN = len(A)\r\n\r\nprint(\"The number of pairs with xor as an odd number is \",find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":162873.968},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N):\r\n            if((A[i]^A[j]) & 1):\r\n                count += 1\r\n    return count\r\n\r\nA = [1,2,3,4]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n#O(n) solution for above problem\r\n\r","votes":165440.176},{"text":"\r\n    odds = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j]) % 2 != 0 :\r\n                odds += 1\r\n    return odds\r\n\r\nA = [1, 2, 3, 4, 5]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r","votes":169806.208},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j]) % 2 == 1 :\r\n                count = count + 1\r\n    return count\r\n\r\n\r\nA = [2, 3, 5, 7, 9, 11, 13]\r\nN = len(A)\r\n","votes":172565.06},{"text":"\r\n\r\n    # Time Complexity O(n)\r\n    # Space Complexity O(1)\r\n\r\n    # 0 1 0 1 0 0 1 0 0 1 0 1\r\n    # 0 1 0 1 0 0 1 0 0 1 0 1\r\n\r\n    count = 0\r\n\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if ((A[i] ^ A[j]) & 1):\r\n                count += 1\r\n\r\n    return count\r\n\r\n\r\n\r","votes":176515.092},{"text":"\r\n    count_odd = 0\r\n    for i in A :\r\n        if i % 2 == 1 :\r\n            for j in A :\r\n                if i != j and (i ^ j) % 2 == 1 :\r\n                    count_odd += 1\r\n    return count_odd\r\n\r\nif __name__ == \"__main__\":\r\n    A = [1, 2, 3, 4, 5, 6]\r\n    print(find_Odd_Pair(A,len(A)))\r\n\r\n'''\r\nTime Complexity : O(N^2)\r\nSpace Complexity : O(1)\r\n\r\nINPUT:\r\n1\r\n6\r\n1 2 3 4 5 6\r\n\r\nOUTPUT:\r\n3\r\n\r\nExplanation:\r\nThe xor of all the pairs in the given array is 3.\r\n'''\r\n\r\n\r\n\r\n# Given an array of integers A[ ] of size N. Find the majority element in the array.\r\n# A majority element in an array A of size N is an element that appears more than N\/2 times in the array.\r\n\r","votes":185528.464},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i + 1, N):\r\n            if (A[i] ^ A[j]) % 2 != 0:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    A = [3, 6, 9, 12, 15]\r\n    N = len(A)\r\n    print(f\"The number of odd pairs in array {A} is {find_Odd_Pair(A, N)}\")\r\n","votes":188304.968},{"text":"\r\n    count = 0\r\n    for i in range(N-1) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r\n#main\r\nif __name__ == \"__main__\" :\r\n    A = [1, 2, 3, 4, 5, 6]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n\r\n\r\n#Time Complexity : O(N^2)\r\n#Space Complexity : O(1)\r\n\r\n#Example 1:\r\n#Input:\r\n#N = 6\r\n#A[] = {1, 2, 3, 4, 5, 6}\r\n#Output: \r\n#3\r\n#Explanation: Pairs are (1, 3), (1, 5) and (3, 5).\r\n\r\n#Example 2:\r\n#Input:\r\n#N = 5\r\n#A[] = {2, 3, 4, 5, 6}\r\n#Output: \r\n#0\r\n#Explanation: No pair of elements have xor\r\n#as an odd number.\r\n\r\n#Example 3:\r\n#Input:\r\n#N = 3\r\n#A[] = {1, 2, 3}\r\n#Output: \r\n#2\r\n#Explanation: Pairs are (1, 2) and (2, 3).\r\n\r\n#Example 4:\r\n#Input:\r\n#N = 4\r\n#A[] = {1, 2, 3, 4}\r\n#Output: \r\n#6\r\n#Explanation: Pairs are (1, 2), (1, 3), (1, 4), (2, 3), \r\n#(2, 4) and (3,","votes":189525.852},{"text":"\r\n    count = 0\r\n    for i in range(N-1):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2==1:\r\n                count+=1\r\n    return count\r\n\r\n\r\nA = [1, 3, 2, 5, 5, 1, 3, 2, 5, 5, 1]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n\r","votes":196022.568},{"text":"\r\n    odd = 0\r\n    for i in range(N-1) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                odd += 1\r\n    return odd\r\n\r\n# Main\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n# Time Complexity = O(N^2)\r\n# Space Complexity = O(1)\r\n\r\n# Test Cases\r\n\r\n# Input:\r\n# N = 10\r\n# A[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\r\n\r\n# Output: 45\r\n\r\n# Explanation:\r\n# 1 ^ 2 = 3, 3 is odd\r\n# 1 ^ 3 = 2, 2 is even\r\n# 1 ^ 4 = 3, 3 is odd\r\n# 1 ^ 5 = 4, 4 is even\r\n# 1 ^ 6 = 5, 5 is odd\r\n# 1 ^ 7 = 6, 6 is even\r\n# 1 ^ 8 = 7, 7 is odd\r\n# 1 ^ 9 = 8, 8 is even\r\n# 1 ^ 10 = 9, 9 is odd\r\n# 2 ^ 3 = 1, 1 is odd\r\n# 2 ^ 4 = 6, 6 is even\r\n# 2 ^ 5 = 7, 7 is odd\r\n# 2 ^ 6 = 5, 5 is even\r\n# 2 ^ 7 = 4, 4 is even\r\n# 2 ^ 8 = 3, 3 is odd","votes":197918.128},{"text":"\r\n    # code here\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) & 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r\n#testcase\r\nlist1 = [1,2,3,4,5]\r\nlist2 = [1,3,5,7,9]\r\nN = len(list1)\r\nprint(find_Odd_Pair(list1,N))\r\nprint(find_Odd_Pair(list2,N))\r\n\r\n#output\r\n#3\r\n#3\r\n\r\n#time complexity\r\n#worst case time complexity = O(n^2)\r\n#space complexity\r\n#worst case space complexity = O(1)\r\n\r\n\r\n#-------------------------------------------------------------------------------\r\n\r\n\r","votes":198352.888},{"text":"\r\n    # Return the count of pairs\r\n    count=0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2==1:\r\n                count+=1\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":199453.576},{"text":"\r\n    \r\n    res = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if ((A[i]^A[j])%2==1) :\r\n                res += 1\r\n    return res\r\n\r\nA = [1, 2, 3, 4, 5]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# OUTPUT:\r\n# 3\r\n\r\n\r\n# Method 2 (Using Bit Masking)\r\n\r","votes":199742.364},{"text":"\r\n    cnt = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 != 0:\r\n                cnt += 1\r\n    return cnt\r\n\r\n\r","votes":206065.944},{"text":"\r\n    count=0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if ((A[i]^A[j])%2!=0):\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    T=int(input())\r\n    for i in range(T):\r\n        N=int(input())\r\n        A=list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":206213.516},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1, N):\r\n            if ((A[i] ^ A[j]) & 1):\r\n                count += 1\r\n    return count\r\n\r","votes":208323.62},{"text":"\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2==1:\r\n                count+=1\r\n    return count\r\n\r\nA = [2,4,6,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\r\nN = len(A)\r\n\r\nprint(find_Odd_Pair(A,N))\r\n\r\n# Time Complex","votes":231712.732},{"text":"\r\n    count = 0\r\n    for i in range(N-1):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 != 0:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    N = int(input(\"Enter the size of array: \"))\r\n    A = list(map(int, input(\"Enter the array: \").split()))\r\n    print(\"The number of pairs with xor as an odd number is: \", find_Odd_Pair(A,N))\r\n\r\n\"\"\"\r\nTest Case 1:\r\n    Input:\r\n        Enter the size of array: 5\r\n        Enter the array: 1 2 3 4 5\r\n    Output:\r\n        The number of pairs with xor as an odd number is:  4\r\n\r\nTest Case 2:\r\n    Input:\r\n        Enter the size of array: 5\r\n        Enter the array: 2 2 2 2 2\r\n    Output:\r\n        The number of pairs with xor as an odd number is:  0\r\n\r\nTest Case 3:\r\n    Input:\r\n        Enter the size of array: 5\r\n        Enter the array: 2 2 2 2 3\r\n    Output:\r\n        The number of pairs with xor as an odd number is:  2\r\n\r\nTime Complexity: O(n*n), where n is the size of the array\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n\r\n# Using bitwise XOR\r","votes":246306.54},{"text":"\r\n    res = 0\r\n    for i in range(N-1) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                res += 1\r\n    return res\r\n\r\n\r\nif __name__ == '__main__' :\r\n    A = [1, 2, 3, 4, 5]\r\n    N = len(A)\r\n    print(\"The number of pairs with xor as an odd number is : \", find_Odd_Pair(A,N))\r\n","votes":248374.228},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\nA = [1,2,3,4,5,6]\r\nN = len(A)\r\nprint(\"The no. of pairs with xor as an odd number are :\", find_Odd_Pair(A,N))\r\n\r","votes":259660.372},{"text":"\r\n    odd_pair = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j]) % 2 != 0 :\r\n                odd_pair += 1\r\n    return odd_pair\r\n\r","votes":314967.992},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i] ^ A[j] & 1) :\r\n                count += 1\r\n    return count\r\n\r\n\r\nA = [0,1,2,3,4,5,6,7,8,9,10]\r\nprint(find_Odd_Pair(A,11))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    c = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i] ^ A[j] % 2 == 1) :\r\n                c += 1\r\n    return c\r\n\r\nA = [3,3,4,5,5,6,6,7,7,9,9]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r\n# Input the size of the array\r\nN = int(input(\"Enter the size of the array : \"))\r\n\r\n# Input the elements of the array\r\nA = list(map(int,input(\"Enter the elements of the array : \").split()))\r\n\r\n# Call the function to count the number of odd pairs\r\nprint(\"The number of odd pairs are {}\".format(find_Odd_Pair(A,N)))\r\n\r\n\r\n'''\r\n\r\nTIME COMPLEXITY : O(N^2)\r\nSPACE COMPLEXITY : O(1)\r\n\r\nINPUT : Enter the size of the array : 5\r\n        Enter the elements of the array : 1 2 3 4 5\r\nOUTPUT : The number of odd pairs are 6\r\n\r\nINPUT : Enter the size of the array : 3\r\n        Enter the elements of the array : 1 2 3\r\nOUTPUT : The number of odd pairs are 2\r\n\r\n\r\n'''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    xor = 0\r\n    count = 0\r\n\r\n    for i in range(0,N-1) :\r\n        for j in range(i+1,N) :\r\n            if(xor & 1) :\r\n                count = count + 1\r\n            xor = A[i] ^ A[j]\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__' :\r\n    N = int(input())\r\n    A = []\r\n\r\n    for i in range(0,N) :\r\n        A.append(int(input()))\r\n\r\n    print(find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(0,N):\r\n            if (A[i]^A[j]) % 2 == 1:\r\n                count += 1\r\n    return count\r\n    \r\n    \r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [1,2,3,4,5,6,7,8,9,10]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(1,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 != 0 :\r\n                count += 1\r\n    return count\r\n\r\n# Driver code\r\nif __name__ == \"__main__\" :\r\n    A = [1, 2, 3, 4, 5]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nINPUT\r\nEnter the size of the array\r\n5\r\nEnter the elements of the array\r\n1 2 3 4 5\r\nOUTPUT\r\n4\r\n\r\nSAMPLE II\r\n\r\nINPUT\r\nEnter the size of the array\r\n5\r\nEnter the elements of the array\r\n1 2 3 4 ","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if ((A[i] ^ A[j]) & 1):\r\n                count += ","votes":null},{"text":"\r\n    odd_pair = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if ((A[i] ^ A[j]) % 2 == 1) :\r\n                odd_pair += 1\r\n    return odd_pair\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\"\"\"\r\nTime Complexity : O(N^2)\r","votes":null},{"text":"\r\n    \r\n    count = 0\r\n    \r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if(A[i]^A[j]%2==1):\r\n                count+=1\r\n    return count\r\n\r\nA = [1, 2, 3, 4, 5]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 != 0 :\r\n                count += 1\r\n    return count\r\n\r\n\r\nN = int(input(\"Enter the number of elements in list: \"))\r\nA = list(map(int,input(\"Enter list of \"+str(N)+\" elements: \").split()))\r\nprint(\"The number of pairs with xor as an odd number is: \" + str(find_Odd_Pair(A,N)))\r\n\r\n\r\n\"\"\"\r\nTest Case 1:\r\nInput:\r\nEnter the number of elements in list: 5\r\nEnter list of 5 elements: 1 2 3 4 5\r\nOutput:\r\nThe number of pairs with xor as an odd number is: 10\r\n\r\nTest Case 2:\r\nInput:\r\nEnter the number of elements in list: 2\r\nEnter list of 2 elements: 1 2\r\nOutput:\r\nThe number of pairs with xor as an odd number is: 0\r\n\r\nTest Case 3:\r\nInput:\r\nEnter the number of elements in list: 3\r\nEnter list of 3 elements:","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(0,N):\r\n            if i == j:\r\n                continue\r\n            if (A[i]^A[j])%2 != 0:\r\n                count += 1\r\n\r\n    return count\r\n\r\nA = [1,3,5,7,9,11]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    c = 0\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if(A[i] ^ A[j] & 1 == 1):\r\n                c += 1\r\n    return c\r\n\r\n# Driver code\r\nA = [1,2,3,4,5,6,7]\r\nN = len(A)\r\nprint(\"The number of pairs with xor as an odd number: \",find_Odd_Pair(A,N))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# Input: A = [1, 2, 3, 4, 5, 6, 7]\r\n# Output: 5\r\n# Explanation: Odd pairs are: (1, 3), (1, 5), (1, 7), (3, 5) and (3, 7).\r\n\r\n# Input: A = [1, 2, 3, 4, 5, 6, 7, 8]\r\n# Output: 0\r\n# Explanation: There is no odd pair.\r\n\r\n# Input: A = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n# Output: 5\r\n# Explanation: Odd pairs are: (1, 3), (1, 5), (1, 7), (3, 5) and (3, 7).\r\n\r\n# Input: A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# Output: 0\r\n# Explanation: There is no odd pair.\r\n\r\n# Input: A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 == 1:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"\r\n    from timeit import timeit\r\n    A = [1,2,3,4,5,6,7,8,9,10]\r\n    print(timeit(lambda:find_Odd_Pair(A,len(A)), number = 10000)) # 0.11806957300024414\r\n    \"\"\"\r\n\r\n    A = [1,2,3,4,5,6,7,8,9,10]\r\n    print(find_Odd_Pair(A,len(A))) # 45\r\n\r\n    A = [1,1,1,1,1,1,1,1,1,1]\r\n    print(find_Odd_Pair(A,len(A))) # 15\r\n\r\n    A = [1,2,3,4,5,6,7,8,9,10]\r\n    print(find_Odd_Pair(A,len(A))) # 45\r\n\r\n    A = [1,2,3,4,5,6,7,8,9,10]\r\n    print(find_Odd_Pair(A,len(A))) # 45\r\n\r\n    A = [1,2,3,4,5,6,7,8,9,10]\r\n    print(find_Odd_Pair(A,len(A))) # 45\r\n\r\n    A = [1,2,3,4,5,6,7,8,9,10]\r\n    print(find_Odd_Pair(A,len(A))","votes":null},{"text":"\r\n    arr = []\r\n    for i in range(N):\r\n        for j in range(N):\r\n            if (A[i]^A[j])%2!=0:\r\n                arr.append([i,j])\r\n    return len(arr)\r\n\r","votes":null},{"text":"\r\n    a = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2==1:\r\n                a+=1\r\n    return a\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Enter the size of the array\")\r\n    N = int(input())\r\n    print(\"Enter the elements of the array\")\r\n    A = list(map(int,input().strip().split()))\r\n    print(\"The number of pairs with xor as an odd number are\",find_Odd_Pair(A,N))\r\n\r\n\"\"\"\r\nStandard Input and Output\r\n\r\nEnter the size of the array\r\n9\r\nEnter the elements of the array\r\n1 3 5 7 9 11 13 15 17\r\nThe number of pairs with xor as an odd number are 4\r\n\r\nTime Complexity : O(N2)\r\nSpace Complexity : O(1)\r\n\r\nSample Input\/Output 2 :\r\n\r\nEnter the size of the array\r\n9\r\nEnter the elements of the array\r\n1 3 5 7 9 11 13 15 17\r\nThe number of pairs with xor as an odd number are 4\r\n\r\nTime Complexity : O(N2)\r\nSpace Complexity : O(1)\r\n\r\n\r\nEXAMPLE 2:\r\n\r\nSample Input\/Output 1 :\r\n\r\nEnter the size of the array\r\n8\r\nEnter the elements of the array\r\n1 1 1 1 1 1 1 1\r\nThe number of pairs with xor as an odd number are 0\r\n\r\nTime Complexity : O(N2)\r\nSpace Complexity : O(1)\r\n\r\n\r\nEXAMPLE 3:\r\n\r\nSample Input\/Output 1 :\r\n\r\nEnter the size of the array\r\n4\r\nEnter the element","votes":null},{"text":"\r\n    count=0\r\n    for i in range(N-1) :\r\n        for j in range(i+1,N) :\r\n            if ( A[i]^A[j] )%2 == 1 :\r\n                count+=1\r\n    return count\r\n\r\n\r\nA=list(map(int,input(\"Enter the elements of array: \").split()))\r\n\r\nN=int(","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 != 0 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n\r\n\"\"\"\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I","votes":null},{"text":"\r\n    \r\n    # This can be solved using the XOR-based method\r\n    # XOR is commutative and associative, so for any pair of numbers, \r\n    # xor(a,b) = xor(b,a)\r\n    # xor(a, b) = xor(a, xor(a, b))\r\n    # 2 pairs with the same XOR value means that the XOR of these 2 pairs is a constant number\r\n    # So, we can just count the number of pairs with a given XOR value\r\n    # and return the sum of such pairs\r\n    \r\n    count = 0\r\n    for i in range(N-1) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r\n# Driver code to test the above function\r\nA = [1,2,3,4,5]\r\nN = len(A)\r\nprint(\"The number of pairs with XOR as an odd number: \")\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(1)\r\n\r\nSample Input\/Output:\r\n\r\nSample Input 1:\r\nEnter the size of the array:\r\n5\r\nEnter the elements of the array:\r\n1 2 3 4 5 \r\n\r\nSample Output 1:\r\nThe number of pairs with XOR as an odd number: \r\n2\r\n\r\nSample Input 2:\r\nEnter the size of the array:\r\n4\r\nEnter the elements of the array:\r\n1 2 3 4\r\n\r\nSample Output 2:\r\nThe number of pairs with XOR as an odd number: \r\n6\r\n\r\nSample Input 3:\r\nEnter the size of the array:\r\n5\r\nEnter the elements of the array:\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(N):\r\n            if (i!=j) and (A[i]^A[j]%2==1):\r\n                count += 1\r\n    return count\r\n\r\n\r\nA = [1,2,3,4,5]\r\nN = len(A)\r\nprint(\"The number of pairs with xor as an odd number is\", find_Odd_Pair(A,N))\r\n\r\n\r\n\"\"\"\r\nTime Complexity of the function = O(n^2)\r\nSpace Complexity of the function = O(1)\r\n\r\nINPUT:\r\n======\r\nA = [1,2,3,4,5]\r\nN = len(A)\r\n\r\nOUTPUT:\r\n======\r\nThe number of pairs with xor as an odd number is 10\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    from collections import Counter\r\n    \r\n    c = Counter(A)\r\n    \r\n    ans = 0\r\n    for i in range(N) :\r\n        for j in range(i+1, N) :\r\n            if ((i^j)%2 != 0) :\r\n                ans += c[i]*c[j]\r\n    return ans\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Your code goes here\r\n    # return the number of pairs\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(N):\r\n            if i != j:\r\n                if(A[i]^A[j])%2 != 0:\r\n                    count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(0,N) :\r\n            if ( (A[i] ^ A[j]) % 2 != 0 ) :\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(N):\r\n            if (i != j) and ((A[i] ^ A[j]) % 2 == 1):\r\n                count += 1\r\n    return count\r\n\r\n\r\nN = int(input())\r\nA = list(map(int, input().split()))\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n# Output\r\n\r\n# Enter the size of the array.\r\n# 5\r\n# Enter the elements of the array.\r\n# 1 2 3 4 5\r\n# 4\r\n\r\n\r\n# Time Complexity\r\n# The time complexity of the above algorithm will be O(n2) where \u2018n\u2019 is the total number of elements in the given array.\r\n\r\n\r\n# Space Complexity\r\n# The algorithm runs in constant space O(1).\r\n\r\n\r\n# Example\r\n# Input\r\n# Enter the size of the array.\r\n# 5\r\n# Enter the elements of the array.\r\n# 1 2 3 4 5\r\n# Output\r\n# 4\r\n\r\n\r\n# Time Complexity\r\n# The time complexity of the above algorithm will be O(n2) where \u2018n\u2019 is the total number of elements in the given array.\r\n\r\n\r\n# Space Complexity\r\n# The algorithm runs in constant space O(1).\r\n\r\n\r\n# Example\r\n# Input\r\n# Enter the size of the array.\r\n# 5\r\n# Enter the elements of the array.\r\n# 1 2 3 4 5\r\n# Output\r\n# 4\r\n\r\n\r\n# Time Complexity\r\n# The time complexity of the above algorithm will be O(n2) where \u2018n\u2019 is the total number of elements in the given array.\r\n\r\n\r\n# Space Complexity\r\n# The algorithm runs in constant space O(1).\r\n\r\n\r\n# Example\r\n","votes":null},{"text":"\r\n\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i + 1, N) :\r\n            if (A[i] ^ A[j]) & 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r\nA = [1,0,0,1,1]\r\nN = 5\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n'''\r\nSample Input : \r\nA = [1, 0, 0, 1, 1]\r\nN = 5\r\n\r\nSample Output : \r\n3\r\n\r\n\r\nExplanation : \r\n(0 ^ 1) is odd, (0 ^ 0) is even, (1 ^ 0) is odd, \r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(N) :\r\n            if (i != j) and (A[i]^A[j]%2 == 1) :\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    n = int(input())\r\n    arr = [int(x) for x in input().strip().split()]\r\n    result = find","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\narr = [1, 1, 1, 2, 2, 2]\r\nn = len(arr)\r\nprint(find_Odd_","votes":null},{"text":"\r\n    count = 0\r\n    i = 0\r\n    while (i < N):\r\n        j = i + 1\r\n        while (j < N):\r\n            if (A[i] ^ A[j] & 1):\r\n                count += 1\r\n            j += 1\r\n        i += 1\r\n    return count\r\n\r\n\r\n# Driver program to test the above function\r\nA = [1, 2, 4, 6, 4, 7, 3, 9, 8, 6, 2, 1]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n^2)\r\n\r\n\r\n# Improved Solution\r","votes":null},{"text":"\r\n\r\n    #Initialization\r\n    count = 0\r\n\r\n    #Iteration\r\n    for i in range(0,N) :\r\n        for j in range(0,N) :\r\n            if((A[i]^A[j]) & 1) :\r\n                count += 1\r\n\r\n    #Output\r\n   ","votes":null},{"text":"\r\n    c = 0\r\n    for i in range(N):\r\n        for j in range(N):\r\n            if (i!=j):\r\n                if A[i]^A[j]%2==1:\r\n                    c += 1\r\n    return c\r\n\r\nn=int(input())\r\nA=[]\r\nfor i in range(n):\r\n    A.append(int(input()))\r\nprint(find_Odd_Pair(A,n))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    odd_pair = 0\r\n    \r\n    for i in range(N) :\r\n        for j in range(i","votes":null},{"text":"\r\n\r\n    #Initialization\r\n    count = 0\r\n\r\n    #Finding the required pairs\r\n    for i in range(N-1) :\r\n        for j in range(i+1, N) :\r\n            if (A[i]^A[j])%2 != 0 :\r\n                count += 1\r\n\r\n    #Returning the count\r\n    return count\r\n\r\n\r\n#Taking N as input\r\nN = int(input())\r\n\r\n#Taking N elements in an array A\r\nA = list(map(int, input().split()))\r\n\r\n#Finding the required pairs and printing the count\r\nprint(find_Odd_Pair(A, N))","votes":null},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(0, N) :\r\n        for j in range(i+1, N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\n#main\r\nN = int(input())\r\nA = list(map(int, input().split()))\r\nprint(find_Odd_Pair(A, N))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#-----------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#-----------------------------------------------------------------------------------------------\r\n#Code 2nd method\r\n#-----------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    \r\n    # initializing the count\r\n    count = 0\r\n    \r\n    # looping through the array to find the pairs\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            \r\n            # checking if the xor is odd or not\r\n            if (A[i]^A[j])%2 != 0:\r\n                count += 1\r\n    \r\n    # returning the count\r\n    return count\r\n\r\n\r\n# main function\r\nif __name__ == \"__main__\":\r\n    \r\n    # taking input from user\r\n    N = int(input('Enter the number of elements in the array : '))\r\n    \r\n    # taking input from user\r\n    A = list(map(int,input('Enter the elements of the array : ').strip().split()))[:N]\r\n    \r\n    # calling the function\r\n    print('The count of the pairs with xor as an odd number is : ',find_Odd_Pair(A,N))\r\n    \r\n\"\"\"\r\nTest Case 1:\r\n    Input:\r\n        Enter the number of elements in the array : 5\r\n        Enter the elements of the array : 2 4 6 3 1\r\n    Output:\r\n        The count of the pairs with xor as an odd number is :  3\r\n\r\nTest Case 2:\r\n    Input:\r\n        Enter the number of elements in the array : 5\r\n        Enter the elements of the array : 1 2 3 4 5\r\n    Output:\r\n        The count of the pairs with xor as an odd number is :  10\r\n\r\nTest Case 3:\r\n    Input:\r\n        Enter the number of elements in the array : 5\r\n        Enter the elements of the array : 1 1 1 1 1\r\n    Output:\r\n        The count of the pairs with xor as an odd number is :  0\r\n\r\nTest Cas","votes":null},{"text":"\r\n    return sum(A[i]^A[i+1]%2==1 for i in range(N-1))\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5, 6]\r\n    N = len(A)\r\n    print(f'The number of odd pairs are : {find_Odd_Pair(A,N)}')\r\n\r\n\r\n\"\"\"\r\n\r\nApproach 2: Using XOR (^) Operator\r\n\r\nTime Complexity: O(N)\r\nSpace Complexity","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 != 0 :\r\n                count += 1\r\n    return count\r\n\r\n\r\nprint(\"Enter the size of the array : \")\r\nN = int(input())\r\nprint(\"Enter the elements of the array : \")\r\nA = list(map(int,input().split()))\r\nprint(\"The number of pairs with odd xor","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(N):\r\n            if (A[i] ^ A[j]) % 2 == 1:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    while t:\r\n       ","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N,1):\r\n        for j in range(0,N,1):\r\n            if (A[i] ^ A[j]) % 2 != 0:\r\n                count = count + 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    result = 0\r\n    \r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if ((A[i]^A[j])%2 != 0):\r\n                result += 1\r\n    \r\n    return result\r\n\r\nif __name__ == \"__main__\":\r\n    A = [1, 2, 3, 4, 5, 6]\r\n    N = len(A)\r\n    print(\"The number of pairs with xor as an odd number are \", end=\"\")\r\n    print(find_Odd_Pair(A,N))\r\n\r\n    \r\n\"\"\"\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in A:\r\n        for j in A:\r\n            if (i ^ j) % 2:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    a = input().split()\r\n    N = int(a[0])\r\n    A = list(map(int, a[1:]))\r\n    print(find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    A = [1,2,3,4,","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1, N):\r\n            if (A[i] ^ A[j]) % 2 == 1:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5, 6]\r\n    N = 6\r\n    print(find_Odd_Pair(A, N))\r\n\r\n\r\n\"\"\"\r\nTime Complexity : O(n^2)\r\nSpace Complexity : O(1)\r\n\r\nSample Input:\r\n[1, 2, 3, 4, 5, 6]\r\n6\r\n\r\nSample Output:\r\n4\r\n\r\nExplanation:\r\n[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2==1 :\r\n                count += 1\r\n    return count\r\n\r\n# Input\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nN = len(A)\r\n\r\n# Output\r\nprint(\"Count of Pairs with XOR as Odd number : \", end=\"\")\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n# Time Complexity : O(n^2)\r\n# Space Complexity : O(1)\r\n\r\n# Sample Input :\r\n# Enter the Array\r\n# 1 2 3 4 5 6 7 8 9\r\n# Enter the size of the array\r\n# 9\r\n\r\n# Sample Output :\r\n# Count of Pairs with XOR as Odd number : 10\r\n\r\n\r\n# Sample Input :\r\n# Enter the Array\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# Enter the size of the array\r\n# 10\r\n\r\n# Sample Output :\r\n# Count of Pairs with XOR as Odd number : 15\r\n\r\n\r\n# Sample Input :\r\n# Enter the Array\r\n# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\r\n# Enter the size of the array\r\n# 15\r\n\r\n# Sample Output :\r\n# Count of Pairs with XOR as Odd number : 21\r\n\r\n\r\n# Sample Input :\r\n# Enter the Array\r\n# 1 2 3 4 5 6 7 8 9 10 11 12 13 ","votes":null},{"text":"\r\n\r\n    count = 0\r\n\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])&1 :\r\n                count += 1\r\n\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n\r\n    A = [1, 2, 3, 4, 5]\r\n    N = 5\r\n\r\n    print(find_Odd_Pair(A,N))\r\n\r\n\r\n\"\"\"\r\n\r\nInput: A = [1, 2, 3, 4, 5]\r\n       N = 5\r\nOutput: 2\r\nExplanation: Array with odd xor is (2, 3)\r\n\r\nInput: A = [7, 9, 11, 13, 15]\r\n       N = 5\r\nOutput: 0\r\nExplanation: Array with odd xor is ().\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5, 6, 7]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSample Input 1:\r\n[1, 2, 3, 4, 5, 6, 7]\r\n7\r\n\r\nSample Output 1:\r\n3\r\n\r\nSample Input 2:\r\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\r\n10\r\n\r\nSample Output 2:\r\n4\r\n\r\nSample Input 3:\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n20\r\n\r\nSample Output 3:\r\n10\r\n\r\nExplanation for Input 3:\r\nThe pairs of elements which have an odd xor are:\r\n(1, 2) (1, 4) (1, 8) (1, 16) (2, 3) (2, 5) (2, 9) (2, 17) (3, 4) (3, 6) (3, 10) (4, 5) (4, 7) ","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j]) % 2 != 0:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A, N))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nINPUT\r\nN = 9\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nOUTPUT\r\n5\r\n\r\nEXPLANATION\r\nHere, the odd xor pairs are:\r\n(1, 3), (1, 5), (1, 7), (1, 9), (3, 5), (3, 7), (5, 7), (5, 9)\r\n\r\nSAMPLE II\r\n\r\nINPUT\r\nN = 10\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nOUTPUT\r\n10\r\n\r\nEXPLANATION\r\nHere, the odd xor pairs are:\r\n(1, 3), (1, 5), (1, 7), (1, 9), (3, 5), (3, 7), (5, 7), (5, 9), (7, 9), (9, 10)\r\n\r\nSAMPLE III\r\n\r\nINPUT\r\nN = 5\r\nA = [1, 2,","votes":null},{"text":"\r\n\r\n    count = 0\r\n    for i in range(N-1) :\r\n        for j in range(i+1,N) :\r\n            if(A[i]^A[j]&1) :\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    A = [1,2,3,4,5,6,7,8,9]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A, N))\r\n\r\n\r\n\r\n\"\"\"\r\nSample Input 1 :\r\nA = [1,2,3,4,5,6,7,8,9]\r\nN = 9\r\n\r\nSample Output 1 :\r\n10\r\n\r\nSample Input 2 :\r\nA = [2,4,6,8,10,12,14,16,18]\r\nN = 9\r\n\r\nSample Output 2 :\r\n0\r\n\r\nSample Input 3 :\r\nA = [1,3,5,7,9]\r\nN = 5\r\n\r\nSample Output 3 :\r\n5\r\n\r\nTime Complexity : O(n^2)\r\nSpace Complexity : O(1)\r\n\r\n\r\n\"\"\"\r\n","votes":null},{"text":"\r\n\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if ((A[i]^A[j])%2 != 0):\r\n                count += 1\r\n    return count\r\n\r\n# Driver Code\r\nA = list(map(int,input(\"Enter a list of integers: \").split()))\r\nN = len(A)\r\nprint(\"The number of pairs with xor as odd is : \",find_Odd_Pair(A,N))\r\n\r\n\"\"\"\r\n\r\nStandard Input and Output\r\n\r\nEnter a list of integers: 2 3 4 5 6\r\nThe number of pairs with xor as odd is :  8\r\n\r\nEnter a list of integers: 1 2 3 4 5\r\nThe number of pairs with xor as odd is :  6\r\n\r\nEnter a list of integers: 1 2 3 4 5 6\r\nThe number of pairs with xor as odd is :  12\r\n\r\nEnter a list of integers: 1 2 3 4 5 6 7\r\nThe number of pairs with xor as odd is :  20\r\n\r\nEnter a list of integers: 1 2 3 4 5 6 7 8\r\nThe number of pairs with xor as odd is :  28\r\n\r\nEnter a list of integers: 1 2 3 4 5 6 7 8 9\r\nThe number of pairs with xor as odd is :  36\r\n\r\nTime Complexity : O(n^2)\r\nSpace Complexity : O(1)\r\n\r\n\"\"\"\r\n\r\n\r\n# Using Bit Masking\r\n\r","votes":null},{"text":"\r\n    return sum([A[i] ^ A[j] % 2 == 1 for i in range(N) for j in range(i + 1, N)])\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1, N):\r\n            if (A[i]^A[j])%2:\r\n                count += 1\r\n    return count\r\n\r\nN = int(input())\r\nA = list(map(int, input().split()))\r\nprint(find_Odd_Pair(A,N))\r\n\r\n# TIME COMPLEXITY = O(N^2)\r\n# SPACE COMPLEXITY = O(1)\r\n\r\n\r\n# 2nd way\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(N) :\r\n            if (A[i]^A[j])%2 != 0 :\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    A = [1, 2, 3, 4, 5]\r\n    N = len(A)\r\n    ans = find_Odd_Pair(A,N)\r\n    print(\"The number of pairs with xor as an odd number are : \",ans)\r\n\r\n\r\n\r\n'''\r\nTime Complexity : O(N^2)\r\nSpace Complexity : O(1)\r\n\r\nINPUT :\r\nEnter the size of the array : 5\r\nEnter the elements of the array : 1 2 3 4 5\r\n\r\nOUTPUT :\r\nThe number of pairs with xor","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if (A[i] ^ A[j]) % 2 != 0:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    N = int(input(\"Enter the size of array : \"))\r\n    A = [int(input()) for i in range(N)]\r\n    print(find_Odd_Pair(A,N))\r\n\r\n\r\n\"\"\"\r\nSample Input:\r\nEnter the size of array : 5\r\n2\r\n3\r\n4\r\n5\r\n6\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if(A[i]^A[j] & 1):\r\n                count+=1\r\n    return count\r\n\r\nprint(find_Odd_Pair([1, 2, 3, 4, 5], 5))\r\nprint(find_Odd_Pair([1, 2, 3, 4, 5, 6], 6))\r\nprint(find_Odd_Pair([1, 2, 3, 4, 5, 6, 7], 7))\r\nprint(find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8], 8))\r\nprint(find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\r\nprint(find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\r\nprint(find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 11))\r\nprint(find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 12))\r\nprint(find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 13))\r\nprint(find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if ((A[i]^A[j])%2 != 0) :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__' :\r\n    N = int(input(\"Enter the size of the array : \"))\r\n    A = [int(x) for x in input(\"Enter the elements of the array : \").strip().split()]\r\n    print(\"The total number of pairs with xor as an odd number is :","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 :\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N)) # Output is 30\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N)) # Output is 70\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N)) # Output is 165\r\n\r\nA = [1, 2, 3","votes":null},{"text":"\r\n    res = 0\r\n    for i in range(N):\r\n        for j in range(N):\r\n            if (A[i] ^ A[j]) & 1 :\r\n                res += 1\r\n    return res\r\n\r\n\r","votes":null}],"time":{"count":45.0,"avg":160168.9823111111,"std":50999.4545125423,"cov":0.318410305}}
{"id":557,"question":"def toggle_string(string):\r\n    \"\"\"Write a function to toggle characters case in a string.\"\"\"","answers":[{"text":"\r\n    if string:\r\n        return string.swapcase()\r\n    return string\r\n\r\n\r","votes":48042.68},{"text":"\r\n    return string.swapcase()\r\n\r\n\r","votes":49923.048},{"text":"\r\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\r\n\r\n\r","votes":55284.012},{"text":"\r\n    return \"\".join([char.upper() if char.islower() else char.lower() for char in string])\r\n\r\n\r","votes":56497.728},{"text":"\r\n    return string.swapcase()\r\n\r\n\r\nprint(toggle_string(\"Hello\"))\r\nprint(toggle_string(\"hELLO\"))\r\nprint(toggle_string(\"hello\"))\r\n\r\n\r","votes":66687.048},{"text":"\r\n    return ''.join([c.swapcase() for c in string])\r\n\r\n\r","votes":69290.492},{"text":"\r\n    return string.swapcase()\r\n\r","votes":70706.008},{"text":"\r\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)\r\n\r\n\r","votes":71405.708},{"text":"\r\n    return ''.join([char.upper() if char.islower() else char.lower()\r\n                    for char in string])\r\n\r\n\r","votes":73971.78},{"text":"\r\n    new_string = []\r\n    for char in string:\r\n        if char.islower():\r\n            new_string.append(char.upper())\r\n        elif char.isupper():\r\n            new_string.append(char.lower())\r\n        else:\r\n            new_string.append(char)\r\n    return \"\".join(new_string)\r\n\r\n\r","votes":75627.8},{"text":"\r\n    return \"\".join([c.lower() if c.isupper() else c.upper() for c in string])\r\n\r\n\r","votes":77900.436},{"text":"\r\n    return \"\".join([c.lower() if c.isupper() else c.upper() for c in string])\r\n\r\n\r\n# Tests\r","votes":80422.984},{"text":"\r\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\r\n\r","votes":81026.692},{"text":"\r\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\r\n\r\n\r","votes":82956.692},{"text":"\r\n    result = ''\r\n    for char in string:\r\n        if char.islower():\r\n            char = char.upper()\r\n        else:\r\n            char = char.lower()\r\n        result += char\r\n    return result\r\n\r\n\r","votes":84160.612},{"text":"\r\n    return \"\".join(\r\n        [\r\n            char.upper() if char.islower() else char.lower()\r\n            for char in string\r\n        ]\r\n    )\r\n\r\n\r","votes":85351.104},{"text":"\r\n\r\n    string_list = list(string)\r\n    for i in range(len(string_list)):\r\n        if string_list[i] >= 'A' and string_list[i] <= 'Z':\r\n            string_list[i] = chr(ord(string_list[i]) + 32)\r\n        elif string_list[i] >= 'a' and string_list[i] <= 'z':\r\n            string_list[i] = chr(ord(string_list[i]) - 32)\r\n\r\n    return ''.join(string_list)\r\n\r\n\r","votes":89592.208},{"text":"\r\n    \r\n    # Create an empty list to append toggled characters to\r\n    toggled_string = []\r\n    \r\n    # Loop through each character in the string\r\n    for character in string:\r\n        # Check if the character is uppercase\r\n        if character.isupper():\r\n            # Add the lowercase version of the character to the list\r\n            toggled_string.append(character.lower())\r\n        # Check if the character is lowercase\r\n        elif character.islower():\r\n            # Add the uppercase version of the character to the list\r\n            toggled_string.append(character.upper())\r\n        # If the character is not uppercase or lowercase, add it to the list as is\r\n        else:\r\n            toggled_string.append(character)\r\n        \r\n    # Join the list into a single string and return it\r\n    return \"\".join(toggled_string)\r\n\r","votes":90303.596},{"text":"\r\n\r\n    toggle = []\r\n\r\n    for char in string:\r\n        if char.islower():\r\n            toggle.append(char.upper())\r\n        else:\r\n            toggle.append(char.lower())\r\n\r\n    return \"\".join(toggle)\r\n\r\n\r","votes":90760.804},{"text":"\r\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\r\n\r\n\r","votes":92131.032},{"text":"\r\n\r\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\r\n\r\n\r","votes":92707.196},{"text":"\r\n    return ''.join([i.lower() if i.isupper() else i.upper() for i in string])\r\n\r\n\r","votes":92937.748},{"text":"\r\n    return \"\".join([c.lower() if c.isupper() else c.upper() for c in string])\r\n\r\n","votes":93637.496},{"text":"\r\n\r\n    new_string = \"\"\r\n\r\n    for c in string:\r\n        if c.islower():\r\n            new_string += c.upper()\r\n        elif c.isupper():\r\n            new_string += c.lower()\r\n        else:\r\n            new_string += c\r\n    return new_string\r\n\r\n\r","votes":93885.52},{"text":"\r\n    return ''.join(map(lambda x: x.swapcase(), string))\r\n\r\n\r","votes":96175.212},{"text":"\r\n    toggle_string = ''\r\n    for char in string:\r\n        if char.isupper():\r\n            toggle_string += char.lower()\r\n        elif char.islower():\r\n            toggle_string += char.upper()\r\n    return toggle_string\r\n\r\n\r","votes":96343.472},{"text":"\r\n    ret = ''\r\n    for char in string:\r\n        if char == char.lower():\r\n            ret += char.upper()\r\n        else:\r\n            ret += char.lower()\r\n    return ret\r\n\r\n\r","votes":96408.608},{"text":"\r\n    string = list(string)\r\n    for index, item in enumerate(string):\r\n        if item.isupper():\r\n            string[index] = item.lower()\r\n        elif item.islower():\r\n            string[index] = item.upper()\r\n    return ''.join(string)\r\n\r\n\r\nprint(toggle_string('Hello World!'))\r\n\r\n# 4.  Write a function that takes a list of numbers and returns a new list of only the even numbers in the input list.\r\n\r","votes":96483.364},{"text":"\r\n    if not string:\r\n        return \"\"\r\n\r\n    result = \"\"\r\n    for char in string:\r\n        if char.islower():\r\n            result += char.upper()\r\n        elif char.isupper():\r\n            result += char.lower()\r\n        else:\r\n            result += char\r\n\r\n    return result\r\n\r\n\r","votes":98168.368},{"text":"\r\n    string_list = list(string)\r\n    new_string = []\r\n    for char in string_list:\r\n        if char.islower():\r\n            new_string.append(char.upper())\r\n        else:\r\n            new_string.append(char.lower())\r\n    return ''.join(new_string)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(toggle_string(\"abcde\"))\r\n    print(toggle_string(\"aBcDe\"))\r\n    print(toggle_string(\"ABCDE\"))\r\n    print(toggle_string(\"abcdeFG\"))\r\n    print(toggle_string(\"ABCDEFG\"))\r\n    print(toggle_string(\"ABCDEFGhijklmnopqrstuvwxyz\"))\r\n    print(toggle_string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))","votes":99077.28},{"text":"\r\n    output = \"\"\r\n    for char in string:\r\n        # uppercase letters\r\n        if char.isupper():\r\n            output += char.lower()\r\n        # lowercase letters\r\n        else:\r\n            output += char.upper()\r\n\r\n    return output\r\n\r\n\r","votes":100396.18},{"text":"\r\n    return ''.join([\r\n        x.upper() if x.islower() else x.lower() for x in string\r\n    ])\r\n\r\n\r","votes":100473.388},{"text":"\r\n    answer = \"\"\r\n    for letter in string:\r\n        if letter.islower():\r\n            answer += letter.upper()\r\n        else:\r\n            answer += letter.lower()\r\n    return answer\r\n\r\n\r","votes":101066.46},{"text":"\r\n    new_string = \"\"\r\n    for character in string:\r\n        if character.isupper():\r\n            new_string += character.lower()\r\n        elif character.islower():\r\n            new_string += character.upper()\r\n        else:\r\n            new_string += character\r\n    return new_string\r\n\r\n\r\nprint(toggle_string(\"Hello World\"))\r\nprint(toggle_string(\"hEllO wOrld\"))\r\nprint(toggle_string(\"hello world\"))\r\nprint(toggle_string(\"hELLO WORLD\"))\r\nprint(toggle_string(\"HellO WORLD\"))\r\n\r\n\r","votes":101923.188},{"text":"\r\n    return \"\".join([c.upper() if c.islower() else c.lower() for c in string])\r\n\r\n\r","votes":102952.972},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n        else:\r\n            new_string += char.upper()\r\n    return new_string\r\n\r\n\r","votes":105204.932},{"text":"\r\n\r\n    # Solution 1: Looping\r\n    toggled_string = []\r\n    for char in string:\r\n        if char.isupper():\r\n            toggled_string.append(char.lower())\r\n        elif char.islower():\r\n            toggled_string.append(char.upper())\r\n        else:\r\n            toggled_string.append(char)\r\n    return ''.join(toggled_string)\r\n\r\n\r","votes":106165.42},{"text":"\r\n    return ''.join(\r\n        map(\r\n            lambda char:\r\n            char.upper() if char.islower() else char.lower(),\r\n            string\r\n        )\r\n    )\r\n\r\n\r","votes":107542.82},{"text":"\r\n\r\n    result = ''\r\n\r\n    for element in string:\r\n        if element.islower():\r\n            element = element.upper()\r\n        elif element.isupper():\r\n            element = element.lower()\r\n\r\n        result += element\r\n\r\n    return result\r\n\r\n\r","votes":108602.0},{"text":"\r\n    toggle_chars = []\r\n    for char in string:\r\n        if char.islower():\r\n            toggle_chars.append(char.upper())\r\n        else:\r\n            toggle_chars.append(char.lower())\r\n    return \"\".join(toggle_chars)\r\n\r\n\r","votes":108643.324},{"text":"\r\n    toggled = []\r\n    for i in range(len(string)):\r\n        if string[i].isupper():\r\n            toggled.append(string[i].lower())\r\n        else:\r\n            toggled.append(string[i].upper())\r\n    return \"\".join(toggled)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Example:\")\r\n    print(toggle_string(\"String\"))\r\n\r\n    #These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert toggle_string(\"String\") == \"sTRING\"\r\n    assert toggle_string(\"STRING\") == \"StRing\"\r\n    assert toggle_string(\"sTriNg\") == \"StRiNg\"\r\n    assert toggle_string(\"str\") == \"STR\"\r\n    assert toggle_string(\"zxcvbnm\") == \"ZXCVBNM\"\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\r\n","votes":109089.316},{"text":"\r\n\r\n    # initialize the new string\r\n    new_string = \"\"\r\n\r\n    # iterate through the string\r\n    for char in string:\r\n\r\n        # if the character is uppercase, turn it to lowercase\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n\r\n        # if the character is lowercase, turn it to uppercase\r\n        elif char.islower():\r\n            new_string += char.upper()\r\n\r\n        # if the character is a number, keep it the same\r\n        else:\r\n            new_string += char\r\n\r\n    # return the new string\r\n    return new_string\r\n\r\n\r","votes":112074.336},{"text":"\r\n    toggle_str = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            toggle_str = toggle_str + char.lower()\r\n        elif char.islower():\r\n            toggle_str = toggle_str + char.upper()\r\n        else:\r\n            toggle_str = toggle_str + char\r\n    return toggle_str\r\n\r\n\r","votes":113165.508},{"text":"\r\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])\r\n\r\n\r","votes":113830.636},{"text":"\r\n    return ''.join(x.swapcase() for x in string)\r\n\r\n\r\nprint(toggle_string('hello world'))\r\nprint(toggle_string('Hello World'))\r\nprint(toggle_string('Hello World'))\r\n\r\n\r\n# Using .lower() and .upper()\r","votes":114716.956},{"text":"\r\n    \r\n    new_string = \"\"\r\n    \r\n    for letter in string:\r\n        if letter.isupper():\r\n            new_string += letter.lower()\r\n            \r\n        elif letter.islower():\r\n            new_string += letter.upper()\r\n    \r\n    return new_string\r\n\r\n    \r","votes":117230.464},{"text":"\r\n\r\n    new_string = ''\r\n    for char in string:\r\n        if char.islower():\r\n            new_string += char.upper()\r\n        else:\r\n            new_string += char.lower()\r\n    return new_string\r\n\r\n\r","votes":119123.28},{"text":"\r\n    result = \"\"\r\n    for i in string:\r\n        if i.islower():\r\n            result += i.upper()\r\n        else:\r\n            result += i.lower()\r\n    \r\n    return result\r\n\r\n\r","votes":119215.416},{"text":"\r\n    string = list(string)\r\n    for i in range(len(string)):\r\n        if string[i].islower():\r\n            string[i] = string[i].upper()\r\n        elif string[i].isupper():\r\n            string[i] = string[i].lower()\r\n    return ''.join(string)\r\n\r\n\r","votes":119240.124},{"text":"\r\n    list_string = []\r\n    for letter in string:\r\n        if letter.islower():\r\n            list_string.append(letter.upper())\r\n        elif letter.isupper():\r\n            list_string.append(letter.lower())\r\n        else:\r\n            list_string.append(letter)\r\n    return \"\".join(list_string)\r\n\r\n\r\nprint(toggle_string(\"Hello\"))\r\n\r\n# Expected output:\r\n# HELLO\r\n\r\n\r\n# Approach 2:\r","votes":119700.768},{"text":"\r\n    new_string = \"\"\r\n    for character in string:\r\n        if character.islower():\r\n            new_string += character.upper()\r\n        elif character.isupper():\r\n            new_string += character.lower()\r\n        else:\r\n            new_string += character\r\n    return new_string\r\n\r\n\r","votes":121778.192},{"text":"\r\n    out = ''\r\n    for char in string:\r\n        if char.isupper():\r\n            out += char.lower()\r\n        elif char.islower():\r\n            out += char.upper()\r\n    return out\r\n\r\n\r","votes":123391.624},{"text":"\r\n    new_string = ''\r\n    for i in string:\r\n        if i.isupper():\r\n            new_string += i.lower()\r\n        else:\r\n            new_string += i.upper()\r\n    return new_string\r\n\r\n\r","votes":128545.168},{"text":"\r\n    toggle_string = ''\r\n    for char in string:\r\n        if char.isupper():\r\n            toggle_string += char.lower()\r\n        elif char.islower():\r\n            toggle_string += char.upper()\r\n        else:\r\n            toggle_string += char\r\n    return toggle_string\r\n\r\n\r","votes":135519.052},{"text":"\r\n    toggled = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            toggled += char.lower()\r\n        elif char.islower():\r\n            toggled += char.upper()\r\n        else:\r\n            toggled += char\r\n    return toggled\r\n\r\n\r","votes":136425.416},{"text":"\r\n    \r\n    # 1. Initialize a new string\r\n    new_string = \"\"\r\n    \r\n    # 2. Iterate through the string\r\n    for char in string:\r\n        # 3. Check if the character is uppercase\r\n        if char.isupper():\r\n            # 4. If so, append its lowercase equivalent\r\n            new_string += char.lower()\r\n        else:\r\n            # 5. If not, append its uppercase equivalent\r\n            new_string += char.upper()\r\n    # 6. Return the new string\r\n    return new_string\r\n\r","votes":136844.376},{"text":"\r\n    return \"\".join(\r\n        [\r\n            c.lower() if c.isalpha() and c.isupper() else c.upper() if c.isalpha() and c.islower() else c\r\n            for c in string\r\n        ]\r\n    )\r\n\r\n\r","votes":141178.9},{"text":"\r\n    toggled_string = \"\"\r\n    for character in string:\r\n        if character.isupper():\r\n            toggled_string += character.lower()\r\n        elif character.islower():\r\n            toggled_string += character.upper()\r\n        else:\r\n            toggled_string += character\r\n    return toggled_string\r\n\r\n\r","votes":143770.276},{"text":"\r\n    # Create a list of the letters in the string\r\n    str_list = list(string)\r\n    for i, letter in enumerate(str_list):\r\n        if letter.isupper():\r\n            str_list[i] = letter.lower()\r\n        elif letter.islower():\r\n            str_list[i] = letter.upper()\r\n    # Join the letters back together in a string\r\n    return ''.join(str_list)\r\n\r\n\r","votes":145202.492},{"text":"\r\n    # return string.swapcase()\r\n\r\n    new = []\r\n    for i in string:\r\n        if i.islower():\r\n            new.append(i.upper())\r\n        elif i.isupper():\r\n            new.append(i.lower())\r\n        else:\r\n            new.append(i)\r\n    return \"\".join(new)\r\n\r\n\r\nprint(toggle_string(\"Hello World!\"))\r\n\r\n\r","votes":150536.976},{"text":"\r\n    result = \"\"\r\n    for char in string:\r\n        if char.islower():\r\n            result += char.upper()\r\n        elif char.isupper():\r\n            result += char.lower()\r\n        else:\r\n            result += char\r\n    return result\r\n\r\n\r","votes":152983.776},{"text":"\r\n\r\n    result = []\r\n    for char in string:\r\n        if char.islower():\r\n            result.append(char.upper())\r\n        else:\r\n            result.append(char.lower())\r\n\r\n    return \"\".join(result)\r\n\r\n\r\nif __name__ == '__main__':\r\n    string = 'BnL'\r\n    result = toggle_string(string)\r\n    print(result)\r\n\r\n\r","votes":173087.276},{"text":"\r\n    \r\n    # Make a list of the string\r\n    new_string = list(string)\r\n    \r\n    # Toggle the case of the characters\r\n    for i in range(len(new_string)):\r\n        \r\n        # If a character is uppercase, make it lowercase\r\n        if ord(new_string[i]) in range(65, 91):\r\n            new_string[i] = chr(ord(new_string[i]) + 32)\r\n        # If a character is lowercase, make it uppercase\r\n        elif ord(new_string[i]) in range(97, 123):\r\n            new_string[i] = chr(ord(new_string[i]) - 32)\r\n        \r\n    # Rejoin the list\r\n    new_string = ''.join(new_string)\r\n    \r\n    return new_string\r\n\r\n# Test the function\r\nprint(toggle_string('Hello World'))\r\nprint(toggle_string('hello world'))\r\nprint(toggle_string('hEllO wOrLd'))\r\n\r\n# Test the function with special characters\r\nprint(toggle_string(''))\r\nprint(toggle_string('123'))\r\nprint(toggle_string('ABC'))\r\nprint(toggle_string('abc'))\r\nprint(toggle_string('!@#$%^&*()'))\r\nprint(toggle_string('~`@#$%^&*()_-+='))\r\nprint(toggle_string('~`@#$%^&*()_-+=}{[]\\|:;\"\\'<>?,.\/'))\r\n\r\n\r\n# Problem 2:\r","votes":178950.376},{"text":"\r\n\r\n    # Split the string into a list of characters\r\n    character_list = list(string)\r\n\r\n    # Iterate through the list of characters\r\n    for i in range(len(character_list)):\r\n        # Check if the character is a lowercase letter\r\n        if character_list[i].islower():\r\n            # If so, convert the character to uppercase\r\n            character_list[i] = character_list[i].upper()\r\n        # Otherwise, check if the character is an uppercase letter\r\n        elif character_list[i].isupper():\r\n            # If so, convert the character to lowercase\r\n            character_list[i] = character_list[i].lower()\r\n\r\n    # Return the list as a string\r\n    return \"\".join(character_list)\r\n\r\n\r\nprint(toggle_string(\"aBcDeFg\"))  # Should be: \"AbCdEfG\"\r\nprint(toggle_string(\"a1B2c3D4e5F6g7\"))  # Should be: \"A1b2C3d4E5f6G7\"\r\nprint(toggle_string(\"A1b2C3d4E5f6G7\"))  # Should be: \"a1B2c3D4e5F6g7\"\r\nprint(toggle_string(\"aBcDeFg123\"))  # Should be: \"AbCdEfG123\"\r\nprint(toggle_string(\"aBcDeFg123!@#$%^&*()))_+-=\"))  # Should be: \"AbCdEfG123!@#$%^&*()))_+-=\"\r\nprint(toggle_string(\"\"))  # Should be: \"\"\r\n\r\n\r","votes":193321.208},{"text":"\r\n    string_list = list(string)\r\n    for i in range(len(string_list)):\r\n        if string_list[i].isupper():\r\n            string_list[i] = string_list[i].lower()\r\n        elif string_list[i].islower():\r\n            string_list[i] = string_list[i].upper()\r\n    return \"\".join(string_list)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    string = input(\"Enter string: \")\r\n    print(toggle_string(string))\r\n\r\n\r","votes":193600.924},{"text":"\r\n    # use a lambda function to toggle case\r\n    return \"\".join(map(lambda c: c.upper() if c.islower() else c.lower(), string))\r\n\r\n# TEST CASES\r\nprint(toggle_string(\"Hello World\")) # \"hELLO wORLD\"\r\nprint(toggle_string(\"hELLO wORLD\")) # \"Hello World\"\r\nprint(toggle_string(\"Hello\")) # \"hELLO\"\r\nprint(toggle_string(\"hELLO\")) # \"Hello\"\r\nprint(toggle_string(\"\")) # \"\"\r\n\r\n\r\n# QUESTION 3\r\n# Given a string and an integer k, you need to reverse the first k characters\r\n# for every 2k characters counting from the start of the string. If there are less\r\n# than k characters left, reverse all of them. If there are less than 2k but more\r\n# than or equal to k characters, then reverse the first k characters and left the\r\n# other as original.\r\n\r","votes":203457.972},{"text":"\r\n\r\n    # Write your code here\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string = new_string + char.lower()\r\n        elif char.islower():\r\n            new_string = new_string + char.upper()\r\n        else:\r\n            new_string = new_string + char\r\n    return new_string\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    assert toggle_string(\"Hello\") == \"hELLO\"\r\n    assert toggle_string(\"hELLO\") == \"Hello\"\r\n    assert toggle_string(\"hElLo\") == \"HeLlO\"\r\n    assert toggle_string(\"HeLlO\") == \"hElLo\"\r\n    assert toggle_string(\"\") == \"\"\r\n    assert toggle_string(\"12345\") == \"12345\"\r\n    assert toggle_string(\"1a2b3c4d5e\") == \"1A2B3C4D5E\"\r\n    assert toggle_string(\"1A2B3C4D5E\") == \"1a2b3c4d5e\"\r\n    assert toggle_string(\"Toggling is Fun!\") == \"tOGGlInG iS fUn!\"\r\n    assert toggle_string(\"tOGGlInG iS fUn!\") == \"Toggling is Fun!\"\r\n    print(\"All test cases passed!\")\r\n\r\n\r\n# Python program to toggle\r\n# characters case in a string\r\n\r\n# Function to toggle\r\n# characters case in a string\r","votes":252477.748},{"text":"\r\n    return ''.join(map(lambda char: char.","votes":null},{"text":"\r\n\r\n    # get the list of characters\r\n    characters = list(string)\r\n\r\n    # iterate through the list and toggle the characters","votes":null},{"text":"\r\n    \r\n    # Split string into a list of characters\r\n    character_list = list(string)\r\n\r\n    # Create a 'case' list to determine whether to toggle upper, lower, or no case\r\n    case = []\r\n\r\n    # Create a counter\r\n    i = 0\r\n\r\n    # Iterate through characters in string\r\n    for char in character_list:\r\n        # If the character is a 'U' capitalize it\r\n        if char == 'u':\r\n            character_list[i] = character_list[i].upper()\r\n            case.append(1)\r\n\r\n        # If the character is a 'L' lowercase it\r\n        elif char == 'l':\r\n            character_list[i] = character_list[i].lower()\r\n            case.append(2)\r\n\r\n        # If the character is not indicated to be toggled, do not toggle it\r\n        else:\r\n            case.append(0)\r\n\r\n        # Increment counter\r\n        i += 1\r\n\r\n    # Create a new string from the characters in the list\r\n    new_string = ''.join(character_list)\r\n\r\n    # Return new string\r\n    return new_string\r\n\r\n# Testing\r\n\r\n# Should return 'cAse'\r\nprint(toggle_string('cAse'))\r\n\r\n# Should return 'caSE'\r\nprint(toggle_string('caSE'))\r\n\r\n# Should return 'CaSE'\r\nprint(toggle_string('CaSE'))\r\n\r\n# Should return 'cAsE'\r\nprint(toggle_string('cAsE'))\r\n\r\n# Should return 'cASe'\r\nprint(toggle_string('cASe'))\r\n\r\n# Should return 'cAse'\r\nprint(toggle_string('cAse'))\r\n\r\n# Should return 'cAsE'\r\nprint(toggle_string('cAsE'))\r\n\r\n# Should return 'cASe'\r\nprint(toggle_string('cASe'))\r\n\r\n","votes":null},{"text":"\r\n    \r\n    # Create an empty list\r\n    toggled_string = []\r\n    \r\n    # Iterate through each character in the string\r\n    for char in string:\r\n        # Toggle case of the character\r\n        toggled_char = char.swapcase()\r\n        \r\n        # Append toggled character to the end of the list\r\n        toggled_string.append(toggled_char)\r\n        \r\n    # Join the list into a string\r\n    toggled_string = ''.join(toggled_string)\r\n    \r\n    # Return the toggled string\r\n    return toggled_string\r\n\r\n\r\n# Test cases\r\nprint(toggle_string('hello'))\r\nprint(toggle_string('HELLO'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello World'))\r\nprint(toggle_string('HELLO WORLD'))\r\nprint(toggle_string('Hello World!'))\r\nprint(toggle_string('HELLO WORLD!'))\r\nprint(toggle_string('Hello World! How are you today?'))\r\nprint(toggle_string('HELLO WORLD! HOW ARE YOU TODAY?'))\r\nprint(toggle_string('Hello World! How are you today? Have you been to the park today?'))\r\nprint(toggle_string('HELLO WORLD! HOW ARE YOU TODAY? HAVE YOU BEEN TO THE PARK TODAY?'))\r\nprint(toggle_string('Hello World! How are you today? Have you been to the park today? It is a nice day today. It is a beautiful day.'))\r\nprint(toggle_string('HELLO WORLD! HOW ARE YOU TODAY? HAVE YOU BEEN TO THE PARK TODAY? IT IS A NICE DAY TODAY. IT IS A BEAUTIFUL DAY.'))\r\nprint(toggle_string('Hello World! How are you today? Have you been to the park today? It is a nice day today. It is a beautiful day. ","votes":null},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.islower():\r\n            new","votes":null},{"text":"\r\n    output = \"\"\r\n    for char in string:\r\n        if char.islower():\r\n            output += char.upper()\r\n        elif char.isupper():\r\n            output += char.lower()\r\n        else:\r\n            output += char\r\n    return output\r\n\r\n\r\nassert toggle_string(\"abcd\") == \"ABCD\"\r\nassert toggle_string(\"AbCd\") == \"aBcD\"\r\nassert toggle_string(\"AbCdEfG\") == \"aBcDeFg\"\r\nassert toggle_string(\"ABCDEFG\") == \"abcdefg\"\r\nassert toggle_string(\"abcdefg\") == \"ABCDEFG\"\r\nassert toggle_string(\"aB","votes":null},{"text":"\r\n    string = string.split()\r\n    for i in range(len(string)):\r\n        string[i] = toggle_chars(string[i])\r\n    string = ' '.join(string)\r\n    return string\r\n\r","votes":null},{"text":"\r\n\r\n    # The string we will return\r\n    toggled_string = \"\"\r\n\r\n    # Loop over each character in the input string\r\n    for char in string:\r\n        if char.islower():\r\n            # If a character is lowercase, uppercase it\r\n            toggled_string += char.upper()\r\n        else:\r\n            # If a character is uppercase, lowercase it\r\n            toggled_string += char.lower()\r\n\r\n    return toggled_string\r\n\r\n\r\n# Tests\r\nassert toggle_string(\"Hello\") == \"hELLO\", \"First test failed\"\r\nassert toggle_string(\"hELLO\") == \"Hello\", \"Second test failed\"\r\nassert toggle_string(\"hello\") == \"HELLO\", \"Third test failed\"\r\nassert toggle_string(\"HELLO\") == \"hello\", \"Fourth test failed\"\r\nassert toggle_string(\"h\") == \"H\", \"Fifth test failed\"\r\nassert toggle_string(\"H\") == \"h\", \"Sixth test failed\"\r\nassert toggle_string(\"\") == \"\", \"Seventh test failed\"\r\nassert toggle_string(\"a\") == \"A\", \"Eighth test failed\"\r\nassert toggle_string(\"A\") == \"a\", \"Ninth test failed\"\r\nassert toggle_string(\"Hello World\") == \"hELLO wORLD\", \"Tenth test failed\"\r\nassert toggle_string(\"hELLO wORLD\") == \"Hello World\", \"Eleventh test failed\"\r\nassert toggle_string(\"hello world\") == \"HELLO WORLD\", \"Twelfth test failed\"\r\nassert toggle_string(\"HELLO WORLD\") == \"hello world\", \"Thirteenth test failed\"\r\nassert toggle_string(\"hello world\") == \"HELLO WORLD\", \"Fourteenth test failed\"\r\nassert toggle_string(\"Hello World\") == \"hELLO wORLD\", \"Fifteenth test failed\"\r\nassert toggle_string(\"hELLO wORLD\") == \"Hello World\", \"Sixteenth test failed\"\r\nassert toggle_string(\"hello world\") == \"H","votes":null},{"text":"\r\n    \r\n    return \"\".join([c.upper() if c.islower() else c.lower() for c in string])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Example:\")\r\n    print(toggle_string('","votes":null},{"text":"\r\n    lst = list(string)\r\n    for i in range(len(lst)):\r\n        if lst[i].islower():\r\n            lst[i] = lst[i].upper()\r\n        else:\r\n            lst[i] = lst[i].lower()\r\n    return \"\".join(lst)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(toggle_string(\"Hello\"))\r\n    print(toggle_string(\"hello\"))\r\n    print(toggle_string(\"hELLO\"))\r\n    print(toggle_string(\"12345\"))\r\n    print(toggle_string(\"!@#$%^&*()\"))\r\n    print(toggle_string(\"!@#$%^&*()[]","votes":null},{"text":"\r\n    if string:\r\n        return string.swapcase()\r\n    return string\r\n\r\n\r\nprint(toggle_string('aBc'))\r\nprint(toggle_string(''))\r\nprint(toggle_string('AbC'))\r\nprint(toggle_string('a","votes":null},{"text":"\r\n    \r\n    # Create empty string\r\n    new_string = \"\"\r\n    \r\n    # Iterate through each character in string\r\n    for character in string:\r\n        \r\n        # If character is upper case, change to lower case\r\n        if character.isupper():\r\n            new_string += character.lower()\r\n        \r\n        # If character is lower case, change to upper case\r\n        elif character.islower():\r\n            new_string += character.upper()\r\n        \r\n        # Else leave character as is\r\n        else:\r\n            new_string += character\r\n    \r\n    # Return new string\r\n    return new_string\r\n\r\n\r\n# ------------------------------------------------------------------------------\r\n# TEST CASES\r\n# ------------------------------------------------------------------------------\r\nprint(\"Testing toggle_string\")\r\n\r\nprint(\"Testing toggle_string('This is a test')\")\r\nexpected = 'THIS IS A TEST'\r\nactual = toggle_string('This is a test')\r\nprint(\"Expected:\", expected)\r\nprint(\"Actual:  \", actual)\r\n\r\nprint(\"Testing toggle_string('This is a test.')\")\r\nexpected = 'THIS IS A TEST.'\r\nactual = toggle_string('This is a test.')\r\nprint(\"Expected:\", expected)\r\nprint(\"Actual:  \", actual)\r\n\r\nprint(\"Testing toggle_string('This is a test!')\")\r\nexpected = 'THIS IS A TEST!'\r\nactual = toggle_string('This is a test!')\r\nprint(\"Expected:\", expected)\r\nprint(\"Actual:  \", actual)\r\n\r\nprint(\"Testing toggle_string('This is a test?')\")\r\nexpected = 'THIS IS A TEST?'\r\nactual = toggle_string('This is a test?')\r\nprint(\"Expected:\", expected)\r\nprint(\"Actual:  \", actual)\r\n\r\nprint(\"Testing toggle_string('THIS IS A TEST')\")\r\nexpected = 'this is a test'\r\nactual = toggle_string('T","votes":null},{"text":"\r\n    result = ''\r\n    for char in string:\r\n        if char.islower():\r\n            result += char.upper()\r\n        elif char.isupper():\r\n            result += char.lower()\r\n        else:\r\n            result += char\r\n    return result\r\n\r\nprint(toggle_string('","votes":null},{"text":"\r\n\r\n    new_string = ''\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n        elif char.islower():\r\n            new_string += char.upper()\r\n        else:\r\n            new_string += char\r\n","votes":null},{"text":"\r\n    return ''.join([char if char.islower() else char.upper() for char in string])\r\n\r\n\r","votes":null},{"text":"\r\n    lower = []\r\n    upper = []\r\n    for i in string:\r\n        if i.islower():\r\n            lower.append(i)\r\n        elif i.isupper():\r\n            upper.append(i)\r\n    return","votes":null},{"text":"\r\n    return \"\".join([c.upper() if c.islower() else c.lower() for c in string])\r\n    # return \"\".join([c.lower() if c.isupper() else c.upper() for c in string])\r\n\r\n\r\nprint(toggle_string(\"Hello, World!\"))\r\nprint(toggle_string(\"hELLO, woRLD!\"))\r\nprint(toggle_string(\"Hello, World!\"))\r\nprint(toggle_string(\"hELLO, woRLD!\"))\r\nprint(toggle_string(\"\"))\r\nprint(toggle_string(\"h\"))\r\nprint(toggle_string(\"H\"))\r\nprint(toggle_string(\"H \"))\r\nprint(toggle_string(\"H e\"))\r\nprint(toggle_string(\"hE\"))\r\nprint(toggle_string(\"he\"))\r\nprint(toggle_string(\"hE \"))\r\nprint(toggle_string(\"he \"))\r\nprint(toggle_string(\"hE e\"))\r\nprint(toggle_string(\"H e\"))\r\nprint(toggle_string(\"H E\"))\r\nprint(toggle_string(\"he \"))\r\nprint(toggle_string(\"hE \"))\r\nprint(toggle_string(\"hE e\"))\r\nprint(toggle_string(\"H e\"))\r\nprint(toggle_string(\"H E\"))\r\nprint(toggle_string(\"H e \"))\r\nprint(toggle_string(\"hE e \"))\r\nprint(toggle_string(\"H E e\"))\r\nprint(toggle_string(\"H e E\"))\r\nprint(toggle_string(\"hE e E\"))\r\nprint(toggle_string(\"hE e E \"))\r\nprint(toggle_string(\"H e E \"))\r\nprint(toggle_string(\"hE e E \"))\r\nprint(toggle_string(\"H e E e\"))\r\nprint(toggle_string(\"hE e E e\"))\r\nprint(toggle_string(\"H e E e \"))\r\nprint(toggle_string(\"hE e E e \"))\r\nprint(toggle_string(\"H e E e e\"))\r\nprint(toggle","votes":null},{"text":"\r\n    result = []\r\n\r\n    for i in string:\r\n        if i.isupper():\r\n            result.append(i.lower())\r\n","votes":null},{"text":"\r\n\r\n    result = ''\r\n    for char in string:\r\n        if char.isupper():\r\n            result += char.lower()\r\n        else:\r\n            result += char.upper()\r\n    return result\r\n\r\n\r\nprint(toggle_string('Hello World'))\r\nprint(toggle_string('hELLO WORLD'))\r\nprint(toggle_string('Hello World!'))\r\nprint(toggle_string('hELLO WORLD!'))\r\nprint(toggle_string('Hello World?'))\r\nprint(toggle_string('hELLO WORLD?'))\r\nprint(toggle_string('1234567890'))\r\nprint(toggle_string('1234567890'))\r\nprint(toggle_string('!@#$%^&*()'))\r\nprint(toggle_string('!@#$%^&*()'))\r\nprint(toggle_string('1234567890!@#$%^&*()'))\r\nprint(toggle_string('1234567890!@#$%^&*()'))\r\nprint(toggle_string(''))\r\nprint(toggle_string(''))\r\nprint(toggle_string('A'))\r\nprint(toggle_string('A'))\r\nprint(toggle_string('","votes":null}],"time":{"count":67.0,"avg":109840.2383283582,"std":37511.1783512014,"cov":0.3415067094}}
{"id":558,"question":"def digit_distance_nums(n1, n2):\r\n    \"\"\"Write a python function to find the digit distance between two integers.\"\"\"","answers":[{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    \r\n    return sum(abs(int(i)-int(j)) for i, j in zip(n1, n2))\r\n\r\n\r\nprint(digit_distance_nums(567, 123))\r\nprint(digit_distance_nums(1234567, 7654321))\r\nprint(digit_distance_nums(100, 100))\r\n\r\n# Another solution\r\n\r","votes":108902.132},{"text":"\r\n    \r\n    # 1. convert numbers to strings\r\n    n1, n2 = str(n1), str(n2)\r\n    \r\n    # 2. use zip() to pair digits from each number\r\n    # 3. use abs() to find the difference between the two\r\n    # 4. add up the differences\r\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(n1, n2))\r\n\r\n\r\n# ------------------------------------------------------------------------------\r\n#                           PART 2: TEST FUNCTION\r\n# ------------------------------------------------------------------------------\r","votes":109357.532},{"text":"\r\n\r\n    d1 = [int(x) for x in str(n1)]\r\n    d2 = [int(x) for x in str(n2)]\r\n\r\n    distance = 0\r\n\r\n    for i in range(len(d1)):\r\n        distance += abs(d1[i] - d2[i])\r\n\r\n    return distance\r\n\r\n\r","votes":127054.808},{"text":"\r\n    return sum(abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2)))\r\n\r\n\r","votes":138473.296},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    \r\n    n1_list = [int(i) for i in n1]\r\n    n2_list = [int(i) for i in n2]\r\n    \r\n    n1_list.sort()\r\n    n2_list.sort()\r\n    \r\n    distance = 0\r\n    \r\n    for i in range(len(n1_list)):\r\n        distance += abs(n1_list[i] - n2_list[i])\r\n        \r\n    return distance\r\n\r","votes":177807.952},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n\r\n    if len(n1) > len(n2):\r\n        max_len = len(n1)\r\n    else:\r\n        max_len = len(n2)\r\n\r\n    result = 0\r\n    for i in range(max_len):\r\n        if i < len(n1):\r\n            if i < len(n2):\r\n                if n1[i] != n2[i]:\r\n                    result += abs(int(n1[i]) - int(n2[i]))\r\n            else:\r\n                result += int(n1[i])\r\n        else:\r\n            result += int(n2[i])\r\n\r\n    return result\r\n\r\n\r\n# test\r\nprint(digit_distance_nums(345, 543))\r\n\r\n\r","votes":222721.152},{"text":"\r\n    return (((n1+n2)**2 - (n1**2 + n2**2))**0.5)\r\n  \r\n#Test Code\r\nprint(digit_distance_nums(100, 1000))\r\nprint(digit_distance_nums(1000, 100))\r\nprint(digit_distance_nums(100, 10000))\r\nprint(digit_distance_nums(10000, 100))\r\nprint(digit_distance_nums(100, 100000))\r\nprint(digit_distance_nums(100000, 100))\r\nprint(digit_distance_nums(100, 1000000))\r\nprint(digit_distance_nums(100000, 100))\r\nprint(digit_distance_nums(100, 10000000))\r\nprint(digit_distance_nums(1000000, 100))\r\nprint(digit_distance_nums(100, 100000000))\r\nprint(digit_distance_nums(10000000, 100))\r\nprint(digit_distance_nums(100, 1000000000))\r\nprint(digit_distance_nums(100000000, 100))\r\nprint(digit_distance_nums(100, 10000000000))\r\nprint(digit_distance_nums(1000000000, 100))\r\nprint(digit_distance_nums(100, 100000000000))\r\nprint(digit_distance_nums(10000000000, ","votes":null},{"text":"\r\n    return sum([abs(len(str(n1)) - len(str(n2)))])\r\n\r\n\r\n# Test cases\r\nprint(digit_distance_nums(234, 345))\r\nprint(digit_distance_nums(123456, 654321))\r\nprint(digit_distance_nums(1000000, 123456))\r\nprint(digit_distance_nums(1234, 1234))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if n1 > n2:\r\n        return digit_distance_nums(n2, n1)\r\n    \r\n    max_num = n2\r\n    min_num = n1\r\n    \r\n    while max_num >= 10:\r\n        max_num \/\/= 10\r\n        \r\n    distance = 0\r\n    \r\n    while max_num > min_num:\r\n        max_num \/\/= 10\r\n        distance += 1\r\n        \r\n    return distance\r\n    \r\n# test\r\nprint(digit_distance_nums(10, 5)) # 2\r\nprint(digit_distance_nums(10, 15)) # 1\r\nprint(digit_distance_nums(100, 15)) # 3\r\nprint(digit_distance_nums(100, 150)) # 2\r\nprint(digit_distance_nums(100, 1500)) # 1\r\nprint(digit_distance_nums(1500, 150000)) # 3\r\nprint(digit_distance_nums(1500, 1500000)) # 5\r\nprint(digit_distance_nums(1500000, 150000000)) # 1\r\nprint(digit_distance_nums(1500000, 1500000000)) # 2\r\nprint(digit_distance_nums(1500000000, 15000000000)) # 1\r\nprint(digit_distance_nums(1500000000, 150000000000)) # 2\r\nprint(digit_distance_nums(150000000000, 1500000000","votes":null},{"text":"\r\n    return (abs(len(str(n1)) - len(str(n2))) + abs(len(str(n1)) - len(str(n2)))) \/\/ 2\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    for i in range(len(n1)):\r\n        if n1[i] != n2[i]:\r\n            distance += 1\r\n    return distance\r\n\r\n\r\nn1 = int(input(\"Enter first number: \"))\r\nn2 = int(input(\"Enter second number: \"))\r\n\r\nprint(\"Digit","votes":null},{"text":"\r\n    return len(str(abs(n1 - n2)))\r\n\r\n\r","votes":null},{"text":"\r\n    return max(abs(a - b) for a, b in zip(str(n1), str(n2)))\r\n\r\n\r","votes":null},{"text":"\r\n    d = 0\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    # print(n1, n2)\r\n    for i in range(len(n1)):\r\n        if n2[i] != n1[i]:\r\n            d += 1\r\n    return d\r\n\r\n\r","votes":null},{"text":"\r\n    return min([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\r\n\r\n\r\nprint(digit_distance_nums(1234, 4321))\r\nprint(digit_distance_nums(1, 1))\r\nprint(digit_distance_nums(1234, 9999))\r\nprint(digit_distance_nums(1734, 1999))\r\n\r\n\"\"\"\r\nTime Complexity: O(n), where n is the length of the numbers.\r\nSpace Complexity: O(n), where n is the length of the numbers.\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    for i, j in zip(n1, n2):\r\n        if i != j:\r\n            distance += 1\r\n    return distance\r\n\r\n\r\nprint(digit_distance_nums(87, 345))\r\n\r\n\r","votes":null},{"text":"\r\n    return len(str(n1)) - len(str(n2))\r\n\r","votes":null},{"text":"\r\n    n1 = list(str(n1))\r\n    n2 = list(str(n2))\r\n    n1.sort()\r\n    n2.sort()\r\n    distance = 0\r\n    for x in n1:\r\n        if x in n2:\r\n            distance += n2.index(x)\r\n        else:\r\n            distance += n2.index(n2[-1])\r\n            n2.pop()\r\n    return distance\r\n\r","votes":null},{"text":"\r\n\r\n    # convert to strings\r\n    num1 = str(n1)\r\n    num2 = str(n2)\r\n\r\n    # initialize distance\r\n    distance = 0\r\n\r\n    # iterate through the characters\r\n    for i in range(len(num1)):\r\n        # if the numbers are different, add 1 to distance\r\n        if num1[i] != num2[i]:\r\n            distance += 1\r\n\r\n    # return the distance\r\n    return distance\r\n\r\nprint(digit_distance_nums(1234, 3456)) # should be 4\r\nprint(digit_distance_nums(1234, 3456)) # should be 4\r\nprint(digit_distance_nums(1111, 2222)) # should be 4\r\nprint(digit_distance_nums(1111, 2222)) # should be 4\r\nprint(digit_distance_nums(1111, 1234)) # should be 3\r\nprint(digit_distance_nums(1111, 1234)) # should be 3\r\nprint(digit_distance_nums(1234, 1234)) # should be 0\r\nprint(digit_distance_nums(1234, 1234)) # should be 0\r\nprint(digit_distance_nums(1111, 1122)) # should be 2\r\nprint(digit_distance_nums(1111, 1122)) # should be 2\r\nprint(digit_distance_nums(1111, 1112)) # should be 1\r\nprint(digit_distance_nums(1111, 1112)) # should be 1\r\n\r\n\r\n# 2. Write a python function to find the digit distance between two integers.\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    for i in range(len(n1)):\r\n        if n1[i] != n2[i]:\r\n            distance += 1\r\n    return distance\r\n\r\nd = digit_distance_nums()\r\nprint(d)\r\n\r\n\r","votes":null},{"text":"\r\n    n1, n2 = abs(n1), abs(n2)\r\n    distance = 0\r\n    while n1 != 0 and n2 != 0:\r\n        n1, n2 = n1\/\/10, n2\/\/10\r\n        distance += 1\r\n    return distance\r\n\r\n\r\n# Test cases:\r\nprint(digit_distance_nums(1234567, 56789))\r\nprint(digit_distance_nums(1234567, 12345678))\r\nprint(digit_distance_nums(1234567, 1234))\r\nprint(digit_distance_nums(1234567, 12))\r\nprint(digit_distance_nums(1234567, 1))\r\nprint(digit_distance_nums(1234567, 0))\r\nprint(digit_distance_nums(1234567, -1))\r\nprint(digit_distance_nums(1234567, -12))\r\nprint(digit_distance_nums(-1234567, 1))\r\nprint(digit_distance_nums(-1234567, 0))\r\nprint(digit_distance_nums(1234567, -1234567))\r\nprint(digit_distance_nums(1234567, -12345678))\r\nprint(digit_distance_nums(1, -12345678))\r\nprint(digit_distance_nums(0, -12345678))\r\nprint(digit_distance_nums(1, -1))\r\nprint(digit_distance_nums(1, 1))\r\nprint(digit_distance_nums(1, 0))\r\nprint(digit_distance_nu","votes":null},{"text":"\r\n    # Return the absolute difference between the digits of the two numbers\r\n    return abs(len(str(n1)) - len(str(n2)))\r\n\r\n\r\n# Tests\r\nassert digit_distance_nums(1111, 2222) == 2\r\nassert digit_distance_nums(1234, 12345) == 2\r\nassert digit_distance_nums(12345, 1234) == 2\r\nassert digit_distance_nums(123, 12345) == 3\r\nassert digit_distance_nums(12345, 123) == 3\r\nassert digit_distance_nums(1234, 1234) == 0\r\nassert digit_distance_nums(12345, 12345) == 0\r\nassert digit_distance_nums(1, 12345) == 5\r\nassert digit_distance_nums(12345, 1) == 5\r\nassert digit_distance_nums(1, 1) == 0\r\n\r\n# Answer\r","votes":null},{"text":"\r\n    \r\n    # if both numbers are same,\r\n    # return 0\r\n    if n1 == n2:\r\n        return 0\r\n    \r\n    # if any of the numbers is 0,\r\n    # return -1\r\n    if n1 == 0 or n2 == 0:\r\n        return -1\r\n    \r\n    # get the number of digits\r\n    # in n1 and n2\r\n    num1 = len(str(n1))\r\n    num2 = len(str(n2))\r\n\r\n    # if n1 has more digits,\r\n    # then swap them\r\n    if num1 > num2:\r\n        n1, n2 = n2, n1\r\n        num1, num2 = num2, num1\r\n    \r\n    # if the difference in number\r\n    # of digits is 1, then we can\r\n    # find the digit distance\r\n    if num2 - num1 == 1:\r\n        # get the digit from the\r\n        # second number at the end\r\n        digit = int(str(n2)[-1])\r\n        \r\n        # if the digit is greater\r\n        # than the first number,\r\n        # then we can return the\r\n        # digit distance\r\n        if digit > n1:\r\n            return digit - n1\r\n    \r\n    # if the difference in number\r\n    # of digits is 2, then we can\r\n    # find the digit distance\r\n    if num2 - num1 == 2:\r\n        # get the digits from the\r\n        # two numbers at the end\r\n        digit1 = int(str(n2)[-2])\r\n        digit2 = int(str(n2)[-1])\r\n        \r\n        # if the first digit is greater\r\n        # than the first number, then\r\n        # we can return the digit distance\r\n        if digit1 > n1:\r\n            return digit1 - n1\r\n        \r\n        # if the first digit is not\r\n      ","votes":null},{"text":"\r\n    \r\n    return abs(len(str(n1)) - len(str(n2)))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n1 = int(input(\"Enter the first number: \"))\r\n    n2 = int(input(\"Enter the second number: \"))\r\n    print(\"The digit distance between","votes":null},{"text":"\r\n    return sum(abs(a-b) for a, b in zip(str(n1), str(n2)))\r\n\r","votes":null},{"text":"\r\n\r\n    # Convert the numbers to string\r\n    str_n1 = str(n1)\r\n    str_n2 = str(n2)\r\n\r\n    # Convert the strings to lists\r\n    list_n1 = list(str_n1)\r\n    list_n2 = list(str_n2)\r\n\r\n    # Initialize a counter\r\n    counter = 0\r\n\r\n    # Iterate through both lists\r\n    for i in range(len(list_n1)):\r\n        for j in range(len(list_n2)):\r\n            if list_n1[i] == list_n2[j]:\r\n                counter += 1\r\n\r\n    return counter\r\n\r\n\r\n# Test Cases\r\nprint(digit_distance_nums(1234567890, 9876543210))\r\nprint(digit_distance_nums(9876543210, 1234567890))\r\nprint(digit_distance_nums(1234567890, 1234567890))\r\nprint(digit_distance_nums(1234567890, 1234567891))\r\nprint(digit_distance_nums(143, 25))\r\nprint(digit_distance_nums(1234567890, 7531))\r\nprint(digit_distance_nums(1234567890, 7531))\r\nprint(digit_distance_nums(1234567890, 1234567890))\r\nprint(digit_distance_nums(1234567890, 1234567890))\r\nprint(digit_distance_nums(1234567890, 12","votes":null},{"text":"\r\n    l1 = list(str(n1))\r\n    l2 = list(str(n2))\r\n    l3 = [abs(int(i) - int(j)) for i, j in zip(l1, l2)]\r\n    return sum(l3)\r\n\r\n\r\n# Test cases:\r\nprint(digit_distance_nums(342, 453))\r\nprint(digit_distance_nums(1111, 2222))\r\nprint(digit_distance_nums(1234, 2345))\r\nprint(digit_distance_nums(12345, 23456))\r\nprint(digit_distance_nums(123456, 234567))\r\nprint(digit_distance_nums(1234567, 2345678))\r\nprint(digit_distance_nums(12345678, 23456789))\r\nprint(digit_distance_nums(123456789, 234567890))\r\nprint(digit_distance_nums(1234567890, 2345678901))\r\nprint(digit_distance_nums(12345678901, 23456789012))\r\nprint(digit_distance_nums(123456789012, 234567890123))\r\nprint(digit_distance_nums(1234567890123, 2345678901234))\r\nprint(digit_distance_nums(12345678901234, 23456789012345))\r\nprint(digit_distance_num","votes":null},{"text":"\r\n    num1 = n1\r\n    num2 = n2\r\n    num1_list = []\r\n    num2_list = []\r\n    while num1:\r\n        num1_list.append(num1 % 10)\r\n        num1 \/\/= 10\r\n    while num2:\r\n        num2_list.append(num2 % 10)\r\n        num2 \/\/= 10\r\n    num1_list.reverse()\r\n    num2_list.reverse()\r\n    num1_list_len = len(num1_list)\r\n    num2_list_len = len(num2_list)\r\n    for i in range(num2_list_len - num1_list_len):\r\n        num1_list.insert(0, 0)\r\n    for i in range(num1_list_len - num2_list_len):\r\n        num2_list.insert(0, 0)\r\n    num1_list_len = len(num1_list)\r\n    num2_list_len = len(num2_list)\r\n    distance = 0\r\n    for i in range(num1_list_len):\r\n        if num1_list[i] == num2_list[i]:\r\n            distance += 1\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    num1 = str(n1)\r\n    num2 = str(n2)\r\n    for i in range(len(num1)):\r\n        for j in range(len(num2)):\r\n            if num1[i] == num2[j]:\r\n                distance += abs(int(num1[i]) - int(num2[j]))\r\n    return distance\r\n\r\n\r\n# Test cases:\r\nprint(digit_distance_nums(123, 456))\r\nprint(digit_distance_nums(123, 321))\r\nprint(digit_distance_nums(123, 352))\r\nprint(digit_distance_nums(222, 222))\r\nprint(digit_distance_nums(1122, 1234))\r\nprint(digit_distance_nums(123, 432))\r\nprint(digit_distance_nums(123, 412))\r\nprint(digit_distance_nums(123, 412))\r\n","votes":null},{"text":"\r\n    num1 = str(n1)\r\n    num2 = str(n2)\r\n    length_num1 = len(num1)\r\n    length_num2 = len(num2)\r\n    if length_num1 > length_num2:\r\n        n = length_num1\r\n        length_num1 = length_num2\r\n        length_num2 = n\r\n        num1 = str(n2)\r\n        num2 = str(n1)\r\n    dist = 10 ** length_num1\r\n    for i in range(length_num1):\r\n        num1_digit = int(num1[i])\r\n        num2_digit = int(num2[i])\r\n        if num1_digit != num2_digit:\r\n            dist += 10 ** (length_num1 - i - 1)\r\n            break\r\n    return dist\r\n\r\n\r","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    if len(n1) > len(n2):\r\n        n1, n2 = n2, n1\r\n    n1_list = list(n1)\r\n    n2_list = list(n2)\r\n    if n2_list[0] == \"0\":\r\n        n2_list = n2_list[1:]\r\n    n1_list = n1_list[::-1]\r\n    n2_list = n2_list[::-1]\r\n    n1_list = [int(i) for i in n1_list]\r\n    n2_list = [int(i) for i in n2_list]\r\n    diff_list = []\r\n    for item in n1_list:\r\n        if item in n2_list:\r\n            diff_list.append(n1_list.index(item))\r\n    if len(diff_list) == 0:\r\n        return 0\r\n    elif len(diff_list) == 1:\r\n        return abs(diff_list[0] - (len(n1_list)-1))\r\n    else:\r\n        diff_list.sort()\r\n        return abs(diff_list[0] - diff_list[1])\r\n\r\n\r","votes":null},{"text":"\r\n    # convert the integers to strings and iterate through \r\n    # the string of the larger number to find the distance\r\n    str1 = str(n1)\r\n    str2 = str(n2)\r\n    return sum(1 for i in str1 if i not in str2)\r\n\r\n\r\n# test case 1\r\nn1 = 1234567890\r\nn2 = 12345\r\nprint('Expected: 5')\r\nprint('Actual: ', digit_distance_nums(n1, n2))\r\nprint()\r\n\r\n# test case 2\r\nn1 = 9876543210\r\nn2 = 876543210\r\nprint('Expected: 1')\r\nprint('Actual: ', digit_distance_nums(n1, n2))\r\nprint()\r\n\r\n# test case 3\r\nn1 = 1234567890\r\nn2 = 1234567890\r\nprint('Expected: 0')\r\nprint('Actual: ', digit_distance_nums(n1, n2))\r\nprint()\r\n\r\n# test case 4\r\nn1 = 1234567890\r\nn2 = 9876543210\r\nprint('Expected: 9')\r\nprint('Actual: ', digit_distance_nums(n1, n2))\r\n","votes":null},{"text":"\r\n    n1 = abs(n1)\r\n    n2 = abs(n2)\r\n    dist = 0\r\n    while n1 > 0:\r\n        if n1 % 10 != n2 % 10:\r\n            dist += 1\r\n        n1 = n1 \/\/ 10\r\n        n2 = n2 \/\/ 10\r\n    return dist\r\n\r\n\r","votes":null},{"text":"\r\n    # 1\r\n   ","votes":null},{"text":"\r\n    \"\"\"\r\n    The digit distance between two integers is the number of digits that differ between the two numbers.\r\n    For example, the digit distance between 123 and 145 is 2, \r\n    since 123 and 145 only differ in the 3rd and 2nd digits.\r\n    \"\"\"\r\n    num1 = str(n1)\r\n    num2 = str(n2)\r\n    num1 = list(num1)\r\n    num2 = list(num2)\r\n    #print(num1)\r\n    #print(num2)\r\n    distance = 0\r\n    for i in range(len(num1)):\r\n        if num1[i] != num2[i]:\r\n            distance += 1\r\n    return distance\r\n\r\nif __name__ == \"__main__\":\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(123, 145))\r\n    print(digit_distance_nums(","votes":null},{"text":"\r\n    \r\n    # Finding the digit distance between two numbers\r\n    \r\n    n1 = list(str(n1))\r\n    n2 = list(str(n2))\r\n    \r\n    digit_distance = 0\r\n    \r\n    # Finding the difference between the numbers\r\n    # and adding it to the distance","votes":null},{"text":"\r\n    \r\n    # convert ints to strings to compare\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    \r\n    # get the difference in the number of digits (abs for positive\/negative)\r\n    # distance = abs(len(n1_str) - len(n2_str))\r\n    distance = len(n1_str) - len(n2_str)\r\n    \r\n    # if the difference is 0, return 0\r\n    if distance == 0:\r\n        return 0\r\n    \r\n    # if the difference is positive, set n1 to be the longer string\r\n    elif distance > 0:\r\n        # if difference is negative, set n1 to be the shorter string\r\n        # n1_str = n2_str\r\n        \r\n        # if the difference is positive, set n1 to be the longer string\r\n        n2_str = n1_str\r\n        \r\n        # if the difference is negative, set n2 to be the shorter string\r\n        n1_str = n2_str\r\n    \r\n    # if the difference is negative, set n2 to be the longer string\r\n    # n2_str = n1_str\r\n    \r\n    # if the difference is positive, set n2 to be the shorter string\r\n    # n1_str = n2_str\r\n    \r\n    # if the difference is negative, set n2 to be the longer string\r\n    # n2_str = n1_str\r\n    \r\n    # if the difference is positive, set n2 to be the shorter string\r\n    # n1_str = n2_str\r\n    \r\n    # find the difference between the two strings\r\n    difference = abs(len(n1_str) - len(n2_str))\r\n    \r\n    # return the difference\r\n    return difference\r\n\r\n# test cases\r\ntest_cases = [\r\n    {\r\n        'input': (12345, 1","votes":null},{"text":"\r\n    num1 = int(input(\"Enter the first number: \"))\r\n    num2 = int(input(\"Enter the second number: \"))\r\n    distance = 0\r\n    while num1 > 0:\r\n        num1, num2 = num1 \/\/ 10, num2 \/\/ 10\r\n        distance += 1\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    n1_length = len(n1_str)\r\n    n2_length = len(n2_str)\r\n    if n1_length == n2_length:\r\n        return abs(n1 - n2)\r\n    else:\r\n        if n1_length < n2_length:\r\n            n1_str = (n2_length - n1_length) * '0' + n1_str\r\n        else:\r\n            n2_str = (n1_length - n2_length) * '0' + n2_str\r\n        n1_list = list(map(int, list(n1_str)))\r\n        n2_list = list(map(int, list(n2_str)))\r\n        distance = 0\r\n        for i in range(n1_length):\r\n            if n1_list[i] != n2_list[i]:\r\n                distance += 1\r\n        return distance\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Finding the digit distance\r\n    \r\n    # 1. converting numbers to strings\r\n    # 2. finding the length of each string\r\n    # 3. subtracting the length of second number from the length of first number\r\n    \r\n    return len(str(n1)) - len(str(n2))\r\n\r\n# Test Cases\r\n\r\nprint(digit_distance_nums(123, 3456))\r\n\r\n# Output: 3\r\n\r\nprint(digit_distance_nums(123, 34567))\r\n\r\n# Output: 4\r\n\r\nprint(digit_distance_nums(123, 123456))\r\n\r\n# Output: 3\r\n\r\nprint(digit_distance_nums(123456, 123))\r\n\r\n# Output: 3\r\n\r\nprint(digit_distance_nums(123456, 1234567))\r\n\r\n# Output: 3\r\n\r\nprint(digit_distance_nums(123456, 12345678))\r\n\r\n# Output: 4\r\n\r\nprint(digit_distance_nums(12345678, 123456))\r\n\r\n# Output: 4\r\n\r\nprint(digit_distance_nums(1, 123456))\r\n\r\n# Output: 6\r\n\r\nprint(digit_distance_nums(123456, 1))\r\n\r\n# Output: 6\r\n\r\nprint(digit_distance_nums(123456, 123456))\r\n\r\n# Output: 0\r\n\r\nprint(digit_distance_nums(123456, 123456789101112131","votes":null},{"text":"\r\n    n1, n2 = str(n1), str(n2)\r\n    \r\n    # Initialization\r\n    dist = 0\r\n    \r\n    # Convert string to list\r\n    n1, n2 = list(n1), list(n2)\r\n    \r\n    # Check for each element if it is available in the other list\r\n    for e1 in n1:\r\n        if e1 in n2:\r\n            n2.remove(e1)\r\n        else:\r\n            dist += 1\r\n    \r\n    # Check for remaining elements\r\n    for e2 in n2:\r\n        dist += 1\r\n    \r\n    return dist\r\n\r\n# Test cases\r\nprint(digit_distance_nums(1234, 1234)) # 0","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    if len(n1) > len(n2):\r\n        n1, n2 = n2, n1\r\n    count = 0\r\n    for i in range(len(n1)):\r\n        if n1[i] != n2[i]:\r\n            count += 1\r\n    return count\r\n\r\n\r\nprint(digit_distance_nums(132, 324))\r\n\r\n\r","votes":null},{"text":"\r\n    # return (abs(len(str(n1)) - len(str(n2))) + abs(n1 - n2)) \/ 2\r\n    return abs(len(str(n1)) - len(str(n2))) + abs(n1 - n2)\r\n    # return abs(len(str(n1)) - len(str(n2))) + abs(n1 - n2)\r\n\r\nprint(digit_distance_nums(1,10))\r\nprint(digit_distance_nums(10,1))\r\nprint(digit_distance_nums(10,10))\r\nprint(digit_distance_nums(100,10))\r\nprint(digit_distance_nums(1000,100))\r\nprint(digit_distance_nums(100000,10000))\r\nprint(digit_distance_nums(10000000,1000000))\r\nprint(digit_distance_nums(20000000,1000000))\r\nprint(digit_distance_nums(1000000000,100000000))\r\nprint(digit_distance_nums(10000000000,1000000000))\r\nprint(digit_distance_nums(100000000000,10000000000))\r\nprint(digit_distance_nums(1000000000000,100000000000))\r\nprint(digit_distance_nums(10000000000000,1000000000000))\r\nprint(digit_distance_nums(100000000000000,10000000","votes":null},{"text":"\r\n    n1_to_list = list(str(n1))\r\n    n2_to_list = list(str(n2))\r\n    distance = 0\r\n    for i in range(len(n1_to_list)):\r\n        if n1_to_list[i] != n2_to_list[i]:\r\n            distance += 1\r\n    return distance\r\n\r\n\r\nprint(digit_distance_nums(102, 110))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    list1 = list(str(n1))\r\n    list2 = list(str(n2))\r\n    total_distance = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] != list2[i]:\r\n            total_distance += 1\r\n    return total_distance\r\n\r\n\r\nprint(digit_distance_nums(123456, 567890))\r\nprint(digit_distance_nums(12345, 98765))\r\nprint(digit_distance_nums(14325, 13524))\r\nprint(digit_distance_nums(1071, 107))\r\nprint(digit_distance_nums(1111, 11111))\r\nprint(digit_distance_nums(1000, 1))\r\nprint(digit_distance_nums(1000, 10000))\r\nprint(digit_distance_nums(12123, 12345))\r\nprint(digit_distance_nums(11111, 1111))\r\nprint(digit_distance_nums(10000, 1000))\r\nprint(digit_distance_nums(1000000, 10000000))\r\nprint(digit_distance_nums(111111, 1111111))\r\nprint(digit_distance_nums(1000000, 100000000))\r\nprint(digit_distance_nums(1111111, 11111111))\r\nprint(digit_distance_nums(10000000, 1000000000))\r\nprint(digit_distance_nums(11111","votes":null},{"text":"\r\n\r\n    num1 = str(n1)\r\n    num2 = str(n2)\r\n    count = 0\r\n\r\n    for c1 in num1:\r\n        if c1 in num2:\r\n            num2 = num2.replace(c1, ' ', 1)\r\n        else:\r\n            count += 1\r\n\r\n    for c2 in num2:\r\n        count += 1\r\n\r\n    return count\r\n\r\n\r\nprint(digit_distance_nums(1234, 4321))\r\nprint(digit_distance_nums(1234, 4325))\r\n\r\n\r\n# 2) The first 10,000 primes are:\r\n# 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\r\n# 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\r\n# 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\r\n# 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    n1_arr = list(n1)\r\n    n2_arr = list(n2)\r\n    n1_arr.sort()\r\n    n2_arr.sort()\r\n    n1 = ''.join(n1_arr)\r\n    n2 = ''.join(n2_arr)\r\n    return abs(int(n1) - int(n2))\r\n\r\n\r\n# Test cases:\r\nprint(digit_distance_nums(56789, 54321))\r\nprint(digit_distance_nums(256789, 54321))\r\nprint(digit_distance_nums(11111, 99999))\r\nprint(digit_distance_nums(12345, 54321))\r\n\r\n\r\n# Answer:\r\n#","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    # 200 -> 20\r\n    # 200 -> 20\r\n    # 20 -> 0\r\n    # 0 -> 0\r\n    # 20 -> 20\r\n    # 20 -> 20\r\n    # 20 -> 20\r\n    # 20 -> 20\r\n    # 20 -> 20\r\n    # 20 -> 0\r\n    # 0 -> 0\r\n    # 0 -> 0\r\n\r\n    n1 = n1.replace(n1[0], \"0\")\r\n    n2 = n2.replace(n2[0], \"0\")\r\n    n1 = n1.replace(n1[-1], \"0\")\r\n    n2 = n2.replace(n2[-1], \"0\")\r\n\r\n    if n1 == '0':\r\n        return len(n1)\r\n\r\n    if n2 == '0':\r\n        return len(n2)\r\n\r\n    while len(n1) > 1:\r\n        n1 = n1.replace(n1[0], \"0\")\r\n        n2 = n2.replace(n2[0], \"0\")\r\n        n1 = n1.replace(n1[-1], \"0\")\r\n        n2 = n2.replace(n2[-1], \"0\")\r\n\r\n    return len(n1)\r\n\r\n\r\nprint(digit_distance_nums(12345678, 12345))\r\nprint(digit_distance_nums(12345678, 12345678))\r\nprint(digit_distance_nums(12345678, 123456789))\r\nprint(digit_distance_nums(12345678, ","votes":null},{"text":"\r\n    \r\n    # digit distance between two integers\r\n    n1_list = [int(i) for i in str(n1)]\r\n    n2_list = [int(i) for i in str(n2)]\r\n    \r\n    # find the digit distance between two integers\r\n    distance = 0\r\n    \r\n    # find max length of the two lists\r\n    max_length = max(len(n1_list), len(n2_list))\r\n    \r\n    # check for each item in list\r\n    for i in range(max_length):\r\n        try:\r\n            # check if item in list is equal\r\n            if n1_list[i] == n2_list[i]:\r\n                distance = distance + 0\r\n            # check if item in list is not equal\r\n            elif n1_list[i] != n2_list[i]:\r\n                distance = distance + 1\r\n        # check if item in list is not equal\r\n        except IndexError:\r\n            distance = distance + 1\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    return max(map(abs, map(int, str(n1)) - map(int, str(n2))))\r\n\r\n\r\n# Test cases:\r\nprint(digit_distance_nums(3, 6))\r\nprint(digit_distance_nums(99, 101))\r\nprint(digit_distance_nums(1234, 4321))\r\nprint(digit_distance_nums(1000000, 1000001))\r\nprint(digit_distance_nums(1000000000, 1000000001))\r\nprint(digit_distance_nums(1234567890, 1234567891))\r\n","votes":null},{"text":"\r\n    \r\n    return abs(len(str(n1)) - len(str(n2)))\r\n\r\n#Tests\r","votes":null},{"text":"\r\n    if n1 > n2:\r\n        n1, n2 = n2, n1\r\n    num_of_digits = len(str(n1))\r\n    distance_list = []\r\n\r\n    for num in range(n2, n1 + 1):\r\n        for i in range(num_of_digits):\r\n            n1_digit = int(str(num)[i])\r\n            n2_digit = int(str(n1)[i])\r\n            distance = abs(n1_digit - n2_digit)\r\n            distance_list.append(distance)\r\n        distance_list = [i for i in distance_list if i != 0]\r\n        if distance_list == []:\r\n            return 0\r\n        else:\r\n            return max(distance_list)\r\n\r\n\r\nprint(digit_distance_nums(345, 679))\r\nprint(digit_distance_nums(123, 456))\r\nprint(digit_distance_nums(113, 133))\r\nprint(digit_distance_nums(1000, 10000))\r\nprint(digit_distance_nums(12345, 12346))\r\nprint(digit_distance_nums(12345, 12345))\r\nprint(digit_distance_nums(12345678901234567890, 12345678901234567890))\r\nprint(digit_distance_nums(12345678901234567890, 12345678901234567891))\r\nprint(digit_distance_nums(12345678901234567890, 123456789","votes":null},{"text":"\r\n    # print(n1)\r\n    # print(n2)\r\n    # return number of digits in common between two numbers\r\n    if n1 == n2:\r\n        return 0\r\n    # n1 = 1234567890  #10 digits\r\n    # n2 = 1345678900  #9 digits\r\n    # n1 = 1234567890\r\n    # n2 = 1234567890\r\n    # n1 = 8989898989\r\n    # n2 = 8989898989\r\n    # n1 = 1234567890\r\n    # n2 = 9876543210\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    # print(n1)\r\n    # print(n2)\r\n    # print(len(n1))\r\n    # print(len(n2))\r\n    if len(n1) > len(n2):\r\n        n1, n2 = n2, n1\r\n    # print(n1)\r\n    # print(n2)\r\n    n1 = n1.zfill(len(n2))\r\n    # print(n1)\r\n    # print(n2)\r\n    n1_list = list(n1)\r\n    n2_list = list(n2)\r\n    # print(n1_list)\r\n    # print(n2_list)\r\n    count = 0\r\n    for i in range(len(n1_list)):\r\n        if n1_list[i] == n2_list[i]:\r\n            count += 1\r\n        else:\r\n            break\r\n    return len(n1_list) - count\r\n\r\n#","votes":null},{"text":"\r\n    # Base Case:\r\n    if n1 == n2:\r\n        return 0\r\n    \r\n    # General Case:\r\n    distance = 0\r\n    \r\n    # Convert strings to list:\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    \r\n    # Iterate through the list:\r\n    for i in range(len(n1)):\r\n        \r\n        # Check if the digits are equal:\r\n        if n1[i] != n2[i]:\r\n            distance += 1\r\n    \r\n    # Return the distance:\r\n    return distance\r\n\r\n\r\nprint(digit_distance_nums(123, 456)) # 5\r\nprint(digit_distance_nums(213, 567)) # 6\r\nprint(digit_distance_nums(345, 345)) # 0\r\nprint(digit_distance_nums(213, 567)) # 6\r\nprint(digit_distance_nums(1234, 5678)) # 4\r\nprint(digit_distance_nums(1234, 3456)) # 8\r\nprint(digit_distance_nums(1234, 1234)) # 0\r\nprint(digit_distance_nums(1234, 5678)) # 4\r\nprint(digit_distance_nums(123456, 789012)) # 6\r\nprint(digit_distance_nums(123456, 987654)) # 6\r\nprint(digit_distance_nums(123456, 123456)) # 0\r\nprint(digit_distance_nums(123456, 567890)) # 6\r\nprint(digit_distance_nums(12345","votes":null},{"text":"\r\n    \r\n    dist = 0\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    \r\n    for c in n1:\r\n        if c in n2:\r\n            dist += 1\r\n    \r\n    for c in n2:\r\n        if c in n1:\r\n            dist += 1\r\n    \r\n    return dist\r\n    \r\nprint(digit_distance_nums(1234, 1345))\r\nprint(digit_distance_nums(124, 143))\r\nprint(digit_distance_nums(12345, 14567))\r\nprint(digit_distance_nums(101, 100000))\r\nprint(digit_distance_nums(10, 100000))\r\nprint(digit_distance_nums(123456789, 145678900))\r\nprint(digit_distance_nums(101, 1000000))\r\nprint(digit_distance_nums(10, 1000000))\r\nprint(digit_distance_nums(123456789, 1456789000))\r\nprint(digit_distance_nums(101, 10000000))\r\nprint(digit_distance_nums(10, 10000000))\r\nprint(digit_distance_nums(123456789, 14567890000))\r\nprint(digit_distance_nums(101, 100000000))\r\nprint(digit_distance_nums(10, 100000000))\r\nprint(digit_distance_nums(123456789, 14","votes":null},{"text":"\r\n    # get the digit distance between a number and zero\r\n   ","votes":null},{"text":"\r\n    m, n = max(n1, n2), min(n1, n2)\r\n    distance = 0\r\n    while m > n:\r\n        distance += 1\r\n        m = m \/\/ 10\r\n    return distance\r\n\r\n\r\nif __name__ == '__main__':\r","votes":null},{"text":"\r\n    s1 = str(n1)\r\n    s2 = str(n2)\r\n    \r\n    d = 0\r\n    for i in range(len(s1)):\r\n        for j in range(len(s2)):\r\n            if s1[i] == s2[j]:\r\n                d = max(d, abs(i - j))\r\n                \r\n    return d\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\nif __name__ == '__main__':\r\n    print(digit_distance_nums(1234, 4321))\r\n    print(digit_distance_nums(1234, 4000))\r\n    print(digit_distance_nums(1234, 4325))\r\n    print(digit_distance_nums(1234, 1234))\r\n    print(digit_distance_nums(1234, 5678))\r\n    print(digit_distance_nums(1234, 1000))\r\n    print(digit_distance_nums(1234, 12))\r\n    print(digit_distance_nums(1234, 123456))\r\n    print(digit_distance_nums(1234, 123467))\r\n    print(digit_distance_nums(1234, 1234567))\r\n    print(digit_distance_nums(1234, 12345678))\r\n    print(digit_distance_nums(1234, 123456789))\r\n    print(digit_distance_nums(1234, 1234567890))\r\n    print(digit_distance_nums(1234, 12345678901))\r\n    print(digit_distance_num","votes":null},{"text":"\r\n\r\n    # Create an empty list\r\n    digit_distance_numbers = []\r\n\r\n    # Convert the numbers to strings\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n\r\n    # Loop through the numbers\r\n    for i in range(len(n1)):\r\n        for j in range(len(n2)):\r\n            # If the current number in the first number matches the current number in the second number\r\n            # then append the difference between their indexes to the list\r\n            if n1[i] == n2[j]:\r\n                digit_distance_numbers.append(abs(i - j))\r\n\r\n    # Return the value of the list\r\n    return digit_distance_numbers\r\n\r\n\r\n# Tests\r\nprint(digit_distance_nums(1234, 1234))  # []\r\nprint(digit_distance_nums(1234, 5678))  # [2, 1, 3, 1]\r\nprint(digit_distance_nums(1234, 12345))  # [2, 1, 3, 1]\r\nprint(digit_distance_nums(1234, 56789))  # [2, 1, 3, 1]\r\nprint(digit_distance_nums(1234, 1236))  # [2, 1, 3, 1]\r\nprint(digit_distance_nums(1234, 1224))  # [2, 1, 3, 1]\r\nprint(digit_distance_nums(1234, 1230))  # [2, 1, 3, 1]\r\nprint(digit_distance_nums(1234, 1237))  # [2, 1, 3, 1]\r\nprint(digit_distance_nums(1234,","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n\r\n    if n1 == n2:\r\n        return 0\r\n\r\n    distance = abs(len(n1) - len(n2))\r\n\r\n    if len(n1) > len(n2):\r\n        n1 = n1[distance:]\r\n\r\n    elif len(n1) < len(n2):\r\n        n2 = n2[distance:]\r\n\r\n    distance = 0\r\n\r\n    for i in range(len(n1)):\r\n        if n1[i] != n2[i]:\r\n            distance += 1\r\n\r\n    return distance\r\n\r\n\r\n# Test cases\r\nprint(digit_distance_nums(1234, 4567))\r\nprint(digit_distance_nums(1234, 5678","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    # n1 = [int(i) for i in n1]\r\n    # n2 = [int(i) for i in n2]\r\n\r\n    # n1 = list(n1)\r\n    # n2 = list(n2)\r\n\r\n    max_len = max(len(n1), len(n2))\r\n    min_len = min(len(n1), len(n2))\r\n\r\n    # print(max_len, min_len)\r\n\r\n    n1 = n1.zfill(max_len)\r\n    n2 = n2.zfill(max_len)\r\n\r\n    # print(n1)\r\n    # print(n2)\r\n\r\n    distance = 0\r\n    for i in range(max_len):\r\n        if n1[i] != n2[i]:\r\n            distance += 1\r\n\r\n    return distance\r\n\r\n\r\nprint(digit_distance_nums(2, 1))\r\nprint(digit_distance_nums(2, 0))\r\nprint(digit_distance_nums(5, 1))\r\nprint(digit_distance_nums(1, 1))\r\nprint(digit_distance_nums(12, 12345))\r\nprint(digit_distance_nums(123456789, 123456789))\r\nprint(digit_distance_nums(123456789, 12345678))\r\nprint(digit_distance_nums(12345678, 123456789))\r\nprint(digit_distance_nums(1234567, 123456789))\r\nprint(digit_distance_nums(123456789, 1234567))","votes":null},{"text":"\r\n    \r\n    # Convert the numbers to strings\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    \r\n    # Initialize the digit distance\r\n    digit_distance = 0\r\n    \r\n    # Loop over the characters in each string\r\n    for i in range(len(n1)):\r\n        for j in range(len(n2)):\r\n            \r\n            # Check if the character at the current position is the same\r\n            if n1[i] == n2[j]:\r\n                digit_distance += 1\r\n            \r\n    return digit_distance\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n\r\n    for i in range(len(n1)):\r\n        if n1[i] != n2[i]:\r\n            distance += 1\r\n    return distance\r\n\r\nprint(digit_distance_nums(1","votes":null},{"text":"\r\n    return abs(len(str(n1)) - len(str(n2)))\r\n\r\n\r\n# print(digit_distance_nums(123, 456))\r\n# print(digit_distance_nums(123, 4567))\r\n# print(digit_distance_nums(123, 45678))\r\n# print(digit_distance_nums(123, 456789))\r\n\r\n\r\n# --------------------------------------------------------------\r\n# Code Challenge: Solve -> Find the digit distance between two integers.\r\n\r\n# Given two integers, find the digit distance between them.\r\n# The digit distance is defined as the absolute difference between the number of digits in the two numbers.\r\n# For example, the digit distance between 12 and 32 is 2, and the distance between 123 and 35 is 3.\r\n\r\n# Input: Two integers.\r\n# Output: An integer, the absolute difference between the number of digits in the two numbers.\r\n\r\n","votes":null},{"text":"\r\n    # convert the numbers to strings\r\n    str1 = str(n1)\r\n    str2 = str(n2)\r\n    # find the digit distance\r\n    distance = 0\r\n    for i in range(len(str1)):\r\n        distance = max(distance, abs(int(str1[i]) - int(str2[i])))\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    for i in str(n1):\r\n        if i not in str(n2):\r\n            distance += 1\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    result = 0\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    for i in range(len(n1)):\r\n        if n1[i] != n2[i]:\r\n            result += 1\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    n1_list = list(str(n1))\r\n    n2_list = list(str(n2))\r\n\r\n    n1_list_len = len(n1_list)\r\n    n2_list_len = len(n2_list)\r\n\r\n    if n1_list_len > n2_list_len:\r\n        for i in range(0, n1_list_len - n2_list_len):\r\n            n2_list.insert(0, 0)\r\n\r\n    elif n2_list_len > n1_list_len:\r\n        for i in range(0, n2_list_len - n1_list_len):\r\n            n1_list.insert(0, 0)\r\n\r\n    n1_list_len = len(n1_list)\r\n    n2_list_len = len(n2_list)\r\n\r\n    digit_distance = 0\r\n\r\n    for i in range(0, n1_list_len):\r\n        if n1_list[i] != n2_list[i]:\r\n            digit_distance += 1\r\n\r\n    return digit_distance\r\n\r\n\r\nprint(digit_distance_nums(1234, 4321))\r\nprint(digit_distance_nums(123456789, 987654321))\r\nprint(digit_distance_nums(1234567, 7654321))\r\nprint(digit_distance_nums(123456789, 9876543211))\r\nprint(digit_distance_nums(123456789, 987654321))\r\nprint(digit_distance","votes":null},{"text":"\r\n    n1 = str(n1).replace(\"-\",\"\")\r\n    n2 = str(n2).replace(\"-\",\"\")\r\n    n1 = n1.zfill(len(n2))\r\n    n2 = n2.zfill(len(n1))\r\n    distance = 0\r\n    for i in range(len(n1)):\r\n        if n1[i] != n2[i]:\r\n            distance += 1\r\n    return distance\r\n\r\n\r\nprint(digit_distance_nums(12345, 45678))\r\nprint(digit_distance_nums(-1000, -2000))\r\nprint(digit_distance_nums(22, 22))\r\n\r\n# Alternative\r","votes":null},{"text":"\r\n    d1 = n1\r\n    d2 = n2\r\n    distance = 0\r\n    while d1 != 0 or d2 != 0:\r\n        d1, d2 = d1 \/\/ 10, d2 \/\/ 10\r\n        distance += 1\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    n1 = list(n1)\r\n    n2 = list(n2)\r\n    i = 0\r\n    while i < len(n1):\r\n        if n1[i] == n2[i]:\r\n            n1.pop(i)\r\n            n2.pop(i)\r\n        else:\r\n            i = i + 1\r\n    return len(n1) + len(n2)\r\n\r\n\r\nprint(digit_distance_nums(1234, 1234))\r\nprint(digit_distance_nums(1234, 1432))\r\nprint(digit_distance_nums(1234, 14320))\r\nprint(digit_distance_nums(1234, 143200))\r\nprint(digit_distance_nums(1234, 123400))\r\nprint(digit_distance_nums(1234, 12340))\r\nprint(digit_distance_nums(1234, 10234))\r\nprint(digit_distance_nums(1234, 102340))\r\nprint(digit_distance_nums(1234, 1023400))\r\nprint(digit_distance_nums(1234, 10234000))\r\nprint(digit_distance_nums(1234, 102340000))\r\nprint(digit_distance_nums(1234, 1023400000))\r\n\r\n# 0\r\n# 4\r\n# 5\r\n# 7\r\n# 7\r\n# 5\r\n# 4\r\n# 6\r\n# 7\r\n# 8\r\n# 9\r\n# 10\r","votes":null},{"text":"\r\n    # Check for invalid input\r\n    if n1 < 0 or n2 < 0:\r\n        return -1\r\n\r\n    return abs(n1 - n2)\r\n\r\n\r","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    total = 0\r\n    for i in range(len(n1)):\r\n        if n1[i] != n2[i]:\r\n            total += 1\r\n    return total\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if type(n1) == int and type(n2) == int:\r\n        n1, n2 = str(n1), str(n2)\r\n    \r\n    n1, n2 = n1[::-1], n2[::-1]\r\n    \r\n    distance = 0\r\n    \r\n    for i in range(len(n1)):\r\n        if n1[i] == n2[i]:\r\n            distance += 1\r\n            \r\n    return distance\r\n\r\nprint(digit_distance_nums(123, 456))\r\nprint(digit_distance_nums(123, 345))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 321))\r\nprint(digit_distance_nums(123, 322))\r\nprint(digit_distance_nums(123, 0))\r\nprint(digit_distance_nums(123, 12345))\r\nprint(digit_distance_nums(123, 456789))\r\nprint(digit_distance_nums(123, 123456789))\r\nprint(digit_distance_nums(123, 987654321))\r\nprint(digit_distance_nums(123, 9876543210))\r\nprint(digit_distance_nums(0, 123))\r\nprint(digit_distance_nums(0, 0))\r\nprint(digit_distance_nums(0, -123))\r\nprint(digit_distance_nums(0, -12345))\r\nprint(digit_distance_nums(0, -123456789))\r\nprint(digit_distance_nums(0, -1","votes":null},{"text":"\r\n    return abs(len(str(n1)) - len(str(n2)))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    dist = int(abs(n1 - n2))\r\n    \r\n    return dist\r\n\r","votes":null},{"text":"\r\n    if n1 == 0 or n2 == 0:\r\n        return None\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    c = 0\r\n    for i in n1:\r\n        if i in n2:\r\n            c += 1\r\n        else:\r\n            break\r\n    return c\r\n\r\n\r","votes":null},{"text":"\r\n    s1 = str(n1)\r\n    s2 = str(n2)\r\n    \r\n    d1 = set(s1)\r\n    d2 = set(s2)\r\n    \r\n    return len(d1.union(d2)) - len(d1.intersection(d2))\r\n\r\n\r","votes":null},{"text":"\r\n    from itertools import product\r\n    return max(sum(abs(int(ch1) - int(ch2)) for ch1, ch2 in product(str(n1), str(n2)))\r\n               for n1 in range(1, n2) for n2 in range(n1 + 1, n2 + 1))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(digit_distance_nums(123, 4321))\r\n    print(digit_distance_nums(123, 321))\r\n    print(digit_distance_nums(123, 432))\r\n    print(digit_distance_nums(123, 123))\r\n    print(digit_distance_nums(123, 456))\r\n    print(digit_distance_nums(123, 12))\r\n    print(digit_distance_nums(123, 123456789))\r\n    print(digit_distance_nums(123, 12345678))\r\n    print(digit_distance_nums(123, 1234567))\r\n    print(digit_distance_nums(123, 123456))\r\n    print(digit_distance_nums(123, 12345))\r\n    print(digit_distance_nums(123, 1234))\r\n    print(digit_distance_nums(123, 123))\r\n    print(digit_distance_nums(123, 12))\r\n    print(digit_distance_nums(123, 12))\r\n    print(digit_distance_nums(1023, 123))\r\n    print(digit_distance_nums(123, 23))\r\n    print(digit","votes":null},{"text":"\r\n    distance = 0\r\n    for i in str(n1):\r\n        if i in str(n2):\r\n            distance += 1\r\n\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in str(n1):\r\n        if i not in str(n2):\r\n            count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(digit_distance_nums(123, 321))\r\n    print(digit_distance_nums(23, 32))\r\n    print(digit_distance_nums(1232, 321))\r\n    print(digit_distance_nums(1123, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))\r\n    print(digit_distance_nums(112, 321))","votes":null},{"text":"\r\n\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n\r\n    # get the number of digits in each number\r\n    n1_num_digits = len(n1)\r\n    n2_num_digits = len(n2)\r\n\r\n    # get the max number of digits between n1 and n2\r\n    max_num_digits = max(n1_num_digits, n2_num_digits)\r\n\r\n    # get the min number of digits between n1 and n2\r\n    min_num_digits = min(n1_num_digits, n2_num_digits)\r\n\r\n    # initialize variables to hold the digit distance\r\n    # between n1 and n2\r\n    digit_distance = 0\r\n    n1_digit_list = []\r\n    n2_digit_list = []\r\n\r\n    # loop through each digit in n1, and add each digit to a list\r\n    for i in range(len(n1)):\r\n        digit = int(n1[i])\r\n        n1_digit_list.append(digit)\r\n\r\n    # loop through each digit in n2, and add each digit to a list\r\n    for i in range(len(n2)):\r\n        digit = int(n2[i])\r\n        n2_digit_list.append(digit)\r\n\r\n    # if the number of digits in n1 is smaller than n2\r\n    if n1_num_digits < n2_num_digits:\r\n        # loop through the number of digits in n1\r\n        for i in range(0, n1_num_digits):\r\n            # get the current digit in n1\r\n            n1_digit = n1_digit_list[i]\r\n            # get the current digit in n2\r\n            n2_digit = n2_digit_list[i]\r\n            # if the current digit in n1 is smaller than the current digit in n2\r\n            # incremen","votes":null},{"text":"\r\n    # n2 = 123456789\r\n    # n1 = 111111111\r\n    # n2 = 987654321\r\n    # n1 = 987654321\r\n    # n2 = 123456789\r\n    # n1 = 987654321\r\n    # n2 = 123456789\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    # print(n1)\r\n    # print(n2)\r\n    # print(n1[0])\r\n    # print(n2[0])\r\n    # print(n1[1])\r\n    # print(n2[1])\r\n    # print(n1[2])\r\n    # print(n2[2])\r\n    # print(n1[3])\r\n    # print(n2[3])\r\n    # print(n1[4])\r\n    # print(n2[4])\r\n    # print(n1[5])\r\n    # print(n2[5])\r\n    # print(n1[6])\r\n    # print(n2[6])\r\n    # print(n1[7])\r\n    # print(n2[7])\r\n    # print(n1[8])\r\n    # print(n2[8])\r\n    # print(n1[9])\r\n    # print(n2[9])\r\n\r\n    n1 = n1[::-1]\r\n    n2 = n2[::-1]\r\n    # print(n1)\r\n    # print(n2)\r\n\r\n    # print(n1[0])\r\n    # print(n2[0])\r\n    # print(n1[1])\r\n    # print(n2[1])\r\n    # print(n1[2])\r\n  ","votes":null},{"text":"\r\n    if n1 == n2:\r\n        return 0\r\n    else:\r\n        a = list(str(n1))\r\n        b = list(str(n2))\r\n        for i in range(len(a)):\r\n            if a[i] != b[i]:\r\n                return len(a) - i\r\n        return len(a) - len(b)\r\n\r\n\r\nprint(digit_distance_nums(123, 456))\r\nprint(digit_distance_nums(123, 12))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 1234))\r\nprint(digit_distance_nums(123, 234))\r\nprint(digit_distance_nums(123, 2345))\r\nprint(digit_distance_nums(123, 23456))\r\nprint(digit_distance_nums(123, 12345))\r\nprint(digit_distance_nums(123, 123456))\r\nprint(digit_distance_nums(123, 1234567))\r\nprint(digit_distance_nums(123, 12345678))\r\nprint(digit_distance_nums(123, 123456789))\r\nprint(digit_distance_nums(123, 1234567890))\r\nprint(digit_distance_nums(123, 12345678901))\r\nprint(digit_distance_nums(123, 123456789012))\r\nprint(digit_distance_nums(123, 1234567890123))\r\nprint(digit","votes":null},{"text":"\r\n    # input\r\n    n1 = int(input(\"Enter a positive integer: \"))\r\n    n2 = int(input(\"Enter a positive integer: \"))\r\n\r\n    # process\r\n    if n1 > n2:\r\n        greater_num = n1\r\n        lesser_num = n2\r\n    else:\r\n        greater_num = n2\r\n        lesser_num = n1\r\n\r\n    # output\r\n    print(\"The digit distance between \", greater_num, \"and \", lesser_num, \" is \")\r\n    while greater_num > 0:\r\n        greater_num = greater_num \/\/ 10\r\n        count = count + 1\r\n    print(count)\r\n\r\n\r\n# PROGRAM RUN\r\ndigit_distance_nums()\r\n\r\n\r\n# shortest way\r","votes":null},{"text":"\r\n    \r\n    d1 = set(map(int, str(n1)))\r\n    d2 = set(map(int, str(n2)))\r\n    \r\n    return len(d1 ^ d2)\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 == n2:\r\n        return 100\r\n    return abs(digit_distance(n1, n2))\r\n\r","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    i = 0\r\n    dist = 0\r\n    while i < len(n1):\r\n        if n1[i] != n2[i]:\r\n            dist += 1\r\n        i += 1\r\n    return dist\r\n\r\n\r\nprint(digit_distance_nums(1, 1))\r\nprint(digit_distance_nums(10, 1))\r\nprint(digit_distance_nums(1, 10))\r\nprint(digit_distance_nums(10, 10))\r\nprint(digit_distance_nums(10, 100))\r\nprint(digit_distance_nums(10, 1000))\r\nprint(digit_distance_nums(1, 1000))\r\n\r\n'''\r\nOutput:\r\n\r\n0\r\n1\r\n1\r\n0\r\n2\r\n3\r\n1\r\n'''\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if n1 == n2:\r\n        return 0\r\n\r\n    m1, m2 = [], []\r\n\r\n    for i in str(n1):\r\n        m1.append(int(i))\r\n\r\n    for i in str(n2):\r\n        m2.append(int(i))\r\n\r\n    return min(abs(len(m1) - len(m2)), abs(max(m1) - min(m2)))\r\n\r\n\r\nprint(digit_distance_nums(987456123, 987456123))\r\n","votes":null},{"text":"\r\n    a = str(n1)\r\n    b = str(n2)\r\n    result = 0\r\n    for i in a:\r\n        if i in b:\r\n            result += 1\r\n    return result\r\n\r\n\r\nprint(digit_distance_nums(123, 321))\r\nprint(digit_distance_nums(123, 351))\r\nprint(digit_distance_nums(123, 325))\r\nprint(digit_distance_nums(123, 32))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 125))\r\nprint(digit_distance_nums(123, 122))\r\nprint(digit_distance_nums(123, 121))\r\nprint(digit_distance_nums(123, 112))\r\nprint(digit_distance_nums(123, 111))\r\nprint(digit_distance_nums(123, 110))\r\nprint(digit_distance_nums(123, 109))\r\nprint(digit_distance_nums(123, 108))\r\nprint(digit_distance_nums(123, 107))\r\nprint(digit_distance_nums(123, 106))\r\nprint(digit_distance_nums(123, 105))\r\nprint(digit_distance_nums(123, 104))\r\nprint(digit_distance_nums(123, 103))\r\nprint(digit_distance_nums(123, 102))\r\nprint(digit_distance_nums(123, 101))\r\nprint(digit_distance_nums(123, 100))\r\nprin","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    # find the digit distance between two integers\r\n    n1 = [int(i) for i in n1]\r\n    n2 = [int(i) for i in n2]\r\n\r\n    n1 = sorted(n1)\r\n    n2 = sorted(n2)\r\n\r\n    n1 = ''.join(map(str, n1))\r\n    n2 = ''.join(map(str, n2))\r\n\r\n    return int(n2) - int(n1)\r\n\r\n\r\nn1 = int(input(\"Enter the first number: \"))\r\nn2 = int(input(\"Enter the second number: \"))\r\n\r\nprint(\"The digit distance between\", n1, \"and\", n2, \"is\", digit_distance_nums(n1, n2))\r\n\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    # n1 = 12345, n2 = 54321\r\n    # n1 = 123, n2 = 543\r\n    # n1 = 123, n2 = 231\r\n\r\n    # 1 2 3 4 5\r\n    # 5 4 3 2 1\r\n    # 5 4 3 2 1\r\n    # 2 3 1\r\n    # 2 3 1\r\n\r\n    # 1 2 3 4 5\r\n    # 2 3 1\r\n    # 2 3 1\r\n    # 1 2 3\r\n    # 1 2 3\r\n\r\n    # 1 2 3 4 5\r\n    # 5 4 3 2 1\r\n    # 5 4 3 2 1\r\n    # 2 3 1\r\n    # 2 3 1\r\n\r\n    # 1 2 3 4 5\r\n    # 2 3 1\r\n    # 2 3 1\r\n    # 1 2 3\r\n    # 1 2 3\r\n\r\n    # 1 2 3 4 5\r\n    # 5 4 3 2 1\r\n    # 5 4 3 2 1\r\n    # 2 3 1\r\n    # 2 3 1\r\n\r\n    # 1 2 3 4 5\r\n    # 2 3 1\r\n    # 2 3 1\r\n    # 1 2 3\r\n    # 1 2 3\r\n\r\n    # 1 2 3 4 5\r\n    # 5 4 3 2 1\r\n    # 5 4 3 2 1\r\n    # 2 3 1\r\n    ","votes":null},{"text":"\r\n    \r\n    # convert the numbers to their list of digits\r\n    # n1 = [int(i) for i in str(n1)]\r\n    # n2 = [int(i) for i in str(n2)]\r\n    \r\n    # find the max length of the lists\r\n    # max_len = max(len(n1), len(n2))\r\n\r\n    # make the lists equal length\r\n    # if len(n1) < max_len:\r\n    #     n1 = n1 + [0] * (max_len - len(n1))\r\n\r\n    # if len(n2) < max_len:\r\n    #     n2 = n2 + [0] * (max_len - len(n2))\r\n\r\n    # count how many pairs are equal\r\n    # count = 0\r\n    # for i in range(len(n1)):\r\n    #     if n1[i] == n2[i]:\r\n    #         count += 1\r\n    \r\n    # return the difference between the lengths and the number of equal pairs\r\n    # return max_len - count\r\n    \r\n    # or, in one line\r\n    # return max(len(n1), len(n2)) - sum([i == j for i, j in zip(n1, n2)])\r\n\r\n    # or, in one line using comprehensions\r\n    return max(len(n1), len(n2)) - sum([x == y for x, y in zip(n1, n2)])\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    for i in range(len(str(n1))):\r\n        if str(n1)[i] != str(n2)[i]:\r\n            distance += 1\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    s1 = str(n1)\r\n    s2 = str(n2)\r\n    for i in range(len(s1)):\r\n        if s1[i] != s2[i]:\r\n            distance += 1\r\n    return distance\r\n\r\n\r\nn1 = int(input(\"Enter the first number: \"))\r\nn2 = int(input(\"Enter the second number: \"))\r\n\r\nprint(digit_distance_nums(n1, n2))\r\n\r\n# Time Complexity: O(n) where n is the length of the longer number\r\n# Space Complexity: O(n) where n is the length of the longer number\r\n\r\n\r\n# Alternate Solution\r","votes":null},{"text":"\r\n    \r\n    n1_string = str(n1)\r\n    n2_string = str(n2)\r\n    \r\n    n1_list = []\r\n    n2_list = []\r\n    \r\n    for i in range(len(n1_string)):\r\n        n1_list.append(int(n1_string[i]))\r\n    \r\n    for i in range(len(n2_string)):\r\n        n2_list.append(int(n2_string[i]))\r\n    \r\n    n1_list.sort()\r\n    n2_list.sort()\r\n    \r\n    n1_list = n1_list[::-1]\r\n    n2_list = n2_list[::-1]\r\n    \r\n    n1_list_string = \"\"\r\n    n2_list_string = \"\"\r\n    \r\n    for i in range(len(n1_list)):\r\n        n1_list_string += str(n1_list[i])\r\n        \r\n    for i in range(len(n2_list)):\r\n        n2_list_string += str(n2_list[i])\r\n    \r\n    n1_list_string = int(n1_list_string)\r\n    n2_list_string = int(n2_list_string)\r\n    \r\n    return n1_list_string - n2_list_string\r\n\r\n# Test cases\r\nprint(digit_distance_nums(1234, 9876))\r\nprint(digit_distance_nums(4567, 7890))\r\nprint(digit_distance_nums(1000000, 999999))\r\nprint(digit_distance_nums(12345, 67890))\r\nprint(digit_distance_nums(12345, 6789))\r\nprint(digit_distance_nums(5485","votes":null},{"text":"\r\n    \r\n    #convert numbers to string\r\n    #get the length of each number\r\n    #get the difference between the two lengths\r\n    #if the difference is negative, take the absolute value of the difference and return the difference\r\n    #if the difference is positive, return the difference\r\n    \r\n    n1=str(n1)\r\n    n2=str(n2)\r\n    x=len(n1)\r\n    y=len(n2)\r\n    if x>y:\r\n        difference=x-y\r\n        return difference\r\n    else:\r\n        difference=y-x\r\n        return difference\r\n\r\nprint(digit_distance_nums(4321, 1234))\r\nprint(digit_distance_nums(1234, 4321))\r\nprint(digit_distance_nums(123, 456))\r\nprint(digit_distance_nums(1234, 1234))\r\nprint(digit_distance_nums(4321, 4321))\r\nprint(digit_distance_nums(1234567, 1234567))\r\nprint(digit_distance_nums(1234567, 12345678))\r\nprint(digit_distance_nums(12345678, 1234567))\r\nprint(digit_distance_nums(12345678, 12345678))\r\nprint(digit_distance_nums(12345678, 123456789))\r\nprint(digit_distance_nums(123456789, 12345678))\r\nprint(digit_distance_nums(123456789, 123456789))\r\nprint(digit_distance_nums(1","votes":null}],"time":{"count":6.0,"avg":147386.1453333333,"std":44767.9493066806,"cov":0.303745981}}
{"id":559,"question":"def max_sub_array_sum(a, size):\r\n    \"\"\"Write a function to find the largest sum of contiguous subarray in the given array.\"\"\"","answers":[{"text":"\r\n    max_so_far = -float('INF')\r\n    current_so_far = 0\r\n    for i in range(0, size):\r\n        current_so_far = max(a[i], current_so_far + a[i])\r\n        max_so_far = max(current_so_far, max_so_far)\r\n    return max_so_far\r\n\r\n\r","votes":95622.696},{"text":"\r\n    max_sum = 0\r\n    curr_sum = 0\r\n    for i in range(size):\r\n        curr_sum += a[i]\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n    return max_sum\r\n\r\n\r","votes":99923.452},{"text":"\r\n    max_sum = 0\r\n    curr_sum = 0\r\n    for i in range(size):\r\n        curr_sum = curr_sum + a[i]\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n    return max_sum\r\n\r\n\r","votes":99952.112},{"text":"\r\n\r\n    curr_sum = 0\r\n    max_sum = 0\r\n\r\n    for i in range(size):\r\n        curr_sum += a[i]\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n\r\n    return max_sum\r\n\r\n\r","votes":101004.016},{"text":"\r\n    max_sum = a[0]\r\n    current_sum = a[0]\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(max_sum, current_sum)\r\n    return max_sum\r\n\r\n\r","votes":101714.936},{"text":"\r\n    # create a max variable to store the max sum\r\n    max_sum = a[0]\r\n    current_sum = a[0]\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(max_sum, current_sum)\r\n    return max_sum\r\n\r\n\r","votes":105082.12},{"text":"\r\n    # Write your code here\r\n    max_sum = a[0]\r\n    curr_sum = 0\r\n    for i in range(size):\r\n        curr_sum += a[i]\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n        max_sum = max(max_sum, curr_sum)\r\n    return max_sum\r\n\r\n\r","votes":105384.596},{"text":"\r\n    max_sum = a[0]\r\n    curr_sum = 0\r\n\r\n    for i in range(size):\r\n        curr_sum = curr_sum + a[i]\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n\r\n    return max_sum\r\n\r\n\r","votes":109183.364},{"text":"\r\n    curr_sum = -1\r\n    max_sum = 0\r\n    for i in range(0, size):\r\n        curr_sum = curr_sum + a[i]\r\n        if (curr_sum > max_sum):\r\n            max_sum = curr_sum\r\n        if (curr_sum < 0):\r\n            curr_sum = 0\r\n    return max_sum\r\n\r\n\r","votes":109990.5},{"text":"\r\n    # 1. Initialize:\r\n    # max_so_far = a[0]\r\n    # curr_max = a[0]\r\n    max_so_far = a[0]\r\n    curr_max = a[0]\r\n    # 2. Loop\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max + a[i])\r\n        max_so_far = max(max_so_far, curr_max)\r\n    # 3. Output\r\n    return max_so_far\r\n\r\n\r","votes":112864.236},{"text":"\r\n    max_so_far = a[0]\r\n    curr_sum = a[0]\r\n    for i in range(1, size):\r\n        curr_sum = max(a[i], curr_sum + a[i])\r\n        max_so_far = max(max_so_far, curr_sum)\r\n    return max_so_far\r\n\r\n\r","votes":112994.064},{"text":"\r\n\r\n    # create a new array to keep track of the maximum\r\n    # sum of contiguous subarray encountered so far\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n\r\n    return max_so_far\r\n\r\n\r\n# Driver program to test above function\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nprint(\"Max contiguous sum is\", max_sub_array_sum(a, len(a)))\r\n\r\n# Python3 program to implement Kadane's Algorithm\r\n\r\n# Function to find the maximum sum\r\n# contiguous subarray\r\n\r\n\r","votes":113335.572},{"text":"\r\n    max_so_far = 0\r\n    current_so_far = 0\r\n    for i in range(0, size):\r\n        current_so_far = current_so_far + a[i]\r\n        if current_so_far < 0:\r\n            current_so_far = 0\r\n        elif current_so_far > max_so_far:\r\n            max_so_far = current_so_far\r\n    return max_so_far\r\n\r\n\r\nprint(\"Maximum contiguous sum is\", max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n\r\n# Time Complexity: O(n","votes":113361.556},{"text":"\r\n    if size <= 0:\r\n        return 0\r\n\r\n    current_sum = a[0]\r\n    largest_sum = a[0]\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        largest_sum = max(largest_sum, current_sum)\r\n\r\n    return largest_sum\r\n\r\n\r","votes":113376.596},{"text":"\r\n    max_so_far = max_ending_here = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n\r","votes":115357.092},{"text":"\r\n    max_so_far = a[0]\r\n    curr_max = a[0]\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max + a[i])\r\n        max_so_far = max(max_so_far, curr_max)\r\n    return max_so_far\r\n\r\n\r","votes":117666.848},{"text":"\r\n\r\n    # Initialize maximum sum and current sum\r\n    max_sum = a[0]\r\n    current_sum = a[0]\r\n\r\n    # Iterate from the second element to the end\r\n    for i in range(1, size):\r\n        # Calculate the current sum and compare it with the maximum sum\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(max_sum, current_sum)\r\n\r\n    return max_sum\r\n\r\n\r","votes":117929.024},{"text":"\r\n    max_so_far = a[0]\r\n    curr_sum = a[0]\r\n    for i in range(1, size):\r\n        curr_sum = curr_sum + a[i]\r\n        if curr_sum < a[i]:\r\n            curr_sum = a[i]\r\n        if max_so_far < curr_sum:\r\n            max_so_far = curr_sum\r\n    return max_so_far\r\n\r\n\r","votes":118156.1},{"text":"\r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if(max_so_far < max_ending_here):\r\n            max_so_far = max_ending_here\r\n        if(max_ending_here < 0):\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r","votes":118799.46},{"text":"\r\n    max_so_far = float('-inf')\r\n    current_so_far = 0\r\n    for i in range(size):\r\n        current_so_far += a[i]\r\n        if current_so_far > max_so_far:\r\n            max_so_far = current_so_far\r\n        if current_so_far < 0:\r\n            current_so_far = 0\r\n    return max_so_far\r\n\r\n\r","votes":119267.496},{"text":"\r\n    max_ending_here = a[0]\r\n    max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":120335.292},{"text":"\r\n    max_sum = -1000\r\n    curr_sum = 0\r\n    for i in range(size):\r\n        curr_sum += a[i]\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n    return max_sum\r\n\r\n\r\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n\r\n\r","votes":121788.452},{"text":"\r\n\r\n    max_ending_here = a[0]\r\n    max_so_far = a[0]\r\n\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n\r\n    return max_so_far\r\n\r\n\r\n# Driver program to test above function\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\n\r\n# Dynamic Programming solution for max sum contiguous subarray problem\r","votes":121826.408},{"text":"\r\n    \r\n    max_ending_here = a[0]\r\n    max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_ending_here < a[i]:\r\n            max_ending_here = a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\na = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n'''\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n'''\r\n\r\n'''\r\nSample Input:\r\n[13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\nSample Output:\r\n43\r\n'''\r\n\r\n\r","votes":122108.604},{"text":"\r\n    max_so_far = a[0]\r\n    current_sum = a[0]\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_so_far = max(max_so_far, current_sum)\r\n    return max_so_far\r\n\r\n\r\n# Driver Code\r\narr = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nn = len(arr)\r\nprint(\"Maximum contiguous subarray sum is\", max_sub_array_sum(arr, n))\r\n\r\n\r\n# Method 2 (Kadane's Algorithm)\r","votes":123290.54},{"text":"\r\n    max_so_far = a[0]\r\n    current_sum = a[0]\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_so_far = max(max_so_far, current_sum)\r\n    return max_so_far\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    size = len(a)\r\n    print(max_sub_array_sum(a, size))\r\n    # 6\r\n\r\n\r","votes":124173.6},{"text":"\r\n    max_so_far = a[0]\r\n    curr_max = a[0]\r\n\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max + a[i])\r\n        max_so_far = max(max_so_far, curr_max)\r\n\r\n    return max_so_far\r\n\r\n\r","votes":124341.052},{"text":"\r\n    max_sum = -1\r\n    curr_sum = 0\r\n    for i in range(size):\r\n        curr_sum = max(a[i], curr_sum + a[i])\r\n        max_sum = max(max_sum, curr_sum)\r\n    return max_sum\r\n\r\n\r","votes":124680.16},{"text":"\r\n    max_ending_here = max_so_far = 0\r\n\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if(max_ending_here < 0):\r\n            max_ending_here = 0\r\n        if(max_so_far < max_ending_here):\r\n            max_so_far = max_ending_here\r\n\r\n    return max_so_far\r\n\r\n\r","votes":127162.544},{"text":"\r\n    max_ending_here = a[0]\r\n    max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    \r\n    return max_so_far\r\n\r\n\r\n# Test program\r\na = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n# Time complexity: O(n)\r\n# Space complexity: O(1)\r\n\r\n# To find the largest sum of contiguous subarray in the given array.\r\n\r","votes":127257.968},{"text":"\r\n    max_so_far = a[0]\r\n    curr_max = a[0]\r\n\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max + a[i])\r\n        max_so_far = max(curr_max, max_so_far)\r\n\r\n    return max_so_far\r\n\r\n\r\na = [1, 2, 3, 4, -10]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\n\r\n# 2. Maximum Subarray Sum\r\n# The problem statement is:\r\n# Given an array of integers, find the subarray with the largest sum.\r\n# return the sum of the subarray.\r\n\r","votes":127466.036},{"text":"\r\n    max_so_far = a[0]\r\n    curr_max = a[0]\r\n\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max + a[i])\r\n        max_so_far = max(max_so_far, curr_max)\r\n\r\n    return max_so_far\r\n\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":129590.136},{"text":"\r\n    max_ending_here = max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":129755.988},{"text":"\r\n    max_so_far = -1000000000000000000000000000000000000\r\n    current_sum = 0\r\n    for i in range(0, size):\r\n        current_sum += a[i]\r\n        if current_sum > max_so_far:\r\n            max_so_far = current_sum\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    return max_so_far\r\n\r\n\r\n# Driver program to test the above function\r\na = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\nn = len(a)\r\nprint(max_sub_array_sum(a, n))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# Method 2 (Kadane's Algorithm)\r\n\r","votes":130249.956},{"text":"\r\n    # The idea is to calculate the sum of all the contiguous subarrays and return the maximum.\r\n    current_sum = 0\r\n    maximum_sum = a[0]\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n        if current_sum > maximum_sum:\r\n            maximum_sum = current_sum\r\n        elif current_sum < 0:\r\n            current_sum = 0\r\n    return maximum_sum\r\n\r\n# Test program\r\na = [1, 2, 3, -4, 5]\r\nsize = len(a)\r\nprint(\"The maximum sum of the contiguous subarray is %d\" % (max_sub_array_sum(a, size)))\r\n\r\n# Time Complexity: O(n) where n is the size of the array\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Given an array of N integers.\r\n# The task is to find the maximum sum of a subarray of the given array.\r\n\r\n# Example 1:\r\n\r\n# Input: A = [1, 2, 3, -4, 5]\r\n# Output: 9\r\n# Explanation: The subarray is [1, 2, 3, -4, 5] or [1, 2, 3, 4, 5] or [1, 2, 3, 5] or [2, 3, 4, 5] or [2, 3, 5] or [3, 4, 5] or [3, 5] or [4, 5] or [5]\r\n# Example 2:\r\n\r\n# Input: A = [-1, -2, -3, -4, -5]\r\n# Output: -1\r\n# Explanation: The subarray is [-1]\r\n# Example 3:\r\n\r\n# Input: A = [-1, -2, -3, 4, 5]\r\n","votes":130918.388},{"text":"\r\n    max_so_far = 0\r\n    current_sum = 0\r\n\r\n    for i in range(0, size):\r\n        current_sum = current_sum + a[i]\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n\r\n        if max_so_far < current_sum:\r\n            max_so_far = current_sum\r\n\r\n    return max_so_far\r\n\r\n\r","votes":132639.748},{"text":"\r\n    # write your code here\r\n    max_so_far = 0\r\n    current_sum = 0\r\n    for i in range(0, size):\r\n        current_sum += a[i]\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n        max_so_far = max(max_so_far, current_sum)\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    size = int(input().strip())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = max_sub_array_sum(arr, size)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n\r\n#2\r","votes":135961.348},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    max_sum = a[0]\r\n    current_sum = a[0]\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum+a[i])\r\n        if(current_sum > max_sum):\r\n            max_sum = current_sum\r\n    return max_sum\r\n    \r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [3, -5, 25, -6, 2, -10, 1, 6, -15, 4, -20, 5]\r\n    size = len(a)\r\n    print(\"The maximum sum of the contiguous subarray is: \")\r\n    print(max_sub_array_sum(a, size))\r\n\r\n'''\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nOUTPUT\r\n\r\nThe maximum sum of the contiguous subarray is: \r\n41\r\n\r\n'''\r\n\r\n\r\n\r\n\r\n\r\n\r\n'''\r\n\r\nMAXIMUM SUM SUBARRAY\r\n\r\nGiven an array of integers, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\r\n\r\nExample:\r\n\r\nInput: [-2,1,-3,4,-1,2,1,-5,4],\r\nOutput: 6\r\nExplanation: [4,-1,2,1] has the largest sum = 6.\r\nFollow up:\r\n\r\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\r\n\r\n'''\r\n\r\n\r\n\r","votes":137634.428},{"text":"\r\n    max_sum = 0\r\n    current_sum = 0\r\n    for i in range(0, size):\r\n        current_sum += a[i]\r\n        max_sum = max(max_sum, current_sum)\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    return max_sum\r\n\r\n\r\na = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n\r","votes":142224.564},{"text":"\r\n    max_so_far = a[0]\r\n    curr_max = a[0]\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max + a[i])\r\n        max_so_far = max(curr_max, max_so_far)\r\n    return max_so_far\r\n\r\n\r\n# Test program\r\na = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\nn = len(a)\r\nprint(f\"Maximum contiguous sum is {max_sub_array_sum(a, n)}\")\r\n\r\n\r","votes":144955.588},{"text":"\r\n\r\n    max_so_far = 0\r\n    curr_max = 0\r\n\r\n    for i in range(0, size):\r\n        curr_max += a[i]\r\n        if curr_max < 0:\r\n            curr_max = 0\r\n        elif max_so_far < curr_max:\r\n            max_so_far = curr_max\r\n\r\n    return max_so_far\r\n\r\n\r","votes":149390.104},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(a, 8))\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum2(a, 8))\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum3(a, 8))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n","votes":151537.456},{"text":"\r\n    # write your code here\r\n    max_sum = a[0]\r\n    curr_sum = a[0]\r\n    for i in range(1, size):\r\n        curr_sum = max(curr_sum + a[i], a[i])\r\n        max_sum = max(curr_sum, max_sum)\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().strip().split()))\r\n    result = max_sub_array_sum(arr, n)\r\n    print(result)\r\n\r\n\r\n'''\r\n# Sample code to test the solution\r\n\r\n# Please note that it's Function problem i.e.\r\n# you need to write your solution in the form Function(s) only.\r\n# Driver Code to call\/invoke your function is mentioned above.\r\n\r\n'''\r\n\r\n# User function Template for python3\r\n\r\n# arr : int[]\r\n# size : int\r\n# return an intger\r","votes":151702.048},{"text":"\r\n    max_sum = float('-inf')\r\n    curr_sum = 0\r\n    for i in range(size):\r\n        curr_sum = curr_sum + a[i]\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n    return max_sum\r\n\r\n\r","votes":153043.1},{"text":"\r\n    curr_sum = max_sum = a[0]\r\n    for i in range(1, size):\r\n        curr_sum = max(a[i], curr_sum + a[i])\r\n        max_sum = max(max_sum, curr_sum)\r\n    return max_sum\r\n\r\n\r","votes":155168.428},{"text":"\r\n    max_sum = a[0]\r\n    running_sum = a[0]\r\n    for i in range(1, size):\r\n        if running_sum < 0:\r\n            running_sum = a[i]\r\n        else:\r\n            running_sum += a[i]\r\n        if running_sum > max_sum:\r\n            max_sum = running_sum\r\n    return max_sum\r\n\r\n\r","votes":155171.04},{"text":"\r\n    max_sum = -1000000000\r\n    sum = 0\r\n    for i in range(size):\r\n        sum = sum + a[i]\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n        if sum < 0:\r\n            sum = 0\r\n    return max_sum\r\n\r\n\r","votes":157946.888},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = a[0]\r\n    \r\n    for i in range(1, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if (max_ending_here < a[i]):\r\n            max_ending_here = a[i]\r\n        if (max_so_far < max_ending_here):\r\n            max_so_far = max_ending_here\r\n        \r\n    return max_so_far\r\n\r","votes":158722.344},{"text":"\r\n    max_so_far = -1\r\n    curr_max = 0\r\n    for i in range(0, size):\r\n        curr_max += a[i]\r\n        if curr_max < 0:\r\n            curr_max = 0\r\n        if max_so_far < curr_max:\r\n            max_so_far = curr_max\r\n    return max_so_far\r\n\r\n\r","votes":163213.14},{"text":"\r\n    max_so_far = 0\r\n    curr_max = 0\r\n\r\n    for i in range(0, size):\r\n        curr_max += a[i]\r\n        if(curr_max < 0):\r\n            curr_max = 0\r\n        if max_so_far < curr_max:\r\n            max_so_far = curr_max\r\n    return max_so_far\r\n\r\n\r","votes":165570.5},{"text":"\r\n    max_so_far = 0\r\n    curr_sum = 0\r\n\r\n    for i in range(size):\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n        curr_sum += a[i]\r\n        max_so_far = max(curr_sum, max_so_far)\r\n\r\n    return max_so_far\r\n\r\n\r","votes":165663.98},{"text":"\r\n    max_so_far = 0\r\n    curr_max = 0\r\n    for i in range(0, size):\r\n        curr_max += a[i]\r\n        if curr_max < 0:\r\n            curr_max = 0\r\n        if curr_max > max_so_far:\r\n            max_so_far = curr_max\r\n    return max_so_far\r\n\r\n\r","votes":166777.964},{"text":"\r\n    \r\n    # initialize the sum and the max sum\r\n    current_sum = a[0]\r\n    max_sum = a[0]\r\n    \r\n    # loop over the rest of the elements in the array\r\n    for i in range(1, size):\r\n        \r\n        # update the current sum\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        \r\n        # update the maximum sum\r\n        max_sum = max(current_sum, max_sum)\r\n        \r\n    return max_sum\r\n\r\n\r","votes":171231.28},{"text":"\r\n\r\n    max_so_far = -float('inf')\r\n    curr_max = 0\r\n\r\n    for i in range(size):\r\n        curr_max += a[i]\r\n        if curr_max < 0:\r\n            curr_max = 0\r\n        max_so_far = max(max_so_far, curr_max)\r\n\r\n    return max_so_far\r\n\r\n\r","votes":171534.032},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    max_sum = a[0]\r\n    current_sum = a[0]\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(max_sum, current_sum)\r\n    return max_sum\r\n\r\n\r","votes":179018.16},{"text":"\r\n    max_sum = 0\r\n    sum = 0\r\n    for i in range(size):\r\n        sum += a[i]\r\n        max_sum = max(max_sum, sum)\r\n        if (sum < 0):\r\n            sum = 0\r\n    return max_sum\r\n\r\n\r","votes":180893.568},{"text":"\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n\r","votes":181326.44},{"text":"\r\n    max_so_far = max_ending_here = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":184345.78},{"text":"\r\n    max_sum = 0\r\n    sum = 0\r\n\r\n    for i in range(0, size):\r\n        sum = sum + a[i]\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n        if sum < 0:\r\n            sum = 0\r\n    return max_sum\r\n\r\n\r\n\r\narr = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nn = len(arr)\r\nprint(max_sub_array_sum(arr, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":191956.948},{"text":"\r\n    max_so_far = a[0]\r\n    current_sum = a[0]\r\n    \r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_so_far = max(current_sum, max_so_far)\r\n    return max_so_far\r\n\r\nif __name__ == '__main__':\r\n    arr = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    size = len(arr)\r\n    print(max_sub_array_sum(arr, size))\r\n\r\n# output\r\n# 7\r\n\r\n\r\n# Time Complexity: O(n) where n is the size of the array\r\n\r\n# Space Complexity: O(1) \r\n\r\n\r\n\r\n\r\n\r\n# Brute Force Approach\r\n\r\n\r","votes":195428.472},{"text":"\r\n    max_so_far= a[0]\r\n    curr_max= a[0]\r\n    for i in range(1, size):\r\n        curr_max= max(a[i], curr_max+a[i])\r\n        max_so_far= max(max_so_far, curr_max)\r\n    return max_so_far\r\n\r\n#test\r\na=[-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize= len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n\r\n#solution 2\r","votes":195862.36},{"text":"\r\n    current_sum = a[0]\r\n    max_sum = a[0]\r\n\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(max_sum, current_sum)\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the number of elements: \"))\r\n    a = []\r\n    for i in range(n):\r\n        a.append(int(input()))\r\n\r","votes":196787.284},{"text":"\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    for i in range(0, size):\r\n        max_ending_here += a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\na = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Using Kadane's Algorithm\r","votes":200492.428},{"text":"\r\n    \r\n    m = 0\r\n    s = 0\r\n    for i in range(size):\r\n        s += a[i]\r\n        if s > m:\r\n            m = s\r\n        if s < 0:\r\n            s = 0\r\n    return m   \r\n\r\narr = [1, 2, 3, -1, -2, 4, -5, 6, -7, 8]\r\nprint(\"The largest sum of contiguous subarray of\", arr, \"is\", max_sub_array_sum(arr, len(arr)))\r\n\r\narr = [-1, -2, -3, -4, -5]\r\nprint(\"The largest sum of contiguous subarray of\", arr, \"is\", max_sub_array_sum(arr, len(arr)))\r\n\r\narr = [1, 2, 3]\r\nprint(\"The largest sum of contiguous subarray of\", arr, \"is\", max_sub_array_sum(arr, len(arr)))\r\n\r\narr = [100, -1, 2, 3, -4, 5, -6, 7, -8, 9]\r\nprint(\"The largest sum of contiguous subarray of\", arr, \"is\", max_sub_array_sum(arr, len(arr)))\r\n\r\narr = [-100, -2, 3, -4, 5, -6, 7, -8, 9]\r\nprint(\"The largest sum of contiguous subarray of\", arr, \"is\", max_sub_array_sum(arr, len(arr)))\r\n\r\narr = [1, 2, 3, -4, 5, -6, 7, -8, 9]\r\nprint(\"The largest sum of contiguous subarray of\", arr, \"is\", max_sub_array_sum(arr, len(arr)))\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexit","votes":209179.512},{"text":"\r\n    max_sum = a[0]\r\n    curr_sum = a[0]\r\n\r\n    for i in range(1, size):\r\n        curr_sum = max(a[i], curr_sum+a[i])\r\n        max_sum = max(max_sum, curr_sum)\r\n\r\n    return max_sum\r\n\r\n\r","votes":209387.116},{"text":"\r\n    max_so_far = a[0]\r\n    curr_so_far = a[0]\r\n    for i in range(1, size):\r\n        curr_so_far = max(a[i], curr_so_far+a[i])\r\n        max_so_far = max(max_so_far, curr_so_far)\r\n        \r\n    return max_so_far\r\n\r\na = [34, -50, 42, 14, -5, 86]\r\nsize = len(a)\r\nprint(f\"Maximum contiguous sum is {max_sub_array_sum(a, size)} \")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":214147.504},{"text":"\r\n\r\n    # Initialize the maximum sum to the first element of the array.\r\n    max_sum = a[0]\r\n    # Initialize the current sum to the first element of the array.\r\n    current_sum = a[0]\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum+a[i])\r\n        max_sum = max(current_sum, max_sum)\r\n    return max_sum\r\n\r\n\r\n# Driver program to test the above function.\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# Input:\r\n# array: [-2, -3, 4, -1, -2, 1, 5, -3]\r\n# Output:\r\n# 7\r\n# Explanation:\r\n# The subarray [4, -1,","votes":214270.912},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_ending_here < a[i]:\r\n            max_ending_here = a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n\r","votes":216203.808},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if (max_ending_here < a[i]):\r\n            max_ending_here = a[i]\r\n        if (max_so_far < max_ending_here):\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n\r\na = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\n\r","votes":223340.824},{"text":"\r\n    temp_sum = 0\r\n    max_sum = a[0]\r\n    \r\n    for i in range(size):\r\n        temp_sum = temp_sum + a[i]\r\n        if temp_sum > max_sum:\r\n            max_sum = temp_sum\r\n        if temp_sum < 0:\r\n            temp_sum = 0\r\n    return max_sum\r\n\r\n\r\na = [2, 3, 4, -1, 5]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n\r\n# 3) Write a function to find maximum of all subarrays of size k.\r","votes":227854.812},{"text":"\r\n    max_sum = a[0]\r\n    current_sum = a[0]\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(max_sum, current_sum)\r\n    return max_sum\r\n\r\n\r\nprint(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9))\r\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8))\r\nprint(max_sub_array_sum([0, -8, 3, 4, -2, 0, 3, 10, -3], 9))\r\n","votes":232385.66},{"text":"\r\n\r\n    max_sum = a[0]\r\n    curr_sum = a[0]\r\n\r\n    for i in range(1, size):\r\n        curr_sum = max(a[i], curr_sum + a[i])\r\n        max_sum = max(max_sum, curr_sum)\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [-2, -3, 4, -1, -2, 1, ","votes":null},{"text":"\r\n    \r\n    max_sum = 0\r\n    current_sum = 0\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n\r\n    return max_sum\r\n\r\n\r\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 2))\r\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 3))\r\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 1))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 1))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 5))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 2))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 3))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 4))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 10))\r\nprint(max_sub_array_sum([1], 1))\r\nprint(max_sub_array_sum([1], 2))\r\nprint(max_sub_array","votes":null},{"text":"\r\n    max_so_far = float(\"-inf\") \r\n    curr_max = 0\r\n    for i in range(0, size):\r\n        curr_max = max(a[i], curr_max+a[i])\r\n        max_so_far = max(curr_max, max_so_far)\r\n    return max_so_far\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\n    print(f\"The largest sum of contiguous sub","votes":null},{"text":"\r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if (max_so_far < max_ending_here):\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print('Maximum contiguous sum is {0}'.format(max_sub_array_sum(arr, len(arr))))\r\n\r\n    arr = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\r\n    print('Maximum contiguous sum is {0}'.format(max_sub_array_sum(arr, len(arr))))\r\n\r\n    arr = [-1, -2, -3, 1, 2, 3, -4, -5, -6, -7, -8, -9, -10]\r\n    print('Maximum contiguous sum is {0}'.format(max_sub_array_sum(arr, len(arr))))\r\n\r\n    arr = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print('Maximum contiguous sum is {0}'.format(max_sub_array_sum(arr, len(arr))))\r\n\r\n    arr = [-1, -2, -3, -4, -5, ","votes":null},{"text":"\r\n    # write your code here\r\n    sum = 0\r\n    curr_sum = 0\r\n    for i in range(0, size):\r\n        curr_sum += a[i]\r\n        if curr_sum > sum:\r\n            sum = curr_sum\r\n    return sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    arr_count = int(input().strip())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    res = max_sub_array_sum(arr, arr_count)\r\n\r\n    fptr.write(str(res) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# Submitted: https:\/\/www.hackerrank.com\/rest\/contests\/master\/challenges\/30-arrays\/submissions\/code\/171582605\r\n# 100\/100 points\r\n# Your runtime beats 100.00% of python3 submissions\r\n# Your memory usage beats 100.00% of python3 submissions (12.7 MB)\r\n\r\n# # Given an array of integers, find the subarray with the largest sum.\r\n# # Return the sum of the subarray.\r\n\r\n# # Example:\r\n# # Input: [-2,1,-3,4,-1,2,1,-5,4],\r\n# # Output: 6\r\n# # Explanation: [4,-1,2,1] has the largest sum = 6.\r\n\r\n# # Follow up:\r\n# # If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\r\n\r\n\r\nfrom functools import reduce\r\n\r\n\r\nclass MaxSubarray:\r\n    \"\"\"MaxSubarray class\"\"\"\r\n\r\n  ","votes":null},{"text":"\r\n    if size < 1 :\r\n        return 0\r\n    max_sum = a[0]\r\n    for i in range(1, size):\r\n        a[i] += a[i - 1]\r\n        max_sum = max(max_sum, a[i])\r\n    return max_sum\r\n\r\nif __name__ == '__main__':\r\n    a = [3, -4, 5, 2, -3, 1, 4, -2, 3]\r\n    size = len(a)\r\n    print(max_sub_array_sum(a, size))\r\n\r\n\r\n# Time complexity: O(n)\r\n\r\n# Space complexity: O(1)\r\n\r\n\r\n# Given an array, find the maximum sum of all subarrays of size k.\r\n\r\n# Example:\r\n\r\n# Input: [2, 1, 5, 1, 3, 2], k = 3\r\n# Output: 9\r\n# Explanation: Subarrays with the maximum sum are underlined:\r\n# [2, 1, 5, 1, 3, 2]\r\n# 2, 1, 5, 1, 3, 2\r\n# 2, 1, 5, 1, 3\r\n# 1, 5, 1, 3\r\n# 5, 1, 3\r\n# 1, 3\r\n# 3\r\n\r\n# Solution\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    max_sum = a[0]\r\n    for i in range(size):\r\n        sum += a[i]\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n        if sum < 0:\r\n            sum = 0\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(a, len(a)))\r\n    a = [-2, -3, -4, -1, -2, -1, -2, -3]\r\n    print(max_sub_array_sum(a, len(a)))\r\n    a = [-2, 3, 2, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(a, len(a)))\r\n    a = [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]\r\n    print(max_sub_array_sum(a, len(a)))\r\n    a = [-2, -3, -4, -1, -2, -1, -2, -3]\r\n    print(max_sub_array_sum(a, len(a)))\r\n    a = [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]\r\n    print(max_sub_array_sum(a, len(a)))\r\n    a = [-2, 3, 2, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(a","votes":null},{"text":"\r\n    max_so_far = 0\r\n    current_so_far = 0\r\n    for i in range(0, size):\r\n        current_so_far += a[i]\r\n        if current_so_far < 0:\r\n            current_so_far = 0\r\n        if current_so_far > max","votes":null},{"text":"\r\n    max_sum = -1\r\n    current_sum = 0\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n        elif current_sum < 0:\r\n            current_sum = 0\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    size = len(a)\r\n    print(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))\r\n\r\n    a = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    size = len(a)\r\n    print(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))\r\n\r\n    a = [-2, 1, 1, 1, -5, 4]\r\n    size = len(a)\r\n    print(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))\r\n\r\n    a = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    size = len(a)\r\n    print(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))\r\n\r\n    a = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]\r\n    size = len(a)\r\n    print(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))\r\n\r\n    a = [-1, -1","votes":null},{"text":"\r\n    max_so_far = a[0]\r\n    curr_max = a[0]\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max + a[i])\r\n        max_so_far = max(max_so_far, curr_max)\r\n    return max_so_far\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\n    print(max_sub_array_su","votes":null},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    max_ending_here = a[0]\r\n    max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1","votes":null},{"text":"\r\n    max_so_far = -10000000000000000\r\n    current_sum = 0\r\n    for i in range(0, size):\r\n        current_sum = current_sum + a[i]\r\n        if current_sum > max_so_far:\r\n            max_so_far = current_sum\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = list(map(int, input('Enter the array elements: ').split()))\r\n    size = int(input('Enter the size of the array: '))\r\n    print(\"The largest sum of contiguous subarray is: \", max_sub_array_sum(a, size))\r\n\r\n\r\n'''\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the array elements: 1 2 3 -4 5\r\nEnter the size of the array: 5\r\nThe largest sum of contiguous subarray is:  11\r\n\r\nSAMPLE II\r\n\r\nEnter the array elements: -1 2 3 -4 5\r\nEnter the size of the array: 5\r\nThe largest sum of contiguous subarray is:  11\r\n\r\nSAMPLE III\r\n\r\nEnter the array elements: -1 -2 -3 -4 -5\r\nEnter the size of the array: 5\r\nThe largest sum of contiguous subarray is:  -1\r\n\r\nSAMPLE IV\r\n\r\nEnter the array elements: -1 -2 -3 -4 -5 -6 -7 -8 -9 -10\r\nEnter the size of the array: 10\r\nThe largest sum of contiguous subarray is:  -1\r\n\r\nSAM","votes":null},{"text":"\r\n    max_so_far = 0\r\n    current_so_far = 0\r\n    i = 0\r\n    j = 0\r\n    while i < size and j < size:\r\n        current_so_far += a[j]\r\n        if current_so_far < 0:\r\n            current_so_far = 0\r\n            j += 1\r\n        else:\r\n            if max_so_far < current_so_far:\r\n                max_so_far = current_so_far\r\n            j += 1\r\n    return max_so_far\r\n\r\n\r\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\r\nprint(max_sub_array_sum([-2, -3, -4, -1, -2, -1, -5, -3], 8))\r\nprint(max_sub_array_sum([-10, -2, -3, -4, -5, -6, -7, -8, -9], 9))\r\nprint(max_sub_array_sum([10, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\r\nprint(max_sub_array_sum([10, 2, 3, 4, 5, 6, 7, 8, 9, -10], 10))\r\nprint(max_sub_array_sum([10, 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30], 12))\r\nprint(max_sub_array_su","votes":null},{"text":"\r\n\r\n    max_sum = float(\"-inf\")\r\n    cur_sum = 0\r\n\r\n    for i in range(size):\r\n        cur_sum = cur_sum + a[i]\r\n        max_sum = max(max_sum, cur_sum)\r\n        if cur_sum < 0:\r\n            cur_sum = 0\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [-2, 3, -8, 4, -10]\r\n    size = len(a)\r\n\r\n    print(\"The maximum possible sum is: \" + str(max_sub_array_sum(a, size)))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    max_so_far = a[0]\r\n    curr_max = a[0]\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max + a[i])\r\n        max_so_far = max(max_so_far, curr_max)\r\n    return max_so_far\r\n\r\n\r\na = [1, 2, 3, -4, 5]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\na = [-2, -3, -4, -1, -2, -1, -5, -3]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\na = [1, 2, 3]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\na = [100, -1, 2, 3, 10, -20, 100, 4, 5, -50, 1]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\na = [100, -1, 2, 3, 10, 1, 100, 4, 5, 6, 7]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\na = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\na = [0, 0, 0, 0, 0]\r\nprint(max_sub_array_sum(a, len","votes":null},{"text":"\r\n\r\n    # code goes here\r\n    \r\n    # 1. We can use a simple for loop to find the max contiguous subarray sum\r\n    # 2. This method is O(n^2) time complexity\r\n    # 3. But we can optimize this method using Kadane's Algorithm\r\n    \r\n    # 1. Define an empty array and initialize the max_sum to 0\r\n    max_sum = 0\r\n    max_sub_array = []\r\n    \r\n    # 2. Iterate through the array\r\n    for i in range(size):\r\n        # 3. Initialize the sum to 0\r\n        sum = 0\r\n        \r\n        # 4. Find the sum of the current subarray\r\n        for j in range(i, size):\r\n            sum += a[j]\r\n            \r\n            # 5. If the sum is greater than the max_sum, update the max_sum and max_sub_array\r\n            if sum > max_sum:\r\n                max_sum = sum\r\n                max_sub_array = a[i:j+1]\r\n                \r\n    # 6. Return the max_sub_array\r\n    return max_sub_array\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    max_sub_array = max_sub_array_sum(arr, n)\r\n    print(max_sub_array)\r\n\r\n# 1. Test Case 1\r\n# Input:\r\n# 6\r\n# -2 1 -3 4 -1 2 1 -5 4\r\n# Output:\r\n# [-1, 2, 1, -5, 4]\r\n\r\n# 2. Test Case 2\r\n# Input:\r\n# 6\r\n# 13 -3 -25 20 -3 -16 -23","votes":null},{"text":"\r\n\r\n    # Your code goes here\r\n    max_sum = 0\r\n    current_sum = 0\r\n\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    input = [2, -8, 3, -2, 4, -10]\r\n    print(max_sub_array_sum(input, len(input)))\r\n    input = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(input, len(input)))\r\n    input = [1, 2, -4, 3, 4, -5]\r\n    print(max_sub_array_sum(input, len(","votes":null},{"text":"\r\n    if size == 1:\r\n        return a[0]\r\n    l = max_sub_array_sum(a[1:], size-1)\r\n    r = max_sub_array_sum(a[1:], size-1) + a[0]\r\n    return max(l, r)\r\n\r\n\r","votes":null},{"text":"\r\n    largest = a[0]\r\n    current_sum = 0\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n        if(current_sum > largest):\r\n            largest = current_sum\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    return largest\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\n    print(max_sub_array_sum(a, len(a)))\r\n    print(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9))\r\n    print(max_sub_array_sum([-1, -1, -1], 3))\r\n    print(max_sub_array_sum([-1], 1))\r\n    print(max_sub_array_sum([1], 1))\r\n    print(max_sub_array_sum([-1, -2], 2))\r\n    print(max_sub_array_sum([1, -2], 2))\r\n    print(max_sub_array_sum([-2, -1], 2))\r\n    print(max_sub_array_sum([-1, 1], 2))\r\n    print(max_sub_array_sum([-1, 2], 2))\r\n    print(max_sub_array_sum([1, 2], 2))\r\n    print(max_sub_array_sum([-2, 1], 2))\r\n    print(max_sub_array_sum([-1, 1, 2], 3))\r\n    print(max_sub_array","votes":null},{"text":"\r\n    max_sum = a[0]\r\n    current_sum = a[0]\r\n\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(current_sum, max_sum)\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\n    size = len(a)\r\n    print(f\"Max subarray sum is {max_sub_array_sum(a,","votes":null},{"text":"\r\n    max_sum = 0\r\n    sum = 0\r\n    for i in range(size):\r\n        sum += a[i]\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n        if sum < 0:\r\n            sum = 0\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [1, 2, 3, -2, 5]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [1, 2, 3, 4, -10]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [1, 2, 3, 4, 0]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [1, 2, 3, 4, -10, 11]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [1, 2, 3, 4, -10, -20]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [4, -3, 5, -2, -1, 2, 6]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [2, 3, 4, -5, -1, 2, 6]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [2, 3, 4, -5, -1, 2, 6]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [-2, -3, -4, -5, -1, -2, -","votes":null},{"text":"\r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n\r\n    for i in range(0, size):\r\n        max_ending_here += a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    l = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(l, len(l)))\r\n\r\n    l = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(l, len(l)))\r\n\r\n    l = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(l, len(l)))\r\n\r\n    l = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(l, len(l)))\r\n\r\n    l = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(l, len(l)))\r\n\r\n    l = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(l, len(l)))\r\n\r\n    l = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum","votes":null},{"text":"\r\n    max_sum = 0\r\n    current_sum = 0\r\n\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n\r\n    return max_sum\r\n\r\n\r\na1 = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nprint(max_sub_array_sum(a1, len(a1)))\r\n\r\na2 = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nprint(max_sub_array_sum(a2, len(a2)))\r\n\r\na3 = [-2, -3, -4, -1, -2, -1, -2, -3, -4]\r\nprint(max_sub_array_sum(a3, len(a3)))\r\n\r\na4 = [1, 2, 3, -4, -3, -2, -1, -2, -3, -4, 1, 2]\r\nprint(max_sub_array_sum(a4, len(a4)))\r\n\r\na5 = [1, 2, 3, 4, -5]\r\nprint(max_sub_array_sum(a5, len(a5)))\r\n\r\na6 = [1, 2, 3, 4, -5, 0]\r\nprint(max_sub_array_sum(a6, len(a6)))\r\n\r\na7 = [1, 2, 3, 4, -5, 0, 1, 2, 3, 4, -5]\r\nprint(max_sub_array_sum(a7, len(a7)))\r\n\r\na8 = [1, 2,","votes":null},{"text":"\r\n    max_so_far = -100000\r\n    current_sum = 0\r\n    for i in range(0, size):\r\n        current_sum = current_sum + a[i]\r\n        if current_sum > max_so_far:\r\n            max_so_far = current_sum\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    return max_so_far\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nInput:\r\n[-2, -3, 4, -1, -2, 1, 5, -3]\r\n\r\nOutput:\r\n7\r\n\r\nExplanation:\r\nThe largest sum of contiguous subarray is [4,-1,1,5] = 7\r\n\r\nSAMPLE II\r\n\r\nInput:\r\n[-2, -3, -4, -1, -2, -1, -2, -3]\r\n\r\nOutput:\r\n-1\r\n\r\nExplanation:\r\nThe largest sum of contiguous subarray is [-1] = -1\r\n\r\nSAMPLE III\r\n\r\nInput:\r\n[-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n\r\nOutput:\r\n6\r\n\r\nExplanation:\r\nThe largest sum of contiguous subarray is [4, -1, 2, 1] = 6\r\n\r\n\r\nResources:\r\n\r\nKadane's Algorithm: https:\/\/www.youtub","votes":null},{"text":"\r\n    max_so_far = 0\r\n    max_end_here = 0\r\n    for i in range(0, size):\r\n        max_end_here = max_end_here + a[i]\r\n        if(max_end_here < 0):\r\n            max_end_here = 0\r\n        if(max_so_far < max_end_here):\r\n            max_so_far = max_end_here\r\n    return max_so_far\r\n\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize = len(","votes":null},{"text":"\r\n\r\n    # code goes here\r\n    max_sum = a[0]\r\n    running_sum = a[0]\r\n    for i in range(1, size):\r\n        if running_sum > 0:\r\n            running_sum = running_sum + a[i]\r\n        else:\r\n            running_sum = a[i]\r\n        if running_sum > max_sum:\r\n            max_sum = running_sum\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # use this to test your solution.\r\n    # a = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    # a = [1, 2, 3, -4, 5]\r\n    # a = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    # a = [1]\r\n    # a = [1, 2, 3, -4, 5]\r\n    # a = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    # a = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    # a = [-1, -1, -1, -1, -1]\r\n    # a = [-2, 1]\r\n    # a = [-2, -1, 1]\r\n    # a = [-2, -1, 1, -3, 4]\r\n    # a = [-2, -1, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    # a = [-2, -1, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    # a = [-2, ","votes":null}],"time":{"count":71.0,"avg":147449.0215211268,"std":37198.9461880292,"cov":0.2522834387}}
{"id":560,"question":"def union_elements(test_tup1, test_tup2):\r\n    \"\"\"Write a function to find the union of elements of the given tuples.\"\"\"","answers":[{"text":"\r\n\r\n    new_set = set(test_tup1)\r\n    new_set.update(test_tup2)\r\n    new_tup = tuple(new_set)\r\n    return new_tup\r\n\r\n\r","votes":93709.456},{"text":"\r\n    return tuple(set(test_tup1 + test_tup2))\r\n\r\n\r","votes":100536.848},{"text":"\r\n\r\n    test_tup1 = list(test_tup1)\r\n    test_tup2 = list(test_tup2)\r\n    union = list(set(test_tup1 + test_tup2))\r\n    return tuple(union)\r\n\r\n\r\n# test_tup1 = (1, 2, 3, 4, 5)\r\n# test_tup2 = (4, 5, 6, 7, 8)\r\n# print(union_elements(test_tup1, test_tup2))\r\n# # Expected output (1, 2, 3, 4, 5, 6, 7, 8)\r\n\r\n# test_tup1 = (1, 2, 3, 4, 5)\r\n# test_tup2 = (4, 5, 6, 7, 8)\r\n# print(union_elements(test_tup1, test_tup2))\r\n# # Expected output (1, 2, 3, 4, 5, 6, 7, 8)\r\n\r\n# test_tup1 = (1, 2, 3, 4, 5)\r\n# test_tup2 = (4, 5, 6, 7, 8)\r\n# print(union_elements(test_tup1, test_tup2))\r\n# # Expected output (1, 2, 3, 4, 5, 6, 7, 8)\r\n\r\n# test_tup1 = (1, 2, 3, 4, 5)\r\n# test_tup2 = (4, 5, 6, 7, 8)\r\n# print(union_elements(test_tup1, test_tup2))\r\n# # Expected output (1, 2, 3, 4, 5, 6, 7, 8)\r\n\r\n# test_tup1 = (1","votes":102171.744},{"text":"\r\n    return tuple(set(test_tup1).union(test_tup2))\r\n\r\n\r","votes":114131.52},{"text":"\r\n    union_elements = set(test_tup1) | set(test_tup2)\r\n    return tuple(union_elements)\r\n\r\n\r","votes":114251.82},{"text":"\r\n    union = []\r\n    \r\n    for i in test_tup1:\r\n        if i not in union:\r\n            union.append(i)\r\n    \r\n    for i in test_tup2:\r\n        if i not in union:\r\n            union.append(i)\r\n    \r\n    return tuple(union)\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n# Calls  main  to start the ball rolling.\r\n# -----------------------------------------------------------------------------\r\n\r","votes":114742.636},{"text":"\r\n\r\n    return tuple(set(test_tup1 + test_tup2))\r\n\r\n\r","votes":116448.412},{"text":"\r\n    \r\n    # create an empty set\r\n    test_tup = set()\r\n    \r\n    # loop through the first tuple\r\n    for i in test_tup1:\r\n        # add elements to the set\r\n        test_tup.add(i)\r\n        \r\n    # loop through the second tuple\r\n    for i in test_tup2:\r\n        # add elements to the set\r\n        test_tup.add(i)\r\n    \r\n    # return the set as a tuple\r\n    return tuple(test_tup)\r\n\r\n# call function and print output\r\nprint(union_elements((1, 2, 3, 4), (5, 6, 7, 8)))\r\n\r\n#------------------------------------------------------------------------------\r\n# Exercise 12\r\n# Write a function that returns the intersection of the two tuple inputs.\r\n#------------------------------------------------------------------------------\r\n\r","votes":121532.46},{"text":"\r\n    return tuple(set(test_tup1 + test_tup2))\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5, 6)\r\ntest_tup2 = (5, 6, 7, 8, 9, 10)\r\n\r\nprint(union_elements(test_tup1, test_tup2))\r\n# expected output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n\r","votes":122953.736},{"text":"\r\n    return tuple(list(set(test_tup1 + test_tup2)))\r\n\r\n\r","votes":130339.82},{"text":"\r\n    return tuple(set(test_tup1) | set(test_tup2))\r\n\r\n\r","votes":131802.304},{"text":"\r\n    return tuple(set(test_tup1 + test_tup2))\r\n\r\n\r\n# test_tup1 = (2, 1, 2, 3, 5, 7, 5, 1, 2, 4)\r\n# test_tup2 = (2, 3, 3, 4, 3, 5, 7, 3, 1, 2, 4)\r\n# print(union_elements(test_tup1, test_tup2))\r\n\r\n# ------------------------------------------------------------------------------------------------\r\n\r","votes":134163.0},{"text":"\r\n    my_set = set(test_tup1 + test_tup2)\r\n    return tuple(my_set)\r\n\r\n\r","votes":140228.084},{"text":"\r\n    union = set(test_tup1 + test_tup2)\r\n    return tuple(union)\r\n\r\n\r","votes":140809.296},{"text":"\r\n    return tuple(set(test_tup1 + test_tup2))\r\n\r\n\r\nprint(union_elements((1, 2, 3, 4), (5, 6, 7, 8)))\r\nprint(union_elements(('a', 'b', 'c'), ('d', 'e', 'f')))\r\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5)))\r\nprint(union_elements((1, 2, 3, 4), (2, 3, 4, 5)))\r\nprint(union_elements((1, 2, 3, 4), (1, 2, 3, 4)))\r\n\r\n\r","votes":145237.404},{"text":"\r\n    #code here\r\n    return tuple(set(list(test_tup1)+list(test_tup2)))\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n#   [Optional] Challenge Task 3 of 3\r\n#   Write a function to find the intersection of elements of the given tuples.\r\n# -----------------------------------------------------------------------------\r\n\r","votes":148187.912},{"text":"\r\n    union = set(test_tup1).union(set(test_tup2))\r\n    return tuple(union)\r\n\r\n\r","votes":150165.076},{"text":"\r\n    test_tup1 = tuple(set(test_tup1))\r\n    test_tup2 = tuple(set(test_tup2))\r\n    \r\n    # return tuple(set(test_tup1 + test_tup2))\r\n    return tuple(set(test_tup1).union(set(test_tup2)))\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3)\r\n    test_tup2 = (2, 3, 4)\r\n    print(union_elements(test_tup1, test_tup2))\r\n    assert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\r\n    assert union_elements((5, 6, 7), (4, 5, 6)) == (5, 6, 7, 4)\r\n\r\n\r\n# ###############################################################################################################\r\n# # 03. Write a Python function to remove elements from a tuple.\r\n#","votes":154939.504},{"text":"\r\n    test_list = list(test_tup1) + list(test_tup2)\r\n    return tuple(set(test_list))\r\n\r","votes":157206.644},{"text":"\r\n    union_elements = set(test_tup1) | set(test_tup2)\r\n    return tuple(union_elements)\r\n\r","votes":164440.22},{"text":"\r\n    result_set = set()\r\n    for item in test_tup1:\r\n        result_set.add(item)\r\n    for item in test_tup2:\r\n        result_set.add(item)\r\n    return tuple(result_set)\r\n\r\n\r","votes":171413.748},{"text":"\r\n\r\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\r\n        return tuple(set(test_tup1 + test_tup2))\r\n    else:\r\n        raise Exception(\"Error! Inputs must be tuples.\")\r\n\r\n\r\n# Tests\r\nassert union_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\r\nassert union_elements((2, 3, 4, 5, 6), (1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5, 6)\r\nassert union_elements((\"a\", \"b\", \"c\"), (\"a\", \"b\", \"a\", \"c\")) == (\"a\", \"b\", \"c\")\r\nassert union_elements((\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\", \"a\", \"c\")) == (\"a\", \"b\", \"c\")\r\nassert union_elements((\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\", \"a\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\")) == (\"a\", \"b\", \"c\")\r\n\r\n# Solution\r","votes":173087.592},{"text":"\r\n    \r\n    \r\n    # create a set with the elements of the first tuple\r\n    union_set = set(test_tup1)\r\n    # add all elements of the second tuple to the set\r\n    union_set.update(test_tup2)\r\n    \r\n    # return the set as a tuple\r\n    return tuple(union_set)\r\n\r\n\r\n# create a set with unique elements of the given tuples\r\ntest_tup1 = ('a', 'b', 'c', 'd')\r\ntest_tup2 = ('e', 'f', 'g', 'c', 'd')\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n\r\n# Problem 2\r","votes":180026.348},{"text":"\r\n\r\n    temp = test_tup1 + test_tup2\r\n    temp = set(temp)\r\n    temp = tuple(temp)\r\n    return temp\r\n\r\n\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8)))\r\n\r\n\r\n# 7\r","votes":185501.428},{"text":"\r\n    test_tup1_set = set(test_tup1)\r\n    test_tup2_set = set(test_tup2)\r\n    union_set = test_tup1_set.union(test_tup2_set)\r\n    return tuple(union_set)\r\n\r\n\r\n# Test Cases\r\ntest_tup1 = (3, 5, 7, 9, 11)\r\ntest_tup2 = (1, 3, 5, 11, 13)\r\nprint(f\"Union of {test_tup1} and {test_tup2} is {union_elements(test_tup1, test_tup2)}.\")\r\n\r\ntest_tup1 = (1, 3, 5, 7, 9, 11, 13, 15, 17, 19)\r\ntest_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\nprint(\r\n    f\"Union of {test_tup1} and {test_tup2} is {union_elements(test_tup1, test_tup2)}.\")\r\n\r\ntest_tup1 = (1, 3, 5, 7, 9, 11, 13, 15, 17, 19)\r\ntest_tup2 = (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)\r\nprint(\r\n    f\"Union of {test_tup1} and {test_tup2} is {union_elements(test_tup1, test_tup2)}.\")\r\n\r\n\r","votes":194883.016},{"text":"\r\n    test_tup1 = list(test_tup1)\r\n    test_tup2 = list(test_tup2)\r\n    union = []\r\n    for i in test_tup1:\r\n        if i not in union:\r\n            union.append(i)\r\n    for i in test_tup2:\r\n        if i not in union:\r\n            union.append(i)\r\n    return tuple(union)\r\n\r\n\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)))\r\n\r\n\r","votes":212367.24},{"text":"\r\n    #takes two tuples as input and returns a tuple\r\n    #example: union_elements((1,2,3,4,5), (3,4,5,6,7))\r\n    #returns: (1, 2, 3, 4, 5, 6, 7)\r\n    #if any element appears in both tuples, it should appear only once in the result\r\n    #the order of the elements in the result should be the same as the first tuple\r\n    #the second tupel should not be mutated\r\n    #use a for loop\r\n    #use a set\r\n\r\n    # initialize a set\r\n    test_set = set()\r\n\r\n    # loop through the first tuple\r\n    for i in test_tup1:\r\n        # add each element to the set\r\n        test_set.add(i)\r\n\r\n    # loop through the second tuple\r\n    for i in test_tup2:\r\n        # add each element to the set\r\n        test_set.add(i)\r\n\r\n    # return the set as a tuple\r\n    return tuple(test_set)\r\n\r\n# call the function\r\nprint(union_elements((1,2,3,4,5), (3,4,5,6,7)))\r\n# expected output:\r\n# (1, 2, 3, 4, 5, 6, 7)\r\n\r\n# call the function again\r\nprint(union_elements((1,2,3,4,5), (3,4,5,6,7)))\r\n# expected output:\r\n# (1, 2, 3, 4, 5, 6, 7)\r\n\r\n# Exercise 44\r\n# Write a function that returns a copy of a tuple.\r\n\r","votes":226102.388},{"text":"\r\n    union = set()\r\n    for x in test_tup1:\r\n        union.add(x)\r\n    for y in test_tup2:\r\n        union.add(y)\r\n    return tuple(union)\r\n\r\n\r\ntest_tup1 = ('a', 'b', 'c', 'd', 'e')\r\ntest_tup2 = ('c', 'f', 'd', 'g', 'h')\r\nresult = union_elements(test_tup1, test_tup2)\r\nprint(result)  # ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n\r\n\r\n# 5. Write a Python function that takes a positive integer and returns the sum of all integers from 1 to n (both included).\r","votes":278363.884},{"text":"\r\n    return set(test_tup1).union(set(test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    # return the union of the two tuples\r\n    return test_tup1 + test_tup2\r\n\r\n\r\n# Test cases\r\nprint(union_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7)))\r\nprint(union_elements((6, 7, 8, 9, 10), (10, 11, 12, 13, 14)))\r\nprint(union_elements((1, 1, 1, 1, 1), (1, 1, 1, 1, 1)))\r\nprint(union_elements((1, 2, 3, 4, 5), (6, 7, 8, 9, ","votes":null},{"text":"\r\n    return set(test_tup1 + test_tup2)\r\n\r\n\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)))\r\n\r\n\r","votes":null},{"text":"\r\n    final_set = set()\r\n    for i in test_tup1:\r\n        final_set.add(i)\r\n    for i in test_tup2:\r\n        final_set.add(i)\r\n    print(final_set)\r\n\r\n\r","votes":null},{"text":"\r\n    return set(test_tup1 + test_tup2)\r\n\r\n\r\n\r\n# In[2]:\r\n\r\n\r\ntest_tup1 = (\"a\", \"b\", \"c\")\r\ntest_tup2 = (\"c\", \"d\", \"e\")\r\n\r\n\r\n# In[3]:\r\n\r\n\r\nunion_elements(test_tup1, test_tup2)\r\n\r\n\r\n# #### Question: 10\r\n# #### Write a function to obtain the intersection of elements of the given tuples.\r\n\r\n# In[1]:\r\n\r\n\r","votes":null},{"text":"\r\n    union_tup = ()\r\n\r\n    for i in test_tup1:\r\n        if i not in union_tup:\r\n            union_tup = union_tup + (i,)\r\n\r\n    for j in test_tup2:\r\n        if j not in union_tup:\r\n            union_tup = union_tup + (j,)\r\n\r\n    return union_tup\r\n\r\n\r\n# TEST CASES\r\nprint(union_elements((1, 2, 3, 4), (3, 4, 5, 6)))\r\nprint(union_elements((1, 2, 3, 4), (1, 2, 3, 4)))\r\nprint(union_elements((1, 2, 3, 4), ()))\r\nprint(union_elements((","votes":null},{"text":"\r\n    if not test_tup1 and not test_tup2:\r\n        return test_tup1\r\n    elif not test_tup1:\r\n        return test_tup2\r\n    elif not test_tup2:\r\n        return test_tup1\r\n    else:\r\n        return test_tup1 + test_tup2\r\n\r\n\r\nprint(union_elements((1, 2, 3), (4, 5, 1)))\r\n\r\n\r\n\"\"\"\r\nWrite a function to find the union of elements of the given tuples.\r\nFor example, given tuples (1, 2, 3) and (4, 5, 1)\r\nthe function should return the tuple (1, 2, 3, 4, 5).\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    return sorted(set(test_tup1 + test_tup2))\r\n\r\n# test\r\ntest_tup1 = (\"a\", \"b\", \"c\", \"d\")\r\ntest_tup2 = (\"a\", \"b\", \"c\", \"f\")\r\nprint(union_elements(test_tup1, test_tup2))\r\n# Output: ['a', 'b', 'c', 'd', 'f']\r\n\r\n\r","votes":null},{"text":"\r\n    return set(test_tup1) | set(test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    return (set(test_tup1) | set(test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    new_tup = test_tup1 + test_tup2\r\n    for i in test_tup1:\r\n        if i in test_tup2:\r\n            new_tup = new_tup.replace(i, \"\")\r\n    print(new_tup)\r\n\r\n\r","votes":null},{"text":"\r\n    return set(test_tup1 + test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    union = test_tup1 + test_tup2\r\n    return set(union)\r\n\r","votes":null},{"text":"\r\n    tup_union = test_tup1 + test_tup2\r\n    return set(tup_union)\r\n\r\n\r\n# Test Cases\r\nprint(union_elements((1, 2, 3), (2, 4, 5)))\r\n# output: {1, 2, 3, 4, 5}\r\nprint(union_elements(('a', 'b', 'c'), ('j', 'k', 'l')))\r\n# output: {'a', 'b', 'c', 'j', 'k', 'l'}\r\nprint(union_elements((1, 2, 3), ('a', 'b', 'c')))\r\n# output: {1, 2, 3, 'a', 'b', 'c'}\r\nprint(union_elements(('a', 'b', 'c'), (1, 2, 3)))\r\n# output: {1, 2, 3, 'a', 'b', 'c'}\r\nprint(union_elements((1, 2, 3), (2, 4, 5, 6)))\r\n# output: {1, 2, 3, 4, 5, 6}\r\nprint(union_elements((1, 2, 3), ('a', 'b', 'c', 'd')))\r\n# output: {1, 2, 3, 'a', 'b', 'c', 'd'}\r\nprint(union_elements((1, 2, 3, 4), (2, 4, 5, 6)))\r\n# output: {1, 2, 3, 4, 5, 6}\r\nprint(union_elements((1, 2, 3, 4), ('a', 'b', 'c', 'd')))\r\n# output: {1, 2, 3, 4, 'a', 'b', 'c', 'd'}\r\nprint(union_elements((1, 2, 3, 4), ()))\r\n","votes":null},{"text":"\r\n    return set(test_tup1) | set(test_tup2)\r\n\r","votes":null},{"text":"\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n    return union = test_tup1.union(test_tup2)\r\n\r\n\n# Test Cases\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 4, 6, 8","votes":null},{"text":"\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            test_tup1 = test_tup1 + (i,)\r\n    return test_tup1\r\n\r\n\r\n# Test cases\r\nprint(union_elements((1, 2, 3), (4, 5, 6)))\r\nprint(union_elements((1, 2, 3), (1, 2, 3)))\r\nprint(union_elements((1, 2, 3), (3, 4, 5)))\r\nprint(union_elements((1, 2, 3), ()))\r\nprint(union_elements((), ()))\r\nprint(union_elements((1, 2, 3), (3, 3, 3)))\r\nprint(union_elements((1, 2, 3, 3, 3, 3), ()))\r\nprint(union_elements((1, 2, 3, 3, 3, 3), (3, 3, 3)))\r\nprint(union_elements((1, 2, 3, 3, 3, 3), (3, 3, 3, 3, 3, 3)))\r\nprint(union_elements((1, 2, 3, 3, 3, 3), (3, 3, 3, 3, 3, 3, 3, 3)))\r\nprint(union_elements((\"a\", \"b\", \"c\"), (\"x\", \"y\", \"z\")))\r\nprint(union_elements((\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\")))\r\nprint(union_elements((\"a\", \"b\", \"c\"), (\"c\", \"d\", \"e\")))\r\nprint(union_elements((\"a\", \"b\", \"c\"), (\"\")))\r\nprint(union_elements((), (\"\")))\r\nprint(union_elements((\"a\", \"b\", \"c\"), (","votes":null},{"text":"\r\n    union = ()\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            union += (i,)\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            union += (i,)\r\n    return union\r\n\r\n\r\nprint(union_elements((2, 3, 4), (3, 4, 5)))\r\nprint(union_elements((1, 2, 2, 2), (2, 2, 3, 4)))\r\nprint(union_elements((1, 2, 3), (3, 4, 5)))\r\nprint(union_elements((1, 2, 2, 4), (2, 2, 3, 4)))\r\nprint(union_elements((1, 2, 3), (3, 4, 4)))\r\nprint(union_elements((1, 2, 3), (3, 4, 5, 6)))\r\nprint(union_elements((1, 2, 3), (3, 4)))\r\nprint(union_elements((1, 2, 3), (3","votes":null},{"text":"\r\n    return set(test_tup1) | set(test_tup2)\r\n\r\n\r\nprint(union_elements((1, 2, 3), (3, 4, 5)))\r\n\r\n\r","votes":null},{"text":"\r\n    return set(test_tup1 + test_tup2)\r\n\r\n\r\ntup1 = (1, 2, 3, 4, 5, 6, 7, 8)\r\ntup2 = (2, 3, 5, 6, 7, 8, 9, 10)\r\n\r\nprint(union_elements(tup1, tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    # print(test_tup1, test_tup2)\r\n    set1 = set(test_tup1)\r\n    set2 = set(test_tup2)\r\n    # print(set1, set2)\r\n    return set1.union(set2)\r\n\r\n\r","votes":null},{"text":"\r\n    union_elements = []\r\n    for i in test_tup1:\r\n        if i not in union_elements:\r\n            union_elements.append(i)\r\n    for i in test_tup2:\r\n        if i not in union_elements:\r\n            union_elements.append(i)\r\n    return tuple(union_elements)\r\n\r\n\r\n# Test cases\r\nprint(union_elements((1, 2, 3, 4, 5), (4, 5, 6, 7, 8)))\r\nprint(union_elements((1, 2, 3), (4, 2, 3, 4)))\r\nprint(union_elements((1, 2, 3, 4, 5), (5, 7, 8, 9, 10)))\r\nprint(union_elements((1, 2, 3, 4, 5), (1, 1, 1, 1, 1)))\r\nprint(union_elements((1, 2, 3, 4, 5), ()))\r\nprint(union_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\r\nprint(union_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 0)))\r\nprint(union_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1)))\r\nprint(union_elements((1, 2, 3, 4, 5), ()))\r\nprint(union_elements((1, 2, 3, 4, 5), (1)))\r\nprint(union_elements((1, 2, 3, 4, 5), (1","votes":null},{"text":"\r\n    new_list = []\r\n    for x in test_tup1:\r\n        if x not in test_tup2:\r\n            new_list.append(x)\r\n    for x in test_tup2:\r\n        if x not in test_tup1:\r\n            new_list.append(x)\r\n    return tuple(new_list)\r\n\r\n\r","votes":null},{"text":"\r\n    return set(test_tup1).union(test_tup2)\r\n\r\n\r\nprint(union_elements((1, 2, 3), (3, 4, 5)))\r\n# output: {1, 2, 3, 4, 5}\r\n\r\n\r","votes":null},{"text":"\r\n    return set(test_tup1).union(set(test_tup2))\r\n\r\n\r\nprint(union_elements((1, 2, 3), (3, 4, 5)))\r\n\r\n# 3\r\n\r\n\r","votes":null},{"text":"\r\n    new_tuple = ()\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] in test_tup2:\r\n            new_tuple = new_tuple + (test_tup1[i], )\r\n    return new_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    test_set1 = set(test_tup1)\r\n    test_set2 = set(test_tup2)\r\n    test_set = test_set1.union(test_set2)\r\n    return tuple(test_set)\r\n\r\n\r\nif __name__","votes":null},{"text":"\r\n    union = set(test_tup1).union(set(test_tup2))\r\n    return list(union)\r\n\r\n\r","votes":null},{"text":"\r\n    #return set(test_tup1).union(test_tup2)\r\n    return test_tup1 + test_tup2\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3, 3, 3, 3, 3, 3, 3)\r\n    test_tup2 = (2, 2, 3, 4, 5, 6, 7, 8, 9)\r\n    print(union_elements(test_tup1, test_tup2))\r\n    \r\n#Task 2: Write a function to find the intersection of elements of the given tuples.\r","votes":null},{"text":"\r\n    return set(test_tup1 + test_tup2)\r\n\r\n\r\n# Tests\r\ntest_tup1 = (\"A\", \"B\", \"C\")\r\ntest_tup2 = (\"B\", \"C\", \"D\")\r\nprint(union_elements(test_tup1, test_tup2))\r\n# {'A', 'B', 'C', 'D'}\r\n\r\ntest_tup1 = (\"A\", \"B\", \"C\")\r\ntest_tup2 = (\"B\", \"C\", \"D\")\r\nprint(union_elements(test_tup1, test_tup2))\r\n# {'A', 'B', 'C', 'D'}\r\n\r\ntest_tup1 = (\"A\", \"B\", \"C\")\r\ntest_tup2 = (\"B\", \"C\", \"D\")\r\nprint(union_elements(test_tup1, test_tup2))\r\n# {'A', 'B', 'C', 'D'}\r\n\r\ntest_tup1 = (\"A\", \"B\", \"C\")\r\ntest_tup2 = (\"B\", \"C\", \"D\")\r\nprint(union_elements(test_tup1, test_tup2))\r\n# {'A', 'B', 'C', 'D'}\r\n\r\ntest_tup1 = (\"A\", \"B\", \"C\")\r\ntest_tup2 = (\"B\", \"C\", \"D\")\r\nprint(union_elements(test_tup1, test_tup2))\r\n# {'A', 'B', 'C', 'D'}\r\n\r\ntest_tup1 = (\"A\", \"B\", \"C\")\r\ntest_tup2 = (\"B\", \"C\", \"D\")\r\nprint(union_elements(test_tup1, test_tup2))\r\n# {'A', 'B', 'C', 'D'}\r\n\r\ntest_tup1 = (\"A\", \"B\", \"C\")\r\ntest_","votes":null},{"text":"\r\n    result = []\r\n    for i in test_tup1:\r\n        if (i not in test_tup2) and (i not in result):\r\n            result.append(i)\r\n    for i in test_tup2:\r\n        if (i not in test_tup1) and (i not in result):\r\n            result.append(i)\r\n    return tuple(result)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create an empty list to store the union elements\r\n    union_list = []\r\n    \r\n    # Iterate through the first tuple\r\n    for i in test_tup1:\r\n        # Iterate through the second tuple\r\n        for j in test_tup2:\r\n            # Check if the current element of the first tuple is equal to the current element of the second tuple\r\n            if i == j:\r\n                # If the current element of the first tuple is equal to the current element of the second tuple, add the current element of the first tuple to the union list\r\n                union_list.append(i)\r\n\r\n    # Return the union list\r\n    return union_list\r\n\r\n\r\n# Call union_elements() with two tuples\r\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\ntest_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n\r\n# Define union_elements()\r","votes":null},{"text":"\r\n    union_elements_test = set(test_tup1) | set(test_tup2)\r\n    return union_elements_test\r\n\r\n\r","votes":null},{"text":"\r\n    test_union = set(test_tup1) | set(test_tup2)\r\n    return test_union\r\n\r\n\r","votes":null},{"text":"\r\n    return set(test_tup1) | set(test_tup2)\r\n\r\n\r\ntest_tup1 = ('a', 'b', 'c', 'd')\r\ntest_tup2 = ('c', 'd', 'e', 'f')\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n\r\n# 3. Find the intersection of elements of the given tuples.\r","votes":null},{"text":"\r\n    test_tup1_list = list(test_tup1)\r\n    test_tup2_list = list(test_tup2)\r\n    for element in test_tup2:\r\n        if element not in test_tup1:\r\n            test_tup1_list.append(element","votes":null},{"text":"\r\n    \r\n    return set(test_tup1).union(test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    # return a set of all elements from both tuples\r\n    return set(test_tup1 + test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    set_tup1 = set(test_tup1)\r\n    set_tup2 = set(test_tup2)\r\n    return (set_tup1.union(set_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # create a set of all elements of test_tup1\r\n    tup1_set = set(test_tup1)\r\n\r\n    # create a set of all elements of test_tup2\r\n    tup2_set = set(test_tup2)\r\n\r\n    # create a list of all elements of test_tup1 and test_tup2\r\n    combined_tup_list = []\r\n    combined_tup_list.extend(test_tup1)\r\n    combined_tup_list.extend(test_tup2)\r\n\r\n    # create a set of all elements of the combined_tup_list\r\n    combined_tup_set = set(combined_tup_list)\r\n\r\n    # create a list of all the elements of the combined_tup_set\r\n    combined_tup = list(combined_tup_set)\r\n\r\n    # return the combined_tup\r\n    return combined_tup\r\n\r\n\r","votes":null},{"text":"\r\n    #return set(test_tup1 + test_tup2) #returns a set\r\n    return list(set(test_tup1 + test_tup2)) #returns a list\r\n\r","votes":null},{"text":"\r\n    union_elements = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            union_elements.append(i)\r\n    return union_elements + test_tup2\r\n\r\n\r\nprint(union_elements((1, 2, 3, 4, 5), (4, 5, 6, 7, 8)))\r\n\r\n\r","votes":null},{"text":"\r\n    print(f\"The union of elements of {test_tup1} and {test_tup2} is: {set(test_tup1).union(set(test_tup2))}\")\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a set from each tuple, then union both sets\r\n    return set(test_tup1).union(set(test_tup2))\r\n\r","votes":null},{"text":"\r\n    union = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            union.append(i)\r\n\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            union.append(i)\r\n\r\n    return tuple(union)\r\n\r\n\r\nprint(union_elements((1, 2, 3), (2, 3, 4)))\r\nprint(union_elements((1, 2, 3), (2, 3, 4, 1, 5)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 3, 4, 1, 5)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 3, 4, 1, 5, 6)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 3, 4, 1, 5, 6)))\r\nprint(union_elements((1, 2, 3, 4, 5), (2, 3, 4, 1, 5, 6, 7, 8, 9, 10)))\r\n\r\n# Output:\r\n# (1, 2, 3, 4)\r\n# (1, 2, 3, 4, 5)\r\n# (1, 2, 3, 4, 5)\r\n# (1, 2, 3, 4, 5)\r\n# (1, 2, 3, 4, 5)\r\n# (1, 2, 3, 4, 5, 6)\r\n\r\n\r\n# Test Case 2\r\n# Given two dictionaries, create a new dictionary that has all the entries of the first dictionary and all the\r\n# entries of the second dictionary. If there are duplicate keys, the valu","votes":null},{"text":"\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n    return test_tup1.union(test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    return set(test_tup1).union(set(test_tup2))\r\n\r\n\r\nprint(union_elements((1, 2, 3), (3, 4, 5)))\r\n\r\n\r\n# 2. Write a function to check if the given tuple contains a given element.\r","votes":null},{"text":"\r\n\r\n    # initialize an empty tuple\r\n    union_tuple = ()\r\n\r\n    # iterate over the elements of the first tuple\r\n    for i in test_tup1:\r\n        # iterate over the elements of the second tuple\r\n        for j in test_tup2:\r\n            # if the element is in the second tuple\r\n            if i == j:\r\n                # add the element to the empty tuple\r\n                union_tuple += (i,)\r\n    # return the union tuple\r\n    return union_tuple\r\n\r\n\r\n# set up test case\r\ntest_tup1 = (1, 2, 5, 3, 1, 4)\r\ntest_tup2 = (2, 4, 6, 8, 5, 9)\r\n\r\n# print the output\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n\r\n# # TASK 2\r\n#","votes":null},{"text":"\r\n    return set(test_tup1 + test_tup2)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_tup1 = (1, 2, 3)\r\n    test_tup2 = (3, 4, 5)\r\n    print(union_elements(test_tup1, test_tup2))\r\n    test_tup1 = (\"a\", \"b\", \"c\")\r\n    test_tup2 = (\"d\", \"b\", \"a\")\r\n    print(union_elements(test_tup1, test_tup2))\r\n    test_tup1 = (1, 2, 3)\r\n    test_tup2 = (1, 3, 5)\r\n    print(union_elements(test_tup1, test_tup2))\r\n    test_tup1 = (\"a\", \"b\", \"c\")\r\n    test_tup2 = (\"d\", \"b\", \"c\")\r\n    print(union_elements(test_tup1, test_tup2))\r\n","votes":null},{"text":"\r\n    return set(test_tup1).union(test_tup2)\r\n\r\nprint(union_elements((1,2,3,4,5),(4,5,6,7,8)))\r\n\r","votes":null},{"text":"\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n    return test_tup1.union(test_tup2)\r\n\r\n\r\nprint(union_elements((1, 2, 3), (3, 4, 5)))\r\nprint(union_elements((1, 2, 3), (3, 4, 5)))\r\nprint(union_elements((1, 2, 3), (3, 4, 5)))\r\nprint(union_elements((1, 2, 3","votes":null},{"text":"\r\n    return set(test_tup1).union(test_tup2)\r\n\r\n\r","votes":null}],"time":{"count":28.0,"avg":150705.1264285714,"std":41788.6455139214,"cov":0.2772874852}}
{"id":562,"question":"def Find_Max_Length(lst):\r\n    \"\"\"Write a python function to find the maximum length of sublist.\"\"\"","answers":[{"text":"\r\n    Max_Length = max(map(len, lst))\r\n    return Max_Length\r\n\r\nList = [[1,2,3], [5,6,7], [5,6,7,8,9,10], [1,2,3]]\r\nprint(Find_Max_Length(List))\r\n\r","votes":94254.144},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\n\r\na = [[1, 2, 3], [4, 5, 6, 7], [8, 9]]\r\nprint(Find_Max_Length(a))\r\n\r\n# output:\r\n# 4\r\n\r\n\r","votes":98250.728},{"text":"\r\n    max_len = 0\r\n    for i in lst:\r\n        if len(i) > max_len:\r\n            max_len = len(i)\r\n    return max_len\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":99655.46},{"text":"\r\n    lst_len = len(lst)\r\n    max_len = 1\r\n    for i in range(lst_len):\r\n        for j in range(i, lst_len):\r\n            if len(lst[i]) > max_len:\r\n                max_len = len(lst[i])\r\n    return max_len\r\n\r\n\r","votes":106727.036},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\n\r","votes":120277.032},{"text":"\r\n    mx = 0\r\n    for i in lst:\r\n        if len(i) > mx:\r\n            mx = len(i)\r\n    return mx\r\n\r\nprint(Find_Max_Length([[1,2,3],[3,4,5,6],[7,8,9,10,11]]))\r\nprint(Find_Max_Length([[1,2,3],[3,4,5,6,7],[7,8,9,10,11,12,13]]))\r\n\r\n#2\r","votes":120745.408},{"text":"\r\n    a=[]\r\n    for i in range(0,len(lst)):\r\n        if lst[i]==[]:\r\n            a.append(0)\r\n        else:\r\n            a.append(len(lst[i]))\r\n    return max(a)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":121521.756},{"text":"\r\n    return max(map(len, lst))\r\n\r\n\r","votes":121661.632},{"text":"\r\n    \r\n    max_value = 0\r\n    for i in lst:\r\n        if len(i) > max_value:\r\n            max_value = len(i)\r\n    return max_value\r\n\r\n\r\n\r","votes":126745.396},{"text":"\r\n    \r\n    Max_Length = 0\r\n    \r\n    for i in lst:\r\n        if(len(i) > Max_Length):\r\n            Max_Length = len(i)\r\n    return Max_Length\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \r\n    lst = [[1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\r\n    \r\n    print(Find_Max_Length(lst))\r\n    \r\n    \"\"\"\r\n    Test Case:\r\n    Input:\r\n    [[1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\r\n    Output:\r\n    9\r\n    \"\"\"\r\n\r\n\"\"\"\r\nTest Case:\r\nInput:\r\n[[1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\r\nOutput:\r\n9\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(N)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n\r\n\r\n### Approach 2:\r\n\r","votes":127650.356},{"text":"\r\n    Max_List_Length=0\r\n    for sublist in lst:\r\n        if len(sublist)>Max_List_Length:\r\n            Max_List_Length=len(sublist)\r\n    return Max_List_Length\r\n\r\n\r\nprint(Find_Max_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":131312.028},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\nif __name__ == '__main__':\r\n    print(Find_Max_Length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10], [11, 12, 13, 14, 15]]))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":137568.204},{"text":"\r\n\r\n    Max_Length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if len(lst[i]) < len(lst[j]):\r\n                lst[i], lst[j] = lst[j], lst[i]\r\n            Max_Length = max(Max_Length, len(lst[i]))\r\n    return Max_Length\r\n\r\n\r\nprint(Find_Max_Length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8]]))\r\n\r\n# =================================================================================================================\r\n\r","votes":143944.008},{"text":"\r\n    max_len = 0\r\n    for sublist in lst:\r\n        if len(sublist) > max_len:\r\n            max_len = len(sublist)\r\n    return max_len\r\n\r\nprint(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [9, 8, 7, 6, 5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9]]))\r\n\r\n\r","votes":144099.62},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        max_len = max(max_len, len(lst[i]))\r\n    return max_len\r\n\r\n\r","votes":144144.064},{"text":"\r\n    \r\n    # initialize a variable, max_length, to track the longest sublist\r\n    max_length = 0\r\n    \r\n    # iterate through the list of lists\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    \r\n    # return the max_length\r\n    return max_length\r\n\r\n# print the result\r\nprint(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1]]))\r\n\r\n\r","votes":149807.092},{"text":"\r\n    \r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\nif __name__ == \"__main__\":\r\n    \r\n    lst = [[5, 6, 7, 8], [2, 4, 6, 8], [7, 8, 9, 10], [9, 10, 11, 12], [3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9]]\r\n    print(Find_Max_Length(lst))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":150475.956},{"text":"\r\n    lst = list(map(lambda i: len(i), lst))\r\n    return max(lst)\r\n\r\n\r","votes":155115.46},{"text":"\r\n    l=[]\r\n    for i in range(len(lst)):\r\n        if len(lst[i])>len(l):\r\n            l=lst[i]\r\n    return len(l)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":159645.624},{"text":"\r\n    max_length = 0\r\n    for x in lst:\r\n        if len(x) > max_length:\r\n            max_length = len(x)\r\n    return max_length\r\n\r\n\r","votes":160909.264},{"text":"\r\n    max_length = -1\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\n\r\nprint(Find_Max_Length([[1, 2, 3, 4], [5, 6], [7, 8], [9, 10, 11, 12, 13]]))\r\n\r\n\r","votes":168292.568},{"text":"\r\n\r\n    # code here\r\n    max_length = 0\r\n    for i in lst:\r\n        max_length = max(max_length, len(i))\r\n    return max_length\r\n\r\n\r\nprint(Find_Max_Length([[1, 2, 3], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]]))\r\n\r\n\r","votes":176348.18},{"text":"\r\n    # get the length of the list\r\n    n = len(lst)\r\n    # if the list has no element, return an error\r\n    if n == 0:\r\n        return \"The list is empty\"\r\n    # if the list is a single element list, return its length\r\n    if n == 1:\r\n        return n\r\n    # get the length of each sublist\r\n    sublist_length = [len(sublist) for sublist in lst]\r\n    # find the maximum length\r\n    max_length = max(sublist_length)\r\n    return max_length\r\n\r\n\r","votes":182886.328},{"text":"\r\n    \r\n    return max([len(sublist) for sublist in lst])\r\n\r\nprint(Find_Max_Length([[1,2,3], [1,2,3,4], [1,2,3,4,5]]))\r\n\r\n#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":184280.276},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list_ = [\r\n        [1, 2, 3],\r\n        [1, 2, 3, 4],\r\n        [1],\r\n        [1, 2],\r\n        [1, 2, 3, 4, 5],\r\n        [1, 2, 3, 4, 5, 6],\r\n    ]\r\n\r\n    max_length = Find_Max_Length(list_)\r\n    print(max_length)\r\n\r\n# Output:\r\n# 5\r\n\r\n\"\"\"\r\nTime Complexity: O(n), where n is the length of the list.\r\nSpace Complexity: O(1), since we are only calculating the length of each sublist and then finding the maximum length.\r\n\"\"\"\r\n\r\n\r","votes":192337.592},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\nprint(Find_Max_Length([[1,2,3,4], [5,6,7,8,9], [10,11,12]]))\r\n\r","votes":193876.896},{"text":"\r\n    if len(lst) == 0:\r\n        return 0\r\n    return max([len(sublist) for sublist in lst])\r\n\r\n\r\nprint(Find_Max_Length([[1, 2], [3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13]]))\r\n# Output: 5\r\n\r\n\r","votes":199660.296},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1,len(lst)):\r\n            if len(lst[i]) > len(lst[j]):\r\n                max_length = len(lst[i])\r\n            elif len(lst[i]) < len(lst[j]):\r\n                max_length = len(lst[j])\r\n            else:\r\n                max_length = len(lst[i])\r\n    return max_length\r\n\r\n\r\n### Testing the Find_Max_Length function:\r\n\r\n# lst = ['abc', 'de', 'f', 'gh', 'ijkl', 'mn', 'o', 'p', 'qrs', 't', 'uv', 'w', 'xy', 'z']\r\n# print(Find_Max_Length(lst))\r\n\r\n\r\n# lst = ['abc', 'de', 'f', 'gh', 'ijkl', 'mn', 'o', 'p', 'qrs', 't', 'uv', 'w', 'xy', 'z']\r\n# print(Find_Max_Length(lst))\r\n\r\n\r\n# lst = ['abc', 'de', 'f', 'gh', 'ijkl', 'mn', 'o', 'p', 'qrs', 't', 'uv', 'w', 'xy', 'z']\r\n# print(Find_Max_Length(lst))\r\n\r\n\r\n# lst = ['abc', 'de', 'f', 'gh', 'ijkl', 'mn', 'o', 'p', 'qrs', 't', 'uv', 'w', 'xy', 'z']\r\n# print(Find_Max_Length(lst))\r\n\r\n\r\n# lst = ['abc', 'de', 'f', 'gh', 'ijkl', 'mn', 'o', 'p', 'qrs', 't', 'uv', 'w', 'xy', 'z']\r\n# print(Find_Max_Length(lst))\r\n\r\n\r\n# lst = ['abc', 'd","votes":200379.824},{"text":"\r\n    \r\n    max_len = 0\r\n    for i in lst:\r\n        if len(i) > max_len:\r\n            max_len = len(i)\r\n    return max_len\r\n\r\n\r\nLst = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21]]\r\nprint(Find_Max_Length(Lst))\r\n\r\n\r","votes":264683.356},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\nif __name__ == \"__main__\":\r\n    print(Find_Max_Length([[1], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]]))\r\n\r\n\r\n\r\n\"\"\"\r\n\r\n[Program Output]\r\n\r\n>>> \r\n\r\n\"\"\"\r\n\r\n# =====================================================================================\r\n# =====================================================================================\r\n\r\n# 11. Write a program to find the maximum value in a list.\r\n\r","votes":356496.98},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        max_length = max(max_length, len(lst[i]))\r\n        \r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(Find_Max_Length([[1,2,3],[1,2],[1,2,3,4,5,6,7,8,9],[1,2],[1,2,3,4,5,6,7,8,9],[1,2],[1,2,3,4,5,6,7,8,9]]))\r\n    print(Find_Max_Length([[1,2,3],[1,2],[1,2,3,4,5,6,7,8,9],[1,2],[1,2,3,4,5,6,7,8,9],[1,2],[1,2,3,4,5,6,7,8,9]]))\r\n    print(Find_Max_Length([[1,2,3],[1,2],[1,2,3,4,5,6,7,8,9],[1,2],[1,2,3,4,5,6,7,8,9],[1,2],[1,2,3,4,5,6,7,8,9]]))\r\n    print(Find_Max_Length([[1,2,3],[1,2],[1,2,3,4,5,6,7,8,9],[1,2],[1,2,3,4,5,6,7,8,9],[1,2],[1,2,3,4,5,6,7,8,9]]))\r\n    print(Find_Max_Length([[1,2,3],[1,2],[1,2,3,4,5,6,7,8,9],[1,2],[1,2,3,4,5,6,7,8,9],[1,2],[1,2,3,4,5,6","votes":null},{"text":"\r\n    max_length = 0\r\n    for sublist in lst:\r\n        if len(sublist) > max_length:\r\n            max_length = len(sublist)\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(Find_Max_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7],","votes":null},{"text":"\r\n    length = len(lst)\r\n    max_length = 0\r\n    for i in range(0, length):\r\n        for j in range(i+1, length):\r\n            if len(lst[i:j+1]) > max_length:\r\n                max_length = len(lst[i:j+1])\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if lst[i][0] <= lst[j][0] and lst[i][1] >= lst[j][1]:\r\n                max_length = max(max_length, j - i)\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [(0, 3), (0, 5), (3, 7), (5, 7), (6, 10), (7, 10), (8, 11)]\r\n    print(Find_Max_Length(lst))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSample Input:\r\n[(0, 3), (0, 5), (3, 7), (5, 7), (6, 10), (7, 10), (8, 11)]\r\n\r\nSample Output:\r\n5\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSample Input:\r\n[(0, 3), (0, 5), (3, 7), (5, 7), (6, 10), (7, 10), (8, 11)]\r\n\r\nSample Output:\r\n5\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSample Input:\r\n[(0, 3), (0, 5), (3, 7), (5, 7), (6, 10), (7, 10), (8, 11)]\r\n\r\nSample Output:\r\n5\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in lst:\r\n        if len(i) > max_len:\r\n            max_len = len(i)\r\n    return max_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    l1 = [[1, 2], [1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8]]\r\n    l2 = [[1, 2], [1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]\r\n    l3 = [[1, 2], [1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4,","votes":null},{"text":"\r\n    max_len = 0\r\n    temp = 1\r\n\r\n    for i in range (len(lst)-1):\r\n        if (lst[i] == lst[i+1]):\r\n            temp += 1\r\n            if (temp > max_len):\r\n                max_len = temp\r\n        else:\r\n            temp = 1\r\n\r\n    return max_len\r\n\r\n# Program to test the above function\r\nlst = [1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6]\r\nprint('Length of Maximum Sublist in List:', Find_Max_Length(lst))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    return max(len(i) for i in lst)\r\n\r\n\r\n# Test Cases\r\nprint(\"Test 1: \", Find_Max_Length([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9]]))\r\nprint(\"Test 2: \", Find_Max_Length([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))\r\nprint(\"Test 3: \", Find_Max_Length([[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]))\r\nprint(\"Test 4: \", Find_Max_Length([[1, 2, 3], [1, 2, 3], [1, 2, 3, 4]]))\r\nprint(\"Test 5: \", Find_Max_Length([[1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]]))\r\nprint(\"Test 6: \", Find_Max_Length([[1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4]]))\r\nprint(\"Test 7: \", Find_Max_Length([[1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]]))\r\nprint(\"Test 8: \", Find_Max_Length([[1, 2, 3, 4], [1, 2, 3, 4]]))\r\nprint(\"Test 9: \", Find_Max_Length([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5]]))\r\nprint(","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        current_len = 0\r\n        j = i\r\n        while j < len(lst) and lst[j] != ']':\r\n            j += 1\r\n            current_len += 1\r\n        if current_len > max_len:\r\n            max_len = current_len\r\n    return max_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    lstvotes":null},{"text":"\r\n    max_len = 0\r\n    for i in lst:\r\n        if len(i) > max_len:\r\n            max_len = len(i)\r\n    return max_len\r\n    \r\nprint(Find_Max_Length([[1, 2, 3, 4, 5], [1, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [1, 2, 3, 4, 5","votes":null},{"text":"\r\n\r\n    max_length = 0\r\n    start = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if lst[i] == lst[j]:\r\n                max_length = max(max_length, j-i+1)\r\n                start = i\r\n    return max_length, lst[start:start+max_length]\r\n\r\n\r\nprint(Find_Max_Length([2, 1, 2, 3, 1, 4, 5, 2, 1, 2, 6, 7, 8, 9, 0, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\r\nprint(Find_Max_Length([2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]))\r\nprint(Find_Max_Length([2, 1, 2, 3, 1, 4, 5, 2, 1, 2, 6, 7, 8, 9, 0, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4]))\r\nprint(Find_Max_Length([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,","votes":null},{"text":"\r\n    max_length = 0\r\n    current_length = 0\r\n    for i in range(len(lst)):\r\n        if lst[i] == 1:\r\n            current_length += 1\r\n        else:\r\n            if current_length > max_length:\r\n                max_length = current_length\r\n            current_length = 0\r\n    return max_length\r\n\r\nprint(Find_Max_Length([1, 1, 0, 1, 1, 1]))\r\nprint(Find_Max_Length([1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,","votes":null},{"text":"\r\n    # create an empty list\r\n    max_list = []\r\n    # find the length of the list\r\n    length = len(lst)\r\n    # create a for loop to iterate through the list\r\n    for i in range(length):\r\n        # create an empty list\r\n        sublist = []\r\n        # create a for loop to iterate through the list\r\n        for j in range(i, length):\r\n            # append the list\r\n            sublist.append(lst[j])\r\n            # check if the list is equal to the maximum list\r\n            if len(sublist) == len(max_list):\r\n                # check if the list is greater than the maximum list\r\n                if sublist > max_list:\r\n                    # replace the maximum list with the sublist\r\n                    max_list = sublist\r\n            # check if the sublist is greater than the maximum list\r\n            elif sublist > max_list:\r\n                # replace the maximum list with the sublist\r\n                max_list = sublist\r\n    # return the maximum list\r\n    return max_list\r\n\r\n# create a list\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# print the output\r\nprint(Find_Max_Length(lst))\r\n\r\n# create a list\r\nlst = ['hello', 'python', 'how', 'are', 'you', 'doing']\r\n# print the output\r\nprint(Find_Max_Length(lst))\r\n\r\n# create a list\r\nlst = ['hello', 'python', 'how', 'are', 'you', 'doing', 'hello', 'python', 'how', 'are', 'you', 'doing', 'hello', 'python', 'how', 'are', 'you', 'doing']\r\n# print the output\r\nprint(Find_Max_Length(lst))\r\n\r\n# create a list\r\nlst = []\r\n# print the output\r\nprint(Find_Max_Length(lst)","votes":null},{"text":"\r\n    \r\n    # Find the length of the longest sublist\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        temp = 0\r\n        for j in range(i, len(lst)):\r\n            if (lst[j] != []):\r\n                temp += 1\r\n            else:\r\n                break\r\n        if (temp > max_length):\r\n            max_length = temp\r\n    print(\"The maximum length of sublist is:\", max_length)\r\n    \r\n    \r","votes":null},{"text":"\r\n    max_len = 0\r\n    max_len_index = -1\r\n    i = 0\r\n    while i < len(lst):\r\n        j = i + 1\r\n        while j < len(lst):\r\n            if len(lst[i]) <= len(lst[j]):\r\n                i = j\r\n            else:\r\n                j = len(lst)\r\n        if max_len == 0:\r\n            max_len = len(lst[i])\r\n            max_len_index = i\r\n        elif max_len < len(lst[i]):\r\n            max_len = len(lst[i])\r\n            max_len_index = i\r\n        i += 1\r\n    print(\"The index of the sublist with maximum length is:\", max_len_index)\r\n    print(\"The maximum length of the sublist is:\", max_len)\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [[1, 2, 3, 4], [1, 2, 3], [1, 2], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5],\r\n           [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\r\n    Find_Max_Length(lst)\r\n\r\n\r\n\"\"\"\r\n\r\nDSA_CODE_CHALLENGE_03.PY\r\n\r\n\r\nWrite a python function to find the maximum length of sublist.\r\n\r\nGiven a list of integers, \r\nthe function should return the index of the sublist which has the maximum length and the maximum length of the sublist.\r\n\r\nFor example:\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    max_length = 0\r\n    sublist = []\r\n    for i in range(len(lst)):\r\n        for j in range(i+1,len(lst)+1):\r\n            sublist.append(lst[i:j])\r\n            if len(sublist[-1]) > max_length:\r\n                max_length = len(sublist[-1])\r\n        sublist = []\r\n    return max_length\r\n    \r\n\r\nprint(Find_Max_Length([1,2,3,4,5,6,7,8,9]))\r\n\r","votes":null},{"text":"\r\n    max = lst[0]\r\n    for i in range(1, len(lst)):\r\n        if max < lst[i]:\r\n            max = lst[i]\r\n    return max\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        current_length = 0\r\n        for j in range(i, len(lst)):\r\n            current_length += 1\r\n            if lst[j] == 0:\r\n                break\r\n        if current_length > max_length:\r\n            max_length = current_length\r\n    return max_length\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    lst = [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0]\r\n    print(\"Maximum length of sublist: \", Find_Max_Length(lst))\r\n\r\n\r\n\"\"\"\r\nTest Case 1:\r\n    Input: [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0]\r\n    Output: 6\r\n    Explanation: The maximum length sublist is [1, 1, 1, 1, 1]\r\n\r\nTest Case 2:\r\n    Input: [0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0]\r\n    Output: 7\r\n    Explanation: The maximum length sublist is [1, 1, 1, 1, 1, 1, 1]\r\n\r\nTest Case 3:\r\n    Input: [0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1]\r\n    Output: 8\r\n    Explanation","votes":null},{"text":"\r\n\r\n\r\n    max_length = 0\r\n    for i in lst:\r\n        if type(i) == list:\r\n            if len(i) > max_length:\r\n                max_length = len(i)\r\n        elif type(i) == int:\r\n            continue\r\n        else:\r\n            print(\"The list contains non-list, non-integer item.\")\r\n            break\r\n    return max_length\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    lst = [1, 2, [3, 4, 5], [6, 7, 8, 9]]\r\n    print(f\"The maximum length of sublist in {lst} is {Find_Max_Length(lst)}.\")\r\n\r\n    lst = [1, 2, [3, 4, 5, [6, 7, [8, 9, 10]]]]\r\n    print(f\"The maximum length of sublist in {lst} is {Find_Max_Length(lst)}.\")\r\n\r\n    lst = [1, 2, [3, 4, 5, [6, 7, [8, 9, 10, 11, 12, [13, 14, 15]]]]]\r\n    print(f\"The maximum length of sublist in {lst} is {Find_Max_Length(lst)}.\")\r\n\r\n    lst = [1, 2, [3, 4, 5, [6, 7, [8, 9, 10, 11, 12, [13, 14, 15, [16, 17, 18]]]]]]\r\n    print(f\"The maximum length of sublist in {lst} is {Find_Max_Length(lst)}.\")\r\n\r\n    lst = [1, 2, [3, 4, 5, [6, 7, [8, 9, 10, 11, 12, [13","votes":null},{"text":"\r\n    max_list = []\r\n    max_len = 0\r\n    for sub in lst:\r\n        if len(sub) > max_len:\r\n            max_len = len(sub)\r\n            max_list = sub\r\n    return max_list\r\n\r\n\r\nprint(Find_Max_Length([[1, 2, 3], [2, 4], [5], [7, 8, 9], [2, 4, 5, 6]]))\r\n\r\n\r","votes":null},{"text":"\r\n    l = []\r\n    for i in lst:\r\n        if type(i) == list:\r\n            l.append(len(i))\r\n    return max(l)\r\n\r\n\r\nprint(Find_Max_Length([[1, 2, 3], [1, 2], [1, 2, 3, 4], [1, 2, 3, 4, 5","votes":null},{"text":"\r\n    Max_Length = 0\r\n    current_length = 0\r\n    for i in lst:\r\n        if type(i) == list:\r\n            current_length += 1\r\n            if current_length > Max_Length:\r\n                Max_Length = current_length\r\n        else:\r\n            current_length = 0\r\n    return Max_Length\r\n\r\n\r","votes":null},{"text":"\r\n    length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if lst[i] <= lst[j] and len(lst[i:j]) > length:\r\n                length = len(lst[i:j])\r\n                sub = lst[i:j]\r\n    print(sub)\r\n\r\nFind_Max_Length([1, 2, 3, 4, 5, 10, 9, 12, 13, 14, 15])\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n\r\n    for i in range(len(lst)):\r\n        j = 0\r\n        while j < len(lst[i]):\r\n            j += 1\r\n            if j == len(lst[i]):\r\n                if j > max_len:\r\n                    max_len = j\r\n\r\n    return max_len\r\n\r\n\r\nprint(Find_Max_Length([[1, 2], [3, 4, 5], [6, 7, 8, 9, 10], [11, 12]]))\r\n# 5\r\n\r\nprint(Find_Max_Length([[1, 2], [3], [4, 5, 6], [7, 8], [9, 10, 11, 12]]))\r\n# 4\r\n\r\nprint(Find_Max_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\r\n# 3\r\n\r\nprint(Find_Max_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]))\r\n# 4\r\n\r\nprint(Find_Max_Length([[1], [2], [3], [4], [5], [6], [7], [8], [9]]))\r\n# 1\r\n\r\nprint(Find_Max_Length([[1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12], [13, 14, 15]]))\r\n# 9\r\n\r\nprint(Find_Max_Length([[1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11, 12]]))\r\n# 5\r\n\r\nprint(Find_Max_Length([[1,","votes":null},{"text":"\r\n    max = 0\r\n    for i in lst:\r\n        if(len(i) > max):\r\n            max = len(i)\r\n    return max\r\n\r\n\r\nprint(Find_Max_Length([[1, 2], [1, 2, 3, 4], [1, ","votes":null},{"text":"\r\n    print(\"The Maximum length of sublist is: \", max(map(len, lst)))\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    max_sublst = []\r\n    for i in range(len(lst)):\r\n        sublst = []\r\n        for j in range(i, len(lst)):\r\n            sublst.append(lst[j])\r\n            if len(sublst) > max_length:\r\n                max_length = len(sublst)\r\n                max_sublst = sublst\r\n    return max_sublst\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [1, 2, 1, 3, 4, 1, 3, 5, 7, 9, 9, 12, 1, 2, 4, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\r\n    print(Find_Max_Length(lst))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(len(lst)):\r\n            if lst[i] == lst[j]:\r\n                length = j - i + 1\r\n                if length > max_length:\r\n                    max_length = length\r\n    return max_length\r\n\r\n\r\nprint(Find_Max_Length([1, 2, 3, 2, 1, 5, 2, 1]))\r\nprint(Find_Max_Length([1, 2, 3, 2, 1, 5, 2, 1, 2, 3, 2, 1, 5, 2, 1]))\r\nprint(Find_Max_Length([1, 2, 3, 2, 1, 5, 2, 1, 2, 3, 2, 1, 5, 2, 1, 2, 3, 2, 1, 5, 2, 1]))\r\nprint(Find_Max_Length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\nprint(Find_Max_Length([1, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\nprint(Find_Max_Length([1, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\nprint(Find_Max_Length([1,","votes":null},{"text":"\r\n    return list(map(len, max(lst, key=lambda x: len(x))))\r\nprint(Find_Max_Length([[1, 2], [1, 2, 3, 4], [5, 6, 7], [8, 9]]))\r\n\r\n\r\n# 3. Write a Python function to find the first non-repeating character in a string.\r","votes":null},{"text":"\r\n    max_length = 0\r\n    sub_list_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            sub_list_length += 1\r\n            if lst[i] == lst[j]:\r\n                max_length = max(max_length, sub_list_length)\r\n            else:\r\n                sub_list_length = 0\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        j = i\r\n        while j < len(lst) and lst[j] == lst[i]:\r\n            j += 1\r\n        if max_length < j - i:\r\n            max_length = j - i\r\n    return max_length\r\n\r\n\r\nprint(\"Find the maximum length of sublist\")\r\nlst = []\r\nwhile True:\r\n    ele = int(input(\"Enter element: \"))\r\n    lst.append(ele)\r\n    if ele == 0:\r\n        break\r\nprint(\"Entered List: \", lst)\r\nprint(\"Maximum Length of Sublist: \", Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    count = 0\r\n    for i in lst:\r\n        if isinstance(i, list):\r\n            for j in i:\r\n                if isinstance(j, list):\r\n                    count += 1\r\n                    for k in j:\r\n                        if isinstance(k, list):\r\n                            count += 1\r\n                            for l in k:\r\n                                if isinstance(l, list):\r\n                                    count += 1\r\n                                    for m in l:\r\n                                        if isinstance(m, list):\r\n                                            count += 1\r\n                                            for n in m:\r\n                                                if isinstance(n, list):\r\n                                                    count += 1\r\n                                                    for o in n:\r\n                                                        if isinstance(o, list):\r\n                                                            count += 1\r\n                                                            for p in o:\r\n                                                                if isinstance(p, list):\r\n                                                                    count += 1\r\n                                                                    for q in p:\r\n                                                                        if isinstance(q, list):\r\n                                                                            count += 1\r\n                                                                            for r in q:\r\n                                                                                if isinstance(r, list):\r\n                                                                                    count += 1\r\n                                                                                    for s in r:\r\n                                                                                        if isinstance(s, list):\r\n                                                                                            count += 1\r\n                                                                                            for t in s:\r\n                                                                                                if isinstance(t, list):\r\n                                                                                                    count += 1\r\n                                                                                                    for u in t:\r\n                                                                                                        if isinstance(u, list):\r\n                                                                                                            count += 1\r\n                                                                                                            for v in u:\r\n                                                                                                              ","votes":null},{"text":"\r\n    count = 0\r\n    max_length = 0\r\n    \r\n    for i in lst:\r\n        count += 1\r\n        if count > max_length:\r\n            max_length = count\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    Max = 0\r\n    for i in range(len(lst)):\r\n        Length = 0\r\n        for j in range(i, len(lst)):\r\n            Length += 1\r\n            if lst[i] == lst[j]:\r\n                break\r\n            if Length > Max:\r\n                Max = Length\r\n    return Max\r\n\r\n\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 4, 3, 2, 1]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]))\r\nprint(Find_Max_Length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1","votes":null},{"text":"\r\n    # Code goes here\r\n    max_length = 0\r\n    for sublist in lst:\r\n        if len(sublist) > max_length:\r\n            max_length = len(sublist)\r\n    return max_length\r\n\r\n# Sample Test case\r\nprint(Find_Max_Length([[1, 2, 3], [4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15]]))\r\nprint(Find_Max_Length([[1, 2, 3], [4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15], [16, 17, 18]]))\r\nprint(Find_Max_Length([[1, 2, 3], [4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15], [16, 17, 18], [19, 20, 21, 22, 23, 24, 25]]))\r\nprint(Find_Max_Length([[1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]))\r\nprint(Find_Max_Length([[1, 2], [4, 5, 6, 7], [9, 10, 11, 12, 13, 14, 15], [16, 17, 18], [19, 20, 21, 22, 23, 24, 25]]))\r\nprint(Find_Max_Length([[1, 2, 3], [4,","votes":null},{"text":"\r\n    \r\n    max_length = 0\r\n    \r\n    for sublist in lst:\r\n        if len(sublist) > max_length:\r\n            max_length = len(sublist)\r\n    \r\n    return max_length\r\n\r\n\r\n# Test Code\r\n\r\nlst = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\r\nprint(Find_Max_Length(lst))\r\n\r\nlst = [[1], [2, 3, 4], [5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]\r\nprint(Find_Max_Length(lst))\r\n\r\nlst = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]\r\nprint(Find_Max_Length(lst))\r\n\r\nlst = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\r\nprint(Find_Max_Length(lst))\r\n\r\nlst = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, ","votes":null},{"text":"\r\n    print('List: ', lst)\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if lst[i] == lst[j]:\r\n                max_length = max(max_length, j - i)\r\n            else:\r\n                break\r\n    return max_length\r\n\r\n\r\n# Testing\r\nprint(Find_Max_Length([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]))\r\nprint(Find_Max_Length([1, 2, 1, 1, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,","votes":null},{"text":"\r\n    maximum_length_so_far = 0\r\n    maximum_length = 0\r\n    for i in range(len(lst)):\r\n        length = 0\r\n        while(i < len(lst) and lst[i] != 0):\r\n            length += 1\r\n            i += 1\r\n        if length > maximum_length_so_far:\r\n            maximum_length_so_far = length\r\n            maximum_length = i - length\r\n    return maximum_length_so_far\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if lst[i] == lst[j]:\r\n                sublist = lst[i:j+1]\r\n                if len(sublist) > max_length:\r\n                    max_length = len(sublist)\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(Find_Max_Length([1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 8]))\r\n    print(Find_Max_Length([1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9]))\r\n    print(Find_Max_Length([1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6,","votes":null},{"text":"\r\n    if not lst:\r\n        return 0\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        curr_length = 0\r\n        for j in range(i, len(lst)):\r\n            if lst[j] == 1:\r\n                curr_length += 1\r\n            else:\r\n                break\r\n        max_length = max(max_length, curr_length)\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            length = j - i\r\n            if length > max_length:\r\n                max_length = length\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    start_index = 0\r\n    end_index = 0\r\n    for i in range(len(lst)):\r\n        if lst[i] == 1:\r\n            end_index += 1\r\n            if end_index - start_index > max_length:\r\n                max_length = end_index - start_index\r\n        else:\r\n            end_index = 0\r\n            start_index = i + 1\r\n    return max_length\r\n\r\n\r\nprint(Find_Max_Length([1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0]))\r\n\r\n# Output: 5\r\n\r\n# Explanation: The longest sublist starting from index 1 with value 1 is [1, 1, 1, 1, 1]\r\n\r\n\r\n# Method 2\r\n\r","votes":null},{"text":"\r\n    L = []\r\n    for i in range(len(lst)):\r\n        for j in range(i+1,len(lst)):\r\n            L.append(lst[i:j])\r\n    return max(L,key=len)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Find the maximum length of sublist:\")\r\n    print(Find_Max_Length([2, 3, 6, 8, 9, 1, 3, 2, 4, 7, 6, 8, 1, 9","votes":null},{"text":"\r\n    \r\n    # max_len = 0\r\n    # for i in range(len(lst)):\r\n    #     for j in range(i, len(lst)):\r\n    #         if len(lst[i:j+1]) > max_len:\r\n    #             max_len = len(lst[i:j+1])\r\n\r\n    # return max_len\r\n\r\n    max_len = 0\r\n    start = 0\r\n    end = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if lst[i] == lst[j] and (j-i+1) > max_len:\r\n                max_len = j-i+1\r\n                start = i\r\n                end = j\r\n    return [lst[start:end+1], max_len]\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if lst[i][1] <= lst[j][0]:\r\n                length = j - i + 1\r\n                if max_length < length:\r\n                    max_length = length\r\n    return max_length\r\n\r\n\r\nlst = [[1, 3], [2, 6], [8, 10], [15, 18], [16, 20], [21, 25]]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    Max_Length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if len(lst[i][j]) > Max_Length:\r\n                Max_Length = len(lst[i][j])\r\n                print(Max_Length)\r","votes":null},{"text":"\r\n\r\n    maximum = 0\r\n    for i in range(len(lst)):\r\n        current_sum = 0\r\n        for j in range(i, len(lst)):\r\n            current_sum = current_sum + lst[j]\r\n            if current_sum > maximum:\r\n                maximum = current_sum\r\n\r\n    return maximum\r\n\r\n\r\nprint(Find_Max_Length([1, 2, -3, 6, -1]))\r\nprint(Find_Max_Length([1, 2, -1, 6, -1]))\r\nprint(Find_Max_Length([1, 2, -1, 6, -1, 1, 2, 3]))\r\nprint(Find_Max_Length([1, 2, -1, 6, -1, 1, 2, 3, -10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]))\r\nprint(Find_Max_Length([1, 2, -1, 6, -1, 1, 2, 3, -10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 1, 2, -1, 6, -1, 1, 2, 3, -10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]))\r\nprint(Find_Max_Length([1, 2, -1, 6, -1, 1, 2, 3","votes":null},{"text":"\r\n\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if lst[i:j] not in lst:\r\n                max_len = max(max_len, j-i)\r\n    return max_len\r\n\r\n\r\nlst = [1, 2, 3, 4, 5","votes":null},{"text":"\r\n    max_length = 0\r\n    temp_length = 0\r\n    for i in range(len(lst)):\r\n        if(lst[i] == \"[\"):\r\n            temp_length += 1\r\n        elif(lst[i] == \"]\"):\r\n            temp_length -= 1\r\n        max_length = max(max_length, temp_length)\r\n    return max_length\r\n\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length([\"[\"]))\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length([\"[\", \"]\" ]))\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length([\"[\", \"]\", \"[\", \"]\" ]))\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length([\"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\" ]))\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length([\"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\" ]))\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length([\"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\" ]))\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length([\"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\" ]))\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length([\"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\" ]))\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length([\"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\", \"[\", \"]\"","votes":null},{"text":"\r\n    maximum = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if len(lst[i:j+1]) > maximum:\r\n                maximum = len(lst[i:j+1])\r\n    return maximum\r\n\r\n\r\nprint(\"Enter the list items separated by a space: \")\r\nlst = list(map(int, input().strip().split()))\r\nprint(\"Maximum length of sublist","votes":null},{"text":"\r\n    if lst == []: return 0\r\n    max_length = 1\r\n    for i in range(len(lst)):\r\n        curr_length = 1\r\n        for j in range(i+1,len(lst)):\r\n            if lst[i] == lst[j]:\r\n                curr_length += 1\r\n        if curr_length > max_length: max_length = curr_length\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    print(\"Length of the longest sublist: \" + str(Find_Max_Length(lst)))\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(\"Length of the longest sublist: \" + str(Find_Max_Length(lst)))\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26","votes":null},{"text":"\r\n    \r\n    # input\r\n    lst = [\r\n        [1, 2, 3],\r\n        [1, 2],\r\n        [1, 2, 3, 4],\r\n        [1, 2, 3, 4, 5],\r\n        [1, 2, 3, 4, 5, 6],\r\n        [1, 2, 3, 4, 5, 6, 7]\r\n    ]\r\n    \r\n    # output\r\n    print('Maximum length of sublist is : ', Find_Max_Length(lst))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if len(lst[i:j+1]) > max_length:\r\n                max_length = len(lst[i:j+1])\r\n    return max_length\r\n\r\n\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\r\nprint(Find_Max_Length([1, ","votes":null},{"text":"\r\n    max_length = 0\r\n    sublist = []\r\n    for item in lst:\r\n        sublist.append(item)\r\n        if len(sublist) > max_length:\r\n            max_length = len(sublist)\r\n        if item == 0:\r\n            sublist = []\r\n    return max_length\r\n\r\nprint(Find_Max_Length([0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0]))\r\nprint(Find_Max_Length([0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0]))\r\nprint(Find_Max_Length([0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0]))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    max_count = 0\r\n    for i in lst:\r\n        if i == 0:\r\n            count = 0\r\n        else:\r\n            count += 1\r\n        if count > max_count:\r\n            max_count = count\r\n    \r\n    return max_count\r\n\r\n\r","votes":null},{"text":"\r\n    maxi = []\r\n    for i in range(0, len(lst)):\r\n        for j in range(i, len(lst)):\r\n            maxi.append(lst[i:j])\r\n    maxi_len = []\r\n    for i in maxi:\r\n        maxi_len.append(len(i))\r\n    maxi_len.sort(reverse=True)\r\n    return maxi_len[0]\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    cur_length = 0\r\n    for i in lst:\r\n        if i == '[':\r\n            cur_length += 1\r\n        else:\r\n            cur_length -= 1\r\n        if cur_length > max_length:\r\n            max_length = cur_length\r\n    return max_length\r\n\r\nif __name__ == \"__main__\":\r\n    lst = [\r\n        '[', '[', '[', '[',\r\n        ']', ']', ']', ']'\r\n    ]\r\n    print(Find_Max_Length(lst))\r\n\r\n    lst = [\r\n        '[', '[', '[', '[',\r\n        ']', '[', ']', ']'\r\n    ]\r\n    print(Find_Max_Length(lst))\r\n\r\n    lst = [\r\n        '[', '[', '[', '[',\r\n        ']', '[', ']', ']',\r\n        '[', '[', ']', ']'\r\n    ]\r\n    print(Find_Max_Length(lst))\r\n\r\n    lst = [\r\n        '[', '[', '[', '[',\r\n        ']', '[', ']', ']',\r\n        '[', '[', ']', ']',\r\n        '[', '[', ']', ']'\r\n    ]\r\n    print(Find_Max_Length(lst))\r\n\r\n    lst = [\r\n        '[', '[', '[', '[',\r\n        ']', '[', ']', ']',\r\n        '[', '[', ']', ']',\r\n        '[', '[', ']', ']',\r\n        '[', '[', ']', ']'\r\n    ]\r\n    print(Find_Max_Length(lst))\r\n\r\n    lst = [\r\n        '[', '[', '[', '[',\r\n        ']', '['","votes":null},{"text":"\r\n    length=len(lst)\r\n    for i in range(length):\r\n        if length-i>max(lst[i:]) and max(lst[i:])!=0:\r\n            return max(lst[i:])\r\n        else:\r\n            return max(lst[0:])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(Find_Max_Length([1, 2, 3, 4, 5]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8,","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        count = 0\r\n        for j in range(i, len(lst)):\r\n            if lst[i] ==","votes":null},{"text":"\r\n    \r\n    l = []\r\n    for i in range(0, len(lst)):\r\n        l.append(len(lst[i]))\r\n    \r\n    return max(l)\r\n\r\nif __name__ == \"__main__\":\r\n    lst = [[1, 2, 3, 4], [1, 2, 3], [1, 2], [1], [1, 1, 1","votes":null},{"text":"\r\n    # 1 - Loop through the list\r\n    # 2 - Count the length of each sublist\r\n    # 3 - Compare the sublists lengths\r\n    # 4 - Return the maximum length\r\n    pass\r\n\r\n\r\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15, 16, 17], [18, 19, 20], [21], [22, 23, 24, 25, 26], [27, 28, 29, 30, 31, 32]]\r\n\r","votes":null},{"text":"\r\n    length = 0\r\n    max_length = 0\r\n    for i in lst:\r\n        if isinstance(i, list):\r\n            length += 1\r\n            if length > max_length:\r\n                max_length = length\r\n        else:\r\n            length = 0\r\n    return max_length\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    lst = [1, 2, 3, [1, 2, 3, 4, [1, 2, 3, 4, [1, 2, 3]]], 5, 6, [1, 2, 3, 4, 5, 6, 7, 8, 9]]\r\n    print(\"Maximum length of sublist is:\", Find_Max_Length(lst))\r\n\r\n\r\n\"\"\"\r\nTest Case:\r\n    Input:\r\n        Enter space seprated elements of the list: 1 2 3 [1 2 3 4 [1 2 3 4 [1 2 3]]] 5 6 [1 2 3 4 5 6 7 8 9]\r\n    Output:\r\n        Maximum length of sublist is: 5\r\n\r\n\r\nTime Complexity:\r\n    Worst Case Time Complexity: O(n^2) where n is the size of list.\r\n    Best Case Time Complexity: O(n) where n is the size of list.\r\n\r\n\r\nSpace Complexity:\r\n    Worst Case Space Complexity: O(1) where 1 is the space for variable.\r\n    Best Case Space Complexity: O(1) where 1 is the space for variable.\r\n\r\n\r\n","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if len(lst[i:j+1]) > max_len:\r\n                max_len = len(lst[i:j+1])\r\n    return max_len\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in lst:\r\n        if max_len < len(i):\r\n            max_len = len(i)\r\n    return max_len\r\n\r\n\r\nlst = [\r\n    [1],\r\n    [1, 2],\r\n    [1, 2, 3],\r\n    [1, 2, 3, 4],\r\n    [1, 2, 3, 4, 5],\r\n    [1, 2, 3, 4, 5, 6],\r\n    [1, 2, 3, 4, 5, 6, 7],\r\n    [1, 2, 3, 4, 5, 6, 7, 8],\r\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\r\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\r\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\r\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\r\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\r\n  ","votes":null},{"text":"\r\n    \r\n    Max_Length = 0\r\n    Current_Length = 1\r\n    \r\n    for i in range(len(lst)-1):\r\n        if lst[i] == lst[i+1]:\r\n            Current_Length += 1\r\n        else:\r\n            Current_Length = 1\r\n        if Current_Length > Max_Length:\r\n            Max_Length = Current_Length\r\n    return Max_Length\r\n\r\nif __name__ == '__main__':\r\n    lst = [1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if lst[i] == lst[j]:\r\n                if j - i + 1 > max_length:\r\n                    max_length = j - i + 1\r\n    return max_length\r\n\r\n\r\n\r\n\r\n\r\nprint(\"The maximum length of sublist is: \", Find_Max_Length([1, 1, 2, 3, 1, 4, 1, 1, 1]))\r\n\r\n\r\n# Another Way to solve the problem\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1,len(lst)):\r\n            if len(lst[i:j]) > max_length:\r\n                max_length = len(lst[i:j])\r\n    return max_length\r\n\r\n# Testing\r\n\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, ","votes":null},{"text":"\r\n    Max_Length = 0\r\n    for i in range(len(lst)):\r\n        k = 0\r\n        for j in range(i, len(lst)):\r\n            if lst[i] == lst[j]:\r\n                k += 1\r\n            else:\r\n                break\r\n        if Max_Length < k:\r\n            Max_Length = k\r\n    return Max_Length\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    lst = [1, 2, 1, 3, 3, 1, 2, 4, 4, 1]\r\n    print(Find_Max_Length(lst))  # 3\r\n\r\n\r\n# Given a list of numbers, return whether any two sums to k.\r\n# For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.\r\n\r","votes":null}],"time":{"count":30.0,"avg":157791.7521333333,"std":52984.6289599307,"cov":0.3357883301}}
{"id":563,"question":"def extract_values(text):\r\n    \"\"\"Write a function to extract values between quotation marks of a string.\"\"\"","answers":[{"text":"\r\n    import re\r\n\r\n    matches = re.findall(r'\"(.*?)\"', text)\r\n\r\n    return matches\r\n\r\n\r","votes":70728.688},{"text":"\r\n    # Your code goes here\r\n    \r\n    return text.split('\"')[1::2]\r\n\r\n\r","votes":85487.332},{"text":"\r\n    import re\r\n    values = re.findall(r'\"([^\"]*)\"', text)\r\n    return values\r\n\r\n\r","votes":89645.5},{"text":"\r\n    # print(text)\r\n    start = 0\r\n    end = 0\r\n    values = []\r\n    for i in range(0, len(text)):\r\n        if text[i] == '\"':\r\n            if start == 0:\r\n                start = i + 1\r\n            else:\r\n                end = i\r\n                values.append(text[start:end])\r\n                start = 0\r\n    return values\r\n\r\n\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\", \"!\"'))\r\n# print(extract_values('\"Hello\", \"World\"","votes":105716.024},{"text":"\r\n    values = []\r\n    \r\n    text = text.split('\"')\r\n    for i in range(len(text)):\r\n        if i % 2 == 0:\r\n            continue\r\n        else:\r\n            values.append(text[i])\r\n    return values\r\n\r\n\r","votes":108666.912},{"text":"\r\n    values = []\r\n    start = 0\r\n    \r\n    for index, char in enumerate(text):\r\n        if char == '\"':\r\n            if start:\r\n                values.append(text[start:index])\r\n                start = 0\r\n            else:\r\n                start = index + 1\r\n    return values\r\n\r","votes":109788.052},{"text":"\r\n    result = []\r\n    index = 0\r\n    while index < len(text):\r\n        if text[index] == '\"':\r\n            index += 1\r\n            start = index\r\n            while index < len(text) and text[index] != '\"':\r\n                index += 1\r\n            result.append(text[start:index])\r\n        index += 1\r\n    return result\r\n\r\n\r","votes":112573.832},{"text":"\r\n    values = []\r\n    is_in_quote = False\r\n    temp_value = \"\"\r\n    for char in text:\r\n        if char == \"\\\"\":\r\n            if is_in_quote:\r\n                values.append(temp_value)\r\n                temp_value = \"\"\r\n            is_in_quote = not is_in_quote\r\n        elif is_in_quote:\r\n            temp_value += char\r\n    return values\r\n\r\n\r\ntext = \"This is a \\\"test\\\".\"\r\nprint(extract_values(text))\r\n#","votes":125685.176},{"text":"\r\n    result = []\r\n    start = 0\r\n    while start < len(text):\r\n        start = text.find('\"', start)\r\n        if start == -1:\r\n            break\r\n        end = text.find('\"', start + 1)\r\n        if end == -1:\r\n            break\r\n        result.append(text[start + 1:end])\r\n        start = end + 1\r\n    return result\r\n\r\n\r","votes":129598.052},{"text":"\r\n    values = []\r\n    i = 0\r\n    while i < len(text):\r\n        if text[i] == '\\\"':\r\n            j = i + 1\r\n            while j < len(text) and text[j] != '\\\"':\r\n                j += 1\r\n            values.append(text[i + 1:j])\r\n            i = j + 1\r\n        else:\r\n            i += 1\r\n    return values\r\n\r\n\r","votes":130062.972},{"text":"\r\n    \r\n    # Fill in the function body.\r\n    result = []\r\n    start_index = 0\r\n    while start_index < len(text):\r\n        start_index = text.find('\"', start_index)\r\n        if start_index == -1:\r\n            break\r\n        end_index = text.find('\"', start_index + 1)\r\n        if end_index == -1:\r\n            break\r\n        result.append(text[start_index + 1: end_index])\r\n        start_index = end_index + 1\r\n    \r\n    return result\r\n\r\n\r\nprint(extract_values('\"The quick brown fox jumps over the lazy dog\"'))\r\n# expected output: ['The quick brown fox jumps over the lazy dog']\r\n\r\nprint(extract_values('\"The quick brown fox jumps over the lazy dog\" \"The fox ate the dog\"'))\r\n# expected output: ['The quick brown fox jumps over the lazy dog', 'The fox ate the dog']\r\n\r\nprint(extract_values('\"The quick brown fox jumps over the lazy dog\" \"The fox ate the dog\" \"The dog ate my homework\"'))\r\n# expected output: ['The quick brown fox jumps over the lazy dog', 'The fox ate the dog', 'The dog ate my homework']\r\n\r\nprint(extract_values('\"The quick brown fox jumps over the lazy dog\" \"The fox ate the dog\" \"The dog ate my homework\" '))\r\n# expected output: ['The quick brown fox jumps over the lazy dog', 'The fox ate the dog', 'The dog ate my homework']\r\n\r\nprint(extract_values('\"The quick brown fox jumps over the lazy dog\" \"The fox ate the dog\" \"The dog ate my homework\" \"The cat ate my food\"'))\r\n# expected output: ['The quick brown fox jumps over the lazy dog', 'The fox ","votes":130661.056},{"text":"\r\n    values = []\r\n    start = -1\r\n    for i, char in enumerate(text):\r\n        if char == '\"':\r\n            if start == -1:\r\n                start = i + 1\r\n            else:\r\n                values.append(text[start:i])\r\n                start = -1\r\n    return values\r\n\r\n\r\nprint(extract_values('\"The quick brown fox\"'))\r\nprint(extract_values('\"The quick brown fox\" is \"very quick!\"'))\r\nprint(extract_values('\"The quick brown fox\" is \"very quick!\" and \"The quick brown fox\"'))\r\nprint(extract_values('\"The quick brown fox\" is \"very quick!\" and \"The quick brown fox\"'))\r\nprint(extract_values('\"The quick brown fox\" is \"very quick!\" and \"The quick brown fox\" and \"The quick brown fox\"'))\r\nprint(extract_values('\"The quick brown fox\" is \"very quick!\" and \"The quick brown fox\" and \"The quick brown fox\" and \"The quick brown fox\"'))\r\nprint(extract_values('\"The quick brown fox\" is \"very quick!\" and \"The quick brown fox\" and \"The quick brown fox\" and \"The quick brown fox\" and \"The quick brown fox\"'))\r\n\r\n\r","votes":148649.368},{"text":"\r\n    values = []\r\n    text_to_check = text\r\n    while True:\r\n        start = text_to_check.find('\"')\r\n        text_to_check = text_to_check[start + 1:]\r\n        end = text_to_check.find('\"')\r\n        if end == -1:\r\n            break\r\n        values.append(text_to_check[:end])\r\n        text_to_check = text_to_check[end + 1:]\r\n    return values\r\n\r\n\r","votes":156407.56},{"text":"\r\n    values = []\r\n    start_index = 0\r\n    while True:\r\n        # Find the next quote\r\n        quote_index = text.find('\"', start_index)\r\n        if quote_index == -1:\r\n            # No more quotes, we're done\r\n            break\r\n        # Find the next quote\r\n        end_index = text.find('\"', quote_index + 1)\r\n        # If we found a second quote, add it to the list\r\n        if end_index != -1:\r\n            values.append(text[quote_index + 1:end_index])\r\n            # Start next search after the second quote\r\n            start_index = end_index + 1\r\n        else:\r\n            # No second quote, so just add the rest of the text\r\n            values.append(text[quote_index + 1:])\r\n            # We're done\r\n            break\r\n    return values\r\n\r\n\r","votes":161555.54},{"text":"\r\n    values = []\r\n    \r\n    open_quot = False\r\n    value = \"\"\r\n\r\n    for i in text:\r\n        if i == '\"':\r\n            open_quot = not open_quot\r\n            if open_quot == False:\r\n                values.append(value)\r\n                value = \"\"\r\n        else:\r\n            if open_quot == True:\r\n                value += i\r\n\r\n    return values\r\n\r\n\r","votes":161899.984},{"text":"\r\n    result = []\r\n    text = text.replace('\\\\', '')\r\n    start = 0\r\n    while True:\r\n        start = text.find('\"', start)\r\n        if start == -1:\r\n            break\r\n        end = text.find('\"', start + 1)\r\n        if end == -1:\r\n            break\r\n        result.append(text[start+1:end])\r\n        start = end + 1\r\n    return result\r\n\r\n\r","votes":169689.708},{"text":"\r\n    values = []\r\n    index = 0\r\n    while index < len(text):\r\n        if text[index] == '\"':\r\n            index += 1\r\n            start = index\r\n            while index < len(text) and text[index] != '\"':\r\n                index += 1\r\n            end = index\r\n            values.append(text[start:end])\r\n            index += 1\r\n        else:\r\n            index += 1\r\n    return values\r\n\r\n\r","votes":190310.72},{"text":"\r\n    values = []\r\n    start = text.find('\"')\r\n    while start != -1:\r\n        # Find the end of the first quoted string.\r\n        end = text.find('\"', start + 1)\r\n        # If the second quote can't be found, raise an exeption.\r\n        if end == -1:\r\n            raise ValueError('Missing second quotation mark.')\r\n        values.append(text[start + 1:end])\r\n        # Set start to the next quote.\r\n        start = text.find('\"', end + 1)\r\n    return values\r\n\r\n\r","votes":208802.6},{"text":"\r\n    values = []\r\n    text = text.split(\",\")\r\n    for i in range(len(text)):\r\n        if text[i].find(\"[\") != -1:\r\n            text[i] = text[i][text[i].find(\"[\") + 1 : text[i].find(\"]\")]\r\n        if text[i].find(\"\\\"\") != -1:\r\n            a = text[i].find(\"\\\"\") + 1\r\n            b = text[i].find(\"\\\"\", a)\r\n            text[i] = text[i][a:b]\r\n        values.append(text[i])\r\n    return values\r\n\r\n\r","votes":222926.36},{"text":"\r\n    \r\n    values=[]\r\n    for x in text:\r\n        if x=='\"':\r\n            \r\n            if text[text.index(x)+1]=='\"':\r\n                text=text[:text.index(x)]+' '+text[text.index(x)+2:]\r\n            else:\r\n                values.append(text[text.index(x)+1:text.index(x,text.index(x)+1)])\r\n                text=text[:text.index(x)]+' '+text[text.index(x,text.index(x)+1)+1:]\r\n    return values\r\n\r\n\r\n# -----------------------------------------------------------------------------------------------------------------------\r\n# 4. Sort the values in a list and remove duplicates.\r","votes":null},{"text":"\r\n    values = []\r\n    in_quotes = False\r\n    for c in text:\r\n        if c == '\"':\r\n            in_quotes = not in_quotes\r\n        elif c == ',' and in_quotes:\r\n            values.append(c)\r\n    return values\r\n\r\nif __name__ == \"__main__\":\r\n    text = \"\\\"","votes":null},{"text":"\r\n    return re.findall(r'\\\"(.*?)\\\"', text)\r\n\r\n\r\nprint(extract_values(text))\r\n\r\n\r\n\r\n# 11. Extract email(s) from a given string.\r\n# Emails are considered to be everything between the first @ and the next . or end of string.\r\n\r\nimport re\r\n\r\ntext = 'My email is \"email@example.com\" and my friend\\'s email is \"friend@example.com\".'\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    in_quotes = False\r\n    buffer = \"\"\r\n    for char in text:\r\n        if char == \"\\\"\":\r\n            in_quotes = not in_quotes\r\n        elif char != \" \" and in_quotes:\r\n            buffer += char\r\n    if buffer != \"\":\r\n        values.append(buffer)\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Your code here\r\n    return [val for val in re.findall(r\"\\\"(.*?)\\\"\", text)]\r\n\r\n\r\n# Test Cases\r\nprint(extract_values(\"A \\\"B\\\" C\"))  # ['B']\r\nprint(extract_values(\"A \\\"B C\\\" D\"))  # ['B C']\r\nprint(extract_values(\"A \\\"B\\\" C D\"))  # ['B']\r\nprint(extract_values(\"A B C\"))  # []\r\nprint(extract_values(\"A \\\"B\\\"\"))  # ['B']\r\nprint(extract_values(\"A \\\"B C\\\"\"))  # ['B C']\r\nprint(extract_values(\"A \\\"B C D\\\" E\"))  # ['B C D']\r\nprint(extract_values(\"A \\\"B C D\\\"\"))  # ['B C D']\r\nprint(extract_values(\"A \\\"B C\\\" D E\"))  # ['B C']\r\nprint(extract_values(\"A \\\"B C\\\" D \\\"E F\\\"\"))  # ['B C', 'E F']\r\nprint(extract_values(\"A \\\"B C\\\" D \\\"E F G\\\"\"))  # ['B C', 'E F G']\r\nprint(extract_values(\"A \\\"B C\\\" D \\\"E F G\\\" H\"))  # ['B C', 'E F G']\r\nprint(extract_values(\"A \\\"B C\\\" D \\\"E F G\\\" H I\"))  # ['B C', 'E F G']\r\nprint(extract_values(\"A \\\"B C\\\" D \\\"E F G\\\" H I \\\"J K\\\" L\"))  # ['B C', 'E F G', 'J K']\r\nprint(extract_values(\"A \\\"B C\\\" D \\\"E F G\\\" H I \\\"J K\\\" L M\"))  # ['B C', 'E F G', 'J K']\r\nprint(extract_values(\"A \\\"B C\\\" D \\\"E F G\\\" H I \\\"J K\\\" L M N\"))  # ['B C', 'E F G', 'J K']\r\nprint(extract_values(","votes":null},{"text":"\r\n    values = []\r\n    # create an empty list\r\n    \r\n    for i in range(0, len(text)): # for each character in the text\r\n        if text[i] == '\"': # if the character is a quotation mark\r\n            index2 = text.find('\"', i+1) # get the next index of the quotation mark\r\n            values.append(text[i+1:index2]) # get the next value between the quotation marks\r\n    return values # return the list of values\r\n\r\n\r\n# test\r\nprint(extract_values('\"abc\" \"123\" \"xyz\"')) # should return ['abc', '123', 'xyz']\r\nprint(extract_values('\"abc\" \"xyz\"')) # should return ['abc', 'xyz']\r\nprint(extract_values('\"abc\"')) # should return ['abc']\r\nprint(extract_values('')) # should return []\r\nprint(extract_values('\"abc\" \"123\" \"xyz\" \"123\"')) # should return ['abc', '123', 'xyz', '123']\r\nprint(extract_values('\"abc\" \"123\" \"xyz\" \"xyz\"')) # should return ['abc', '123', 'xyz', 'xyz']\r\nprint(extract_values('\"\" \"\" \"\"')) # should return ['', '', '']\r\nprint(extract_values('\"abc\")) # should return ['abc']\r\nprint(extract_values('\"abc\" \"123\" \"xyz')) # should return ['abc', '123', 'xyz']\r\nprint(extract_values('\"abc\" \"123\" \"xyz\" \"123')) # should return ['abc', '123',","votes":null},{"text":"\r\n\r\n    values = []\r\n\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            if text[i + 1] == '\"':\r\n                i += 1\r\n            elif text[i - 1] == '\"':\r\n                i -= 1\r\n            else:\r\n                values.append(text[i + 1: text.index('\"', i + 1)])\r\n                i += 1\r\n\r\n    return values\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(extract_values('\"one\", \"two\", \"three\"'))\r\n    print(extract_values('\"one\", \"two\", \"three\" '))\r\n    print(extract_values('\"one\", \"two\", \"three\", \"four\"'))\r\n   ","votes":null},{"text":"\r\n    return [i for i in text.split() if '\"' in i]\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            j = i + 1\r\n            while j < len(text) and text[j] != '\"':\r\n                j += 1\r\n            result.append(text[i + 1:j])\r\n            i = j\r\n    return result\r\n    ","votes":null},{"text":"\r\n\r\n    return re.findall(r'\"([^\"]*)\"', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.findall('\"([^\"]*)\"', text)\r\n\r\nprint(extract_values(\"\"\"\"If you can't explain it simply, you don't understand it well enough.\" - Albert Einstein\"\"\"))\r\n# ['If you can\\'t explain it simply, you don\\'t understand it well enough.', 'Albert Einstein']\r\n\r","votes":null},{"text":"\r\n    text = text.replace('\\n', '')\r\n    start = 0\r\n    end = 0\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            if start == 0:\r\n                start = i + 1\r\n            else:\r\n                end = i\r\n                values.append(text[start:end])\r\n                start = i + 1\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    return re.findall(r\"\\\"(.*?)\\\"\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    result = re.findall(r'\"([^\"]*)\"', text)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    text = text.split()\r\n    for word in text:\r\n        if \"\\\"\" in word:\r\n            values.append(word.replace(\"\\\"\", \"\"))\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    i = 0\r\n    while i < len(text):\r\n        if text[i] == '\"':\r\n            i += 1\r\n            start = i\r\n            while i < len(text) and text[i] != '\"':\r\n                i += 1\r\n            values.append(text[start:i])\r\n            i += 1\r\n        else:\r\n            i += 1\r\n    return values\r\n\r\n\r\nprint(extract_values('\"Hello\", \"World\"'))\r\nprint(extract_values('\"Hello\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Foo\"'))\r\nprint(extract_values('\"Hello, \"World\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Foo\"))\r\nprint(extract_values('\"Hello\", \"World\", \"Foo\"'))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    values = []\r\n    current_value = ''\r\n    is_in_string = False\r\n\r\n    for character in text:\r\n        if character == '\"':\r\n            is_in_string = not is_in_string\r\n\r\n            if is_in_string:\r\n                current_value = ''\r\n\r\n            continue\r\n\r\n        if is_in_string:\r\n            current_value += character\r\n\r\n        if character == ',':\r\n            values.append(current_value)\r\n\r\n    return values\r\n\r\n\r\nif __name__ == '__main__':\r\n    text = '\"a\", \"b\", \"c\"'\r\n    print(extract_values(text))\r\n\r\n    text = 'a, \"b\", \"c\"'\r\n    print(extract_values(text))\r\n\r\n    text = '\"a\", \"b\", \"c\",'\r\n    print(extract_values(text))\r\n\r\n    text = 'a, \"b\", \"c\"'\r\n    print(extract_values(text))\r\n\r\n    text = 'a, \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", ","votes":null},{"text":"\r\n    extracted_values = []\r\n    text_between_quotes = []\r\n    text_between_quotes.extend(re.findall(r\"\\\"(.*?)\\\"\", text))\r\n    extracted_values = \" \".join(text_between_quotes)\r\n    return extracted_values\r\n\r\n\r\nprint(extract_values('The \"quick\" brown fox jumps over the \"lazy\" dog'))\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    in_quotes = False\r\n    for char in text:\r\n        if char == '\"' and not in_quotes:\r\n            in_quotes = True\r\n        elif char == '\"' and in_quotes:\r\n            in_quotes = False\r\n        elif in_quotes:\r\n            values.append(char)\r\n    return values\r\n\r\nprint(extract_values('\"Hello\", \"my\", \"name\", \"is\", \"Spike\", \"Spiegel\"'))\r\n\r\n#Solution 2\r","votes":null},{"text":"\r\n\r\n    result = []\r\n    temp = \"\"\r\n    for char in text:\r\n        if char == \"\\\"\":\r\n            result.append(temp)\r\n            temp = \"\"\r\n        else:\r\n            temp += char\r\n\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\"\"))\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\" c=\\\"3\\\"\"))\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\" c=\\\"3\\\" d=\\\"4\\\"\"))\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\" c=\\\"3\\\" d=\\\"4\\\" e=\\\"5\\\"\"))\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\" c=\\\"3\\\" d=\\\"4\\\" e=\\\"5\\\" f=\\\"6\\\"\"))\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\" c=\\\"3\\\" d=\\\"4\\\" e=\\\"5\\\" f=\\\"6\\\" g=\\\"7\\\"\"))\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\" c=\\\"3\\\" d=\\\"4\\\" e=\\\"5\\\" f=\\\"6\\\" g=\\\"7\\\" h=\\\"8\\\"\"))\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\" c=\\\"3\\\" d=\\\"4\\\" e=\\\"5\\\" f=\\\"6\\\" g=\\\"7\\\" h=\\\"8\\\" i=\\\"9\\\"\"))\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\" c=\\\"3\\\" d=\\\"4\\\" e=\\\"5\\\" f=\\\"6\\\" g=\\\"7\\\" h=\\\"8\\\" i=\\\"9\\\" j=\\\"10\\\"\"))\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\" c=\\\"3\\\" d=\\\"4\\\" e=\\\"5\\\" f=\\\"6\\\" g=\\\"7\\\" h=\\\"8\\\" i=\\\"9\\\" j=\\\"10\\\" k=\\\"11\\\"\"))\r\n    print(extract_values(\"a=\\\"1\\\" b=\\\"2\\\" c=\\\"3\\\" d=\\\"4\\\" e=\\\"5\\\" f=\\\"6\\\" g=\\\"7\\\" h=\\\"8\\\" i=\\","votes":null},{"text":"\r\n\r\n    # Create an empty list to store values\r\n    values = []\r\n\r\n    # Iterate through the string\r\n    for i in range(len(text)):\r\n        # If quotation mark is detected\r\n        if text[i] == '\"':\r\n            # Create a new string to store the value\r\n            value = ''\r\n            # Increment i\r\n            i += 1\r\n            # Iterate until another quotation mark is detected\r\n            while text[i] != '\"':\r\n                # Add the character to the string\r\n                value += text[i]\r\n                # Increment i\r\n                i += 1\r\n            # Add the string to the list\r\n            values.append(value)\r\n    # Return the list\r\n    return values\r\n\r\n\r\nprint(extract_values('\"Hello\",\"World\",\"Goodbye\"'))  # Should be ['Hello', 'World', 'Goodbye']\r\nprint(extract_values('\"Hello\", \"World\", \"Goodbye\"'))  # Should be ['Hello', 'World', 'Goodbye']\r\nprint(extract_values('\"Hello\",  \"World\" , \"Goodbye\"'))  # Should be ['Hello', 'World', 'Goodbye']\r\nprint(extract_values('\"Hello\", \"World\", \"Goodbye\"'))  # Should be ['Hello', 'World', 'Goodbye']\r\nprint(extract_values('\"Hello\",\"World\",\"Goodbye\"'))  # Should be ['Hello', 'World', 'Goodbye']\r\nprint(extract_values('\"Hello\", \"World\", \"Goodbye\"'))  # Should be ['Hello', 'World', 'Goodbye']\r\nprint(extract_values('\"Hello\", \"World\", \"Goodbye\"'))  # Should be ['Hello', 'World', 'Goodbye']\r\nprint(extract_values('\"Hello\", \"World\", \"Goodbye\"'))  # Should be ['Hello', 'World', 'Goodbye']\r\nprint(extract_values('\"Hello\", \"World\", \"Goodbye\"'))  # Should be ['Hello', 'World', 'Goodbye']\r\nprint","votes":null},{"text":"\r\n\r\n    # Check if the string is empty\r\n    if not text:\r\n        return []\r\n\r\n    # Create a variable to store the results\r\n    result = []\r\n\r\n    # Split the string\r\n    for item in text.split():\r\n        # Check if the item is a string\r\n        if isinstance(item, str):\r\n            # Extract the values between quotation marks\r\n            result.append(item[1:-1])\r\n\r\n    # Return the results\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    \r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            start = i\r\n            for j in range(i, len(text)):\r\n                if text[j] == '\"':\r\n                    values.append(text[start:j])\r\n                    break\r\n\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    # Create an empty list to hold the values\r\n    values = []\r\n    \r\n    # Create an empty string to hold the value\r\n    value = ''\r\n    \r\n    # Create a list of characters that are used to mark the start and end of \r\n    # a value\r\n    value_markers = ['\"', \"'\", \"[\", \"]\"]\r\n    \r\n    # Iterate over the characters of the text\r\n    for char in text:\r\n        # If the character is a value marker, then...\r\n        if char in value_markers:\r\n            # Append the value to the list of values\r\n            values.append(value)\r\n            # Create a new empty string\r\n            value = ''\r\n        else:\r\n            # Append the character to the value\r\n            value += char\r\n    \r\n    # Return the list of values\r\n    return values\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Test the extract_values function\r\n    text = 'My favorite colors are \"red\", \"green\", \"blue\"'\r\n    values = extract_values(text)\r\n    print(values)\r\n    \r\n    # Test the extract_values function with more complex text\r\n    text = 'Nicole\\'s favorite colors are \"red\", \"green\", \"blue\", [yellow, black]'\r\n    values = extract_values(text)\r\n    print(values)\r\n    \r\n    # Test the extract_values function with text that has no values\r\n    text = 'Nicole is 10 years old.'\r\n    values = extract_values(text)\r\n    print(values)\r\n    \r\n    # Test the extract_values function with text that has a value\r\n    text = 'Nicole is 10 years old. Her favorite color is \"red\".'\r\n    values = extract_values(text)\r\n    print(values)\r\n    \r\n    # Test the extract_values function with text that has multiple values\r\n    text = 'Nicole is 10 years old. Her favorite colors are \"red\", \"green\", \"blue\".","votes":null},{"text":"\r\n\r\n    return [value for value in text.split(' ') if value[0] == '\"']\r\n\r\n\r\nprint(extract_values('The \"use\" of quotations causes difficulties.'))\r\nprint(extract_values('\"The word\", \"word\", and \"word\" are used many times.'))\r\nprint(extract_values('\"Words\" are \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\" are \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"great\" and \"useful\"'))\r\nprint(extract_values('\"Words\", \"are\", \"gr","votes":null},{"text":"\r\n    values = []\r\n    is_in_quotes = False\r\n    for character in text:\r\n        if character == '\"':\r\n            is_in_quotes = not is_in_quotes\r\n            continue\r\n        if is_in_quotes:\r\n            values.append(character)\r\n    return values\r\n\r\nif __name__ == '__main__':\r\n    test_values = \"\"\"\r\n        I want to drive \"my car\" fast.\r\n        \"I like \"my car\" too.\"\r\n        \"I like \"my car\" too.\r\n        \"I like \"my car\" too.\"\r\n        \"I like \"my car\" too.\r\n        \"I like \"my car\" too.\"\r\n    \"\"\"\r\n    print(\"Test values:\")\r\n    print(test_values)\r\n    print(\"Quotation marks removed:\")\r\n    print(extract_values(test_values))\r\n\r\n# 2. Write a function that extracts a value of a key from a string. \r\n# The key and the string are both passed into the function as arguments. \r\n# You may assume that the key is always present in the string and that there is only one match.\r\n\r","votes":null},{"text":"\r\n\r\n    values = []\r\n    buffer = \"\"\r\n    for char in text:\r\n        if char != '\"':\r\n            buffer += char\r\n        else:\r\n            if len(buffer) > 0:\r\n                values.append(buffer)\r\n                buffer = \"\"\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    values = []\r\n\r\n    for text in text.split():\r\n        if text[0] == \"\\\"\":\r\n            values.append(text[1: -1])\r\n\r\n    return values\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(extract_values('The \"quick\" brown fox jumps over the \"lazy\" dog.'))\r\n    print(extract_values('The \"quick\" brown fox jumps over the \"lazy\" dog.'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello World\"'))\r\n    print(extract_values('\"Hello Worl","votes":null},{"text":"\r\n    values = []\r\n    start_index = 0\r\n    end_index = 0\r\n    while start_index != -1 and end_index != -1:\r\n        start_index = text.find('\"', start_index)\r\n        end_index = text.find('\"', start_index + 1)\r\n        if start_index != -1 and end_index != -1:\r\n            value = text[start_index + 1:end_index]\r\n            values.append(value)\r\n            start_index = end_index\r\n            end_index = -1\r\n    return values\r\n\r\n\r\nprint(extract_values('\"hello\" \"world\"'))\r\nprint(extract_values('\"hello\" \"how are you\" \"world\"'))\r\nprint(extract_values('\"hello\" \"how are you\" \"world\" \"today\"'))\r\nprint(extract_values('\"hello\" \"how are you\" \"world\" \"today\" \"hey\"'))\r\nprint(extract_values('\"hello\" \"how are you\" \"world\" \"today\" \"hey\" \"Hey\"'))\r\nprint(extract_values('\"hello\" \"how are you\" \"world\" \"today\" \"hey\" \"Hey\"'))\r\nprint(extract_values('\"hello\" \"how are you\" \"world\" \"today\" \"hey\" \"Hey\" \"hi\"'))\r\nprint(extract_values('\"hello\" \"how are you\" \"world\" \"today\" \"hey\" \"Hey\" \"hi\" \"Hey\"'))\r\nprint(extract_values('\"hello\" \"how are you\" \"world\" \"today\" \"hey\" \"Hey\" \"hi\" \"Hey\" \"hello\"'))\r\nprint(extract_values('\"hello\" \"how are you\" \"world\" \"today\" \"hey\" \"Hey\" \"hi\" \"Hey\" \"hello\" \"Hey\"'))\r\nprint(extract_values('\"hello\" \"how are you\" \"world\" \"today\" \"hey\" \"Hey\" ","votes":null},{"text":"\r\n    values = []\r\n    in_quotes = False\r\n    value = \"\"\r\n    for char in text:\r\n        if char == '\\\"':\r\n            in_quotes = not in_quotes\r\n        elif char != ' ' and in_quotes:\r\n            value += char\r\n        elif value:\r\n            values.append(value)\r\n            value = \"\"\r\n    return values\r\n\r\nprint(extract_values(\"My name is \\\"John\\\" and my \\\"age\\\" is 25\"))\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            i += 1\r\n            while text[i] != '\"':\r\n                values.append(text[i])\r\n                i += 1\r\n    return ''.join(values)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    values = []\r\n    \r\n    # This method is based on the knowledge that quotation marks must be\r\n    # balanced, i.e. they must be matched in pairs.\r\n    \r\n    # This method uses a stack, which stores the quotation marks we have seen\r\n    # so far, and keeps track of the current state.\r\n    \r\n    # The stack should contain either nothing (empty) or a single quotation mark\r\n    # at any given time.\r\n    \r\n    # When we encounter a quotation mark, we add it to the stack. If the stack\r\n    # is empty, we treat that quotation mark as an opening quotation mark\r\n    # (beginning of a new string). If the stack already contains a quotation\r\n    # mark, we treat that quotation mark as a closing quotation mark (end of\r\n    # a string).\r\n    \r\n    # We use a stack to keep track of the balancing of quotation marks. If\r\n    # the stack contains just one quotation mark, we know that we have not\r\n    # seen the corresponding closing quotation mark yet.\r\n    \r\n    # Since we want to extract the values that are between quotation marks,\r\n    # we create a variable for storing the current value.\r\n    \r\n    # We add the current character to the current value, if the stack is\r\n    # empty. If the stack is not empty, we know that we are currently inside\r\n    # a string, and we can add the current character to the current value.\r\n    \r\n    # We also add the current character to the current value, if the stack\r\n    # contains a quotation mark and the current character is a quotation mark.\r\n    # This is because if the current character is a quotation mark, it is\r\n    # part of the string we are currently extracting.\r\n    \r\n    # In all other cases, we add the current character to the current value\r\n    # only if the current character is not a quotation mark. This is because\r\n    # if the current character is a quotation mark, it is not part of the\r\n  ","votes":null},{"text":"\r\n    return re.findall(r'\\'(\\w+)\\'|\\\"(\\w+)\\\"', text)\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    # if the first character is a quotation mark, then we're good\r\n    if text[0] == '\"':\r\n        # search for the closing quotation mark\r\n        close = text.find('\"', 1)\r\n        # extract the value\r\n        values.append(text[1:close])\r\n        # extract the rest of the values\r\n        if close + 1 < len(text):\r\n            values.extend(extract_values(text[close + 1:]))\r\n        return values\r\n    # otherwise, we need to look for the next quotation mark\r\n    else:\r\n        close = text.find('\"')\r\n        # if none is found, then the value is the entire string\r\n        if close == -1:\r\n            values.append(text)\r\n        else:\r\n            # otherwise, we append the value and look for the rest\r\n            values.append(text[:close])\r\n            values.extend(extract_values(text[close + 1:]))\r\n        return values\r\n\r\n\r","votes":null},{"text":"\r\n    return [\r\n        i.strip('\"')\r\n        for i in text.split('\"')\r\n        if i and not i.isspace()\r\n    ]\r\n\r\n\r","votes":null},{"text":"\r\n    return re.findall('(.*?)', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.findall(r'\"([^\"]*)\"', text)\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            if text[i+1] != '\"':\r\n                j = i + 1\r\n                while text[j] != '\"':\r\n                ","votes":null},{"text":"\r\n\r\n    value_list = []\r\n\r\n    for item in text.split():\r\n        if item.startswith('\"') and item.endswith('\"'):\r\n            value_list.append(item[1:-1])\r\n\r\n    return value_list\r\n\r\n\r\n\r\nvotes":null},{"text":"\r\n    for word in text.split():\r\n        if word.startswith('\"') and word.endswith('\"'):\r\n            yield word[1:-1]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    results = []\r\n    start = 0\r\n    end = 0\r\n    while start >= 0 and end >= 0:\r\n        start = text.find('\"', start)\r\n        if start >= 0:\r\n            end = text.find('\"', start + 1)\r\n            if end >= 0:\r\n                results.append(text[start + 1:end])\r\n                start = end\r\n    return results\r\n\r\n\r\nif __name__ == '__main__':\r\n    text = 'The \"use\" of quotations causes difficulties.'\r\n    print(extract_values(text))","votes":null},{"text":"\r\n    values = []\r\n    start = 0\r\n    end = 0\r\n\r\n    for i in range(len(text)):\r\n        if text[i] == \"\\\"\":\r\n            if start == 0:\r\n                start = i\r\n            else:\r\n                end = i\r\n                values.append(text[start:end + 1])\r\n                start = 0\r\n\r\n    return values\r\n\r\n\r\nprint(extract_values(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla viverra tincidunt magna, \"\r\n                     \"eget ultricies quam pretium et. Nunc mi sapien, mollis ut eros quis, dapibus consectetur \"\r\n                     \"felis.\"))\r\n\r\nprint(extract_values(\"Lorem ipsum dolor sit amet, consectetur \\\"adipiscing\\\" elit. Nulla viverra \\\"tincidunt\\\" magna, \"\r\n                     \"eget ultricies quam pretium et. Nunc mi \\\"sapien\\\", mollis","votes":null},{"text":"\r\n    # The solution is to use regular expressions.\r\n    # We will use the following pattern: (\\w+) to find all the words\r\n    # and the following pattern: (\\d+) to find all the numbers.\r\n    # We will then use the findall() method of the re module.\r\n    # Example:\r\n    # >>> import re\r\n    # >>> pattern = re.compile(r\"(\\w+)\")\r\n    # >>> text = \"We will find all the words\"\r\n    # >>> pattern.findall(text)\r\n    # ['We', 'will', 'find', 'all', 'the', 'words']\r\n    # >>> pattern = re.compile(r\"(\\d+)\")\r\n    # >>> text = \"We will find all the numbers 2020, 2001, 1999\"\r\n    # >>> pattern.findall(text)\r\n    # ['2020', '2001', '1999']\r\n\r\n    import re\r\n    pattern = re.compile(r\"(\\w+)\")\r\n    words = pattern.findall(text)\r\n    pattern = re.compile(r\"(\\d+)\")\r\n    numbers = pattern.findall(text)\r\n    return words, numbers\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(list(extract_values('\"It was the best of times\", he said')))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert list(extract_values('\"It was the best of times\", he said')) == ['It', 'was', 'the', 'best', 'of', 'times']\r\n    assert list(extract_values('\"I cannot do it\", he said')) == ['I', 'cannot', 'do', 'it']\r\n    assert list(extract_values('\"I can do it\", she said')) == ['I', 'can', 'do', 'it']\r\n    assert list(extract_values('\"It is good\", he said')) == [","votes":null},{"text":"\r\n    values = []\r\n    start_index = text.find('\"') + 1\r\n    end_index = text.find('\"', start_index)\r\n    while end_index > 0 and start_index > 0:\r\n        values.append(text[start_index:end_","votes":null},{"text":"\r\n    result = []\r\n    string = ''\r\n    for ch in text:\r\n        if ch == '\"':\r\n            if string:\r\n                result.append(string)\r\n                string = ''\r\n            else:\r\n                string = ''\r\n        else:\r\n            string += ch\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    if text:\r\n        for i in range(len(text)):\r\n            if text[i] == '\"':\r\n                if text[i + 1] != '\"':\r\n                    if text[i + 1] == ' ':\r\n                        temp = ''\r\n                        for j in range(i + 2, len(text)):\r\n                            if text[j] != ' ':\r\n                                temp += text[j]\r\n                            else:\r\n                                values.append(temp)\r\n                                break\r\n                    else:\r\n                        temp = ''\r\n                        for j in range(i + 1, len(text)):\r\n                            if text[j] != '\"':\r\n                                temp += text[j]\r\n                            else:\r\n                                values.append(temp)\r\n                                break\r\n    return values\r\n\r\n\r\n# print(extract_values('my favorite food is \"pizza\" and my favorite season is \"summer\"'))\r\n# print(extract_values('my favorite food is \"pizza\"'))\r\n# print(extract_values('my favorite food is \"pizza'))\r\n# print(extract_values('my favorite food is \"pizza\" and my favorite season is \"summer\"'))\r\n# print(extract_values('my favorite food is \"pizza\" and my favorite season is \"summer\"'))\r\n# print(extract_values(\r\n#     'my favorite food is \"pizza\" and my favorite season is \"summer\" my favorite food is \"pizza\" and my favorite season is \"summer\" my favorite food is \"pizza\" and my favorite season is \"summer\"'))\r\n# print(extract_values(\r\n#     'my favorite food is \"pizza\" and my favorite season is \"summer\" my favorite food is \"pizza\" and my favorite season is \"summer\" my favorite food is \"pizza\" and my favorite season is \"summer\" my favorite food is \"pizza\" and my favorite season is \"summer\"'))\r\n\r\n","votes":null},{"text":"\r\n    return [i.strip(\"\\\"\") for i in text.split(\",\") if i]\r\n\r\n\r\n#print(extract_values(\"\\\"hello\\\", \\\"world\\\", \\\"foo\\\", \\\"bar\\\"\"))\r\n#print(extract_values(\"\\\"hello\\\", \\\"world\\\", \\\"foo\\\", \\\"bar\\\"\"))\r\n#print(extract_values(\"\\\"hello\\\", \\\"world\\\", \\\"foo\\\", \\\"bar\\\"\"))\r\n\r\n\r","votes":null},{"text":"\r\n    return [i[1:-1] for i in re.findall(r'\\\"([^\"]+)\\\"', text)]\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    # write your code here\r\n    return values\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(extract_values(\"a=\\\"b\\\" c=\\\"d\\\"\"))\r\n    print(extract_values(\"a=\\\"b\\\" c=\\\"d\\\" e=\\\"f\\\"\"))\r\n    print(extract_values(\"a=\\\"b c d\\\"\"))\r\n    print(extract_values(\"a","votes":null},{"text":"\r\n    values = []\r\n    temp = ''\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            values.append(temp)\r\n            temp = ''\r\n        else:\r\n            temp += text[i]\r\n    return values\r\n\r\nif __name__ == '__main__':\r\n    text = \"The color is \\\"red\\\", the animal is \\\"cat\\\".\"\r\n    print(extract_values(text))\r\n\r\n\r","votes":null},{"text":"\r\n    return [s.strip() for s in text.split('\"') if s]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(extract_values('The \"quote\" is in the \"middle\" of a string'))\r\n    print(extract_values('\"The\" \"quote\" is in the \"middle\" of a string'))\r\n    print(extract_values('\"The\" \"quote\" is in the \"middle\" of a string\"'))\r\n    print(extract_values('The \"quote\" is in the \"middle\" of a string\"'))\r\n    print(extract_values('The \"quote\" is in the \"middle\" of a \"string'))\r","votes":null},{"text":"\r\n    return re.findall(r\"\\\"(.*?)\\\"\", text)\r\n\r\n\r\nprint(extract_values(\"\"\"\"He said \"Hello, World\" and then \"Bye, World\"\"\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"\"\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"\"\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then \"Bye, World\"))\r\nprint(extract_values(\"\"\"\"Hello, World\" and then ","votes":null},{"text":"\r\n    return re.findall(r'\"([^\"]*)\"', text)\r\n\r","votes":null},{"text":"\r\n    \r\n    data = {}\r\n    \r\n    start = text.find('\"')\r\n    while start != -1:\r\n        end = text.find('\"', start + 1)\r\n        if end != -1:\r\n            key = text[start + 1:end]\r\n            \r\n            # Extract the values after ':'\r\n            start2 = text.find(':', end)\r\n            if start2 != -1:\r\n                end2 = text.find(',', start2)\r\n                if end2 != -1:\r\n                    value = text[start2 + 1:end2]\r\n                    data[key] = value\r\n                else:\r\n                    value = text[start2 + 1:]\r\n                    data[key] = value\r\n                    \r\n            # Extract the values after ','\r\n            start2 = text.find(',', end)\r\n            if start2 != -1:\r\n                end2 = text.find('\"', start2 + 1)\r\n                if end2 != -1:\r\n                    value = text[start2 + 1:end2]\r\n                    data[key] = value\r\n                else:\r\n                    value = text[start2 + 1:]\r\n                    data[key] = value\r\n                    \r\n        start = text.find('\"', end + 1)\r\n    \r\n    return data\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n\r\n    start_index = 0\r\n    end_index = 0\r\n    while start_index < len(text):\r\n        start_index = text.find('\"', start_index)\r\n        if start_index == -1:\r\n            break\r\n        end_index = text.find('\"', start_index + 1)\r\n        if end_index == -1:\r\n            break\r\n        values.append(text[start_index + 1:end_index])\r\n        start_index = end_index + 1\r\n\r\n    return values\r\n\r\n\r\nprint(extract_values('The \"use\" of quotations causes difficulties.'))\r\nprint(extract_values('He said \"The earlier you start eating fruits and vegetables, the better\"'))\r\nprint(extract_values('\"I like python\", said the \"pythonista\"'))\r\nprint(extract_values('\"This is a \"test\"', 1))\r\nprint(extract_values('\"This is a test\"'))\r\nprint(extract_values('\"This is a \"test\"', 0))\r\nprint(extract_values('\"This is a \"test\"', 2))\r\nprint(extract_values('\"This is a \"test\"', 3))\r\nprint(extract_values('\"This is a \"test\"', 100))\r\nprint(extract_values('\"This is a \"test\"', -100))\r\nprint(extract_values('\"This is a \"test\"', 5))\r\nprint(extract_values('\"This is a \"test\"', 6))\r\nprint(extract_values('\"This is a \"test\"', 7))\r\nprint(extract_values('\"This is a \"test\"', 8))\r\nprint(extract_values('\"This is a \"test\"', 9))\r\nprint(extract_values('\"This is a \"test\"', 10))\r\nprint(extract_values('\"This is a \"test\"', 11))\r\nprint","votes":null},{"text":"\r\n    try:\r\n        return [\r\n            value.strip(\"\\\"'\")\r\n            for value in re.findall(r'\\\"([^\"]*)\\\"|([^\"]*)\\'', text)\r\n        ]\r\n    except:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    return re.findall(r'\"(.*?)\"',text)\r\n\r\n\r\nprint(extract_values('I \"like\" Spam.'))\r\nprint(extract_values('He said, \"I like Spam.\"'))\r\nprint(extract_values('He said, \"I like Spam.\" I also like Spam.'))\r\nprint(extract_values('He said: \"I like Spam.\"'))\r\nprint(extract_values('Dogs said: \"I like Spam.\", and cats said: \"Meow.\"'))\r\nprint(extract_values('My name is \"Jane Doe\".'))\r\nprint(extract_values('My name is \"Jane Doe\" and my job is \"Engineer\"'))\r\nprint(extract_values('I like \"cheese\" and \"ham\" and \"Spam\"'))\r\nprint(extract_values('\"To Catch a Predator\" is a 2002 American made-for-television crime thriller written by Jon Sherman and directed by Michael Switzer.'))\r\nprint(extract_values('\"To Catch a Predator\" is a 2002 American made-for-television crime thriller written by Jon Sherman and directed by Michael Switzer. It stars Richard Burgi and Amanda Detmer.'))\r\nprint(extract_values('\"To Catch a Predator\" is a 2002 American made-for-television crime thriller written by Jon Sherman and directed by Michael Switzer. It stars Richard Burgi and Amanda Detmer. It was first aired on March 1, 2002.'))\r\nprint(extract_values('\"To Catch a Predator\" is a 2002 American made-for-television crime thriller written by Jon Sherman and directed by Michael Switzer. It stars Richard Burgi and Amanda Detmer. It was first aired on March 1, 2002. It was written by Jon Sherman and directed by Michael Switzer. It was written by Jon Sherman and directed by Michael Switzer. It was written by Jon Sherman and directed by Michael Switzer. It was writte","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            if text[i+1] == '\"':\r\n                i+=1\r\n                continue\r\n            j = i+1\r\n            while j < len(text) and text[j] != '\"':\r\n                j+=1\r\n            if j == len(text):\r\n                break\r\n            values.append(text[i+1:j])\r\n            i = j\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Use a list comprehension to extract all values between quotation marks\r\n    values = [x for x in text.split(\" \") if x[0] == '\"']\r\n    \r\n    # Remove the quotation marks\r\n    values = [x.strip('\"') for x in values]\r\n    \r\n    # Return the list of values\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    text = text.replace(\" \", \"\")\r\n    count = 0\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            count += 1\r\n            if count == 1:\r\n                start = i + 1\r\n            if count == 2:\r\n                values.append(text[start:i])\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Check if string starts with quotation marks\r\n    if text.startswith('\"'):\r\n        # Extract values between quotation marks\r\n        values = re.findall('\"(.*?)\"', text)\r\n    # Check if string ends with quotation marks\r\n    elif text.endswith('\"'):\r\n        # Extract values between quotation marks\r\n        values = re.findall('(.*?)\"', text)\r\n    # Check if string starts and ends with quotation marks\r\n    elif text.startswith('\"') and text.endswith('\"'):\r\n        # Extract values between quotation marks\r\n        values = re.findall('\"(.*?)\"', text)\r\n    else:\r\n        values = ''\r\n    return values\r\n\r\n# Tests\r\nprint(extract_values('\"))))(()(\"'))  # -> no result\r\nprint(extract_values('\"\"))))(()(\"')) # -> no result\r\nprint(extract_values('\"))))(()(\"'))  # -> no result\r\nprint(extract_values('\"\"))))(()(\"')) # -> no result\r\nprint(extract_values('\"Hello\"'))     # -> ['Hello']\r\nprint(extract_values('\"Hello\"'))     # -> ['Hello']\r\nprint(extract_values('\"Hello'))      # -> no result\r\nprint(extract_values('\"Hello'))      # -> no result\r\nprint(extract_values('Hello\"'))      # -> no result\r\nprint(extract_values('Hello\"'))      # -> no result\r\nprint(extract_values('\"Hello))\"'))   # -> ['Hello))']\r\nprint(extract_values('\"Hello\"))\"'))  # -> ['Hello']\r\nprint(extract_values('\"Hello\"))\"'))  # -> ['Hello']\r\nprint(extract_values('\"Hello))\"'))   # -> ['Hello))']\r\nprint(extract_values('\"Hello'))      # -> no result\r\nprint(extract_values('\"Hello'))      # -> no result\r\nprint(extract_values('Hello\"'))      # -> no result\r\nprin","votes":null},{"text":"\r\n    values = []\r\n    while \"\\\"\" in text:\r\n        start = text.find(\"\\\"\") + 1\r\n        end = text.find(\"\\\"\", start)\r\n        text = text[end + 1:]\r\n        values.append(text[:end])\r\n    return values\r\n\r\n\r\ntext = \"\\\"I am","votes":null},{"text":"\r\n    values = [i[1:-1] for i in text.split(\"\\\"\") if i != '']\r\n    return values\r\n\r\n\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\\"def\\\" ghij \\\"klm\\\" n\"))\r\nprint(extract_values(\"abc \\","votes":null},{"text":"\r\n    extracted_values = []\r\n    # print(text)\r\n    for i in range(0,len(text)):\r\n        if text[i] == \"\\\"\":\r\n            # print(text[i+1])\r\n            # print(text[i+2])\r\n            # print(text[i])\r\n            if text[i+1] == \"\\\"\":\r\n                # print(\"if\")\r\n                break\r\n            if text[i+1] == \"(\" and text[i+2] == \")\":\r\n                # print(\"elif\")\r\n                extracted_values.append(text[i+1:i+3])\r\n                break\r\n            else:\r\n                # print(\"else\")\r\n                extracted_values.append(text[i+1])\r\n                break\r\n        else:\r\n            extracted_values.append(text[i])\r\n\r\n    return extracted_values\r\n\r\n\r\ntext = \"I am a \\\"string\\\".\"\r\nprint(extract_values(text))\r\n\r\n","votes":null},{"text":"\r\n    result = []\r\n    index = 0\r\n    while index < len(text):\r\n        if text[index] == '\"':\r\n            index += 1\r\n            while index < len(text):\r\n                if text[index] == '\"':\r\n                    index += 1\r\n                    break\r\n                result.append(text[index])\r\n                index += 1\r\n        index += 1\r\n    return result\r\n\r\n\r\n# print(extract_values('The \"use\" of quotations causes difficulties.'))\r\n# print(extract_values('\"The world is flat\" - Edgar","votes":null},{"text":"\r\n    result = []\r\n    text = text.replace(\"'\", '\"')\r\n    while '\"\"' in text:\r\n        text = text.replace('\"\"', '\"')\r\n    while '\"' in text:\r\n        index = text.index('\"')\r\n        if text[index - 1] == '\"':\r\n            text = text[:index - 1] + text[index + 1:]\r\n        else:\r\n            result.append(text[index + 1:text.index('\"', index + 1)])\r\n            text = text[:index] + text[text.index('\"', index + 1) + 1:]\r\n    return result\r\n\r\n\r\nprint(extract_values('My name is \"George\"'))\r\nprint(extract_values('My name is \"George\" and I am 20 years old'))\r\nprint(extract_values('My name is \"George\" and I am 20 years old. I am from \"Sofia\" and my friend is \"Peter\"'))\r\nprint(extract_values('My name is \"George\" and I am 20 years old. I am from \"Sofia\" and my friend is \"Peter\" and his age is 20'))\r\nprint(extract_values('My name is \"George\" and I am 20 years old. I am from \"Sofia\" and my friend is \"Peter\" and his age is 20. He has a sister called \"Jane\"'))\r\nprint(extract_values('My name is \"George\" and I am 20 years old. I am from \"Sofia\" and my friend is \"Peter\" and his age is 20. He has a sister called \"Jane\". She is 19 years old. She is from \"New York\"'))\r\nprint(extract_values('My name is \"George\" and I am 20 years old. I am from \"Sofia\" and my friend is \"Peter\" and his age is 20. He has a sister called \"Jane\". She is 19 years old. She i","votes":null},{"text":"\r\n    # Use regex to find text between quotation marks\r\n    result = re.findall(r'\\\"(.+?)\\\"', text)\r\n    # Return result\r\n    return result\r\n\r\n\r\nprint(extract_values('\"One\" \"Two\" \"Three\"'))\r\n# print(extract_values('\"One\"'))\r\n# print(extract_values('\"One Two\"'))\r\n# print(extract_values('One Two'))\r\n# print(extract_values('\"\"'))\r\n# print(extract_values('\"'))\r\n# print(extract_values(''))\r\n# print(extract_values(None))\r\n\r\n#","votes":null},{"text":"\r\n    values = []\r\n    start = 0\r\n    end = 0\r\n    while (start < len(text)) and (end < len(text)):\r\n        start = text.find('\"', start)\r\n        if start != -1:\r\n            end = text.find('\"', start + 1)\r\n            if end != -1:\r\n                values.append(text[start + 1:end])\r\n                start = end + 1\r\n    return values\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    text = '{\"name\": \"Ram\", \"age\": 25, \"gender\": \"male\"}'\r\n    print(extract_values(text))\r\n\r\n    text = '{\"name\": \"Shyam\", \"age\": 26, \"gender\": \"male\"}'\r\n    print(extract_values(text))\r\n\r\n    text = '{\"name\": \"Sita\", \"age\": 25, \"gender\": \"female\"}'\r\n    print(extract_values(text))\r\n\r\n    text = '{\"name\": \"Lakshman\", \"age\": 27, \"gender\": \"male\"}'\r\n    print(extract_values(text))\r\n\r\n    text = '{\"name\": \"Hanuman\", \"age\": 26, \"gender\": \"male\"}'\r\n    print(extract_values(text))\r\n\r\n    text = '{\"name\": \"Sita\", \"age\": 25, \"gender\": \"female\"}'\r\n    print(extract_values(text))\r\n\r\n    text = '{\"name\": \"Rama\", \"age\": 25, \"gender\": \"male\"}'\r\n    print(extract_values(text))\r\n\r\n    text = '{\"name\": \"Lakshman\", \"age\": 27, \"gender\": \"male\"}'\r\n    print(extract_values(text))\r\n\r\n    text = '{\"name\": \"Shyam\", \"age\": 26, \"gender\": ","votes":null},{"text":"\r\n    values = []\r\n    for part in text.split():\r\n        if part[0] == '\"' and part[-1] == '\"':\r\n            values.append(part[1:-1])\r\n    return values\r\n\r\n\r\nprint(extract_values('\"I am a \"quoted\" string\", and \"so are\" you'))\r\nprint(extract_values('\"I am a \"quoted\" string\", and \"so are\" you'))\r\nprint(extract_values('\"I am a \"quoted\" string\", and \"so are\" you'))\r\nprint(extract_values('\"I am a \"quoted\" string\", and \"so are\" you'))\r\nprint(extract_values('\"I am a \"quoted\" string\", and \"so are\" you'))\r\nprint(extract_values('\"I am a \"quoted\" string\", and \"so are\" you'))\r\nprint(extract_values('\"I am a \"","votes":null},{"text":"\r\n    # write your code here\r\n    return re.findall('\"(.*?)\"', text)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    s = input()\r\n\r\n    result = extract_values(s)\r\n\r\n    fptr.write('\\n'.join(result))\r\n    fptr.write('\\n')\r\n\r\n    fptr.close()\r\n\r\n# Input:\r\n# \"The quick brown fox jumps over the lazy dog\"\r\n\r\n# Output:\r\n# The\r\n# quick\r\n# brown\r\n# fox\r\n# jumps\r\n# over\r\n# the\r\n# lazy\r\n# dog\r\n\r\n# Input:\r\n# \"The \"quote\" is neat\"\r\n\r\n# Output:\r\n# The\r\n# quote\r\n# is\r\n# neat\r\n\r\n# Input:\r\n# \"The \"quote\" is neat\"\r\n\r\n# Output:\r\n# The\r\n# quote\r\n# is\r\n# neat\r\n\r\n# Input:\r\n# \"\"\r\n\r\n# Output:\r\n# (empty line)\r\n\r\n# Input:\r\n# \"     \"\r\n\r\n# Output:\r\n# (empty line)\r\n\r\n# Input:\r\n# \"The \"quoted\" string \"\r\n\r\n# Output:\r\n# The\r\n# quoted\r\n# string\r\n\r\n# Input:\r\n# \"This is a \"quoted\" string with an \"inner \"quoted\" string\"\r\n\r\n# Output:\r\n# This\r\n# is\r\n# a\r\n# quoted\r\n# string\r\n# with\r\n# an\r\n# inner\r\n# quoted\r\n# string\r\n\r\n# Input:\r\n# \"The \"quoted\" string \"\r\n\r\n# Output:\r\n# The\r\n# quoted\r\n# string\r\n\r\n# Input:\r\n# \"The \"quoted\" string \"\r\n\r\n# Output","votes":null},{"text":"\r\n    value = []\r\n    start_index = 0\r\n    while start_index < len(text):\r\n        start_index = text.find('\"', start_index) + 1\r\n        end_index = text.find('\"', start_index)\r\n        value.append(text[start_index:end_index])\r\n        start_index = end_index + 1\r\n\r\n    return value\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(extract_values(\"123456\"))\r\n    print(extract_values('","votes":null},{"text":"\r\n\r\n    values = []\r\n    extracted = []\r\n    for i in text:\r\n        if i == '\"':\r\n            values.append(i)\r\n        elif i != '\"' and len(values) > 0:\r\n            extracted.append(i)\r\n        elif len(values) == 0:\r\n            extracted.append(i)\r\n\r\n    return ''.join(extracted)\r\n\r\n\r\nprint(extract_values('\"Hello\", \"World\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hello Python\", \"AGAIN\"'))\r\nprint(extract_values('\"Hello\", \"World\", \"Hell","votes":null},{"text":"\r\n    # your code here\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            if text[i - 1] == ' ':\r\n                start = i + 1\r\n            else:\r\n                start = i\r\n            end = text.find('\"', start)\r\n            values.append(text[start:end])\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    start = 0\r\n    while start < len(text):\r\n        try:\r\n            start = text.index('\"', start)\r\n            end = text.index('\"', start+1)\r\n            result.append(text[start+1:end])\r\n            start = end\r\n        except ValueError:\r\n            break\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    text = \"The \\\"use\\\" of quotations causes difficulties.\"\r\n    print(extract_values(text))\r\n    text = \"","votes":null},{"text":"\r\n\r\n    values = []\r\n\r\n    for i in range(0, len(text)):\r\n        if text[i] == '\"':\r\n            start = i + 1\r\n            end = start\r\n            while end < len(text) - 1:\r\n                if text[end] == '\"':\r\n                    break\r\n                end += 1\r\n            values.append(text[start:end])\r\n\r\n    return values\r\n\r\n\r\n# Test cases\r\nprint(extract_values('\"name\":\"John\",\"age\":30,\"city\":\"New York\"'))\r\nprint(extract_values('\"name\":\"John\", \"age\":30, \"city\":\"New York\"'))\r\nprint(extract_values('\"name\":\"John\",\"age\":30,\"city\":\"New York\"'))\r\nprint(extract_values('\"name\":\"John\",\"age:30,\"city\":\"New York\"'))\r\nprint(extract_values('\"name\":\"John\",\"age\":30\"city\":\"New York\"'))\r\nprint(extract_values('\"name\":\"John\",\"age\":30,\"city:\"New York\"'))\r\nprint(extract_values('\"name\":\"John\",\"age\":30,\"city\":\"New York', ''))\r\nprint(extract_values('\"name\":\"John\",\"age\":30,\"city\":\"New York', '\"'))\r\nprint(extract_values('\"name\":\"John\",\"age\":30,\"city\":\"New York\"', '\"'))\r\nprint(extract_values('\"name\":\"John\",\"age\":30,\"city\":\"New York\"', '\"\"'))\r\nprint(extract_values('\"name\":\"John\",\"age\":30,\"city\":\"New York\"', '\"', '\"'))\r\nprint(extract_values('\"name\":\"John\",\"age\":30,\"city\":\"New York\"', '\"', '\"', ''))\r\nprint(extract_values('\"name\":John\",\"age\":30,\"city\":\"New York\"'))\r\nprint(extract_values('\"name\":John\",\"age\":30,\"city\":\"New York\"'))\r\nprint(extract_values('\"name\":John\",\"ag","votes":null},{"text":"\r\n\r\n    values = []\r\n\r\n    for string in text.split():\r\n        if string[0] == '\"' and string[-1] == '\"':\r\n            values.append(string[1:-1])\r\n\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    output = []\r\n    new_text = ''\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            count = 0\r\n            while text[i] != '\"':\r\n                new_text += text[i]\r\n                i += 1\r\n                count += 1\r\n            output.append(new_text)\r\n            new_text = ''\r\n            i += 1\r\n        else:\r\n            i += 1\r\n    return output\r\n\r\n\r","votes":null},{"text":"\r\n    # create a list of all the items between quotation marks\r\n    values = re.findall(r'\"(.*?)\"', text)\r\n    # return the list of values\r\n    return values\r\n\r\n\r\n# 2. Write a function to extract values between brackets of a string.\r","votes":null},{"text":"\r\n    quote = None\r\n    result = []\r\n    for char in text:\r\n        if not quote and char in ['\"', \"'\"]:\r\n            quote = char\r\n        elif char == quote:\r\n            quote = None\r\n        elif not quote:\r\n            result.append(char)\r\n    return \"\".join(result)\r\n\r\n\r\n\r\nprint(extract_values(\"\"\"\"name\" : \"John\", \"age\" : 25\"\"\"))\r\nprint(extract_values(\"\"\"\"name\" : \"John\", \"age\" : 25, \"married\" : True\"\"\"))\r\nprint(extract_values(\"\"\"\"name\" : \"John\", \"age\" : 25, \"married\" : True, \"divorced\" : False\"\"\"))\r\nprint(extract_values(\"\"\"\"name\" : \"John\", \"age\" : 25, \"married\" : True, \"divorced\" : False, \"children\" : [\"Sara\", \"Alex\", \"Jack\"]\"\"\"))\r\nprint(extract_values(\"\"\"\"name\" : \"John\", \"age\" : 25, \"married\" : True, \"divorced\" : False, \"children\" : [\"Sara\", \"Alex\", \"Jack\"], \"pets\" : None\"\"\"))\r\nprint(extract_values(\"\"\"\"name\" : \"John\", \"age\" : 25, \"married\" : True, \"divorced\" : False, \"children\" : [\"Sara\", \"Alex\", \"Jack\"], \"pets\" : None, \"cars\" : {\"Ford\" : [\"Fiesta\", \"Focus\", \"Mustang\"], \"BMW\" : [\"320\", \"X3\", \"X5\"]}, \"phones\" : [{\"brand\" : \"Samsung\", \"number\" : 123456789}, {\"brand\" : \"Apple\", \"number\" : 987654321}]\"\"\"))\r\nprint(extract_values(\"\"\"\"name\" : \"John\", \"age\" : 25, \"married\" : True, ","votes":null},{"text":"\r\n    values = []\r\n    current_value = \"\"\r\n    for char in text:\r\n        if char == \"\\\"\":\r\n            values.append(current_value)\r\n            current_value = \"\"\r\n        else:\r\n            current_value += char\r\n    return values\r\n\r\n\r\nprint(extract_values(\"My name is \"))\r\nprint(extract_values(\"My name is \\\"John Doe\\\"\"))\r\nprint(extract_values(\"My name is \\\"John\\\" \\\"Doe\\\"\"))\r\nprint(extract_values(\"My name is \\\"John\\\" \\\"Doe\\\" \\\"and\\\" \\\"Jane\\\"\"))\r\nprint(extract_values(\"My name is \\\"John\\\" \\\"Doe\\\" \\\"and\\\" \\\"Jane\\\" and my last name is \\\"Smith\\\"\"))\r\n\r\n\r\n# Alternative Solution\r\n\r\n\r\nimport re\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    in_quotes = False\r\n    current = \"\"\r\n    for char in text:\r\n        if char == \"\\\"\":\r\n            in_quotes = not in_quotes\r\n        elif char == \" \" and in_quotes:\r\n            values.append(current)\r\n            current = \"\"\r\n        elif in_quotes:\r\n            current += char\r\n    values.append(current)\r\n    return values\r\n\r\n\r\ntext = input()\r\nprint(extract_values(text))\r\n\r\n# text = \"The \\\"use\\\" of quotations causes difficulties.\"\r\n# print(extract_values(text))\r\n# # ['The', 'use', 'of', 'quotations', 'causes', 'difficulties.']\r\n\r\n# text = \"We are living in a \\\"y","votes":null}],"time":{"count":19.0,"avg":137834.4966315789,"std":41398.6742182044,"cov":0.3003506033}}
{"id":564,"question":"def count_Pairs(arr,n):\r\n    \"\"\"Write a python function to count unequal element pairs from the given array.\"\"\"","answers":[{"text":"\r\n    res=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                res+=1\r\n    return res\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [2,1,3,1,2,5,6,1,4]\r\n    n = len(a)\r\n    print(count_Pairs(a,n))\r\n\r\n\r\n# Output:\r\n# 5\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n\r\n\r\n#####################################################################################################\r\n\r\n\r\n# Using Hashing\r\n\r\n\r","votes":99424.608},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":99516.704},{"text":"\r\n    count = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 20, 10, 10, 30, 20, 50, 10, 20]\r\n    n = len(arr)\r\n    print(\"Total Number of unequal element pairs are\",count_Pairs(arr,n))\r\n\r\n# Time Complexity: O(N^2)\r\n# Space Complexity: O(1)\r\n\r\n# Output: Total Number of unequal element pairs are 7\r\n\r\n# 3. Find the maximum sum of two non-overlapping subarrays.\r\n# Given an array of integers, the task is to find the maximum sum of elements in two non-overlapping subarrays such that the elements in both the subarrays are distinct.\r\n\r\n# Example 1:\r\n\r\n# Input: \r\n# N = 5\r\n# arr[] = {1, 5, 1, 3, 2}\r\n# Output: \r\n# 8\r\n# Explanation: \r\n# The two non-overlapping subarrays with\r\n# distinct elements are {1, 5} and {3, 2}.\r\n# Example 2:\r\n\r\n# Input:\r\n# N = 4\r\n# arr[] = {2, 1, 5, 6}\r\n# Output: \r\n# 12\r\n# Explanation:\r\n# The two non-overlapping subarrays with\r\n# distinct elements are {2, 5} and {1, 6}.\r\n\r\n# Your Task:\r\n# You do not need to read input or print anything. Your task is to complete the function maxSumTwoNoOverlap() which takes the array arr[] and its size N as inputs and return","votes":103207.784},{"text":"\r\n    c=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                c+=1\r\n    return c\r\n\r","votes":103250.648},{"text":"\r\n\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":103405.828},{"text":"\r\n    #code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\narr = [1, 2, 3, 4, 3, 2, 1, 3, 2, 1]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# Method 2\r\n\r","votes":105971.244},{"text":"\r\n    #Code here.\r\n    #print(arr,n)\r\n    count=0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\nif __name__=='__main__':\r\n    print(count_Pairs([2,4,5,6,8,1,3,7],8))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":107062.404},{"text":"\r\n    i=0\r\n    count=0\r\n    while i<n:\r\n        j=i+1\r\n        while j<n:\r\n            if arr[i]!=arr[j]:\r\n                count=count+1\r\n            j=j+1\r\n        i=i+1\r\n    return count\r\n\r","votes":108401.204},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    n=int(input(\"Enter the size of the array: \"))\r\n    arr=[]\r\n    for i in range(n):\r\n        arr.append(int(input(\"Enter the element: \")))\r\n    print(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":110138.276},{"text":"\r\n\r\n    count = 0 # initialising the count variable\r\n\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\narr = [1,2,3,4,5,6,7,8,9]\r\nn = len(arr) # length of array\r\nprint(\"The number of unequal element pairs are:\",count_Pairs(arr,n))\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Using dictionary\r\n\r","votes":111349.02},{"text":"\r\n    \r\n    # Write your code here\r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                pairs += 1\r\n    return pairs\r\n\r\narr = [1, 2, 1, 2, 2, 1]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n# Time Complexity : O(N^2)\r\n# Space Complexity : O(1)\r\n# 3\r\n\r\n\r","votes":111860.556},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count = count + 1\r\n    return count\r\n\r\narr = [1,1,1,2,2,3,3]\r\nn = len(arr)\r\nprint(\"The count of pairs is\", count_Pairs(arr,n))\r\n\r\n# Time Complexity: O(n^2) - Quadratic Time\r\n# Space Complexity: O(1) - Constant Space\r\n\r\n# Brute Force Solution (TLE) - O(n^2)\r\n\r","votes":112944.396},{"text":"\r\n    \r\n    # your code here\r\n    count=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n    \r\n\r\n# Taking Input Using Fast I\/O\r\nfrom sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**6)\r\n\r","votes":115291.1},{"text":"\r\n    count = 0\r\n    n = len(arr)\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n","votes":116130.256},{"text":"\r\n    #code here\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\narr = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 5, 5, 5]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# Sample Input 1:\r\n# 11\r\n# 1 1 1 2 2 2 3 3 3 4 5 5 5\r\n# \r\n# Sample Output 1:\r\n# 12\r\n\r\n# Sample Input 2:\r\n# 3\r\n# 1 2 3\r\n# \r\n# Sample Output 2:\r\n# 0\r\n\r\n# Sample Input 3:\r\n# 6\r\n# 1 2 3 1 2 3\r\n# \r\n# Sample Output 3:\r\n# 3\r\n\r\n# Sample Input 4:\r\n# 10\r\n# 1 1 1 1 1 1 1 2 2 2\r\n# \r\n# Sample Output 4:\r\n# 4\r\n\r\n# Sample Input 5:\r\n# 6\r\n# 1 2 3 4","votes":117318.956},{"text":"\r\n    # code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n#Taking Input Using Fast I\/O\r\nfrom sys import stdin,setrecursionlimit\r\nsetrecursionlimit(10**6)\r\n\r","votes":117827.648},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\narr = [1,2,3,4,5,6,7,8,9,10]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n#2. Find the first non-repeating character in a string\r","votes":120723.048},{"text":"\r\n    pairs = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                pairs += 1\r\n    return pairs\r\n\r\n#Driver code\r\nif __name__ =='__main__':\r\n    arr = [1, 2, 1, 3, 4, 3, 5, 6, 5, 2]\r\n    n","votes":122522.52},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1,2,3,4,5,6,7,8,9]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n# Given an array of positive integers, \r\n# the task is to count the number of distinct pairs \r\n# having difference equal to k.\r\n\r\n\r\n\r\n# Example 1:\r\n\r\n# Input: arr[] = {5, 2, 3, 4, 1}, k = 2\r\n# Output: 5\r\n# Explanation: Arr[] has 5 distinct pairs of \r\n# difference 2: (5, 3), (5, 1), (4, 2), (4, 1), (3, 1)\r\n# Example 2:\r\n\r\n# Input: arr[] = {1, 2, 3, 4, 5}, k = 2\r\n# Output: 7\r\n# Explanation: Arr[] has 7 distinct pairs of \r\n# difference 2: (1, 3), (1, 5), (2, 4), (2, 5), \r\n# (3, 4), (3, 5), (4, 5)\r\n# Example 3:\r\n\r\n# Input: arr[] = {1, 2, 3, 4, 5, 6}, k = 2\r\n# Output: 10\r\n# Explanation: Arr[] has 10 distinct pairs of \r\n# difference 2: (1, 3), (1, 5), (2, 4), (2, 6), \r\n# (3, 5), (3, 6), (4, 6), (5, 6)\r\n\r\n\r\n# using hashmap\r","votes":124396.24},{"text":"\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\n#Driver Code\r\narr=[1,2,2,3,4,3]\r\nn=len(arr)\r\n\r\nprint(count_Pairs(arr,n))\r\n\r\n# Time Complexity : O(n^2)\r\n# Space Complexity : O(1)\r\n\r\n\r\n# Test Cases\r\n\r\n# Input: \r\n# 1 2 2 3 4 3\r\n# Output: \r\n# 3\r\n# Explanation:\r\n# The given array contains {1, 2, 2, 3, 4, 3}.\r\n# There are 3 unequal pairs {(1, 2), (2, 3), (3, 4)}.\r\n\r\n# Input: \r\n# 2 2 2 2 2\r\n# Output: \r\n# 0\r\n# Explanation:\r\n# The given array contains {2, 2, 2, 2, 2}.\r\n# There are no unequal pairs.\r\n\r\n# Input: \r\n# 1 2 2 3 3 4\r\n# Output: \r\n# 3\r\n# Explanation:\r\n# The given array contains {1, 2, 2, 3, 3, 4}.\r\n# There are 3 unequal pairs {(1, 2), (2, 3), (3, 4)}.\r\n\r\n# Input: \r\n# 2 2 2 2 2 2\r\n# Output: \r\n# 0\r\n# Explanation:\r\n# The given array contains {2, 2, 2, 2, 2, 2}.\r\n# There are no unequal pairs.\r\n\r\n# Input: \r\n# 1 2 2","votes":126176.42},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr=[1,2,3,4,5,6,7,8,9]\r\nn=len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n#5.Write a python function to count the number of times a given number occurs in a given array.\r","votes":128181.004},{"text":"\r\n    arr.sort()\r\n    count = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if (arr[i] != arr[j]):\r\n                count += 1\r\n    return count\r\n\r\narr = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r","votes":128239.552},{"text":"\r\n    count=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count=count+1\r\n    return count\r\n\r\n\r\narr = [2,4,5,5,5,5,6,6,7,7,8,9]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n# Time Complexity = O(n^2)\r\n# Space Complexity = O(1)\r\n\r\n\r\n# Method - 2\r\n\r\nfrom collections import defaultdict\r\n\r","votes":128276.972},{"text":"\r\n    #code here\r\n    result = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                result += 1\r\n    return result\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().strip().split()))\r\n    result = count_Pairs(arr, n)\r\n    print(result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":128636.952},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] != arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n# Time Complexity : O(n^2)\r\n# Space Complexity : O(1)\r\n\r\n# Code by Abhishek\r\n\r","votes":128786.7},{"text":"\r\n    count = 0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\"\"\"\r\n\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\n\"\"\"\r\n\r","votes":129932.196},{"text":"\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr=[1,2,2,1,1,3]\r\nn=6\r\nprint(count_Pairs(arr,n))\r\n\r\n\r","votes":163700.664},{"text":"\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i]!=arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n#Driver Code\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 2, 1]\r\n    n = len(arr)\r\n    print(\"The count of unequal element pairs in the array is:\", count_Pairs(arr,n))\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n# Example 1:\r\n# Input: arr = [1, 2, 3, 2, 1]\r\n# Output: 3\r\n# Explanation:\r\n# The element pairs are (1, 2), (2, 3), (2, 1)\r\n\r\n# Example 2:\r\n# Input: arr = [1, 1, 1, 2, 1]\r\n# Output: 4\r\n# Explanation:\r\n# The element pairs are (1, 2), (1, 1), (2, 1), (1, 1)\r\n\r\n# Example 3:\r\n# Input: arr = [1, 2, 3, 4, 5]\r\n# Output: 0\r\n# Explanation:\r\n# The element pairs are (1, 2), (2, 3), (3, 4), (4, 5), (5, 1)\r\n\r\n# Example 4:\r\n# Input: arr = [1, 2, 3, 4, 5, 6]\r\n# Output: 6\r\n# Explanation:\r\n# The element pairs are (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)\r\n\r\n# Example ","votes":169228.332},{"text":"\r\n    count = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1,2,3,4]\r\n    n = len(arr)\r\n    print(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":172327.46},{"text":"\r\n    # Time complexity: O(n)\r\n    # Space complexity: O(1)\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n# input: arr=[1,2,2,1], n=4\r\n# output: 2\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 6\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4,5], n=5\r\n# output: 10\r\n\r\n# input: arr=[1,2,3,4","votes":174142.716},{"text":"\r\n    count = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i] != arr[j]):\r\n                count = count + 1\r\n    return count\r\n\r\narr = [1, 1, 1, 2, 2, 2, 3, 3, 3]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nInput:\r\n[1, 1, 1, 2, 2, 2, 3, 3, 3]\r\n\r\nOutput:\r\n6\r\n\"\"\"\r\n\r\n\"\"\"\r\nMethod 2 (Using Hashing)\r\n\"\"\"\r\n\r","votes":176131.404},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\n\r\narr = [1, 1, 1, 2, 3, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":180897.408},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr=[1,2,3,1,2,3]\r\nn=len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\nvotes":181371.76},{"text":"\r\n    # code here\r\n    count=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\narr = [1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r","votes":196797.828},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n                print(\"{},{}\".format(arr[i],arr[j]))\r\n    return count\r\n\r\n\r\narr = [1,2,3,4,8,9,10,11,12]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":224651.476},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr = [2,1,4,2,6,2,7,8,9,10]\r\n    n = len(arr)\r\n    print(\"The number of pairs that can be formed from the given array are: \")\r\n    print(count_Pairs(arr,n))\r\n\r\n'''\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nINPUT\r\nEnter the number of elements in array: 10\r\nEnter the elements: 2 1 4 2 6 2 7 8 9 10\r\nOUTPUT\r\nThe number of pairs that can be formed from the given array are: \r\n10\r\n\r\nSAMPLE II\r\n\r\nINPUT\r\nEnter the number of elements in array: 5\r\nEnter the elements: 2 1 6 2 5\r\nOUTPUT","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count+=1\r\n    return count\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn=len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\"\"\"\r\nSample Input & Output\r\n\r\nExample 1:\r\n\r\nInput:\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n\r\nOutput:\r","votes":null},{"text":"\r\n    my_dict = {}\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] in my_dict:\r\n            my_dict[arr[i]] += 1\r\n            count += 1\r\n        else:\r\n            my_dict[arr[i]] = 1\r\n    return count\r\n\r\n\r\narr = list(map(int,input(\"Enter the array: \").split()))\r\nn = len(arr)\r\nprint(\"The number of pairs are: \",count_Pairs(arr,n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\nSample Input 1:\r\nEnter the array: 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7\r\n\r\nSample Output 1:\r\nThe number of pairs are:  14\r\n\r\nSample Input 2:\r\nEnter the array: 1 2 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\r\n\r\nSample Output 2:\r\nThe number of pairs are:  10\r\n\r\nSample Input 3:\r\nEnter the array: 1 2 2 1 2 2 3 4 5 5 6 7 8 9 10 11\r\n\r\nSample Output 3:\r\nThe number of pairs are:  10\r\n\r\nSample Input 4:\r\nEnter the array: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\r\n\r\nSample Output 4:\r\nThe number of pairs are:  10\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTime Complexit","votes":null},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter size of array: \"))\r\n    arr = [int(i) for i in input(\"Enter space separated array elements: \").split()]\r\n    print(f\"Number of unequal element pairs: {count_Pairs(arr,n)}\")\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter size of array: 5\r\nEnter space separated array elements: 1 2 3 2 1\r\nNumber of unequal element pairs: 3\r\n\r\nSAMPLE II\r\n\r\nEnter size of array: 5\r\nEnter space separated array elements: 1 2 3 3 1\r\nNumber of unequal","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\nn = int(input(\"Enter the size of the array: \"))\r\narr = []\r\nfor i in range(n):\r\n    arr.append(int(input(\"Enter the element of the array: \")))\r\nprint(\"The number of","votes":null},{"text":"\r\n    total_pairs = []\r\n    for i in range(0,n):\r\n        for j in range(0,n):\r\n            if arr[i]!=arr[j] and [arr[i],arr[j]] not in total_pairs:\r\n                total_pairs.append([arr[i],arr[j]])\r\n    \r\n    print('The no. of pair of unequal elements are ',len(total_pairs))\r\n    return total_pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    print('Enter the size of the array:')\r\n    n = int(input())\r\n    print('Enter the elements of the array: ')\r\n    arr = list(map(int,input().split()))\r\n    print('The elements of the array: ',arr)\r\n    print('The no. of pair of unequal elements are ',count_Pairs(arr,n))\r\n\r\n\"\"\"\r\nTest case 1:\r\nEnter the size of the array:\r\n6\r\nEnter the elements of the array: \r\n4 1 1 2 2 4\r\nThe elements of the array:  [4, 1, 1, 2, 2, 4]\r\nThe no. of pair of unequal elements are  [[1, 2], [1, 4], [2, 4]]\r\n\r\nTest case 2:\r\nEnter the size of the array:\r\n5\r\nEnter the elements of the array: \r\n1 2 3 4 5\r\nThe elements of the array:  [1, 2, 3, 4, 5]\r\nThe no. of pair of unequal elements are  [[1, 2], [1, 3], [1, ","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count = count + 1\r\n    return count\r\n\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\narr = [1, 2, 2, 4, 5]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\narr = [1, 1, 1, 1, 1]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\narr = [1, 2, 2, 1, 1]\r\nn = len(arr)\r\nprint(count","votes":null},{"text":"\r\n    \r\n    # initialize count of unequal pairs\r\n    count=0\r\n    \r\n    # create a hashmap\r\n    h=dict()\r\n    \r\n    for i in range(n):\r\n    \r\n        # if we encounter an element for the first time\r\n        if(arr[i] not in h):\r\n            \r\n            # add the element to hashmap\r\n            h[arr[i]]=1\r\n        \r\n        # if the element is already present in hashmap\r\n        else:\r\n            \r\n            # increment the count\r\n            count+=1\r\n    \r\n    return count\r\n\r\n\r\n# Driver code\r\n# initialize array\r\narr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\r\n\r\n# initialize size of array\r\nn=len(arr)\r\n\r\n# Function call\r\nprint(count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    count=0\r\n    #sort the array\r\n    arr.sort()\r\n    #print(arr)\r\n    for i in range(n-1):\r\n        if arr[i]!=arr[i+1]:\r\n            count=count+1\r\n    return count\r\n\r\n\r\narr=list(map(int,input().split()))\r\nn=len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n# Driver code\r\narr = [1,1,1,2,2,3]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n'''\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nSample Input\/Output:\r\n\r\nInput:\r\n[1,1,1,2,2,3","votes":null},{"text":"\r\n    #return (len([i for i in arr if arr.count(i) == 1]))\r\n    return (len([i for i in arr if arr.count(i) == 1]))\r\n\r\n\r\narr = [1, 2, 2, 1, 1, 3]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Method 2: Using set\r","votes":null},{"text":"\r\n\r\n    count=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nn=int(input(\"Enter the size of the array: \"))\r\narr=[]\r\nprint(\"Enter the elements of the","votes":null},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1,2,3,4","votes":null},{"text":"\r\n    lis = []\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                lis.append([arr[i],arr[j]])\r\n    return lis\r\n\r\n\r\narr = [2, 3, 5, 3, 5, 6, 1, 2, 3, 5, 3, 5, 6, 1, 2, 3, 5, 3, 5, 6, ","votes":null},{"text":"\r\n\r\n    # count unequal element pairs\r\n    count = 0\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n\r\n    return count\r\n\r\n#main\r\nn = int(input(\"Enter the number of elements of the array: \"))\r\narr = []\r\n\r\n# taking input\r\nfor i in range(0, n):\r\n    ele = int(input(\"Enter element: \"))\r\n    arr.append(ele)\r\n\r\n# printing the output\r\nprint(\"Count of unequal element pairs: \", count_Pairs(arr,n))\r\n\r\n\r\n\r\n# 2. Write a python program to find the number of positive elements in a given array.\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            #print(arr[i],arr[j])\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\narr = [1,2,2,3,3]\r\narr = [1,2,3,4,5]\r\narr = [1,2,2,3,3,3]\r\narr = [1,2,3,4,5,5]\r\narr = [1,2,2,3,3,3,3]\r\narr = [1,2,3,4,5,5,5]\r\narr = [1,2,2,3,3,3,3,3]\r\narr = [1,2,3,4,5,5,5,5]\r\narr = [1,2,2,3,3,3,3,3,3]\r\narr = [1,2,3,4,5,5,5,5,5]\r\narr = [1,2,2,3,3,3,3,3,3,3]\r\narr = [1,2,3,4,5,5,5,5,5,5]\r\narr = [1,2,2,3,3,3,3,3,3,3,3]\r\narr = [1,2,3,4,5,5,5,5,5,5,5]\r\narr = [1,2,2,3,3,3,3,3,3,3,3,3]\r\narr = [1,2,3,4,5,5,5,5,5,5,5,5]\r\narr = [1,2,2,3,3,3,3,3,3,3,3,3,3]\r\narr = [1,2,3,4,5,5,5,5,5,","votes":null},{"text":"\r\n    #approach 1:\r\n    #count = 0\r\n    #for i in range(n):\r\n    #    for j in range(n):\r\n    #        if i!=j and arr[i]!=arr[j]:\r\n    #            count +=1\r\n    #return count\r\n\r\n    #approach 2:\r\n    #count = 0\r\n    #for i in range(n):\r\n    #    for j in range(i+1,n):\r\n    #        if arr[i]!=arr[j]:\r\n    #            count +=1\r\n    #return count\r\n\r\n    #approach 3:\r\n    #count = 0\r\n    #for i in range(n):\r\n    #    for j in range(i+1,n):\r\n    #        if arr[i]!=arr[j]:\r\n    #            count +=1\r\n    #return count\r\n\r\n    #approach 4:\r\n    #count = 0\r\n    #for i in range(n):\r\n    #    for j in range(i+1,n):\r\n    #        if arr[i]!=arr[j]:\r\n    #            count +=1\r\n    #return count\r\n\r\n    #approach 5:\r\n    #count = 0\r\n    #for i in range(n):\r\n    #    for j in range(i+1,n):\r\n    #        if arr[i]!=arr[j]:\r\n    #            count +=1\r\n    #return count\r\n\r\n    #approach 6:\r\n    count = 0\r\n    for i in range(n):\r\n        for","votes":null},{"text":"\r\n    pairi = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                pairi += 1\r\n    return pairi\r\n\r\narr = list(map(int,input().split()))\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n# OUTPUT\r\n\r\n# Enter the length of the array: 5\r\n# Enter the elements of the array: 1 2 3 4 1\r\n# 3\r\n\r\n# Enter the length of the array: 3\r\n# Enter the elements of the array: 1 2 1\r\n# 2\r\n\r\n# Enter the length of the array: 4\r\n# Enter the elements of the array: 1 2 3 4\r\n# 0\r\n\r\n# Enter the length of the array: 4\r\n# Enter the elements of the array: 1 2 3 1\r\n# 2\r\n\r\n# Enter the length of the array: 4\r\n# Enter the elements of the array: 1 2 3 3\r\n# 1\r\n\r\n# Enter the length of the array: 4\r\n# Enter the elements of the array: 1 2 1 2\r\n# 2\r\n\r\n# Enter the length of the array: 4\r\n# Enter the elements of the array: 1 1 1 1\r\n# 0\r\n\r\n# Enter the length of the array: 4\r\n# Enter the elements of the array: 1 1 1 2\r\n# 1\r\n\r\n# Enter the length of the array: 4\r\n# Enter the elements of the array: 1 1 2 2\r\n# 2\r\n\r\n# Enter the length of the array: 4\r\n# Enter the elements of the array: 1 2 2 2\r\n# 3\r\n\r\n# Ente","votes":null},{"text":"\r\n    arr.sort()\r\n    count = 0\r\n    for i in range(n-1):\r\n        if arr[i] != arr[i+1]:\r\n            count += 1\r\n    return count\r\n\r\nprint(count_Pairs([1,6,3,4,2,1,2,5,5,6],10))\r\nprint(count_Pairs([1,2,5,6,3,4,5,6,3,4],10))\r\nprint(count_Pairs([1,1,1,1,1,1,1,1,1,1],10))\r\nprint(count_Pairs([1,2,3,4,5,6,7,8,9,10],10))\r\nprint(count_Pairs([1,2,3,4,5,6,7,8,9,10,1],11))\r\nprint(count_Pairs([1,2,3,4,5,6,7,8,9,10,11],11))\r\nprint(count_Pairs([1,2,3,4,5,6,7,8,9,10,11,12],12))\r\n\r\n\r\n# Time: O(nlog(n))\r\n# Space: O(n)\r\n\r\n\r\n\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------\r\n# Approach 2:\r\n\r","votes":null},{"text":"\r\n    ans=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                ans+=1\r\n    return ans\r\n\r\n# Test Code\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nprint(count_Pairs(arr","votes":null},{"text":"\r\n    \r\n    d = {}\r\n    count = 0\r\n    \r\n    for i in range(n):\r\n        \r\n        if arr[i] not in d:\r\n            d[arr[i]] = 1\r\n        \r\n        else:\r\n            d[arr[i]] += 1\r\n            \r\n    for i in range(n):\r\n        \r\n        if arr[i] in d:\r\n            if d[arr[i]] > 1:\r\n                count += 1\r\n                \r\n    return count\r\n\r\n\r\nn = int(input(\"Enter the size of the array: \"))\r\narr = [int(input()) for i in range(n)]\r\n\r\nprint(\"The number of unequal element pairs are: \",count_Pairs(arr,n))\r\n\r\n\r\n\r\n#Time Complexity: O(N)\r\n#Space Complexity: O(N)\r\n\r\n#Input:\r\n#Enter the size of the array: 5\r\n#3 2 5 8 ","votes":null},{"text":"\r\n    # Using set\r\n    arr = set(arr)\r\n    count = 0\r\n    for i in arr:\r\n        if arr.count(i) > 1:\r\n            count += arr.count(i) * (arr.count(i) - 1) \/\/ 2\r\n        else:\r\n            count += 0\r\n    return count\r\n\r","votes":null},{"text":"\r\n    a = set(arr)\r\n    count = 0\r\n    for i in a:\r\n        if arr.count(i) > 1:\r\n            count += (arr.count(i)-1)\r\n    return count\r\n\r\n\r\narr = [2, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6]\r\nn = len(arr)\r\nprint(\"No. of unequal pair in the array: \", count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1,2,3,4,4,5,5,6,7,7,8,8,9,9,0,0]\r\nn = len(arr)\r\nprint(\"The total count of","votes":null},{"text":"\r\n\r\n    count=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr=input(\"Enter the array elements: \").split()\r\nn=len(arr)\r\nfor i in range(0,n):\r\n    arr[i]=int(arr[i])\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n2)\r\nSpace Complex","votes":null},{"text":"\r\n    #code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr = list(map(int,input().strip().split()))\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    arr1=[]\r\n    arr2=[]\r\n    for i in range(n):\r\n        if arr[i] in arr1:\r\n            arr2.append(i)\r\n        else:\r\n            arr1.append(arr[i])\r\n    print(arr1)\r\n    print(arr2)\r\n    return len(arr2)\r\n\r\narr=list(map(int,input(\"Enter the array:\").split()))\r\nn=len(arr)\r\nprint(\"The number of pairs are:\",count_Pairs(arr,n))\r\n\r\n\"\"\"\r\nStandard input and output\r\n\r\nEnter the array: 1 2 3 3 4 3 2\r\nThe number of pairs are: 3\r\n\r\nEnter the array: 1 2 3 3 4 3 2 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 ","votes":null},{"text":"\r\n    pair_count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                pair_count+=1\r\n    return pair_count\r\n\r\n\r\n\r\nn=int(input(\"Enter no of elements: \"))\r\narr=list(map(int,input(\"Enter elements: \").split()))\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n# Method 2\r\n\r\n\r","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(len(arr)):\r\n        if arr[i] in d:\r\n            d[arr[i]] = d[arr[i]] + 1\r\n        else:\r\n            d[arr[i]] = 1\r\n    ans = 0\r\n    for x in d:\r\n        if d[x] > 1:\r\n            ans += d[x]*(d[x]-1)\r\n        elif d[x] == 1:\r\n            ans += d[x]*(d[x]-1)\r\n    return ans\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\r\n    print(count_Pairs(arr, len(arr)))\r\n\r\n\r\n# Time complexity: O(n)\r\n# Space complexity: O(n)\r\n\r\n\r\n# 2. Given an array of integers. Check if it is a sorted or not.\r\n\r","votes":null},{"text":"\r\n    \r\n    #creating a dictionary\r\n    my_dict = {}\r\n\r\n    #adding elements to the dictionary\r\n    for x in arr:\r\n        if x in my_dict:\r\n            my_dict[x] += 1\r\n        else:\r\n            my_dict[x] = 1\r\n\r\n    #counting the pairs\r\n    count = 0\r\n    for x in my_dict:\r\n        if my_dict[x] > 1:\r\n            count += 1\r\n    \r\n    return count\r\n\r\n\r\n#DRIVER FUNCTION\r\narr = [1, 2, 3, 1, 1, 3]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n#Time Complexity: O(n)\r\n#Space Complexity: O(n)\r\n\r\n\r\n#TEST CASES\r\n\r\n#input 1\r\narr = [1, 2, 3, 1, 1, 3]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n#output 1\r\n#2\r\n\r\n#input 2\r\narr = [1, 1, 1, 2, 2, 2, 3, 3, 3]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n#output 2\r\n#0\r\n\r\n#input 3\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n#output 3\r\n#0\r\n\r\n#input 4\r\narr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\nn = len(arr)\r\nprin","votes":null},{"text":"\r\n    count = 0\r\n    # write your code here\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if arr[i] != arr[j] and arr[i] > arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n#main\r\nn = int(input())\r\narr = list(map(int,input().split()))\r\nprint(count_Pairs(arr,n))\r\n\r\n\"\"\"\r\nA = [1, 2, 1, 2, 3]\r\nOutput: 2\r\nExplanation: \r\nThe 2 unequal pairs are (1, 2) and (3, 3)\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n2)\r\nSpace Complexity: O(1)\r\n\r\nSample Input 1:\r\n7\r\n1 2 1 2 3 4 5\r\nSample Output 1:\r\n4\r\n\r\nSample Input 2:\r\n7\r\n1 2 3 4 5 6 7\r\nSample Output 2:\r\n0\r\n\r\nSample Input 3:\r\n7\r\n6 6 6 6 6 6 6\r\nSample Output 3:\r\n0\r\n\r\nSample Input 4:\r\n7\r\n1 2 3 4 5 6 7\r\nSample Output 4:\r\n0\r\n\r\nSample Input 5:\r\n7\r\n1 1 1 1 1 1 1\r\nSample Output 5:\r\n0\r\n\r\nSample Input 6:\r\n7\r\n1 2 3 4 5 6 7\r\nSample Output 6:\r\n0\r\n\r\nSample Input 7:\r\n","votes":null},{"text":"\r\n\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] !=arr[j]:\r\n                count+=1\r\n    print(count)\r\ncount_Pairs([1,2,2,1],4)\n\n\n\n#6. Write a Python program to print all unique permutations of a given string.","votes":null},{"text":"\r\n    #Initializing the count to 0\r\n    count=0\r\n    #Traversing through the array\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            #if the elements are not equal then increment the count by 1\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    #returning the count\r\n    return count\r\n\r\n#Driven Program\r\narr=[1,3,2,4,5,6,7,8,9]\r\n#Taking the size of the array\r\nn=len(arr)\r\n#Calling the function to count the pairs\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nAuxiliary Space: O(1)\r\n\r\nSample Input:\r\n[1,3,2,4,5,6,7,8,9]\r\n\r\nSample Output:\r\n8\r\n\r\nExplanation:\r\nThe pairs are:\r\n(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)\r\n(2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9)\r\n(3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9)\r\n(4, 5), (4, 6), (4, 7), (4, 8), (4, 9)\r\n(5, 6), (5, 7), (5, 8), (5, 9)\r\n(6, 7), (6, 8), (6, 9)\r\n(7, 8), (7, 9)\r\n(8, ","votes":null},{"text":"\r\n    arr.sort()\r\n    count = 0\r\n    for i in range(n-1):\r\n        if arr[i] != arr[i+1]:\r\n            count += 1\r\n    return count\r\n\r\n\r\narr = list(map(int,input(\"Enter the elements: \").split()))\r\nn = len(arr)\r\nprint(\"The total number of unique pairs is:\",count_Pairs(arr,n))\r\n\r\n\r\n\r\n'''\r\nCOMPLEXITY ANALYSIS:\r\n\r\n\r\nTime Complexity: O(nlogn) where n is the size of the array\r\nSpace Complexity: O(1)\r\n\r\n\r\n\r\nINPUT:\r\nEnter the elements: 1 2 3 4 5 6 7 8\r\n\r\nOUTPUT:\r\nThe total number of unique pairs is: 3\r\n\r\n\r\n\r\nTime Complexity: O(nlogn) where n is the size of the array\r\nSpace Complexity: O(1)\r\n\r\n\r\nINPUT:\r\nEnter the elements: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1","votes":null},{"text":"\r\n    \r\n    arr.sort()\r\n    c=0\r\n    for i in range(n-1):\r\n        if arr[i]!=arr[i+1]:\r\n            c+=1\r\n    return c\r\n    \r\narr=list(map(int,input().split()))\r\nn=int(input())\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n# OUTPUT:-\r\n# Enter elements of array separated by a space:\r\n# 1 1 2 2 6 7\r\n# Enter the number of elements:\r\n# 6\r\n# 3\r\n\r\n\r\n# Enter elements of array separated by a space:\r\n# 1 2 3 4 5\r\n# Enter the number of elements:\r\n# 5\r\n# 5\r\n\r\n\r\n# Enter elements of array separated by a space:\r\n# 1 2 3 4 5 6\r\n# Enter the number of elements:\r\n# 6\r\n# 6\r\n\r\n\r\n# Enter elements of array separated by a space:\r\n# 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10\r\n# Enter the number of elements:\r\n# 20\r\n# 10\r\n\r\n\r\n# Time Complexity: O(n*log(n))\r\n# Space","votes":null},{"text":"\r\n\r\n    # create a set\r\n    s = set()\r\n    # traverse through the given array\r\n    for i in range(n):\r\n        # if the element of the set is not equal to the current element then\r\n        # append the current element in the set\r\n        if arr[i] not in s:\r\n            s.add(arr[i])\r\n        # if the element of the set is equal to the current element then\r\n        # increment the count variable by 1\r\n        else:\r\n            count += 1\r\n    # return the count variable\r\n    return count\r\n\r\n\r\n# if __name__ == \"__main__\":\r\n#     arr = [3, 4, 7, 7, 6, 2, 3]\r\n#     n = len(arr)\r\n#     print(count_Pairs(arr,n))\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count+=1\r\n    print(count)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,2,3,3]\r\n    n = len(arr)\r\n    count_Pairs(arr,n)\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nINPUT\r\nEnter number of elements: 4\r\nEnter elements: 1 2 3 3\r\nOUTPUT\r\n2\r\n\r\nSAMPLE II\r\n\r\nINPUT\r\nEnter number of elements: 4\r\nEnter elements: 1 1 1 1\r\nOUTPUT\r\n0\r\n\r\nSAMPLE III\r\n\r\nINPUT\r\nEnter number of elements: 4\r\nEnter elements: 1 2 3 4\r\nOUTPUT\r\n0\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\nWe can also solve this problem using hashmap.\r\n\r\nTime Complexity: O(N)\r\nSpace Complexity: O(N)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nINPUT\r\nEnter number of elements: 4\r\nEnter elements: 1 2 3 3\r\nOUTPUT\r\n2\r\n\r\nSAMPLE II\r\n\r\nINPUT\r\nEnter number of elements: 4\r\nEnter elements: 1 1 1 1\r\nOUTPUT\r\n0\r\n\r\nSAMPLE III\r\n\r\nINPUT\r\nEnter number of elements: 4\r\nEnter elements: 1 2 3 4\r\nOUTPUT\r\n0\r\n\r\n\"\"\"\r\n\r\n\r\nfrom collections import defaultdict\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr=list(map(int,input().","votes":null},{"text":"\r\n    \r\n    # count of unequal pair\r\n    count = 0\r\n    \r\n    # iterate through the array\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            \r\n            # if the pair is unequal then increment the count\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n# Driver Code\r\narr = input('Enter the array elements: ')\r\nn = int(input('Enter the size of the array: '))\r\n\r\n# function call\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n'''\r\nOUTPUT:\r\nEnter the array elements: 5 6 2 4 5 6 7 2\r\nEnter the size of the array: 8\r\n2\r\n'''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    d={}\r\n    for i in arr:\r\n        if i not in d:\r\n            d[i]=1\r\n        else:\r\n            d[i]=d[i]+1\r\n    count=0\r\n    for key in d:\r\n        if d[key]>1:\r\n            count+=d[key]*(d[key]-1)\r\n    return count\r\n\r\n\r\nprint(count_Pairs([4,5,4,4,5,4,5],7))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #Your code here\r\n    d = dict()\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] not in d:\r\n            d[arr[i]] = 1\r\n        else:\r\n            d[arr[i]]","votes":null},{"text":"\r\n    #code here\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n    \r\n\r\nif __name__==\"__main__\":\r\n    t=int(input(\"Enter the number of testcases: \"))\r\n    for i in range(t):\r\n        n=int(input(\"Enter the size of the array: \"))\r\n        arr=list(map(int,input(\"Enter the elements of the array: \").strip().split()))\r\n        print(\"Number of unequal element pairs are: \",count_Pairs(arr,n))\r\n\r\n\r\n\"\"\"\r\nInput:\r\nEnter the number of testcases: 1\r\nEnter the size of the array: 5\r\nEnter the elements of the array: 1 2 3 2 1\r\nOutput:\r\nNumber of unequal element pairs are:  3\r\n\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(1)\r\n\r\nInput:\r\nEnter the number of testcases: 1\r\nEnter the size of the array: 5\r\nEnter the elements of the array: 1 2 3 1 2\r\nOutput:\r\nNumber of unequal element pairs are:  2\r\n\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(1)\r\n\r\nInput:\r\nEnter the number of testcases: 1\r\nEnter the size of the array: 5\r\nEnter the elements of the array: 1 1 1 1 1\r\nOutput:\r\nNumber of unequal element pairs are:  0\r\n\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(1)\r\n\r\nInput:\r\nEnter the number of testcases: 1\r\nEnter the size of the array: 5\r\nEnter the elements of the array: 1 2 3 4 5\r\nOutpu","votes":null},{"text":"\r\n    res = 0\r\n    for i in range(1,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j] and arr[i]==arr[j]:\r\n                res+=1\r\n    return res\r\n\r\narr = [1,2,2,3,3,3,4,5]\r\nn = len(arr)\r\nprint(\"The number of pairs are \",count_Pairs(arr,n))\r\n\r\n\"\"\"\r\nTime Complexity: O(N^2)\r\nSpace Complexity: O(1)\r\n\r\nSample Input\/Output:\r\n\r\nInput:\r\nEnter the size of array: 8\r\nEnter the elements in array:\r\n1 2 2 3 3 3 4 5\r\n\r\nOutput:\r\nThe number of pairs are  7\r\n\r\nExplanation:\r\nThe unequal element pairs are:\r\n(1, 2)\r\n(1, 3)\r\n(1, 4)\r\n(1, 5)\r\n(2, 3)\r\n(2, 4)\r\n(2, 5)\r\n\"\"\"\r\n\r\n\"\"\"\r\nApproach 2:\r\n\r\nusing unordered_map in c++\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1, 2, 1, 2, 3, 1, 2, ","votes":null},{"text":"\r\n    count =0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n#input\r\nn=int(input('Enter size of array: '))\r\narr=[]\r\nfor i in range(n):\r\n    arr.append(int(input('Enter element: ')))\r\n#output\r\nprint('The number of unequal element pairs from the given array is ',count_Pairs(arr,n))\r\n\r\n#Time Complexity: O(n^2)\r\n#Space Complexity: O(1)\r\n\r\n\r\n#count_Pairs(arr,n) function takes linear time.\r\n\r\n#input\r\nEnter size of array: 6\r\nEnter element: 10\r\nEnter element: 10\r\nEnter element: 20\r\nEnter element: 20\r\nEnter element: 30\r\nEnter element: 30\r\n#output\r\nThe number of unequal element pairs from the given array is  3\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n\r\n#Method 2\r\n#This method is more optimized as it takes constant time.\r\n#This is because we are using set() method.\r\n#set() method takes only unique elements and stores them in a set.\r\n\r\n#Implementation\r","votes":null},{"text":"\r\n    #code here\r\n    c=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                c+=1\r\n    return(c)\r\n\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"\r\n    Taking Input from user.\r\n    \"\"\"\r\n    n = int(input(\"Enter the size of the array: \"))\r\n    arr = []\r\n    for i in range(n):\r\n        ele = int(input(f\"Enter the element {i}: \"))\r\n        arr.append(ele)\r\n    print(f\"The elements in the array are: {arr}\")\r\n    print(f\"The number of pairs are: {count_Pairs(arr,n)}\")\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nn = int(input(\"Enter the size of the array: \"))\r\narr = list(map(int, input(\"Enter the array: \").strip().split()))\r\nprint(\"The count of pairs is:\",count_Pairs(arr,n))\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n# Input: Enter the size of the array: 7\r\n#        Enter the array: 1 2 2 3 3 3 4\r\n# Output: The count of pairs is: 6\r\n\r\n# Input: Enter the size of the array: 5\r\n#        Enter the array: 1 2 3 3 4\r\n# Output: The count of pairs is: 3\r\n\r\n# Input: Enter the size of the array: 4\r\n#        Enter the array: 1 1 1 1\r\n# Output: The count of pairs is: 0\r\n\r\n# Input: Enter the size of the array: 5\r\n#        Enter the array: 1 2 3 4 5\r\n# Output: The count of pairs is: 0\r\n\r\n# Input: Enter the size of the array: 4\r\n#        Enter the array: 1 2 3 4\r\n# Output: The count of pairs is: 0\r\n\r\n# Input: Enter the size of the array: 3\r\n#        Enter the array: 1 1 1\r\n# Output: The count of pairs is: 0\r\n\r\n# Input: Enter the size of the array: 5\r\n#        Enter the array: 1 1 1 1 1\r\n# Output: The count of pairs is: 0\r\n\r\n# Input: Enter the size of the array: 4\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nn = int(input())\r\narr = list(map(int,input().split()))\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\"\"\"count_Pairs_optimized(arr,n) -> count of unequal element pairs from the given array.\r\narr = list of elements\r\nn = length of the list\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    c = 0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                c += 1\r\n    return c\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1,2,3,4,","votes":null},{"text":"\r\n    pair_count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                pair_count += 1\r\n    return pair_count\r\n\r\n\r\narr = [1,2,3,4,5,6,7,8,9]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    s = set()\r\n    for i in arr:\r\n        if i in s:\r\n            s.remove(i)\r\n        else:\r\n            s.add(i)\r\n    return len(s)\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"\r\n    from timeit import timeit\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(timeit(lambda:count_Pairs(arr,20),number=10000)) # 0.004694754000078311\r\n    \"\"\"\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(count_Pairs(arr,20)) # 10\r\n\r\n\r\n# Given an array and an element x. You need to find the number of pairs of array elements that have difference equal to x.\r","votes":null},{"text":"\r\n    res = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                res += 1\r\n    print(res)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter the size of the array: \"))\r\n    arr = list(map(int, input(\"Enter the array element: \").split()))\r\n    count_Pairs(arr,n)\r\n\r\n\r\n# Sample Input and Output\r\n# Input \r\n# Enter the size of the array: 5\r\n# Enter the array element: 1 1 1 2 2\r\n# Output\r\n# 3\r\n\r\n# Time Complexity: O(n^2","votes":null},{"text":"\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__=='__main__':\r\n    arr=list(map(int,input().","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\narr =list(map(int,input().split()))\r\nn = len(arr)\r\nprint(\"Count of all such pairs : \",count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\n\r\n\r\nInput:\r\nEnter the length of array : 5\r\nEnter the array : 1 1 2 2 3\r\n\r\nOutput:\r\nCount of all such pairs :  2\r\n\r\n\r\n\r\nTime complexity : O(n^2)\r\nSpace complexity : O(1)\r\n\r\n\r\n\r\nInput:\r\nEnter the length of array : 5\r\nEnter the array : 1 1 2 2 3\r\n\r\nOutput:\r\nCount of all such pairs :  2\r\n\r\n\r\n\r\nTime complexity : O(n^2)\r\nSpace complexity : O(1)\r\n\r\n\r\n\r\n\r\n\r\nInput:\r\nEnter the length of array : 5\r\nEnter the array : 1 1 2 2 3\r\n\r\nOutput:\r\nCount of all such pairs :  2\r\n\r\n\r\n\r\nTime complexity : O(n^2)\r\nSpace complexity : O(1)\r\n\r\n\r\n\r\n\r\n\r\nInput:\r\nEnter the length of array : 5\r\nEnter the array : 1 1 2 2 3\r\n\r\nOutput:\r\nCount of all such pairs :  2\r\n\r\n\r\n\r\nTime complexity : O(n^2)\r\nSpace complexity : O(1)\r\n\r\n\r\n\r\n\r\n\r\nInput:\r\nEnter the length of array : 5\r\nEnter the array : 1 1 2 2 3\r\n\r\nOutput:\r\nCount of all such pairs :  2\r\n","votes":null},{"text":"\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr = list(map(int,input(\"Enter the elements of the array: \").split()))\r\nn = int(input(\"Enter the total number of elements in the array: \"))\r\nprint(f\"The number of unequal element pairs are: {count_Pairs(arr,n)}\")\r\n\r\n#Time Complexity = O(n^2)\r\n#Space Complexity = O(1)\r\n\r\n#Sample Input\/Output\r\n\r\n#INPUT\r\n#Enter the elements of the array: 1 2 3 4 5 6\r\n#Enter the total number of elements in the array: 6\r\n\r\n#OUTPUT\r\n#The number of unequal element pairs are: 15\r\n\r\n\r\n#INPUT\r\n#Enter the elements of the array: 1 2 3 4 5 5\r\n#Enter the total number of elements in the array: 6\r\n\r\n#OUTPUT\r\n#The number of unequal element pairs are: 10\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1, 1, 1, 1]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))\r\n\r\n\r\n\r\n\r\n\"\"\"\r\n\r\nGiven an array of n elements which contains elements from 0 to n-1, \r\nwith any of these numbers appearing any number of times. Find these repeating numbers in O(n) and using only constant memory space.\r\n\r\nExample:\r\nInput: [2, 1, 2, 5, 3, 1, 4, 2]\r\nOutput: 2, 1\r\nExplanation: 2 and 1 are the only repeating numbers.\r\n\r\n\"\"\"\r\n\r\n\r\nclass Solution:\r\n   ","votes":null},{"text":"\r\n    \r\n    dict = {}\r\n    for i in range(n):\r\n        if arr[i] in dict.keys():\r\n            dict[arr[i]] += 1\r\n        else:\r\n            dict[arr[i]] = 1\r\n    # print(dict)\r\n    count = 0\r\n    for i in range(n):\r\n        if dict[arr[i]] == 1:\r\n            continue\r\n        if arr[i]*2 in dict.keys():\r\n            count += dict[arr[i]]\r\n    return count\r\n\r\narr = [1,2,3,4,5,2,2,3,4,5,6,7,8,8,9,9,10,10]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n#Time Complexity: O(n)\r\n#Space Complexity: O(n)\r\n\r\n#Method 2\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\nn = int(input(\"Enter the size of the array: \"))\r\narr = []\r\nfor i in range(n):\r\n    arr.append(int(input(\"Enter the elements of the array: \")))\r\nprint(\"The count of unequal element pairs are: \",count_Pairs(arr,n))\r\n\r\n\r\n# Using Dictionary\r\n\r","votes":null},{"text":"\r\n    #code here\r\n    count = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i] != arr[j]):\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\n# Input\r\nn = 7\r\narr = [1, 1, 2, 3, 4, 4, 5]\r\n\r\n# Output\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n# Input\r\nn = 5\r\narr = [1, 1, 1, 1, 1]\r\n\r\n# Output\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n# Input\r\nn = 5\r\narr = [","votes":null},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n# Driver Code\r\narr = [1, 5, 2, 9, 6, 8, 5, 3, 2]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n# Contributed By:- Harshit Siwani\r\n\r\n# Enter the value of n\r\nn = int(input('Enter the value of n: '))\r\n\r\n# Enter the elements of the array\r\narr = list(map(int,input('Enter the elements of the array: ').split()))\r\n\r\n# Function to count the number of pairs\r","votes":null},{"text":"\r\n    arr.sort()\r\n    count = 0\r\n    for i in range(n-1):\r\n        if arr[i] != arr[i+1]:\r\n            count+=1\r\n    return count\r\n\r\n\r\narr = [1,2,3,4,5,6,7]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n#Time Complexity: O(n)\r\n#Space Complexity: O(1)\r\n\r\n#","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    count = 0\r\n    \r\n    for i in range(n-1):\r\n        if arr[i] != arr[i+1]:\r\n            count += 1\r\n            \r\n    return count\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\r\nn = len(arr)\r\n\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n# Time Complexity : O(n)\r\n# Space Complexity : O(1)\r\n\r\n\r\n\r\n# Alternate Solution\r\n\r","votes":null},{"text":"\r\n    d={}\r\n    count=0\r\n    for i in range(n):\r\n        if(arr[i] in d):\r\n            d[arr[i]]+=1\r\n        else:\r\n            d[arr[i]]=1\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j] and d[arr[i]] and d[arr[j]]):\r\n                count+=1\r\n                d[arr[i]]-=1\r\n                d[arr[j]]-=1\r\n    return count\r\n\r\nnum=int(input(\"Enter the value of n:\"))\r\narr=list(map(int,input(\"Enter the values of array:\").split()))\r\nprint(count_Pairs(arr,num))\r\n\r\n'''\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n)\r\n\r\nSample Input\/Output:\r\n\r\nEnter the value of n:5\r\nEnter the values of array:1 2 3 4 3\r\n3\r\n\r\nEnter the value of n:5\r\nEnter the values of array:1 2 3 4 3\r\n3\r\n\r\nEnter the value of n:5\r\nEnter the values of array:1 2 3 4 5\r\n0\r\n\r\nEnter the value of n:5\r\nEnter the values of array:1 2 3 4 5\r\n0\r\n\r\nEnter the value of n:5\r\nEnter the values of array:1 1 1 1 1\r\n0\r\n\r\nEnter the value of n:5\r\nEnter the values of array:1 2 3 4 5\r\n0\r\n\r\nEnter the value of n:5\r\nEnter the values of array:1 2 3 1 5\r\n2\r\n'''\r\n\r\n#Method 2\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n#Input\r\nn = int(input(\"Enter the size of array: \"))\r\narr = [int(input(\"Enter the element: \")) for i in range(n)]\r\n\r\n#Output\r\nprint(\"The number of unequal element pairs is: \",count_Pairs(arr,n))\r\n\r\n\"\"\"\r\nStandard Input and Output\r\n\r\nEnter the size of array: 4\r\nEnter the element: 1\r\nEnter the element: 2\r\nEnter the element: 1\r\nEnter the element: 2\r\nThe number of unequal element pairs is:  2\r\n\r\nEnter the size of array: 4\r\nEnter the element: 1\r\nEnter the element: 1\r\nEnter the element: 1\r\nEnter the element: 1\r\nThe number of unequal element pairs is:  0\r\n\r\nEnter the size of array: 4\r\nEnter the element: 1\r\nEnter the element: 2\r\nEnter the element: 3\r\nEnter the element: 4\r\nThe number of unequal element pairs is:  6\r\n\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\n\r\nPYTHON IMPLEMENTATION OF UNIQUE PAIRS\r\n\r\nclass Solution:\r\n   ","votes":null}],"time":{"count":35.0,"avg":132806.3224,"std":31980.2811563154,"cov":0.2408039059}}
{"id":565,"question":"def split(word):\r\n    \"\"\"Write a python function to split a string into characters.\"\"\"","answers":[{"text":"\r\n\r\n    return list(word)\r\n\r\n\r","votes":63816.74},{"text":"\r\n    return list(word)\r\n\r\nprint(split(\"asd\"))\r\n\r","votes":70668.264},{"text":"\r\n    return [char for char in word]\r\n\r\n\r","votes":72394.236},{"text":"\r\n\r\n    return [char for char in word]\r\n\r","votes":73749.172},{"text":"\r\n    return [char for char in word]\r\n\r","votes":73832.408},{"text":"\r\n    return list(word)\r\n\r\n\r","votes":75059.66},{"text":"\r\n    return list(word)\r\n\r\n\r\n# ANSWER\r","votes":80226.612},{"text":"\r\n    if len(word) == 0:\r\n        return []\r\n    else:\r\n        return [word[0]] + split(word[1:])\r\n\r\n\r","votes":80944.284},{"text":"\r\n    return list(word)\r\n\r","votes":83382.508},{"text":"\r\n    return [char for char in word]\r\n\r\n\r\nprint(split(\"string\"))\r\n\r\n\r","votes":83862.6},{"text":"\r\n    return [c for c in word]\r\n\r\n\r","votes":84428.988},{"text":"\r\n    return [letter for letter in word]\r\n\r\n\r","votes":85073.5},{"text":"\r\n    return list(word)\r\n\r\n\r\nprint(split(\"word\"))\r\nprint(split(\"\"))\r\nprint(split(\"WoRd\"))\r\n\r\n\r","votes":85275.844},{"text":"\r\n    return list(word)\r\nprint(split(\"hello\"))\r\n\r","votes":85873.612},{"text":"\r\n    x = list(word)\r\n    return x\r\n\r\n\r","votes":86507.944},{"text":"\r\n    return [char for char in word]\r\nprint(split('hello'))\r\n\r","votes":87972.14},{"text":"\r\n    return [char for char in word]\r\n\r\nprint('split(\"Hello\") -> ', split(\"Hello\"))\r\nprint('split(\"Python\") -> ', split(\"Python\"))\r\n\r\n\r","votes":88299.66},{"text":"\r\n    \r\n    return [char for char in word]\r\n\r\nprint(\"This is the first method:\")\r\nprint(split(\"Hello\"))\r\n\r","votes":88577.368},{"text":"\r\n    return [char for char in word]\r\n\r\n\r\nprint(split('helloworld'))\r\nprint(split(''))\r\nprint(split('python'))\r\n\r\n\r","votes":89897.884},{"text":"\r\n\r\n    return list(word)\r\n\r\n\r\nprint(split('Hello'))\r\n# ['H', 'e', 'l', 'l', 'o']\r\nprint(split('World'))\r\n# ['W', 'o', 'r', 'l', 'd']\r\nprint(split(''))\r\n# []\r\nprint(split('Python'))\r\n# ['P', 'y', 't', 'h', 'o', 'n']\r\nprint(split('This is a string'))\r\n# ['T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 's', 't', 'r', 'i', 'n', 'g']\r\nprint(split('1234567'))\r\n# ['1', '2', '3', '4', '5', '6', '7']\r\n\r\n\r","votes":90858.84},{"text":"\r\n    return [x for x in word]\r\n\r\n\r","votes":91097.176},{"text":"\r\n    return list(word)\r\n\r\n\r\n\r","votes":92993.088},{"text":"\r\n    #code goes here\r\n    split_string = []\r\n    for index in range(0,len(word)):\r\n        split_string.append(word[index])\r\n    return split_string\r\n\r\n#test\r\nprint(split(\"abc\"))\r\n\r\n#3\r","votes":97222.316},{"text":"\r\n    \r\n    return list(word)\r\n\r","votes":101914.444},{"text":"\r\n\r\n    return [char for char in word]\r\n\r\n\r","votes":102669.724},{"text":"\r\n    return list(word)\r\n\r\nif __name__ == '__main__':\r\n    word = input(\"Enter a word: \")\r\n    print(f\"The characters of {word} are: {split(word)}\")\r\n\r\n#OUTPUT:\r\n#Enter a word: python\r\n#The characters of python are: ['p', 'y', 't', 'h', 'o', 'n']\r\n\r\n#Question 7\r","votes":102933.284},{"text":"\r\n\r\n    s = []\r\n    for char in word:\r\n        s.append(char)\r\n    return s\r\n\r\n\r","votes":105458.2},{"text":"\r\n    return list(word)\r\n\r\nprint(split(\"Hello\"))\r\n\r\n# 05\r","votes":106949.676},{"text":"\r\n\r\n    x = list(word)\r\n    return x\r\n\r","votes":107001.556},{"text":"\r\n    return [char for char in word]\r\n\r\n\r\nprint(split(''))\r\nprint(split(' '))\r\nprint(split('a'))\r\nprint(split('ab'))\r\nprint(split('abc'))\r\nprint(split('abcd'))\r\nprint(split('abcde'))\r\nprint(split('abcdef'))\r\n\r\n\r\n# Test Case 2\r\n# Correct output\r\n# []\r\n# [' ']\r\n# ['a']\r\n# ['a', 'b']\r\n# ['a', 'b', 'c']\r\n# ['a', 'b', 'c', 'd']\r\n# ['a', 'b', 'c', 'd', 'e']\r\n# ['a', 'b', 'c', 'd', 'e', 'f']\r\n# Test Case 3\r\n# Correct output\r\n# [' ']\r\n# [' ']\r\n# ['a']\r\n# ['a', 'b']\r\n# ['a', 'b', 'c']\r\n# ['a', 'b', 'c', 'd']\r\n# ['a', 'b', 'c', 'd', 'e']\r\n# ['a', 'b', 'c', 'd', 'e', 'f']\r\n\r\n\r\n# Method 2\r","votes":107120.492},{"text":"\r\n    characters = []\r\n    for char in word:\r\n        characters.append(char)\r\n    return characters\r\n\r\n\r","votes":107204.284},{"text":"\r\n    word = list(word)\r\n    return word\r\n\r\n\r","votes":107381.244},{"text":"\r\n    return list(word)\r","votes":107524.284},{"text":"\r\n    \r\n    return [char for char in word]\r\n\r\n#Testing\r\nprint(split('python'))\r\n\r\n#Another Solution\r","votes":107752.804},{"text":"\r\n    return list(word)\r\n\r\n\r\nprint(split('Python'))\r\n\r\n\r","votes":114805.016},{"text":"\r\n    return [i for i in word]\r\n\r\n\r","votes":115313.672},{"text":"\r\n    return list(word)\r\n\r\na = split(\"hello\")\r\nprint(a)\r\nb = split(\"world\")\r\nprint(b)\r\n\r\n# 2. Write a Python function to check whether a list is empty or not.\r\n#","votes":116729.012},{"text":"\r\n    return [char for char in word]\r\n\r\n\r\nprint(split(\"Hello\"))\r\n\r\n\r","votes":117196.472},{"text":"\r\n    \r\n    return list(word)\r\n\r\nprint(split('Python'))\r\nprint(split('Elephant'))\r\nprint(split('Hi'))\r\n\r\n\r\n\"\"\"\r\n[P, y, t, h, o, n]\r\n[E, l, e, p, h, a, n, t]\r\n[H, i]\r\n\"\"\"\r\n\r\n\r\n# 2. Write a python function to split a string into characters.\r\n\r","votes":121030.152},{"text":"\r\n    return [c for c in word]\r\n\r\n\r\nprint(split(\"word\"))\r\n\r\n\r","votes":128194.748},{"text":"\r\n    return [char for char in word]\r\n\r\nprint(split(\"abc\"))\r\n\r\n\r","votes":128282.2},{"text":"\r\n    return [*word]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    s = input().strip()\r\n    result = split(s)\r\n    print(result)\r\n\r\n\r\n\"\"\"\r\nOutput\r\n\r\nEnter the string:\r\npython\r\n['p', 'y', 't', 'h', 'o', 'n']\r\n\r\n\"\"\"\r\n\r\n\r\n# 10. Write a python function to check if a string is a palindrome.\r\n\r","votes":128852.144},{"text":"\r\n    return [char for char in word]\r\n\r\n\r\nprint(split(\"hello\"))\r\n\r\n\r\nr\n\r\n# 2. Write a python function to split a string into characters.\r\n\r","votes":129366.22},{"text":"\r\n    return [ch for ch in word]\r\n\r\n\r","votes":129966.74},{"text":"\r\n    if not word:\r\n        return []\r\n    else:\r\n        return [word[0]] + split(word[1:])\r\n\r\n\r","votes":133826.436},{"text":"\r\n    return list(word)\r\n\r\n\r\nprint(split(\"Hello, World!\"))\r\n\r","votes":137676.576},{"text":"\r\n    split = list(word)\r\n    return split\r\n\r\n\r","votes":147469.396},{"text":"\r\n    return [i for i in word]\r\n\r","votes":148268.204},{"text":"\r\n    return [i for i in word]\r\nprint(split('python'))\r\n\r\n#2. Write a python program to split a string with a given delimiter.\r","votes":154200.732},{"text":"\r\n    if type(word) is not str:\r\n        raise TypeError('Please input a string')\r\n    else:\r\n        return [char for char in word]\r\n\r\n\r\nprint(split('hello world'))\r\n\r\n# 2\r\n'''\r\nWrite a python function to split a string into characters and reverse it.\r\n'''\r\n\r\n\r","votes":167481.556},{"text":"\r\n    return [char for char in word]\r\n\r\nword = input(\"Enter a word: \")\r\nprint(split(word))\r\n\r\n# 12. Write a python function to count the number of characters in a string.\r","votes":null},{"text":"\r\n    word = list(word)\r\n    word.insert(0, '[')\r\n    word.append(']')\r\n    print(word)\r\n\r\n\r","votes":null},{"text":"\r\n    l = []\r\n    for i in word:\r\n        l.append(i)\r\n    print(l)\r\n\r","votes":null},{"text":"\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return [char for char in word]\r\n\r\n\r\nprint(split('","votes":null},{"text":"\r\n    return [char for char in word]\r\n\r\n\r\nclass TestSplit(unittest.TestCase):\r\n   ","votes":null},{"text":"\r\n    word = input(\"Enter a word:\")\r\n    word = list(word)\r\n    return word\r\n\r\n\r\nif __name__ == '__main__':\r\n    word = split(word)\r\n    print(word)\r\n\r\n\r\n# The given solution is wrong\r\n#","votes":null}],"time":{"count":50.0,"avg":103891.68224,"std":23894.4170953848,"cov":0.2299935527}}
{"id":566,"question":"def sum_digits(n):\r\n    \"\"\"Write a function to get the sum of a non-negative integer.\"\"\"","answers":[{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n    return sum\r\n\r\n\r","votes":50683.324},{"text":"\r\n    \r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":50932.204},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum = sum + (n % 10)\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n\r","votes":54511.448},{"text":"\r\n    if n < 1:\r\n        return 0\r\n    else:\r\n        return n%10 + sum_digits(n\/\/10)\r\n        \r","votes":57404.568},{"text":"\r\n    return sum([int(x) for x in str(n)])\r\n\r\n\r","votes":57443.104},{"text":"\r\n    return sum(int(i) for i in str(n))\r\n\r\n\r","votes":58475.592},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum = sum + n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n\r","votes":62598.86},{"text":"\r\n    return sum(map(int, str(n)))\r\n\r\n\r","votes":65409.704},{"text":"\r\n    digits = [int(digit) for digit in str(n)]\r\n    return sum(digits)\r\n\r\n\r","votes":65717.096},{"text":"\r\n    total = 0\r\n    while n > 0:\r\n        total += n % 10\r\n        n \/\/= 10\r\n    return total\r\n\r","votes":66910.96},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":67568.328},{"text":"\r\n    return sum(int(digit) for digit in str(n))\r\n\r\n\r\nprint(sum_digits(100))\r\n\r\n\r\n# 2\r\n\r","votes":67628.836},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":69914.972},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":73912.24},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n    return sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter a non-negative integer: \"))\r\n    print(\"Sum of digits:\", sum_digits(n))\r\n    \r\n\r\n# Recursive solution\r","votes":76784.472},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    \r\n    digit = n % 10\r\n    return digit + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":77071.392},{"text":"\r\n    result = 0\r\n    while n:\r\n        result += n % 10\r\n        n \/\/= 10\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    # print(sum_digits(1234))\r\n    print(sum_digits(1234567890))\r\n\r\n\r\n# %%\r","votes":77173.548},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n\r","votes":78027.676},{"text":"\r\n    sum_ = 0\r\n    while n:\r\n        sum_ += n % 10\r\n        n \/\/= 10\r\n    return sum_\r\n\r\n\r","votes":78039.456},{"text":"\r\n    \r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n    return sum\r\n\r\n\r","votes":79014.7},{"text":"\r\n    # Your code here\r\n    sum=0\r\n    while n>0:\r\n        sum=sum+n%10\r\n        n=n\/\/10\r\n    return (sum)\r\n\r\n    \r\n    \r\nprint(sum_digits(12345))\r\n\r\n\r","votes":79035.936},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":79202.732},{"text":"\r\n    # your code here\r\n    return sum(map(int, str(n)))\r\n\r\n\r\n# Tests\r\nprint(sum_digits(12345))\r\nprint(sum_digits(9))\r\nprint(sum_digits(1000))\r\n\r\n# Output:\r\n# 15\r\n# 9\r\n# 1\r\n\r\n\r\n# Solution\r\n#","votes":79698.856},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return sum_digits(n\/\/10) + n%10\r\n\r\n\r","votes":79949.184},{"text":"\r\n    sum = 0\r\n    for i in str(n):\r\n        sum += int(i)\r\n    return sum\r\n\r\n\r","votes":80079.124},{"text":"\r\n    sum_of_digits = 0\r\n    while n > 0:\r\n        digit = n % 10\r\n        sum_of_digits += digit\r\n        n \/\/= 10\r\n    return sum_of_digits\r\n\r","votes":80680.392},{"text":"\r\n    s = 0\r\n    while n != 0:\r\n        s += n % 10\r\n        n \/\/= 10\r\n    return s\r\n\r\n\"\"","votes":80694.244},{"text":"\r\n\r\n    sum_of_digits = 0\r\n    while n > 0:\r\n        sum_of_digits += n % 10\r\n        n \/\/= 10\r\n    return sum_of_digits\r\n\r\n\r","votes":81114.988},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nprint(sum_digits(26))\r\n\r\n\r\n# Exercise 6.3\r\n# Write a function that takes a number and\r\n# returns the number of ones in its binary\r\n# representation. For example, the binary\r\n# representation of 13 is 1101, so the\r\n# function should return 3.\r","votes":81315.528},{"text":"\r\n    return sum([int(i) for i in str(n)])\r\n\r\n\r","votes":81706.044},{"text":"\r\n\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":85053.516},{"text":"\r\n    total = 0\r\n    while n > 0:\r\n        digit = n % 10\r\n        total += digit\r\n        n = n \/\/ 10\r\n    return total\r\n\r\n\r","votes":86003.152},{"text":"\r\n    #return sum(int(x) for x in str(n))\r\n    return sum(map(int, list(str(n))))\r\n  \r","votes":89248.204},{"text":"\r\n    result = 0\r\n    while n > 0:\r\n        result += n % 10\r\n        n = n \/\/ 10\r\n    return result\r\n\r\nif __name__ == '__main__':\r\n    print(sum_digits(1234))\r\n    print(sum_digits(456789))\r\n    print(sum_digits(123321))\r\n    print(sum_digits(0))\r\n    print(sum_digits(2))\r\n    print(sum_digits(1234567890987654321))\r\n\r","votes":89476.256},{"text":"\r\n    sum = 0\r\n    while n != 0:\r\n        digit = n % 10\r\n        sum = sum + digit\r\n        n = n \/\/ 10\r\n    return sum\r\n\r","votes":90321.424},{"text":"\r\n    return sum([int(i) for i in list(str(n))])\r\n\r","votes":91229.688},{"text":"\r\n    n = str(n)\r\n    summation = 0\r\n    for i in n:\r\n        summation += int(i)\r\n    return summation\r\n\r\n\r","votes":91764.044},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum = sum + (n % 10)\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n\r\nprint(sum_digits(345))\r\n\r\n\r","votes":93614.084},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    s = 0\r\n    while n != 0:\r\n        s = s + n % 10\r\n        n = n \/\/ 10\r\n    return s\r\n\r\n\r","votes":96473.332},{"text":"\r\n    return sum(int(digit) for digit in str(n))\r\n\r\n\r","votes":96992.276},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum = sum + n % 10\r\n        n = n \/\/ 10\r\n        \r\n    return sum\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":97003.484},{"text":"\r\n    result = 0\r\n    while n > 0:\r\n        result += n % 10\r\n        n \/\/= 10\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(sum_digits(n))\r\n\r\n\r\n# Task 2\r\n\r\n# from time import sleep\r\n#\r\n#","votes":97343.488},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n\r\nprint(sum_digits(123))\r\n\r\n\r","votes":100387.268},{"text":"\r\n    if n == 0:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":101384.316},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n    return sum\r\n\r","votes":101987.296},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n\r\n    return sum\r\n\r\n\r","votes":102111.932},{"text":"\r\n    sum = 0\r\n    n = int(n)\r\n    while n > 0:\r\n        digit = n % 10\r\n        sum += digit\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n\r\nprint(sum_digits(1234567))\r\n\r\n\r","votes":103873.176},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n    return sum\r\n\r\n# Test case\r\nn = 12345\r\nprint(sum_digits(n))\r\n\r\n# Time complexity: O(log n) for every base\r\n# Space complexity: O","votes":105096.784},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return int(n%10) + sum_digits(n\/\/10)\r\n\r\n\r","votes":107240.444},{"text":"\r\n    \r\n    if n < 0:\r\n        return None\r\n    \r\n    sum = 0\r\n    while n != 0:\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n# O(1) time and space\r","votes":107546.408},{"text":"\r\n    \r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\nprint(sum_digits(235))\r\n\r\n\r","votes":110150.744},{"text":"\r\n    # return sum([int(i) for i in str(n)])\r\n    return sum(map(int, str(n)))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    print(sum_digits(n))\r\n\r\n\r\n# 10\r\n# 6\r\n\r\n\r\n# 6\r\n# 15\r\n\r\n\r\n# 20\r\n# 3\r\n\r\n\r\n# 100\r\n# 1\r\n\r\n\r\n# 1","votes":110725.872},{"text":"\r\n    \r\n    # 1. Initialize the sum\r\n    sum_of_digits = 0\r\n    \r\n    # 2. Use a loop to add up the digits\r\n    while n > 0:\r\n        digit = n % 10\r\n        sum_of_digits += digit\r\n        n \/\/= 10\r\n    \r\n    # 3. Return the sum\r\n    return sum_of_digits\r\n\r\n# Test case 1\r\nn = 10\r\nprint(n, '=', sum_digits(n))\r\n\r\n# Test case 2\r\nn = 1234567890\r\nprint(n, '=', sum_digits(n))\r\n\r\n# Test case 3\r\nn = 354\r\nprint(n, '=', sum_digits(n))\r\n\r\n# Test case 4\r\nn = 0\r\nprint(n, '=', sum_digits(n))\r\n\r\n# Test case 5\r\nn = 1\r\nprint(n, '=', sum_digits(n))\r\n\r\n# Test case 6\r\nn = 12345678901234567890\r\nprint(n, '=', sum_digits(n))\r\n\r\n# Test case 7\r\nn = 123456789012345678901234567890","votes":112285.28},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n        \r\n#test\r\nif __name__ == '__main__':\r\n    n = 12345\r\n    print(sum_digits(n))\r\n    \r\n    \r","votes":114237.776},{"text":"\r\n    sum_of_digits = 0\r\n\r\n    while n > 0:\r\n        digit = n % 10\r\n        sum_of_digits += digit\r\n        n \/\/= 10\r\n\r\n    return sum_of_digits\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sum_digits(123456789))\r\n    print(sum_digits(1))\r\n    print(sum_digits(0))\r\n    print(sum_digits(123))\r\n    print(sum_digits(321))\r\n    print(sum_digits(987654321))\r\n    print(sum_digits(9876543210))\r\n    print(sum_digits(98765432109))\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Alternate Solution\r","votes":114705.56},{"text":"\r\n    sum_of_digits = 0\r\n    while n > 0:\r\n        sum_of_digits += n % 10\r\n        n \/\/= 10\r\n    return sum_of_digits\r\n\r\n\r","votes":115791.248},{"text":"\r\n    return sum([int(i) for i in str(n)])\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(sum_digits(n))\r\n\r\n# sum_digits(123) = 6\r\n# sum_digits(999) = 27\r\n# sum_digits(1111111) = 6\r\n\r\n\r\n#","votes":120516.552},{"text":"\r\n    return sum([int(i) for i in str(n)])\r\n\r\n\r\nprint(sum_digits(1234))\r\n\r\n\r","votes":122526.488},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n    return sum\r\n\r\n\r\nprint(sum_digits(100))\r\nprint(sum_digits(200))\r\nprint(sum_digits(300))\r\nprint(sum_digits(400))\r\nprint(sum_digits(500))\r\n\r\n\r\n# ------------------ #\r\n\r\n\r","votes":131294.244},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        n, r = divmod(n, 10)\r\n        sum += r\r\n    return sum\r\n\r\n\r","votes":137925.536},{"text":"\r\n    if n < 0:\r\n        return -1\r\n    sum_ = 0\r\n    for i in str(n):\r\n        sum_ += int(i)\r\n    return sum_\r\n\r\nprint(sum_digits(10))\r\n\r\n# 2. Write a function to get the number of digits in a non-negative integer.\r","votes":139027.536},{"text":"\r\n    sum = 0\r\n    while(n > 0):\r\n        sum = sum + n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(sum_digits(n))\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n# Approach 2: Using list comprehension\r\n\r","votes":144546.816},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n\r\n    return sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_digits(123))\r\n    print(sum_digits(1000))\r\n    print(sum_digits(100000))\r\n    print(sum_digits(1000000000))\r\n","votes":153928.304},{"text":"\r\n    #sum digits\r\n    #sum_digits(n)\r\n    #sum of a non-negative integer\r\n    #sum of digits of a non-negative integer\r\n    #sum of digits of a non-negative integer 1\r\n    #sum of digits of a non-negative integer 2\r\n    #sum of digits of a non-negative integer 3\r\n    #sum of digits of a non-negative integer 4\r\n    #sum of digits of a non-negative integer 5\r\n    #sum of digits of a non-negative integer 6\r\n    #sum of digits of a non-negative integer 7\r\n    #sum of digits of a non-negative integer 8\r\n    #sum of digits of a non-negative integer 9\r\n    #sum of digits of a non-negative integer 10\r\n    #sum of digits of a non-negative integer 11\r\n    #sum of digits of a non-negative integer 12\r\n    #sum of digits of a non-negative integer 13\r\n    #sum of digits of a non-negative integer 14\r\n    #sum of digits of a non-negative integer 15\r\n    #sum of digits of a non-negative integer 16\r\n    #sum of digits of a non-negative integer 17\r\n    #sum of digits of a non-negative integer 18\r\n    #sum of digits of a non-negative integer 19\r\n    #sum of digits of a non-negative integer 20\r\n    #sum of digits of a non-negative integer 21\r\n    #sum of digits of a non-negative integer 22\r\n    #sum of digits of a non-negative integer 23\r\n    #sum of digits of a non-negative integer 24\r\n    #sum of digits of a non-negative integer 25\r\n    #sum of digits of a non-negative integer 26\r\n    #sum of digits of a non-negative integer 27\r\n    #sum of digits of a non-negative integer 28\r\n    #su","votes":null},{"text":"\r\n    return sum([d for d in str(n)])\r\n\r\n\r","votes":null},{"text":"\r\n    if isinstance(n, int):\r\n        return sum(int(i) for i in str(n))\r\n    else:\r\n        raise TypeError(\"n must be an integer.\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(","votes":null},{"text":"\r\n    # return sum(map(int, str(n)))\r\n    # return sum(int(i) for i in str(n))\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return sum_digits(n \/\/ 10) + n % 10\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sum_digits(12345))\r\n    print(sum_digits(123456789))\r\n    print(sum_digits(123456789123456789))\r\n    print(sum_digits(123456789123456789123456789))\r\n\r\n\r\n\"\"\"SPECS:\r\n\r\nTIME COMPLEXITY: O(n) [where n is the number of digits in input n]\r\nSPACE CO","votes":null},{"text":"\r\n\r\n    # n = 12345\r\n    # 1 + 2 + 3 + 4 + 5 = 15\r\n    # 12345 % 10 = 5\r\n    # 1234 % 10 = 4\r\n    # 123 % 10 = 3\r\n    # 12 % 10 = 2\r\n    # 1 % 10 = 1\r\n    # 0 % 10 = 0\r\n\r\n    # 12345 \/\/ 10 = 1234\r\n    # 1234 \/\/ 10 = 123\r\n    # 123 \/\/ 10 = 12\r\n    # 12 \/\/ 10 = 1\r\n    # 1 \/\/ 10 = 0\r\n\r\n    # 12345 \/ 10 = 1234\r\n    # 1234 \/ 10 = 123\r\n    # 123 \/ 10 = 12\r\n    # 12 \/ 10 = 1\r\n    # 1 \/ 10 = 0.1\r\n\r\n    # 12345 % 10 + 12345 \/\/ 10 % 10 = 1 + 1234 % 10 = 2\r\n    # 1234 % 10 + 1234 \/\/ 10 % 10 = 2 + 123 % 10 = 3\r\n    # 123 % 10 + 123 \/\/ 10 % 10 = 3 + 12 % 10 = 4\r\n    # 12 % 10 + 12 \/\/ 10 % 10 = 4 + 1 % 10 = 5\r\n    # 1 % 10 + 1 \/\/ 10 % 10 = 5 + 0 ","votes":null},{"text":"\r\n    return sum([int(digit) for digit in str(n)])\r\n\r\nif __name__ == \"__main__\":\r\n    for n in [1","votes":null},{"text":"\r\n    while n >= 10:\r\n        n -= 9\r\n    return n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if n < 0:\r\n        return \"ERROR: n should be a non-negative integer.\"\r\n    elif n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n1 = int(input(\"Enter a non-negative integer: \"))\r\n    print(\"The sum of all digits in\", n1, \"is\", sum_digits(n1))\r\n\r\n    n2 = int(input(\"Enter a non-negative integer: \"))\r\n    print(\"The sum of all digits in\", n2, \"is\", sum_digits(n2))\r\n\r\n    n3 = int(input(\"Enter a non-negative integer: \"))\r\n    print(\"The sum of all digits in\", n3, \"is\", sum_digits(n3))\r\n\r\n    n4 = int(input(\"Enter a non-negative integer: \"))\r\n    print(\"The sum of all digits in\", n4, \"is\", sum_digits(n4))\r\n\r\n    n5 = int(input(\"Enter a non-negative integer: \"))\r\n    print(\"The sum of all digits in\", n5, \"is\", sum_digits(n5))\r\n\r\n    n6 = int(input(\"Enter a non-negative integer: \"))\r\n    print(\"The sum of all digits in\", n6, \"is\", sum_digits(n6))\r\n\r\n    n7 = int(input(\"Enter a non-negative integer: \"))\r\n    print(\"The sum of all digits in\", n7, \"is\", sum_digits(n7))\r\n\r\n    n8 = int(input(\"Enter a non-negative integer: \"))\r\n    print(\"The sum of all digits in\", n8, \"is\", sum_digits(n8))\r\n\r\n    n9 = int(input(\"Enter a non-negative integer: \"))\r\n    print(\"Th","votes":null},{"text":"\r\n    sum_digits = 0\r\n    while n > 0:\r\n        sum_digits += n % 10\r\n        n \/= 10\r\n    return sum_digits\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n    return sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sum_digits(1234567890))\r\n    print(sum_digits(123))\r\n    print(sum_digits(12345))\r\n    print(sum_digits(12345678910))\r\n    print(sum_digits(0))\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O","votes":null},{"text":"\r\n    \r\n    # 10000000\r\n    # 1000000\r\n    # 100000\r\n    # 10000\r\n    # 1000\r\n    # 100\r\n    # 10\r\n    # 1\r\n    # 0\r\n    \r\n    \r\n    while n >= 10:\r\n        n = n \/\/ 10\r\n        \r\n    return n\r\n\r\n# sum_digits(3245)\r\n# 3245 \/ 10 = 324\r\n# 324 \/ 10 = 32\r\n# 32 \/ 10 = 3\r\n# 3 \/ 10 = 0\r\n# 0\r\n\r\n\r\nsum_digits_2 = lambda x: x % 10 if x < 10 else sum_digits_2(x \/\/ 10)\r\n\r\nsum_digits_2(3245)\r\n\r\n# 3245 % 10 = 5\r\n# 324 % 10 = 4\r\n# 32 % 10 = 2\r\n# 3 % 10 = 3\r\n# 3\r\n\r\n\r\n\r\nsum_digits_3 = lambda x: x % 10 + sum_digits_3(x \/\/ 10) if x >= 10 else x\r\n\r\nsum_digits_3(3245)\r\n\r\n# 3245 % 10 = 5\r\n# 324 % 10 = 4\r\n# 32 % 10 = 2\r\n# 3 % 10 = 3\r\n# 3\r\n\r\n\r\n\r\n# sum_digits_4 = lambda x: x % 10 + sum_digits_4(x \/\/ 10) if x >= 10 else 0\r\n\r\n","votes":null},{"text":"\r\n    return sum(int(i) for i in str(n))\r\n\r\n\r\n# Test cases\r\nprint(sum_digits(123))\r\nprint(sum_digits(99))\r\nprint(sum_digits(1234567890))\r\nprint(sum_digits(12345678901234567890))\r\nprint(sum_digits(123456789012345678901234567890))\r\nprint(sum_","votes":null},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n\r\nprint(sum_digits(12345))\r\nprint(sum_digits(789))\r\nprint(sum_digits","votes":null}],"time":{"count":63.0,"avg":90484.318031746,"std":23379.1037421279,"cov":0.25837741}}
{"id":567,"question":"def issort_list(list1):\r\n    \"\"\"Write a function to check whether a specified list is sorted or not.\"\"\"","answers":[{"text":"\r\n\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":81821.948},{"text":"\r\n    return list1 == sorted(list1)\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5]\r\nprint(issort_list(list1))\r\n\r\n\r","votes":83786.608},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":84695.516},{"text":"\r\n    return(list1 == sorted(list1))\r\n\r\n\r\n\r","votes":88927.164},{"text":"\r\n    if len(list1) < 2:\r\n        return True\r\n    elif list1[-1] < list1[-2]:\r\n        return False\r\n    else:\r\n        return issort_list(list1[:-1])\r\n\r\n\r","votes":89593.628},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":90285.904},{"text":"\r\n    if len(list1)==0:\r\n        return True\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":90329.664},{"text":"\r\n    return list1 == sorted(list1)\r\n\r","votes":90371.552},{"text":"\r\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\r\n\r\n\r","votes":90657.42},{"text":"\r\n    # sorted_list = sorted(list1)\r\n    # if list1 == sorted_list:\r\n    #     return True\r\n    # else:\r\n    #     return False\r\n\r\n    # using list comprehension\r\n    # return all([list1[i] <= list1[i + 1] for i in range(len(list1) - 1)])\r\n\r\n    # using bubble sort\r\n    # for i in range(len(list1) - 1):\r\n    #     if list1[i] > list1[i + 1]:\r\n    #         return False\r\n    # return True\r\n\r\n    # using bisect\r\n    return list1 == sorted(list1)\r\n\r\n\r","votes":94039.32},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":95074.808},{"text":"\r\n    # create a new variable that will hold the sorted string\r\n    sorted_list = sorted(list1)\r\n    # create a variable to hold the sorted string\r\n    # sorted_list = sorted(list1)\r\n    # check if the given list is equal to the sorted list\r\n    if list1 == sorted_list:\r\n        # return True\r\n        return True\r\n    else:\r\n        # return False\r\n        return False\r\n\r\n\r","votes":96338.12},{"text":"\r\n    for i in range(0, len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":97821.92},{"text":"\r\n    count = 0\r\n    for i in range(0, len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            count += 1\r\n    if count > 0:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":98460.932},{"text":"\r\n    for i in range(0, len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":99559.22},{"text":"\r\n\r\n    if len(list1) == 0 or len(list1) == 1:\r\n        return True\r\n\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":100853.816},{"text":"\r\n    #print(list1)\r\n    for item in range(1,len(list1)):\r\n        if list1[item] < list1[item-1]:\r\n            return False\r\n    return True\r\n\r","votes":101289.016},{"text":"\r\n    if list1 == []:\r\n        return True\r\n    if list1[0] == list1[-1]:\r\n        return True\r\n    if list1[0] > list1[-1]:\r\n        return False\r\n    for i in range(0, len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":104343.528},{"text":"\r\n    i = 0\r\n    while i < len(list1)-1:\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n        i += 1\r\n    return True\r\n\r\n\r","votes":104964.6},{"text":"\r\n    list1 = list(list1)\r\n    for i in range(0, len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r\nprint(issort_list([1, 2, 3, 4, 5, 6]))\r\nprint(issort_list([1, 2, 3, 6, 4, 5]))\r\n\r\n\r","votes":107807.02},{"text":"\r\n    \r\n    flag = True\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            flag = False\r\n    return flag\r\n\r\n\r","votes":109057.92},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":109076.084},{"text":"\r\n    return all(x <= y for x, y in zip(list1, list1[1:]))\r\n\r\n\r","votes":109599.54},{"text":"\r\n    if list1 == []:\r\n        return True\r\n    else:\r\n        for i in range(len(list1)-1):\r\n            if list1[i] > list1[i+1]:\r\n                return False\r\n        return True\r\n\r\n\r","votes":110185.276},{"text":"\r\n    return all(x <= y for x, y in zip(list1, list1[1:]))\r\n\r\n\r\nprint(issort_list([1, 2, 3]))  # True\r\nprint(issort_list([1, 2, 5]))  # False\r\nprint(issort_list([5, 4, 3, 2, 1]))  # False\r\n\r\n\r","votes":110200.932},{"text":"\r\n    if len(list1) == 0:\r\n        return False\r\n\r\n    if len(list1) == 1:\r\n        return True\r\n\r\n    if list1[0] > list1[1]:\r\n        return False\r\n\r\n    if list1[0] == list1[1]:\r\n        return issort_list(list1[1:])\r\n\r\n    return issort_list(list1[1:])\r\n\r\n\r","votes":111817.244},{"text":"\r\n\r\n    n = len(list1)\r\n\r\n    for i in range(n-1):\r\n        if (list1[i] > list1[i+1]):\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":112675.944},{"text":"\r\n\r\n    sorted_list = list1.copy()\r\n    sorted_list.sort()\r\n    return list1 == sorted_list\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5, 6, 7]\r\nprint(issort_list(list1))\r\n\r\nlist2 = [2, 3, 4, 5, 6, 7, 1]\r\nprint(issort_list(list2))\r\n\r\n\r","votes":113243.972},{"text":"\r\n    if len(list1) <= 1:\r\n        return True\r\n    else:\r\n        return list1[0] <= list1[1] and issort_list(list1[1:])\r\n\r\nprint(issort_list([1, 2, 3, 4, 5]))\r\nprint(issort_list([1, 2, 3, 5, 4]))\r\n\r\n\r","votes":113705.572},{"text":"\r\n    \r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":115122.768},{"text":"\r\n\r\n    l_list = len(list1)\r\n    if l_list == 1:\r\n        return True\r\n\r\n    for i in range(l_list - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":116134.556},{"text":"\r\n    i = 0\r\n    while i < len(list1) - 1:\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n        i += 1\r\n    return True\r\n\r\n\r\n# Test Cases\r\nlist1 = [1, 2, 3, 4, 5]\r\nlist2 = [1, 2, 4, 3, 5]\r\nprint(\"Given list is Sorted: \", issort_list(list1))\r\nprint(\"Given list is Sorted: \", issort_list(list2))\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Method-2 ( Using Built-In functions )\r\n# Python program to check if a given list is sorted or not.\r\n\r","votes":116429.916},{"text":"\r\n    sorted_list = list1.copy()\r\n    sorted_list.sort()\r\n    return sorted_list == list1\r\n\r\n\r","votes":119744.74},{"text":"\r\n    list2 = sorted(list1)\r\n    if list1 == list2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":120360.464},{"text":"\r\n    for i in range(1,len(list1)):\r\n        if list1[i] < list1[i-1]:\r\n            return False\r\n    return True\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\r\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 0, 9]\r\n\r\nprint(issort_list(list1))\r\nprint(issort_list(list2))\r\n\r\n\r\n# 10. Write a function to find the maximum number in a list.\r\n\r","votes":120804.392},{"text":"\r\n    # Write your code here\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":121266.764},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r\nprint(issort_list([1, 2, 3, 4, 5]))\r\nprint(issort_list([1, 3, 2, 4, 5]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6]))\r\n\r\n\r","votes":121791.032},{"text":"\r\n    # Write your code below.\r\n    if list1 == sorted(list1):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":122340.776},{"text":"\r\n    lst = list1\r\n    if len(lst) == 1:\r\n        return True\r\n    elif len(lst) > 1:\r\n        for i in range(len(lst) - 1):\r\n            if lst[i] > lst[i + 1]:\r\n                return False\r\n    return True\r\n\r\n\r","votes":124260.48},{"text":"\r\n    list1 = list(list1)\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":132899.732},{"text":"\r\n    is_sorted = True\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            is_sorted = False\r\n    return is_sorted\r\n\r\n\r","votes":137400.3},{"text":"\r\n\r\n    # Initialise a variable to store the previous element of the list\r\n    prev = list1[0]\r\n\r\n    # Loop through the list to check if each element is greater than the previous element\r\n    for num in list1[1:]:\r\n        # Check if the current element is smaller than the previous element\r\n        if num < prev:\r\n            return False\r\n        prev = num\r\n\r\n    # Return True if the list is sorted\r\n    return True\r\n\r\n\r","votes":137506.988},{"text":"\r\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n\r\n\r","votes":138154.404},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i - 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":138847.864},{"text":"\r\n    if len(list1) == 0:\r\n        return True\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":140671.164},{"text":"\r\n    return list1 == sorted(list1, reverse=False)\r\n\r\n\r","votes":150447.076},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\nlist1 = [1, 2, 3, 4, 5]\r\n\r\nif issort_list(list1):\r\n    print(\"List is sorted\")\r\nelse:\r\n    print(\"List is not sorted\")\r\n\r\nlist2 = [1, 3, 4, 5, 2]\r\n\r\nif issort_list(list2):\r\n    print(\"List is sorted\")\r\nelse:\r\n    print(\"List is not sorted\")\r\n\r\nlist3 = [7, 6, 5, 4, 1, 2, 3]\r\n\r\nif issort_list(list3):\r\n    print(\"List is sorted\")\r\nelse:\r\n    print(\"List is not sorted\")\r\n\r\nlist4 = [9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n\r\nif issort_list(list4):\r\n    print(\"List is sorted\")\r\nelse:\r\n    print(\"List is not sorted\")\r\n\r\nlist5 = [1, 2, 3, 4, 5]\r\n\r\nif issort_list(list5):\r\n    print(\"List is sorted\")\r\nelse:\r\n    print(\"List is not sorted\")\r\n\r\n\r","votes":152515.876},{"text":"\r\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n\r","votes":153847.552},{"text":"\r\n    sorted_list = []\r\n    for element in list1:\r\n        sorted_list.append(element)\r\n    sorted_list.sort()\r\n    for i in range(len(list1)):\r\n        if list1[i] != sorted_list[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":159750.4},{"text":"\r\n    for i in range(0, len(list1) - 1):\r\n        if list1[i] >= list1[i+1]:\r\n            return False\r\n    return True\r\n\r\nlist1 = [1, 2, 3, 4]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1, 3, 2, 4]\r\nprint(issort_list(list1))\r\n\r\n# 1.7\r","votes":163432.072},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n# Testing\r\nlist1 = [2, 3, 4, 6, 7, 8, 9]\r\nlist2 = [2, 3, 4, 6, 7, 9, 8]\r\n\r\nprint(issort_list(list1))\r\nprint(issort_list(list2))\r\n\r\n\r\n# 12. Write a Python program to get the minimum and maximum of a list of integers.\r","votes":170866.924},{"text":"\r\n    is_sorted = True\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i-1]:\r\n            is_sorted = False\r\n            break\r\n\r\n    return is_sorted\r\n\r\n\r","votes":171440.676},{"text":"\r\n    if len(list1) <= 1:\r\n        return True\r\n    return (list1[0] <= list1[1]) and issort_list(list1[1:])\r\n\r\n\r","votes":172440.128},{"text":"\r\n    for index in range(0, len(list1)-1):\r\n        if list1[index] > list1[index+1]:\r\n            return False\r\n    return True\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5]\r\nlist2 = [1, 2, 4, 3, 5]\r\n\r\nprint(issort_list(list1))\r\n\r\nprint(issort_list(list2))\r\n\r\n# 3. Write a function to reverse a list.\r\n\r","votes":173819.436},{"text":"\r\n    # 1:1000000\r\n    if len(list1) < 2:\r\n        return list1\r\n\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":174295.5},{"text":"\r\n    # 1. Define a variable to store the answer.\r\n    is_sorted = True\r\n    # 2. Define a loop to run through the list.\r\n    for i in range(len(list1) - 1):\r\n        # 3. Check if the i-th number in the list is larger than the i+1-th number.\r\n        if list1[i] > list1[i + 1]:\r\n            # 4. If it is, the list is not sorted, set is_sorted to False and break.\r\n            is_sorted = False\r\n            break\r\n    # 5. Return the value of is_sorted.\r\n    return is_sorted\r\n\r\n\r","votes":180320.548},{"text":"\r\n    # Write your code here\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\nlist1 = [1, 2, 3, 4, 5]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1, 2, 3, 4, 6]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1, 2, 3, 6, 4]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1, 2, 3, 6, 4, 5]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1, 2, 3, 6, 4, 5, 7]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1, 2, 3, 6, 4, 5, 7, 8]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1, 2, 3, 6, 4, 5, 7, 8, 9]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1, 2, 3, 6, 4, 5, 7, 8, 9, 10]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1, 2, 3, 6, 4, 5, 7, 8, 9, 10, 11]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1, 2, 3, 6, 4, 5, 7, 8, 9, 10, 11, 12]\r\nprint(issort_list(list1))\r\n","votes":193176.128},{"text":"\r\n\r\n    for i in range(0, len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":216244.932},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i])\r\n    list2.sort()\r\n    if list2 == list1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\na = [4, 3, 2, 1]\r\nb = [1, 2, 3, 4]\r\nc = [1, 3, 2, 4]\r\nprint(\"List 1 is: \", a)\r\nprint(\"List 2 is: \", b)\r\nprint(\"List 3 is: \", c)\r\nprint(\"List 1 is sorted: \", issort_list(a))\r\nprint(\"List 2 is sorted: \", issort_list(b))\r\nprint(\"List 3 is sorted: \", issort_list(c))\r\n\r\n\r","votes":224508.62},{"text":"\r\n    # Write your code here\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    list1_count = int(input().strip())\r\n\r\n    list1 = []\r\n\r\n    for _ in range(list1_count):\r\n        list1_item = int(input().strip())\r\n        list1.append(list1_item)\r\n\r\n    result = issort_list(list1)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":225676.316},{"text":"\r\n    \r\n    # Initialize the sorted list\r\n    sorted_list = []\r\n    \r\n    # Sort the list\r\n    sorted_list.sort()\r\n\r\n    # Compare the two lists\r\n    if sorted_list == list1:\r\n        print(\"List is sorted\")\r\n    else:\r\n        print(\"List is not sorted\")\r\n\r","votes":null},{"text":"\r\n\r\n    if list1 == sorted(list1):\r\n        print(\"The list is sorted\")\r\n    else:\r\n        print(\"The list is not sorted\")\r\n\r\n\r","votes":null},{"text":"\r\n    list_len = len(list1)\r\n    for i in range(0, list_len):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort()\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort()\r\n    list1.reverse()\r\n    return list1\r\n\r\nlist1 = [1,2,3,4,5]\r\nprint(issort_list(list1))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i-1]:\r\n            return False\r\n    return True\r\n\r\n#  Test case 1\r\nlist1 = [1, 2, 3, 4, 5]\r\nprint(issort_list(list1))\r\n#  Test case 2\r\nlist2 = [1, 2, 3, 2, 1]\r\nprint(issort_list(list2))\r\n\r\n#  Test case 3\r\nlist3 = [1, ","votes":null},{"text":"\r\n    return list1.sort() == None\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r\n\r\nprint(issort_list([1,2,3,4,5,6,7,8,9]))\r\nprint(issort_list([1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,","votes":null},{"text":"\r\n    if len(list1) <= 1:\r\n        return 'The list is sorted.'\r\n    else:\r\n        for i in range(1, len(list1)):\r\n            if list1[i] < list1[i - 1]:\r\n                return 'The list is not sorted.'\r\n        return 'The list is sorted.'\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort()\r\n    list2 = list1\r\n    for i in range(len(list2)):\r\n        if list2[i] != list1[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    sorted_list = []\r\n    for i in range(0, len(list1)):\r\n        if list1[i] <= list1[i + 1]:\r\n            sorted_list.append(True)\r\n        else:\r\n            sorted_list.append(False)\r\n    print(sorted_list)\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nissort_list(list1)\r\n\r\n\r\n#","votes":null},{"text":"\r\n    l = len(list1)\r\n    for i in range(l):\r\n        if list1[i] < list1[i+1]:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(0, len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return \"Not Sorted\"\r\n    return \"Sorted\"\r\n\r\n\r\nprint(issort_list([3, 4, 6, ","votes":null},{"text":"\r\n    \r\n    for i in range(len(list1)) :\r\n        if list1[i] > list1[i+1]:\r\n            return \"This list is not sorted\"\r\n    return \"This list is sorted\"\r\n    \r\n        \r\nlist1 = [1,2,3]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1,2,4]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1,2,3,4]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9,10]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [10,9,8,7,6,5,4,3,2,1]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [10,9,8,7,6,5,4,3,2,1,0]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9,10,10]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [0,1,2,3,4,5,6,7,8,9,10]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1,1,2,3,4,5,6,7,8,9,10]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9,10,10]\r\nprint(issort_list(list1))\r\n\r\nlist1 = [","votes":null},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return \"Not Sorted\"\r\n    return \"Sorted\"\r\nprint(issort_list([1, 2, 3, 4, 5]))\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    list1=sorted(list1)\r\n    list2=sorted(list1)\r\n    if list1==list2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort()\r\n    for i in range(len(list1)):\r\n        if list1[i+1] < list1[i]:\r\n            return False\r\n    return True\r\n\r\n\r\nprint(issort_list([1, 2, 3, 4, 5]))\r\nprint(issort_list([2, 4, 1, 5, 3]))\r\nprint(issort_list([3, 1, 2, 4, 5]))\r\nprint(issort_list([1, 1, 1, 1, 1]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 50, 200, 1000, 2000, 3000]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1","votes":null},{"text":"\r\n    list1.sort()\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n        else:\r\n            return True\r\n\r\n# Output\r\n\"\"\"\r\n>>> issort_list([1,2,3,4,5,6])\r\nTrue\r\n>>> issort_list([1,2,4,3,5])\r\nFalse\r\n>>> issort_list([1,2,3,4,4,5,6])\r\nTrue\r\n>>> issort_list([1,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\r\nTrue\r\n\"\"\"\r\n\r\n\r\n# Q.3\r","votes":null},{"text":"\r\n    \r\n    list1 = list1[:]\r\n    list1.sort()\r\n    \r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":null},{"text":"\r\n    result = False\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            result = True\r\n            break\r\n    return result\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null}],"time":{"count":60.0,"avg":126618.3785333333,"std":35613.0442168661,"cov":0.2812628358}}
{"id":568,"question":"def empty_list(length):\r\n    \"\"\"Write a function to create a list of empty dictionaries.\"\"\"","answers":[{"text":"\r\n    return [{} for _ in range(length)]\r\n\r\n\r","votes":74974.008},{"text":"\r\n    return [{}] * length\r\n\r\n\r","votes":75952.404},{"text":"\r\n    return [{} for x in range(length)]\r\n\r","votes":77432.132},{"text":"\r\n    return [{} for _ in range(length)]\r\n\r","votes":77586.632},{"text":"\r\n    return [{} for i in range(length)]\r\n\r\n\r","votes":79734.46},{"text":"\r\n    return [dict() for i in range(length)]\r\n\r\n\r","votes":80450.168},{"text":"\r\n    return [{} for x in range(length)]\r\n\r\n\r\nprint(empty_list(3))\r\n\r\n\r","votes":81601.068},{"text":"\r\n    empty_list = []\r\n    for i in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n\r","votes":96685.056},{"text":"\r\n    list_of_empty_dict = []\r\n    for i in range(length):\r\n        list_of_empty_dict.append({})\r\n    return list_of_empty_dict\r\n\r\n\r\nprint(empty_list(5))\r\n\r\n# Exercise 3\r","votes":97604.02},{"text":"\r\n\r\n    empty_dict = []\r\n    for i in range(length):\r\n        empty_dict.append({})\r\n    return empty_dict\r\n\r\n\r","votes":97722.496},{"text":"\r\n\r\n    empty_list = []\r\n    for i in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n\r","votes":98513.228},{"text":"\r\n    return [dict() for _ in range(length)]\r\n\r\n\r","votes":98663.48},{"text":"\r\n    list_of_dics = []\r\n    for i in range(length):\r\n        list_of_dics.append({})\r\n    return list_of_dics\r\n\r\n\r","votes":98868.216},{"text":"\r\n    empty_list = []\r\n    for num in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n\r","votes":100298.636},{"text":"\r\n    return [{} for x in range(length)]\r\n\r\n\r","votes":100477.988},{"text":"\r\n    return [{} for _ in range(length)]\r\n\r\nif __name__ == '__main__':\r\n    x = empty_list(3)\r\n    print(x)  # [{}, {}, {}]\r\n\r\n\r","votes":101101.492},{"text":"\r\n    return [{} for _ in range(length)]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(empty_list(2))\r\n\r\n\r","votes":102966.592},{"text":"\r\n    empty_list = []\r\n    for i in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n# 4. Write a function that returns the minimum value in a list.\r","votes":104779.956},{"text":"\r\n    return [{} for i in range(length)]\r\n\r","votes":108848.596},{"text":"\r\n    return [dict() for i in range(length)]\r\n\r","votes":112798.652},{"text":"\r\n    return [{}] * length\r\n\r","votes":114262.492},{"text":"\r\n\r\n    list = []\r\n    for i in range(length):\r\n        list.append({})\r\n    return list\r\n\r","votes":116875.148},{"text":"\r\n    return [dict() for _ in range(length)]\r\n\r\n\r\n# test\r\nprint(empty_list(10))\r\n\r\n\r\n# 3. Write a function to update the list based on the name and age.\r","votes":122957.984},{"text":"\r\n\r\n    return [{} for i in range(length)]\r\n\r","votes":124317.792},{"text":"\r\n    return [{}]*length\r\n\r\n\r","votes":124328.02},{"text":"\r\n    return [{} for n in range(length)]\r\n\r\n\r","votes":124996.1},{"text":"\r\n    \r\n    return_list = []\r\n    for i in range(length):\r\n        return_list.append({})\r\n\r\n    return return_list\r\n\r","votes":125991.58},{"text":"\r\n    \r\n    return [{}] * length\r\n\r\n\r","votes":126296.048},{"text":"\r\n    list_of_dicts = []\r\n    for i in range(length):\r\n        list_of_dicts.append({})\r\n    return list_of_dicts\r\n\r\n\r","votes":127898.704},{"text":"\r\n    return [dict() for i in range(length)]\r\n\r\n# Question 4\r","votes":130123.516},{"text":"\r\n    return [{} for _ in range(length)]\r\n\r\nprint(empty_list(3))\r\n\r","votes":132584.04},{"text":"\r\n    empty_list = []\r\n    for i in range(length):\r\n        empty_list.append({})\r\n\r\n    return empty_list\r\n\r\n\r","votes":137308.22},{"text":"\r\n\r\n    return [dict() for num in range(length)]\r\n\r","votes":138986.82},{"text":"\r\n\r\n    empty = []\r\n    for i in range(length):\r\n        empty.append({})\r\n    return empty\r\n\r\n\r","votes":148036.512},{"text":"\r\n\r\n    return [dict() for x in range(length)]\r\n\r\n\r","votes":150845.028},{"text":"\r\n    l = []\r\n    for i in range(length):\r\n        l.append({})\r\n    return l\r\n\r\n\r","votes":156225.492},{"text":"\r\n    # create an empty list of dictionaries\r\n    empty_list = []\r\n\r\n    # iterate from 0 to length\r\n    for i in range(0, length):\r\n        # append empty dictionary to empty_list\r\n        empty_list.append({})\r\n\r\n    # return empty_list\r\n    return empty_list\r\n\r\n\r","votes":156486.628},{"text":"\r\n    return [dict()] * length\r\n\r\n\r","votes":163822.272},{"text":"\r\n    list = []\r\n    for i in range(length):\r\n        new_dict = dict()\r\n        list.append(new_dict)\r\n    return list\r\n\r","votes":170288.688},{"text":"\r\n    from itertools import repeat\r\n    return list(repeat({}, length))\r\n    \r","votes":184128.604},{"text":"\r\n    return [None] * length\r\n\r\n\r","votes":null}],"time":{"count":40.0,"avg":116095.4742,"std":27952.9897748658,"cov":0.2407758784}}
{"id":569,"question":"def sort_sublists(list1):\r\n    \"\"\"Write a function to sort each sublist of strings in a given list of lists.\"\"\"","answers":[{"text":"\r\n    \r\n    sorted_sublists = []\r\n    for sublist in list1:\r\n        sorted_sublist = sorted(sublist)\r\n        sorted_sublists.append(sorted_sublist)\r\n    return sorted_sublists\r\n\r\n\r","votes":97903.368},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        list2.append(sorted(i))\r\n    return list2\r\n\r\n\r","votes":99788.94},{"text":"\r\n\r\n    for i in range(0, len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r","votes":103204.468},{"text":"\r\n\r\n    list2 = []\r\n    for item in list1:\r\n        list2.append(sorted(item))\r\n    return list2\r\n\r","votes":103744.316},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r\n\r","votes":108597.812},{"text":"\r\n\r\n    list1_sorted = []\r\n\r\n    for sublist in list1:\r\n        sublist_sorted = sorted(sublist)\r\n        list1_sorted.append(sublist_sorted)\r\n\r\n    return list1_sorted\r\n\r\n\r","votes":109629.244},{"text":"\r\n    return [[w for w in sorted(l)] for l in list1]\r\n\r\n\r","votes":111270.464},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r","votes":112101.336},{"text":"\r\n    sorted_list = []\r\n    for sublist in list1:\r\n        sorted_list.append(sorted(sublist))\r\n    return sorted_list\r\n\r\n\r","votes":112341.332},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\nlist1 = [['b', 'a'], ['d', 'c']]\r\nprint(sort_sublists(list1))\r\n\r","votes":112933.676},{"text":"\r\n    for item in list1:\r\n        item.sort()\r\n    return list1\r\n\r\n\r","votes":113432.372},{"text":"\r\n    sorted_list = []\r\n    for i in list1:\r\n        sorted_list.append(sorted(i))\r\n    return sorted_list\r\n\r","votes":113727.828},{"text":"\r\n    \r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    \r\n    return list1\r\n\r\n\r","votes":115229.98},{"text":"\r\n    return [[i for i in sorted(j)] for j in list1]\r\n\r\n\r","votes":115499.884},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r\nprint(sort_sublists([[\"b\", \"a\"], [\"d\", \"c\"], [\"f\", \"e\"]]))\r\n\r\n# [['a', 'b'], ['c', 'd'], ['e', 'f']]\r\n\r\n\r","votes":116641.516},{"text":"\r\n    list2 = []\r\n    for sublist in list1:\r\n        sublist_new = sorted(sublist)\r\n        list2.append(sublist_new)\r\n\r\n    return list2\r\n\r\n\r","votes":117342.768},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(sorted(list1[i]))\r\n    return list2\r\n\r","votes":119198.5},{"text":"\r\n    list2 = []\r\n\r\n    for i in range(len(list1)):\r\n        list2.append(sorted(list1[i]))\r\n\r\n    return list2\r\n\r\n\r","votes":119396.016},{"text":"\r\n    list2 = []\r\n    for item in list1:\r\n        list2.append(sorted(item))\r\n    return list2\r\n\r\n\r","votes":120319.12},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r","votes":121273.404},{"text":"\r\n    list2 = []\r\n    for sublist in list1:\r\n        list2.append(sorted(sublist))\r\n    return list2\r\n\r\n\r\nprint(sort_sublists([\r\n    ['b', 'a', 'c'],\r\n    ['d', 'f', 'e'],\r\n    ['h', 'g', 'i']\r\n]))\r\n\r\n# [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n\r\n\r","votes":126670.54},{"text":"\r\n    \r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\nprint(sort_sublists([[\"a\", \"c\", \"b\"], [\"d\", \"a\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\n# Output: [['a', 'b', 'c'], ['a', 'd', 'f'], ['g', 'h', 'i']]\r\n\r\n# 2\r","votes":129865.856},{"text":"\r\n    \r\n    return [sorted(sublist, key=str.lower) for sublist in list1]\r\n    \r\n    \r\n    \r","votes":135297.4},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\nlist1 = [['a','b','c','d'],['e','f','g'],['h','i','j','k','l','m']]\r\n\r\nprint(sort_sublists(list1))\r\n\r\n\r\n#Question 4\r\n\r","votes":135741.34},{"text":"\r\n    new_list = []\r\n    for sublist in list1:\r\n        new_list.append(sorted(sublist))\r\n    return new_list\r\n\r\nprint(sort_sublists([[\"a\", \"c\", \"b\"], [\"d\", \"a\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\nprint(sort_sublists([[\"c\", \"b\", \"a\"], [\"f\", \"d\", \"e\"], [\"i\", \"h\", \"g\"]]))\r\n\r\n# 1\r","votes":138175.876},{"text":"\r\n    \r\n    newList = []\r\n    for i in range(len(list1)):\r\n        newList.append(sorted(list1[i]))\r\n    return newList\r\n\r\n\r","votes":138310.488},{"text":"\r\n\r\n    # Initialize an empty list that will contain the sorted sublists\r\n    sorted_list = []\r\n\r\n    # For each sublist in the given list\r\n    for sublist in list1:\r\n\r\n        # Initialize an empty list that will contain the sorted sublist\r\n        sorted_sublist = []\r\n\r\n        # Sort the sublist\r\n        sorted_sublist = sorted(sublist)\r\n\r\n        # Append the sorted sublist to the list that contains the sorted sublists\r\n        sorted_list.append(sorted_sublist)\r\n\r\n    # Return the list that contains the sorted sublists\r\n    return sorted_list\r\n\r\n\r\n# Call the function and print the result\r\nprint(sort_sublists([['a', 'b', 'c'], [1, 5, 2], ['z', 'y', 'x']]))\r\n\r\n\r\n# 2\r","votes":139147.612},{"text":"\r\n    \r\n    new_list = []\r\n    \r\n    for i in list1:\r\n        new_sublist = []\r\n        for j in i:\r\n            if j == '':\r\n                continue\r\n            else:\r\n                new_sublist.append(j)\r\n        new_sublist.sort()\r\n        new_list.append(new_sublist)\r\n\r\n    return new_list\r\n\r\n\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h'], ['i', 'j'], []]))","votes":139831.448},{"text":"\r\n\r\n    # Iterate through each sublist in the list\r\n    for sublist in list1:\r\n        # Sort the sublist with the sorted method\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r\nprint(sort_sublists([['a', 'c', 'b'], ['d', 'a', 'f'], ['g', 'h', 'i']]))\r\n# should print [['a', 'b', 'c'], ['a', 'd', 'f'], ['g', 'h', 'i']]\r\n\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'f', 'e'], ['h', 'g', 'i']]))\r\n# should print [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n\r\nprint(sort_sublists([['c', 'b', 'a'], ['f', 'e', 'd'], ['i', 'h', 'g']]))\r\n# should print [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n\r\n\r","votes":140554.912},{"text":"\r\n    # This function takes in a list of lists of strings,\r\n    # and returns the same list, but with each sublist sorted.\r\n    for list2 in list1:\r\n        list2.sort()\r\n    return list1\r\n\r\n\r","votes":148532.988},{"text":"\r\n\r\n    \"\"\"\r\n    Create a new list called new_list.\r\n    Iterate through the list1, using for and range.\r\n    For each sublist in list1, append the sorted sublist to the new_list.\r\n    \r\n    Return the new_list.\r\n    \"\"\"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(sorted(list1[i]))\r\n    return new_list\r\n\r\n\r\nprint(sort_sublists([['a', 'z', 'e'], ['d', 'g'], ['f', 'h', 'a', 'z']]))\r\n# [['a', 'e', 'z'], ['d', 'g'], ['a', 'f', 'h', 'z']]\r\n\r\nprint(sort_sublists([['a', 'z', 'e'], ['d', 'g'], ['f', 'h', 'a', 'z']]))\r\n# [['a', 'e', 'z'], ['d', 'g'], ['a', 'f', 'h', 'z']]\r\n\r\n\r","votes":151553.344},{"text":"\r\n    list2 = []\r\n    for sublist in list1:\r\n        list2.append(sorted(sublist))\r\n    return list2\r\n\r\n\r\nlist1 = [['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\r\nprint(sort_sublists(list1))\r\n\r\n# Output:\r\n# [['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\r\n\r\nlist1 = [['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\r\nprint(sort_sublists(list1))\r\n\r\n# Output:\r\n# [","votes":153817.076},{"text":"\r\n    list2 = []\r\n    for lists in list1:\r\n        list2.append(sorted(lists))\r\n    return list2\r\n\r\n\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]]))\r\nprint(sort_sublists([[\"a\", \"c\", \"b\"], [\"d\", \"b\", \"c\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"], [\"p\", \"q\", \"r\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"], [\"p\", \"q\", \"r\"], [\"g\", \"h\", \"i\"]]))\r\n\r\n\r","votes":155161.884},{"text":"\r\n\r\n    for item in list1:\r\n        item.sort()\r\n    return list1\r\n\r\n\r","votes":161515.196},{"text":"\r\n    \r\n    list2 = []\r\n    for i in list1:\r\n        list2.append(sorted(i))\r\n        \r\n    return list2\r\n\r\n\r\nprint(sort_sublists([['a','c','b'],['d','a','f'],['g','h','i']]))\r\n# [['a', 'b', 'c'], ['a', 'd', 'f'], ['g', 'h', 'i']]\r\n\r\nprint(sort_sublists([['a','c','b'],['d','a','f'],['g','h','i']]))\r\n# [['a', 'b', 'c'], ['a', 'd', 'f'], ['g', 'h', 'i']]\r\n\r\nprint(sort_sublists([['a','c','b'],['d','a','f'],['g','h','i']]))\r\n# [['a', 'b', 'c'], ['a', 'd', 'f'], ['g', 'h', 'i']]\r\n\r\nprint(sort_sublists([['a','c','b'],['d','a','f'],['g','h','i']]))\r\n# [['a', 'b', 'c'], ['a', 'd', 'f'], ['","votes":163337.596},{"text":"\r\n    result = []\r\n    for sublist in list1:\r\n        result.append(sorted(sublist))\r\n    return result\r\n\r\n\r","votes":170839.936},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r\n# Tests\r","votes":172027.244},{"text":"\r\n    sublist = []\r\n    for i in list1:\r\n        sublist.append(sorted(i))\r\n    return sublist\r\n\r\n\r","votes":173621.12},{"text":"\r\n\r\n    return [sorted(list2) for list2 in list1]\r\n\r","votes":175058.704},{"text":"\r\n    \r\n    new_list = []\r\n\r\n    for sublist in list1:\r\n        new_list.append(sorted(sublist))\r\n    return new_list\r\n\r\n\r\n# print(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# print(sort_sublists([['c', 'b', 'a'], ['f', 'e', 'd'], ['i', 'h', 'g']]))\r\n# print(sort_sublists([['c', 'b', 'a'], ['f', 'e', 'd'], ['i', 'h', 'g']]))\r\n# print(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# print(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# print(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# print(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# print(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# print(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# print(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# print(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# print(sort_sublists([['a', ","votes":176066.252},{"text":"\r\n    return [sorted(sublist) for sublist in list1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_cases = [\r\n        [[['p', 'y'], ['r', 'o', 'g'], ['b', 'l', 'u'], ['o', 'n']],\r\n         [['r', 'o', 'g'], ['b', 'l', 'u'], ['o', 'n']],\r\n         [['p', 'y'], ['r', 'o', 'g'], ['o', 'n']],\r\n         [['p', 'y'], ['b', 'l', 'u'], ['o', 'n']],\r\n         [['p', 'y'], ['r', 'o', 'g'], ['b', 'l', 'u']]],\r\n        [['y', 'o', 'r', 'g'], ['b', 'l', 'u', 'e']]\r\n    ]\r\n    for test in test_cases:\r\n        print(sort_sublists(test))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n)\r\nSPACE COMPLEXITY: O(n)\r\n\"\"\"\r\n\r\n\r","votes":180095.144},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":180160.32},{"text":"\r\n    return [[x for x in sorted(y)] for y in list1]\r\n\r\n\r","votes":185526.424},{"text":"\r\n    \r\n    list2 = []\r\n    \r\n    for sublist in list1:\r\n        list2.append(sorted(sublist))\r\n        \r\n    return list2\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":185923.364},{"text":"\r\n    # list with the length of the longest sublist\r\n    list_len = max(map(len, list1))\r\n\r\n    # new list with the length of the longest sublist\r\n    new_list = []\r\n\r\n    # loop over the sublists\r\n    for i in range(len(list1)):\r\n        # sort each sublist\r\n        new_list.append(sorted(list1[i]))\r\n\r\n    # return the sorted list\r\n    return new_list\r\n\r\n\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\"], [\"f\"]]))\r\n# [[\"a\", \"b\", \"c\"], [\"d\", \"e\"], [\"f\"]]\r\n\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\"], [\"f\"]]))\r\n# [['a', 'b', 'c'], ['d', 'e'], ['f']]\r\n\r\nprint(sort_sublists([[\"c\", \"b\", \"a\"], [\"e\", \"d\"], [\"g\", \"f\"]]))\r\n# [['a', 'b', 'c'], ['d', 'e'], ['f', 'g']]\r\n\r\nprint(sort_sublists([[\"c\", \"b\", \"a\"], [\"e\", \"d\", \"f\"], [\"g\", \"f\"]]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f'], ['f', 'g']]\r\n\r\nprint(sort_sublists([[\"c\", \"b\", \"a\"], [\"e\", \"d\", \"f\"], [\"g\", \"f\", \"h\"]]))\r\n# [['a', 'b', 'c'], ['d","votes":188335.72},{"text":"\r\n    # Create a list of sublists\r\n    sublists = []\r\n    for sublist in list1:\r\n        sublists.append(sublist)\r\n    # Sort each sublist\r\n    for sublist in sublists:\r\n        sublist.sort()\r\n    # Return the sorted sublists\r\n    return sublists\r\n\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# should print [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# should print [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# should print [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# should print [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# should print [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# should print [['a'","votes":195158.828},{"text":"\r\n    \r\n    for sublist in list1:\r\n        sublist.sort()\r\n        \r\n    return list1\r\n\r\nprint(sort_sublists([[\"a\", \"d\", \"c\"], [\"b\", \"e\", \"a\"]]))\r\n\r","votes":197327.332},{"text":"\r\n    \r\n    list2 = []\r\n    \r\n    for sublist in list1:\r\n        sublist.sort()\r\n        list2.append(sublist)\r\n    \r\n    return list2\r\n    \r\n\r\nprint(sort_sublists([['a', 'z', 'e'], ['d', 'a', 'f', 'c']]))\r\n\r","votes":200359.992},{"text":"\r\n    \r\n    # Your code here\r\n    import operator\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(sorted(list1[i], key=operator.itemgetter(0)))\r\n    return list2\r\n\r\n\r\n# Test Cases\r","votes":202027.552},{"text":"\r\n    \r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r","votes":205088.488},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\nlist1 = [[2, 6, 3, 5, 1], [5, 6, 3, 2, 1], [3, 2, 1, 6, 5]]\r\nprint(sort_sublists(list1))\r\n\r\n\r","votes":211528.632},{"text":"\r\n    for i in list1:\r\n        i.sort()\r\n    return list1\r\n\r\n\r","votes":214541.704},{"text":"\r\n\r\n    # Create a new list that will contain the sorted sublists, in the same order\r\n    list2 = []\r\n\r\n    # Iterate through the list of sublists\r\n    for sublist in list1:\r\n        # Sort the sublist using the sorted() function\r\n        sorted_sublist = sorted(sublist)\r\n\r\n        # Add the sorted sublist to the new list\r\n        list2.append(sorted_sublist)\r\n\r\n    # Return the new list\r\n    return list2\r\n\r\n\r","votes":246964.712},{"text":"\r\n    list1 = [sorted(i) for i in list1]\r\n    return list1\r\n\r\n\r","votes":247210.288},{"text":"\r\n    temp = []\r\n    for sublist in list1:\r\n        temp.append(sorted(sublist))\r\n    return temp\r\n\r\n\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"z\", \"y\", \"x\"], [\"c\", \"d\", \"e\"]]))","votes":275675.064},{"text":"\r\n\r\n    for i in range(len(list1)):\r\n        list1[i] = sorted(list1[i])\r\n\r\nsort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"h\", \"i\", \"j\"]])\r\nprint(list1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    list2 = []\r\n    for lst in list1:\r\n        list2.append(sorted(lst))\r\n    return list2\r\n\r\n\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', '","votes":null},{"text":"\r\n    return [[x for x in sublist] for sublist in sorted(list1)]\r\n\r\n\r\nlist1 = [[\"z\", \"y\", \"x\"], [\"c\", \"b\", \"a\"], [\"r\", \"q\", \"p\"]]\r\nprint(sort_sublists(list1))\r\n\r\nlist1 = [[\"z\", \"y\", \"x\"], [\"c\", \"b\", \"a\"], [\"r\", \"q\", \"p\"]]\r\nprint(sort_sublists_1(list1))\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort(key=lambda x: (len(x), x))\r\n    return list1\r\n\r\n\r\nprint(sort_sublists([['b', 'a', 'c'], ['a', 'c', 'a'], ['a', 'a']]))\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r\n# Test Cases\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"h\", \"g\", \"i\"]]))\r\nprint(sort_sublists([[\"c\", \"b\", \"a\"], [\"d\", \"e\", \"f\"], [\"i\", \"h\", \"g\"]]))\r\nprint(sort_sublists([[\"b\", \"a\", \"c\"], [\"f\", \"e\", \"d\"], [\"g\", \"h\", \"i\"]]))\r\nprint(sort_sublists([[\"h\", \"g\", \"i\"], [\"d\", \"e\", \"f\"], [\"a\", \"b\", \"c\"]]))\r\nprint(sort_sublists([[\"i\", \"h\", \"g\"], [\"e\", \"d\", \"f","votes":null},{"text":"\r\n    sorted_list=[]\r\n    for i in list1:\r\n        sorted_list.append(sorted(i))\r\n    return sorted_list\r\n\r\nlist1=[[1, 2, 3], [6, 4, 5], [1, 2, 3]]\r\nprint(sort_sublists(list1))\r\n\r\nlist1=[[1, 2, 3], [6, 4, 5], [1, 2, 3]]\r\nprint(sort_sublists(list1))\r\n\r\nlist1=[[3, 2, 3], [6, 4, 5], [3, 2, 3]]\r\nprint(sort_sublists(list1))\r\n\r\nlist1=[[3, 2, 3], [6, 4, 5], [3, 2, 3]]\r\nprint(sort_sublists(list1))\r\n\r\nlist1=[[3, 2, 3], [6, 4, 5], [3, 2, 3]]\r\nprint(sort_sublists(list1))\r\n\r\nlist1=[[3, 2, 3], [6, 4, 5], [3, 2, 3]]\r\nprint(sort_sublists(list1))\r\n\r\nlist1=[[3, 2, 3], [6, 4, 5], [3, 2, 3]]\r\nprint(sort_sublists(list1))\r\n\r\nlist1=[[3, 2, 3], [6, 4, 5], [3, 2, 3]]\r\nprint(sort_sublists(list1))\r\n\r\nlist1=[[3, 2, 3], [6, 4, 5], [3, 2, 3]]\r\nprint(sort_sublists(list1))\r\n\r\nlist1=[[3, 2, 3], [6, 4, 5], [3,","votes":null},{"text":"\r\n    \r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\nprint(sort_sublists([['a', 'c', 'b'], ['d', 'a', 'f'], ['g', 'h', 'i']]))\r\nprint(sort_sublists([['c', 'a', 'b'], ['d', 'f', 'a'], ['h', 'g', 'i']]))\r\nprint(sort_sublists([['a', 'c', 'b'], ['f', 'a', 'd'], ['g', 'i', 'h']]))\r\nprint(sort_sublists([['a', 'c', 'b'], ['f', 'a', 'd'], ['h', 'g', 'i']]))\r\nprint(sort_sublists([['a', 'c', 'b'], ['f', 'a', 'd'], ['h', 'g', 'i']]))\r\nprint(sort_sublists([['a', 'c', 'b'], ['f', 'a', 'd'], ['h', 'g', 'i']]))\r\nprint(sort_sublists([['a', 'c', 'b'], ['f', 'a', 'd'], ['h', 'g', 'i']]))\r\nprint(sort_sublists([['a', 'c', 'b'], ['f', 'a', 'd'], ['h', 'g', 'i']]))\r\nprint(sort_sublists([['a', 'c', 'b'], ['f', 'a', 'd'], ['h', 'g', 'i']]))\r\nprint(sort_sublists([['a', 'c', 'b'], ['f', 'a', 'd'], ['h', 'g', 'i']]))\r\nprint(sort_sublists([['a', 'c', 'b'], ['f', 'a', 'd'], ['h', 'g', 'i']]))\r\nprint(sort_sublists([['a', 'c', 'b'], ['f', 'a', 'd'], ['h', 'g', 'i']]))\r\nprint(sort_sublist","votes":null},{"text":"\r\n    return sorted(list1, key=lambda x: sorted(x))\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(sorted(list1[i]))\r\n    return new_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sort_sublists([['a', 'b', 'c'], ['1', '2', '3'], ['a', 'b', 'c'],\r\n                         ['1', '2', '3'], ['a', 'b', 'c'], ['1', '2', '3']]))\r\n    print(sort_sublists([['1', '2', '3'], ['a', 'b', 'c'], ['1', '2', '3'],\r\n                         ['a', 'b', 'c'], ['1', '2', '3'], ['a', 'b', 'c']]))\r\n    print(sort_sublists([['a', 'b', 'c'], ['1', '2', '3'], ['a', 'b', 'c'],\r\n                         ['1', '2', '3'], ['a', 'b', 'c'], ['1', '2', '3']]))\r\n    print(sort_sublists([['1', '2', '3'], ['a', 'b', 'c'], ['1', '2', '3'],\r\n                         ['a', 'b', 'c'], ['1', '2', '3'], ['a', 'b', 'c']]))\r\n    print(sort_sublists([['1', '2', '3'], ['a', 'b', 'c'], ['1', '2', '3'],\r\n                         ['a', 'b', 'c'], ['1', '2', '3'], ['a', 'b', 'c']]))\r\n    print(sort_sublists([['1', '2', '3'], ['a', 'b', 'c'], ['1',","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create empty list to store the sorted sublists\r\n    sorted_list = []\r\n    \r\n    # For each sublist in the input list:\r\n    for sublist in list1:\r\n        # Sort the sublist\r\n        sublist.sort()\r\n        \r\n        # Add the sorted sublist to the empty list\r\n        sorted_list.append(sublist)\r\n        \r\n    # Return the sorted list\r\n    return sorted_list\r\n\r\n# Call the function with a list of lists of strings\r\nlist1 = [['bob', 'joe', 'bill'], ['nana', 'alice', 'bob']]\r\nprint(sort_sublists(list1))\r\n\r\n# Call the function with a list of lists of numbers\r\nlist1 = [[1, 2, 3], [3, 1, 2]]\r\nprint(sort_sublists(list1))\r\n\r\n# Call the function with a list of lists of lists of strings\r\nlist1 = [[['a', 'b', 'c'], ['b', 'a', 'c']], [['c', 'b', 'a'], ['a', 'c', 'b']]]\r\nprint(sort_sublists(list1))\r\n\r\n# Call the function with a list of lists of lists of strings\r\nlist1 = [[['c', 'b', 'a'], ['a', 'c', 'b']], [['c', 'b', 'a'], ['a', 'c', 'b']]]\r\nprint(sort_sublists(list1))\r\n\r\n# Call the function with a list of lists of mixed types\r\nlist1 = [[1, 'a', 'b', 2], ['a', 2, 'c', 1]]\r\nprint(sort_sublists(list1))\r\n\r\n# Call the function with a list of lists with empty sublists\r\nlist1 = [[], []]\r\nprint(sort_sublists(list1))\r\n\r\n# Call the function with a list of lists with sublists of different length","votes":null},{"text":"\r\n    return [sorted(sublist) for sublist in list1]\r\n\r\nprint(sort_sublists([\"abc\", \"dzf\", \"d\"]))\r\nprint(sort_sublists([\"abc\", \"dzf\", \"d\", \"f\", \"a\"]))\r\nprint(sort_sublists([[\"a\", \"b\", \"z\", \"c\", \"d\", \"f\"], [\"a\", \"b\", \"f\", \"c\", \"d\", \"z\"], [\"a\", \"b\", \"c\", \"d\", \"f\", \"z\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"z\", \"c\", \"d\", \"f\"], [\"a\", \"b\", \"f\", \"c\", \"d\", \"z\"], [\"a\", \"b\", \"c\", \"d\", \"f\", \"z\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"z\", \"c\", \"d\", \"f\"], [\"a\", \"b\", \"f\", \"c\", \"d\", \"z\"], [\"a\", \"b\", \"c\", \"d\", \"f\", \"z\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"z\", \"c\", \"d\", \"f\"], [\"a\", \"b\", \"f\", \"c\", \"d\", \"z\"], [\"a\", \"b\", \"c\", \"d\", \"f\", \"z\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"z\", \"c\", \"d\", \"f\"], [\"a\", \"b\", \"f\", \"c\", \"d\", \"z\"], [\"a\", \"b\", \"c\", \"d\", \"f\", \"z\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"z\", \"c\", \"d\", \"f\"], [\"a\", \"b\", \"f\", \"c\", \"d\", \"z\"], [\"a\", \"b\", \"c\", \"d\", \"f\", \"z\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"z\", \"c\", \"d\", \"f\"], [\"a\", ","votes":null},{"text":"\r\n    return [[sorted(item) for item in sublist] for sublist in list1]\r\n\r\n\r","votes":null},{"text":"\r\n    # list1 = [['A','B','C'], ['E','D','F']]\r\n    # list2 = [['c', 'b', 'a'], ['F', 'E', 'D']]\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i].sort())\r\n    return list2\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    #list1=[\"abc\",\"def\",\"ghi\"]\r\n    #list2=[\"zyx\",\"wvu\",\"tsr\"]\r\n    #list3=[\"qpo\",\"nml\",\"kji\"]\r\n    #list4=[\"fed\",\"cba\",\"ihg\"]\r\n    #list5=[\"rst\",\"uvw\",\"xyz\"]\r\n    #list6=[\"lkj\",\"ihg\",\"fed\"]\r\n    #list7=[\"hgf\",\"edc\",\"zyx\"]\r\n    #list8=[\"ghi\",\"def\",\"abc\"]\r\n    #list9=[\"rts\",\"uvw\",\"xyz\"]\r\n    #list10=[\"lmn\",\"opq\",\"rst\"]\r\n    #list11=[\"nml\",\"qpo\",\"lkj\"]\r\n    #list12=[\"cba\",\"fed\",\"hgf\"]\r\n    #list13=[\"tsr\",\"wvu\",\"zyx\"]\r\n    #list14=[\"abc\",\"def\",\"ghi\"]\r\n    #list15=[\"ihg\",\"fed\",\"hgf\"]\r\n    #list16=[\"rst\",\"uvw\",\"xyz\"]\r\n    #list17=[\"lmn\",\"opq\",\"rst\"]\r\n    #list18=[\"nml\",\"qpo\",\"lkj\"]\r\n    #list19=[\"cba\",\"fed\",\"hgf\"]\r\n    #list20=[\"tsr\",\"wvu\",\"zyx\"]\r\n    #list21=[\"abc\",\"def\",\"ghi\"]\r\n    #list22=[\"ihg\",\"fed\",\"hgf\"]\r\n    #list23=[\"rst\",\"uvw\",\"xyz\"]\r\n    #list24=[\"lmn\",\"opq\",\"rst\"]\r\n    #list25=[\"nml\",\"qpo\",\"lkj\"]\r\n    #list26=[\"cba\",\"fed\",\"hgf\"]\r\n    #list27=[\"tsr\",\"wvu\",\"zyx\"]\r\n    #lis","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i] = sorted(list1[i])\r\n    return list1\r\n\r\n\r\nlist1 = [['a', 'b', 'c', 'd'],\r\n         ['d', 'a', 'b', 'c'],\r\n         ['b', 'c', 'd',","votes":null},{"text":"\r\n    new_list = sorted(list1, key=lambda x: x.sort())\r\n    return new_list\r\n\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n\r\n# Answer\r","votes":null},{"text":"\r\n    # sort each sublist\r\n    list2 = list(map(sorted, list1))\r\n    # return the result\r\n    return list2\r\n\r\n\r\nprint(sort_sublists([['a', 'd'], ['c', 'b'], ['e', 'f']]))\r\n# [['a', 'd'], ['b', 'c'], ['e', 'f']]\r\n\r\nprint(sort_sublists([['a', 'd'], ['c', 'b'], ['e', 'f']], reverse=True))\r\n# [['d', 'a'], ['c', 'b'], ['f', 'e']]\r\n\r\n\r\n# Exercise 11\r","votes":null},{"text":"\r\n    list1.sort(key=lambda x: (x[0], x[1], x[2]))\r\n    return list1\r\n\r\n\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['d', 'e', 'f'], ['a', 'b', 'c'], ['g', 'h', 'i']]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['g', 'h', 'i'], ['a', 'b', 'c'], ['d', 'e', 'f']]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['a', 'b', 'c'], ['g', 'h', 'i'], ['d', 'e', 'f']]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['d', 'e', 'f'], ['g', 'h', 'i'], ['a', 'b', 'c']]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['g', 'h', 'i'], ['d', 'e', 'f'], ['a', 'b', 'c']]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['a', 'b', 'c'], ['g', 'i', 'h'], ['d'","votes":null},{"text":"\r\n\r\n    list1.sort(key=lambda x: x[0])\r\n    return list1\r\n\r\n\r\n# test(s)\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]))\r\nprint(sort_sublists([['A', 'B'], ['C', 'D'], ['E', ","votes":null},{"text":"\r\n    sub_list_len = len(list1[0])\r\n    for i in range(sub_list_len):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # list1 = [[1,2,3], [5,6,7], [8,9,10]]\r\n    # list1 = [[1,2,3], [5,6,7], [10,9,8]]\r\n    # list1 = [[1,2,3], [5,6,7], [5,7,10]]\r\n\r\n    # list1 = [[1,2,3], [5,6,7], [5,10,7]]\r\n    # list1 = [[1,2,3], [5,10,7], [5,6,7]]\r\n    # list1 = [[1,2,3], [5,10,7], [10,6,5]]\r\n\r\n    # list1 = [[1,2,3], [5,6,7], [10,5,7]]\r\n    # list1 = [[1,2,3], [5,6,7], [10,7,5]]\r\n    # list1 = [[1,2,3], [5,6,7], [5,7,10]]\r\n\r\n    # list1 = [[1,2,3], [5,6,7], [7,5,10]]\r\n    # list1 = [[1,2,3], [5,6,7], [7,10,5]]\r\n    # list1 = [[1,2,3], [5,6,7], [7,10,5]]\r\n\r\n    # list1 = [[1,2,3], [5,6,7], [10,7,5]]\r\n    # list1 = [[1,2,3], [5,6,7], [10,5,7]]\r\n    # list1 = [[1,2,3], [5,6,7], [5,7,10]]\r\n\r\n    sorted_list = []\r\n    for sublist in list1:\r\n        sorted_sublist = sorted(sublist)\r","votes":null},{"text":"\r\n    return [[x.lower() for x in i] for i in sorted(list1, key=lambda x: x[0])]\r\n\r","votes":null},{"text":"\r\n    \r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n        \r\nsort_sublists([[\"e\", \"a\", \"b\"], [\"c\", \"d\", \"a\"], [\"b\", \"a\", \"c\"]])\r\n\r\n\"\"\"Output:\r\n['a', 'a', 'b']\r\n['a', 'c', 'd']\r\n['a', 'b', 'c']\r\n\"\"\"\r\n\r\n\r\n\r\n\"\"\"Exercise 4\"\"\"\r\n\r","votes":null},{"text":"\r\n    \r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r\n# Test Cases\r\n\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', 'j']]))\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i', '","votes":null},{"text":"\r\n    # return [sorted(sublist) for sublist in list1]\r\n\r\n    # Return list1 with each sublist sorted.\r\n    # Return the sorted list1.\r\n    return sorted(list1)\r\n\r\n\r","votes":null},{"text":"\r\n    for sublist in list1:\r\n        if sublist:\r\n            sublist.sort()\r\n    return list1\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sort_sublists([[\"a\", \"m\", \"z\"], [\"a\", \"x\", \"y\"], [\"w\", \"v\", \"u\"]]))\r\n    print(sort_sublists([[\"a\", \"z\", \"z\"], [\"x\", \"y\", \"c\"], [\"q\", \"w\", \"e\"]]))\r\n    print(sort_sublists([[\"q\", \"w\", \"e\"], [\"a\", \"x\", \"y\"], [\"z\", \"u\", \"s\"]]))\r\n    print(sort_sublists([[\"a\", \"x\", \"y\"], [\"q\", \"w\", \"e\"], [\"z\", \"u\", \"s\"]]))\r\n    print(sort_sublists([[\"q\", \"w\", \"e\"], [\"a\", \"x\", \"y\"], [\"z\", \"u\", \"s\"]]))\r\n    print(sort_sublists([[\"q\", \"w\", \"e\"], [\"a\", \"x\", \"y\"], [\"z\", \"u\", \"s\"]]))\r\n    print(sort_sublists([[\"q\", \"w\", \"e\"], [\"a\", \"x\", \"y\"], [\"z\", \"u\", \"s\"]]))\r\n    print(sort_sublists([[\"q\", \"w\", \"e\"], [\"a\", \"x\", \"y\"], [\"z\", \"u\", \"s\"]]))\r\n    print(sort_sublists([[\"q\", \"w\", \"e\"], [\"a\", \"x\", \"y\"], [\"z\", \"u\", \"s\"]]))\r\n    print(sort_sublists([[\"q\", \"w\", \"e\"], [\"a\", \"x\", \"y\"], [\"z\", \"u\", \"s\"]]))\r\n    print(sort_sublists([[\"q\", \"w\", \"e\"], [\"a\", \"x\", \"y\"], [\"z\", \"u\", \"s\"]]))\r\n    print(sort_sublists([[\"q\", \"w\", \"","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n\r\n#\r\n# Test Call\r\n#\r\nlist1 = [['a', 'c', 'b'],\r\n         ['x', 'z', 'y'],\r\n         ['g', 'h', 'k', 'f', 'e', 'd']]\r\n\r\nsort_sublists(list1)\r\nprint(list1)  # Should print [['a', 'b', 'c'], ['x', 'y', 'z'], ['d', 'e', 'f', 'g', 'h', 'k']]\r\n\r\n\r\n#\r\n# Submission\r\n#\r","votes":null},{"text":"\r\n\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sort_sublists([[\"c\", \"b\", \"a\"], [\"d\", \"e\", \"f\"], [\"h\", \"g\", \"i\"]]))\r\n    print(sort_sublists([[\"g\", \"h\", \"i\"], [\"d\", \"e\", \"f\"], [\"a\", \"b\", \"c\"]]))\r\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\r\n    print(sort_sublists([[\"a\", \"b\"","votes":null},{"text":"\r\n    for num in range(len(list1)):\r\n        list1[num].sort(reverse=True)\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(sorted(list1[i]))\r\n\r\n    return list2\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [[3, 2, 1], [4, 2, 1], [3, 1, 2], [3, 5, 4]]\r\n    print(sort_sublists(list1))\r\n\r\n    list1 = [[\"b\", \"a\", \"c\", \"a\"], [\"d\", \"c\", \"b\", \"a\"], [\"a\", \"c\", \"b\", \"d\"], [\"e\", \"d\", \"c\", \"b\"]]\r\n    print(sort_sublists(list1))\r\n\r\n    list1 = [[\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"d\"]]\r\n    print(sort_sublists(list1))\r\n\r\n    list1 = [[\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"","votes":null},{"text":"\r\n\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [['a', 'c', 'b'], ['d', 'a', 'f'], ['g', 'h', 'i']]\r\n    print(f'Input: {list1}\\nOutput: {sort_sublists(list1)}')\r\n\r\n# Tests\r\n# Test 1\r\n# Correct result => [['a', 'b', 'c'], ['a', 'd', 'f'], ['g', 'h', 'i']]\r\nlist1 = [['a', 'c', 'b'], ['d', 'a', 'f'], ['g', 'h', 'i']]\r\nprint(f'Input: {list1}\\nOutput: {sort_sublists(list1)}')\r\n\r\n# Test 2\r\n# Correct result => [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nlist1 = [['a', 'c', 'b'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(f'Input: {list1}\\nOutput: {sort_sublists(list1)}')\r\n\r\n# Test 3\r\n# Correct result => [['a', 'b', 'c'], ['d', 'a', 'f'], ['g', 'h', 'i']]\r\nlist1 = [['a', 'b', 'c'], ['d', 'a', 'f'], ['g', 'h', 'i']]\r\nprint(f'Input: {list1}\\nOutput: {sort_sublists(list1)}')\r\n\r\n# Test 4\r\n# Correct result => [['a', 'b', 'c'], ['d', 'a', 'f'], ['g', 'h', 'i']]\r\nlist1 = [['a', 'b', 'c'], ['d', 'a', 'f']","votes":null}],"time":{"count":55.0,"avg":152447.7585454545,"std":41991.9532427878,"cov":0.275451431}}
{"id":572,"question":"def two_unique_nums(nums):\r\n    \"\"\"Write a python function to remove two duplicate numbers from a given number of lists.\"\"\"","answers":[{"text":"\r\n    return [x for x in set(nums) if nums.count(x) == 1]\r\n\r","votes":101845.308},{"text":"\r\n    # TODO: Write your code here\r\n    if len(nums) <= 1:\r\n        return nums\r\n    # print(nums)\r\n    # for i in range(len(nums)):\r\n    #     for j in range(i+1, len(nums)):\r\n    #         if nums[i] == nums[j]:\r\n    #             del nums[j]\r\n    #             break\r\n    # return nums\r\n    return [i for i in nums if nums.count(i) == 1]\r\n\r\n\r","votes":121881.884},{"text":"\r\n    return [x for x in nums if nums.count(x) == 1]\r\n\r\n\r","votes":133358.376},{"text":"\r\n    return [num for num in nums if nums.count(num) == 1]\r\n\r\n\r","votes":221398.732},{"text":"\r\n    nums = set(nums)\r\n    return [x for x in nums if nums.count(x) == 1]\r\n\r\n\r","votes":null},{"text":"\r\n    from collections import Counter\r\n\r\n    if len(nums) == 1:\r\n        return nums[0]\r\n\r\n    counts = Counter(nums)\r\n    for num in nums:\r\n        if counts[num] == 1:\r\n            return num\r\n\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]))\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11]))\r\n\r\n\r","votes":null},{"text":"\r\n    return [i for i in nums if i not in nums[:nums.index(i)+1]]\r\n\r\n\r\nprint(two_unique_nums([1, 2, 3, 2, 4, 5, 1, 6, 7, 8]))\r\n\r\n# 2. Write a python function to remove the first number in a given number of lists.\r","votes":null},{"text":"\r\n\r\n    nums = set(nums)\r\n    return list(nums)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, ","votes":null},{"text":"\r\n    if len(nums) < 2:\r\n        return nums\r\n    else:\r\n        result = []\r\n        for i in range(len(nums)):\r\n            for j in range(len(nums)):\r\n                if i == j:\r\n                    continue\r\n                elif nums[i] == nums[j]:\r\n                    result.append(nums[i])\r\n        return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10]\r\n    print(two_unique_nums(nums))\r\n\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\r\n    print(two_unique_nums(nums))\r\n\r\n    nums = [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 10]\r\n    print(two_unique_nums(nums))\r\n\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 10, 10]\r\n    print(two_unique_nums(nums))\r\n\r\n    nums = [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 10, 10]\r\n    print(two_unique_nums(nums))\r\n\r\n    nums = [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 1","votes":null},{"text":"\r\n\r\n    return list(set(nums))\r\n\r\n\r","votes":null},{"text":"\r\n    two_duplicates = []\r\n    for num in nums:\r\n        if nums.count(num) == 2:\r\n            two_duplicates.append(num)\r\n    return two_duplicates\r\n\r\n\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2]\r\nprint(two_unique_nums(nums))\r\n\r\n\r","votes":null},{"text":"\r\n    nums = [1,2,2,3,4,5,5,6,7,7,8,8,9,9]\r\n    # your code here\r\n    return nums\r\n\r\n\r\n\r\n\r\n\r\n#","votes":null},{"text":"\r\n    # if no two are the same\r\n    if (nums[0] != nums[1]):\r\n        return nums\r\n    # if only one is the same\r\n    elif (nums[0] == nums[1]):\r\n        return [nums[0], nums[2]]\r\n    # if two are the same\r\n    else:\r\n        return [nums[0], nums[2]]\r\n\r\n\r","votes":null},{"text":"\r\n    nums = set(nums)\r\n    if len(nums) == 1:\r\n        return nums\r\n    if len(nums) == 2:\r\n        return nums\r\n    else:\r\n        return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(two_unique_nums([3, 6, 3, 6]))\r\n    print(two_unique_nums([3, 6, 3, 6, 9, 9]))\r\n    print(two_unique_nums([3, 6, 3, 6, 9, 9, 9]))\r\n    print(two_unique_nums([3, 6, 3, 6, 9, 9, 9, 12, 12]))\r\n    print(two_unique_nums([3, 6, 3, 6, 9, 9, 9, 12, 12, 12, 12, 12, 12]))\r\n    print(two_unique_nums([3, 6, 3, 6, 9, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]))\r\n    print(two_unique_nums([3, 6, 3, 6, 9, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]))\r\n    print(two_unique_nums([3, 6, 3, 6, 9, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12","votes":null},{"text":"\r\n    \r\n    for i in range(len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(j)\r\n                nums.remove(i)\r\n    return nums\r\n\r\n\r\nnums = [1,2,2,2,2,1,3,4,5,6,7,8,9,10,11,12,13]\r\n\r\nprint(two_unique_nums(nums))\r\n\r\n\r\n\r\n\"\"\"\r\nSample input:\r\n\r\nnums = [1,2,2,2,2,1,3,4,5,6,7,8,9,10,11,12,13]\r\n\r\nExpected output:\r\n\r\n[3,4,5,6,7,8,9,10,11,12,13]\r\n\r\n\"\"\"\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return nums[0], nums[2]\r\n\r\n\r","votes":null},{"text":"\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n    return unique_nums\r\n\r\n\r\n# Testing\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(two_unique_nums([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]))\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]))\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10]))\r\nprint(two_unique_nums([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10]))\r\nprint(two_unique_nums([1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10]))\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 1, 1]))\r\nprint(two_unique_nums([1, 1, 2, 3, 4, 5, 6, 7, ","votes":null},{"text":"\r\n    # Write your code here\r\n    return [x for x in set(nums)]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    print(two_unique_nums([1,2,3,2,1,4,5,4,6,7,8,9,8,7,6,9,10,10,11,12,12,11,13,14,14,13,15,16]))\r\n    print(two_unique_nums([1,2,3,2,1,4,5,4,6,7,8,9,8,7,6,9,10,10,11,12,12,11,13,14,14,13,15,16]))\r\n    \r\n    return sorted(list(set(nums)))[:2]\r\n\r","votes":null},{"text":"\r\n    # Check if there is a duplicate\r\n    if len(nums) < 2:\r\n        return None\r\n    else:\r\n        # Find duplicates\r\n        nums = [i for i in nums if nums.count(i) > 1]\r\n        # Remove duplicates\r\n        for i in nums:\r\n            nums.remove(i)\r\n        return nums\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    nums = [int(n) for n in nums.split()]\r\n    \r\n    for i in range(len(nums)):\r\n        for j in range(len(nums)):\r\n            if i != j:\r\n                if nums[i] in nums:\r\n                    nums.remove(nums[i])\r\n                \r\n    print(nums)\r\n\r\ntwo_unique_nums('20 30 20 40 30')\r\ntwo_unique_nums('20 30 20 40 30 30 40')\r\ntwo_unique_nums('20 30 20 40 30 30 20')\r\ntwo_unique_nums('10 20","votes":null},{"text":"\r\n    nums = set(nums)\r\n    return list(nums)\r\n\r\n\r\n'''\r","votes":null},{"text":"\r\n    \r\n    # remove duplicates from list\r\n    # remove unique numbers from list\r\n    # return list of two unique numbers\r\n    \r\n    # create empty list to store two unique numbers\r\n    two_unique_nums = []\r\n    \r\n    # remove duplicates from list\r\n    nums = list(set(nums))\r\n    \r\n    # remove unique numbers from list\r\n    while len(nums) > 2:\r\n        nums.pop()\r\n    \r\n    # return list of two unique numbers\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for num in nums:\r\n        if num not in result:\r\n            result.append(num)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    unique_nums = set()\r\n    \r\n    for num in nums:\r\n        if num in unique_nums:\r\n            unique_nums.remove(num)\r\n        else:\r\n            unique_nums.add(num)\r\n    \r\n    return unique_nums\r\n\r\n\r\nif __name__ == '__main__':\r\n\r\n    print('List: ', end='')\r\n    nums = list(map(int, input().split()))\r\n\r\n    print('Unique numbers: ', end='')\r\n    print(*two_unique_nums(nums), sep=', ')\r\n\r\n\r\n\r\n# Examples:\r\n\r\n# List: 1 2 1 1 1 2\r\n# Unique numbers: 1, 2\r\n\r\n# List: 1 2 3 4 5 6\r\n# Unique numbers: 1, 2, 3, 4, 5, 6\r\n\r\n# List: 1 2 3 3 3 2 1\r\n# Unique numbers: 1, 2, 3\r\n\r\n# List: 1 2 2 1 1 1 2 3 3 4 4 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6","votes":null},{"text":"\r\n    x = 0\r\n    y = 0\r\n    for i in range(len(nums)):\r\n        x = nums[i]\r\n        if x in nums and nums.count(x) > 1:\r\n            nums.remove(x)\r\n            return nums\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Sort the list and get the index of the lists\r\n    index = [i for i, val in enumerate(nums) if val not in nums[i + 1:]]\r\n    \r\n    # Remove the duplicate numbers\r\n    nums = [val for val in nums[index[-1] + 1:] if val not in nums[:index[-1] + 1]]\r\n    \r\n    # Remove the numbers that are not on the index\r\n    nums = [val for i, val in enumerate(nums) if i in index]\r\n    \r\n    return nums\r\n\r\n\r\nprint(two_unique_nums([1, 2, 2, 3, 3, 4, 4, 5]))\r\n# [1, 5]\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7]))\r\n# []\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 4, 6, 7]))\r\n# [1, 2, 3]\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7]))\r\n# []\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7]))\r\n# [1, 7]\r\n\r\nprint(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, ","votes":null},{"text":"\r\n    \r\n    nums = list(set(nums))\r\n    nums.sort()\r\n    return nums[0], nums[1]\r\n\r","votes":null},{"text":"\r\n    i = 0\r\n    while i < len(nums):\r\n        while nums[i] in nums[i + 1:]:\r\n            nums.remove(nums[i])\r\n        i += 1\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"List after removing two duplicate numbers: \", two_unique_nums([1, 2, 2, 3, 3, 4, 4, 4, 5, 5]))\r\n    print(\"List after removing two duplicate numbers: \", two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5]))\r\n    print(\"List after removing two duplicate numbers: \", two_unique_nums([1, 2, 3, 4, 4, 4, 5, 5]))\r\n    print(\"List after removing two duplicate numbers: \", two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5]))\r\n    print(\"List after removing two duplicate numbers: \", two_unique_nums([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5]))\r\n    print(\"List after removing two duplicate numbers: \", two_unique_nums([1, 2, 3, 4, 4, 4, 5, 5]))\r\n    print(\"List after removing two duplicate numbers: \", two_unique_nums([1, 2, 2, 2, 2, 2, 3, 3, 4","votes":null},{"text":"\r\n    nums.sort()\r\n    if(nums[0] == nums[1]):\r\n        nums.remove(nums[0])\r\n    if(nums[len(nums)-1] == nums[len(nums)-2]):\r\n        nums.remove(nums[len(nums)-1])\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(nums)-1):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums[j] = None\r\n    return list(filter(None, nums))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    for i in range(len(nums)-1):\r\n        for j in range(len(nums)-1):\r\n            if i != j:\r\n                if nums[i] == nums[j]:\r\n                    nums[j] = None\r\n    return nums\r\n\r\nimport random\r\n\r\nnums = [random.randint(0, 100) for i in range(10)]\r\nprint(nums)\r\nprint(two_unique_nums(nums))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    nums = [list(i) for i in nums]\r\n    for i in range(len(nums)):\r\n        for n in range(len(nums)):\r\n            if i != n:\r\n                if nums[n] in nums[i]:\r\n                    nums[i].remove(nums[n])\r\n    return nums\r\n\r\n\r\nprint(two_unique_nums([[1,2,2],[2,3,3],[4,5,5]]))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for num in nums:\r\n        if num not in new_list:\r\n            new_list.append(num)\r\n    return new_list\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    new_nums = []\r\n    for num in nums:\r\n        if num not in new_nums:\r\n            new_nums.append(num)\r\n\r\n    return new_nums\r\n\r\n# Testing\r","votes":null},{"text":"\r\n\r\n    # Create a list to store the numbers\r\n    numbers = []\r\n\r\n    # Populate the list with the numbers from the input list\r\n    for num in nums:\r\n        numbers.append(num)\r\n\r\n    # Create a set to store the unique numbers\r\n    unique_numbers = set()\r\n\r\n    # Iterate through the list of numbers\r\n    for num in numbers:\r\n        # If the number is not in the unique numbers set, add it to the set\r\n        if num not in unique_numbers:\r\n            unique_numbers.add(num)\r\n\r\n    # Print the unique numbers\r\n    print(unique_numbers)\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [1, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 11]\r\n    two_unique_nums(nums)\r\n\r\n# Output:\r\n# {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}\r\n\r\n# Time Complexity: O(N)\r\n# Space Complexity: O(N)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #create a new empty list\r\n    new_list=[]\r\n    #loop through the list\r\n    for i in nums:\r\n        #check if the number is unique\r\n        if i not in new_list:\r\n            new_list.append(i)\r\n    #return the new list\r\n    return(new_list)\r\n\r\n#call the function\r\nprint(two_unique_nums([5,1,5,2,3,4,2,3,4,5,1,5,2,3,4,2,3,4]))\r\n\r\n\r\n#Question 4\r\n#Write a function that accepts a list and a max_value as arguments and returns a new list where \r\n#all elements of the list that are less than the max_value are squared.\r\n#For example, if the input list is [1,2,3,4,5] and the max_value is 3, the output should be [1,4,9].\r\n\r","votes":null},{"text":"\r\n    nums.sort()\r\n    for i in range(len(nums)-1):\r\n        if nums[i] == nums[i+1]:\r\n            nums.remove(nums[i])\r\n            nums.remove(nums[i])\r\n            \r\n    return nums\r\n\r\n# Test case 1\r\nnums = [1, 2, 3, 2, 1]\r\nprint(f\"The resulting array is {two_unique_nums(nums)}.\")\r\n\r\n# Test case 2\r\nnums = [1, 2, 1, 2]\r\nprint(f\"The resulting array is {two_unique_","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(len(nums)):\r\n            if i!=j:\r\n                if nums[i]==nums[j]:\r\n                    nums.remove(nums[i])\r\n                    nums.remove(nums[j])\r\n                    return nums\r\n\r\nprint(two_unique_nums([1,1,2,2]))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # The first step is to create a list of lists, where each inner list contains the indices of the\r\n    # elements in the outer list.\r\n\r\n    double_indices = [[i for i, x in enumerate(nums) if x == x_] for x_ in nums]\r\n\r\n    # The next step is to find all the duplicated elements in the list.\r\n\r\n    duplicated_elements = set([x for x in nums if nums.count(x) > 1])\r\n\r\n    # The next step is to find the indices of the duplicated elements in the list.\r\n\r\n    duplicated_indices = [\r\n        [i for i, x in enumerate(nums) if x in duplicated_elements] for x_ in nums\r\n    ]\r\n\r\n    # The next step is to find the indices of the non-duplicated elements in the list.\r\n\r\n    nonduplicated_indices = [\r\n        [i for i, x in enumerate(nums) if x not in duplicated_elements] for x_ in nums\r\n    ]\r\n\r\n    # The next step is to iterate over the duplicated elements, and for each duplicated element,\r\n    # remove it from the list of its indices, and remove it from the list of the indices of its\r\n    # corresponding elements in the outer list.\r\n\r\n    removed_indices = []\r\n\r\n    for x in duplicated_elements:\r\n        for i_ in nonduplicated_indices[x]:\r\n            for i in duplicated_indices[x]:\r\n                removed_indices.append(i_)\r\n\r\n    # The next step is to iterate over the indices of the duplicated elements, and for each\r\n    # duplicated element, remove it from the list of its indices, and remove it from the list of\r\n    # the indices of its corresponding elements in the outer list.\r\n\r\n    removed_indices = []\r\n\r\n    for x in duplicated_indices:\r\n        for i_ in nondu","votes":null},{"text":"\r\n    \r\n    numbers = []\r\n    \r\n    for num in nums:\r\n        if num not in numbers:\r\n            numbers.append(num)\r\n","votes":null},{"text":"\r\n    # Your code here\r\n    if len(nums) == 2:\r\n        return nums\r\n    else:\r\n        nums.sort()\r\n        nums = nums[::2]\r\n        return nums\r\n\r\n\r\n# Test case \r\nprint(two_unique_nums([1, 2, 3, 4, 5, 1, 2]))\r\n# [1, 2, 3, 4, 5]\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\r\n# [1, 2, 3, 4, 5]\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\r\n# [1, 2, 3, 4, 5]\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\r\n# [1, 2, 3, 4, 5]\r\n\r\nprint(\r\n    two_unique_nums([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, ","votes":null},{"text":"\r\n    # code goes here\r\n    if nums[0] == nums[1]:\r\n        nums.pop(1)\r\n    if nums[0] == nums[1]:\r\n        nums.pop(0)\r\n    return nums\r\n\r\n\r\nprint(two_unique_nums([1, 2]))\r\nprint(two_unique_nums([1, 1]))\r\nprint(two_unique_nums([1, 1, 1, 2, 3, 2]))\r\nprint(two_unique_nums([1, 2, 1, 2, 3, 2]))\r\nprint(two_unique_nums([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\nprint(two_unique_nums([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1","votes":null},{"text":"\r\n    #1) Store the first number of each list in a set\r\n    numbers = set(nums[0])\r\n    #2) Iterate over the remaining lists and add the first number of each list to the set\r\n    for i in range(1, len(nums)):\r\n        numbers.add(nums[i])\r\n    #3) Return the first number of each list\r\n    return numbers\r\n\r\n\r\n# In[3]:\r\n\r","votes":null},{"text":"\r\n\r\n    my_list = []\r\n    for i in range(0, len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                my_list.append(nums[j])\r\n    return my_list\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a set of unique numbers from the list\r\n    unique_nums = set(nums)\r\n\r\n    # Iterate through the set to create the list of unique numbers\r\n    for x in unique_nums:\r\n        unique_list.append(x)\r\n    \r\n    # Return the list of unique numbers\r\n    return unique_list\r\n\r\n# Call the function\r\nunique_list = two_unique_nums([1, 1, 3, 3, 5, 5, 7, 7, 9, 9])\r\n\r\n# Print the list of unique numbers\r\nprint(unique_list)\r\n\r\n# Output: [1, 3, 5, 7, 9]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    unique_numbers = [0]\r\n    for i in range(len(nums)):\r\n        if nums[i] not in unique_numbers:\r\n            unique_numbers.append(nums[i])\r\n    del unique_numbers[:2]\r\n    return unique_numbers\r\n\r","votes":null},{"text":"\r\n    nums.sort()\r\n    for i in range(len(nums)-1):\r\n        if nums[i] == nums[i+1]:\r\n            nums.remove(nums[i+1])\r\n            nums.remove(nums[i])\r\n            break\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    # 1. initialize a variable to keep track of the first number\r\n    first_number = None\r\n    \r\n    # 2. initialize a variable to keep track of the second number\r\n    second_number = None\r\n    \r\n    # 3. loop over the nums list\r\n    for number in nums:\r\n        # 3a. if there is no first number, set first_number to number\r\n        if first_number is None:\r\n            first_number = number\r\n        # 3b. if the first number is equal to the number, set second_number to number\r\n        elif first_number == number:\r\n            second_number = number\r\n        # 3c. if there is no second number, set second_number to number\r\n        elif second_number is None:\r\n            second_number = number\r\n        # 3d. if the second number is equal to the number, raise an error\r\n        elif second_number == number:\r\n            raise Exception(\"Only two unique numbers are allowed\")\r\n    \r\n    # 4. return the first and second numbers\r\n    return first_number, second_number\r\n\r\n# 1. test case\r\nprint(two_unique_nums([1, 1, 2]))\r\n# 2. test case\r\nprint(two_unique_nums([1, 2, 2]))\r\n# 3. test case\r\nprint(two_unique_nums([2, 2, 3, 3, 4, 4, 5, 5, 6]))\r\n# 4. test case\r\nprint(two_unique_nums([3, 3, 3, 3, 3, 3, 3, 3, 3]))\r\n# 5. test case\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n# 6. test case\r\nprint","votes":null},{"text":"\r\n\r\n    for i in range(len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                del nums[j]\r\n                del nums[i]\r\n                return nums\r\n\r\n    return nums\r\n\r\n\r\na = [1, 2, 3, 4, 3, 2]\r\nprint(two_unique_nums(a))\r\n\r\n\r\n# A much more efficient solution\r","votes":null},{"text":"\r\n    \r\n    for i in range(len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[j])\r\n                nums.remove(nums[i])\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    nums.sort()\r\n    i = 1\r\n    while i < len(nums) - 1:\r\n        if nums[i - 1] == nums[i]:\r\n            nums.remove(nums[i])\r\n            nums.remove(nums[i - 1])\r\n        else:\r\n            i += 1\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(two_unique_nums([1, 1, 2, 2, 3, 4, 4, 5, 5]))\r\n    print(two_unique_nums([3, 3, 2, 2, 1, 1]))\r\n    print(two_unique_nums([1, 1, 1, 1, 1, 1]))\r\n    print(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\n    print(two_unique_nums([1, 2, 3, ","votes":null},{"text":"\r\n    nums = list(set(nums))\r\n    new_nums = []\r\n    for i in nums:\r\n        if i not in new_nums:\r\n            new_nums.append(i)\r\n    return new_nums\r\n\r\nprint(two_unique_nums([1, 1, 2, 3, 3, 4, 5, 5])) # [1, 2, 3, 4, 5]\r\n\r\n# ------------------------------------------------------------------------------------------------\r\n# Using set() and list()\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(nums) < 2:\r\n        return nums\r\n    \r\n    # set is an unordered collection with no duplicate elements\r\n    # '&' intersection of sets\r\n    # '^' symmetric difference of sets\r\n    # '|' union of sets\r\n    # '>' difference of sets\r\n    # '<' difference of sets\r\n    return sorted(list(set(nums)))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Using a set\r\n    # return [i for i in set(nums)]\r\n    \r\n    # Using list comprehension and set()\r\n    # return [value for value in set(nums)]\r\n    \r\n    # Using a loop\r\n    new_nums = []\r\n    for i in nums:\r\n        if i not in new_nums:\r\n            new_nums.append(i)\r\n    return new_nums\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    nums = list(set(nums))\r\n    if len(nums) < 2:\r\n        return nums\r\n    else:\r\n        return nums[:2]\r\n\r\n\r","votes":null},{"text":"\r\n    nums = set(nums)\r\n    if len(nums) == 2:\r\n        return list(nums)\r\n    else:\r\n        return []\r\n\r\n\r","votes":null},{"text":"\r\n    # initialize a set\r\n    my_set = set()\r\n    # for each number in the given list, add it to the set\r\n    for num in nums:\r\n        my_set.add(num)\r\n    # return the set\r\n    return my_set\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\r\n    print(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8]))\r\n    print(two_unique_nums([1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\r\n    print(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8]))\r\n    print(two_unique_nums([1, 2,","votes":null},{"text":"\r\n\r\n    if len(nums) == 0:\r\n        return []\r\n    elif len(nums) == 1:\r\n        return nums\r\n    elif len(nums) == 2:\r\n        return [nums[0] if nums[0] != nums[1] else nums[1]]\r\n    elif len(nums) == 3:\r\n        return [nums[0] if nums[0] != nums[1] and nums[0] != nums[2] and nums[1] != nums[2] else nums[1] if nums[1] != nums[2] else nums[2]]\r\n    else:\r\n        return [nums[0]] + two_unique_nums(nums[1:])\r\n\r\n\r\n# print(two_unique_nums([]))\r\n# print(two_unique_nums([1]))\r\n# print(two_unique_nums([1, 1]))\r\n# print(two_unique_nums([1, 1, 2]))\r\n# print(two_unique_nums([1, 1, 2, 2]))\r\n# print(two_unique_nums([1, 1, 2, 2, 3]))\r\n# print(two_unique_nums([1, 1, 2, 2, 3, 3]))\r\n# print(two_unique_nums([1, 1, 2, 2, 3, 3, 4]))\r\n# print(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4]))\r\n# print(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5]))\r\n# print(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4","votes":null},{"text":"\r\n    nums.sort()\r\n    result = [nums[0], nums[1]]\r\n    return result\r\n\r\n\r\n# Test\r\nnums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]\r\nprint(two_unique_nums(nums))\r\n\r\nnums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 0, 0]\r\nprint(two_unique_nums(nums))\r\n\r\nnums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 0, 0, 1]\r\nprint(two_unique_nums(nums))\r\n\r\nnums = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]\r\nprint(two_unique_nums(nums))\r\n\r\nnums = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]\r\nprint(two_unique_nums(nums))\r\n\r\nnums = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5","votes":null},{"text":"\r\n    # Write your code here\r\n    nums = set(nums)\r\n    return nums\r\n\r\n\r\n# Testing\r\nif __name__ == '__main__':\r\n    print(two_unique_nums([1, 2, 3, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(two_unique_nums([1, 2, 3, 3, 4, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,","votes":null},{"text":"\r\n    if len(nums) < 2:\r\n        return nums\r\n\r\n    for num in nums:\r\n        if nums.count(num) > 1:\r\n            del nums[nums.index(num)]\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(0, len(nums)-1):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[i])\r\n                nums.remove(nums[j])\r\n\r\n    return nums\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    nums = [int(num) for num in nums]\r\n    \r\n    for i in range(len(nums)-1):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[i])\r\n                break\r\n    return nums\r\n\r\n# TEST CASES\r\nprint(two_unique_nums([1, 2, 3, 1, 2, 1, 2, 3, 4, 5, 6, 7])) # [3, 4, 5, 6, 7]\r\nprint(two_unique_nums([1, 2, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8])) # [3, 4, 5, 6, 7, 8]\r\nprint(two_unique_nums([1, 2, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3])) # [4, 5, 6, 7, 8]\r\nprint(two_unique_nums([1, 2, 3, 1, 2, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3])) # [4, 5, 6, 7]\r\nprint(two_unique_nums([1, 2, 1, 2, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4])) # [5, 6, 7]\r\nprint(two_unique_nums([1, 2, 1, 2, 1, 2, 3, 4, 5, 6, 7, 1","votes":null},{"text":"\r\n    \r\n    # Create a set to hold unique numbers\r\n    unique_nums = set()\r\n    \r\n    # Create an empty list to hold the numbers without dupes\r\n    no_dupes = []\r\n    \r\n    # Iterate over the list\r\n    for i in nums:\r\n        # Add unique numbers to the set\r\n        unique_nums.add(i)\r\n        \r\n    # Add the unique numbers back to the list\r\n    no_dupes = [i for i in unique_nums]\r\n    \r\n    # Return the new list\r\n    return no_dupes\r\n\r\n\r\n# Tests\r","votes":null},{"text":"\r\n\r\n    # Input : [ 1, 1, 2, 2, 3, 3, 4 ]\r\n    # Output : [ 1, 2, 3, 4 ]\r\n\r\n    # Input : [ 1, 1, 2, 2 ]\r\n    # Output : [ 1, 2 ]\r\n\r\n    # Input : [ 1, 2, 3, 4 ]\r\n    # Output : [ 1, 2, 3, 4 ]\r\n\r\n    # Input : [ 1, 1, 2, 3 ]\r\n    # Output : [ 1, 2, 3 ]\r\n\r\n    # Input : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 ]\r\n    # Output : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 ]\r\n\r\n    # Input : [ 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20]\r\n    # Output : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1","votes":null},{"text":"\r\n    nums=[1,1,2,2,3,3,4,4,5,6,7,7,8,8,9,9,10,10,11,11,12,12,11,11,12,12]\r\n    a=[]\r\n    b=[]\r\n    for i in range(len(nums)):\r\n        if nums[i] not in a:\r\n            a.append(nums[i])\r\n        if nums[i] not in b:\r\n            b.append(nums[i])\r\n    print(a,b)\r\n\r\n\r","votes":null},{"text":"\r\n    a = list(set(nums))\r\n    return a\r\n\r\n\r","votes":null},{"text":"\r\n    # create a set to store no duplicates\r\n    store = set()\r\n\r\n    # create a new list to store unique numbers\r\n    uniq_nums = []\r\n\r\n    # loop through the list and check if any elements are in the set\r\n    for n in nums:\r\n        if n not in store:\r\n            uniq_nums.append(n)\r\n            # add the number to the set\r\n            store.add(n)\r\n\r\n    # return the new list of unique numbers\r\n    return uniq_nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5","votes":null},{"text":"\r\n\r\n    # create a dictionary to keep track of the numbers\r\n    num_dict = {}\r\n\r\n    for num in nums:\r\n        # check if the number is already in the dictionary\r\n        if num in num_dict:\r\n            # if it is, increment the value by one\r\n            num_dict[num] += 1\r\n        else:\r\n            # if it isn't, add it to the dictionary\r\n            num_dict[num] = 1\r\n    \r\n    # now loop through the dictionary\r\n    # and remove the numbers with a value of 2\r\n    for key, value in num_dict.items():\r\n        if value >= 2:\r\n            nums.remove(key)\r\n\r\n    return nums\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    # write some tests for your function\r\n    print(two_unique_nums([1, 2, 1, 2, 3, 5]))  # should print [3, 5]\r\n    print(two_unique_nums([1, 2, 1, 2, 1, 2]))  # should print []\r\n    print(two_unique_nums([1, 1, 1, 2, 2, 2]))  # should print []\r\n    print(two_unique_nums([1, 2, 3]))  # should print [1, 2, 3]\r\n    print(two_unique_nums([1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 0]))  # should print [1]\r\n    print(two_unique_nums([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]))  # should print []\r\n    print(two_unique_nums([1, 2, 1, 2","votes":null},{"text":"\r\n    \r\n    from collections import Counter\r\n    \r\n    # initialize a counter\r\n    c = Counter(nums)\r\n    \r\n    # get the most repeated number\r\n    most_repeated = c.most_common(1)[0][0]\r\n    \r\n    # create a list of number not repeated\r\n    # and remove the most repeated number\r\n    no_repeat = [x for x in nums if x != most_repeated]\r\n\r\n    return no_repeat\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \r\n    # Test case 1\r\n    nums = [1, 2, 3, 3, 4, 5, 5]\r\n    print(two_unique_nums(nums))\r\n    \r\n    # Test case 2\r\n    nums = [1, 1, 2, 3, 3, 4, 4, 5, 5]\r\n    print(two_unique_nums(nums))\r\n    \r\n    # Test case 3\r\n    nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\r\n    print(two_unique_nums(nums))\r\n    \r\n    # Test case 4\r\n    nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]\r\n    print(two_unique_nums(nums))\r\n    \r\n    # Test case 5\r\n    nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]\r\n    print(two_unique_nums(nums))\r\n    \r\n    # Test case 6\r\n    nums = [1, 1, 2,","votes":null},{"text":"\r\n    nums = list(set(nums))\r\n    nums.sort()\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Test Cases\r\n    nums = [1, 1, 2, 2, 3, 3, 4, 4]\r\n    print(two_unique_nums(nums))\r\n    nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]\r\n    print(two_unique_nums(nums))\r\n    nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\r\n    print(two_unique_nums(nums))\r\n    nums = [1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\r\n    print(two_unique_nums(nums))\r\n    nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]\r\n    print(two_unique_nums(nums))\r\n    nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11]\r\n    print(two_unique_nums(nums))\r\n    nums = [1, 1, 2, 2,","votes":null},{"text":"\r\n    \r\n    for i in range(len(nums)):\r\n        for j in range(len(nums[i])):\r\n            for k in range(len(nums[i])):\r\n                if j == k:\r\n                    continue\r\n                if nums[i][j] == nums[i][k]:\r\n                    nums[i].remove(nums[i][k])\r\n                    nums[i].remove(nums[i][j])\r\n                    nums[i].append(nums[i][j])\r\n                    nums[i].append(nums[i][k])\r\n                    \r\n    return nums\r\n    \r\n    \r\n    \r\n#test\r\nprint(two_unique_nums([[1, 2, 2, 3], [5, 5, 5, 5], [1, 2, 3, 4]]))\r\n\r\n\r\n\r\n'''\r\nOUTPUT:\r\n[1, 3], [5], [1, 2, 3, 4]\r\n'''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#2. Write a Python function to remove duplicates from a list.\r\n\r","votes":null},{"text":"\r\n    \r\n    # Sort the list\r\n    nums.sort()\r\n    \r\n    # Remove the duplicates\r\n    nums = list(dict.fromkeys(nums))\r\n    \r\n    # If there are less than two elements left, return None\r\n    if len(nums) < 2:\r\n        return None\r\n    \r\n    # Otherwise, return the two unique numbers\r\n    return (nums[0], nums[-1])\r\n\r\n\r\n# Test cases (black box - unit testing)\r\ntest_cases = [([1,2,3,4,5,6], (1, 6)), ([1,1,2,2,3,4], (1, 4)), ([1,2,3,4,4,4], (1, 4)), ([1,1,1,1,1,1], None)]\r\n\r\nfor case in test_cases:\r\n    answer = two_unique_nums(case[0])\r\n    if answer == case[1]:\r\n        print(\"Passed test for \", case[0], \" -> Expected \", case[1], \", Got \", answer)\r\n    else:\r\n        print(\"Didn't pass test for \", case[0], \" -> Expected \", case[1], \", Got \", answer)\r\n\r\n\r\n# Edge cases (black box - unit testing)\r\ntest_cases = [([], None), ([1], None), ([1,2], None), ([1,1,1,1,1], None), ([1,1,1,1,1,1], None), ([1,2,3,4,4,4], (1, 4)), ([1,2,3,4,4,4], (1, 4)), ([1,2,3,4,4,4], (1, 4))]\r\n\r\nfor case in test_cases:\r\n    answer = two_unique_nums(case[0])\r\n    if answer == case[1]:\r\n        print(\"Passed test for \", case[0], \" -> Expecte","votes":null},{"text":"\r\n    for i in nums:\r\n        if nums.count(i) > 1:\r\n            nums.remove(i)\r\n    print(nums)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return [num for num in set(nums)]\r\n\r\n\r\nif __name__ == '__main__':\r\n    assert two_unique_nums([1,2,3,3,4,5,6,6,7,8,8,9,9,10]) == [1,2,3,4,5,6,7,8,9,10]\r\n    assert two_unique_nums([10,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]) == [10,1,2,3,4,5,6,7,8,9]\r\n    assert two_unique_nums([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1","votes":null},{"text":"\r\n    # Create a dictionary with the numbers and their counts\r\n    num_dict = {}\r\n    for num in nums:\r\n        if num in num_dict:\r\n            num_dict[num] += 1\r\n        else:\r\n            num_dict[num] = 1\r\n\r\n    # Remove the numbers with count == 2\r\n    for num in num_dict:\r\n        if num_dict[num]","votes":null},{"text":"\r\n    return [num for num in list(set(nums)) if nums.count(num) == 1]\r\n\r\n\r\nprint(two_unique_nums([1, 2, 3, 2, 1]))\r\n# [3]\r\nprint(two_unique_nums([1, 3, 2, 2, 1]))\r\n# [3]\r\nprint(two_unique_nums([1, 2, 2, 2, 1]))\r\n# [1, 2]\r\nprint(two_unique_nums([1, 1, 1, 1, 1]))\r\n# []\r\nprint(two_unique_nums([1, 2, 3, 4, 5]))\r\n# [1, 2, 3, 4, 5]\r\nprint(two_unique_nums([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\n# []\r\nprint(two_unique_nums([1, 2, 3, 2, 1, 2, 3, 2, 1]))\r\n# [3]\r\nprint(two_unique_nums([1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 1, 1, 1]))\r\n# [1]\r\nprint(two_unique_nums([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,","votes":null},{"text":"\r\n    \r\n    # sort the list\r\n    nums.sort()\r\n    \r\n    # remove duplicates\r\n    return [nums[0], nums[1]]\r\n\r\n\r\n# test case\r\ntwo_unique_nums([4, 3, 3, 2, 2, 1])\r\ntwo_unique_nums([1, 1, 3, 3, 5, 5])\r\ntwo_unique_nums([1, 1, 2, 2, 3, 3])\r\ntwo_unique_nums([5, 5, 4, 4, 3, 3])\r\ntwo_unique_nums([5, 5, 4, 4, 3, 3])\r\ntwo_unique_nums([5, 5, 4, 4, 3, 3])\r\ntwo_unique_nums([4, 4, 3, 3, 2, 1])\r\ntwo_unique_nums([4, 4, 3, 3, 2, 1])\r\ntwo_unique_nums([1, 1, 1, 2, 2, 2])\r\ntwo_unique_nums([1, 1, 1, 2, 2, 2])\r\ntwo_unique_nums([1, 1, 1, 2, 2, 2])\r\ntwo_unique_nums([2, 2, 2, 3, 3, 3])\r\ntwo_unique_nums([2, 2, 2, 3, 3, 3])\r\ntwo_unique_nums([2, 2, 2, 3, 3, 3])\r\ntwo_unique_nums([3, 3, 3, 4, 4, 4])\r\ntwo_unique_nums([3, 3, 3, 4, 4, 4])\r\ntwo_unique_nums([3, ","votes":null},{"text":"\r\n    \r\n    # create a set\r\n    s = set(nums)\r\n    \r\n    # create a list\r\n    lst = list(s)\r\n    \r\n    # print the list\r\n    print(lst)\r\n    \r\n    \r\n# call the function\r\ntwo_unique_nums([1, 2, 2, 3, 4, 4, 5])\r\n\r","votes":null},{"text":"\r\n\r\n    new_nums = []\r\n    for num in nums:\r\n        if num not in new_nums:\r\n            new_nums.append(num)\r\n    return new_nums\r\n\r\n\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\nprint(two_unique_nums(nums))\r\n\r\n\r","votes":null},{"text":"\r\n    nums = list(set(nums))\r\n    for i in range(len(nums)):\r\n        for n in range(i + 1, len(nums)):\r\n            if nums[i] == nums[n]:\r\n                nums.remove(nums[i])\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    \r\n    # Create a set of numbers from the list\r\n    nums = set(nums)\r\n    \r\n    # Remove first element from the set\r\n    nums.remove(nums[0])\r\n    \r\n    # Remove second","votes":null},{"text":"\r\n    nums = list(set(nums))\r\n   ","votes":null},{"text":"\r\n    \r\n    # create a set out of the given numbers\r\n    nums_set = set(nums)\r\n    \r\n    # create two empty lists\r\n    nums_list_1 = []\r\n    nums_list_2 = []\r\n    \r\n    # create an empty set\r\n    nums_set_new = set()\r\n    \r\n    # iterate over the created set\r\n    for num in nums_set:\r\n        \r\n        # check if the number is not in the set\r\n        if num not in nums_set_new:\r\n            \r\n            # append the number to the first list\r\n            nums_list_1.append(num)\r\n            \r\n            # add the number to the new set\r\n            nums_set_new.add(num)\r\n            \r\n        # check if the number is in the set\r\n        else:\r\n            \r\n            # append the number to the second list\r\n            nums_list_2.append(num)\r\n            \r\n    # return the two lists           \r\n    return nums_list_1, nums_list_2\r\n\r\n\r","votes":null},{"text":"\r\n    # code goes here\r\n\r\n    #","votes":null},{"text":"\r\n    nums.sort()\r\n    if nums[0] == nums[1]:\r\n        return [nums[2]]\r\n    else:\r\n        return nums\r\n\r\n\r","votes":null},{"text":"\r\n    return sorted(set(nums))[:2]\r\n\r\n\r","votes":null},{"text":"\r\n    # unique numbers\r\n    unique = list(set(nums))\r\n    # length of unique numbers\r\n    length = len(unique)\r\n    # unique numbers in the form of dictionary\r\n    unique_dict = {unique[i]: i for i in range(length)}\r\n    # number of unique numbers\r\n    n = length\r\n    # number of duplicate numbers\r\n    k = len(nums) - n\r\n\r\n    # create an array of two numbers\r\n    # which are the two duplicate numbers\r\n    result = [0] * 2\r\n\r\n    # create a dictionary of two numbers\r\n    # which are the two duplicate numbers\r\n    result_dict = {}\r\n\r\n    # create a list of two numbers\r\n    # which are the two duplicate numbers\r\n    result_list = [0] * 2\r\n\r\n    # create a set of two numbers\r\n    # which are the two duplicate numbers\r\n    result_set = set()\r\n\r\n    # create a tuple of two numbers\r\n    # which are the two duplicate numbers\r\n    result_tuple = ()\r\n\r\n    # create a frozenset of two numbers\r\n    # which are the two duplicate numbers\r\n    result_frozenset = frozenset()\r\n\r\n    # create a dict of two numbers\r\n    # which are the two duplicate numbers\r\n    result_dict = dict()\r\n\r\n    # create a set of two numbers\r\n    # which are the two duplicate numbers\r\n    result_set = set()\r\n\r\n    # create a frozenset of two numbers\r\n    # which are the two duplicate numbers\r\n    result_frozenset = frozenset()\r\n\r\n    # create a deque of two numbers\r\n    # which are the two duplicate numbers\r\n    result_deque = collections.deque()\r\n\r\n    # create a stack of two numbers\r\n    # which are the two duplicate numbers\r\n    result_stack = collections.deque()\r\n\r\n    # create a queue of two numbers\r\n    ","votes":null},{"text":"\r\n\r\n    print('The two unique numbers are:')\r\n    print(nums)\r\n    print('The list of numbers after removal of two unique numbers is:')\r\n    print(nums)\r\n\r\ntwo_unique_nums([1, 2, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10])\r\n\r\n\r\n# QUESTION 3\r\n\r","votes":null},{"text":"\r\n    # Create an empty list\r\n    # The result will be stored in this list\r\n    res = []\r\n\r\n    # Iterating over the list\r\n    for i in range(len(nums)):\r\n\r\n        # Check if the number is already in the list.\r\n        # If it is in the list, continue to the next element\r\n        if nums[i] in res:\r\n            continue\r\n\r\n        # Append the element to the result list\r\n        res.append(nums[i])\r\n\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # create a list containin the two unique numbers\r\n    list_unique = []\r\n    \r\n    # iterate through the list of lists\r\n    for nums_list in nums:\r\n        \r\n        # iterate through the list\r\n        for num in nums_list:\r\n            \r\n            # if the number is not in the list\r\n            if num not in list_unique:\r\n                \r\n                # add it to the list\r\n                list_unique.append(num)\r\n                \r\n            # if the number is already in the list\r\n            else:\r\n                \r\n                # remove it\r\n                list_unique.remove(num)\r\n    \r\n    return list_unique\r\n\r\n\r\nprint(two_unique_nums([[1,2,3], [4,5,6], [7,8,9]]))\r\nprint(two_unique_nums([[1,2,3,4], [4,5,6], [7,8,9]]))\r\nprint(two_unique_nums([[1,2,3], [4,5,6], [7,8,9,10]]))\r\nprint(two_unique_nums([[1,2,3], [4,5,6], [7,8,9,10]]))\r\nprint(two_unique_nums([[1,2,3,4,10], [4,5,6], [7,8,9,10]]))\r\nprint(two_unique_nums([[1,2,3,4,10], [4,5,6,10], [7,8,9,10]]))\r\nprint(two_unique_nums([[1,2,3,4,10], [4,5,6,10], [7,8,9,10,11]]))\r\nprint(two_unique_nums([[1,2,3,4,10], [4,5,6,10], [","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(i + 1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums[j] = nums[len(nums) - 1]\r\n                nums.pop()\r\n    return nums\r\n\r\n\r\n# Test cases\r\n# Test case 1\r\nprint(two_unique_nums([1, 1, 2, 2, 3, 4, 4]))\r\n# expected output:\r\n# [1, 2, 3, 4]\r\n\r\n# Test case 2\r\nprint(two_unique_nums([1, 2, 3, 1, 2, 3]))\r\n# expected output:\r\n# [1, 2, 3]\r\n\r\n# Test case 3\r\nprint(two_unique_nums([1, 2, 3, 1, 2, 3, 4]))\r\n# expected output:\r\n# [1, 2, 3, 4]\r\n\r\n# Test case 4\r\nprint(two_unique_nums([1, 2, 3, 1, 2, 3, 4, 1, 2, 3]))\r\n# expected output:\r\n# [1, 2, 3, 4]\r\n\r\n# Test case 5\r\nprint(two_unique_nums([1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3]))\r\n# expected output:\r\n# [1, 2, 3, 4]\r\n\r\n# Test case 6\r\nprint(two_unique_nums([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\n# expected output:\r\n# [1]\r","votes":null},{"text":"\r\n    numbers = []\r\n    for num in range(0, len(nums)):\r\n        for num2 in range(0, len(nums)):\r\n            if num != num2:\r\n                if nums[num] == nums[num2]:\r\n                    numbers.append(nums[num])\r\n    return numbers\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 3]))\r\nprint(two_unique_nums([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]))\r\nprint(two_unique_nums([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]))\r\nprint(two_unique_nums([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]))\r\nprint(two_unique_nums([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    seen = set()\r\n    for num in nums:\r\n        if num in seen:\r\n            nums.remove(num)\r\n        else:\r\n            seen.add(num)\r\n    return nums\r\n\r\n\r\nprint(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    nums_copy = nums.copy()\r\n    nums_copy.sort() \r\n    nums_copy.reverse()\r\n    \r\n    for i in range(len(nums_copy)-1):\r\n        if nums_copy[i] == nums_copy[i+1]:\r\n            nums_copy.remove(nums_copy[i+1])\r\n            nums_copy.remove(nums_copy[i])\r\n            break\r\n    return nums_copy\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","votes":null},{"text":"\r\n    # create a list of all the numbers\r\n    all_nums = []\r\n    for num in nums:\r\n        all_nums.extend(num)\r\n    \r\n    # create a set of all the numbers\r\n    all_nums = set(all_nums)\r\n    \r\n    # create a list with all the numbers that appear only once\r\n    nums_once = [num for num in all_nums if all_nums.count(num) == 1]\r\n    \r\n    # return the first two numbers\r\n    return nums_once[:2]\r\n\r\n\r\nnums = [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15]]\r\nprint(two_unique_nums(nums))\r\n\r\nnums = [[1, 2, 3], [2, 4, 6], [3, 6, 9]]\r\nprint(two_unique_nums(nums))\r\n\r\nnums = [[1, 2, 3], [2, 4, 6], [3, 6","votes":null}],"time":{"count":4.0,"avg":144621.075,"std":52815.6985909399,"cov":0.365200567}}
{"id":573,"question":"def unique_product(list_data):\r\n    \"\"\"Write a python function to calculate the product of the unique numbers of a given list.\"\"\"","answers":[{"text":"\r\n\r\n    unique_numbers = set(list_data)\r\n    product = 1\r\n\r\n    for number in unique_numbers:\r\n        product *= number\r\n\r\n    return product\r\n\r\n\r","votes":65850.296},{"text":"\r\n    list_data = list(set(list_data))\r\n    product = 1\r\n    for i in list_data:\r\n        product *= i\r\n    return product\r\n\r\n\r","votes":74451.652},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r","votes":82474.704},{"text":"\r\n\r\n    # Get the unique numbers in the list\r\n    unique_numbers = set(list_data)\r\n\r\n    # Multiply the unique numbers\r\n    product = 1\r\n    for number in unique_numbers:\r\n        product *= number\r\n\r\n    # Return the product\r\n    return product\r\n\r\n\r","votes":91643.224},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product = product * i\r\n    return product\r\n\r\n\r","votes":92720.944},{"text":"\r\n\r\n    # creating a set of unique numbers\r\n    unique_set = set(list_data)\r\n\r\n    # multiplying the numbers in the set\r\n    product = 1\r\n\r\n    for num in unique_set:\r\n        product *= num\r\n\r\n    return product\r\n\r\n\r","votes":93112.664},{"text":"\r\n    unique_number = []\r\n    for i in range(len(list_data)):\r\n        if list_data[i] not in unique_number:\r\n            unique_number.append(list_data[i])\r\n    \r\n    product = 1\r\n    for i in unique_number:\r\n        product *= i\r\n    return product\r\n\r","votes":93722.332},{"text":"\r\n    if type(list_data) != list:\r\n        return \"Please enter a list.\"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    product = 1\r\n    if len(unique_list) == 0:\r\n        return 1\r\n    for i in unique_list:\r\n        product = product * i\r\n    return product\r\n","votes":95664.916},{"text":"\r\n    new_list = []\r\n    for i in list_data:\r\n        if i not in new_list:\r\n            new_list.append(i)\r\n    product = 1\r\n    for i in new_list:\r\n        product = product * i\r\n    return product\r\n\r\n\r\n# print(unique_product([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]))\r\n","votes":96186.084},{"text":"\r\n    unique_numbers = set(list_data)\r\n    product = 1\r\n    for number in unique_numbers:\r\n        product *= number\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 3, 3, 3, 4, 5]))\r\n\r\n\r","votes":97697.036},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in range(len(unique_list)):\r\n        product = product * unique_list[i]\r\n    return product\r\n\r\n\r","votes":98108.372},{"text":"\r\n    \r\n    list_data = list(map(int, list_data))\r\n    \r\n    # create set of unique numbers\r\n    unique_list_data = set(list_data)\r\n    \r\n    # create a product of unique numbers\r\n    product = 1\r\n    for i in unique_list_data:\r\n        product *= i\r\n    \r\n    return product\r\n\r\n\r\n# --------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":98223.584},{"text":"\r\n    list_1 = []\r\n    for i in list_data:\r\n        if i not in list_1:\r\n            list_1.append(i)\r\n    product = 1\r\n    for i in list_1:\r\n        product = product * i\r\n    return product\r\n\r\n\r","votes":104592.084},{"text":"\r\n    unique_data = set(list_data)\r\n    product_data = 1\r\n    for data in unique_data:\r\n        product_data *= data\r\n    return product_data\r\n\r\n\r","votes":104892.292},{"text":"\r\n    list_data = list(set(list_data))\r\n    product = 1\r\n    for i in list_data:\r\n        product *= i\r\n    return product\r\n\r\n\r\n# 1.12\r","votes":106459.708},{"text":"\r\n    # code goes here\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for element in unique_list:\r\n        product *= element\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 1]))\r\n\r\n\r","votes":108863.136},{"text":"\r\n    set_data = set(list_data)\r\n    result = 1\r\n    for item in set_data:\r\n        result *= item\r\n    return result\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]))\r\n\r\n\r","votes":111060.096},{"text":"\r\n    # create a list of unique numbers\r\n    unique = list(set(list_data))\r\n    # create a variable to store product of unique numbers\r\n    product = 1\r\n    # loop through the list of unique numbers and multiply the variable\r\n    for i in unique:\r\n        product *= i\r\n    # return the product\r\n    return product\r\n\r\n# test unique_product function\r\nprint(unique_product([1, 2, 3, 1, 2]))\r\n\r\n# 6\r\n\r\n\r","votes":113612.744},{"text":"\r\n    set_data = set(list_data)\r\n    product = 1\r\n    for i in set_data:\r\n        product = product * i\r\n    return product\r\n\r\n\r\nlist_data = [1, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9]\r\nproduct = unique_product(list_data)\r\nprint(product)\r\n\r\n\r\n# Q2\r","votes":117789.568},{"text":"\r\n    product = 1\r\n    unique = list(set(list_data))\r\n    for element in unique:\r\n        product *= element\r\n    return product\r\n\r\n\r","votes":118640.516},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    unique_product = 1\r\n    for i in unique_list:\r\n        unique_product = unique_product * i\r\n    return unique_product\r\n\r\n\r\n# Tests\r","votes":119983.612},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    prod = 1\r\n    for i in unique_list:\r\n        prod *= i\r\n    return prod\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]\r\n    print(\"The unique product of the list is: \", unique_product(list_data))\r\n\r\n\r\n\"\"\"\r\nSample Input:\r\n    [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]\r\n\r\nSample Output:\r\n    The unique product of the list is:  30\r\n\r\nExplanation:\r\n    The unique numbers of the list are [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    Hence, the product of unique numbers of the list is 30.\r\n\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\"\"\"\r\n\r\n\r\n# Alternate Solution 1:\r","votes":128360.012},{"text":"\r\n    unique = list(set(list_data))\r\n    product = 1\r\n    for i in range(0, len(unique)):\r\n        product *= unique[i]\r\n    return product\r\n\r","votes":134419.0},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n    \r","votes":136415.008},{"text":"\r\n    unique_values = set(list_data)\r\n    product = 1\r\n    for value in unique_values:\r\n        product *= value\r\n    return product\r\n\r\n\r","votes":139642.248},{"text":"\r\n    l = []\r\n    for i in list_data:\r\n        if i not in l:\r\n            l.append(i)\r\n    product = 1\r\n    for i in l:\r\n        product *= i\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 4, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 4, 4, 4, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 4, 4, 4, 4, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5]))\r\n\r\n\r","votes":152510.616},{"text":"\r\n    unique_numbers = []\r\n    for num in list_data:\r\n        if num not in unique_numbers:\r\n            unique_numbers.append(num)\r\n    unique_numbers.sort()\r\n    product = 1\r\n    for num in unique_numbers:\r\n        product *= num\r\n    return product\r\n\r","votes":159037.504},{"text":"\r\n    unique_list = set(list_data)\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r\n# Test case 1\r\nlist_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 2\r\nlist_data = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 3\r\nlist_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 4\r\nlist_data = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 5\r\nlist_data = [1, 2]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 6\r\nlist_data = [2, 2]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 7\r\nlist_data = [3, 4, 5]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 8\r\nlist_data = []\r\nprint(unique_product(list_data))\r\n\r\n# Test case 9\r\nlist_data = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\r\nprint(unique_product(list_data))\r\n\r\n# Test cas","votes":165805.704},{"text":"\r\n    # list_data = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\r\n    unique_num = list(set(list_data))\r\n    print(unique_num)\r\n    product = 1\r\n    for i in unique_num:\r\n        product = product * i\r\n    return product\r\n\r\n\r\nprint(unique_product([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\r\n\r\n\r\n#","votes":171613.844},{"text":"\r\n    # list_data = [1, 2, 3, 2, 1]\r\n    list_data = list(set(list_data))\r\n    product = 1\r\n    for i in list_data:\r\n        product *= i\r\n    return product\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Test case\r\n    list_data = [1, 2, 3, 2, 1]\r\n    print(f\"The product of unique numbers is: {unique_product(list_data)}\")\r\n    list_data = [1, 2, 3, 2, 1, 4]\r\n    print(f\"The product of unique numbers is: {unique_product(list_data)}\")\r\n    list_data = [1, 2, 3, 2, 1, 4, 5]\r\n    print(f\"The product of unique numbers is: {unique_product(list_data)}\")\r\n    list_data = [1, 2, 3, 2, 1, 4, 5, 6]\r\n    print(f\"The product of unique numbers is: {unique_product(list_data)}\")\r\n    list_data = [1, 2, 3, 2, 1, 4, 5, 6, 7]\r\n    print(f\"The product of unique numbers is: {unique_product(list_data)}\")\r\n    list_data = [1, 2, 3, 2, 1, 4, 5, 6, 7, 8]\r\n    print(f\"The product of unique numbers is: {unique_product(list_data)}\")\r\n    list_data = [1, 2, 3, 2, 1, 4, 5, 6, 7, 8, 9]\r\n    print(f\"The product of unique numbers is: {unique_product(list_data)}\")\r\n    list_dat","votes":172575.028},{"text":"\r\n    \r\n    # define empty list\r\n    unique_list = []\r\n    \r\n    # loop through the list and add values to empty list\r\n    for value in list_data:\r\n        if value not in unique_list:\r\n            unique_list.append(value)\r\n            \r\n    # calculate product of list\r\n    product = 1\r\n    for value in unique_list:\r\n        product *= value\r\n    \r\n    # return product\r\n    return product\r\n\r\n# --------------------------------------------------------------------------------------------------------------\r\n\r","votes":172727.236},{"text":"\r\n    list_data=set(list_data)\r\n    product=1\r\n    for i in list_data:\r\n        product*=i\r\n    return product\r\n\r\nif __name__ == \"__main__\":\r\n    list_data = [1, 2, 3, 4, 5, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4, 5, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4, 5, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4, 5, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4, 5, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4, 5, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4, 5, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4, 5, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4, 5, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n  ","votes":173847.192},{"text":"\r\n\r\n    # list to store unique numbers\r\n    unique_list = []\r\n\r\n    # for loop to iterate through the list\r\n    for i in list_data:\r\n        # if statement to check if the number is already in the list\r\n        if i not in unique_list:\r\n            # if not, append the number to the list\r\n            unique_list.append(i)\r\n\r\n    # new variable to store the product\r\n    product = 1\r\n\r\n    # for loop to iterate through the unique list\r\n    for i in unique_list:\r\n        # the product is multiplied by each element of the unique list\r\n        product *= i\r\n\r\n    # return the product\r\n    return product\r\n\r\n\r\n# code to test the function\r\nif __name__ == '__main__':\r\n    # list of integers\r\n    list_data = [2, 3, 5, 2, 3, 4, 5]\r\n\r\n    # call the function\r\n    result = unique_product(list_data)\r\n\r\n    print(f\"The product of the unique numbers in the list is: {result}\")\r\n\r\n\"\"\"\r\nSample Input:\r\n\r\nlist_data = [2, 3, 5, 2, 3, 4, 5]\r\n\r\nSample Output:\r\n\r\nThe product of the unique numbers in the list is: 60\r\n\"\"\"\r\n","votes":174787.736},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    product = 1\r\n    for i in unique_list:\r\n        product = product * i\r\n    return product\r\n\r\n\r","votes":179971.708},{"text":"\r\n    n = len(list_data)\r\n    list_data.sort()\r\n    unique_list = []\r\n    product = 1\r\n    for i in range(0, n):\r\n        if (list_data[i] not in unique_list):\r\n            unique_list.append(list_data[i])\r\n    for i in range(0, len(unique_list)):\r\n        product = product * unique_list[i]\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 3, 2, 3, 4, 5]))\r\n\r\n\r","votes":187998.3},{"text":"\r\n    \r\n    unique = set(list_data)\r\n    prod = 1\r\n    for i in unique:\r\n        prod *= i\r\n    return prod\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list_data = [1, 2, 3, 1, 2, 3, 4, 5, 6]\r\n    print(f\"Product of the unique numbers in {list_data}: {unique_product(list_data)}\")\r\n","votes":192040.452},{"text":"\r\n    \r\n    # create a set from the list\r\n    s = set(list_data)\r\n    \r\n    # create a list from the set\r\n    list_set = list(s)\r\n    \r\n    # create a list that holds the product of each element in the list\r\n    product = []\r\n    \r\n    # create a for loop to iterate through the list\r\n    for i in list_set:\r\n        \r\n        # append each element in the list to the product list\r\n        product.append(i)\r\n        \r\n    # create a variable to hold the product of the list\r\n    product_final = 1\r\n    \r\n    # create a for loop to iterate through the list\r\n    for i in product:\r\n        \r\n        # multiply each element in the list to the product_final\r\n        product_final *= i\r\n        \r\n    \r\n    # return the product of the list\r\n    return product_final\r\n\r\n\r\n# create a list to test the function\r\nlist_data = [3, 5, 7, 1, 2, 3, 5, 4, 6, 7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n# pass the list to the function\r\nprint(unique_product(list_data))\r\n\r\n\r\n#","votes":269259.956},{"text":"\r\n    \r\n    # create a dictionary for the frequency of each number in the list\r\n    count_numbers = {}\r\n    for i in list_data:\r\n        if i in count_numbers:\r\n            count_numbers[i] += 1\r\n        else:\r\n            count_numbers[i] = 1\r\n\r\n    # create a dictionary for the frequency of each number in the list\r\n    unique_numbers = {}\r\n    for key in count_numbers:\r\n        unique_numbers[key] = 1\r\n    \r\n    # create a list to store the unique numbers\r\n    unique_list = []\r\n    for key in unique_numbers:\r\n        unique_list.append(key)\r\n\r\n    # create a dictionary for the frequency of each number in the list\r\n    unique_count = {}\r\n    for i in unique_list:\r\n        if i in count_numbers:\r\n            unique_count[i] = count_numbers[i]\r\n        else:\r\n            unique_count[i] = 0\r\n\r\n    # multiply each number by its frequency\r\n    unique_product = 1\r\n    for key in unique_count:\r\n        unique_product = unique_product * (key ** unique_count[key])\r\n\r\n    return unique_product\r\n\r\nlist_data = [2, 2, 2, 5, 5, 7, 11, 11, 11, 11]\r\nprint(unique_product(list_data))\r\n\r\n# Output: 28561\r\n\r\nlist_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(unique_product(list_data))\r\n\r\n# Output: 362880\r\n\r\nlist_data = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\nprint","votes":null},{"text":"\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a list of unique values in the given list\r\n    unique_values = []\r\n    for value in list_data:\r\n        if value not in unique_values:\r\n            unique_values.append(value)\r\n\r\n    # Initialise the product of the unique values to 1\r\n    product = 1\r\n    for value in unique_values:\r\n        product *= value\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 3, ","votes":null},{"text":"\r\n    list_data = list(set(list_data))\r\n    product = 1\r\n    for i in list_data:\r\n        product *= i\r\n    return product\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list_data =","votes":null},{"text":"\r\n    list_data = list(map(int, list_data.split()))\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for element in unique_list:\r\n        product *= element\r\n    print(product)\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = input(\"Enter the list of numbers: \")\r\n    unique_product(list_data)\r\n\r\n\r\n# Example\r\n# Input:\r\n# Enter the list of numbers: 1 2 3 4 ","votes":null},{"text":"\r\n    list_data_unique = list(set(list_data))\r\n    return reduce(lambda x, y: x * y, list_data_unique)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"List:\", list_data)\r\n    print(\"Unique product:\", unique_product(list_data))\r\n\r\n\r\n\"\"\"\r\nTest Case 1:\r\n    Input:\r\n        List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    Output:\r\n        Unique product: 210\r\n\r\nTest Case 2:\r\n    Input:\r\n        List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\r\n    Output:\r\n        Unique product: 2310\r\n\r\nTest Case 3:\r\n    Input:\r\n        List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\r\n    Output:\r\n        Unique product: 2520\r\n\r\nTest Case 4:\r\n    Input:\r\n        List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1","votes":null},{"text":"\r\n\r\n    # Creating a set for the given list\r\n    set_data = set(list_data)\r\n\r\n    # Creating an empty list for the unique numbers\r\n    unique_list = []\r\n\r\n    # Finding the unique numbers from the set and appending them to the empty list\r\n    for value in set_data:\r\n        if list_data.count(value) == 1:\r\n            unique_list.append(value)\r\n\r\n    # Creating a variable to store the product of the unique numbers\r\n    product = 1\r\n\r\n    # Multiplying the unique numbers together and adding to the product variable\r\n    for value in unique_list:\r\n        product = product * value\r\n\r\n    return product\r\n\r\n\r","votes":null},{"text":"\r\n    import math\r\n    x = []\r\n    y = []\r\n    for i in range(len(list_data)):\r\n        if list_data[i] not in x:\r\n            x.append(list_data[i])\r\n            y.append(list_data.count(list_data[i]))\r\n    return math.prod(y)\r\n\r\nprint(unique_product([1, 2, 2, 4, 2, 3, 4, 3]))\r\n\r\n# Output:\r\n# 24\r\n\r\n# Solution 2\r\nprint('Solution 2')\r\n\r","votes":null},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 2, 3, 3, 4, 4,","votes":null},{"text":"\r\n    list_data.sort()\r\n    return list_data[-1] * list_data[-2] * list_data[-3]\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([2, 3, 5, 6, 7, 8, 9, 10]))\r\n    print(unique_product([4, 4, 4, 4, 4, 4, 4, 4, 4]))\r\n    print(unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(unique_product([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\r\n    print(unique_product([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\r\n    print(unique_product([1, 5, 5, 5, 5, 5, ","votes":null},{"text":"\r\n\r\n    list_unique = []\r\n\r\n    # remove duplicates\r\n    # sort list\r\n    list_data = list(dict.fromkeys(list_data))\r\n    list_data.sort()\r\n    # get unique numbers\r\n    for i in range(len(list_data)):\r\n        if i == 0 or list_data[i] != list_data[i - 1]:\r\n            list_unique.append(list_data[i])\r\n    # multiply unique numbers\r\n\r\n    product = 1\r\n    for i in range(len(list_unique)):\r\n        product = product * list_unique[i]\r\n    print(product)\r\n\r\n\r\n# Input: [1, 2, 3, 5, 3, 5, 6, 7]\r\n# Output: 105","votes":null},{"text":"\r\n    return reduce(mul, set(list_data))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([-10, -10, -10, 10, 10, 10, 10, 20, 20, 30, 30]))\r\n    print(unique_product([-10, 10, 10, 10, 20, 20, 30, 30]))\r\n    print(unique_product([10, 10, 10, 10]))\r\n    print(unique_product([10, 10, 10, 10, 20, 20, 20, 20, 30, 30, 30, 30]))\r\n    print(unique_product([-10, -10, -10, 10, 10, 10, 20, 20, 30, 30]))\r\n    print(unique_product([-10, -10, 10, 10, 20, 20, 30, 30]))\r\n    print(unique_product([-10, 10, 10, 10, 20, 20, 30, 30]))\r\n    print(unique_product([-10, 10, 10, 10, 20, 20, 30, 30]))\r\n    print(unique_product([-10, 10, 10, 10, 20, 20, 30, 30]))\r\n    print(unique_product([-10, 10, 10, 10, 20, 20, 30, 30]))\r\n    print(unique_product([-10, 10, 10,","votes":null},{"text":"\r\n    return len(list(set(list_data)))\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x*y, set(list_data))\r\n\r\n\r\n# Test cases\r","votes":null},{"text":"\r\n    # your code here\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    print('Example:')\r\n    print(unique_product([1, 2, 3, 1, 2]))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert unique_product([1, 2, 3, 1, 2]) == 6\r\n    assert unique_product([-1, -2, -3, 1, 2]) == 6\r\n    assert unique_product([1, 2, 3, 1, 2, 2]) == 6\r\n    assert unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\r\n    assert unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]) == 2\r\n    print('Wow, you are doing","votes":null},{"text":"\r\n    list_data = list(set(list_data))\r\n    product = 1\r\n    for i in list_data:\r\n        product = product * i\r\n    return product\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([1, 2, 3, 1, 4, 5]))\r\n    print(unique_product([1, 2, 3, 1, 4, 5, 6]))\r\n    print(unique_product([1, 2, 3, 1, 4, 5, 6, 1]))\r\n    print(unique_product([1, 2, 3, 1, 4, 5, 6, 1, 1]))\r\n    print(unique_product([1, 2, 3, 1, 4, 5, 6, 1, 1, 1]))\r\n    print(unique_product([1, 2, 3, 1, 4, 5, 6, 1, 1, 1, 2]))\r\n    print(unique_product([1, 2, 3, 1, 4, 5, 6, 1, 1, 1, 2, 5]))\r\n    print(unique_product([1, 2, 3, 1, 4, 5, 6, 1, 1, 1, 2, 5, 5]))\r\n    print(unique_product([1, 2, 3, 1, 4, 5, 6, 1, 1, 1, 2, 5, 5, 1]))\r\n    print(unique_product([1, 2, 3, 1, 4, 5, 6, 1, 1, 1, 2, 5, 5, 1, 1]))\r\n    print(unique_product([1, 2, 3, 1, 4,","votes":null},{"text":"\r\n    unique = []\r\n    for i in list_data:\r\n        if i not in unique:\r\n            unique.append(i)\r\n    product = 1\r\n    for i in unique:\r\n        product *= i\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([1, 2, 3, 3, 5, 5]))\r\n    print(unique_product([1, 2, 3, 3, 5, 5, 5]))\r\n    print(unique_product([1, 2, 3, 3, 5, 5, 5, 6]))\r\n    print(unique_product([1, 2, 3, 3, 5, 5, 5, 6, 6]))\r\n    print(unique_product([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]))\r\n    print(unique_product([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]))\r\n    print(unique_product([1]))\r\n    print(unique_product([1, 2]))\r\n    print(unique_product([1, 2, 3]))\r\n    print(unique_product([1, 2, 3, 4]))\r\n    print(unique_product([1, 2, 3, 4, 5]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8]))\r\n    print(unique_product([","votes":null},{"text":"\r\n    # Solution\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r\n\r\n# Test case 1\r\nlist_data = [1, 2, 3, 4, 5, 1, 2]\r\nprint(unique_product(list_data))\r\n# Output: 60\r\n\r\n# Test case 2\r\nlist_data = [10, 20, 30, 40, 50, 10, 20]\r\nprint(unique_product(list_data))\r\n# Output: 12000\r\n\r\n# Test case 3\r\nlist_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(unique_product(list_data))\r\n# Output: 362880\r\n\r\n# Test case 4\r\nlist_data = [10, 20, 30, 40, 50, 10, 20, 30, 40, 50]\r\nprint(unique_product(list_data))\r\n# Output: 300000000\r\n\r\n# Test case 5\r\nlist_data = [10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50]\r\nprint(unique_product(list_data))\r\n# Output: 30000000000000\r\n\r\n# Test case 6\r\nlist_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1","votes":null},{"text":"\r\n    return np.prod(np.unique(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    list_new = [i for i in list_data if i != 0]\r\n    list_new.sort()\r\n    list_new = list_new[:-1]\r\n    return reduce(lambda x, y: x * y, list_new)\r\n\r\n\r\nlist_data = [1, 1, 2, 3, 4]\r\nprint(f\"Product of the unique numbers of the given list is: {unique_product(list_data)}\")\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    result = 1\r\n    print(\"List: \", list_data)\r\n    for elem in list_data:\r\n","votes":null},{"text":"\r\n    # list_data = [1, 2, 5, 6, 1, 2, 5, 6, 7]\r\n\r\n    # print(list_data)\r\n\r\n    list_data = sorted(list_data)\r\n\r\n    # print(list_data)\r\n\r\n    x = 1\r\n    for i in range(0, len(list_data)):\r\n        if list_data[i] != list_data[i+1]:\r\n            x = x * list_data[i]\r\n    return x\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x*y, set(list_data))\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([1,2,3,4,5,1,2,3]))\r\n    print(unique_product([1,3,5,7,1,3,5,7]))\r\n    print(unique_product([1,2,2,3,4,4,5,5]))\r\n    print(unique_product([1,1,1,1,1,1,1,1]))\r\n    print(unique_product([1,1,1,1,1,1,1,2]))\r\n    print(unique_product([1,1,1,1,1,1,1,3]))\r\n    print(unique_product([1,1,1,1,1,1,1,4]))\r\n    print(unique_product([1,1,1,1,1,1,1,5]))\r\n    print(unique_product([1,1,1,1,1,1,1,6]))\r\n    print(unique_product([1,1,1,1,1,1,1,7]))\r\n    print(unique_product([1,1,1,1,1,1,1,8]))\r\n    print(unique_product([1,1,1,1,1,1,1,9]))\r\n    print(unique_product([1,1,1,1,1,1,1,10]))\r\n    print(unique_product([1,1,1,1,1,1,1,11]))\r\n    print(unique_product([1,1,1,1,1,1,1,12]))\r\n    print(unique_product([1,1,1,1,1,1,1,13]))\r\n    print(unique_product([1,1,1,1,1,1,1,14]))\r\n    print(unique_product([1,1,1","votes":null},{"text":"\r\n    return reduce(lambda x,y: x*y, set(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    unique = set(list_data)\r\n    return functools.reduce(operator.mul, unique)\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x*y, set(list_data))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    list_data = list(set(list_data))\r\n    return reduce(lambda x, y: x * y, list_data)\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [1, 1, 2, 3, 4, 6, 2, 3, 4, 5, 5, 1]\r\n    print(f'The product of the unique numbers of the given list is {unique_product(list_data)}.')\r\n\r\n\r\n'''\r\nTime Complexity \nThe time complexity of the above algorithm is O(N) where \u2018N\u2019 is the number of unique elements in the given list. \r\nThis is because, in the worst case, we might have to iterate through all the elements of the given list. \r\nAdditionally, we are using a set to store the unique elements, which makes the time complexity O(N). \r\nHence, the overall time complexity of the above algorithm will be O(N).\r\n\r\nSpace Complexity \nThe space complexity of the above algorithm will be O(N) as, in the worst case, we might need to store all the unique elements in the set. \r\nHence, the overall space complexity of the above algorithm will be O(N).\r\n'''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    unique = set(list_data)\r\n    return reduce(lambda x, y: x * y, unique)\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r\n\r\n# 1. Using set()\r","votes":null},{"text":"\r\n    unique_number = set(list_data)\r\n    product = 1\r\n    for i in unique_number:\r\n        product *= i\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [2, 3, 4, 5, 2, 3, 4]\r\n    print(unique_product(list_data))\r\n\r\n\r\n\"\"\"\r\nTest cases:\r\n    >>> unique_product([2, 3, 4, 5, 2, 3, 4])\r\n    20\r\n    >>> unique_product([2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4])\r\n    20\r\n    >>> unique_product([5, 5, 5, 5])\r\n    125\r\n    >>> unique_product([5, 5, 5, 5, 5])\r\n    125\r\n    >>> unique_product([1, 2, 3, 4, 5])\r\n    120\r\n    >>> unique_product([1, 2, 3, 4, 5, 6])\r\n    60\r\n    >>> unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1","votes":null},{"text":"\r\n\r\n    unique = set(list_data)\r\n    return (reduce(lambda x, y: x*y, unique))\r\n\r\n\r\ndata = [1, 2, 3, 3, 4, 5, 5, 6, 7, 8]\r\nprint(unique_product(data))\r\n\r\n\r\n# Method 2\r","votes":null},{"text":"\r\n    product = 1\r\n    for item in set(list_data):\r\n        product *= item\r\n    return product\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list_data = [2, 3, 4, 5, 6, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n\r\n\r\n\"\"\"\r\nTest cases:\r\n    a) Input: [2, 3, 4, 5, 6, 2, 3, 4, 5]\r\n    Output: 600\r\n\r\n    b) Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    Output: 362880\r\n\r\n    c) Input: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    Output: 1\r\n\r\n    d) Input: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\r\n    Output: 6\r\n\r\n    e) Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    Output: 3628800\r\n\r\n    f) Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    Output: 3628800\r\n\r\n    g) Input: [1, 2, 3, ","votes":null},{"text":"\r\n    # list_data = [1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10]\r\n    list_data = list(map(int, list_data))\r\n    product = 1\r\n    for i in list_data:\r\n        if list_data.count(i) == 1:\r\n            product = product * i\r\n    return product\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list_data = [1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10]\r\n    print(f\"The unique number product is: {unique_product(list_data)}\")\r\n\r\n\r\n\"\"\"\r\nTest Case 1:\r\n    Input:\r\n        list_data = [1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10]\r\n    Output:\r\n        The unique number product is: 20\r\nTest Case 2:\r\n    Input:\r\n        list_data = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]\r\n    Output:\r\n        The unique number product is: 20\r\nTest Case 3:\r\n    Input:\r\n        list_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    Output:\r\n        The unique number product is: 362880\r\nTest Cas","votes":null},{"text":"\r\n    list_data = list(map(int, list_data))\r\n    list_data = list(set(list_data))\r\n    return (math.prod(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # set() will remove all duplicate elements and return a new set.\r\n    unique_list = set(list_data)\r\n    # list() will convert the set to a list.\r\n    unique_list = list(unique_list)\r\n    # Sort the list in ascending order.\r\n    unique_list.sort()\r\n    # Initialize product as 1.\r\n    product = 1\r\n    # Iterate through the list.\r\n    for num in unique_list:\r\n        # Multiply the current number to the product.\r\n        product = product * num\r\n    return product\r\n\r\n\r\n# Testing\r\nprint(unique_product([2, 1, 3, 2, 5, 2]))  # 10\r\nprint(unique_product([1, 2, 3, 4, 5, 6]))  # 720\r\nprint(unique_product([","votes":null},{"text":"\r\n    new_list = []\r\n    for i in list_data:\r\n        if i not in new_list:\r\n            new_list.append(i)\r\n    product = 1\r\n    for i in new_list:\r\n        product *= i\r\n    return product\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([1, 2, 3, 4, 3, 1, 2, 2]))\r\n    print(unique_product([1, 2, 3, 3, 1, 2, 2, 1]))\r\n    print(unique_product([1, 2, 3, 3, 1, 2, 2, 1, 4]))\r\n    print(unique_product([1, 2, 3, 3, 1, 2, 2, 1, 4, 5]))\r\n    print(unique_product([1, 2, 3, 3, 1, 2, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n    print(unique_product([1, 2, 3, 3, 1, 2, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\n    print(unique_product([1, 2, 3, 3, 1, 2, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\n    print(unique_product([1, 2, 3, 3, 1, 2, 2, 1, 4, 5, 6, 7, 8, 9, 1","votes":null},{"text":"\r\n    list_unique = []\r\n    for i in list_data:\r\n        if i not in list_unique:\r\n            list_unique.append(i)\r\n    return functools.reduce(lambda x, y: x*y, list_unique)\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([1, 2, 3, 1, 4]))\r\n    print(unique_product([4, 5, 6, 2, 3, 4, 5, 6]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6]))\r\n    print(unique_product([4, 5, 6]))\r\n    print(unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]))\r\n    print(unique_product([4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]))\r\n    print(unique_product([4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]))\r\n    print(unique_product([4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 2, 3, 4, 5,","votes":null},{"text":"\r\n    unique = []\r\n    for x in list_data:\r\n        if x not in unique:\r\n            unique.append(x)\r\n    product = 1\r\n    for y in unique:\r\n        product *= y\r\n    return product\r\n\r\n\r\n# Test Cases\r\nprint(unique_product([1,2,3,4,5]))\r\nprint(unique_product([1,2,2,3,4,5]))\r\nprint(unique_product([1,2,3,4,5,5]))\r\nprint(unique_product([1,2,3,4,5,5,6]))\r\nprint(unique_product([1,2,2,3,4,5,5,6]))\r\nprint(unique_product([1,2,3,4,5,5,6,7,8,9,10]))\r\nprint(unique_product([1,2,3,4,5,5,6,7,8,9,10,10]))\r\nprint(unique_product([1,2,3,4,5,5,6,7,8,9,10,10,11]))\r\nprint(unique_product([1,2,3,4,5,5,6,7,8,9","votes":null},{"text":"\r\n\r\n    # Create a set from the list\r\n    unique_set = set(list_data)\r\n\r\n    # Create an empty list\r\n    product = 1\r\n\r\n    # Iterate over the unique set\r\n    for item in unique_set:\r\n\r\n        # Calculate the product\r\n        product = product * item\r\n\r\n    # Return the product\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 1, 3]))\r\nprint(unique_product([1, 2, 1, 4, 3, 4]))\r\nprint(unique_product([1, 2, 3, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 4, 5, 5]))\r\nprint(unique_product([1, 2, 3, 3, 4, 4, 5, 5]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, ","votes":null},{"text":"\r\n    unique_nums = []\r\n    for x in list_data:\r\n        if x not in unique_nums:\r\n            unique_nums.append(x)\r\n    print(f'The unique numbers are: {unique_nums}')\r\n    product = 1\r\n    for y in range(0, len(unique_nums)):\r\n        product *= unique_nums[y]\r\n    print(f'The product of the unique numbers is: {product}')\r\n\r\n\r\nunique_product([1, 2, 3, 4, 5, 5])\r\nunique_product([1, 2, 3, 4, 5, 6, 7, 8])\r\nunique_product([1, 1, 1, 1, 1, 1])\r\nunique_product([2, 4, 5, 6, 2, 3, 4, 5, 6, 7, 8])\r\n","votes":null},{"text":"\r\n    my_set = set(list_data)\r\n    return reduce(lambda x, y: x * y, my_set, 1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(unique_product(list_data))\r\n\r\n\r\n\"\"\"\r\nTest Case 1:\r\nInput:\r\n    List_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nOutput:\r\n    3628800\r\n\r\nTest Case 2:\r\nInput:\r\n    List_data = [1, 1, 3, 4, 5, 6, 7, 8, 9, 10]\r\nOutput:\r\n    5628800\r\n\r\nTest Case 3:\r\nInput:\r\n    List_data = [1, 2, 3, 3, 5, 6, 7, 8, 9, 10]\r\nOutput:\r\n    3628800\r\n\r\nTest Case 4:\r\nInput:\r\n    List_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nOutput:\r\n    3628800\r\n\r\nTest Case 5:\r\nInput:\r\n    List_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nOutput:\r\n    3628800\r\n\r\nTime Complexity: O(n), where n is the length of the list\r\nSpace Complexity: O(n)\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    unique_list = [x for x in list_data if list_data.count(x) == 1]\r\n    product = 1\r\n    for x in unique_list:\r\n        product = product * x\r\n    return product\r\n\r\n\r\nprint(unique_product([5, 2, 3, 4, 5, 4, 5, 2, 3]))\r\nprint(unique_product([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]))\r\nprint(unique_product([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\nprint(unique_product([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))\r\nprint(unique_product([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]))\r\nprint(unique_product([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]))\r\nprint(unique_product([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\r\nprint(unique_product([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]))\r\nprint(unique_product([7, 7, 7, 7","votes":null},{"text":"\r\n    # input\r\n    inp = list_data\r\n    # output\r\n    out = 1\r\n    # body\r\n    for value in inp:\r\n        out = out * value\r\n    return out\r\n\r\n\r\n# tests\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x*y, set(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    product_of_unique = 1\r\n    \r\n    for i in list_data:\r\n        if list_data.count(i) == 1:\r\n            product_of_unique *= i\r\n        \r\n    return product_of_unique\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) # 241920\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15])) # 241920\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 16, 17, 18, 19, 20])) # 241920\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 16, 17, 18, 19, 20, 20, 20])) # 241920\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1","votes":null},{"text":"\r\n    unique = []\r\n    for i in list_data:\r\n        if i not in unique:\r\n            unique.append(i)\r\n    product = 1\r\n    for i in unique:\r\n        product *= i\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([1, 2, 3, 4, 5, 6]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, ","votes":null},{"text":"\r\n\r\n    # Declare the product variable\r\n    product = 1\r\n    # Create a set from the given list\r\n    uniq_list = set(list_data)\r\n    # Iterate over the set\r\n    for element in uniq_list:\r\n        # Multiply the product by the current element\r\n        product *= element\r\n    # Return the product\r\n    return product\r\n\r\n\r\n# Test the function\r\nprint(unique_product([1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13]))\r\nprint(unique_product([1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 13, 13, 13, 13, 13, 13]))\r\nprint(unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\nprint(unique_product([1]))\r\nprint(unique_product([]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(unique_product([1, 2, 3, 4, 5,","votes":null},{"text":"\r\n    # return the product of the unique numbers of a given list\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    unique_numbers = []\r\n    unique_products = []\r\n    for element in list_data:\r\n        if element not in unique_numbers:\r\n            unique_numbers.append(element)\r\n            unique_products.append(element)\r\n        else:\r\n            index = unique_numbers.index(element)\r\n            unique_products[index] = unique_products[index] * element\r\n    return unique_products\r\n\r\n\r\n# Test case 1\r\nprint(\"Test case 1:\")\r\nlist_data = [3, 1, 2, 1, 3, 2]\r\nprint(\"The unique numbers in the list are: \", list_data)\r\nprint(\"The product of the unique numbers in the list are: \", unique_product(list_data))\r\nprint()\r\n\r\n# Test case 2\r\nprint(\"Test case 2:\")\r\nlist_data = [1, 2, 3, 4, 5]\r\nprint(\"The unique numbers in the list are: \", list_data)\r\nprint(\"The product of the unique numbers in the list are: \", unique_product(list_data))\r\nprint()\r\n\r\n# Test case 3\r\nprint(\"Test case 3:\")\r\nlist_data = [1, 1, 1, 1, 1, 1]\r\nprint(\"The unique numbers in the list are: \", list_data)\r\nprint(\"The product of the unique numbers in the list are: \", unique_product(list_data))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n# Test case 1\r\n# The unique numbers in the list are:  [3, 1, 2, 1, 3, 2]\r\n# The product of the unique numbers in the list are:  [2, 3, 6]\r\n\r\n# Test case 2\r\n# The unique numbers in the list are:  [1, 2, 3, 4, 5]\r\n# The product o","votes":null},{"text":"\r\n    return reduce(operator.mul, set(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    list_unique = []\r\n    for i in range(len(list_data)):\r\n        if list_data[i] not in list_unique:\r\n            list_unique.append(list_data[i])\r\n    return","votes":null},{"text":"\r\n    # list_data = [1,2,3,4,5,1,2,3]\r\n    # list_data = [1,2,3]\r\n    # list_data = [1,2,3,3,2,1]\r\n    # list_data = [1,2,3,3,2,1,1,2,3]\r\n\r\n    list_data = list(set(list_data))\r\n    return reduce(lambda a, b: a*b, list_data)\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [1, 2, 2, 1, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n    answer = unique_product(list_data)\r\n    print(answer)\r\n\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    num = set(list_data)\r\n    product = 1\r\n    for i in num:\r\n        product *= i\r\n    return product\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([1, 2, 3, 5, 5, 5, 10]))\r\n    print(unique_product([1, 2, 3, ","votes":null},{"text":"\r\n    return reduce(lambda a, b: a * b, set(list_data))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([5, 5, 1, ","votes":null},{"text":"\r\n    list_data = [int(x) for x in list_data]\r\n    list_data.sort()\r\n    return reduce(lambda x, y: x*y, set(list_data))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(unique_product([1, 2, 3, 4, 5]))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert unique_product([1, 2, 3, 4, 5]) == 60\r\n    assert unique_product([5, 5, 5, 5, 5]) == 125\r\n    assert unique_product([2, 2, 3, 4, 4]) == 96\r\n    assert unique_product([0, 0, 0, 0, 0]) == 0\r\n    assert unique_product([-1, -2, -3, -4, -5]) == 120\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\r\n","votes":null},{"text":"\r\n    list_data = list(set(list_data))\r\n    return reduce(lambda x, y: x * y, list_data)\r\n\r\n\r","votes":null},{"text":"\r\n    list_data = list(set(list_data))\r\n    product = 1\r\n    for i in list_data:\r\n        product *= i\r\n    print(product)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list_data = [1, 2, 3, 4, 5, 1, 2, 3, 4]\r\n    unique_product(list_data)\r\n\r\n\"\"\"\r\nOutput:\r\n    120\r\n\"\"\"\r\n\r\n\r","votes":null}],"time":{"count":37.0,"avg":129642.1921081081,"std":42445.2943619536,"cov":0.3274033991}}
{"id":576,"question":"def is_Sub_Array(A,B,n,m):\r\n    \"\"\"Write a python function to check whether an array is subarray of another or not.\"\"\"","answers":[{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if (A[i+j]!=B[j]):\r\n                break\r\n            if(j==m-1):\r\n                return True\r\n    return False\r\n\r","votes":92726.216},{"text":"\r\n    for i in range(n-m+1):\r\n        flag=0\r\n        for j in range(m):\r\n            if(A[i+j]!=B[j]):\r\n                flag=1\r\n                break\r\n        if(flag==0):\r\n            return True\r\n    return False\r\n\r\n\r","votes":103711.8},{"text":"\r\n    \r\n    for i in range(0,n-m+1):\r\n        for j in range(0,m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            if j == m - 1:\r\n                return True\r\n    return False\r\n\r\n\r","votes":107306.148},{"text":"\r\n    for i in range(0,n-m+1):\r\n        count=0\r\n        for j in range(0,m):\r\n            if(A[i+j]==B[j]):\r\n                count+=1\r\n        if(count==m):\r\n            return True\r\n    return False\r\n\r","votes":107946.36},{"text":"\r\n\r\n    for i in range(0,n-m+1):\r\n        for j in range(0,m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            if j == m-1:\r\n                return True\r\n    return False\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":108342.616},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            if j == m-1:\r\n                return True\r\n    return False\r\n\r\n# Main function\r","votes":110218.988},{"text":"\r\n    for i in range(n-m+1):\r\n        count=0\r\n        for j in range(m):\r\n            if A[i+j]==B[j]:\r\n                count+=1\r\n        if count==m:\r\n            return True\r\n    return False\r\n\r","votes":111519.844},{"text":"\r\n    \r\n    flag = False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            flag = True\r\n            break\r\n    return flag\r\n\r\n\r\nA = [1,2,3,4,5]\r\nB = [2,3,4]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\n\r\n\r\n# OUTPUT:\r\n# True\r\n\r\n# (OR)\r\n\r\n#","votes":115556.236},{"text":"\r\n    for i in range(n-m+1):\r\n        if A[i] == B[0]:\r\n            count = 0\r\n            for j in range(m):\r\n                if A[i+j] == B[j]:\r\n                    count += 1\r\n                if count == m:\r\n                    return True\r\n            else:\r\n                continue\r\n    return False\r\n\r\n\r","votes":115651.036},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if(A[i+j]!=B[j]):\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\nA=[1,2,3,4,5]\r\nB=[2,3]\r\nn=len(A)\r\nm=len(B)\r\nif(is_Sub_Array(A,B,n,m)):\r\n    print(\"Array B is a subarray of A\")\r\nelse:\r\n    print(\"Array B is not a subarray of A\")\r\n\r\n# 28. Check if array is a subset of another array or not.\r\n\"\"\"\r\nAn array is a subset of another if all the elements of the first array are present in the second array.\r\n\"\"\"\r","votes":118480.588},{"text":"\r\n\r\n    if n>m:\r\n        return False\r\n\r\n    for i in range(len(A)):\r\n        if A[i]==B[0]:\r\n            if B==A[i:i+n]:\r\n                return True\r\n    return False\r\n\r\nif __name__ == \"__main__\":\r\n    A=[1,1,2,3,5,8,13,21]\r\n    B=[5,8,13]\r","votes":120242.956},{"text":"\r\n    for i in range(n-m+1):\r\n        if B == A[i:i+m]:\r\n            return True\r\n    return False\r\n\r\n\r\nA = [1, 2, 3, 4, 5, 6]\r\nB = [3, 4, 5]\r\nm,n = len(B), len(A)\r\n\r\nprint(is_Sub_Array(A,B,m,n))\r\n\r\n\r","votes":121086.732},{"text":"\r\n    \r\n    #Base Case 1:\r\n    if n == 0:\r\n        return True\r\n    \r\n    #Base Case 2:\r\n    if m == 0:\r\n        return False\r\n    \r\n    if A[n-1] == B[m-1]:\r\n        return(is_Sub_Array(A,B,n-1,m-1))\r\n    \r\n    return(is_Sub_Array(A,B,n,m-1))\r\n    \r\nA = [1,2,3,4,5,6]\r\nB = [1,2,3]\r\nn = len(A)\r\nm = len(B)\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"Array is a subarray of another\")\r\nelse:\r\n    print(\"Array is not a subarray of another\")\r\n\r\n#Time Complexity: O(n*m)\r\n#Space Complexity: O(1)\r\n\r","votes":123102.4},{"text":"\r\n    for i in range(n-m+1):\r\n        count = 0\r\n        for j in range(m):\r\n            if A[i+j] == B[j]:\r\n                count += 1\r\n            if count == m:\r\n                return True\r\n    return False\r\n\r\nA = [1, 2, 3, 4, 5]\r\nB = [2, 3, 4]\r\nn, m = len(A), len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r","votes":123267.016},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if (A[i+j] != B[j]):\r\n                break\r\n            elif (j == m-1):\r\n                return True\r\n    return False\r\n\r\nA = [1,2,3,4,5]\r\nB = [2,3,4,5]\r\nm = len(B)\r\nn = len(A)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r","votes":125830.648},{"text":"\r\n    \r\n    cnt=0\r\n    for i in range(n-m+1):\r\n        if(A[i]==B[0]):\r\n            for j in range(m):\r\n                if(A[i+j]!=B[j]):\r\n                    break\r\n                elif(j==m-1):\r\n                    return True\r\n    return False\r\n\r\n\r","votes":126499.0},{"text":"\r\n    if m > n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\nA = [1,2,3,4,5,6,7]\r\nB = [3,4,5,6]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n# Time Complexity: O(N)\r\n\r\n# 8. Write a python program to check whether two given strings are rotations of each other.\r\n# (Eg. str1 = abcde, str2 = cdeab is rotation of each other) \r\n\r","votes":127821.052},{"text":"\r\n    for i in range(n-m+1):\r\n        j=0\r\n        while j<m and A[i+j]==B[j]:\r\n            j+=1\r\n        if j==m:\r\n            return True\r\n    return False\r\n\r","votes":127830.924},{"text":"\r\n    for i in range(n-m+1):\r\n        j = 0\r\n        while(j<m):\r\n            if(A[i+j]!=B[j]):\r\n                break\r\n            j+=1\r\n        if(j==m):\r\n            return True\r\n    return False\r\n\r\n##","votes":130617.792},{"text":"\r\n    if m > n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        count = 0\r\n        for j in range(m):\r\n            if A[i+j] == B[j]:\r\n                count += 1\r\n            else:\r\n                break\r\n        if count == m:\r\n            return True\r\n    return False\r\n\r\n\r\nA = [1,2,3,4,5,6,7]\r\nB = [4,5,6]\r","votes":131180.796},{"text":"\r\n    count=0\r\n    for i in range(n-m+1):\r\n        j=0\r\n        while j<m and A[i+j]==B[j]:\r\n            j+=1\r\n        if j==m:\r\n            count+=1\r\n    if count==1:\r\n        return True\r\n    return False\r\n\r\n\r\nA=[1,3,4,5,6,7,8,9]\r\nB=[3,4,5,6,7]\r\nn=len(A)\r\nm=len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n","votes":132886.5},{"text":"\r\n    for i in range(0,n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\nA=[1,2,3,4,5,6,7,8]\r\nB=[4,5]\r\nn=len(A)\r\nm=len(B)\r\nprint('Is B a subarray of A:',is_Sub_Array(A,B,n,m))\r\n\r\n# Output:\r\n# Is B a subarray of A: True\r\n\r\n# Using a different approach\r\n# A=[1,2,3,4,5,6,7,8]\r\n# B=[4,5]\r\n# n=len(A)\r\n# m=len(B)\r\n# print('Is B a subarray of A:',B in A)\r\n\r\n# Output:\r\n# Is B a subarray of A: True\r\n\r\n# Using list comprehension\r\n# s = [2, 3, 4, 5, 6, 7, 8, 9]\r\n# sub_s = [5, 6, 7]\r\n# print(sub_s in s)\r\n\r\n# Output:\r\n# True\r\n\r\n# # Using numpy\r\n# import numpy as np\r\n# A = np.array([1, 2, 3, 4, 5, 6, 7, 8])\r\n# B = np.array([4, 5])\r\n# print(np.isin(B, A))\r\n\r\n# Output:\r\n# [ True False]\r\n\r\n# # Using itertools.permutations\r\n# from itertools import permutations\r\n# s = [2, 3, 4, 5, 6, 7, 8, 9]\r\n# sub_s = [5, 6, 7]\r\n# print(all(sub_s in perm for perm in permutations(s)))","votes":133755.784},{"text":"\r\n    \r\n    for i in range(0,n-m+1):\r\n        for j in range(0,m):\r\n            if A[i+j]!=B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n\r\n\r\nA = [1, 2, 3, 4, 5]\r\nB = [3, 4]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r","votes":134279.668},{"text":"\r\n\r\n    for i in range(n-m+1):\r\n        flag = 1\r\n        for j in range(m):\r\n            if B[j] != A[i+j]:\r\n                flag = 0\r\n                break\r\n        if flag == 1:\r\n            return True\r\n    return False\r\n\r\n\r\nA = [1,2,3,4,5]\r\nB = [2,3,4]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n# Time Complexity: O(n+m)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Implementation 2 - Brute Force\r\n\r","votes":134920.016},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n\r\nif __name__ == \"__main__\":\r\n    A = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\r\n    B = [1,2,3,4,5,6,7,8,9,10]\r\n    \r\n    print(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\n# Time Complexity: O(n*m) \r\n# Space Complexity:","votes":135169.548},{"text":"\r\n    #A = [2,3,5,6,9,10,12]\r\n    #B = [2,3,5,6]\r\n    i = 0\r\n    j = 0\r\n    while (i < n and j < m):\r\n        if (A[i] == B[j]):\r\n            j = j + 1\r\n        \r\n        i = i + 1\r\n\r\n    if (j == m):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":135448.416},{"text":"\r\n    for i in range(0,n-m+1):\r\n        for j in range(0,m):\r\n            if(A[i+j]!=B[j]):\r\n                break\r\n        else:\r\n            return 1\r\n    return 0\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\r\nB = [1, 2, 3, 4]\r\nn = len(A)\r\nm = len(B)\r\nflag = is_Sub_Array(A,B,n,m)\r\nif(flag):\r\n    print(\"Array A is a subarray of Array B\")\r\nelse:\r\n    print(\"Array A is not a subarray of Array B\")\r\n\r\n# Time Complexity: O(n*m), where n is the size of the given array and m is the size of the given subarray\r\n# Space Complexity: O(1)\r\n\r\n# Output:\r\n# Array A is a subarray of Array B\r\n\r\n\r\n### Logic 2\r\n\r","votes":136769.46},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            if j == m-1:\r\n                return True\r\n    return False\r\n\r\nif __name__ == \"__main__\":\r\n    A = [1,2,3,4,5]\r\n    B = [2,3]\r\n    n = len(A)\r\n    m = len(B)\r\n    if is_Sub_Array(A,B,n,m):\r\n        print(\"Yes, B is Subarray of A\")\r\n    else:\r\n        print(\"No, B is not Subarray of A\")\r\n\r\n\r\n# output\r\n# Yes, B is Subarray of A\r\n\r\n\r\n# 3) Write a python program to check whether array is a subset of another or not.\r","votes":138558.66},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n\r\n\r\nA = [1,2,3,4,5]\r\nB = [2,3]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r","votes":139308.0},{"text":"\r\n    \r\n    for i in range(n-m+1):\r\n        count = 0\r\n        for j in range(m):\r\n            if A[i+j] == B[j]:\r\n                count += 1\r\n        if count == m:\r\n            return True\r\n    return False\r\n\r\nA = [1, 2, 3, 4, 5]\r\nB = [2, 3, 4]\r\nm = len(B)\r\nn = len(A)\r\nprint(is_Sub_Array(A,B,m,n))\r\n\r\n\r\n\r\n# Q3. Write a python function to check whether an array is subarray of another or not.\r\n\r","votes":140183.46},{"text":"\r\n    count = 0\r\n    for i in range(n-m+1):\r\n        print(A[i:i+m])\r\n        if(A[i:i+m] == B):\r\n            count += 1\r\n            \r\n    if(count == 1):\r\n        return True\r\n    else:\r\n        return False\r\n    \r\n\r\nA = [1,2,3,4]\r\nB = [2,3]\r\nn = len(A)\r","votes":140794.14},{"text":"\r\n    \r\n    for i in range(n-m+1):\r\n        count=0\r\n        for j in range(m):\r\n            if A[i+j]==B[j]:\r\n                count+=1\r\n        if count==m:\r\n            return True\r\n        \r\n    return False\r\n\r\n\r\nA=[1,2,3,4,5,6]\r\nB=[3,4]\r\nn=len(A)\r\nm=len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\"\"\"\r\nSample Input\/Output\r\n\r\nInput:\r\nA=[1,2,3,4,5,6]\r\nB=[3,4]\r\nn=len(A)\r\nm=len(B)\r\nOutput:\r\nTrue\r\nExplanation: 3 4 from B are found in A at index 2 and 3.\r\n\r\nInput:\r\nA=[1,2,3,4,5,6]\r\nB=[3,5]\r\nn=len(A)\r\nm=len(B)\r\nOutput:\r\nFalse\r\nExplanation: 3 5 from B are not found in A.\r\n\r\nTime Complexity: O(N*M)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":141020.24},{"text":"\r\n    for i in range(n-m+1):\r\n        j = 0\r\n        while j < m and A[i+j] == B[j]:\r\n            j += 1\r\n        if j == m:\r\n            return 1\r\n    return 0\r\n\r","votes":141680.772},{"text":"\r\n    window_start = 0\r\n    count = 0\r\n    for i in range(n):\r\n        if A[i] == B[count]:\r\n            count += 1\r\n        if count == m:\r\n            return True\r\n        elif i < n-m and A[i] != B[count]:\r\n            count = 0\r\n    return False\r\n\r\nA = [1,2,3,4,5,6]\r\nB = [2,3,4]\r\nn = len(A)\r\nm = len(B)\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r","votes":141740.884},{"text":"\r\n    if m > n:\r\n        return False\r\n    i = 0\r\n    j = 0\r\n    while i < n and j < m:\r\n        if A[i] == B[j]:\r\n            i += 1\r\n            j += 1\r\n        else:\r\n            i = i - j + 1\r\n            j = 0\r\n    if j >= m:\r\n        return True\r\n    return False\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nB = [3, 4, 5, 6, 7, 8]\r\n\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\n\r","votes":142962.716},{"text":"\r\n    #check if B is a subarray of A\r\n    for i in range(n-m+1):\r\n        #check if elements of B are present in array A\r\n        found=True\r\n        for j in range(m):\r\n            if B[j]!=A[i+j]:\r\n                found=False\r\n                break\r\n        if found:\r\n            return True\r\n    return False\r\n\r\nA=[1,2,3,4,5,6,7,8,9,10]\r\nB=[3,4,5,6,7]\r\n\r\nn=len(A)\r\nm=len(B)\r\n\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"B is a subarray of A\")\r\nelse:\r\n    print(\"B is not a subarray of A\")\r\n\r\n#Time Complexity: O(n*m)\r\n#Space Complexity: O(1)\r\n\r\n","votes":144523.728},{"text":"\r\n    for i in range(n-m+1):\r\n        count=0\r\n        for j in range(m):\r\n            if A[i+j]==B[j]:\r\n                count+=1\r\n            else:\r\n                break\r\n        if count==m:\r\n            return True\r\n    return False\r\n\r\nA=[1,2,3,4,5,6,7,8,9,10]\r\nB=[1,2,3,4,5,6,7,8,9,10]\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r","votes":144658.528},{"text":"\r\n    for i in range(n-m+1):\r\n        count=0\r\n        for j in range(m):\r\n            if A[i+j]==B[j]:\r\n                count+=1\r\n        if count==m:\r\n            return True\r\n    return False\r\n\r\nA=[1,2,3,4,5,6]\r\nB=[3,4,5,6]\r\n\r\nn=len(A)\r\nm=len(B)\r\n\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"Array B is subarray of Array A\")\r\nelse:\r\n    print(\"Array B is not subarray of Array A\")\r\n\r\n\r\n\r\n# 2. Write a python function to check whether an array is subarray of another or not.\r\n\r","votes":144770.0},{"text":"\r\n    if (m > n):\r\n        return False\r\n    for i in range(n-m+1):\r\n        if (A[i]==B[0]):\r\n            for j in range(m):\r\n                if (A[i+j]!=B[j]):\r\n                    break\r\n            else:\r\n                return True\r\n    return False\r\n\r\n#main function\r\nA = [1,2,3,4,5,6]\r\nB = [3,4]\r\nn = len(A)\r\nm = len(B)\r\nif (is_Sub_Array(A,B,n,m)):\r\n    print(\"Array B is a subarray of array A\")\r\nelse:\r\n    print(\"Array B is not a subarray of array A\")\r\n\r\n\r\n### method 2\r\n\r","votes":146163.256},{"text":"\r\n    for i in range(n-m+1):\r\n        count=0\r\n        for j in range(m):\r\n            if A[i+j]==B[j]:\r\n               count=count+1\r\n               if count==m:\r\n                   return True\r\n            else:\r\n                break\r\n    return False\r\n\r\nA = [1,2,3,4,5]\r\nB = [2,3]\r\nA = [1,2,3,4,5]\r\nB = [4,5]\r\nA = [2,3,4,5]\r\nB = [2,3]\r\nn=len(A)\r\nm=len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n# 11.Write a python function to count the number of times a given element occurs in an array.\r","votes":150743.14},{"text":"\r\n    flag = 0\r\n    for i in range(0,n-m+1):\r\n        j=0\r\n        while(j<m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            j+=1\r\n        if(j == m):\r\n            flag = 1\r\n            break\r\n        \r\n    return flag\r\n\r\n\r\nA = [1, 2, 3, 4, 5]\r\nB = [3, 4, 5]\r\nn = len(A)\r\nm = len(B)\r","votes":151648.652},{"text":"\r\n    for i in range(0,n-m+1):\r\n        count=0\r\n        for j in range(0,m):\r\n            if A[i+j]==B[j]:\r\n                count+=1\r\n        if count==m:\r\n            return True\r\n    return False\r\n\r\nA = [2,6,4,8,10,12,14,16,18,20,22,24,26,28,30]\r\nB = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]\r\nm = len(B)\r\nn = len(A)\r\n\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"Array B is a subarray of A\")\r\nelse:\r\n    print(\"Array B is not a subarray of A\")\r\n\r\n#Time Complexity = O(n) , where n is the size of the array","votes":152955.0},{"text":"\r\n    for i in range(n-m+1):\r\n        count =0\r\n        for j in range(m):\r\n            if A[i+j]==B[j]:\r\n                count +=1\r\n        if(count==m):\r\n            return True\r\n    return False\r\n\r\n\r","votes":154356.14},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n\r\n\r\nA = [1,2,3,4,5,6,7,8,9,10]\r\nB = [1,2,3,4,5,6]\r\n\r\n\r\nn = len(A)\r\nm = len(B)\r\n\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":154539.104},{"text":"\r\n    count = 0\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n        else:\r\n            count += 1\r\n    \r\n    if count == n-m+1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver code\r\nA = [1, 2, 3, 4, 5]\r\nB = [1, 2, 3, 4]\r\nC = [1, 2, 3]\r\nD = [1, 2, 3, 4, 5, 6]\r\n\r\nprint(is_Sub_Array(A,B,5,4))\r\nprint(is_Sub_Array(A,C,5,3))\r\nprint(is_Sub_Array(A,D,5,6))\r\n\r\n\r\n# # Input :  A : [1, 2, 3, 4, 5]\r\n# #         B : [1, 2, 3, 4]\r\n# #         n : 5\r\n# #         m : 4\r\n\r\n# # Output : True\r\n# # Explanation: B is a subarray of A\r\n\r\n# # Input :  A : [1, 2, 3, 4, 5]\r\n# #         B : [1, 2, 3]\r\n# #         n : 5\r\n# #         m : 3\r\n\r\n# # Output : True\r\n# # Explanation: B is a subarray of A\r\n\r\n# # Input :  A : [1, 2, 3, 4, 5]\r\n# #         B : [1, 2, 3, 4, 5, 6]\r\n# #         n : 5\r\n# #         m : 6\r\n\r\n","votes":154746.584},{"text":"\r\n    #base case\r\n    if m==0:\r\n        return True\r\n    #Recursive case\r\n    if n==0:\r\n        return False\r\n    #Recursive case\r\n    if A[0]==B[0]:\r\n        return is_Sub_Array(A[1:],B[1:],n-1,m-1)\r\n    return is_Sub_Array(A,B,n-1,m)\r\n\r\n#main program\r\nA = [1,2,3,4]\r\nB = [1,2,3]\r\nn = len(A)\r\nm = len(B)\r\nif is_Sub_Array(A,B,n,m)==True:\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\n\r\n#--------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":160135.484},{"text":"\r\n    for i in range(n-m+1):\r\n        count = 0\r\n        for j in range(m):\r\n            if A[i+j] == B[j]:\r\n                count += 1\r\n        if count == m:\r\n            return 1\r\n    return 0\r\n\r","votes":162318.608},{"text":"\r\n    # Traverse the first array\r\n    for i in range(n+1-m):\r\n        # Check the elements of the second array\r\n        j = 0\r\n        while j < m and A[i+j] == B[j]:\r\n            j += 1\r\n        # if all elements matched\r\n        if j == m:\r\n            return True\r\n    return False\r\n\r\n\r\n# Input :\r\n# A : [1, 2, 3, 4, 5]\r\n# B : [2, 3, 4]\r\n# Output :\r\n# true\r\n\r","votes":163501.972},{"text":"\r\n    #Brute Force\r\n    for i in range(n-m+1):\r\n        if(A[i]==B[0]):\r\n            j=0\r\n            while(j<m):\r\n                if(A[i+j]!=B[j]):\r\n                    break\r\n                j+=1\r\n            if(j==m):\r\n                return True\r\n    return False\r\n\r","votes":167408.576},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            if j == m-1:\r\n                return True\r\n    return False\r","votes":173896.036},{"text":"\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7]\r\nB = [3, 4, 5]\r\nC = [1, 2, 3, 4]\r\nn = len(A)\r\nm = len(B)\r\n# print(A, B, C, n, m)\r\n# print(is_Sub_Array(A, B, n, m))\r\n# print(is_Sub_Array(C, B, n, m))\r\n\r","votes":177209.408},{"text":"\r\n    \r\n    i = 0\r\n    j = 0\r\n    \r\n    while i < n and j < m:\r\n        if B[j] == A[i]:\r\n            j += 1\r\n            i += 1\r\n        else:\r\n            i += 1\r\n    if j == m:\r\n        return True\r\n    return False\r\n\r\n\r","votes":183800.24},{"text":"\r\n    \r\n    # check if subarray is empty\r\n    if m == 0:\r\n        return True\r\n    \r\n    # check if array is empty\r\n    if n == 0:\r\n        return False\r\n    \r\n    # check each element in the array\r\n    for i in range(n-m+1):\r\n        \r\n        # compare elements of subarray and main array\r\n        for j in range(m):\r\n            \r\n            # if all elements are matching\r\n            if A[i+j] != B[j]:\r\n                break\r\n                \r\n            # if all elements are matching\r\n            elif j == m-1:\r\n                return True\r\n    \r\n    # if no match found\r\n    return False\r\n\r\n# test case 1\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nB = [3, 4, 5, 6, 7, 8, 9]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n# test case 2\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n# test case 3\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nB = [3, 4, 5, 6, 7, 8, 9, 10, 11]\r\nn = len","votes":189444.612},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n    \r\nif __name__==\"__main__\":\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [1, 2, 3, 4]\r\n    n = len(A)\r","votes":190309.484},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(n-m+1):\r\n        flag = True\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                flag = False\r\n                break\r\n        if flag == True:\r\n            count = count + 1\r\n            \r\n    if count == 0:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":190575.548},{"text":"\r\n    i = 0\r\n    j = 0\r\n    while j<m and i<n:\r\n        if A[i] == B[j]:\r\n            i+=1\r\n            j+=1\r\n        else:\r\n            i = i - j + 1\r\n            j = 0\r\n    if j == m:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nA = [1,3,5,7,9,11]\r\nB = [3,5,7]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r","votes":194704.896},{"text":"\r\n    for i in range(n-m+1):\r\n        j = 0\r\n        while(j<m):\r\n            if(A[i+j]!=B[j]):\r\n                break\r\n            j+=1\r\n        if(j==m):\r\n            return True\r\n    return False\r\n    \r\nA = [1,2,3,4,5,6,7,8,9]\r\nB = [3,4,5]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r","votes":204875.816},{"text":"\r\n    for i in range(len(A)-m+1):\r\n        j=0\r\n        while(j<m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            else:\r\n                j+=1\r\n        if j==m:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    B = [3, 4, 5]\r\n    n = len(A)\r\n    m = len(B)\r\n   ","votes":206418.008},{"text":"\r\n    if m>n:\r\n        return False\r\n    elif m==n:\r\n        return A==B\r\n    else:\r\n        for i in range(n-m+1):\r\n            if A[i:i+m]==B:\r\n                return True\r\n        return False\r\n\r","votes":208333.084},{"text":"\r\n    for i in range(n-m+1):\r\n        j=0\r\n        while(j<m):\r\n            if(A[i+j]!=B[j]):\r\n                break\r\n            j+=1\r\n        if(j==m):\r\n            return True\r\n    return False\r\n\r\nA = [1,2,3,4,5,6,7,8]\r\nB = [3,4,5,6]\r\nm = len(B)\r\nn = len(A)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n#Reference: w3resource\r\n\r\n\"\"\"\r\nTime Complexity: O(n+m), where n is the length of the first array and m is the length of the second array.\r\n\r\nSpace Complexity: O(1)\r\n\r\nExamples:\r\n\r\nInput: A = [1, 2, 3, 4, 5, 6, 7, 8], B = [3, 4, 5, 6], m = 4, n = 8\r\nOutput: True\r\nExplanation: The array B[] is a subarray of the array A[]\r\n\r\nInput: A = [1, 2, 3, 4, 5, 6, 7, 8], B = [3, 4, 5, 9], m = 4, n = 8\r\nOutput: False\r\nExplanation: The array B[] is not a subarray of the array A[]\r\n\r\nInput: A = [1, 2, 3, 4, 5, 6, 7, 8], B = [3, 4, 5, 6], m = 4, n = 7\r\nOutput: False\r\nExplanation: The array B[] is not a subarray of the array A[]\r\n\"\"\"\r\n\r\n#Method 2: (Using Hashing)\r\n\r","votes":212229.0},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            elif j == m-1:\r\n                return True\r\n    return False\r\n\r\n\r\nA = [1, 2, 3, 5, 6]\r\nB = [3, 5]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"The given array is subarray of another or not: \",is_Sub_Array(A,B,n,m))\r\n\r\n\"\"\"\r\nSample Input 1:\r\n    A = [1, 2, 3, 5, 6]\r\n    B = [3, 5]\r\n\r\nSample Output 1:\r\n    The given array is subarray of another or not:  True\r\n\r\nSample Input 2:\r\n    A = [1, 2, 3, 5, 6]\r\n    B = [3, 5, 6, 7]\r\n\r\nSample Output 2:\r\n    The given array is subarray of another or not:  False\r\n\r\nTime Complexity: O(n-m+1)\r\nSpace Complexity: O(1)\r\n\r\n\"\"\"\r\n\r\n\r","votes":215993.7},{"text":"\r\n    flag = 0\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if(A[i+j]!=B[j]):\r\n                flag = 1\r\n                break\r\n        if(flag==0):\r\n            return True\r\n        flag = 0\r\n    return False\r\n\r\nA = [1,2,3]\r\nB = [2,3]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"Is A subarray of B? \", is_Sub_Array(A,B,n,m))\r\n\r\nA = [1,2,3,4,5,6,7,8,9]\r\nB = [2,4,6,8]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"Is A subarray of B? \", is_Sub_Array(A,B,n,m))\r\n\r\nA = [1,2,3,4,5,6,7,8,9]\r\nB = [2,3,6,9]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"Is A subarray of B? \", is_Sub_Array(A,B,n,m))\r\n\r\nA = [1,2,3,4,5,6,7,8,9]\r\nB = [6,7,8,9]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"Is A subarray of B? \", is_Sub_Array(A,B,n,m))\r\n\r\nA = [1,2,3,4,5,6,7,8,9]\r\nB = [1,2,3,4,5,6,7,8,9]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"Is A subarray of B? \", is_Sub_Array(A,B,n,m))\r\n\r\n","votes":245617.952},{"text":"\r\n    \r\n    # check if the second array length is greater than the first array length\r\n    if m > n:\r\n        return False\r\n        \r\n    # check if any of the element in the second array is not present in the first array\r\n    for i in range(m):\r\n        if B[i] not in A:\r\n            return False\r\n    return True\r\n    \r\narray1 = [1,2,3,4,5,6,7,8,9,10]\r\narray2 = [2,4,6,8,10]\r\nn = len(array1)\r\nm = len(array2)\r\nprint(\"Is Sub Array: \",is_Sub_Array(array1,array2,n,m))\r\n\r\n# Time Complexity: O(n+m)\r\n# Space Complexity: O(1)\r\n\r\n# Test Cases\r\n#\r\n# Test Case 1:\r\n# Input:\r\n#         array1 = [1,2,3,4,5,6,7,8,9,10]\r\n#         array2 = [2,4,6,8,10]\r\n# Output:\r\n#         Is Sub Array:  True\r\n#\r\n# Test Case 2:\r\n# Input:\r\n#         array1 = [1,2,3,4,5,6,7,8,9,10]\r\n#         array2 = [1,2,3,4,5,6,7,8,9,10,11]\r\n# Output:\r\n#         Is Sub Array:  False\r\n#\r\n# Test Case 3:\r\n# Input:\r\n#         array1 = [1,2,3,4,5,6,7,8,9,10]\r\n#         array2 = [2,4,6,8,10,12]\r\n# Output:\r\n#         Is Sub Array:  False\r\n#\r\n# Test Case 4:","votes":null},{"text":"\r\n    \r\n    for i in range(0, n-m+1):\r\n        for j in range(0, m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            elif j == m-1:\r\n                return \"True\"\r\n    return \"False\"\r\n\r\nA = [1,2,3,4,5]\r\nB = [2,3,4]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\n# ------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    #Your code goes here\r\n    for i in range(n-m+1):\r\n        count = 0\r\n        for j in range(m):\r\n            if (A[i+j]==B[j]):\r\n                count+=1\r\n        if (count==m):\r\n            return 1\r\n    return 0\r\n\r\n\r\n\r\nA = [1,2,3,4,5]\r\nB = [2,3]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\nA = [1,2,3,4,5]\r\nB = [2,4]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,2,3,4,5]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,3]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,4]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\nA = [1,2,3,4,5]\r\nB = [3,4,5]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\nA = ","votes":null},{"text":"\r\n    flag=0                                                   #flag will be zero if subarray is not found\r\n    for i in range(n-m+1):                                   #loop for traversing the array\r\n        count=0                                              #count will be zero if subarray is not found\r\n        for j in range(m):\r\n            if A[i+j]==B[j]:                                 #checking if the elements of the subarray are present\r\n                count+=1                                     #if present increasing the count by 1\r\n        if count==m:                                         #if the count is equal to the length of subarray\r\n            flag=1                                           #the subarray is found\r\n            break\r\n    if flag==1:\r\n        print(\"Yes\")                                         #if subarray is found\r\n    else:\r\n        print(\"No\")                                          #if subarray is not found\r\n\r\nif __name__=='__main__':\r\n    A=[1,2,3,4,5,6]\r\n    B=[3,4,5]\r\n    n=len(A)                                                 #length of","votes":null},{"text":"\r\n    for i in range(n-m+1):\r\n        counter = 0\r\n        for j in range(m):\r\n            if A[i+j] == B[j]:\r\n                counter += 1\r\n            else:\r\n                break\r\n        if counter == m:\r\n            return True\r\n    return False\r\n\r\n# Taking Inputs\r\nn = int(input(\"Enter the length of first array: \"))\r\nm = int(input(\"Enter the length of second array: \"))\r\nA = [int(x) for x in input(\"Enter the first array: \").split()]\r\nB = [int(x) for x in input(\"Enter the second array: \").split()]\r\n\r\n# Displaying result\r\nprint(\"Is the second array a subarray of the first array?\", is_Sub_Array(A,B,n,m))\r\n\r\n# OUTPUT\r\n# Enter the length of first array: 5\r\n# Enter the length of second array: 3\r\n# Enter the first array: 1 2 3 4 5\r\n# Enter the second array: 2 3 4\r\n# Is the second array a subarray of the first array? True\r\n\r\n# Enter the length of first array: 5\r\n# Enter the length of second array: 2\r\n# Enter the first array: 1 2 3 4 5\r\n# Enter the second array: 2 4\r\n# Is the second array a subarray of the first array? False\r\n\r\n# Time Complexity: O(n+m)\r\n# Space Complexity: O(1)\r\n","votes":null},{"text":"\r\n    # code here\r\n    i = 0\r\n    j = 0\r\n    while i < n and j < m:\r\n        if A[i] == B[j]:\r\n            i += 1\r\n            j += 1\r\n        else:\r\n            i = 0\r\n            j += 1\r\n    if j == m:\r\n        return True\r\n    else:\r\n        return False    \r\n\r\n# Driver code\r\nA = [1, 2, 3, 4, 5]\r\nB = [1, 2, 3]\r\nn = len(A)\r\nm = len(B)\r\nif is_Sub_Array(A, B, n, m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\nA = [1, 4, 3, 6, 5]\r\nB = [1, 2, 3]\r\nn = len(A)\r\nm = len(B)\r\nif is_Sub_Array(A, B, n, m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\nA = [1, 2, 3]\r\nB = [1, 2, 3, 4]\r\nn = len(A)\r\n","votes":null},{"text":"\r\n\r\n    # check for size of B is greater than size of A\r\n    if m > n:\r\n        return False\r\n    # check for all the elements of A are in B\r\n    for i in range(0, n-m+1):\r\n        flag = 0\r\n        for j in range(0, m):\r\n            if A[i+j] != B[j]:\r\n                flag = 1\r\n                break\r\n        if flag == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nA = [2,3,1,2,4,3]\r\nB = [2,3,4]\r\nn = len(A)\r\nm = len(B)\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n'''\r\nTime Complexity: O(n-m+1)*m\r\nSpace Complexity: O(1)\r\n\r\nOUTPUT:\r\nTrue\r\n'''\r\n\r\n\r\n'''\r\nAPPROACH 2:\r\nTaking two pointers, one at the beginning of A and one at the beginning of B\r\nif the first element matches then increment the first pointer of A and first pointer of B\r\nelse check for the second element of A and B\r\nif the second element matches then increment the first pointer of A and first pointer of B\r\nelse check for the third element of A and B\r\nif the third element matches then increment the first pointer of A and first pointer of B\r\nelse check for the fourth element of A and B\r\nif the fourth element matches then increment the first pointer of A and first pointer of B\r\nelse check for the fifth element of A and B\r\nif the fifth element matches then increment the first pointer of A and first pointer of B\r\nelse check for the sixth element of A and B\r\nif the sixth element matches then increment the first pointer of A and first pointer of B\r\nelse check for the seventh element of A and B\r\nif the seventh element matches then increment the first pointer of A and first pointer o","votes":null},{"text":"\r\n    \r\n    # A is array, B is subarray, n is size of array, m is size of subarray\r\n    # Using 2-D array\r\n    \r\n    dp = [[False for i in range(m)] for j in range(n)]\r\n    \r\n    for i in range(n):\r\n        \r\n        for j in range(m):\r\n            \r\n            if i == 0:\r\n                \r\n                if A[i] == B[j]:\r\n                    \r\n                    dp[i][j] = True\r\n                \r\n                else:\r\n                    \r\n                    dp[i][j] = False\r\n                    \r\n            else:\r\n                \r\n                if A[i] == B[j]:\r\n                    \r\n                    dp[i][j] = dp[i-1][j]\r\n                \r\n                else:\r\n                    \r\n                    dp[i][j] = False\r\n                \r\n    for i in range(n):\r\n        \r\n        for j in range(m):\r\n            \r\n            if dp[i][j] == True:\r\n                \r\n                return True\r\n    \r\n    return False\r\n\r\n\r\n\r\n\r\nA = [1,2,3,4,5,6,7]\r\nB = [3,4,5,6]\r\nn = len(A)\r\nm = len(B)\r\n\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\n\r\nA = [1,2,3,4,5,6,7]\r\nB = [3,4,5,7]\r\nn = len(A)\r\nm = len(B)\r\n\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n","votes":null},{"text":"\r\n    for i in range(n-m+1):\r\n        j=0\r\n        while(j<m):\r\n            if(A[i+j]!=B[j]):\r\n                break\r\n            j+=1\r\n        if(j==m):\r\n            return True\r\n    return False\r\nA = list(map(int,input().split()))\r\nB = list(map(int,input().split()))\r\nn = len(A)\r\nm = len(B)\r\nif(is_Sub_Array(A,B,n,m)):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\n#Reference : https:\/\/www.geeksforgeeks.org\/check-if-an-array-is-a-subarray-of-another-array\/\r\n#Time Complexity = O(n-m+1) and Auxiliary Space = O(1)\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            #print(\"i\",i)\r\n            if A[i+j]!=B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n\r\nA=list(map(int,input(\"Enter the elements of the array A: \").split()))\r\nB=list(map(int,input(\"Enter the elements of the array B: \").split()))\r\nn=len(A)\r\nm=len(B)\r\nprint(\"The array B is a subarray of A\",is_Sub_Array(A,B,n,m))\r\n\r\n\r\n#-----------------------\r","votes":null},{"text":"\r\n    if m>n:\r\n        return False\r\n    i=0\r\n    j=0\r\n    for j in range(n):\r\n        if A[i]==B[j]:\r\n            i+=1\r\n            if i==m:\r\n                return True\r\n        else:\r\n            i=0\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if len(B) > len(A):\r\n        return False\r\n    i = 0\r\n    j = 0\r\n    while i < n and j < m:\r\n        if A[i] == B[j]:\r\n            j += 1\r\n        i += 1\r\n    if j == m:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nA = [1, 2, 3, 4, 5]\r\nn = len(A)\r\nB = [3, 4, 5]\r\nm = len(B)\r\n\r\nif is_Sub_Array(A, B, n,","votes":null},{"text":"\r\n    for i in range(0,n-m+1):\r\n        for j in range(0,m):\r\n            if B[j]!=A[i+j]:\r\n                break\r\n            if j==m-1:\r\n                return True\r\n    return False\r\n\r\n\r\nA=[1,2,3,4,5,6,7,8,9,10]\r\nB=[3,4,5]\r\nn=len(A)\r\nm=len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\"\"\"\r\nTime Complexity: O(N*M)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    i =0\r\n    j=0\r\n    while i < n and j < m:\r\n        if A[i] == B[j]:\r\n            i+=1\r\n            j+=1\r\n        else:\r\n            j = 0\r\n    if j==m:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nif __name__ == '__main__':\r\n    A = [1,2,3,4,5]\r\n    B = [2,3,4]\r\n    n = len(A)\r\n    m = len(B)\r\n    if is_Sub_Array(A,B,n,m):\r\n        print(\"Yes, B is a subarray of A\")\r\n    else:\r\n        print(\"No, B is not a subarray of A\")\r\n\r\n\r\n# # Example 1\r\n# \r\n# Input: A = {1, 2, 3, 4, 5}, B = {2, 3, 4}\r\n# \r\n# Output: Yes, B is a subarray of A\r\n# \r\n# Explanation: {2, 3, 4} is a subarray of {1, 2, 3, 4, 5}\r\n\r\n# In[2]:\r\n\r\n\r\nA=[1,2,3,4,5]\r\nB=[2,3,4]\r\nn=len(A)\r\nm=len(B)\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"Yes, B is a subarray of A\")\r\nelse:\r\n    print(\"No, B is not a subarray of A\")\r\n\r\n\r\n# # Example 2\r\n# \r\n# Input: A = {1, 2, 3, 4, 5}, B = {3, 4, 5}\r\n# \r\n# Output: Yes, B is a subarray of A\r\n# \r\n# Explanation: ","votes":null},{"text":"\r\n    i = 0\r\n    for j in range(n-m+1):\r\n        if (A[j:j+m] == B).all():\r\n            return True\r\n    return False\r\n\r\n\r\n#Testing\r\nA = [1,","votes":null},{"text":"\r\n    i, j = 0, 0\r\n    while(i < n and j < m):\r\n        if A[i] == B[j]:\r\n            j += 1\r\n            i += 1\r\n        else:\r\n            i -= j-1\r\n            j = 0\r\n    if j == m:\r\n        print(\"{} is Sub Array of {}\".format(B,A))\r\n    else:\r\n        print(\"{} is not Sub Array of {}\".format(B,A))\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [1,3,5,7,9,11]\r\n    B = [3,5,7]\r\n    n = len(A)\r\n    m = len(B)\r\n    is_Sub_Array(A,B,n,m)\r\n\r\n    A = [1,2,3,4,5]\r\n    B = [4,5,6,7]\r\n    n = len(A)\r\n    m = len(B)\r\n    is_Sub_Array(A,B,n,m)\r\n\r\n    A = [1,2,3,4,5]\r\n    B = [5,6,7,8]\r\n    n = len(A)\r\n    m = len(B)\r\n    is_Sub_Array(A,B,n,m)\r\n\r\n    A = [1,2,3,4,5]\r\n    B = [1,2,3,4,5,6]\r\n    n = len(A)\r\n    m = len(B)\r\n    is_Sub_Array(A,B,n,m)\r\n\r\n    A = [1,2,3,4,5]\r\n    B = [2,3,4]\r\n    n = len(A)\r\n    m = len(B)\r\n    is_Sub_Array(A,B,n,m)\r\n\r\n    A = [1,2,3,","votes":null},{"text":"\r\n    for i in range(n-m+1):\r\n        s,e = i,i+m-1\r\n        flag = True\r\n        for j in range(m):\r\n            if(A[s]!=B[j]):\r\n                flag = False\r\n                break\r\n            s+=1\r\n        if(flag):\r\n            return \"Yes\"\r\n    return \"No\"\r\n\r\nA = input(\"Enter the first array: \").split()\r\nB = input(\"Enter the second array: \").split()\r\nm = int(input(\"Enter the length of the second array: \"))\r\nn = int(input(\"Enter the length of the first array: \"))\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nInput:\r\nEnter the first array: 1 2 3 4 5 6 7 8 9 10\r\nEnter the second array: 2 3 4 5\r\nEnter the length of the second array: 4\r\nEnter the length of the first array: 10\r\n\r\nOutput:\r\nYes\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nInput:\r\nEnter the first array: 1 2 3 4 5 6 7 8 9 10\r\nEnter the second array: 2 3 4 5 6\r\nEnter the length of the second array: 5\r\nEnter the length of the first array: 10\r\n\r\nOutput:\r\nNo\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nInput:\r\nEnter the first array: 1 2 3 4 5 6 7 8 9 10\r\nEnter the second array: 2 3 4 5\r\nEnter th","votes":null},{"text":"\r\n    \r\n    # Your code goes here\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\nA = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\r\nB = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\nA = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\r\nB = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\nA = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\r\nB = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\nA = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\r\nB = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16]\r\nprint(is","votes":null},{"text":"\r\n    for i in range(len(A)-m+1):\r\n        if(A[i]==B[0]):\r\n            for j in range(1,m):\r\n                if(A[i+j]!=B[j]):\r\n                    break\r\n            else:\r\n                return True\r\n    return False\r\n\r\nA=input(\"Enter the first array: \")\r\nB=input(\"Enter the second array: \")\r\nn=len(A)\r","votes":null},{"text":"\r\n    \r\n    # Using Binary Search\r\n   ","votes":null},{"text":"\r\n\r\n    # Your code goes here\r\n    for i in range(n-m+1):\r\n        flag = 0\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                flag = 1\r\n                break\r\n        if flag == 0:\r\n            return True\r\n\r\n    return False\r\n\r\n\r\nif __name__=='__main__':\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [1, 2, 3]\r\n    n = len(A)\r\n    m = len(B)\r\n    print(\"Sub Array of given array is:\", is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\"\"\"\r\nInput:\r\nA = [1, 2, 3, 4, 5]\r\nB = [1, 2, 3]\r\nn = len(A)\r\nm = len(B)\r\n\r\nOutput:\r\nSub Array of given array is: True\r\n\r\n\r\nInput:\r\nA = [1, 2, 3, 4, 5]\r\nB = [1, 2, 3, 4, 5]\r\nn = len(A)\r\nm = len(B)\r\n\r\nOutput:\r\nSub Array of given array is: True\r\n\r\n\r\nInput:\r\nA = [1, 2, 3, 4, 5]\r\nB = [1, 2, 3, 5]\r\nn = len(A)\r\nm = len(B)\r\n\r\nOutput:\r\nSub Array of given array is: False\r\n\r\n\r\nTime Complexity: O(n*m) where n is the size of the array A and m is the size of the array B.\r\nSpace Complexity: O(1)\r\n\r\n\"\"\"\r\n\r\n\r\nclass Solution:\r\n   ","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-m+1):\r\n        if A[i] == B[0]:\r\n            for j in range(m):\r\n                if B[j] != A[i+j]:\r\n                    break\r\n                if j == m-1:\r\n                    return True\r\n    return False\r\n\r\n\r\nA = list(map(int, input(\"Enter the elements of array A: \").strip().split()))\r\nB = list(map(int, input(\"Enter the elements of array B: \").strip().split()))\r\nn = len(A)\r\nm = len(B)\r\n\r\nprint(\"The elements of array A: \", A)\r\nprint(\"The elements of array B: \", B)\r\n\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"The array B is subarray of array A.\")\r\nelse:\r\n    print(\"The array B is not subarray of array A.\")\r\n\r\n\r\n# Test Cases\r\n\r\n\"\"\"\r\nSample I\/O:\r\n\r\nEnter the elements of array A: 1 2 3 4 5 6\r\nEnter the elements of array B: 1 2 3\r\nThe elements of array A: [1, 2, 3, 4, 5, 6]\r\nThe elements of array B: [1, 2, 3]\r\nThe array B is subarray of array A.\r\n\r\nEnter the elements of array A: 1 2 3 4 5 6\r\nEnter the elements of array B: 1 2 3 4 5\r\nThe elements of array A: [1, 2, 3, 4, 5, 6]\r\nThe elements of array B: [1, 2, 3, 4, 5]\r\nThe array B is not subarray of array A.\r\n\r\nEnter the elements of array A: 1 2 3 4 5 6","votes":null},{"text":"\r\n\r\n    i = j = 0\r\n    while i < n and j < m:\r\n        if A[i] == B[j]:\r\n            j += 1\r\n            i += 1\r\n        else:\r\n            i = i - j + 1\r\n            j = 0\r\n\r\n    if j == m:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nA = [2,3,4,1,5]\r\nB = [2,3,4]\r\n\r\nn = len(A)\r\nm = len(B)\r\n\r\nif is_","votes":null},{"text":"\r\n    \r\n    if n <= m:\r\n        return False\r\n\r\n    for i in range(n-m+1):\r\n        count = 0\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n        if j == m-1:\r\n            return True\r\n\r\n    return False\r\n\r\n\r\nA = list(map(int,input().split()))\r\nB = list(map(int,input().split()))\r\nn = len(A","votes":null},{"text":"\r\n    i = 0\r\n    j = 0\r\n    while i < n and j < m:\r\n        if A[i] == B[j]:\r\n            i += 1\r\n            j += 1\r\n        else:\r\n            i = i - j + 1\r\n            j = 0\r\n    if j == m:\r\n        print(\"It is a subarray\")\r\n    else:\r\n        print(\"It is not a subarray\")\r\n\r\n\r\nA = [1, 2, 3, 4, 5]\r\nB = [3, 4]\r\nn = len(A)\r\nm = len(B)\r\nis_Sub_Array(A,B,n,m)\r\n\r\n\r","votes":null},{"text":"\r\n    if (n<m):\r\n        return \"False\"\r\n    else:\r\n        for i in range(0,n-m+1):\r\n            count = 0\r\n            for j in range(0,m):\r\n                if A[i+j] == B[j]:\r\n                    count += 1\r\n            if count == m:\r\n                return \"True\"\r\n        return \"False\"\r\n\r\nn = int(input(\"Enter the size of first array : \"))\r\nA = list(map(int,input(\"Enter the elements of first array : \").split()))\r\nm = int(input(\"Enter the size of second array : \"))\r\nB = list(map(int,input(\"Enter the elements of second array : \").split()))\r\nprint(\"The given array is Sub-Array of another array : \",is_Sub_Array(A,B,n,m))\r\n\r\n\"\"\"\r\nTime Complexity : O(n+m)\r\nSpace Complexity : O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nEnter the size of first array : 5\r\nEnter the elements of first array : 2 4 6 7 9\r\nEnter the size of second array : 3\r\nEnter the elements of second array : 2 4 6\r\nThe given array is Sub-Array of another array :  True\r\n\r\nSAMPLE 2\r\n\r\nEnter the size of first array : 5\r\nEnter the elements of first array : 2 4 6 7 9\r\nEnter the size of second array : 3\r\nEnter the elements of second array : 2 4 5\r\nThe given array is Sub-Array of another array :  False\r\n\r\nSAMPLE 3\r\n\r\nEnter the size of first array : 5\r\nEnter the elements of first array : 2 4 6 7 9\r\nEnter the size of second array : 3\r\nEnter the elements of second array : ","votes":null},{"text":"\r\n    i = 0\r\n    j = 0\r\n    flag = 0\r\n    while i < n:\r\n        if A[i] == B[j]:\r\n            j = j + 1\r\n            if j == m:\r\n                return True\r\n        else:\r\n            i = i + 1\r\n            j = 0\r\n    return False\r\n\r\nA = [1,2,3,4,5]\r\nB = [3,4]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r","votes":null},{"text":"\r\n    for i in range(0,n-m+1):\r\n        for j in range(0,m):\r\n            if A[i+j]!=B[j]:\r\n                break\r\n            if j==m-1:\r\n                print(\"Subarray found\")\r\n                return True\r\n    print(\"Subarray not found\")\r\n    return False\r\n\r\nif __name__ == \"__main__\":\r\n    A = [1,2,3]\r\n    B = [2,3]\r\n    n = len(A)\r\n    m = len(B)\r\n    is_Sub_Array(A,B,n,m)\r\n\r\n\"\"\"\r\nTime Complexity: O(n*m)\r\nSpace","votes":null},{"text":"\r\n    #print(A,B,n,m)\r\n    window = [0]*n\r\n    for i in range(m):\r\n        #print(\"i\",i)\r\n        if A[i] in window:\r\n            return True\r\n        else:\r\n            window[i%n] = A[i]\r\n    return False\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    data = [\r\n            [ [1,2,3], [2,1,2,3], 3, 4 ],\r\n            [ [1,2,3], [2,1,2,3], 3, 3 ],\r\n            [ [1,2,3], [2,1,2,3], 4, 3 ],\r\n            [ [1,2,3], [2,1,2,3], 3, 5 ],\r\n            [ [1,2,3], [2,1,2,3], 5, 3 ],\r\n            [ [1,2,3,4], [2,1,2,3], 3, 5 ],\r\n            [ [1,2,3,4], [2,1,2,3], 5, 3 ],\r\n            [ [1,2,3], [2,1,2,3], 4, 3 ],\r\n            [ [1,2,3], [2,1,2,3], 3, 5 ],\r\n            [ [1,2,3], [2,1,2,3], 5, 3 ],\r\n            [ [1,2,3], [2,1,2,3], 4, 3 ],\r\n            [ [1,2,3], [2,1,2,3], 3, 5 ],\r\n            [ [1,2,3], [2,1,2,3], 5, 3 ],\r\n            [ [1,2,3], [2,1,2,3], 4, 3 ],","votes":null},{"text":"\r\n    \r\n    i=0\r\n    for j in range(n-m+1):\r\n        if A[j]==B[0]:\r\n            while i<m and A[j+i]==B[i]:\r\n                i+=1\r\n            if i==","votes":null},{"text":"\r\n    flag = 0\r\n    for i in range(n - m + 1):\r\n        for j in range(m):\r\n            if A[i + j] != B[j]:\r\n                flag = 0\r\n                break\r\n            else:\r\n                flag = 1\r\n        if flag == 1:\r\n            return True\r\n    return False\r\n\r\nn = int(input('Enter size of first array: '))\r\nm = int(input('Enter size of second array: '))\r\nA = []\r\nB = []\r\nfor i in range(n):\r\n    x = int(input('Enter value for first array: '))\r\n    A.append(x)\r\nfor i in range(m):\r\n    y = int(input('Enter value for second array: '))\r\n    B.append(y)\r\nprint(f'The first array is: {A}')\r\nprint(f'The second array is: {B}')\r\nif is_Sub","votes":null},{"text":"\r\n    \r\n    i = 0\r\n    j = 0\r\n    \r\n    while i < n and j < m:\r\n        if A[i] == B[j]:\r\n            i += 1\r\n            j += 1\r\n            \r\n        else:\r\n            i = 0\r\n            j += 1\r\n            \r\n    if j == m:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    #initialisation of the array\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if A[i+j]!=B[j]:\r\n                return False\r\n    return True\r\n\r\n#input from user\r\nn=int(input(\"Enter the size of the first array: \"))\r\nA=[]\r\nfor i in range(n):\r\n    ele=int(input(\"Enter element number {}: \".format(i+1)))\r\n    A.append(ele)\r\n\r\nm=int(input(\"Enter the size of the second array: \"))\r\nB=[]\r\nfor i in range(m):\r\n    ele=int(input(\"Enter element number {}: \".format(i+1)))\r\n    B.append(ele)\r\n\r\n#calling of the function\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"Yes, the given array is a subarray of the other.\")","votes":null},{"text":"\r\n    \r\n    #checking if m > n\r\n    if m > n:\r\n        return False\r\n    \r\n    #checking if A[0] = B[0]\r\n    if A[0] != B[0]:\r\n        return False\r\n    \r\n    #checking if A[1] = B[1]\r\n    if A[1] != B[1]:\r\n        return False\r\n    \r\n    #looping through the array\r\n    for i in range(2,n-m+2):\r\n        \r\n        #checking if A[i] = B[0]\r\n        if A[i] != B[0]:\r\n            continue\r\n        \r\n        #checking if A[i+1] = B[1]\r\n        if A[i+1] != B[1]:\r\n            continue\r\n        \r\n        #checking if A[i+2] = B[2]\r\n        if A[i+2] != B[2]:\r\n            continue\r\n        \r\n        #checking if A[i+3] = B[3]\r\n        if A[i+3] != B[3]:\r\n            continue\r\n        \r\n        #checking if A[i+4] = B[4]\r\n        if A[i+4] != B[4]:\r\n            continue\r\n        \r\n        #checking if A[i+5] = B[5]\r\n        if A[i+5] != B[5]:\r\n            continue\r\n        \r\n        #checking if A[i+6] = B[6]\r\n        if A[i+6] != B[6]:\r\n            continue\r\n        \r\n        #checking if A[i+7] = B[7]\r\n        if A[i+7] != B[7]:\r\n            continue\r\n        \r\n        #checking if A[i+8] = B[8]\r\n        if A[i+","votes":null},{"text":"\r\n    # your code goes here\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if(A[i+j]!=B[j]):\r\n                break\r\n            if(j==m-1):\r\n                return True\r\n    return False\r\n\r\n#main code\r\nn,m=map(int,input(\"Enter the size of array: \").split(\" \"))\r\nA=list(map(int,input(\"Enter the first array: \").split(\" \")))\r\nB=list(map(int,input(\"Enter the second array: \").split(\" \")))\r\nif(is_Sub_Array(A,B,n,m)):\r\n    print(\"The array A is subarray of B\")\r\nelse:\r\n    print(\"The array A is not subarray of B\")\r\n\r\n\"\"\"\r\nTime Complexity: O(m*n)\r\nSpace Complexity: O(1)\r\n\r\nInput:\r\nEnter the size of array: 5 2\r\nEnter the first array: 1 2 3 4 5\r\nEnter the second array: 3 4\r\n\r\nOutput:\r\nThe array A is subarray of B\r\n\r\nInput:\r\nEnter the size of array: 6 3\r\nEnter the first array: 1 2 3 4 5 6\r\nEnter the second array: 3 4 5\r\n\r\nOutput:\r\nThe array A is not subarray of B\r\n\r\nInput:\r\nEnter the size of array: 6 4\r\nEnter the first array: 1 2 3 4 5 6\r\nEnter the second array: 3 4 5 6\r\n\r\nOutput:\r\nThe array A is subarray of B\r\n\r\nInput:\r\nEnter the size of array: 6 6\r\nEnter the first array: 1 2 3 4 5 6\r\nEnter the second array: 1 2 ","votes":null},{"text":"\r\n    # initialize the matrix\r\n    matrix = [[0]*(m+1) for i in range(n+1)]\r\n\r\n    # construct matrix\r\n    for i in range(1, n+1):\r\n        for j in range(1, m+1):\r\n            if A[i-1]==B[j-1]:\r\n                matrix[i][j] = matrix[i-1][j-1] + 1\r\n            else:\r\n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1])\r\n\r\n    # if the matrix value is equal to length of array B\r\n    if matrix[n][m]==m:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\"\"\"\r\nInput :\r\nn = 5, m = 5\r\nA = [1, 2, 3, 5, 6]\r\nB = [3, 5]\r\n\r\nOutput :\r\nTrue\r\n\"\"\"\r\n\r\nn = 5\r\nm = 5\r\nA = [1, 2, 3, 5, 6]\r\nB = [3, 5]\r\n\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"True\")\r\nelse:\r\n    print(\"False\")\r\n\r\n\"\"\"\r\nInput :\r\nn = 5, m = 5\r\nA = [1, 2, 3, 5, 6]\r\nB = [3, 5, 7]\r\n\r\nOutput :\r\nFalse\r\n\"\"\"\r\n\r\nn = 5\r\nm = 5\r\nA = [1, 2, 3, 5, 6]\r\nB = [3, 5, 7]\r\n\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"True\")\r\nelse:\r\n    print(\"False\")\r\n","votes":null},{"text":"\r\n\r\nA=input(\"Enter the array to check whether it is subarray or not:\").split()\r\nB=input(\"Enter the array:\").split()\r\nn=len(A)\r\nm=len(B)\r\n\r\nif (is_Sub_Array(A,B,n,m)):\r\n    print(\"Yes, it is a subarray.\")\r\nelse:\r\n    print(\"No, it is not a subarray.\")\r\n\r\n#Time Complexity: O(n+m)\r\n#Space Complexity: O(1)\r\n\r\n#Sample Input\/Output\r\n#Sample Input\r\n#Enter the array to check whether it is subarray or not:1 2 3 4 5\r\n#Enter the array:1 2 3 4 5\r\n#Sample Output\r\n#Yes, it is a subarray.\r\n#Explanation\r\n#The given array is a subarray of another array.\r\n\r\n#Sample Input\r\n#Enter the array to check whether it is subarray or not:1 2 3 4 5\r\n#Enter the array:2 3 4 5\r\n#Sample Output\r\n#Yes, it is a subarray.\r\n#Explanation\r\n#The given array is a subarray of another array.\r\n\r\n#Sample Input\r\n#Enter the array to check whether it is subarray or not:1 2 3 4 5\r\n#Enter the array:5 6 7 8 9\r\n#Sample Output\r\n#No, it is not a subarray.\r\n#Explanation\r\n#The given array is not a subarray of another array.\r\n\r\n#Sample Input\r\n#Enter the array to check whether it is subarray or not:1 2 3 4 5\r\n#Enter the array:1 2 3\r\n#Sample Output\r\n#Yes, it is a subarray.\r\n#Explanation\r\n#The given array is a subarray of another array.\r\n\r\n#Sample Input\r\n#Enter the array to check whether it is su","votes":null},{"text":"\r\n    \r\n    #checking if array A is subarray of array B\r\n    \r\n    #approach 1: using built-in function\r\n    #checking if all elements of array B are in array A\r\n    \r\n    #checking if all elements of array B are in array A\r\n    return all(elem in A for elem in B)\r\n    \r\n    #approach 2: using set\r\n    \r\n    #checking if all elements of array B are in array A\r\n    return set(A).issuperset(set(B))\r\n\r","votes":null}],"time":{"count":62.0,"avg":147811.1930322581,"std":31977.9923515723,"cov":0.2163435102}}
{"id":577,"question":"def last_Digit_Factorial(n):\r\n    \"\"\"Write a python function to find the last digit in factorial of a given number.\"\"\"","answers":[{"text":"\r\n    fact = 1\r\n    while n > 0:\r\n        fact *= n\r\n        n -= 1\r\n    return fact % 10\r\n\r\n\r","votes":54802.552},{"text":"\r\n    import math\r\n    return math.factorial(n) % 10\r\n\r\nprint(last_Digit_Factorial(5))\r\n\r\n#Method 2\r","votes":65809.888},{"text":"\r\n    return n * last_Digit_Factorial(n - 1) % 10 if n > 1 else 1\r\n\r\n\r","votes":66374.444},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    \r\n    fac = 1\r\n    for i in range(1, n+1):\r\n        fac = fac * i\r\n    return fac % 10\r\nprint(last_Digit_Factorial(10))\r\n\r","votes":72142.776},{"text":"\r\n    fact = 1\r\n    for i in range(1,n+1):\r\n        fact *= i\r\n    return fact%10\r\n\r\nprint(last_Digit_Factorial(5))\r\n\r\n\r\n\r\n\r\n\r\n\r\nfrom math import sqrt\r","votes":72983.052},{"text":"\r\n    fact = 1\r\n    for i in range(1, n+1):\r\n        fact = fact * i\r\n    if fact % 10 == 0:\r\n        return 0\r\n    return fact % 10\r\n\r\n\r","votes":74196.768},{"text":"\r\n\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1) % 10\r\n\r\nprint(\"last digit in factorial of a given number: \", last_Digit_Factorial(8))\r\n\r\n#","votes":74643.984},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    return (n * last_Digit_Factorial(n - 1)) % 10\r\n\r\n\r","votes":75125.092},{"text":"\r\n    fact = 1\r\n    for i in range(1, n + 1):\r\n        fact *= i\r\n    return fact % 10\r\n\r\n\r","votes":77148.116},{"text":"\r\n    factorial=1\r\n    while(n>0):\r\n        factorial*=n\r\n        n-=1\r\n    return factorial%10\r\n\r\n\r","votes":78100.032},{"text":"\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return (n*last_Digit_Factorial(n-1)) % 10\r\n\r\nprint(last_Digit_Factorial(20))\r\n\r","votes":78593.068},{"text":"\r\n    factorial = 1\r\n    for i in range(1, n+1):\r\n        factorial = factorial * i\r\n    return factorial % 10\r\n\r\n\r","votes":81109.54},{"text":"\r\n    f = 1\r\n    for i in range(1, n+1):\r\n        f *= i\r\n    return f % 10\r\n\r\n\r","votes":83124.732},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1) % 10\r\n\r\n\r","votes":85450.444},{"text":"\r\n    from math import factorial\r\n    return factorial(n) % 10\r\n\r","votes":85912.492},{"text":"\r\n    if n <= 1:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1) % 10\r\n\r\n\r","votes":86337.22},{"text":"\r\n    \r\n    # 1) Using math module\r\n    # from math import factorial\r\n    # return factorial(n) % 10\r\n    \r\n    # 2) Using built-in function\r\n    # return (n * factorial(n - 1)) % 10\r\n    \r\n    # 3) Using while loop\r\n    # res = 1\r\n    # while n > 0:\r\n    #     res = (res * n) % 10\r\n    #     n -= 1\r\n    # return res\r\n    \r\n    # 4) Using recursive function\r\n    # if n <= 1:\r\n    #     return n\r\n    # return (n * last_Digit_Factorial(n - 1)) % 10\r\n    \r\n    # 5) Using modulo operator\r\n    # return (n * (n - 1)) % 10\r\n    \r\n    # 6) Using for loop\r\n    res = 1\r\n    for i in range(1, n + 1):\r\n        res = (res * i) % 10\r\n    return res\r\n\r\n# Sample Testcases\r\nprint(last_Digit_Factorial(3))\r\nprint(last_Digit_Factorial(4))\r\nprint(last_Digit_Factorial(5))\r\nprint(last_Digit_Factorial(7))\r","votes":86666.7},{"text":"\r\n    f = 1\r\n    for i in range(1,n+1):\r\n        f = f * i\r\n    return f % 10\r\n\r\n\r\n\r","votes":89503.532},{"text":"\r\n    # code here\r\n    # return the last digit of the factorial of n\r\n    a = 1\r\n    for i in range(1, n + 1):\r\n        a *= i\r\n    return a % 10\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":91087.444},{"text":"\r\n    \r\n    if n < 0:\r\n        return \"Invalid Input\"\r\n    \r\n    else:\r\n        factorial = 1\r\n        while n > 0:\r\n            factorial = factorial * n\r\n            n -= 1\r\n        \r\n        if factorial % 10 == 0:\r\n            return 0\r\n        \r\n        else:\r\n            return factorial % 10\r\n    \r\n    \r\nprint(last_Digit_Factorial(10))\r\nprint(last_Digit_Factorial(100))\r\nprint(last_Digit_Factorial(12))\r\nprint(last_Digit_Factorial(13))","votes":96191.78},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    factorial = 1\r\n    for i in range(1, n+1):\r\n        factorial = (factorial * i) % 10\r\n    return factorial\r\n    \r\nif __name__=='__main__':\r\n    n = int(input())\r\n    print(last_Digit_Factorial(n))\r\n    \r\n    \r\n#Method-2\r","votes":97953.912},{"text":"\r\n\r\n    # 1. get the factorial of n\r\n    # 2. find the last digit in the number\r\n    # 3. return the answer\r\n\r\n    fact = 1\r\n    for i in range(1, n + 1):\r\n        fact *= i\r\n\r\n    return fact % 10\r\n\r\n\r\nif __name__ == '__main__':\r\n\r\n    num = 123456\r\n    print(f'Last digit of {num}! is {last_Digit_Factorial(num)}')\r\n\r\n# 1. What is the time complexity of the above solution?","votes":102266.828},{"text":"\r\n    \r\n    fact=1\r\n    for i in range(1,n+1):\r\n        fact=fact*i\r\n    \r\n    #print(fact)\r\n    last_digit = fact%10\r\n    return last_digit\r\n\r\n\r","votes":105722.836},{"text":"\r\n    \r\n    if n <= 1:\r\n        return 1\r\n    else:\r\n        return (n * last_Digit_Factorial(n-1)) % 10\r\n\r\nprint(last_Digit_Factorial(10))\r\n\r","votes":107394.232},{"text":"\r\n    #Code here\r\n    factorial = 1\r\n    while(n>0):\r\n        factorial *= n\r\n        n -= 1\r\n        \r\n        \r\n    return factorial % 10\r\n\r\n\r\n# --------------\r\n#Code starts here\r","votes":107778.612},{"text":"\r\n    fact = 1\r\n    for i in range(1,n+1):\r\n        fact = fact*i\r\n    return fact%10\r\n\r\nif __name__ == \"__main__\":\r\n    print(last_Digit_Factorial(18))\r\n\r\n\r\n'''\r\nOutput:\r\n\r\n9\r\n\r\n'''\r\n\r\n\r\n\r\n'''\r\nTime Complexity: O(n) \r\nSpace Complexity: O(1)\r\n'''\r\n\r\n\r\n\r","votes":108263.884},{"text":"\r\n    if n<0:\r\n        return \"Invalid Input\"\r\n    if n==0 or n==1:\r\n        return 1\r\n    else:\r\n        factorial = 1\r\n        for i in range(1,n+1):\r\n            factorial = factorial*i\r\n        return factorial%10\r\n\r\nprint(last_Digit_Factorial(25))\r\nprint(last_Digit_Factorial(100))\r\nprint(last_Digit_Factorial(5))\r\nprint(last_Digit_Factorial(20))\r\nprint(last_Digit_Factorial(23))\r\nprint(last_Digit_Factorial(25))\r\nprint(last_Digit_Factorial(26))\r\nprint(last_Digit_Factorial(-1))","votes":115193.832},{"text":"\r\n    t = n\r\n    f = 1\r\n    while t > 0:\r\n        f *= t\r\n        t -= 1\r\n    return f % 10\r\n\r\n\r","votes":122449.888},{"text":"\r\n    n = int(n)\r\n    factorial = 1\r\n    for i in range(1, n+1):\r\n        factorial *= i\r\n    return factorial % 10\r\n\r\n\r","votes":127735.716},{"text":"\r\n    if n == 0 or n == 1:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1) % 10\r\n\r\n\r\nprint(last_Digit_Factorial(10))\r\n\r\n\r\nvotes":139087.328},{"text":"\r\n    factorial_of_n = 1\r\n    for i in range(1, n + 1):\r\n        factorial_of_n *= i\r\n    return factorial_of_n % 10\r\n\r\n## Test case 1\r\nn = 7\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 2\r\nn = 10\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 3\r\nn = 15\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 4\r\nn = 18\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 5\r\nn = 20\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 6\r\nn = 23\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 7\r\nn = 25\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 8\r\nn = 27\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 9\r\nn = 29\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 10\r\nn = 30\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 11\r\nn = 32\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 12\r\nn = 34\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 13\r\nn = 36\r\nprint(last_Digit_Factorial(n))\r\n\r\n## Test case 14\r\nn = 38","votes":150766.312},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        fact = 1\r\n        for i in range(1, n + 1):\r\n            fact = fact * i\r\n        return fact % 10\r\n\r\n\r\nprint(last_Digit_Factorial(5))  # 5! is 120 and 120 % 10 = 0\r\nprint(last_Digit_Factorial(10))  # 10! is 3628800 and 3628800 % 10 = 0\r\nprint(last_Digit_Factorial(20))  # 20! is 2432902008176640000 and 2432902008176640000 % 10 = 8\r\nprint(last_Digit_Factorial(30))  # 30! is 265252859812191058636308480000000 and 265252859812191058636308480000000 % 10 = 0\r\nprint(last_Digit_Factorial(40))  # 40! is 81591528324789673237441619220000000000000000000000000 and 8159152832478967323744161922000000000000000000000000 % 10 = 0\r\nprint(last_Digit_Factorial(50))  # 50","votes":163335.164},{"text":"\r\n    if n < 0:\r\n        raise ValueError(\"Invalid input\")\r\n\r\n    if n == 0:\r\n        return 1\r\n    \r\n    fact = 1\r\n    for i in range(1, n + 1):\r\n        fact = fact * i\r\n\r\n    return fact % 10\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = 5\r\n    print(\"The last digit in factorial of {} is {}\".format(n, last_Digit_Factorial(n)))\r\n\r\n\r\n'''\r\nTime Complexity \nThe time complexity of the above algorithm will be O(N) where \u2018N\u2019 is the value of the input.\r\n\r\nSpace Complexity\r\nThe algorithm runs in constant space O(1).\r\n\r\n\r\n'''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":181388.656},{"text":"\r\n    if n <= 1:\r\n        return 1\r\n    else:\r\n        return (n * last_Digit_Factorial(n-1)) % 10\r\n\r\n\"\"\"Test Code\"\"\"\r\nn = int(input(\"Enter the value: \"))\r\nprint(\"The last digit in the factorial of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\"\"\"Sample Test Case 1\"\"\"\r\n# Enter the value: 10\r\n# The last digit in the factorial of 10 is 3\r\n\r\n\"\"\"Sample Test Case 2\"\"\"\r\n# Enter the value: 15\r\n# The last digit in the factorial of 15 is 0\r\n\r\n\"\"\"Sample Test Case 3\"\"\"\r\n# Enter the value: 19\r\n# The last digit in the factorial of 19 is 4\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    #return (n*fact(n-1))%10\r\n    #return (n*fact(n-1))%10\r\n    return (n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9))%10\r\n\r\n#print(last_Digit_Factorial(10))\r\n\r","votes":null},{"text":"\r\n    import math\r\n    print(\"The last digit in factorial of a given number is \",math.factorial(n)%10)\r\n    \r\nlast_Digit_Factorial(5)\r\n\r\n#%%\r\n'''\r\nWrite a python function to find the last digit in factorial of a given number.\r\n'''\r","votes":null},{"text":"\r\n    \r\n    # The last digit of a number is obtained by dividing it by 10, and","votes":null},{"text":"\r\n\r\n    # using % operator to get the last digit\r\n    return (factorial(n) % 10)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Time Complexity: O(n)\r\n    # Space Complexity: O(1)\r\n\r\n    # If the number is less than 20 return the number\r\n    if n < 20:\r\n        return n\r\n\r\n    # Set the last digit\r\n    last_digit = 1\r\n\r\n    # Iterate over all the numbers\r\n    for i in range(2, n + 1):\r\n\r\n        # Find the last digit\r\n        last_digit = (last_digit * i) % 10\r\n\r\n    # Return the last digit\r\n    return last_digit\r\n\r\n\r\n# Test Cases\r\nprint(last_Digit_Factorial(3))\r\nprint(last_Digit_Factorial(4))\r\nprint(last_Digit_Factorial(5))\r\nprint(last_Digit_Factorial(6))\r\nprint(last_Digit_Factorial(7))\r\nprint(last_Digit_Factorial(8))\r\nprint(last_Digit_Factorial(9))\r\nprint(last_Digit_Factorial(10))\r\nprint(last_Digit_Factorial(11))\r\nprint(last_Digit_Factorial(12))\r\nprint(last_Digit_Factorial(13))\r\nprint(last_Digit_Factorial(14))\r\nprint(last_Digit_Factorial(15))\r\nprint(last_Digit_Factorial(16))\r\nprint(last_Digit_Factorial(17))\r\nprint(last_Digit_Factorial(18))\r\nprint(last_Digit_Factorial(19))\r\nprint(last_Digit_Factorial(20))\r\nprint(last_Digit_Factorial(21))\r\nprint(last_Digit_Factorial(22))\r\nprint(last","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        result = 1\r\n        for i in range(2, n + 1):\r\n            result *= i\r\n        return result % 10\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter a","votes":null},{"text":"\r\n    \r\n    return (n*last_Digit_Factorial(n-1)) % 10\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n#Example\r\n#Input: 11\r\n#Output: 3\r\n\r\n#Input: 12\r\n#Output: 4\r\n\r\n#Input: 5\r\n#Output: 1\r\n\r\n#Input: 10\r\n#Output: 3\r\n\r\n#Input: 50\r\n#Output: 5\r\n\r\n#Input: 100\r\n#Output: 5\r\n\r\n#Input: 1000\r\n#Output: 7\r\n\r\n#Input: 10000\r\n#Output: 3\r\n\r\n\r\n    #Code\r\n    print(n,\"!\")\r\n    last_digit=1\r\n    for i in range(1,n+1):\r\n        last_digit=last_digit*i\r\n    print(last_digit)\r\n    return last_digit%10\r\n\r\n\r\n\r\n# Test Cases\r\nprint(last_Digit_Factorial(10)) #3\r\nprint(last_Digit_Factorial(50)) #5\r\nprint(last_Digit_Factorial(10000)) #3\r\nprint(last_Digit_Factorial(11)) #3\r\nprint(last_Digit_Factorial(12)) #4\r\nprint(last_Digit_Factorial(5)) #1\r\nprint(last_Digit_Factorial(10)) #3\r\nprint(last_Digit_Factorial(100)) #5\r\nprint(last_Digit_Factorial(1000)) #7\r\n\r\n# Time Complexity: O(N)\r\n# Space Complexity: O(1)\r\n\r\n\r\n\r\n#Method 2\r\n\r","votes":null},{"text":"\r\n\r\n    # code\r\n    return (n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9)) % 10\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Find the factorial of the given number\r\n    factorial = 1\r\n    for i in range(1,n+1):\r\n        factorial *= i\r\n        \r\n    # Find the last digit of the factorial\r\n    last_digit = factorial % 10\r\n    \r\n    # Return the last digit\r\n    return last_digit\r\n\r\n# Test the function\r\nprint(last_Digit_Factorial(10))\r\nprint(last_Digit_Factorial(11))\r\nprint(last_Digit_Factorial(12))\r\nprint(last_Digit_Factorial(13))\r\nprint(last_Digit_Factorial(14))\r\nprint(last_Digit_Factorial(15))\r\nprint(last_Digit_Factorial(16))\r\nprint(last_Digit_Factorial(17))\r\nprint(last_Digit_Factorial(18))\r\nprint(last_Digit_Factorial(19))\r\nprint(last_Digit_Factorial(20))\r\nprint(last_Digit_Factorial(21))\r\nprint(last_Digit_Factorial(22))\r\nprint(last_Digit_Factorial(23))\r\nprint(last_Digit_Factorial(24))\r\nprint(last_Digit_Factorial(25))\r\nprint(last_Digit_Factorial(26))\r\nprint(last_Digit_Factorial(27))\r\nprint(last_Digit_Factorial(28))\r\nprint(last_Digit_Factorial(29))\r\nprint(last_Digit_Factorial(30))\r\nprint(last_Digit_Factorial(31))\r\nprint(last_Digit_Factorial(32))\r\nprint(last_Digit_","votes":null},{"text":"\r\n    fact = 1\r\n    for i in range(1, n + 1):\r\n        fact *= i\r\n    return fact % 10\r\n\r\n\r\nprint(last_Digit_Factorial(12))\r\n# 6\r\nprint(last_Digit_Factorial(18))\r\n# 9\r\nprint(last_Digit_Factorial(19))\r\n# 9\r\nprint(last_Digit_Factorial(20))\r\n# 8\r\nprint(last_Digit_Factorial(26))\r\n# 6\r\nprint(last_Digit_Factorial(45))\r\n# 5\r\nprint(last_Digit_Factorial(47))\r\n# 7\r\nprint(last_Digit_Factorial(50))\r\n# 0\r\nprint(last_Digit_Factorial(54))\r\n# 4\r\nprint(last_Digit_Factorial(56))\r\n# 6\r\nprint(last_Digit_Factorial(64))\r\n# 6\r\nprint(last_Digit_Factorial(72))\r\n# 2\r\nprint(last_Digit_Factorial(75))\r\n# 5\r\nprint(last_Digit_Factorial(78))\r\n# 8\r\nprint(last_Digit_Factorial(80))\r\n# 0\r\nprint(last_Digit_Factorial(86))\r\n# 6\r\nprint(last_Digit_Factorial(90))\r\n# 0\r\nprint(last_Digit_Factorial(95))\r\n# 5\r\nprint(last_Digit_Factorial(98))\r\n# 8\r\nprint(last_Digit_Factorial(100))\r\n# 0\r\nprint(last_Digit_Factorial(","votes":null},{"text":"\r\n\r\n    # last digit in factorial\r\n    if n == 0:\r\n        return 1\r\n    factorial = 1\r\n    for i in range(1, n + 1):\r\n        factorial = factorial * i\r\n    last_digit = factorial % 10\r\n    return last_digit\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(last_Digit_Factorial(4))  # 5\r\n    print(last_Digit_Factorial(","votes":null},{"text":"\r\n    \r\n    # Solution 1\r\n    #","votes":null},{"text":"\r\n    k=1\r\n    while n>0:\r\n        k=k*n\r\n        n=n-1\r\n    return k%10\r\n\r\n\r\n\r\nprint(\"Enter the number whose factorial's last digit you want to find:\")\r\nn=int(input())\r\nprint(last_Digit_Factorial(n))\r\n\r\n\r\n\r\nvotes":null},{"text":"\r\n    return 1 if n == 1 else n % 10 * last_Digit_Factorial(n - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    return str(factorial(n))[-1]\r\n\r","votes":null},{"text":"\r\n    s=1\r\n    for i in range(1,n+1):\r\n        s=s*i\r\n    return s%10\r\n\r\nn=int(input(\"Enter the number: \"))\r\nprint(\"The last digit in factorial of\",n,\"is: \")\r\nprint(last_Digit_Factorial(n))\r\n\r\n#-----------------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    result = 1\r\n    for i in range(1,n+1):\r\n        result = result*i\r\n    return result%10\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = 5\r\n    print(last_Digit_Factorial(n))\r\n\r\n\r\n\"\"\"\r\nTest case:\r\n\r\nn = 5\r\nOutput: 120\r\n\r\nn = 10\r\nOutput: 24\r\n\r\nn = 15\r\nOutput: 120\r\n\r\nn = 16\r\nOutput: 10\r\n\r\nn = 20\r\nOutput: 24\r\n\r\nn = 25\r\nOutput: 120\r\n\r\nn = 26\r\nOutput: 10\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nA number with n digits has n factors. \r\nFor example, 120 has 4 factors.\r\n\r\nFactorials of numbers with 5 or more digits are not possible because \r\nof the maximum limit of the integer in python. \r\n\r\nTo find the last digit of the factorial of a number, \r\nwe can calculate the value of the factorial and take the modulus of 10. \r\nThe last digit of a number is the remainder when the number is divided by 10.\r\n\r\nThe number can be divided into 2 parts:\r\n1. The first part is the product of all the numbers less than n. \r\n   This is the first part of the factorial of n.\r\n2. The second part is the product of all the numbers greater than n. \r\n   This is the second part of the factorial of n.\r\n\r\nNow, to find the last digit of the factorial of a number:\r\n1. Find the first part of the factorial of n.\r\n2. Find the second part of the factorial of n.\r\n3. Multiply th","votes":null},{"text":"\r\n    if n < 0:\r\n        return -1\r\n    else:\r\n        return (factorial(n) % 10)\r\n\r","votes":null},{"text":"\r\n\r\n    # code here\r\n    from math import factorial\r\n\r\n    return factorial(n) % 10\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter a number: \"))\r\n    print(last_Digit_","votes":null},{"text":"\r\n    #Code\r\n    fact=1\r\n    for i in range(1,n+1):\r\n        fact=fact*i\r\n        \r\n    last_digit=fact%10\r\n    \r\n    return last_digit\r\n    \r\n#Input\r\nn=int(input(\"Enter your number: \"))\r\n\r\n#Output\r\nprint(\"The last digit in factorial of\",n,\"is\",last_Digit_Factorial(n))\r\n\r\n\r\n'''\r\nTEST CASES\r\n\r\nINPUT 1:\r\nn=10\r\nOUTPUT 1:\r\nThe last digit in factorial of 10 is 3\r\n\r\nINPUT 2:\r\nn=11\r\nOUTPUT 2:\r\nThe last digit in factorial of 11 is 5\r\n\r\nINPUT 3:\r\nn=12\r\nOUTPUT 3:\r\nThe last digit in factorial of 12 is 6\r\n\r\nINPUT 4:\r\nn=14\r\nOUTPUT 4:\r\nThe last digit in factorial of 14 is 2\r\n\r\nINPUT 5:\r\nn=15\r\nOUTPUT 5:\r\nThe last digit in factorial of 15 is 7\r\n\r\nINPUT 6:\r\nn=16\r\nOUTPUT 6:\r\nThe last digit in factorial of 16 is 8\r\n\r\nINPUT 7:\r\nn=17\r\nOUTPUT 7:\r\nThe last digit in factorial of 17 is 1\r\n\r\nINPUT 8:\r\nn=18\r\nOUTPUT 8:\r\nThe last digit in factorial of 18 is 9\r\n\r\nINPUT 9:\r\nn=19\r\nOUTPUT 9:\r\nThe last digit in factorial of 19 is 3\r\n\r\nINPUT 10:\r\nn=20\r\nOUTPUT","votes":null},{"text":"\r\n    if n==0 or n==1:\r\n        return 1\r\n    else:\r\n        temp = 1\r\n        while n>1:\r\n            temp = (temp*n)%10\r\n            n-=1\r\n        return temp\r\nprint(last_Digit_Factorial(100))\r\n\r\n'''\r\n\r\nExplanation:\r\n1. When n is 1 or 0, the last digit of its factorial is always 1.\r\n2. For n>1, we can","votes":null},{"text":"\r\n    # Return the factorial of the given integer\r\n   ","votes":null},{"text":"\r\n    if n < 0:\r\n        return \"Invalid Input\"\r\n    list1 = []\r\n    for i in range(1, n + 1):\r\n        list1.append(i)\r\n    # print(list1)\r\n    # print(list1[::-1])\r\n    list3 = []\r\n    for i in range(len(list1)):\r\n        list3.append(list1[i])\r\n    list3 = list3[::-1]\r\n    # print(list3)\r\n    list2 = []\r\n    for i in range(len(list3)):\r\n        list2.append(list3[i])\r\n    # print(list2)\r\n    list2 = list2[::-1]\r\n    # print(list2)\r\n    # print(list2[0])\r\n    # print(list2[1])\r\n    # print(list2[2])\r\n    if list2[0] == 0:\r\n        return \"The last digit in factorial of {} is 0\".format(n)\r\n    elif list2[1] == 0:\r\n        return \"The last digit in factorial of {} is 0\".format(n)\r\n    elif list2[2] == 0:\r\n        return \"The last digit in factorial of {} is 0\".format(n)\r\n    elif list2[0] == 2:\r\n        return \"The last digit in factorial of {} is 2\".format(n)\r\n    elif list2[0] == 4:\r\n        return \"The last digit in factorial of {} is 4\".format(n)\r\n    elif list2[0] == 6:\r\n        return \"The last digit in factorial of {} is 6\".format(n)\r\n    elif list2[0] == 8:\r\n        return \"The last digit in factorial of {} is 8\".format(n)\r\n    else:\r\n        return \"The last digit in factorial of {} is 1\".format(n)\r\n\r","votes":null},{"text":"\r\n    return (n*(n-1)\/\/10)%10\r\n\r","votes":null},{"text":"\r\n\r\n    if n < 0:\r\n        return -1\r\n    elif n == 0:\r\n        return 1\r\n    elif n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        return (n * last_Digit_Factorial(n - 1)) % 10\r\n\r\n\r\nn = int(input(\"Enter a number : \"))\r\nprint(\"Last digit in the factorial of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\r\n# Time Complexity : O(n)\r\n# The above function is an iterative approach\r\n\r\n# Method 2 : Using the concept of modulo\r","votes":null},{"text":"\r\n    \r\n    # Find the factorial\r\n    factorial = 1\r\n    for i in range(1, n + 1):\r\n        factorial *= i\r\n        \r\n    # Find the last digit\r\n    last_digit = factorial % 10\r\n    \r\n    return last_digit\r\n\r\n\r\n# Test case 1 \r\nn = 6\r\nprint(\"Last digit of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\r\n# Test case 2\r\nn = 10\r\nprint(\"Last digit of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\r\n# Test case 3\r\nn = 17\r\nprint(\"Last digit of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\r\n# Test case 4\r\nn = 25\r\nprint(\"Last digit of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\r\n# Test case 5\r\nn = 30\r\nprint(\"Last digit of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\r\n# Test case 6\r\nn = 35\r\nprint(\"Last digit of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\r\n# Test case 7\r\nn = 40\r\nprint(\"Last digit of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\r\n# Test case 8\r\nn = 45\r\nprint(\"Last digit of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\r\n# Test case 9\r\nn = 50\r\nprint(\"Last digit of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n\r\n# Test case 10\r\nn = 55\r\nprint(\"Las","votes":null},{"text":"\r\n\r\n    n = int(input(\"Enter the number: \"))\r\n\r\n   ","votes":null},{"text":"\r\n    if n < 0:\r\n        return \"Please enter a positive number.\"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n*last_Digit_Factorial(n-1) % 10\r\n\r\nn = int(input(\"Please enter a number: \"))\r\nprint(last_Digit_Factorial(n))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        if n % 2 == 0:\r\n            return 0\r\n        else:\r\n            return 1\r\n\r\n\r","votes":null},{"text":"\r\n    return factorial(n) % 10\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    if n % 2 == 0:\r\n        return 2\r\n    return n\r\n\r","votes":null},{"text":"\r\n    if n <= 1:\r\n        return n\r\n    else:\r\n        return n % 10","votes":null},{"text":"\r\n    # factorial of n\r\n    fact = 1\r\n    for i in range(1, n+1):\r\n        fact = fact * i\r\n    # last digit of factorial of n\r\n    last_digit = fact % 10\r\n    # return last digit\r\n    return last_digit\r\n\r\n\r\n# Driver Code\r\nn = 10\r\nlast_digit = last_Digit_Factorial(n)\r\nprint(\"The last digit in factorial of\", n, \"is\", last_digit)\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nINPUT\r\nn = 10\r\n\r\nOUTPUT\r\nThe last digit in factorial of 10 is 2\r\n\r\nSAMPLE II\r\n\r\nINPUT\r\nn = 50\r\n\r\nOUTPUT\r\nThe last digit in factorial of 50 is","votes":null},{"text":"\r\n    if n < 0:\r\n        return 'Invalid Input'\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n % 10\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #factorial of a number\r\n   ","votes":null},{"text":"\r\n    # return the last digit in factorial of a given number\r\n    # without using any inbuilt function.\r\n    # for example, 4! is 24. So, the last digit is 4\r\n    # 10! is 3628800. So, the last digit is 0\r\n    # 15! is 1307674368000. So, the last digit is 0\r\n    # 19! is 17556486040000. So, the last digit is 0\r\n    # 20! is 2432902008176640000. So, the last digit is 0\r\n    # 21! is 51090942171709440000. So, the last digit is 0\r\n    # 22! is 1124000727777607680000. So, the last digit is 0\r\n    # 23! is 3556874280960000000000. So, the last digit is 0\r\n    # 24! is 9227465","votes":null},{"text":"\r\n    \r\n    a=1\r\n    for i in range(1,n+1):\r\n        a=a*i\r\n    \r\n    return a%10\r\n    \r\nn=int(input(\"Enter a number: \"))\r\nprint(\"The last digit in factorial of\",n,\"is\",last_Digit_Factorial(n))\r\n\r\n\r\n\"\"\"\r\n\r\nOUTPUT","votes":null},{"text":"\r\n\r\n    return n if n <= 5 else n%10\r\n\r\n\r\n# Test Code\r\nprint(last_Digit_Factorial(10))\r\nprint(last_Digit_Factorial(15))\r\nprint(last_Digit_Factorial(20))\r\nprint(last_Digit_Factorial(25))\r\nprint(last_Digit_Factorial(30))\r\n\r\n\r\n# Output\r\n# 3\r\n# 7\r\n# 0\r\n# 1\r\n# 0\r\n\r","votes":null},{"text":"\r\n    #finding the factorial\r\n    fact = 1\r\n    for i in range(1, n+1):\r\n        fact = fact * i\r\n    #finding the last digit\r\n    last_Digit = fact % 10\r\n    print(\"The last digit in factorial of\",n,\"is\",last_Digit)\r\n\r\nprint(\"-----Program to find the last digit in factorial of a given number-----\")\r\nn = int(input(\"Enter a number: \"))\r\nlast_Digit_Factorial(n)\r\n\r\n\r\n# 2. Write a python function to find the sum of all digits of a given number.\r","votes":null},{"text":"\r\n    return n % 10\r\n\r\nprint(last_Digit_Factorial(10))\r\n\r\n# Q 3\r","votes":null},{"text":"\r\n    fact = 1\r\n    for i in range(1,","votes":null},{"text":"\r\n\r\n    # function to return last digit in factorial of a number\r\n   ","votes":null},{"text":"\r\n    # return math.factorial(n) % 10\r\n    # return factorial(n) % 10\r\n    return factorial(n) % 10\r\n\r\n\r","votes":null},{"text":"\r\n    i = 1\r\n    while i <= n:\r\n        ans = i * ans\r\n        i += 1\r\n    return ans % 10\r\n\r\n\r","votes":null},{"text":"\r\n    # Code of the function\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n - 1) % 10\r\n\r\n\r\n# Test cases\r\nprint(last_Digit_Factorial(9))\r\nprint(last_Digit_Factorial(34))\r\nprint(last_Digit_Factorial(120))\r\nprint(last_Digit_Factorial(1000))\r\nprint(last_Digit_Factorial(12345))\r\nprint(last_Digit_Factorial(123456))\r\nprint(last_Digit_Factorial(1234567))\r\nprint(last_Digit_Factorial(12345678))\r\nprint(last_Digit_Factorial(123456789))\r\nprint(last_Digit_Factorial(1234567890))\r\nprint(last_Digit_Factorial(12345678901))\r\nprint(last_Digit_Factorial(123456789012))\r\nprint(last_Digit_Factorial(1234567890123))\r\nprint(last_Digit_Factorial(12345678901234))\r\nprint(last_Digit_Factorial(123456789012345))\r\nprint(last_Digit_Factorial(1234567890123456))\r\nprint(last_Digit_Factorial(12345678901234567))\r\nprint(last_Digit_Factorial(12345678901","votes":null},{"text":"\r\n\r\n    #factorial\r\n   ","votes":null},{"text":"\r\n    if n < 0:\r\n        return -1\r\n    else:\r\n        return n % 10\r\n\r\n\r\nprint(last_Digit_Factorial(4))\r\nprint(last_Digit_Factorial(5))\r\n","votes":null},{"text":"\r\n    #code here\r\n    result = 1\r\n    for i in range(1,n+1):\r\n        result *=i\r\n    print(result%10)\r\n\r\nlast_Digit_Factorial(5)\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return last_Digit_Factorial(n \/\/ 10) * n % 10\r\n\r\n\r\nprint(last_Digit_Factorial(135))\r\n# 3\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # 1->1\r\n    # 2->2\r\n    # 3->6\r\n    # 4->24\r\n    # 5->120\r\n    # 6->720\r\n    # 7->5040\r\n    # 8->40320\r\n    # 9->362880\r\n    # 10->3628800\r\n    # 11->39916800\r\n    # 12->479001600\r\n    # 13->6227020800\r\n    # 14->87178291200\r\n    # 15->1307674368000\r\n    # 16->20922789888000\r\n    # 17->355687428096000\r\n    # 18->6402373705728000\r\n    # 19->121645100408832000\r\n\r\n    # 1->1\r\n    # 2->2\r\n    # 3->6\r\n    # 4->24\r\n    # 5->120\r\n    # 6->720\r\n    # 7->5040\r\n    # 8->40320\r\n    # 9->362880\r\n    # 10->3628800\r\n    # 11->39916800\r\n    # 12->479001600\r\n    # 13->6227020800\r\n    # 14->87178291200\r\n    # 15-","votes":null},{"text":"\r\n\r\n    # code here\r\n    # return the last digit of n!\r\n    fact = 1\r\n    for i in range(1,n+1):\r\n        fact *= i\r\n    return fact%10\r\n\r\n# Input:\r\n# n = 10\r\n\r\n# Output:\r\n# 3\r\n\r\n# Input:\r\n# n = 12\r\n\r\n# Output:\r\n# 9\r\n\r\n# Input:\r\n# n = 15\r\n\r\n# Output:\r\n# 0\r\n\r\n# INPUT SAMPLE:\r\n# Your program should accept as its first argument a path to a filename.\r\n# Each line in this file contains a test case, in the form of a positive integer, n.\r\n\r\n# OUTPUT SAMPLE:\r\n# Print the last digit of n! for each test case.\r\n\r\nimport sys\r\n\r\nwith open(sys.argv[1], 'r') as test_cases:\r\n    for test_case in test_cases:\r\n        n = int(test_case)\r\n        print(last_Digit_Factorial(n))\r\n\r\n\r\n\r\n#","votes":null},{"text":"\r\n    fact = factorial(n)\r\n    print(n, \"! =\", fact)\r\n    return int(fact) % 10\r\n\r\n\r","votes":null},{"text":"\r\n    # get the factorial of the number\r\n    fact_of_n = 1\r\n    for i in range(2, n+1):\r\n        fact_of_n *= i\r\n    # get the last digit of the factorial\r\n    last_digit = fact_of_n % 10\r\n    return last_digit\r\n\r\nn = int(input())\r\nprint(last_Digit_Factorial(n))\r\n\r\n# Output\r\n# Enter a Number: 5\r\n# 120\r\n\r\n# Example 2\r\n# Input\r\n# Enter a Number: 10\r\n# Output\r\n# 2432902008176640000\r\n\r\n# Example 3\r\n# Input\r\n# Enter a Number: 20\r\n# Output\r\n# 2432902008176640000\r\n\r\n# Example 4\r\n# Input\r\n# Enter a Number: 100\r\n# Output\r\n# 2432902008176640000\r\n\r\n# Example 5\r\n# Input\r\n# Enter a Number: 200\r\n# Output\r\n# 2432902008176640000\r\n\r\n# =================== Without Using For Loop ===================\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x*y, [i for i in range(1, n+1)]) % 10\r\n\r\n# Using Modulo (%) and Range()\r","votes":null}],"time":{"count":33.0,"avg":97110.328969697,"std":29074.7416904975,"cov":0.2993990649}}
{"id":578,"question":"def interleave_lists(list1,list2,list3):\r\n    \"\"\"Write a function to interleave lists of the same length.\"\"\"","answers":[{"text":"\r\n\r\n    # list1, list2, and list3 should be lists of the same length\r\n    # your code here\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r","votes":117732.584},{"text":"\r\n    result = []\r\n    for i in range(0, len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r\n\r","votes":120365.516},{"text":"\r\n    assert len(list1) == len(list2) == len(list3)\r\n    output = []\r\n    for i in range(len(list1)):\r\n        output.extend([list1[i], list2[i], list3[i]])\r\n    return output\r\n\r","votes":122170.86},{"text":"\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r\n\r","votes":123446.16},{"text":"\r\n    return [x for t in zip(list1,list2,list3) for x in t]\r\n\r","votes":126934.808},{"text":"\r\n    \r\n    merged_list = []\r\n    for i in range(len(list1)):\r\n        merged_list.append(list1[i])\r\n        merged_list.append(list2[i])\r\n        merged_list.append(list3[i])\r\n    return merged_list\r\n\r","votes":127431.764},{"text":"\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n    \r\n    \r\n    \r","votes":129050.94},{"text":"\r\n    if len(list1) != len(list2) or len(list2) != len(list3):\r\n        raise ValueError('Lists must be of the same length.')\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return new_list\r\n\r\n\r","votes":131683.408},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return new_list\r\n\r","votes":132114.712},{"text":"\r\n    new_list = []\r\n    index = 0\r\n    while index < len(list1):\r\n        new_list.append(list1[index])\r\n        new_list.append(list2[index])\r\n        new_list.append(list3[index])\r\n        index += 1\r\n    return new_list\r\n\r","votes":133515.508},{"text":"\r\n    \r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r\n\r","votes":134142.088},{"text":"\r\n    interleaved_list = []\r\n    for i, j, k in zip(list1, list2, list3):\r\n        interleaved_list.append(i)\r\n        interleaved_list.append(j)\r\n        interleaved_list.append(k)\r\n    print(interleaved_list)\r\n    return interleaved_list\r\n\r\n\r","votes":137140.072},{"text":"\r\n    list_of_lists = [list1, list2, list3]\r\n    list_of_lists.sort(key=len)\r\n    min_length = len(list_of_lists[0])\r\n    new_list = []\r\n\r\n    for i in range(min_length):\r\n        for j in range(3):\r\n            new_list.append(list_of_lists[j][i])\r\n\r\n    return new_list\r\n\r\n\r","votes":142278.012},{"text":"\r\n    # Create an empty list to hold the final list.\r\n    combined_list = []\r\n    # Iterate through the indices of the first list.\r\n    for index in range(len(list1)):\r\n        # Add the element from the first list to the final list.\r\n        combined_list.append(list1[index])\r\n        # Add the element from the second list to the final list.\r\n        combined_list.append(list2[index])\r\n        # Add the element from the third list to the final list.\r\n        combined_list.append(list3[index])\r\n    # Return the final list.\r\n    return combined_list\r\n\r\nmy_list1 = [1, 3, 5]\r\nmy_list2 = [2, 4, 6]\r\nmy_list3 = [7, 8, 9]\r\nprint(interleave_lists(my_list1, my_list2, my_list3)) # Should be [1, 2, 7, 3, 4, 8, 5, 6, 9]\r\n\r\n# Using the same logic as above, the function below should take any number of lists and interleave them, regardless of how many lists are provided as parameters.\r","votes":143198.764},{"text":"\r\n    length = len(list1)\r\n    i = 0\r\n    list = []\r\n    while i < length:\r\n        list.append(list1[i])\r\n        list.append(list2[i])\r\n        list.append(list3[i])\r\n        i += 1\r\n    return list\r\n\r","votes":143252.708},{"text":"\r\n    interleaved_list = []\r\n    for i in range(0,len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\n#print(interleave_lists([\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"],[\"g\",\"h\",\"i\"]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]))\r\n#print(interleave_lists([1,2,3],[\"","votes":145308.868},{"text":"\r\n    \r\n    # Create an empty list to append values to\r\n    interleaved_list = []\r\n    \r\n    # Create a loop that goes through each item in the first list\r\n    for i in range(len(list1)):\r\n        # Appends the first item of each list\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    \r\n    # Returns the list with items interleaved\r\n    return interleaved_list\r\n\r\n# Run the function to test it\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r\n# Should print [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\n\r","votes":146388.552},{"text":"\r\n    \r\n    list_out = []\r\n\r\n    for item1,item2,item3 in zip(list1,list2,list3):\r\n        list_out.extend([item1, item2, item3])\r\n    \r\n    return list_out\r\n\r","votes":146687.12},{"text":"\r\n    answer = []\r\n    l1 = 0\r\n    l2 = 0\r\n    l3 = 0\r\n    while l1 < len(list1) and l2 < len(list2) and l3 < len(list3):\r\n        answer.append(list1[l1])\r\n        answer.append(list2[l2])\r\n        answer.append(list3[l3])\r\n        l1 += 1\r\n        l2 += 1\r\n        l3 += 1\r\n    return answer\r\n\r\n\r","votes":147422.604},{"text":"\r\n    #check if the three lists have the same length\r\n    if len(list1) == len(list2) and len(list2) == len(list3):\r\n        # create an empty list\r\n        result = []\r\n        # loop through the lists\r\n        for i in range(len(list1)):\r\n            # append the items to the result\r\n            result += [list1[i]]\r\n            result += [list2[i]]\r\n            result += [list3[i]]\r\n        # return the result\r\n        return result\r\n    else:\r\n        # if the lists are not of the same length, return None\r\n        return None\r\n\r","votes":147510.112},{"text":"\r\n    \r\n    interleaved_list = []\r\n    \r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n\r\n    return interleaved_list\r\n\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \r\n    list1 = [1, 2, 3, 4]\r\n    list2 = [5, 6, 7, 8]\r\n    list3 = [9, 10, 11, 12]\r\n\r\n    print(interleave_lists(list1, list2, list3))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":148001.408},{"text":"\r\n    if len(list1) != len(list2) or len(list1) != len(list3):\r\n        return None\r\n    else:\r\n        result = []\r\n        for i in range(len(list1)):\r\n            result.append(list1[i])\r\n            result.append(list2[i])\r\n            result.append(list3[i])\r\n        return result\r\n\r","votes":151441.8},{"text":"\r\n    return [x for t in zip(list1,list2,list3) for x in t]\r\n    \r","votes":190702.508},{"text":"\r\n    interleaved_list = []\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r","votes":197886.936},{"text":"\r\n    out = []\r\n    for i in range(len(list1)):\r\n        out.append(list1[i])\r\n        out.append(list2[i])\r\n        out.append(list3[i])\r\n    return out\r\n\r\n\r","votes":206398.608},{"text":"\r\n    output_list = []\r\n    for i in range(len(list1)):\r\n        output_list.append(list1[i])\r\n        output_list.append(list2[i])\r\n        output_list.append(list3[i])\r\n    return output_list\r\n\r","votes":206797.812},{"text":"\r\n\r\n    # Create an empty list\r\n    interleaved = []\r\n\r\n    # Iterate over the indices of the first list\r\n    for index in range(len(list1)):\r\n        # Append each element of the first list in order to the empty list\r\n        interleaved.append(list1[index])\r\n\r\n        # Append each element of the second list in order to the empty list\r\n        interleaved.append(list2[index])\r\n\r\n        # Append each element of the third list in order to the empty list\r\n        interleaved.append(list3[index])\r\n\r\n    # Return the interleaved list\r\n    return interleaved\r\n\r\n\r\n# Define a main function\r","votes":207902.892},{"text":"\r\n    if list1 == [] or list2 == [] or list3 == []:\r\n        return []\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r\n\r","votes":209606.216},{"text":"\r\n\r\n    interleaved_list = []\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\n\r\n\r\n# Test case 1\r\nlist1 = [1,2,3]\r\nlist2 = [4,5,6]\r\nlist3 = [7,8,9]\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n# Test case 2\r\nlist1 = ['a','b','c']\r\nlist2 = ['d','e','f']\r\nlist3 = ['g','h','i']\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n# Test case 3\r\nlist1 = ['a','b','c']\r\nlist2 = ['d','e','f']\r\nlist3 = ['g','h','i']\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n# Test case 4\r\nlist1 = ['a','b','c']\r\nlist2 = ['d','e','f']\r\nlist3 = ['g','h','i']\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n# Test case 5\r\nlist1 = [1,2,3]\r\nlist2 = ['d','e','f']\r\nlist3 = ['g','h','i']\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n# Test case 6\r\nlist1 = []\r\nlist2 = []\r\nlist3 = []\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n# Test case 7\r\nlist1 = [1,2,3]\r\nlist","votes":252640.536},{"text":"\r\n    if len(list1) == len(list2) == len(list3):\r\n        output = []\r\n        for i in range(len(list1)):\r\n            output.append(list1[i])\r\n            output.append(list2[i])\r\n            output.append(list3[i])\r\n        return output\r\n    else:\r\n        return \"Invalid Input\"\r\n\r\n# Test cases\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6, 7], [7, 8, 9]))\r\nprint(interleave_lists([1, 2, 3, 4], [4, 5, 6], [7, 8, 9]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6, 7], [7, 8, 9, 10]))\r\nprint(interleave_lists([1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10]))\r\nprint(interleave_lists([1, 2, 3, 4], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]))\r\n","votes":255326.088},{"text":"\r\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\r\n\r\n\r\nprint(interleave_lists([1, 4, ","votes":null},{"text":"\r\n    # Create an empty list\r\n    list_out = []\r\n    # Iterate through the lists\r\n    for i in range(len(list1)):\r\n        # Insert each element into the empty list\r\n        list_out.insert(i, list1[i])\r\n        list_out.insert(i, list2[i])\r\n        list_out.insert(i, list3[i])\r\n    # Return the new list\r\n    return list_out\r\n\r\n# Create the list of integers\r\nlist1 = [1,2,3,4,5]\r\nlist2 = [6,7,8,9,10]\r\nlist3 = [11,12,13,14,15]\r\n# Call the function\r\nlist_out = interleave_lists(list1,list2,list3)\r\n# Print the list\r\nprint(list_out)\r\n\r\n# In[3]:\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1) != len(list2):\r\n        print(\"Lists are not of the same length\")\r\n        return\r\n\r\n    # Initialize empty list\r\n    new_list = []\r\n\r\n    # Loop through each index\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n\r\n    return new_list\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [1, 2, 3, 4]\r\n    list2 = [5, 6, 7, 8]\r\n    list3 = [9, 10, 11, 12]\r\n\r\n    print(interleave_lists(list1, list2, list3))\r\n\r\n    list1 = [1, 2, 3, 4, 5]\r\n    list2 = [6, 7, 8, 9, 10]\r\n    list3 = [11, 12, 13, 14, 15]\r\n\r\n    print(interleave_lists(list1, list2, list3))\r\n\r\n    list1 = [1, 2, 3, 4]\r\n    list2 = [5, 6, 7, 8]\r\n    list3 = []\r\n\r\n    print(interleave_lists(list1, list2, list3))\r\n\r\n    list1 = []\r\n    list2 = []\r\n    list3 = []\r\n\r\n    print(interleave_lists(list1, list2, list3))\r\n\r\n    list1 = [1, 2, 3, 4]\r\n    list2 = [5, 6, 7, 8]\r\n    list3 = [9, 10, ","votes":null},{"text":"\r\n    l1 = len(list1)\r\n    l2 = len(list2)\r\n    l3 = len(list3)\r\n    if l1 == l2 and l2 == l3:\r\n        for i in range(l1):\r\n            yield list1[i],list2[i],list3[i]\r\n    else:\r\n        raise ValueError('Lists are not of the same length!')\r\n\r","votes":null},{"text":"\r\n    if len(list1) == len(list2) == len(list3):\r\n        list1.reverse()\r\n        list2.reverse()\r\n        list3.reverse()\r\n        for i in range(len(list1)):\r\n            list1[i],list2[i],list3[i] = list2[i],list3[i],list1[i]\r\n        list1.reverse()\r\n        list2.reverse()\r\n        list3.reverse()\r\n        return list1,list2,list3\r\n    else:\r\n        return \"Invalid Lists\"\r\n\r","votes":null},{"text":"\r\n\r\n    interleaved_list = []\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\n\r\n# Tests\r\nprint(interleave_lists([1, 2, 3], ['a', 'b', 'c'], ['I', 'II', 'III']))\r\nprint(interleave_lists([], [], []))\r\nprint(interleave_lists(['a', 'b'], ['c', 'd'], ['e', 'f']))\r\nprint(interleave_lists([1, 2, 3, 4], ['a', 'b'], ['I', 'II']))\r\nprint(interleave_lists(['a'], ['b', 'c', 'd'], ['I']))\r\nprint(interleave_lists(['a', 'b', 'c', 'd'], ['e', 'f'], ['I', 'II', 'III']))\r\nprint(interleave_lists(['a', 'b', 'c', 'd', 'e'], ['f', 'g'], ['I', 'II', 'III', 'IV']))\r\nprint(interleave_lists(['a', 'b', 'c', 'd', 'e', 'f'], ['g'], ['I', 'II', 'III', 'IV', 'V']))\r\nprint(interleave_lists(['a', 'b', 'c', 'd', 'e', 'f', 'g'], [], ['I', 'II', 'III', 'IV', 'V', 'VI']))\r\nprint(interleave_lists(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], [], ['I', 'II', 'III', 'IV', 'V', 'VI']))\r\nprint(interleave_lists(['a', 'b', 'c', 'd', 'e', 'f', ","votes":null},{"text":"\r\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\r\n\r","votes":null},{"text":"\r\n    if len(list1) == len(list2) == len(list3):\r\n        return [None]*len(list1)*3\r\n    else:\r\n        return [None]*(len(list1)+len(list2)+len(list3))\r\n\r\n\r","votes":null},{"text":"\r\n    #list1 = [1, 2, 3, 4, 5, 6]\r\n    #list2 = [a, b, c, d, e, f]\r\n    #list3 = [*]\r\n    #list3 should equal [1,a,2,b,3,c,4,d,5,e,6,f]\r\n\r\n    #create a for loop\r\n    for i in range(0, len(list1)):\r\n        #create a if statement\r\n        if i % 2 == 0:\r\n            #create an append statement\r\n            list3.append(list1[i])\r\n        else:\r\n            #create an append statement\r\n            list3.append(list2[i])\r\n    #return the list\r\n    return list3\r\nprint(interleave_lists([1,2,3,4,5,6],[1,2,3,4,5,6],[2,3,4,5,6,7]))\r\n\r\n#2. Write a function that takes a list and returns the sum of all negative numbers in the list\r","votes":null},{"text":"\r\n    \r\n    if len(list1)!=len(list2):\r\n        return \"You need lists of the same length\"\r\n    \r\n    new_list=[] \r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n    \r\n    return new_list\r\n\r\n\r\nprint(interleave_lists([1,2,3,4],[5,6,7,8],[]))\r\nprint(interleave_lists([1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]))\r\nprint(interleave_lists([1,2,3,4,5,6,7], [8,9,10,11,12,13], [14,15,16,17,18,19]))\r\nprint(interleave_lists([1,2,3,4,5,6,7,8,9,10,11,12,13], [14,15,16,17,18,19,20,21,22,23,24,25,26], [27,28,29,30,31,32,33,34,35,36,37,38,39]))\r\nprint(interleave_lists([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], [21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], [4","votes":null},{"text":"\r\n    \r\n    \r\n    # 1) create an empty list to store the interleaved list\r\n    interleaved_list = []\r\n    \r\n    # 2) loop over the elements in list1\r\n    for i in range(len(list1)):\r\n        \r\n        # 3) append each element from list1 to the empty list\r\n        interleaved_list.append(list1[i])\r\n        \r\n        # 4) append each element from list2 to the empty list\r\n        interleaved_list.append(list2[i])\r\n        \r\n        # 5) append each element from list3 to the empty list\r\n        interleaved_list.append(list3[i])\r\n   ","votes":null},{"text":"\r\n    list1 = list1[:]\r\n    list2 = list2[:]\r\n    list3 = list3[:]\r\n    list_to_return = []\r\n    for i in range(0,len(list1)):\r\n        list_to_return.append(list1[i])\r\n        list_to_return.append(list2[i])\r\n        list_to_return.append(list3[i])\r\n    return list_to_return\r\n\r\n\r\nprint(interleave_lists([1, 4, 5], [2, 3, 6], [7, 8, 9]))\r\n# \u2192 [1, 2, 7, 4, 3, 8, 5, 6, 9]\r\n\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\n# \u2192 [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\nprint(interleave_lists([], [4, 5, 6], [7, 8, 9]))\r\n# \u2192 [4, 7, 8, 5, 9]\r\n\r\nprint(interleave_lists([1, 2, 3], [], [7, 8, 9]))\r\n# \u2192 [1, 7, 2, 8, 3, 9]\r\n\r\nprint(interleave_lists([], [], []))\r\n# \u2192 []\r\n\r\nprint(interleave_lists([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]))\r\n# \u2192 [1, 7, 13, 2, 8, 14, 3,","votes":null},{"text":"\r\n\r\n    new_list = [list1[0]]\r\n    \r\n    for i in range(1,len(list1)):\r\n        new_list.append(list2[i-1])\r\n        new_list.append(list1[i])\r\n    \r\n    new_list.append(list2[len(list1)-1])\r\n    \r\n    return new_list\r\n\r","votes":null},{"text":"\r\n    return list(zip(list1,list2,list3))\r\n\r\n\r\nprint(interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]))\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return [(list1[i], list2[i], list3[i]) for i in range(len(list1))]\r\n\r\n\r","votes":null},{"text":"\r\n    # create empty list\r\n    new_list = []\r\n    # for loop to iterate through lists\r\n    for i in range(len(list1)):\r\n        # add each element to the new list\r\n        new_list.append(list1[i])\r\n        # add each element to the new list\r\n        new_list.append(list2[i])\r\n        # add each element to the new list\r\n        new_list.append(list3[i])\r\n    print(new_list)\r\n\r\n# call the function\r\ninterleave_lists([1,2,3],['a', 'b', 'c'],[True, True, False])\r\n\r\n# Output: [1, 'a', True, 2, 'b', True, 3, 'c', False]\r\n\r\n\r","votes":null},{"text":"\r\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r","votes":null},{"text":"\r\n    # The list of lists to interleave.\r\n    lists = [list1, list2, list3]\r\n    # Create a list to store the interleaved lists.\r\n    interleaved_lists = []\r\n\r\n    # Iterate over the lists.\r\n    for i in range(len(lists)):\r\n        # Interleave the lists.\r\n        if i == 0:\r\n            interleaved_lists.append(lists[i])\r\n        elif i % 2 == 0:\r\n            interleaved_lists.append(lists[i])\r\n        else:\r\n            interleaved_lists.append(lists[i][::-1])\r\n\r\n    # Return the interleaved lists.\r\n    return interleaved_lists\r\n\r\n\r","votes":null},{"text":"\r\n    #list1 = [1,1,1,1]\r\n    #list2 = [0,0,0,0]\r\n    #","votes":null},{"text":"\r\n    return [ i for i in zip(list1,list2,list3) ]\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1) != len(list2):\r\n        return \"Lists are not of same length\"\r\n    else:\r\n        new_list = []\r\n        for i in range(len(list1)):\r\n            new_list.append(list1[i])\r\n            new_list.append(list2[i])\r\n        return new_list\r\n\r","votes":null},{"text":"\r\n    return [list1[i] + list3[i] for i in range(len(list1))]\r\n\r\nlist1 = [\"a\",\"b\",\"c\"]\r\nlist2 = [\"d\",\"e\",\"f\"]\r\nlist3 = [\"0\",\"1\",\"2\"]\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n\"\"\"\r\nSOLUTION\r","votes":null},{"text":"\r\n    if len(list1)!=len(list2):\r\n        return \"The lists must be of the same length.\"\r\n    return [list1[i] for i in range(0, len(list1), 2)] + [list2[i] for i in range(0, len(list2), 2)]\r\n\r\n\r\n\r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\r\n\r\n# Interleave two lists of the same length, giving a list of the elements of the first list followed by the elements of the second list, alternating between the two lists.\r\n\r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = list1[:]\r\n    list2 = list2[:]\r\n    list3 = list3[:]\r\n    list1.append(list2[0])\r\n    list2.pop(0)\r\n    list3.append(list1[0])\r\n    list1.pop(0)\r\n    return interleave_lists(list2,list1,list3)\r\n\r","votes":null},{"text":"\r\n    #interleave list1 and list2, then interleave the result with list3\r\n    return interleave_lists(interleave_lists(list1,list2),list3)\r\n\r","votes":null},{"text":"\r\n    \r\n    list1 = list1.copy()\r\n    list2 = list2.copy()\r\n    list3 = list3.copy()\r\n\r\n    for i in range(len(list1)):\r\n        list1[i] = list1[i] + list2[i]\r\n        list2[i] = list3[i] + list2[i]\r\n\r\n    return list1, list2\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    for i in range(len(list1)):\r\n        list3.append(list1[i])\r\n        list3.append(list2[i])\r\n    \r\n    return list3\r\n\r\nlist1 = ['a', 'b', 'c']\r\nlist2 = ['d', 'e', 'f']\r\nlist3 = []\r\n\r\nlist3 = interleave_lists(list1, list2, list3)\r\nprint(list3)","votes":null},{"text":"\r\n    list1.extend(list2)\r\n    list1.extend(list3)\r\n    return list1\r\n\r","votes":null},{"text":"\r\n    list1 = list1[:]\r\n    list2 = list2[:]\r\n    list3 = list3[:]\r\n    # Write your code here.\r\n\r\n    x = 0\r\n    for i in range(0,len(list1)):\r\n        list3[i] = list1[i]\r\n        list3[i+len(list1)] = list2[x]\r\n        x += 1\r\n    print(list3)\r\n\r\n\r\n\r\n\r\n#interleave_lists([1,2,3,4],[5,6,7,8],[])\r\n#interleave_lists([1,2,3,4,5],[5,6,7,8],[])\r\n#interleave_lists([1,2,3,4,5,6],[5,6,7,8,9],[])\r\n#interleave_lists([1,2,3],[],[])\r\n#interleave_lists([],[5,6,7,8],[])\r\n#interleave_lists([1,2,3,4,5],[5,6,7],[])\r\n#interleave_lists([1,2,3,4,5],[5,6,7,8,9,10,11],[])\r\n#interleave_lists([1,2,3,4,5,6,7,8,9,10],[5,6,7,8,9,10,11],[])\r\n#interleave_lists([1,2,3,4],[5,6,7,8,9,10,11,12],[])\r\n#interleave_lists([1,2,3,4,5,6,7,8,9,10,11,12],[5,6,7,8,9,10,11],[])\r\n#interleave_lists([1,2,3,4,5,6,7,8,9,10,11,12],[5,","votes":null},{"text":"\r\n\r\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\r\n\r\n\r\n# Tests\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])) # [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\nprint(interleave_lists([1, 2], [3, 4], [5, 6])) # [1, 3, 5, 2, 4, 6]\r\nprint(interleave_lists([1, 2], [3, 4], [5])) # [1, 3, 5, 2, 4]\r\nprint(interleave_lists([1, 2], [3, 4], [5, 6, 7])) # [1, 3, 5, 2, 4, 6, 7]\r\nprint(interleave_lists([1, 2, 3], [4], [5, 6, 7])) # [1, 4, 5, 2, 6, 3, 7]\r\n\r\n\r\n# Alternate Solutions\r\n\r","votes":null},{"text":"\r\n    return list(zip(list1,list2,list3))\r\n\r\n# Tests\r","votes":null},{"text":"\r\n    # list1 = [1,2,3,4,5,6]\r\n    # list2 = [a,b,c,d,e,f]\r\n    # list3 = [A,B,C,D,E,F]\r\n    # interleave_lists(list1,list2,list3) == [1,a,A,2,b,B,3,c,C,4,d,D,5,e,E,6,f,F]\r\n    # interleave_lists([1,2,3],[a,b,c],[A,B,C]) == [1,a,A,2,b,B","votes":null},{"text":"\r\n    #first check to see if all lists have the same length\r\n    if len(list1) == len(list2) == len(list3):\r\n        #create a new list to hold the combined list\r\n        combined_list = []\r\n        #loop through each item in the list\r\n        for index in range(len(list1)):\r\n            #add the item from each list to the new list\r\n            combined_list.append(list1[index])\r\n            combined_list.append(list2[index])\r\n            combined_list.append(list3[index])\r\n        #return the combined list\r\n        return combined_list\r\n    else:\r\n        #if the lists aren't the same length, return a string\r\n        return \"The lists don't have the same length\"\r\n\r\n#call the function\r\nresult = interleave_lists([1,2,3],[4,5,6],[7,8,9])\r\n\r\n#print the result\r\nprint(result)\r\n\r\n#call the function\r\nresult2 = interleave_lists([1,2,3,4],[4,5,6],[7,8,9])\r\n\r\n#print the result\r\nprint(result2)\r\n\r\n#call the function\r\nresult3 = interleave_lists([1,2,3],[4,5,6,7],[7,8,9])\r\n\r\n#print the result\r\nprint(result3)\r\n\r\n#call the function\r\nresult4 = interleave_lists([1,2,3],[4,5,6],[7,8,9,10])\r\n\r\n#print the result\r\nprint(result4)\r\n\r\n#call the function\r\nresult5 = interleave_lists([1],[4,5,6],[7,8,9])\r\n\r\n#print the result\r\nprint(result5)\r\n\r\n#call the function\r\nresult6 = interleave_lists([1,2],[4,5,6],[7,8","votes":null},{"text":"\r\n    list4 = []\r\n    for i in range(0,len(list1)):\r\n        list4.append(list1[i])\r\n        list4.append(list2[i])\r\n        list4.append(list3[i])\r\n    return list4\r\n\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6,7],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9],[10,11,12]))\r\n\r\n\r\n#Task 2.2:\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    list4 = []\r\n    for i in range(len(list1)):\r\n        list4.append(list1[i])\r\n        list4.append(list2[i])\r\n        list4.append(list3[i])\r\n    return list4\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\nprint(interleave_lists([1","votes":null},{"text":"\r\n    if len(list1) != len(list2):\r\n        return \"Lists must be the same length\"\r\n    else:\r\n        return [list1[i] + list2[i] for","votes":null},{"text":"\r\n    return [list1[i] + list2[i] for i in range(len(list1))] + list3\r\n\r\n\r","votes":null},{"text":"\r\n    list3 = []\r\n    for i in range(len(list1)):\r\n        list3.append(list1[i])\r\n        list3.append(list2[i])\r\n    return list3\r\n\r\nprint(interleave_lists([1,2,3], [4,5,6], []))\r\n\r","votes":null},{"text":"\r\n    i = 0\r\n    while i < len(list1):\r\n        list2.insert(i, list1[i])\r\n        i += 1\r\n    i = 0\r\n    while i < len(list1):\r\n        list3.insert(i, list1[i])\r\n        i += 1\r\n    return list2, list3\r\n\r\n\r\nlist1 = [1,2,3,4,5]\r\nlist2 = [6,7,8,9,10]\r\nlist3 = [11,12,13,14,15]\r\nprint(interleave_lists(list1,list2,list3)) # prints ([1, 6, 2, 7, 3, 8, 4, 9, 5, 10], [11, 1, 12, 2, 13, 3, 14, 4, 15, 5])\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = list1+list2\r\n    list1.sort()\r\n    return list1\r\n\r\n#Test\r\nprint(interleave_lists([1,3,5,7,9],[2,4,6,8,10],[3,5,7,9,11]))\r\nprint(interleave_lists(['a','c','e','g','i'],['b','d','f','h','j'],['c','d','e','f','g']))\r\nprint(interleave_lists([1,2,3,4,5],[5,4,3,2,1],[1,1,1,1,1]))\r\nprint(interleave_lists([1,2,3,4","votes":null},{"text":"\r\n    \r\n    # list1 = [1,2,3]\r\n    # list2 = [4,5,6]\r\n    # list3 = [7,8,9]\r\n\r\n    # list1 = [1,2,3]\r\n    # list2 = [4,5]\r\n    # list3 = [7,8,9,10]\r\n\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return(new_list)\r\n\r\nlist1 = [1,2,3]\r\nlist2 = [4,5,6]\r\nlist3 = [7,8,9]\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n\r\nlist1 = [1,2,3]\r\nlist2 = [4,5]\r\nlist3 = [7,8,9,10]\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n# Exercise 3\r\n    \r","votes":null},{"text":"\r\n    interleaved_list = []\r\n    for i in range(0,len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\n#This is the test case\r\nlist1 = [1,2,3]\r\nlist2 = [4,5,6]\r\nlist3 = [7,8,9]\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n#Should print [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\n#My own test case\r\ntest_list1 = [1,2,3]\r\ntest_list2 = [4,5,6,7,8,9]\r\ntest_list3 = [7,8,9]\r\n\r\nprint(interleave_lists(test_list1,test_list2,test_list3))\r\n#Should print [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\n#Another test case\r\nlist1 = [1, 2, 3]\r\nlist2 = [4, 5, 6]\r\nlist3 = [7, 8, 9, 10, 11, 12]\r\n\r\nprint(interleave_lists(list1, list2, list3))\r\n#Should print [1, 4, 7, 2, 5, 8, 3, 6, 9, 10, 11, 12]\r\n\r\n#Interleave three lists of different length\r\nlist1 = [1, 2, 3]\r\nlist2 = [4, 5, 6]\r\nlist3 = [7, 8","votes":null},{"text":"\r\n    if len(list1) != len(list2) or len(list1) != len(list3):\r\n        raise ValueError('list lengths must match')\r\n    return [list1[i] for i in range(0, len(list1), 3)] + [list2[i] for i in range(1, len(list2), 3)] + [list3[i] for i in range(2, len(list3), 3)]\r\n\r\n\r","votes":null},{"text":"\r\n    return [[list1[i],list2[i],list3[i]] for i in range(len(list1))]\r\n\r","votes":null},{"text":"\r\n    list1.extend(list2)\r\n    list2.extend(list3)\r\n    list2.extend(list1)\r\n\r\n    return list2\r\n\r\n\r\n\r\n\r\n\r\n# Testing\r\n\r\nlist1 = ['pasta', 'rice', 'beans']\r\nlist2 = ['chicken', 'turkey', 'duck']\r\nlist3 = ['salad', 'coleslaw', 'onion']\r\n\r\nlist1 = ['pasta', 'rice', 'beans']\r\nlist2 = ['chicken', 'turkey', 'duck']\r\nlist3 = ['salad', 'coleslaw', 'onion']\r\n\r\n\r\n# print(interleave_lists(list1,list2,list3))\r\n\r\n\r\n# Testing\r\n\r\nlist1 = [1, 2, 3]\r\nlist2 = ['a', 'b', 'c']\r\nlist3 = [True, False, True]\r\n\r\n\r\n# print(interleave_lists(list1, list2, list3))\r\n\r\n\r\n# Testing\r\n\r\nlist1 = [1, 2, 3, 4]\r\nlist2 = ['a', 'b', 'c']\r\nlist3 = [True, False, True]\r\n\r\n# print(interleave_lists(list1,list2,list3))\r\n\r\n\r\n# Testing\r\n\r\nlist1 = [1, 2, 3]\r\nlist2 = ['a', 'b', 'c', 'd']\r\nlist3 = [True, False, True]\r\n\r\n# print(interleave_lists(list1,list2,list3))\r\n\r\n\r\n# Testing\r\n\r\nlist1 = [1, 2, 3, 4]\r\nlist2 = ['a', 'b', 'c', 'd']\r\nlist3 = [True, False, True]\r\n\r\n# print(interleav","votes":null},{"text":"\r\n    if list1 == []:\r\n        return list2\r\n    elif list2 == []:\r\n        return list1\r\n    else:\r\n        list1.append(list2[0])\r\n        return list1.append(list3[0])\r\n        \r\nlist1 = [1,2,3,4]\r\nlist2 = [5,6,7,8]\r\nlist3 = [9,10,11,12]\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    for i in range(len(list1)):\r\n        yield list1[i]\r\n        yield list2[i]\r\n        if i < len(list3):\r\n            yield list3[i]\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = list1[::-1]\r\n    list2 = list2[::-1]\r\n    list3 = []\r\n    while list1 != []:\r\n        list3.append(list1.pop())\r\n        list3.append(list2.pop())\r\n    return list3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    list1 = list1\r\n    list2 = list2\r\n    list3 = []\r\n    for i in range(len(list1)):\r\n        list3.append(list1[i])\r\n        list3.append(list2[i])\r\n    return list3\r\n    \r\n    \r","votes":null},{"text":"\r\n    result = []\r\n    if len(list1) == len(list2) == len(list3) == 0:\r\n        return result\r\n    elif len(list1) == len(list2) == len(list3) > 0:\r\n        for i in range(len(list1)):\r\n            result.append(list1[i])\r\n            result.append(list2[i])\r\n            result.append(list3[i])\r\n\r\n        return result\r\n    else:\r\n        return None\r\n\r\n\r\n# Test cases\r\n# Feel free to add your own test cases as well\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10]))\r\nprint(interleave_lists([1, 2], [4, 5, 6], [7, 8, 9]))\r\nprint(interleave_lists([1, 2, 3], [], [7, 8, 9]))\r\nprint(interleave_lists([1, 2, 3], [4, 5], [7, 8, 9]))\r\nprint(interleave_lists([], [4, 5], [7, 8, 9]))\r\nprint(interleave_lists([], [], [7, 8, 9]))\r\nprint(interleave_lists([], [4, 5, 6], []))\r\nprint(interleave_lists([], [], []))\r\n\r\n'''\r\n\r\nTime complexity","votes":null},{"text":"\r\n    for item in list1:\r\n        if len(list1) == len(list2) == len(list3):\r\n            yield item\r\n            yield list2[list1.index(item)]\r\n            yield list3[list1.index(item)]\r\n        else:\r\n            return \"The lists are not of the same size.\"\r\n","votes":null},{"text":"\r\n    return [list1[i] + list2[i] + list3[i] for i in range(0,len(list1))]\r\n\r\n\r","votes":null},{"text":"\r\n    list1, list2, list3 = [list(x) for x in [list1, list2, list3]]\r\n    n = len(list1)\r\n    for i in range(n):\r\n        if list1[i] == list2[i] == list3[i]:\r\n            continue\r\n        if list1[i] == list2[i]:\r\n            list1[i], list2[i] = list2[i], list1[i]\r\n        elif list1[i] == list3[i]:\r\n            list1[i], list3[i] = list3[i], list1[i]\r\n        elif list2[i] == list3[i]:\r\n            list2[i], list3[i] = list3[i], list2[i]\r\n        else:\r\n            raise ValueError('lists have no common element')\r\n    return list1, list2, list3\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [1, 2, 3, 4, 5]\r\n    list2 = [6, 7, 8, 9, 10]\r\n    list3 = [11, 12, 13, 14, 15]\r\n    print('before:', list1, list2, list3)\r\n    list1, list2, list3 = interleave_lists(list1, list2, list3)\r\n    print('after:', list1, list2, list3)\r\n\r\n    list1 = [1, 2, 3, 4, 5]\r\n    list2 = [6, 7, 8, 9, 10]\r\n    list3 = []\r\n    print('before:', list1, list2, list3)\r\n    try:\r\n        list1, list2, list3 = interleave_lists(list1, list2, list3)\r\n    except ValueError as e:\r\n        print(","votes":null},{"text":"\r\n    if len(list1) != len(list2):\r\n        raise ValueError\r\n    else:\r\n        pass\r\n    new_list = []\r\n    for x in list1:\r\n        new_list.append(x)\r\n    for x in list2:\r\n        new_list.append(x)\r\n    for x in list3:\r\n        new_list.append(x)\r\n    return new_list\r\n\r","votes":null},{"text":"\r\n    # Create a copy of list2.\r\n    list2_copy = list2[:]\r\n    # Create a new list.\r\n    list_inter = []\r\n    # Iterate through list1 and append each element to list_inter.\r\n    for element in list1:\r\n        list_inter.append(element)\r\n    # Iterate through list2_copy and append each element to list_inter.\r\n    for element in list2_copy:\r\n        list_inter.append(element)\r\n    # Iterate through list3 and append each element to list_inter.\r\n    for element in list3:\r\n        list_inter.append(element)\r\n    # Return list_inter.\r\n    return list_inter\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [1, 2, 3]\r\n    list2 = [4, 5, 6]\r\n    list3 = [7, 8, 9]\r\n    print(interleave_lists(list1,list2,list3))\r\n\r\n\r","votes":null},{"text":"\r\n    return [list1[i]+list2[i] for i in range(len(list1))]+[list3[i] for i in range(len(list3))]\r\n    \r\n\r","votes":null},{"text":"\r\n    \r\n    list4 = []\r\n    \r\n    for i in range(len(list1)):\r\n        list4.append(list1[i])\r\n        list4.append(list2[i])\r\n        list4.append(list3[i])\r\n    \r\n    return list4\r\n\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\n# [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\nprint(interleave_lists(['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']))\r\n# ['a', 'd', 'g', 'b', 'e', 'h', 'c', 'f', 'i']\r\n\r\nprint(interleave_lists(['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']))\r\n# ['1', '4', '7', '2', '5', '8', '3', '6', '9']\r\n\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\n# [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\nprint(interleave_lists(['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']))\r\n# ['1', '4', '7', '2', '5', '8', '3', '6', '9']\r\n\r\nprint(interleave_lists(['1', '2', '3'], ['4', '5', '6'], ['7']))\r\n# ['1', '4', '7', '2', '5', 'None', '3', '6', 'None']","votes":null},{"text":"\r\n    # This function takes in three lists of the same length, and returns a list of \r\n    # the same length with the elements of the first list interleaved with the \r\n    # elements of the second list, and the elements of the second list interleaved\r\n    # with the elements of the third list.\r\n    # For example:\r\n    # >>> interleave_lists([1,2,3],[4,5,6],[7,8,9])\r\n    # [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\n    # Create a new empty list\r\n    new_list = []\r\n\r\n    # Iterate over the first list and add each element to the end of the new list\r\n    for x in list1:\r\n        new_list.append(x)\r\n\r\n    # Iterate over the second list and add each element to the end of the new list\r\n    for x in list2:\r\n        new_list.append(x)\r\n\r\n    # Iterate over the third list and add each element to the end of the new list\r\n    for x in list3:\r\n        new_list.append(x)\r\n\r\n    return new_list\r\n\r\n\r\n# Test Code\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r\n# Testing with small list\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r\n# Testing with large list\r\nprint(interleave_lists([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,","votes":null},{"text":"\r\n    return list(zip(list1, list2, list3))\r\n\r","votes":null},{"text":"\r\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\r\n\r\nprint(interleave_lists([1,2,3],['a','b','c'],['A','B','C']))\r\n\r","votes":null},{"text":"\r\n    return (list1[0],list2[0],list3[0]) + interleave_lists(list1[1:],list2[1:],list3[1:])\r\n\r","votes":null},{"text":"\r\n    list3 = list()\r\n    for i in range(len(list1)):\r\n        list3.append(list1[i])\r\n        list3.append(list2[i])\r\n    return list3\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    list1.append(None)\r\n    list2.append(None)\r\n    list3.append(None)\r\n    \r\n    i = 0\r\n    while i < len(list1):\r\n        if i % 2 == 0:\r\n            list3.append(list1[i])\r\n            list3.append(list2[i])\r\n        else:\r\n            list3.append(list2[i])\r\n            list3.append(list1[i])\r\n        i += 1\r\n    \r\n    list3.remove(None)\r\n    list3.remove(None)\r\n    return list3\r\n\r\n\r\n    \r\nclass Test(unittest.TestCase):\r\n    \r\n   ","votes":null}],"time":{"count":30.0,"avg":157482.6654666667,"std":38796.8712896826,"cov":0.2463564556}}
{"id":579,"question":"def find_dissimilar(test_tup1, test_tup2):\r\n    \"\"\"Write a function to find the dissimilar elements in the given two tuples.\"\"\"","answers":[{"text":"\r\n    # return tuple(set(test_tup1) ^ set(test_tup2))\r\n    return tuple(set(test_tup1).symmetric_difference(test_tup2))\r\n\r\n\r","votes":103621.788},{"text":"\r\n    return tuple(set(test_tup1) ^ set(test_tup2))\r\n\r\n\r\nprint(find_dissimilar((1, 2, 3), (2, 3)))\r\nprint(find_dissimilar((1, 2, 3), (3, 4)))\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 3, 4)))\r\n\r\n\r","votes":125461.688},{"text":"\r\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))\r\n\r\n\r\n# Test Code\r\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\r\ntest_tup2 = (2, 4, 6, 8, 10, 12)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\ntest_tup2 = (2, 4, 6, 8, 10, 12)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\r\ntest_tup2 = (2, 4, 6, 8, 10, 12, 1, 3, 5, 7, 9, 11, 13)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\ntest_tup2 = (2, 4, 6, 8, 10, 12, 1, 3, 5, 7, 9, 11, 13)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n# Answer\r","votes":175958.316},{"text":"\r\n    return tuple(set(test_tup1) ^ set(test_tup2))\r\n\r\n\r\nprint(find_dissimilar((1, 2, 3, 4), (4, 5, 6, 7)))\r\n\r\n\r","votes":180837.536},{"text":"\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    for i in range(len(test_list1)):\r\n        if test_list1[i] != test_list2[i]:\r\n            return test_list1[i]\r\n\r\n\r\nprint(find_dissimilar(('a', 'b', 'c'), ('x', 'y', 'z')))\r\n\r\n\r\n# 4. Write a function to print the minimum and maximum of three given integers.\r\n# Go to the editor\r\n\r\n# Print the minimum of three numbers.\r","votes":null},{"text":"\r\n    if len(test_tup1) != len(test_tup2):\r\n        return None\r\n    dissimilar_list = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissimilar_list.append(test_tup1[i])\r\n    return dissimilar_list\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar_list = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissimilar_list.append(test_tup1[i])\r\n            dissimilar_list.append(test_tup2[i])\r\n    return dissimilar_list\r\n\r\n\r\n# Test Cases\r\nprint(find_dissimilar((1, 2, 3), (2, 3, 4))) # [1, 4]\r\nprint(find_dissimilar((1, 2, 3), (4, 5, 6))) # [1, 4, 2, 5, 3, 6]\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 4))) # [3, 4]\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 3))) # []\r\nprint(find_dissimilar((1, 2, 3), (4, 5, 3))) # [1, 4, 2, 5]\r\nprint(find_dissimilar((1, 2, 3), (4, 5, 2))) # [1, 4, 3, 5]\r\nprint(find_dissimilar((1, 2, 3), (4, 2, 3))) # [1, 4]\r\nprint(find_dissimilar((1, 2, 3), (4, 2, 2))) # [1, 4, 3]\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 2))) # [3]\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 1))) # [3]\r\nprint","votes":null},{"text":"\r\n    return [item for item in test_tup1 if item not in test_tup2]\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = ('a', 'b', 'c', 'd', 'e')\r\n    test_tup2 = ('c', 'd', 'f', 'g', 'h', 'i')\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    test_list = []\r\n    for i in range(len(test_tup1)):\r\n        for j in range(len(test_tup2)):\r\n            if test_tup1[i] == test_tup2[j]:\r\n                continue\r\n            else:\r\n                test_list.append(test_tup1[i])\r\n                test_list.append(test_tup2[j])\r\n    return test_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3, 4, 5)\r\n    test_tup2 = (6, 7, 8, 9, 10)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r\n# Output: [1, 6, 2, 7, 3, 8, 4, 9, 5, 10]\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    tup1 = set(test_tup1)\r\n    tup2 = set(test_tup2)\r\n    return tup1.symmetric_difference(tup2)\r\n\r\n\r\ntest_tup1 = ('A', 'B', 'C')\r\ntest_tup2 = ('B', 'C', 'D')\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = ('A', 'B', 'C')\r\ntest_tup2 = ('A', 'B', 'C')\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = ('A', 'B', 'C')\r\ntest_tup2 = ('D', 'E', 'F')\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = ('A', 'B', 'C')\r\ntest_tup2 = ('B', 'C')\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = ('A', 'B', 'C', 'D', 'E', 'F')\r\ntest_tup2 = ('A', 'B', 'C', 'D', 'E', 'F')\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = ('A', 'B', 'C', 'D', 'E', 'F')\r\ntest_tup2 = ('D', 'E', 'F')\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = ('A', 'B', 'C', 'D', 'E', 'F')\r\ntest_tup2 = (","votes":null},{"text":"\r\n    diff = []\r\n    for x in test_tup1:\r\n        if x not in test_tup2:\r\n            diff.append(x)\r\n        elif x in test_tup2:\r\n            continue\r\n    return diff\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar.append(i)\r\n    return dissimilar\r\n\r\n\r\nprint(find_dissimilar((1, 2, 3), (2, 3, 4)))\r\nprint(find_dissimilar((1, 2, 3, 4), (2, 3, 4)))\r\nprint(find_dissimilar((1, 2, 3), (2, 3, 4, 5)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (2, 3, 4)))\r\n\r\n\r\n# Challenge 11\r","votes":null},{"text":"\r\n    for i in range(len(test_tup1)):\r\n        for j in range(len(test_tup2)):\r\n            if test_tup1[i] != test_tup2[j]:\r\n                return test_tup1[i], test_tup2[j]\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (6, 7, 8, 9, 10)\r\n\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n#----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\"\"\"Task\r\nWrite a program to compute the sum of two given integers.\r\n\r\nInput Format\r\n\r\nTwo integers separated by a newline.\r\n\r\nConstraints\r\n\r\nAll the integers are in the range [0, 10000].\r\n\r\nOutput Format\r\n\r\nAn integer that is the sum of the two given integers.\r\n\r\nSample Input\r\n\r\n1\r\n2\r\nSample Output\r\n\r\n3\r\nExplanation\r\n\r\nThe function adds the two integers and returns the sum.\r\n\"\"\"\r\n#!\/bin\/python3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n# Complete the simpleArraySum function below.\r","votes":null},{"text":"\r\n    tup1_list = list(test_tup1)\r\n    tup2_list = list(test_tup2)\r\n    tup1_list.sort()\r\n    tup2_list.sort()\r\n    print(tup1_list)\r\n    print(tup2_list)\r\n    if tup1_list == tup2_list:\r\n        return \"Both the tuples are same\"\r\n    elif tup1_list == tup2_list[::-1]:\r\n        return \"Both the tuples are same\"\r\n    else:\r\n        return \"The tuples are different\"\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Test case\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    print('Test case 1:')\r\n    print('Expected output:')\r\n    print('None')\r\n    print('Actual output:')\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    print('\\n')\r\n\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 11)\r\n    print('Test case 2:')\r\n    print('Expected output:')\r\n    print('10')\r\n    print('Actual output:')\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    print('\\n')\r\n\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12)\r\n    print('Test case 3:')\r\n    print('Expected output:')\r\n    print('10, 11')\r\n    print('Actual output:')\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    print('\\n')\r\n\r\n    test","votes":null},{"text":"\r\n    return list(set(test_tup1).symmetric_difference(set(test_tup2)))\r\n\r\n\r","votes":null},{"text":"\r\n    # Find the elements in test_tup1 that are not in test_tup2\r\n    test_tup1_not_in_test_tup2 = set(test_tup1) - set(test_tup2)\r\n\r\n    # Find the elements in test_tup2 that are not in test_tup1\r\n    test_tup2_not_in_test_tup1 = set(test_tup2) - set(test_tup1)\r\n\r\n    # Return the dissimilar elements\r\n    return test_tup1_not_in_test_tup2, test_tup2_not_in_test_tup1\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple([ele for ele in test_tup1 if ele not in test_tup2])\r\n\r\n\r\n# Test Cases\r\nprint(find_dissimilar((1, 2, 4, 5, 6), (1, 2, 3, 4, 5)))\r\nprint(find_dissimilar((1, 2, 4, 5, 6), (1, 2, 3, 4, 5)))\r\nprint(find_dissimilar((1, 2, 4, 5, 6), (1, 2, 3, 4, 5)))\r\nprint(find_dissimilar((1, 2, 4, 5, 6), (1, 2, 3, 4, 5)))\r\nprint(find_dissimilar((1, 2, 4, 5, 6), (1, 2, 3, 4, 5)))\r\n\r\n\r\n# Output\r\n# (6,)\r\n# (6,)\r\n# (6,)\r\n# (6,)\r\n# (6,)\r\n\r\n\r\n# Solution\r","votes":null},{"text":"\r\n    \r\n    return tuple(sorted(set(test_tup1) ^ set(test_tup2)))\r\n\r","votes":null},{"text":"\r\n    #code goes here\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n    diff = test_tup1.difference(test_tup2)\r\n    return list(diff)\r\n\r\n\r\n\r\n#main program\r\nt1 = (1,2,3,4,5,6,7,8,9,10)\r\nt2 = (1,2,3,4,5,6,7,8,9,10)\r\n\r\nout1 = find_dissimilar(t1, t2)\r\nprint(f\"Dissimilar elements in given two tuples are: {out1}\")\r\n\r\nt1 = (1,2,3,4,5,6,7,8,9,10)\r\nt2 = (1,2,3,4,5,6,7,8,9,10)\r\n\r\nout2 = find_dissimilar(t1, t2)\r\nprint(f\"Dissimilar elements in given two tuples are: {out2}\")\r\n\r\n\r\n\r\n\r\n\r\n#Reference: w3resource    \r\n\r\n#Question 2\r","votes":null},{"text":"\r\n    # Create a new empty set\r\n    new_set = set()\r\n    # Check each element in the first tuple\r\n    for elem in test_tup1:\r\n        # If the element is not in the second tuple, then add it to the set\r\n        if elem not in test_tup2:\r\n            new_set.add(elem)\r\n    # Check each element in the second tuple\r\n    for elem in test_tup2:\r\n        # If the element is not in the first tuple, then add it to the set\r\n        if elem not in test_tup1:\r\n            new_set.add(elem)\r\n    # Return the set\r\n    return new_set\r\n\r\n\r\n# Set up some test tuples\r\ntest1_1 = (1, 2, 3, 4, 5)\r\ntest1_2 = (4, 5, 6, 7, 8)\r\ntest1_3 = (1, 2, 3)\r\ntest1_4 = (1, 2, 3, 4, 5)\r\ntest1_5 = (1, 2, 3, 4, 5)\r\n\r\n# Print the results\r\nprint(\"The function found in tuple 1 but not in tuple 2:\", find_dissimilar(test1_1, test1_2))\r\nprint(\"The function found in tuple 1 but not in tuple 3:\", find_dissimilar(test1_1, test1_3))\r\nprint(\"The function found in tuple 1 but not in tuple 4:\", find_dissimilar(test1_1, test1_4))\r\nprint(\"The function found in tuple 1 but not in tuple 5:\", find_dissimilar(test1_1, test1_5))\r\nprint(\"The function found in tuple 2 but not in tuple 3:\", find_dissimilar(test1_2, test1_3))\r\nprint(\"The function foun","votes":null},{"text":"\r\n    # initialize dissimilar element list\r\n    dissimilar = []\r\n    # loop over each element in test_tup1\r\n    for element in test_tup1:\r\n        # check if element is not in test_tup2\r\n        if element not in test_tup2:\r\n            # append element to dissimilar element list\r\n            dissimilar.append(element)\r\n    # loop over each element in test_tup2\r\n    for element in test_tup2:\r\n        # check if element is not in test_tup1\r\n        if element not in test_tup1:\r\n            # append element to dissimilar element list\r\n            dissimilar.append(element)\r\n    # return dissimilar element list\r\n    return dissimilar\r\n\r\n\r\n\r\n# set test tuples\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (6, 7, 8, 9, 10)\r\n# call find_dissimilar function\r\ndissimilar = find_dissimilar(test_tup1, test_tup2)\r\n# print dissimilar elements\r\nprint(f'Dissimilar elements are: {dissimilar}')\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n# 4. Write a function to find the dissimilar elements in the given two tuples.\r\n# -----------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    # Return the dissimilar elements in the given two tuples\r\n    # tuple1 = (1,2,3,4,5,6,7,8,9,0)\r\n    # tuple2 = (6,4,3,2,1,0,7,8,9,5)\r\n    # Output: {1, 2, 5, 6, 7, 8, 9}\r\n    # tuple1 = (1,2,3,4,5,6,7,8,9,0)\r\n    # tuple2 = (6,4,3,2,1,0,7,8,9,5)\r\n    # Output: [1, 2, 5, 6, 7, 8, 9]\r\n    # return {test_tup1[i] for i in range(len(test_tup1)) if test_tup1[i] != test_tup2[i]}\r\n    return [i for i in test_tup1 if i not in test_tup2]\r\n\r","votes":null},{"text":"\r\n    \r\n    return tuple([tup1 for tup1 in test_tup1 if tup1 not in test_tup2]) + tuple([tup2 for tup2 in test_tup2 if tup2 not in test_tup1])\r\n\r\n\r\nprint(find_dissimilar((1, 2, 3), (3, 4, 5)))\r\n\r\n\r","votes":null},{"text":"\r\n    test_list1 = []\r\n    test_list2 = []\r\n\r\n    for item in test_tup1:\r\n        test_list1.append(item)\r\n\r\n    for item in test_tup2:\r\n        test_list2.append(item)\r\n\r\n    test_list1 = set(test_list1)\r\n    test_list2 = set(test_list2)\r\n\r\n    return test_list1.symmetric_difference(test_list2)\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar_set = set()\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar_set.add(i)\r\n    for j in test_tup2:\r\n        if j not in test_tup1:\r\n            dissimilar_set.add(j)\r\n    return dissimilar_set\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(set(test_tup1) - set(test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(test_tup1) != len(test_tup2):\r\n        raise ValueError(\"Tuple length mismatch.\")\r\n    else:\r\n        dissimilar_list = []\r\n        for i in range(len(test_tup1)):\r\n            if test_tup1[i] != test_tup2[i]:\r\n                dissimilar_list.append(i)\r\n        return dissimilar_list\r\n        \r\n        \r\n# -----------------------------------------------------------------------------\r\n# Calls  main  to start the ball rolling.\r\n# -----------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n\r\n    dissimilar = []\r\n\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissimilar.append(test_tup1[i])\r\n\r\n    return dissimilar\r\n\r\n\r\ntest_tup1 = ('a', 'b', 'c', 'd')\r\ntest_tup2 = ('e', 'b', 'd', 'f')\r\nassert find_dissimilar(test_tup1, test_tup2) == ['a', 'c', 'e', 'f']\r\n\r\ntest_tup1 = ('a', 'b', 'c', 'd', 'e', 'f')\r\ntest_tup2 = ('f', 'b', 'd', 'e', 'g', 'h')\r\nassert find_dissimilar(test_tup1, test_tup2) == ['a', 'c', 'g', 'h']\r\n\r\ntest_tup1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\r\ntest_tup2 = ('f', 'b', 'd', 'e', 'g', 'h', 'i', 'j', 'k', 'l')\r\nassert find_dissimilar(test_tup1, test_tup2) == ['a', 'c', 'k', 'l']\r\n\r\ntest_tup1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\r\ntest_tup2 = ('f', 'b', 'd', 'e', 'g', 'h', 'i', 'j', 'k', 'l')\r\nassert find_dissimilar(test_tup1, test_tup2) == ['a', 'c', 'k', 'l']\r\n\r","votes":null},{"text":"\r\n    test_tup1 = list(test_tup1)\r\n    test_tup2 = list(test_tup2)\r\n    same = []\r\n    diff = []\r\n\r\n    for i in test_tup2:\r\n        if i in test_tup1:\r\n            same.append(i)\r\n            test_tup1.remove(i)\r\n            test_tup2.remove(i)\r\n\r\n    diff = list(test_tup1 + test_tup2)\r\n    print(same, diff)\r\n\r\n\r","votes":null},{"text":"\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            return i\r\n    return None\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # write your code here\r\n    diss = []\r\n\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            diss.append(i)\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            diss.append(i)\r\n\r\n    return diss\r\n\r\n\r\n# test case 1\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (6, 7, 8, 9, 0)\r\n\r\nprint(find_dissimilar(test_tup1, test_tup2))  # expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\r\n\r\n# test case 2\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (0, 2, 4, 6, 8)\r\n\r\nprint(find_dissimilar","votes":null},{"text":"\r\n\r\n    dissimilar_elements = []\r\n    for element in test_tup1:\r\n        if element not in test_tup2:\r\n            dissimilar_elements.append(element)\r\n    return dissimilar_elements\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1_set = set(test_tup1)\r\n    test_tup2_set = set(test_tup2)\r\n    dissimilar_elements = list(test_tup1_set.symmetric_difference(test_tup2_set))\r\n    print(dissimilar_elements)\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, ","votes":null},{"text":"\r\n    return [x for x in test_tup1 if x not in test_tup2]\r\n\r\n\r","votes":null},{"text":"\r\n    set1 = set(test_tup1)\r","votes":null},{"text":"\r\n    test_tup1 =","votes":null},{"text":"\r\n    \r\n    count = 0\r\n    dissimilar = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar.append(i)\r\n            count += 1\r\n    \r\n    return dissimilar, count\r\n\r\n\r\n# ------------------------------------------------------------------------------\r\n# Calls  main  to start the ball rolling.\r\n# ------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    diff = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            diff.append(test_tup1[i])\r\n    return diff\r\n\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 =","votes":null},{"text":"\r\n    for tup in [test_tup1, test_tup2]:\r\n        for i in tup:\r\n            if i not in test_tup1:\r\n                return i\r\n    return None\r\n\r\n\r","votes":null},{"text":"\r\n    diss_list = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            diss_list.append(i)\r\n    return diss_list\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar.append(i)\r\n    return dissimilar\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Code here\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n    return test_tup1.difference(test_tup2)\r\n\r\n\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 3, 5, 7)))\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 3, 5, 7, 8)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 3, 5, 7, 8)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6, 7), (1, 3, 5, 7, 8, 9, 10)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6, 7, 10), (1, 3, 5, 7, 8, 9, 10)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6, 7, 10), (1, 3, 5, 7, 8, 9, 10, 11)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6, 7, 10, 11), (1, 3, 5, 7, 8, 9, 10, 11)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6, 7, 10, 11), (1, 3, 5, 7, 8, 9, 10))","votes":null},{"text":"\r\n    dissimilar_element = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar_element.append(i)\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            dissimilar_element.append(i)\r\n    return dissimilar_element\r\n\r\ntest_tup1 = ('a', 'b', 'c', 'd')\r\ntest_tup2 = ('c', 'd', 'e')\r\n\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    dissimilar = []\r\n    for i in test_list1:\r\n        if i not in test_list2:\r\n            dissimilar.append(i)\r\n    for i in test_list2:\r\n        if i not in test_list1:\r\n            dissimilar.append(i)\r\n    return dissimilar\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar_list=[]\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i]!=test_tup2[i]:\r\n            dissimilar_list.append(test_tup1[i])\r\n            dissimilar_list.append(test_tup2[i])\r\n    return dissimilar_list\r\n\r\n\r\ntest_tup1=('a','b','c','d')\r\ntest_tup2=('b','a','d','c')\r\nprint(find_dissimilar(test_tup1,test_tup2))\r\n\r","votes":null},{"text":"\r\n    return set(test_tup1).symmetric_difference(set(test_tup2))\r\n\r\n\r\n\r\n# ----------\r\n# Exercise 2\r\n# ----------\r\n\r","votes":null},{"text":"\r\n    return (x for x in test_tup1 if x not in test_tup2)\r\n\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (2, 4, 6, 8, 10)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar_elements = []\r\n    dissimilar_elements.append(test_tup1[0])\r\n    dissimilar_elements.append(test_tup1[1])\r\n    dissimilar_elements.append(test_tup2[0])\r\n    dissimilar_elements.append(test_tup2[1])\r\n    return dissimilar_elements\r\n\r\n\r\nprint(find_dissimilar(('a', 'b'), ('c', 'd')))\r\nprint(find_dissimilar(('a', 'b'), ('a', 'd')))\r\nprint(find_dissimilar(('a', 'b'), ('b', 'a')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('d', 'a', 'b')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('d', 'b', 'a')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('d', 'b', 'c')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('d', 'e', 'f')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c', 'd')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c')))\r\n\r\n\r\n\"\"\"\r\n\r\nDifficulty Level: L1\r\n\r\nYou are given a list of names and a list of groupings of those names.\r\n\r\nReturn a list of groupings such that each grouping contains all of the names in the original list, \r\nand no grouping contains any name not in the original list.\r\n\r\nIf there are multiple solutions, return any of them.\r\n\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # 1. Initialize a set\r\n    test_set = set()\r\n    \r\n    # 2. Append the tuple elements into the set\r\n    test_set.add(test_tup1[0])\r\n    test_set.add(test_tup1[1])\r\n    test_set.add(test_tup2[0])\r\n    test_set.add(test_tup2[1])\r\n    \r\n    # 3. Initialize a list to store the dissimilar elements\r\n    dissimilar_list = list()\r\n    \r\n    # 4. Iterate over the set\r\n    for element in test_set:\r\n        # 5. Check the tuple elements against the set elements\r\n        if element not in test_tup1 and element not in test_tup2:\r\n            # 6. Append the dissimilar element to the list\r\n            dissimilar_list.append(element)\r\n            \r\n    # 7. Return the list\r\n    return dissimilar_list\r\n\r\n\r\n# ------------------------------------------------------------------------------------------\r\n#                                                                                           |\r\n#                                             Test cases                                    |\r\n#                                                                                           |\r\n# ------------------------------------------------------------------------------------------\r\n\r\n# test_tup1 = (1, 2)\r\n# test_tup2 = (2, 3)\r\n# print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n# test_tup1 = (1, 2)\r\n# test_tup2 = (2, 3)\r\n# print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n# test_tup1 = (1, 2)\r\n# test_tup2 = (3, 4)\r\n# print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n# test","votes":null},{"text":"\r\n    dissimilar_elements = []\r\n    \r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar_elements.append(i)\r\n    \r\n    return dissimilar_elements\r\n\r\n\r\n# test case\r\ntest_tup1 = (1, 4, 5, 6, 7)\r\ntest_tup2 = (2, 4, 5, 7, 8)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r\n# 07. Write a Python program to find the common elements in two given tuples.\r","votes":null},{"text":"\r\n    tuple1 = test_tup1\r\n    tuple2 = test_tup2\r\n    dissimilar_list = []\r\n    for element in tuple1:\r\n        if element not in tuple2:\r\n            dissimilar_list.append(element)\r\n    for element in tuple2:\r\n        if element not in tuple1:\r\n            dissimilar_list.append(element)\r\n    return dissimilar_list\r\n\r\n\r","votes":null},{"text":"\r\n    list1, list2 = [], []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            list1.append(i)\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            list2.append(i)\r\n    return list1, list2\r\n\r\n\r","votes":null},{"text":"\r\n    a = set(test_tup1)\r\n    b = set(test_tup2)\r\n    return a.symmetric_difference(b)\r\n\r\n\r","votes":null},{"text":"\r\n    common = []\r\n    dissimilar = []\r\n    for x in test_tup1:\r\n        if x in test_tup2:\r\n            common.append(x)\r\n        else:\r\n            dissimilar.append(x)\r\n    return common, dissimilar\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar_list = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar_list.append(i)\r\n\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            dissimilar_list.append(i)\r\n\r\n    return dissimilar_list\r\n\r\n\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 = (3, 4, 5, 6)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (3, 4, 5, 6)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (3, 4, 5, 6, 7)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (1, 2, 3, 4, 5)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (5, 6, 7, 8, 9)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\"\"\"\r\n5\r\n5\r\n5\r\n0\r\n5\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar_elements = ()\r\n    for i in test_tup1:\r\n        for j in test_tup2:\r\n            if i == j:\r\n                continue\r\n            else:\r\n                dissimilar_elements += (i,)\r\n                dissimilar_elements += (j,)\r\n    print(dissimilar_elements)\r\n\r\n\r\nfind_dissimilar((1, 2, 3, 6, 5, 4), (3, 1, 2, 4, 5, 6))\r\nfind_dissimilar((1, 2, 3, 6, 5, 4), (3, 1, 2, 4, 5))\r\nfind_dissimilar((1, 2, 3, 6, 5, 4), (3, 1, 2, 4, 5, 6, 7))\r\nfind_dissimilar((1, 2, 3, 6, 5, 4), ())\r\nfind_dissimilar((1, 2, 3, 6, 5, 4), (1, 2, 3, 6, 5, 4))\r\n\r\n\r","votes":null},{"text":"\r\n    if len(test_tup1) != len(test_tup2):\r\n        return False\r\n    else:\r\n        for i in range(len(test_tup1)):\r\n            if test_tup1[i] != test_tup2[i]:\r\n                return True\r\n\r","votes":null},{"text":"\r\n\r\n    # Code here\r\n    if test_tup1 == test_tup2:\r\n        return None\r\n    else:\r\n        return test_tup1 + test_tup2\r\n\r\n    \r\n# Test Code\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (3, 2, 1)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (3, 2, 4)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (3, 2, 1)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (3, 2, 1)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (3, 2, 1)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (3, 2, 1)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (3, 2, 1)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (","votes":null},{"text":"\r\n    \r\n    similar = []\r\n    for item in test_tup1:\r\n        if item in test_tup2:\r\n            similar.append(item)\r\n\r\n    dissimilar = []\r\n    for item in test_tup1:\r\n        if item not in similar:\r\n            dissimilar.append(item)\r\n\r\n    return dissimilar\r\n\r\n\r\nprint(find_dissimilar((1, 2, 3, 4), (3, 4, 5, 6)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (3, 4, 5, 6, 7)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (3, 4, 5, 6)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (3, 4, 5)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (3, 5)))\r\nprint(find_dissimilar((3, 4, 5, 6), (3, 4, 5, 6)))\r\nprint(find_dissimilar((3, 4, 5, 6), (3, 4, 5, 6, 7)))\r\nprint(find_dissimilar((3, 4, 5, 6), (3, 4, 5, 6, 7, 8)))\r\nprint(find_dissimilar((3, 4, 5, 6, 7), (3, 4, 5, 6, 7, 8)))\r\nprint(find_dissimilar((3, 4, 5, 6, 7, 8), (3, 4, 5, 6, 7, 8)))\r","votes":null},{"text":"\r\n\r\n    # Initialize dissimilar elements\r\n    diss_el = []\r\n\r\n    # Find all dissimilar elements\r\n    for el in test_tup1:\r\n        if el not in test_tup2:\r\n            diss_el.append(el)\r\n\r\n    for el in test_tup2:\r\n        if el not in test_tup1:\r\n            diss_el.append(el)\r\n\r\n    return diss_el\r\n\r\n\r\n# Test Cases\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'e', 'f')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'e', 'f')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd', 'e'), ('a', 'b', 'c', 'd', 'f')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd', 'e'), ('a', 'b', 'c', 'd', 'e')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd', 'e'), ('z', 'y', 'x', 'w', 'v')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd', 'e'), ('a', 'b', 'c', 'd', 'e', 'f')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd', 'e'), ('a', 'b', 'c', 'd', 'f', 'e', 'g')))\r\nprint(find_dissimilar(('a', 'b', 'c'","votes":null},{"text":"\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            return test_tup1[i], test_tup2[i]\r\n\r\n\r","votes":null},{"text":"\r\n    x = test_tup1\r\n    y = test_tup2\r\n\r\n    for i in range(len(x)):\r\n        if x[i] not in y:\r\n            print(x[i])\r\n    for i in range(len(y)):\r\n        if y[i] not in x:\r\n            print(y[i])\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize empty lists\r\n    lis1 = []\r\n    lis2 = []\r\n    # Traverse through both the lists\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            lis1.append(i)\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            lis2.append(i)\r\n    return lis1, lis2\r\n\r\n\r\n# Testing\r\nlist1 = (1, 2, 4, 5, 6, 7, 8, 9)\r\nlist2 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\r\nprint(find_dissim","votes":null},{"text":"\r\n    if len(test_tup1) != len(test_tup2):\r\n        raise ValueError(\"The two tuples are not of the same length.\")\r\n    else:\r\n        return [x for x in test_tup1 if x not in test_tup2]\r\n\r\n\r\n# Calling the function \r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (5, 6, 7, 8, 9, 10)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (3, 4, 5, 6, 7, 8)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (3, 4, 3, 4, 5, 6)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (3, 4, 5, 6, 7, 8)))\r\n\r\n# Testing with invalid values\r\ntry:\r\n    print(find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6, 7)))\r\nexcept ValueError as e:\r\n    print(e)\r\n\r\n# ------------------------------------------------------------------------------------------------\r\n\r\n# Qn: Write a Python program to find the sum of two given numbers. \r\n\r","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    a = []\r\n    for i in range(0,len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            a.append(i)\r\n    return a\r\n\r\n\r\nif __name__ == '__main__':\r\n    t1 = (1, 2, 3, 4, 5)\r\n    t2 = (1, 2, 3, 4, 6)\r\n    print(find_dissimilar(t1, t2))\r\n\r\n\r\n\"\"\"\r\n\r\nApproach 2:\r\n\r\n\r","votes":null},{"text":"\r\n    return set(test_tup1) ^ set(test_tup2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 11)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\r\n    print(find_dissimilar(test_tup1, test_tup2)","votes":null},{"text":"\r\n    return [a for a in test_tup1 if a not in test_tup2] + [b for b in test_tup2 if b not in test_tup1]\r\n\r\n\r\ntest_tup1 = ('a', 'b', 'c', 'd')\r\ntest_tup2 = ('e', 'f', 'g')\r\nresult = find_dissimilar(test_tup1, test_tup2)\r\nprint(result)\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (3, 4, 5)\r\nresult = find_dissimilar(test_tup1, test_tup2)\r\nprint(result)\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (2, 4, 6)\r\nresult = find_dissimilar(test_tup1, test_tup2)\r\nprint(result)\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (1, 2, 3, 4, 5)\r\nresult = find_dissimilar(test_tup1, test_tup2)\r\nprint(result)\r\n\r\n# 02. Write a Python program to remove duplicates from a list.\r","votes":null},{"text":"\r\n    # create set of the two tuples\r\n    temp_set = set([test_tup1, test_tup2])\r\n    # return the values of the set\r\n    return temp_set\r\n\r\n\r","votes":null},{"text":"\r\n    # test_tup1 = ('a', 'b', 'c', 'd', 'e')\r\n    # test_tup2 = ('a', 'b', 'f', 'g', 'h')\r\n    # Expected Output:\r\n    # ('c', 'd', 'e', 'f', 'g', 'h')\r\n    dissimilar = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar.append(i)\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            dissimilar.append(i)\r\n    return dissimilar\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    dissimilar_list = []\r\n    \r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar_list.append(i)\r\n    \r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            dissimilar_list.append(i)\r\n    \r\n    return dissimilar_list\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (2, 3, 4, 5, 6)\r\n\r\nprint(\"The dissimilar elements are: \")\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n# OUTPUT:\r\n# The dissimilar elements are: \r\n# [1, 6]\r\n\r\n# Complexity Analysis:\r\n# Time Complexity: O(n), where n is the length of the larger tuple.\r\n# Space Complexity: O(n), where n is the","votes":null},{"text":"\r\n    \r\n    dissimilar_elements = []\r\n    \r\n    for element1 in test_tup1:\r\n        if element1 not in test_tup2:\r\n            dissimilar_elements.append(element1)\r\n            \r\n        \r\n    for element2 in test_tup2:\r\n        if element2 not in test_tup1:\r\n            dissimilar_elements.append(element2)\r\n            \r\n    return dissimilar_elements\r\n\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 = (2, 3, 4, 5)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n# [1, 5]\r\n\r\ntest_tup1 = (3, 1, 2, 4)\r\ntest_tup2 = (2, 3, 4, 5)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n# [1, 5]\r\n\r\ntest_tup1 = (2, 3, 4)\r\ntest_tup2 = (2, 3, 4, 5)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n# [5]\r\n\r\ntest_tup1 = (2, 3, 4, 5)\r\ntest_tup2 = (2, 3, 4)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n# [5]\r\n\r\ntest_tup1 = (3, 1, 2, 4, 5)\r\ntest_tup2 = (2, 3, 4)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n# [1, 5]\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar_elements = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissimilar_elements.append(test_tup1[i])\r\n    return dissimilar_elements\r\n\r\n\r","votes":null},{"text":"\r\n    return [element for element in test_tup1 if element not in test_tup2]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # create two empty lists\r\n    list1 = list()\r\n    list2 = list()\r\n    \r\n    # append the first tuple to the first list\r\n    for i in range(0, len(test_tup1)):\r\n        list1.append(test_tup1[i])\r\n\r\n    # append the second tuple to the second list\r\n    for i in range(0, len(test_tup2)):\r\n        list2.append(test_tup2[i])\r\n    \r\n    # sort the lists\r\n    list1.sort()\r\n    list2.sort()\r\n    \r\n    # find the dissimilar elements in the lists\r\n    count = 0\r\n    for i in range(0, len(list1)):\r\n        if list1[i] != list2[i]:\r\n            count = count + 1\r\n        \r\n    return count\r\n\r\n\r\n# call the function\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (1, 2, 3, 4, 5, 6, 7, 8)\r\nresult = find_dissimilar(test_tup1, test_tup2)\r\nprint(\"The number of dissimilar elements in the given tuples is \" + str(result))\r\n\r\n# call the function\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\nresult = find_dissimilar(test_tup1, test_tup2)\r\nprint(\"The number of dissimilar elements in the given tuples is \" + str(result))\r\n\r\n# call the function\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tu","votes":null},{"text":"\r\n    diss = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            diss.append(test_tup1[i])\r\n    return diss\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return list(set(test_tup1) ^ set(test_tup2))\r\n\r\n\r\ntest_tup1 = ('a', 'b', 'c', 'd')\r\ntest_tup2 = ('e', 'f', 'g', 'd', 'a')\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n# Output:\r\n# ['b', 'c', 'e', 'f', 'g']\r\n\r\n\r\n# Q3\r","votes":null},{"text":"\r\n    return tuple(x for x in test_tup1 if x not in test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    return [item for item in test_tup1 if item not in test_tup2]\r\n\r\n\r","votes":null},{"text":"\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    for item in test_list1:\r\n        if item in test_list2:\r\n            test_list1.remove(item)\r\n            test_list2.remove(item)\r\n    if test_list1:\r\n        print(f\"Dissimilar elements in test_tup1 are {test_list1}\")\r\n    elif test_list2:\r\n        print(f\"Dissimilar elements in test_tup2 are {test_list2}\")\r\n    else:\r\n        print(\"Both tuples are same!\")\r\n\r\n# Test cases\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (3, 4, 1, 2, 5)\r\n\r\nfind_dissimilar(test_tup1, test_tup2)\r\n# Output:\r\n# Dissimilar elements in test_tup1 are [1, 2]\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (1, 2, 3, 4, 5)\r\n\r\nfind_dissimilar(test_tup1, test_tup2)\r\n# Output:\r\n# Both tuples are same!\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (3, 4, 5)\r\n\r\nfind_dissimilar(test_tup1, test_tup2)\r\n# Output:\r\n# Dissimilar elements in test_tup2 are [1, 2]\r\n\r\n# Q4. Write a function to calculate the mean of a list of numbers.\r\n\r","votes":null},{"text":"\r\n    for item in test_tup1:\r\n        if item not in test_tup2:\r\n            return item\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    dis_list = []\r\n    if len(test_tup1) != len(test_tup2):\r\n        return \"The length of the tuples are not equal.\"\r\n    \r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dis_list.append(test_tup1[i])\r\n            dis_list.append(test_tup2[i])\r\n    \r\n    if len(dis_list) > 2:\r\n        return \"The tuples have more than one dissimilar elements.\"\r\n    elif len(dis_list) == 0:\r\n        return \"The tuples are identical.\"\r\n    elif len(dis_list) == 1:\r\n        return \"The tuples have one dissimilar element: \" + str(dis_list[0])\r\n    elif len(dis_list) == 2:\r\n        return \"The tuples have two dissimilar elements: \" + str(dis_list[0]) + \" and \" + str(dis_list[1])\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    diss = []\r\n    for i in test_tup1:\r\n        if i in test_tup2:\r\n            diss.append(i)\r\n    return diss\r\n\r\n\r\nprint(find_dissimilar((1, 2, 3, 4), (2, 3, 4, 5)))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    result = []\r\n    for i in range(len(test_tup1)):\r\n        for j in range(len(test_tup2)):\r\n            if test_tup1[i] == test_tup2[j]:\r\n                break\r\n        else:\r\n            result.append(test_tup1[i])\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    # Code goes here\r\n    dissimilar_elements = []\r\n    for element1 in test_tup1:\r\n        for element2 in test_tup2:\r\n            if element1 == element2:\r\n                break\r\n        else:\r\n            dissimilar_elements.append(element1)\r\n    return dissimilar_elements\r\n\r\n\r\n# Code to test the function\r\ntest_tup1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g')\r\ntest_tup2 = ('a', 'b', 'c', 'h', 'i', 'j', 'k')\r\nprint(\"The dissimilar elements in the tuple are:\")\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    #Your code goes here\r\n    list1 = list(test_tup1)\r\n    list2 = list(test_tup2)\r\n    new_list = []\r\n    for i in list1:\r\n        if i not in list2:\r\n            new_list.append(i)\r\n    print(new_list)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_tup1 = (\"a\", \"b\", \"c\", \"d\")\r\n    test_tup2 = (\"a\", \"b\", \"d\")\r\n    find_dissimilar(test_tup1, test_tup2)\r\n\r\n\r\n# Output:\r\n# c\r\n\r\n# Challenge Task 2 of 2\r\n# Write a program to get the union of two given tuples.\r\n\r","votes":null},{"text":"\r\n    return tuple(set(test_tup1) ^ set(test_tup2))\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------\r\n# TEST CASES\r\n# ----------------------------------------------------------------------------------------------------------------------\r\n\r\n# Test 1\r\n# Correct result => ('a', 'b')\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)))\r\n\r\n# Test 2\r\n# Correct result => ('a', 'b', 'c')\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (11, 12, 13, 14, 15)))\r\n\r\n# Test 3\r\n# Correct result => ()\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\r\n\r\n# Test 4\r\n# Correct result => ()\r\nprint(find_dissimilar((11, 12, 13, 14, 15), (1, 2, 3, 4, 5)))\r\n\r\n# Test 5\r\n# Correct result => ()\r\nprint(find_dissimilar((11, 12, 13, 14, 15), (11, 12, 13, 14, 15)))\r\n\r\n# Test 6\r\n# Correct result => ()\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\r\n\r\n# Test 7\r\n# Correct result => ()\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, ","votes":null},{"text":"\r\n    return set(test_tup1).difference(test_tup2)\r\n\r\n\r\n# Test Code\r\nif __name__ == \"__main__\":\r\n    test_tup1 = (1, 2, 3, 4, 5)\r\n    test_tup2 = (1, 2, 3, 4, 6)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r\n# Output\r\n# {5, 6}\r\n\r\n\r\n# Approach 2: Using list comprehension\r","votes":null},{"text":"\r\n    return set(test_tup1).symmetric_difference(set(test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Your code here\r\n    dissimilar_elements = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissimilar_elements.append(i)\r\n    return dissimilar_elements\r\n\r\n\r","votes":null},{"text":"\r\n    diss1 = []\r\n    diss2 = []\r\n\r\n    for item in test_tup1:\r\n        if item not in test_tup2:\r\n            diss1.append(item)\r\n\r\n    for item in test_tup2:\r\n        if item not in test_tup1:\r\n            diss2.append(item)\r\n\r\n    return diss1, diss2\r\n\r\n\r\n# Tests\r","votes":null},{"text":"\r\n    tup1 = set(test_tup1)\r\n    tup2 = set(test_tup2)\r\n    return tup1.symmetric_difference(tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar = []\r\n    for num in test_tup1:\r\n        if num not in test_tup2:\r\n            dissimilar.append(num)\r\n    return dissimilar\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 11)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9,","votes":null},{"text":"\r\n    test_tup1 = (1,2,3,4,5)\r\n    test_tup2 = (2,3,4,5,6)\r\n    test_tup3 = (1,2,3,4,5)\r\n    test_tup4 = (2,3,4,5,6)\r\n    test_tup5 = (1,2,3,4,5)\r\n    test_tup6 = (2,3,4,5,6)\r\n    test_tup7 = (1,2,3,4,5)\r\n    test_tup8 = (2,3,4,5,6)\r\n    test_tup9 = (1,2,3,4,5)\r\n    test_tup10 = (2,3,4,5,6)\r\n    test_tup11 = (1,2,3,4,5)\r\n    test_tup12 = (2,3,4,5,6)\r\n    test_tup13 = (1,2,3,4,5)\r\n    test_tup14 = (2,3,4,5,6)\r\n    test_tup15 = (1,2,3,4,5)\r\n    test_tup16 = (2,3,4,5,6)\r\n    test_tup17 = (1,2,3,4,5)\r\n    test_tup18 = (2,3,4,5,6)\r\n    test_tup19 = (1,2,3,4,5)\r\n    test_tup20 = (2,3,4,5,6)\r\n    test_tup21 = (1,2,3,4,5)\r\n    test_tup22 = (2,3,4,5,6)\r\n    test_tup23 = (1,2,3,4,5)\r\n    test_tup24 = (2,3,4,5","votes":null},{"text":"\r\n\r\n    # Finding the common elements\r\n    common_elements = set(test_tup1) & set(test_tup2)\r\n\r\n    # Finding the dissimalar elements\r\n    dissimilar_elements = set(test_tup1) ^ set(test_tup2)\r\n\r\n    # Removing the common elements from the dissimilar_elements set\r\n    dissimilar_elements = dissimilar_elements - common_elements\r\n\r\n    # Converting the set into a list\r\n    dissimilar_elements = list(dissimilar_elements)\r\n\r\n    # Returning the list\r\n    return dissimilar_elements\r\n\r\n\r","votes":null},{"text":"\r\n    return [x for x in test_tup1 if x not in test_tup2] + [x for x in test_tup2 if x not in test_tup1]\r\n\r","votes":null},{"text":"\r\n    \r\n    return tuple(set(test_tup1) - set(test_tup2))\r\n\r\n# Test Code\r\n\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 = (2, 4, 6, 8)\r\n\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n# Expected Output:\r\n# (1, 3)\r\n\r\n# Solution 2\r\n\r","votes":null},{"text":"\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n    dissimilar = test_tup1.symmetric_difference(test_tup2)\r\n    return dissimilar\r\n\r\ntup1 = (\"a\", \"b\", \"c\", \"d\")\r\ntup2 = (\"a\", \"b\", \"c\", \"d\")\r\nprint(find_dissimilar(tup1, tup2))\r\n\r\ntup1 = (\"a\", \"b\", \"c\", \"d\")\r\ntup2 = (\"e\", \"f\", \"g\", \"h\")\r\nprint(find_dissimilar(tup1, tup2))\r\n\r\ntup1 = (\"a\", \"b\", \"c\", \"d\")\r\ntup2 = (\"a\", \"b\", \"c\", \"d\", \"e\")\r\nprint(find_dissimilar(tup1, tup2))\r\n\r\ntup1 = (\"a\", \"b\", \"c\", \"d\")\r\ntup2 = (\"b\", \"c\", \"d\", \"e\")\r\nprint(find_dissimilar(tup1, tup2))\r\n\r\ntup1 = (\"a\", \"b\", \"c\", \"d\")\r\ntup2 = (\"a\", \"b\", \"c\")\r\nprint(find_dissimilar(tup1, tup2))\r\n\r\ntup1 = (\"a\", \"b\", \"c\", \"d\")\r\ntup2 = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\r\nprint(find_dissimilar(tup1, tup2))\r\n\r\ntup1 = (\"a\", \"b\", \"c\", \"d\")\r\ntup2 = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")\r\nprint(find_dissimilar","votes":null},{"text":"\r\n    dissimilar = []\r\n    for element in test_tup1:\r\n        if element not in test_tup2:\r\n            dissimilar.append(element)\r\n    return dissimilar\r\n\r\n\r","votes":null}],"time":{"count":4.0,"avg":146469.832,"std":37982.481733033,"cov":0.2593194873}}
{"id":581,"question":"def surface_Area(b,s):\r\n    \"\"\"Write a python function to find the surface area of the square pyramid.\"\"\"","answers":[{"text":"\r\n    return 2*b*s+b*b\r\n\r\n\r","votes":84609.148},{"text":"\r\n    return 2*(b*s) + b*b\r\n\r\n\r","votes":92305.652},{"text":"\r\n    return 2*((b*s) + ((b**2)\/2))\r\n    \r\nprint(surface_Area(10,20))\r\n\r","votes":92583.312},{"text":"\r\n    return 2*b*s+(b**2)\r\n\r","votes":95043.1},{"text":"\r\n    \r\n    return 2 * (b ** 2) + 2 * (s ** 2)\r\n\r\nprint(surface_Area(3,4))\r\n\r\n\r","votes":null},{"text":"\r\n    return (2*b*s)+(((b**2) + (s**2)) * (1\/2))\r\n\r","votes":null},{"text":"\r\n    return (s*s*2 + b*b*2)\r\n\r\nprint(surface_Area(3,4))\r\n\r","votes":null},{"text":"\r\n    return 2*(b**2)+2*(b*s)+2*(s**2)\r\n\r","votes":null},{"text":"\r\n    return (2*b*s)+(2*b*b)\r","votes":null},{"text":"\r\n    return 4 * (b * b) + 2 * (b * (s ** 2))\r\n\r","votes":null},{"text":"\r\n    return (2*b**2 + 2*s**2)\r\n\r","votes":null},{"text":"\r\n    area = (2*(b+s))**2\r\n    return area\r\n\r\n\r","votes":null},{"text":"\r\n    return 4 * s * b\r\n\r\n\r","votes":null},{"text":"\r\n    return b*s\r\n\r\n\r","votes":null},{"text":"\r\n    return 2*b*s + (b*b)\/2\r\n\r","votes":null},{"text":"\r\n    \r\n    return (4*b*s) + (4*b**2) + (4*s**2) + (2*b**2)\r\n\r","votes":null},{"text":"\r\n    \r\n    \"\"\"Returns:\r\n        float: surface area of the square pyramid.\r\n    \"\"\"\r\n\r\n    return (4*b*s + (2*b*b))\r\n\r\n# Testing:\r\nprint(surface_Area(2,3))\r\nprint(surface_Area(5,9))\r\nprint(surface_Area(10,5))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return 2*(b*b+s*s)\r\n\r","votes":null},{"text":"\r\n    a = 0\r\n    a = (((2*b*s)+((b*s)*math.sqrt(3)))\/2)\r\n    print(\"The surface area of the square pyramid is: \",a)\r\n\r","votes":null},{"text":"\r\n    return (2*b*s) + (2*b*s*tan(radians(60)))\r\n\r\n\r","votes":null},{"text":"\r\n    sa = 2*(b*s) + (b*b)\r\n    print(\"The surface area of the square pyramid is:\",sa)\r\n\r","votes":null},{"text":"\r\n    a=b*s\r\n    area=a*a*3\r\n    return area\r\n\r\nprint(surface_Area(2,3))\r\n\r","votes":null},{"text":"\r\n    return (2 * b * s) + (2 * b * b) + (2 * s * s)\r\n    \r","votes":null},{"text":"\r\n    return 2*b*s+2*b**2\r\n\r\nprint(surface_Area(10,5))\r\n#>>> 200\r\n\r","votes":null},{"text":"\r\n    return 2*s*(b+s)\r\n\r\nprint(\"The surface area of the square pyramid is: \",surface_Area(10,10))\r\n\r\n\r\n# 3.Write a python function to find the volume of the cube.\r","votes":null},{"text":"\r\n    return (2*b*s*s + 2*b*b) * 1\/3\r\n\r","votes":null},{"text":"\r\n    \r\n    try:\r\n        b = float(b)\r\n        s = float(s)\r\n        if b <= 0 or s <= 0:\r\n            raise ValueError\r\n        \r\n        return 4*b*s\r\n    except ValueError:\r\n        print(\"Please enter a positive number.\")\r\n\r","votes":null},{"text":"\r\n    return (b**2)*2 + (b*s)*2\r\n\r\n#print(surface_Area(5,8))\r\n\r","votes":null},{"text":"\r\n    return 2*(b*s + b**2)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return 2 * (b * s + ((b**2)\/2 * (s*s)))\r\n\r","votes":null},{"text":"\r\n    return 2 * (b*s + (b\/2)**2)\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return 2 * (b * s + b * b)\r\n\r\n\r\n# Test Cases\r\nprint(surface_Area(3,4))\r\nprint(surface_Area(1,2))\r\nprint(surface_Area(4,1))\r\n\r\n#===========================================================================================================================================================================\r\n\r","votes":null},{"text":"\r\n    surface_area= (2*b*s)+(4*s*s)\r\n    print('The surface area of the square pyramid is',surface_area)\r\n\r\n\r","votes":null},{"text":"\r\n    return (2*b*s)+((b*b)\/2)*4\r\n\r","votes":null},{"text":"\r\n    area = 2 * b * s + 2 * b * b\r\n    return area\r\n\r\nprint(surface_Area(3,4))\r\n\r","votes":null},{"text":"\r\n    \r\n    return 2*b*s + 2*s**2\r\n\r\nprint(surface_Area(2.0,3.0))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #Define a function to calculate the surface area.\r\n   ","votes":null},{"text":"\r\n    return 2*(b*s + b**2)\r\n\r","votes":null},{"text":"\r\n    sa = (s **2) * 4 + (b ** 2) * 3\r\n    return sa\r\n\r","votes":null},{"text":"\r\n    \r\n    return 2 * ( (b * s) + (b * b) )\r\n\r\n# surface_area = surface_Area(10,100)\r\n# print(\"Surface Area of Square Pyramid\", surface_area)\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return (b*s+((b\/2)*(b\/2)))\r\n\r\nprint(\"The value of surface area of the square pyramid is:\")\r\nprint(surface_Area(10,12))\r\n\r","votes":null},{"text":"\r\n    import math\r\n    return (float(b)*(float(s)**2))+(float(b)*float(s)*2)\r\n\r","votes":null},{"text":"\r\n\r\n    if b <= 0 or s <= 0:\r\n        return print('Please enter value greater than 0')\r\n\r\n    return print('Surface Area :', ((2*(b**2)+2*b*s)*(3\/2)))\r\n\r\n\r","votes":null},{"text":"\r\n    a = (b**2) + (s**2)\r\n    return 2*a\r\n\r","votes":null},{"text":"\r\n    return 4*(b*s)\r\n\r","votes":null},{"text":"\r\n\r\n    return 2*(b**2) + 2*(b*s) + 2*(s**2)\r\n\r\n\r","votes":null},{"text":"\r\n    return (b*b*s)\/2\r\n\r\n\r\nprint(surface_Area(5,5))\r\n\r\n\r","votes":null},{"text":"\r\n    surface_area = (b*b)*2 + (s*s*2)\r\n    return surface_area\r\n\r","votes":null},{"text":"\r\n    base = float(b)\r\n    side = float(s)\r\n    surface_area = 4 * base * side + 4 * (pow(side, 2))\r\n    return surface_area\r\n\r\nif __name__ == '__main__':\r\n    print(surface_Area(1,1))\r\n    \r\n#Reference: w3resource\r\n\r\n\r\n\r\n#Question 2\r","votes":null},{"text":"\r\n    return 2*b*s + 2*b*b\r\n\r","votes":null},{"text":"\r\n    return (b*s*4)+((b*b)*2)\r\n\r","votes":null},{"text":"\r\n\r\n    area = (b**2 + b**2)\/2\r\n    area2 = area * s\r\n    return area2\r\n\r","votes":null},{"text":"\r\n    return (b*s*2)+(b*b)+(s*s)\r\n\r\na=int(input(\"Enter the base of the square pyramid: \"))\r\nb=int(input(\"Enter the side of the square pyramid: \"))\r\nprint(surface_Area(a,b))\r\n\r\n#7\r","votes":null},{"text":"\r\n    return 4 * b * s\r\n\r","votes":null},{"text":"\r\n    return (b*s+2*b*b*(2*s-b))\r\n\r\n#surface_Area(9,3)\r\n\r","votes":null},{"text":"\r\n    return 2 * (b ** 2) + 2 * (b * s) + (s ** 2)\r\n\r","votes":null},{"text":"\r\n    return (2*(b*b) + 2*(s*s))*s\r\nprint(surface_Area(4,3))\r\n\r","votes":null},{"text":"\r\n    return (2*b*s+2*s**2)\/2\r\n\r","votes":null},{"text":"\r\n    return (b*s * 2) + (b*b * 2) + (b * 4)\r\n\r","votes":null},{"text":"\r\n    area=0\r\n    area=2*(b*s)\r\n    return area\r\n\r","votes":null},{"text":"\r\n    return 2*b*s\r\n\r\n\r\nprint(surface_Area(10, 7))\r\n\r\n\r\n# 08\r","votes":null},{"text":"\r\n    return (2*b*s+2*b**2*tan(pi\/5))\r\n\r","votes":null},{"text":"\r\n    \r\n    #code\r\n    return ((2*b*s)+(2*b*b))\r\n\r\n# Test Code\r\nprint(surface_Area(16,8))\r\nprint(surface_Area(2,1))\r\nprint(surface_Area(50,20))\r\nprint(surface_Area(8,10))\r\n\r\n#--------------------------------------------------------------\r","votes":null},{"text":"\r\n    return 2*(3*s**2+b**2)\r\n\r\n\r","votes":null},{"text":"\r\n    return (4*b*s+2*b**2*s)*0.5\r\n\r\n# Program 3\r","votes":null},{"text":"\r\n    return (b*b*s) + (2*(b*b*s))\r\n\r","votes":null},{"text":"\r\n    return 2*(b*b)+2*(b*s)\r\n\r","votes":null},{"text":"\r\n    a=b*b\r\n    return 2*(a+s*s)\r\n\r\nb=int(input(\"Enter the length of base: \"))\r\ns=int(input(\"Enter the length of side: \"))\r\nprint(\"Surface Area:\",surface_Area(b,s))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return (b*b)*s\r\n\r","votes":null},{"text":"\r\n    return (b*s*2) + (b*b*2)\r\n\r","votes":null},{"text":"\r\n    return (2*b*b) + (2*b*s) + (2*s*s)\r\n\r","votes":null},{"text":"\r\n    return (2 * b * s) + (4 * b * b)\r\n\r","votes":null},{"text":"\r\n\r\n    return 2*b*s + 2*b*b\r\n\r\nprint(surface_Area(14.5,11.5))\r\n\r","votes":null},{"text":"\r\n    s_area = 2.0*(b**2) + 2.0*b*s\r\n    return s_area\r\n\r\nb = int(input(\"Enter the length of the base: \"))\r\ns = int(input(\"Enter the length of the slant: \"))\r\nprint(\"The surface area of the square pyramid is: \",surface_Area(b,s))\r\n\r\n# 2. Write a python function to find the volume of the pyramid.\r","votes":null},{"text":"\r\n    \r\n    return (b*s*4)+((b*b)\/2)\r\n\r\nprint (\"Enter the base and the side of the square pyramid:\")\r\nb = int(input(\"Base: \"))\r\ns = int(input(\"Side: \"))\r\nprint (\"The surface area of the square pyramid is:\",surface_Area(b,s))\r\n\r\n#-------------------------------------------------------------------------------------------------------#\r\n\r","votes":null},{"text":"\r\n    import math\r\n    return s * (math.sqrt(2) + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    return (1\/3)*b**2*(s+b)\r\n\r\n\r","votes":null},{"text":"\r\n    print(\"The surface area of the pyramid is:\",2*(b*s)+(b**2))\r\n\r","votes":null},{"text":"\r\n    return (2 * s * b) + (2 * s * s) + ((s * s) \/ 3)\r\n\r\n\r\nb = float(input(\"Enter the length of base of the square pyramid: \"))\r\ns = float(input(\"Enter the side of square pyramid: \"))\r\nprint(\"Surface area of the square pyramid is {0}.\".format(surface_Area(b,s)))\r\n\r\n\r\n#2-Define a function that takes a number as parameter and print the number of seconds in the number of days. The function should return the number of seconds.\r","votes":null},{"text":"\r\n    a = b*b\r\n    area = 2*(a+b*s)\r\n    return area\r\n\r\n\r","votes":null},{"text":"\r\n    return (b*b*s)\/3\r\n\r","votes":null},{"text":"\r\n    return(2*b*s + (b**2)*2)\r\n\r","votes":null},{"text":"\r\n    return (2*b*s) + (2*b**2)\r\n\r","votes":null},{"text":"\r\n    return 5*(b**2)+5*(s**2)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    return 2*b*s + (b**2)*2\r\n\r\nif __name__ == \"__main__\":\r\n    b = int(input().strip())\r\n    s = int(input().strip())\r\n    total_area = surface_Area(b, s)\r\n    print(total_area)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvotes":null},{"text":"\r\n    surface_area = 2*(b+s)*((b*b)+(b*s))\r\n    return surface_area\r\nprint(\"The surface area of the square pyramid is\",surface_Area(12,10))\r\n\r","votes":null},{"text":"\r\n    \r\n    return 2*b*s + (b**2)*(1\/2)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return (b*b + b*b)*s\r\n\r\nprint(surface_Area(25,12))\r\n\r\n\r","votes":null},{"text":"\r\n    return 2*(b**2 + b*s) + (s**2)\r\n\r","votes":null},{"text":"\r\n    return (2*(b**2)+2*(s**2))\r\n\r\n# ------------------------------------------------------------------------------------------\r\n# Code starts here\r\n\r","votes":null},{"text":"\r\n    return 2*(b*b) + 2*(b*s) + 2*(s*s)\r\n\r","votes":null},{"text":"\r\n    \r\n    return (2*b*s + (b**2)*2) + (s**2)*2\r\n\r\nb= 10\r\ns=6\r\n\r\nprint(surface_Area(b,s))\r\n\r\n\r\n# --------------\r\n#Code starts here\r","votes":null},{"text":"\r\n    return 2*((s*s*s)+(b*b))\r\n\r","votes":null},{"text":"\r\n    return 4*(b+s)*s\r\n\r","votes":null},{"text":"\r\n    if b <= 0 or s <= 0:\r\n        return \"Invalid Input\"\r\n    return (4 * (b ** 2) + (s ** 2)) * 1.0 \/ 3\r\n\r\nprint(surface_Area(10,12))\r\n\r\n\r\n#9. Write a Python function to find the volume of the sphere.\r\n\r","votes":null},{"text":"\r\n    a = b * 2\r\n    return (a**2 + b**2)*(a\/2)\r\n\r\nprint(surface_Area(3,12))\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return (2*b*b)+(2*b*s)+(2*s*s)\r\n\r","votes":null},{"text":"\r\n    a=b*s\r\n    return a\r\nprint(surface_Area(5,5))\r\nprint(surface_Area(2,2))\r\n\r","votes":null},{"text":"\r\n    a = (b*s)\/2\r\n    return f\"The surface area of the square pyramid is {a}.\"\r\n\r","votes":null},{"text":"\r\n    \r\n    s = b**2\r\n    h = (b**2) + (b**2)\r\n    \r\n    return (s*4) + (h*2)\r\n\r\n\r","votes":null}],"time":{"count":4.0,"avg":91135.303,"std":4521.3575882735,"cov":0.0496114836}}
{"id":582,"question":"def my_dict(dict1):\r\n    \"\"\"Write a function to check if a dictionary is empty or not.\"\"\"","answers":[{"text":"\r\n    if dict1:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r\n# Tests\r","votes":54773.088},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":55343.888},{"text":"\r\n    return len(dict1) == 0\r\n\r\n\r","votes":58467.552},{"text":"\r\n    if not dict1:\r\n        return True\r\n    return False\r\n\r\n\r","votes":60317.512},{"text":"\r\n    if dict1:\r\n        return False\r\n    return True\r\n\r\n\r\n\r\n\r\n\r\n# -----------------------------------------------------------------------------------------------------------------------\r\n# The next level of difficulty, is to pass in a list of dictionaries, and return the first key-value pair from the\r\n# first dictionary that contains the value \"a\".\r\n#\r\n# For example:\r\n#\r\n# given: list_of_dicts = [{\"a\":1, \"b\":2}, {\"a\":3, \"b\":4}]\r\n# output: (\"a\", 1)\r\n#\r\n# If no dictionary in the list contains the value \"a\", then return (\"None\", \"None\").\r\n#\r\n# Hint: Use the \"for\" loop to loop through the list and the \"in\" keyword to check if a dictionary contains a value.\r\n# -----------------------------------------------------------------------------------------------------------------------\r\n\r","votes":61454.516},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":69916.632},{"text":"\r\n    if len(dict1) > 0:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":72053.672},{"text":"\r\n    return dict1 == {}\r\n\r\n\r","votes":77821.752},{"text":"\r\n    if dict1:\r\n        return False\r\n    else:\r\n        return True\r\n    \r\n    \r","votes":80598.132},{"text":"\r\n    return len(dict1) == 0\r\n\r\n\r\ndict1 = {}\r\nprint(my_dict(dict1))\r\n\r\n# Write a function to check if a dictionary is empty or not.\r\n\r\n# Example:\r\n# dict1 = {}\r\n# dict2 = {'a': 'b'}\r\n\r\n# my_dict(dict1) # should return True\r\n# my_dict(dict2) # should return False\r\n\r\n#","votes":80808.416},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    return False\r\n\r\n\r","votes":87075.684},{"text":"\r\n    if len(dict1) == 0 or dict1 == None:\r\n        return True\r\n    return False\r\n\r\n\r","votes":87592.832},{"text":"\r\n\r\n    if dict1:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1}))\r\n\r\n\r\n# 5. Write a Python program to print the values from a dictionary for a given key.\r","votes":89892.284},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    d = dict()\r\n    print(my_dict(d))\r\n    d = {'key': 'val'}\r\n    print(my_dict(d))\r\n","votes":90212.532},{"text":"\r\n    return len(dict1) == 0\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1}))\r\n\r\n\r","votes":92320.0},{"text":"\r\n    if not dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))  # True\r\nprint(my_dict({'a': 1, 'b': 2}))  # False\r\n\r\n\r","votes":94163.368},{"text":"\r\n    \r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n    \r\nprint(my_dict({}))\r\nprint(my_dict({1: 'a'}))\r\n\r\n# Exercise 2\r\n\r","votes":96372.896},{"text":"\r\n    if dict1:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"key\": \"value\"}))\r\n\r\n\r","votes":97558.308},{"text":"\r\n    return len(dict1) == 0\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1, \"b\": 2}))\r\n\r\n\r","votes":102117.664},{"text":"\r\n    return len(dict1) == 0\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1}))\r\nprint(my_dict({\"a\": 1, \"b\": 2}))\r\n\r\n\r","votes":105870.352},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    return False\r\n\r\n\r\ndict1 = {}\r\nprint(my_dict(dict1))\r\n\r\n# 2\r","votes":107078.34},{"text":"\r\n    \r\n    # your code goes here\r\n\r\n    return len(dict1) == 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n    dict1 = dict()\r\n    for _ in range(n):\r\n        dict1[input()] = input()\r\n    ans = my_dict(dict1)\r\n    fptr.write(str(ans) + '\\n')\r\n    fptr.close()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":108783.624},{"text":"\r\n    return len(dict1) == 0\r\n\r\n\r\n# Test Cases\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1}))\r\n\r\n# Output\r\n# True\r\n# False\r\n\r\n\r","votes":111070.864},{"text":"\r\n    if dict1:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r\ndict1 = {'a': 1, 'b': 2, 'c': 3}\r\ndict2 = {'a': 1, 'b': 2, 'c': 3}\r\n\r\ndict3 = {'a': 1, 'b': 2, 'c': 3}\r\ndict4 = {'a': 1, 'b': 2, 'c': 3}\r\n\r\nprint(my_dict(dict1))\r\ndict1.pop('a')\r\nprint(my_dict(dict1))\r\n\r\nprint(my_dict(dict2))\r\ndict2.pop('a')\r\nprint(my_dict(dict2))\r\n\r\n","votes":119244.052},{"text":"\r\n    return dict1 == {}\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1}))\r\n\r\n\r\n# \u533f\u540d\u51fd\u6570\r","votes":123669.524},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Calling the function\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1, 'b': 2}))\r\n\r\n\r","votes":125210.56},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    d1 = dict()\r\n    d1 = {\"one\": 1, \"two\": 2, \"three\": 3}\r\n    result = my_dict(d1)\r\n    print(result)\r\n\r\n\r\n\"\"\"\r\n[Program Output]\r\n>>> False\r\n\"\"\"\r\n\r\n\r","votes":135122.732},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"name\": \"Mike\"}))\r\nprint(my_dict({\"name\": \"Mike\", \"age\": 23}))\r\nprint(my_dict({\"name\": \"Mike\", \"age\": 23, \"job\": \"Engineer\"}))\r\n\r\n# 04\r","votes":142466.828},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Main program\r\nd1 = dict()\r\nprint(my_dict(d1))\r\n\r\n# Output:\r\n# True\r\n\r\nd2 = {'x':10, 'y':20}\r\nprint(my_dict(d2))\r\n\r\n# Output:\r\n# False\r\n\r\nd3 = dict(a=10, b=20, c=30)\r\nprint(my_dict(d3))\r\n\r\n# Output:\r\n# False\r\n\r\n\r\n# Q. 02. Write a function to find the sum of all the elements in a dictionary.\r","votes":146270.592},{"text":"\r\n    if len(dict1) > 0:\r\n        print(\"Dictionary is not empty\")\r\n    else:\r\n        print(\"Dictionary is empty\")\r\n\r\n\r\nmy_dict({})\r\n\r\n\r\n\"\"\"\r\nExplanation:\r\n\r\nWhen you pass an empty dictionary in the function, it will check if the length of the dictionary is greater than 0. Since the length of an empty dictionary is 0, it will print \"Dictionary is empty\".\r\n\r\nIf you pass a non-empty dictionary, it will print \"Dictionary is not empty\".\r\n\r\nThe length of a dictionary can be found by calling the len() function on the dictionary.\r\n\r\nExample\r\n\r\n>>> len({'a': 1, 'b': 2, 'c': 3})\r\n3\r\n\r\n>>> len({})\r\n0\r\n\r\n>>> len({'a': 1})","votes":null},{"text":"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    dict1 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict1))\r\n\r\n    dict2 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict2))\r\n\r\n    dict3 = {}\r\n    print(my_dict(dict3))\r\n\r\n    dict4 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict4))\r\n\r\n    dict5 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict5))\r\n\r\n    dict6 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict6))\r\n\r\n    dict7 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict7))\r\n\r\n    dict8 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict8))\r\n\r\n    dict9 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict9))\r\n\r\n    dict10 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict10))\r\n\r\n    dict11 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict11))\r\n\r\n    dict12 = {'a': 1, 'b': 2, 'c': 3}\r\n    print(my_dict(dict12))\r\n\r\n    dict13 = {'a': 1, 'b': ","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"Dictionary is empty\")\r\n    else:\r\n        print(\"Dictionary is not empty\")\r\n\r\n\r\nmy_dict({})\r\n\r\n# 2. Write a function that takes a list and returns a dictionary with the first element in the list as the key and the second element as the value.\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return \"False\"\r\n    else:\r\n        return \"True\"\r\n    \r\n    \r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The dictionary is empty\")\r\n    else:\r\n        print(\"The dictionary is not empty\")\r\n\r\n\r\n# Calling the function\r\nmy_dict({})\r\nmy_dict({\"name\": \"John\", \"age\": 25})\r\n\r\n\r\n# To check if a list is empty or not\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print('Dictionary is not empty')\r\n    else:\r\n        print('Dictionary is empty')\r\n\r\n\r\ndict1 = {'key1': 'value1', 'key2': 'value2'}\r\nmy_dict(dict1)\r\n\r\ndict2 = {'key1': 'value1'}\r\nmy_dict(dict2)\r\n\r\ndict3 = {'key1': 'value1', 'key2': 'value2'}\r\nmy_dict(dict3)\r\n\r\ndict4 = {}\r\nmy_dict(dict4)\r\n\r\n# Example 2\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return \"Dictionary is not empty\"\r\n    else:\r\n        return \"Dictionary is empty\"\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print('Not empty.')\r\n    else:\r\n        print('Empty.')\r\n\r\n\r\nmy_dict({})\r\nmy_dict({1: \"a\"})\r\n\r\n\r\n# 5. Write a function to get the count of vowels in a string.\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print('Dictionary is not empty')\r\n    else:\r\n        print('Dictionary is empty')\r\n\r\nmy_dict({'name': 'Rahul', 'age': 25})\r\n\r\n#Task 9:\r\n#Write a function to print the dictionary without using for loop or any inbuilt function.\r\n\r","votes":null},{"text":"\r\n    return bool(dict1.items())\r\n\r\nprint(my_dict({'a': 'b'}))\r\nprint(my_dict({}))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_","votes":null},{"text":"\r\n    return bool(dict1)\r\n\r","votes":null},{"text":"\r\n    return dict1\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return \"Dictionary is not empty\"\r\n    else:\r\n        return \"Dictionary is empty\"\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1, \"b\": 2}))\r\n\r\n# # 4. Write a function that takes a string and returns it as a list.\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"Dictionary is not empty\")\r\n    else:\r\n        print(\"Dictionary is empty\")\r\n\r\n\r\ndict1 = {\"Name\": \"Pradeep\", \"Qualification\": \"Phd\"}\r\n\r\nprint(dict1)\r\nmy_dict(dict1)\r\n\r\ndict1.clear()\r\nprint(dict1)\r\nmy_dict(dict1)\r\n\r\ndict1.update({\"Name\": \"Pradeep\", \"Qualification\": \"Phd\", \"Age\": 30})\r\nprint(dict1)\r\n\r\nmy_dict(dict1)\r\n\r\ndict1.update({\"Name\": \"Pradeep\", \"Qualification\": \"Phd\", \"Age\": 30})\r\nprint(dict1)\r\n\r\nmy_dict(dict1)\r\n\r\ndict1.update({\"Name\": \"Pradeep\", \"Qualification\": \"Phd\", \"Age\": 30})\r\nprint(dict1)\r\n\r\nmy_dict(dict1)\r\n\r\ndict1.update({\"Name\": \"Pradeep\", \"Qualification\": \"Phd\", \"Age\": 30})\r\nprint(dict1)\r\n\r\nmy_dict(dict1)\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return dict1\r\n    else:\r\n        return \"The dictionary is empty\"\r\n\r\n\r\nmy_dict1 = {1: \"one\", 2: \"two\", 3: \"three\"}\r\nmy_dict2 = {}\r\n\r\nprint(my_dict(my_dict1))\r\nprint(my_dict(my_dict2))\r\n\r\n\r\n# Method 2\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"The dictionary is not empty\")\r\n    else:\r\n        print(\"The dictionary is empty\")\r\n\r\n\r\nmy_dict({})\r\n\r\n# Output:\r\n# The dictionary is empty\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if dict1:\r\n        print(\"Dictionary is not empty.\")\r\n    else:\r\n        print(\"Dictionary is empty.\")\r\n        \r","votes":null},{"text":"\r\n    return dict1 != {}\r\n\r\n\r\n# Test Code\r\nprint(my_dict({})) # Should print False\r\nprint(my_dict({'a': 1})) # Should print True\r\nprint(my_dict({'a': 1, 'b': 2})) # Should print True\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3})) # Should print True\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4})) # Should print True\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})) # Should print True\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6})) # Should print True\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7})) # Should print True\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8})) # Should print True\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9})) # Should print True\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10})) # Should print True\r\nprint","votes":null},{"text":"\r\n    # return bool(dict1)\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({'key1': 'value1', 'key2': 'value2'}))\r\nprint(my_dict({}))\r\nprint(my_dict({'key1': 'value1', 'key2': 'value2'}))\r\nprint(my_dict({}))\r\n\r\n\r","votes":null},{"text":"\r\n    if not dict1:\r\n        return \"Empty\"\r\n    else:\r\n        return \"Not empty\"\r\n\r\n\r","votes":null},{"text":"\r\n    return bool(dict1)\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1}))\r\n\r\n###############################################################################################################################################################\r\n\r","votes":null},{"text":"\r\n    if dict1 is None:\r\n        return None\r\n    if len(dict1) == 0:\r\n        return None\r\n    return dict1\r\n\r\n\r","votes":null},{"text":"\r\n    return dict1 != {}\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({1: 2}))\r\nprint(my_dict({1: \"1\"}))\r\nprint(my_dict({1: \"1\", 2: \"2\", 3: \"3\"}))\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return \"Dict is not empty\"\r\n    else:\r\n        return \"Dict is empty\"\r\n\r\n\r\nprint(my_dict({1: 2, 2: 3, 3: 4}))\r\nprint(my_dict({}))\r\n\r\n\r\n# 04. Write a function that takes a list and returns the number of times the given value occurs in the list.\r","votes":null},{"text":"\r\n\r\n    return dict1.items()\r\n\r\n\r","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        print('The dictionary is empty')\r\n    else:\r\n        print('The dictionary is not empty')\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Main code starts here\r\ndict1 = {}\r\nprint(my_dict(dict1))\r\ndict1 = {'a': 'b'}\r\nprint(my_dict(dict1))\r\n\r\n\r\n# Question 2\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nx = {\"a\": \"b\", \"c\": \"d\"}\r\nprint(my_dict(x))\r\n\r\n\r\n# 6. Write a function which takes a list and a value as arguments and returns True if the value is present in the list and False if the value is not present in the list.\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({1: 1}))\r\nif my_dict({}):\r\n    print('Dictionary is not empty.')\r\nelse:\r\n    print('Dictionary is empty.')\r\n\r\n\r","votes":null},{"text":"\r\n    return len(dict1) > 0\r\n\r\n\r","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        print(\"Empty Dictionary\")\r\n    else:\r\n        print(\"Dictionary is not empty\")\r\n    \r\n# my_dict({})\r\n# my_dict({1:2})\r\n# my_dict({1:\"one\"})\r\n# my_dict({1:1, 2:2, 3:3})\r\n# my_dict({\"a\":1, \"b\":2, \"c\":3})\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return \"Dictionary is not empty.\"\r\n    else:\r\n        return \"Dictionary is empty.\"\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"Not Empty\")\r\n    else:\r\n        print(\"Empty\")\r\n\r\n\r\n# -------------------------------------------------------------------------------\r\n#                                   EXERCISE 02\r\n# -------------------------------------------------------------------------------\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if dict1 == {}:\r\n        print(True)\r\n    else:\r\n        print(False)\r\n\r\n\r\nmy_dict({})\r\n# True\r\n\r\nmy_dict({\"a\": 1})\r\n# False\r\n\r\n\r\n# Method 2\r\n\r","votes":null},{"text":"\r\n    for item in dict1.items():\r\n        print(item)\r\n    return True\r\n\r","votes":null},{"text":"\r\n    return dict1.values()\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1}))\r\n\r\n# 2. Write a function to check if a key exists in a dictionary or not.\r","votes":null},{"text":"\r\n    if dict1:\r\n        return \"Not empty\"\r\n    else:\r\n        return \"Empty\"\r\n\r\n\r","votes":null},{"text":"\r\n    return dict1\r\n\r\n\r\ndict1 = {}\r\nprint(my_dict(dict1))\r\n\r\n\r","votes":null},{"text":"\r\n    if not dict1:\r\n        print(\"Empty Dictionary\")\r\n    else:\r\n        print(\"Dictionary is not Empty\")\r\n    \r\ndict1 = {\"name\": \"Aisha\", \"age\": \"14\", \"Class\": \"VI\"}\r\nmy_dict(dict1)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1.keys():\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n\r\n\r\n#","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        return 'Empty Dictionary'\r\n    else:\r\n        return 'Not Empty Dictionary'\r\n\r\n\r","votes":null},{"text":"\r\n    return dict1 != {}\r\n\r\n\r\n# Test Code\r\nprint(my_dict({}))\r\nprint(my_dict({'A': 1}))\r\nprint(my_dict({}))\r\nprint(my_dict({'B': 2}))\r\nprint(my_dict({'C': 3}))\r\nprint(my_dict({'D': 4}))\r\nprint(my_dict({'E': 5}))\r\nprint(my_dict({'F': 6}))\r\nprint(my_dict({'G': 7}))\r\nprint(my_dict({'H': 8}))\r\nprint(my_dict({'I': 9}))\r\nprint(my_dict({'J': 10}))\r\nprint(my_dict({'K': 11}))\r\nprint(my_dict({'L': 12}))\r\nprint(my_dict({'M': 13}))\r\nprint(my_dict({'N': 14}))\r\nprint(my_dict({'O': 15}))\r\nprint(my_dict({'P': 16}))\r\nprint(my_dict({'Q': 17}))\r\nprint(my_dict({'R': 18}))\r\nprint(my_dict({'S': 19}))\r\nprint(my_dict({'T': 20}))\r\nprint(my_dict({'U': 21}))\r\nprint(my_dict({'V': 22}))\r\nprint(my_dict({'W': 23}))\r\nprint(my_dict({'X': 24}))\r\nprint(my_dict({'Y': 25}))\r\nprint(my_dict({'Z': 26}))\r\nprint(my_dict({'A': 1, 'B': 2, 'C': 3, 'D': 4}))\r\nprint(my_dict({'E': 5, 'F': 6, 'G': 7, 'H': 8}))\r\nprint(m","votes":null},{"text":"\r\n    return bool(dict1)\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"Dictionary is not empty\")\r\n    else:\r\n        print(\"Dictionary is empty\")\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({'Name': 'Zara', 'Age': 7, 'Class': 'First'}))\r\n\r\n#-----------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n\r\n    return bool(dict1) # True if dict is not empty\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({1:2, 3:4}))\r\n\r","votes":null},{"text":"\r\n    return dict1 != {}\r\n\r\n\r\ndict1 = {}\r\nprint(my_dict(dict1))\r\n\r\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\r\nprint(my_dict(dict1))\r\n\r\n# Test case 1\r\nfrom nose.tools import assert_equal\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({1: 2}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprint(my_dict({}))\r\nprin","votes":null},{"text":"\r\n    dict1 = {}\r\n    if dict1 != {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if len(dict1) > 0:\r\n        return True\r\n    return False\r\n\r\n\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3}))\r\nprint(my_dict({}))\r\n\r\n\r","votes":null},{"text":"\r\n    return True if dict1 else False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    dict1 = {'name': 'Zara', 'age': 7, 'class': 'First'}\r\n    print(my_dict(dict1))\r\n    dict2 = {}\r\n    print(my_dict(dict2))\r\n    dict3 = {'name': 'Zara', 'age': 7, 'class': 'First'}\r\n    dict3.pop('age')\r\n    print(my_dict(dict3))\r\n\r\n\r\n\"\"\"\r\nTask\r\n\r\nWrite a function to check if a dictionary is empty or not.\r\n\r\nInput Format\r\n\r\nThere will be only one line of input containing the elements of the dictionary separated by space.\r\n\r\nOutput Format\r\n\r\nDisplay the appropriate message if the dictionary is empty or not.\r\n\r\nSample Input\r\n\r\n{'name': 'Zara', 'age': 7, 'class': 'First'}\r\nSample Output\r\n\r\nFalse\r\nExplanation\r\n\r\nDictionary is not empty, so return False.\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1.keys():\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\ndict1 = {\"name\": \"Rohit\", \"age\": 21, \"height\": 175, \"weight\": 66}\r\nprint(my_dict(dict1))\r\n\r\n\r","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        return \"Empty\"\r\n    else:\r\n        return \"Not Empty\"\r\n\r\n# 1. Write a function to check if a dictionary is empty or not.\r\n\r\n\r","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        return \"Dictionary is empty.\"\r\n    else:\r\n        return \"Dictionary is not empty.\"\r\n\r\n\r\ndict1 = {\"name\":\"Gaurav\", \"age\":29, \"work\": \"software\"}\r\nprint(my_dict(dict1))\r\n\r\ndict2 = {}\r\nprint(my_dict(dict2))\r\n\r\n\r\n# Write a Python program to find the length of a string.\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"Dictionary is not empty\")\r\n    else:\r\n        print(\"Dictionary is empty\")\r\n\r\n\r\nmy_dict({}) # Dictionary is empty\r\nmy_dict({\"a\": 1, \"b\": 2, \"c\": 3}) # Dictionary is not empty\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nif __name__ == \"__main__\":\r\n    d1 = dict(name=\"John\", age=36)\r\n    d2 = {}\r\n    print(my_dict(d1))\r\n    print(my_dict(d2))\r\n\r\n\r\n# 2. Write a function to remove duplicates from a list.\r","votes":null},{"text":"\r\n\r\n    if dict1:\r\n        print(\"The dictionary is not empty.\")\r\n    else:\r\n        print(\"The dictionary is empty.\")\r\n\r\n\r","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n    \r\nmy_dict({})\r\n\r\n\r","votes":null},{"text":"\r\n    return bool(dict1)\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1}))\r\nprint(my_dict({\"a\": 1, \"b\": 2}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}))\r\n\r\n# 1. Write a Python function to get the length of a list.\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print('Dictionary is not empty')\r\n    else:\r\n        print('Dictionary is empty')\r\n\r\n\r\ndict1 = {'a': 1, 'b': 2, 'c': 3}\r\nmy_dict(dict1)\r\n\r\ndict2 = {}\r\nmy_dict(dict2)\r\n\r\n\r\n# Exercise 6: Write a function that takes a list as an argument and prints the items in the list backwards. (Hint: Think about using slicing and a for loop.)\r","votes":null},{"text":"\r\n    return dict1.items() == []\r\nprint(my_dict({'a': 1}))\r\nprint(my_dict({}))\r\n\r","votes":null}],"time":{"count":29.0,"avg":94263.7308965517,"std":25674.7908685433,"cov":0.2723718935}}
{"id":583,"question":"def catalan_number(num):\r\n    \"\"\"Write a function for nth catalan number.\"\"\"","answers":[{"text":"\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (4 * num - 2) \/\/ (num + 1)\r\n\r\n\r","votes":77454.196},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return (catalan_number(num - 1) * (4 * num - 2)) \/\/ (num + 1)\r\n\r\nprint(catalan_number(2))\r\n\r\n\r\n# 2. Write a Python function to find the factorial of a number.\r\n\r","votes":124100.096},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (4 * num - 2) \/\/ (num + 1)\r\n\r\n\r","votes":125931.552},{"text":"\r\n\r\n    catalan = [0]*(num+1)\r\n    catalan[0] = 1\r\n\r\n    for i in range(1, num+1):\r\n        catalan[i] = 0\r\n        for j in range(i):\r\n            catalan[i] += catalan[j]*catalan[i-1-j]\r\n\r\n    return catalan[num]\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input())\r\n    print(catalan_number(num))\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n\r\n# Top-Down Approach\r\n#","votes":128005.224},{"text":"\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (4 * num - 2) \/\/ (num + 1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = 10\r\n    print(f'The {num}th catalan number is {catalan_number(num)}.')\r\n\r\n\r","votes":147544.3},{"text":"\r\n    \r\n    if num == 0:\r\n        return 1\r\n    \r\n    catalan = [0]*(num+1)\r\n    \r\n    catalan[0] = 1\r\n    catalan[1] = 1\r\n    \r\n    for i in range(2, num+1):\r\n        for j in range(i):\r\n            catalan[i] += catalan[j] * catalan[i-1-j]\r\n            \r\n    return catalan[num]\r\n\r\n\r\n# print(catalan_number(1))\r\n# print(catalan_number(2))\r\n# print(catalan_number(3))\r\n# print(catalan_number(4))","votes":157296.528},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        total = 0\r\n        for i in range(num):\r\n            total += catalan_number(i) * catalan_number(num - 1 - i)\r\n        return total\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # print(catalan_number(5))\r\n    print(catalan_number(10))\r\n\r\n\r","votes":3990705.2159999995},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        c = 0\r\n        for i in range(num):\r\n            c += catalan_number(i) * catalan_number(num - i - 1)\r\n        return c\r\n\r\n\r","votes":4004954.1000000001},{"text":"\r\n    # Write your code here.\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(1, num + 1):\r\n            result += catalan_number(i - 1) * catalan_number(num - i)\r\n        return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(catalan_number(n))\r\n\r\n\r\n# n = 0\r\n# catalan_number(n)\r\n\r\n# n = 1\r\n# catalan_number(n)\r\n\r\n# n = 2\r\n# catalan_number(n)\r\n\r\n# n = 3\r\n# catalan_number(n)\r\n\r\n# n = 4\r\n# catalan_number(n)\r\n\r\n# n = 5\r\n# catalan_number(n)\r\n\r\n# n = 6\r\n# catalan_number(n)\r\n\r\n# n = 7\r\n# catalan_number(n)\r\n\r\n# n = 8\r\n# catalan_number(n)\r\n\r\n# n = 9\r\n# catalan_number(n)\r\n\r\n# n = 10\r\n# catalan_number(n)\r\n\r\n# n = 11\r\n# catalan_number(n)\r\n\r\n# n = 12\r\n# catalan_number(n)\r\n\r\n# n = 13\r\n# catalan_number(n)\r\n\r\n# n = 14\r\n# catalan_number(n)\r\n\r\n# n = 15\r\n# catalan_number(n)\r\n\r\n# n = 16\r\n# catalan_number(n)\r\n\r\n# n = 17\r\n# catalan_number(n)\r\n\r\n# n = 18\r\n# catalan_number(n)\r\n\r\n# n = 19\r\n# catalan_number(","votes":4147390.7680000002},{"text":"\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        res = 0\r\n        for i in range(num):\r\n            res += catalan_number(i)*catalan_number(num - i - 1)\r\n        return res\r\n\r\n\r","votes":4188026.736},{"text":"\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        count = 0\r\n        for i in range(num):\r\n            count += catalan_number(i)*catalan_number(num-1-i)\r\n        return count\r\n\r\n\r","votes":4189600.6399999997},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        res = 0\r\n        for i in range(num):\r\n            res += catalan_number(i) * catalan_number(num - i - 1)\r\n        return res\r\n\r\n\r","votes":4202945.5959999999},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    num_sum = 0\r\n    for i in range(0, num):\r\n        num_sum += catalan_number(i) * catalan_number(num - i - 1)\r\n    return num_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(catalan_number(4))\r\n    print(catalan_number(5))\r\n","votes":4284556.8959999997},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    return sum([catalan_number(i)*catalan_number(num-i-1) for i in range(num)])\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Catalan Numbers:\")\r\n    for i in range(10):\r\n        print(catalan_number(i))\r\n\r\n\"\"\"\r\nSample Input:\r\n1\r\n\r\nSample Output:\r\n1\r\n1\r\n2\r\n5\r\n14\r\n42\r\n132\r\n429\r\n1430\r\n4862\r\n\"\"\"\r\n\r\n#Method 2: Using math.comb()\r\n\r","votes":6012488.3799999999},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    if num > 1:\r\n        return sum([catalan_number(i) * catalan_number(num - i - 1) for i in range(num)])\r\n\r\n\r","votes":6420406.9000000004},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    return sum([catalan_number(i-1)*catalan_number(num-i) for i in range(1, num+1)])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input(\"Enter the number of Catalan numbers to be generated: \"))\r\n    print(\"Catalan numbers are: \", end='')\r\n    for i in range(num):\r\n        if i != num-1:\r\n            print(catalan_number(i), end=', ')\r\n        else:\r\n            print(catalan_number(i))\r\n\r\n    #","votes":6510543.9000000004},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    return sum(catalan_number(i - 1) * catalan_number(num - i) for i in range(1, num + 1))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(catalan_number(10))\r\n    print(catalan_number(3))\r\n    print(catalan_number(2))\r\n    print(catalan_number(0))\r\n    print(catalan_number(1))\r\n    print(catalan_number(10))\r\n    print(catalan_number(3))\r\n    print(catalan_number(2))\r\n    print(catalan_number(0))\r\n    print(catalan_number(1))\r\n    print(catalan_number(10))\r\n    print(catalan_number(3))\r\n    print(catalan_number(2))\r\n    print(catalan_number(0))\r\n    print(catalan_number(1))\r\n    print(catalan_number(10))\r\n    print(catalan_number(3))\r\n    print(catalan_number(2))\r\n    print(catalan_number(0))\r\n    print(catalan_number(1))\r\n    print(catalan_number(10))\r\n    print(catalan_number(3))\r\n    print(catalan_number(2))\r\n    print(catalan_number(0))\r\n    print(catalan_number(1))\r\n    print(catalan_number(10))\r\n    print(catalan_number(3))\r\n    print(catalan_number(2))\r\n    print(catalan_number(0))\r\n    print(catalan_number(1))\r\n    print(catalan_number(10))\r\n    print(catalan_number(3))\r\n    print(catalan_number(2))","votes":6863996.3680000007},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    total = 0\r\n    for i in range(num):\r\n        total += catalan_number(i) * catalan_number(num - 1 - i)\r\n    return total\r\n\r\n\r","votes":7995866.4440000001},{"text":"\r\n\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        a = 0\r\n        for i in range(num):\r\n            a = a + catalan_number(i) * catalan_number(num - 1 - i)\r\n        return a\r\n\r\n\r","votes":8017246.784},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        total = 0\r\n        for i in range(num):\r\n            total += catalan_number(i) * catalan_number(num - 1 - i)\r\n        return total\r\n\r\n\r\nprint(catalan_number(6))\r\n\r\n\r\n# 5. Write a function for nth Fibonacci number.\r","votes":8030008.1280000005},{"text":"\r\n\r\n    if num == 0:\r\n        return 1\r\n\r\n    cn = 0\r\n\r\n    for i in range(num):\r\n        cn += catalan_number(i) * catalan_number(num - i - 1)\r\n\r\n    return cn\r\n\r\n\r","votes":8097599.7799999993},{"text":"\r\n    n = num\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(n):\r\n            result += catalan_number(i)*catalan_number(n-1-i)\r\n        return result\r\n\r\n\r","votes":8541187.5319999997},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return sum([catalan_number(i) * catalan_number(num - i - 1) for i in range(num)])\r\n\r\n\r","votes":13389580.9639999997},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return sum(catalan_number(i)*catalan_number(num-1-i) for i in range(num))\r\n\r\n\r","votes":14261723.9919999987},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return sum(catalan_number(num - 1 - x) * catalan_number(x) for x in range(num))\r\n\r\n\r","votes":14272602.4680000003},{"text":"\r\n    n = 1\r\n    if num == 0:\r\n        return 1\r\n    while num != 1:\r\n        n += 1\r\n        num = num \/\/ n\r\n    return n\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1)*(4*num+2)*(2*num+1)\/\/(num+2)*(num+1)\r\n\r\n\r\nprint(catalan_number(3))\r\nprint(catalan_number(0))\r\nprint(catalan_number(1))\r\nprint(catalan_number(2))\r\nprint(catalan_number(3))\r\nprint(catalan_number(4))\r\nprint(catalan_number(5))\r\nprint(catalan_number(6))\r\nprint(catalan_number(7))\r\nprint(catalan_number(8))\r\nprint(catalan_number(9))\r\nprint(catalan_number(10))\r\n\r\n# 2\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    return (2 * catalan_number(num - 2)) + catalan_number(num - 1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    for num in range(10):\r\n        print(f\"Catalan number for {num} is: {catalan_number(num)}\")\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(2^n)\r\nSPACE COMPLEXITY: O(1)\r\n\"\"\"\r\n\r\n\"\"\"\r\nTEST CASES:\r\n\r\nExamples:\r\ncatalan_number(0) \u279e 1\r\ncatalan_number(1) \u279e 1\r\ncatalan_number(2) \u279e 2\r\ncatalan_number(3) \u279e 5\r\ncatalan_number(4) \u279e 14\r\ncatalan_number(5) \u279e 42\r\ncatalan_number(6) \u279e 132\r\ncatalan_number(7) \u279e 429\r\ncatalan_number(8) \u279e 1430\r\ncatalan_number(9) \u279e 4862\r\n\r\nExpected Output:\r\n[1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862]\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return (catalan_number(num - 1) * 2) \/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        return ((2*num - 1)*catalan_number(num-1))\/\/num\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, num+1):\r\n        sum += (catalan_number(i-1)*catalan_number(num-i))\r\n    return sum\r\n\r\n\r\nprint(catalan_number(5))\r\n\r\n\r\n\r\n# Time Complexity = O(n*2^n)\r\n\r\n# Space Complexity = O(1)\r\n\r\n\r\n# Dynamic Programming\r\n\r\n# Time Complexity = O(n*2^n)\r\n\r\n# Space Complexity = O(n*2^n)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        return (catalan_number(num-1)*catalan_number(num-1))\/(num+1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1)*2 + catalan_number(num-2)\r\n\r\nnumber = int(input(\"Enter a value: \"))\r\nprint(catalan_number(number))\r\n\r\n# Output\r\n# Enter a value: 5\r\n# 42\r\n\r\n# Time Complexity: O(2^n)\r\n# Space Complexity: O(n)\r\n\r\n# Method 2: Dynamic Programming\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(num):\r\n            result += catalan_number(i) * catalan_number(num - i - 1)\r\n        return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(catalan_number(3))\r\n    print(catalan_number(4))\r\n    print(catalan_number(5))\r\n    print(catalan_number(6))\r\n    print(catalan_number(7))\r\n    print(catalan_number(8))\r\n    print(catalan_number(9))\r\n    print(catalan_number(10))\r\n    print(catalan_number(11))\r\n    print(catalan_number(12))\r\n    print(catalan_number(13))\r\n    print(catalan_number(14))\r\n    print(catalan_number(15))\r\n    print(catalan_number(16))\r\n    print(catalan_number(17))\r\n    print(catalan_number(18))\r\n    print(catalan_number(19))\r\n    print(catalan_number(20))\r\n    print(catalan_number(21))\r\n    print(catalan_number(22))\r\n    print(catalan_number(23))\r\n    print(catalan_number(24))\r\n    print(catalan_number(25))\r\n    print(catalan_number(26))\r\n    print(catalan_number(27))\r\n    print(catalan_number(28))\r\n    print(catalan_number(29))\r\n    print(catalan_number(30))\r\n    print(catalan_number(31))\r\n    print(catalan_number(32))\r\n    print(catalan_number(33))\r\n    print(catalan_number","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1)*(2*num-1)\/\/(num+1)\r\n\r\nprint(catalan_number(int(input())))\r\n\r\n# Recursive approach\r\n\r","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    catalan = 0\r\n    for i in range(num):\r\n        catalan += catalan_number(i) * catalan_number(num - 1 - i)\r\n    return catalan\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input(\"Enter the number: \"))\r\n    print(f\"The catalan number for {num} is {catalan_number(num)}\")\r\n\r\n\r\n\"\"\"\r\nTime Complex","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    \r\n    # for n in range(1, num + 1):\r\n    #     if n > 1:\r\n    #         sum = catalan_number(n - 1) * catalan_number(n - 2)\r\n    #         print(sum)\r\n    #     else:\r\n    #         print(1)\r\n        \r\n    # return sum\r\n    \r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * catalan_number(num - 2)\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    num = int(input())\r\n    # print(catalan_number(num))\r\n    print(catalan_number_recrusive(num))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n# Sample Input 1:\r\n# 4\r\n\r\n# Sample Output 1:\r\n# 55\r\n\r\n# Sample Input 2:\r\n# 5\r\n\r\n# Sample Output 2:\r\n# 1430\r\n\r\n# Sample Input 3:\r\n# 6\r\n\r\n# Sample Output 3:\r\n# 103330\r\n\r\n# Sample Input 4:\r\n# 10\r\n\r\n# Sample Output 4:\r\n# 346505352134\r\n\r\n# Explanation 1:\r\n# Catalan Number for n = 4 is 55.\r\n\r\n# Explanation 2:\r\n# Catalan Number for n = 5 is 1430.\r\n\r\n# Explanation 3:\r\n# Catalan Number for n = 6 is 103330.\r\n\r\n# Explanation 4:\r\n# Catalan Number for n = 1","votes":null},{"text":"\r\n\r\n    catalan_list = []\r\n    for i in range(num+1):\r\n        if num == 0:\r\n            catalan_list.append(1)\r\n        elif num == 1:\r\n            catalan_list.append(1)\r\n        elif num == 2:\r\n            catalan_list.append(2)\r\n        elif num >=3:\r\n            catalan_list.append((2*catalan_list[i-2]) + catalan_list[i-1])\r\n\r\n    print(catalan_list)\r\n    return catalan_list[num]\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    if num == 1:\r\n        return 1\r\n    \r\n    return catalan_number(num-1) + catalan_number(num-2)*catalan_number(num-1)\r\n\r\nif __name__ == \"__main__\":\r\n    print(catalan_number(5))\r\n","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num - 1) * (4 * num - 2) \/ (num + 1)\r\n\r\nnum = int(input())\r\nprint(catalan_number(num))\r\n\r\n# 1.10\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num < 0:\r\n        return -1\r\n    num_1 = catalan_number(num - 1)\r\n","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        return (catalan_number(num - 1) * 2 * catalan_number(num - 2)) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    catalan_list = [1]\r\n    for i in range(1, num):\r\n        catalan_list.append(sum([catalan_list[j]*catalan_list[i-1-j] for j in range(i)]))\r\n    return catalan_list[-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(catalan_number(5))\r\n    print(catalan_number(6))\r\n    print(catalan_number(7))\r\n    print(catalan_number(8))\r\n    print(catalan_number(9))\r\n    print(catalan_number(10))\r\n    print(catalan_number(11))\r\n    print(catalan_number(12))\r\n    print(catalan_number(13))\r\n    print(catalan_number(14))\r\n    print(catalan_number(15))\r\n    print(catalan_number(","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    \r\n    total = 0\r\n    for i in range(num):\r\n        total += catalan_number(i)*catalan_number(num-1-i)\r\n    return total\r\n\r\nprint(catalan_number(5))\r\nprint(catalan_number(6))\r\nprint(catalan_number(7))\r\nprint(catalan_number(8))\r\nprint(catalan_number(9))\r\nprint(catalan_number(10))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Using the formula\r\n    # 2*C(n-1)*C(n-2) + C(n-2)*C(n-3) + C(n-1)*C(n-3)\r\n\r\n    num = int(num)\r\n\r\n    if num == 0:\r\n        return 1\r\n\r\n    n = num + 2\r\n\r\n    c = 0\r\n    for i in range(1, n-1):\r\n        c += catalan_number(i-1) * catalan_number(n-i-1)\r\n\r\n    return c\r\n\r\n\r\nprint(catalan_number(2))\r\nprint(catalan_number(3))\r\nprint(catalan_number(4))\r\nprint(catalan_number(5))\r\nprint(catalan_number(6))\r\nprint(catalan_number(7))\r\nprint(catalan_number(8))\r\nprint(catalan_number(9))\r\nprint(catalan_number(10))\r\nprint(catal","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num-1) + catalan_number(num-2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        catalan_num = 0\r\n        for i in range(0, num):\r\n            catalan_num += catalan_number(i) * catalan_number(num - 1 - i)\r\n        return catalan_num\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input())\r\n    print(catalan_number(num))\r\n\r\n\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 0:\r\n        return 0\r\n    else:\r\n        return catalan_number(num - 1) * (2 * num) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n\r\n    num -= 1\r\n    prev = 0\r\n    curr = 0\r\n    for i in range(0, num):\r\n        temp = curr\r\n        curr = curr + prev\r\n        prev = temp\r\n\r\n    return curr\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        nth_catalan = 1\r\n    else:\r\n        nth_catalan = 0\r\n        for i in range(num):\r\n            nth_catalan += catalan_number(i) * catalan_number(num - 1 - i)\r\n    return nth_catalan\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(catalan_number(0))\r\n    print(catalan_number(1))\r\n    print(catalan_number(2))\r\n    print(catalan_number(3))\r\n    print(catalan_number(4))\r\n    print(catalan_number(5))\r\n    print(catalan_number(6))\r\n    print(catalan_number(7))\r\n    print(catalan_number(8))\r\n    print(catalan_number(9))\r\n    print(catalan_number(10))\r\n    print(catalan_number(11))\r\n    print(catalan_number(12))\r\n    print(catalan_number(13))\r\n    print(catalan_number(14))\r\n    print(catalan_number(15))\r\n    print(catalan_number(16))\r\n    print(catalan_number(17))\r\n    print(catalan_number(18))\r\n    print(catalan_number(19))\r\n    print(catalan_number(20))\r\n    print(catalan_number(21))\r\n    print(catalan_number(22))\r\n    print(catalan_number(23))\r\n    print(catalan_number(24))\r\n    print(catalan_number(25))\r\n    print(catalan_number(26))\r\n    print(catalan_number(27))\r\n    print(catalan_number(28))\r\n    print(catalan_number(29))\r\n    print(catalan_numbe","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) + catalan_number(num-2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter the value of N: \"))\r\n    print(catalan_number(n))\r\n\r\n\r\n# Sample Input\/Output:\r\n# Enter the value of N: 5\r\n# 14\r\n\r\n\r\n# Time Complexity: O(N)\r\n# Space Complexity: O(N)\r\n\r\n# Explanation:\r\n# The Catalan Number represents the number of different expressions that can be formed using the corresponding number of parenthesis. \r\n# For example, if the number of parenthesis is 3, then there can be 5 expressions:\r\n# ()()\r\n# (())\r\n# ()(())\r\n# ((()))\r\n# (()())\r\n\r\n# Now, to find out the number of expressions for N parenthesis, we will apply the rule:\r\n# For an expression with N parenthesis, there will be (N\u20131) expressions using the left parenthesis and\r\n# (N\u20132) expressions using the right parenthesis. So, the total number of expressions will be \r\n# the sum of the above two: (N\u20131) + (N\u20132) = N + (N\u20132) \u2013 1 = N + N \u2013 3 = 2N \u2013 3\r\n\r\n# So, for N = 5, the total number of expressions will be 2 * 5 \u2013 3 = 14\r\n\r\n# The Catalan Number is a famous example of a recursive function.\r\n# For more details on Catalan Numbers, refer to:\r\n# https:\/\/www.geeksforgeeks.org\/find-nth-catalan-number\/\r\n# https:\/\/www.geeksforgeeks.org\/catalan-numbers\/\r\n# https:\/\/en.wikipedia.org\/wiki\/Catala","votes":null},{"text":"\r\n    if num <= 0:\r\n        raise ValueError(\"n must be positive\")\r\n    if num == 1:\r\n        return 1\r\n    return catalan_number(num - 1) * (2 * num - 1) \/\/ num\r\n\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n\r\n    doctest.testmod()\r\n\r\n    while True:\r\n        try:\r\n            input_num = int(input(\"Enter the number: \"))\r\n            print(catalan_number(input_num))\r\n        except ValueError:\r\n            print(\"Invalid input\")\r\n        except Exception as e:\r\n            print(e)\r\n","votes":null},{"text":"\r\n    \r\n    catalan = [[0 for x in range(num+1)] for y in range(num+1)]\r\n    catalan[0][0] = 1\r\n    for i in range(1, num+1):\r\n        catalan[0][i] = 0\r\n        catalan[i][0] = 1\r\n        for j in range(1, i):\r\n            catalan[i][j] = catalan[i-1][j-1] + catalan[i-1][j]\r\n    return catalan[num][num]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(catalan_number(5))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n^2)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nInput:\r\nn = 5\r\n\r\nOutput:\r\n14\r\n\r\nExplanation:\r\nThe 5th catalan number is 14.\r\n\r\nSAMPLE 2\r\n\r\nInput:\r\nn = 3\r\n\r\nOutput:\r\n5\r\n\r\nExplanation:\r\nThe 3rd catalan number is 5.\r\n\r\nSAMPLE 3\r\n\r\nInput:\r\nn = 7\r\n\r\nOutput:\r\n429\r\n\r\nExplanation:\r\nThe 7th catalan number is 429.\r\n\r\nSAMPLE 4\r\n\r\nInput:\r\nn = 2\r\n\r\nOutput:\r\n2\r\n\r\nExplanation:\r\nThe 2nd catalan number is 2.\r\n\r\nSAMPLE 5\r\n\r\nInput:\r\nn = 1\r\n\r\nOutput:\r\n1\r\n\r\nExplanation:\r\nThe 1st catalan number is 1.\r\n\r\nSAMPLE 6\r\n\r\nInput:\r\nn = 0\r\n\r\nOutpu","votes":null},{"text":"\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * 2 * catalan_number(num - 2) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    \r\n    result = 0\r\n    \r\n    for i in range(num):\r\n        result += (catalan_number(i) * catalan_number(num - i - 1))\r\n        \r\n    return result\r\n\r\nif __name__ == \"__main__\":\r\n    \r\n    import","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num - 1) * 2 + catalan_number(num - 2)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(catalan_number(4))\r\n    print(catalan_number(5))\r\n    print(catalan_number(6))\r\n    print(catalan_number(7))\r\n    print(catalan_number(8))\r\n    print(catalan_number(9))\r\n    print(catalan_number(10))\r\n    print(catalan_number(11))\r\n    print(catalan_number(12))\r\n    print(catalan_number(13))\r\n    print(catalan_number(14))\r\n    print(catalan_number(15))\r\n    print(catalan_number(16))\r\n    print(catalan_number(17))\r\n    print(catalan_number(18))\r\n    print(catalan_number(19))\r\n    print(catalan_number(20))\r\n    print(catalan_number(21))\r\n    print(catalan_number(22))\r\n    print(catalan_number(23))\r\n    print(catalan_number(24))\r\n    print(catalan_number(25))\r\n    print(catalan_number(26))\r\n    print(catalan_number(27))\r\n    print(catalan_number(28))\r\n    print(catalan_number(29))\r\n    print(catalan_number(30))\r\n    print(catalan_number(31))\r\n    print(catalan_number(32))\r\n    print(catalan_number(33))\r\n    print(catalan_number(34))\r\n    print(catalan_number(35)","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    return catalan_number(num-1) * 2 * num \/\/ (num + 1)\r\n\r","votes":null},{"text":"\r\n    catalan = [1]\r\n    for i in range(num):\r\n        catalan.append(0)\r\n        for j in range(1, i + 1):\r\n            catalan[i] += catalan[j - 1] * catalan[i - j]\r\n    return catalan[num - 1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input(\"Enter the number of the Catalan Number: \"))\r\n    if num <= 0:\r\n        print(\"Please enter a positive number.\")\r\n    else:\r\n        print(\"The Catalan Number is: \", catalan_number(num))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the number of the Catalan Number: 1\r\nThe Catalan Number is:  1","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return sum([catalan_number(i)*catalan_number(num-1-i)\r\n                    for i in range(num)])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    num2 = num - 1\r\n    return sum(catalan_number(i) * catalan_number(num2-i) for i in range(1, num2+1))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(catalan_number(4))\r\n\r\n\r\n# OUTPUT\r\n# 5\r\n\r\n\r\n# In above example, we can see that for input 4 we get 5 as output.\r\n\r\n# Time Complexity: O(n^2)\r\n\r\n# Space Complexity: O(n)\r\n\r\n\r\n# Approach 2: Using Memoization\r\n\r\n# Memoization is an optimization technique used primarily to speed up computer programs\r\n# by storing the results of expensive function calls and returning the cached result\r\n# when the same inputs occur again.\r\n\r\n# So, in short, it is a technique to remember the previous outputs.\r\n\r\n# A Python Dictionary is used to cache the results of function calls.\r\n# The idea is to cache the results of function calls that are expensive and\r\n# re-use the cached results.\r\n\r\n# Now, let's see the code for the same.\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) + catalan_number(num-2)\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if num == 0:\r\n        return 1\r\n    # Recursive call\r\n    return catalan_number(num - 1) * catalan_number(num - 2) \/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        c = 0\r\n        for i in range(1, num):\r\n            c += catalan_number(i) * catalan_number(num-i)\r\n        return c\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    return sum([catalan_number(i) * catalan_number(num - i - 1) \r\n            for i in range(num)])\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n# Test\r\nprint(catalan_number(6))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\"\"\"\r\n\r\n\"\"\"\r\nSample Output\r\n\r\n[1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 5878","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * 2 * catalan_number(num - 2) \/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    if num == 2:\r\n        return 2\r\n    if num < 1:\r\n        return 0\r\n    else:\r\n        return sum([catalan_number(i-1)*catalan_number(num-i) for i in range(1,num)])\r\n\r\n\r","votes":null},{"text":"\r\n    num_list = []\r\n    for _ in range(num):\r\n        num_list.append(int(input()))\r\n\r\n    print(catalan_num(num_list))\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        number = 0\r\n        for i in range(num):\r\n            number += catalan_number(i) * catalan_number(num - i - 1)\r\n        return number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(catalan_number(0))\r\n    print(catalan_number(1))\r\n    print(catalan_number(2))\r\n    print(catalan_number(3))\r\n    print(catalan_number(4))\r\n    print(catalan_number(5))\r\n    print(catalan_number(6))\r\n    print(catalan_number(7))\r\n    print(catalan_number(8))\r\n    print(catalan_number(9))\r\n    print(catalan_number(10))\r\n    print(catalan_number(11))\r\n    print(catalan_number(12))\r\n    print(catalan_number(13))\r\n    print(catalan_number(14))\r\n    print(catalan_number(15))\r\n    print(catalan_number(16))\r\n    print(catalan_number(17))\r\n    print(catalan_number(18))\r\n    print(catalan_number(19))\r\n    print(catalan_number(20))\r\n    print(catalan_number(21))\r\n    print(catalan_number(22))\r\n    print(catalan_number(23))\r\n    print(catalan_number(24))\r\n    print(catalan_number(25))\r\n    print(catalan_number(26))\r\n    print(catalan_number(27))\r\n    print(catalan_number(28))\r\n    print(catalan_number(29))\r\n    print(catalan_number(30))\r\n    print(catalan_number(31)","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        # number of ways to insert n-1 elements into a list of n-1 elements\r\n        # n-1 elements on left, n-1 elements on right\r\n        left = catalan_number(num - 1)\r\n        # n-1 elements on left, n-2 elements on right\r\n        right = catalan_number(num - 2)\r\n        return left + right\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num-1) + catalan_number(num-2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) * 2 * catalan_number(num-2) \/ (num + 1)\r\n     \r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter the nth Catalan number: \"))\r\n    print(f\"Catalan number at {n} is: {catalan_number(n)}\")\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace","votes":null},{"text":"\r\n    if num == 1 or num == 2:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) + catalan_number(num-2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    a = 0\r\n    b = 1\r\n    for i in range(num):\r\n        c = a + b\r\n        a = b\r\n        b = c\r\n    return c\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input(\"Enter the number for catalan number: \"))\r\n    print(f\"Catalan number for {num} is {catalan_number(num)}\")\r\n\r\n\r\n# Test Cases\r\n\r\n#","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num <= 1:\r\n        return 0\r\n    else:\r\n        return catalan_number(num - 1) * 2 + catalan_number(num - 2)\r\n\r\n\r\n# Test cases\r\nprint(catalan_number(0))\r\nprint(catalan_number(3))\r\nprint(catalan_number(4))\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# 01.09.2020 - 1st solution\r","votes":null},{"text":"\r\n    catalan = [1]\r\n    for i in range(1, num + 1):\r\n        catalan.append(0)\r\n        for j in range(0, i):\r\n            catalan[i] += catalan[j] * catalan[i - j - 1]\r\n    return catalan[num]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input(\"Enter the number of catalan number: \"))\r\n    print(f\"Catalan number for {num} is {catalan_number(num)}\")\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the number of catalan number: 9\r\nCatalan number for 9 is 364525\r\n\r\nSAMPLE II\r\n\r\nEnter the number of catalan number: 10\r\nCatalan number for 10 is 600600\r\n\r\nSAMPLE III\r\n\r\nEnter the number of catalan number: 11\r\nCatalan number for 11 is 155117520\r\n\r\nSAMPLE IV\r\n\r\nEnter the number of catalan number: 12\r\nCatalan number for 12 is 472","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1)*2 + catalan_number(num-2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    return sum([catalan_number(num - i) * catalan_number(i) for i in range(num)])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input(\"Enter nth catalan number: \"))\r\n    print(catalan_number(num))\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nSample Input\/Output\r\n\r\nExample 1:\r\n\r\nInput:\r\nN = 4\r\nOutput:\r\n14\r\nExplanation:\r\nThe 4th catalan number is 14.\r\nExample 2:\r\n\r\nInput:\r\nN = 5\r\nOutput:\r\n42\r\nExplanation:\r\nThe 5th catalan number is","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * 2 * catalan_number(num - 2) \/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num < 0:\r\n        raise ValueError(\"Catalan number cannot be negative\")\r\n    elif num == 1:\r\n        return 1\r\n   ","votes":null},{"text":"\r\n    if num <= 0:\r\n        return 0\r\n    elif num < 3:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input('Enter the number: '))\r\n    print('The Catalan number is', catalan_number(num))\r\n    print('The Catalan number is', catalan_number(5))\r\n    print('The Catalan number is', catalan_number(7))\r\n    print('The Catalan number is', catalan_number(8))\r\n    print('The Catalan number is', catalan_number(9))\r\n    print('The Catalan number is', catalan_number(10))\r\n    print('The Catalan number is', catalan_number(11))\r\n    print('The Catalan number is', catalan_number(12))\r\n    print('The Catalan number is', catalan_number(13))\r\n    print('The Catalan number is', catalan_number(14))\r\n    print('The Catalan number is', catalan_number(15))\r\n    print('The Catalan number is', catalan_number(16))\r\n    print('The Catalan number is', catal","votes":null},{"text":"\r\n    catalan = []\r\n    catalan.append(1)\r\n    for i in range(num):\r\n        catalan.append(0)\r\n        for j in range(i+1):\r\n            catalan[i] += catalan[j] * catalan[i-j-1]\r\n    return catalan[num-1]\r\n\r\n\r\n\"\"\"Write a function for nth fibonacci number.\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num > 0:\r\n        catalan_num = 0\r\n        for i in range(num):\r\n            catalan_num += catalan_number(i) * catalan_number(num -","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    n = num\r\n    c = 0\r\n    for i in range(n + 1):\r\n        c += catalan_number(i) * catalan_number(n - i)\r\n    return c\r\n\r\n\r\nprint(catalan_number(3))\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    elif num > 2:\r\n        return catalan_number(num - 1) * (4 * catalan_number(num - 2) + 2) \/\/ (num + 1)\r\n    else:\r\n        return 0\r\n\r\n\r","votes":null},{"text":"\r\n    num = int(num)\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(num):\r\n            result += catalan_number(i)*catalan_number(num-1-i)\r\n    return result\r\n\r\n\r\n# Testing\r\na = int(input())\r\nprint(catalan_number(a))\r\n\r\n\r\n# Test case 1\r\n# Input:\r\n# 2\r\n# Output:\r\n# 2\r\n\r\n# Test case 2\r\n# Input:\r\n# 1\r\n# Output:\r\n# 1\r\n\r\n# Test case 3\r\n# Input:\r\n# 3\r\n# Output:\r\n# 5\r\n\r\n# Test case 4\r\n# Input:\r\n# 5\r\n# Output:\r\n# 42\r\n\r\n# Test case 5\r\n# Input:\r\n# 6\r\n# Output:\r\n# 167\r\n\r\n# Test case 6\r\n# Input:\r\n# 7\r\n# Output:\r\n# 753\r\n\r\n# Test case 7\r\n# Input:\r\n# 8\r\n# Output:\r\n# 3025\r\n\r\n# Test case 8\r\n# Input:\r\n# 9\r\n# Output:\r\n# 15496\r\n\r\n# Test case 9\r\n# Input:\r\n# 10\r\n# Output:\r\n# 75075\r\n\r\n# Test case 10\r\n# Input:\r\n# 11\r\n# Output:\r\n# 775805\r\n\r\n# Test case 11\r\n# Input:\r\n# 12\r\n# Output:\r\n# 10330130\r\n\r\n# Test case 12\r\n# Input:\r\n# 13\r\n# Output:\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return 0\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    elif num > 1:\r\n        return catalan_number(num - 1) * 2 * catalan_number(num - 2) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    return catalan_number_recursive(num)\r\n\r\n\r","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    result = 0\r\n\r\n    # Iterate till n\r\n    for i in range(1, num + 1):\r\n        result += catalan_number(i - 1) * catalan_number(num - i)\r\n\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = 3\r\n    print(\"catalan number of\", num, \"is\", catalan_number(num))\r\n    num = 5\r\n    print(\"catalan number of\", num, \"is\", catalan_number(num))\r\n    num = 10\r\n    print(\"catalan number of\", num, \"is\", catalan_number(num))\r\n    num = 20\r\n    print(\"catalan number of\", num, \"is\", catalan_number(num))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n2)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num < 0:\r\n        return None\r\n    elif num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    elif num == 3:\r\n        return 5\r\n    else:\r\n        return catalan_number(num - 1) * 2 * catalan_number(num - 2) \/\/ (num + 1)\r\n\r","votes":null}],"time":{"count":25.0,"avg":5527270.5395200001,"std":4287020.9414371429,"cov":0.7756126484}}
{"id":586,"question":"def split_Arr(a,n,k):\r\n    \"\"\"Write a python function to split the array and add the first part to the end.\"\"\"","answers":[{"text":"\r\n    b = a[0:k]\r\n    c = a[k:n]\r\n    d = c + b\r\n    return d\r\n\r\n\r","votes":102722.652},{"text":"\r\n    if n<=0 :\r\n        return a\r\n    \r\n    #if n>0 and k>0\r\n    else:\r\n        #take the first k elements of the array and add them to the end\r\n        b = a[0:k]\r\n        a = a[k:n]\r\n        a = a + b\r\n        return a\r\n\r\n#a = [1,2,3,4,5,6,7,8,9,10]\r\n#n = len(a)\r\n#k = 3\r\n#print(split_Arr(a,n,k))\r\n\r\n\"\"\"Write a python function that takes an integer array and an integer n as input and \r\nreturns an integer array with the first n elements of the input array.\"\"\"\r\n\r","votes":121558.236},{"text":"\r\n    #input\r\n    #a = [1,2,3,4,5,6]\r\n    #n = len(a)\r\n    #k = 2\r\n    #output\r\n    #[3,4,5,6,1,2]\r\n    \r\n    if k == 0:\r\n        return []\r\n    \r\n    return a[k:] + a[:k]\r\n\r\n#split_Arr([1,2,3,4,5,6],6,4)\r\n\r\n\r","votes":141912.224},{"text":"\r\n    \r\n    # code here\r\n    b=[]\r\n    if n==0:\r\n        return a\r\n    # print(a)\r\n    # print(n)\r\n    for i in range(n):\r\n        b.append(a[i])\r\n    b.append(a[0])\r\n    # print(b)\r\n    return b\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [1,2,3,4,5,6]\r\n    n = 2\r\n    k = 3\r\n    print(split_Arr(a,n,k))\r\n\r\n\r\n\"\"\"\r\n\r\nInput:\r\na = [1,2,3,4,5,6]\r\nn = 2\r\nk = 3\r\n\r\nOutput:\r\n[1,2,3,1,4,5,6]\r\n\r\n\r\nInput:\r\na = [1,2,3,4,5,6]\r\nn = 0\r\nk = 3\r\n\r\nOutput:\r\n[1,2,3,4,5,6]\r\n\r\n\r\nInput:\r\na = [1,2,3,4,5,6]\r\nn = 7\r\nk = 3\r\n\r\nOutput:\r\n[1,2,3,1,4,5,6]\r\n\r\n\r\n\r\nInput:\r\na = [1,2,3,4,5,6,7,8,9]\r\nn = 8\r\nk = 3\r\n\r\nOutput:\r\n[1,2,3,1,4,5,6,7,8,9]\r\n\r\n\r\nInput:\r\na = [1,2,3,4,5,6,7,8,9]\r\nn = 4\r\nk = 3\r\n\r\nOutput:\r\n[1,2,3,4,5,6,7,8,9]\r","votes":null},{"text":"\r\n    \r\n    return a[-n:]+a[:-n]\r\n\r\n\r","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r","votes":null},{"text":"\r\n    a1 = []\r\n    a2 = []\r\n    for i in range(n):\r\n        if i < k:\r\n            a1.append(a[i])\r\n        else:\r\n            a2.append(a[i])\r\n    a = a1 + a2\r\n    return a\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the number of elements : \"))\r\n    a = []\r\n    for i in range(n):\r\n        element = int(input())\r\n        a.append(element)\r\n    print(\"The array is : \",a)\r\n    k = int(input(\"Enter the value of k : \"))\r\n    print(\"The array after splitting the array is : \",split_Arr(a,n,k))\r\n\r\n'''\r\n\r\nTime Complexity : O(n)\r\nSpace Complexity : O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nEnter the number of elements : 7\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\nThe array is :  [1, 2, 3, 4, 5, 6, 7]\r\nEnter the value of k :  3\r\nThe array after splitting the array is :  [4, 5, 6, 7, 1, 2, 3]\r\n\r\nSAMPLE 2\r\n\r\nEnter the number of elements : 7\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\nThe array is :  [1, 2, 3, 4, 5, 6, 7]\r\nEnter the value of k :  7\r\nThe array after splitting the array is :  [1, 2, 3, 4, 5, 6, 7]\r\n\r\n'''\r\n\r\n\r\n'''\r\n\r\nMethod 2\r\n\r","votes":null},{"text":"\r\n    return a[n-k:] + a[:n-k]\r\n\r\nif __name__ == '__main__':\r\n    a = [3, 1, 5, 4, 2, 6, 7, 0, 9]\r\n    n = len(a)\r\n    k = 4\r\n    print(split_Arr(a,n,k))\r\n\r\n\r\n#Code 2\r\n\r","votes":null},{"text":"\r\n    \r\n    if n < 1:\r\n        return a\r\n    \r\n    b = [a[:n]]\r\n    b.extend(a[n:])\r\n    return b\r\n\r","votes":null},{"text":"\r\n    return [a[:k]]+[a[k:]]\r\n\r\nprint(split_Arr([1,2,3,4,5,6,7,8],4,4))\r\n\r\n\r\n# Given a string, return the character after every letter \"r\".\r\n#\r\n# Examples\r\n# \"Hello World\" --> \"W\" \"o\" \"r\" \"d\"\r\n# \"CodeWars\" --> \"W\" \"a\" \"s\"\r\n# \"Ninja\" --> \"n\" \"a\"\r\n#\r\n# Notes\r\n# The character \"r\" will always be in the string.\r\n\r","votes":null},{"text":"\r\n    b = a[0:n-k]\r\n    c = a[n-k:n]\r\n    d = b + c\r\n    return d\r\n\r\n\r\nprint(split_Arr([1, 2, 3, 4, 5, 6], 6, 3))\r\n\r\n\r\n# 3. Write a Python function to count the number of 7 in an array. \r","votes":null},{"text":"\r\n    return a[:k] + a[k+1:]\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    first_part = a[0:n-k]\r\n    second_part = a[n-k:n]\r\n    result = first_part + second_part\r\n    return result\r\n\r\n\r\n\r\n\"\"\"Test Code\"\"\"\r\nprint(split_Arr([1, 2, 3, 4, 5], 5, 2))\r\nprint(split_Arr([1, 2, 3, 4, 5], 5, 1))\r\nprint(split_Arr([1, 2, 3, 4, 5], 5, 0))\r\nprint(split_Arr([1, 2, 3, 4, 5], 5, 4))\r\nprint(split_Arr([1, 2, 3, 4, 5], 5, 5))\r\nprint(split_Arr([1, 2, 3, 4, 5], 0, 0))\r\nprint(split_Arr([1, 2, 3, 4, 5], -1, 1))\r\nprint(split_Arr([1, 2, 3, 4, 5], 5, -1))\r\nprint(split_Arr([1, 2, 3, 4, 5], 10, 1))\r\nprint(split_Arr([1, 2, 3, 4, 5], 0, 10))\r\nprint(split_Arr([], 0, 10))\r\nprint(split_Arr([], 10, 10))\r\nprint(split_Arr([1, 2, 3], 3, 0))\r\nprint(split_Arr([1, 2, 3], 3, 1))\r\nprint(split_Arr([1, 2, 3], 3, 2))\r\nprint(split_Arr([1, 2, 3], 3, 3))\r\nprint(split_Arr([","votes":null},{"text":"\r\n    \r\n    # splitting the array\r\n    a = a[n:]+a[:n]\r\n    \r\n    # adding the first part of the array to the end\r\n    a = a[n:]+a[:n]\r\n    \r\n    return a\r\n\r\n# Sample Input\r\na = [1, 2, 3, 4, 5]\r\nn = 2\r\nk = 4\r\n\r\n# Sample Output\r\nprint(split_Arr(a,n,k))\r\n# [3, 4, 5, 1, 2]\r\n\r\n# Sample Input\r\na = [1, 2, 3, 4, 5]\r\nn = 0\r\nk = 4\r\n\r\n# Sample Output\r\nprint(split_Arr(a,n,k))\r\n# [4, 5, 1, 2, 3]\r\n\r\n# Sample Input\r\na = [1, 2, 3, 4, 5]\r\nn = 3\r\nk = 4\r\n\r\n# Sample Output\r\nprint(split_Arr(a,n,k))\r\n# [2, 3, 4, 5, 1]\r\n\r\n# Sample Input\r\na = [1, 2, 3, 4, 5]\r\nn = 4\r\nk = 4\r\n\r\n# Sample Output\r\nprint(split_Arr(a,n,k))\r\n# [1, 2, 3, 4, 5]\r\n\r\n# Sample Input\r\na = [1, 2, 3, 4, 5]\r\nn = 3\r\nk = 5\r\n\r\n# Sample Output\r\nprint(split_Arr(a,n,k))\r\n# [5, 1, 2, 3, 4]\r\n\r\n# Sample Input\r\na = [1, 2, 3, 4, 5]\r\nn ","votes":null},{"text":"\r\n    first_part = a[:n\/\/2]\r\n    second_part = a[n\/\/2:]\r\n    return first_part+second_part\r\n\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9],5,1))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Create empty array\r\n    b = []\r\n\r\n    # Add first n values from a to the end of b\r\n    b.extend(a[0:n])\r\n\r\n    # Add k values from b to the end of a\r\n    a.extend(b[0:k])\r\n\r\n    # Return the new array a\r\n    return a\r\n\r\n# Sample Array\r\na = [1, 2, 3, 4, 5, 6]\r\n\r\n# Split the array at 3 and add first 3 values to the end\r\nsplit_Arr(a,3,3)\r\n\r\n# Print the new array\r\nprint(a)\r\n\r\n# Output\r\n# [1, 2, 3, 4, 5, 6, 1, 2, 3]\r\n\r\n# The a array is split at 3, the first 3 values are added to the end\r\n# and the next 3 values are added to the end\r\n\r\n# NOTE: The values that are added to the end","votes":null},{"text":"\r\n    \r\n    if n==0:\r\n        return a\r\n    \r\n    if k==n:\r\n        return a[0:k]\r\n    \r\n    else:\r\n        if k==0:\r\n            return a[n-1:n]\r\n        \r\n        else:\r\n            return a[k:n]\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    k = int(input())\r\n    print(*split_Arr(arr, n, k))\r\n\r\n#Input\r\n# 4\r\n# 1 2 3 4\r\n# 2\r\n\r\n#Output\r\n# 3 4 1 2\r\n\r\n#Input\r\n# 6\r\n# 1 2 3 4 5 6\r\n# 0\r\n\r\n#Output\r\n# 1 2 3 4 5 6\r\n\r\n#Input\r\n# 7\r\n# 1 2 3 4 5 6 7\r\n# 5\r\n\r\n#Output\r\n# 6 7 1 2 3 4\r\n\r\n#Input\r\n# 8\r\n# 1 2 3 4 5 6 7 8\r\n# 4\r\n\r\n#Output\r\n# 5 6 7 8 1 2 3\r\n\r\n#Input\r\n# 8\r\n# 1 2 3 4 5 6 7 8\r\n# 8\r\n\r\n#Output\r\n# 1 2 3 4 5 6 7\r\n\r\n#Input\r\n# 7\r\n# 1 2 3 4 5 6 7\r\n# 8\r\n\r\n#","votes":null},{"text":"\r\n    a_new = []\r\n    for i in range(n-k, n):\r\n        a_new.append(a[i])\r\n    for i in range(n-k):\r\n        a_new.append(a[i])\r\n    return a_new\r\n\r\nif __name__ == '__main__':\r\n    a = [1,2,3,4,5,6]\r\n    n = len(a)\r\n    k = 2\r\n    print(split_Arr(a,n,k))\r\n    \r\n\"\"\"\r\nInput:\r\na = [1,2,3,4,5,6]\r\nn = 6\r\nk = 2\r\nOutput:\r\n[3,4,5,6,1,2]\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(N)\r\nSpace Complexity: O(N)\r\n\"\"\"\r\n\r\n\r\n\r\n\"\"\"\r\nThe first step is to write a function prototype:\r","votes":null},{"text":"\r\n    return a[:n] + a[n:][:k]\r\n\r\na = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\nn = 3\r\nk = 5\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\n# Solution 2:\r\n\r","votes":null},{"text":"\r\n    a=a.split()\r\n    a=a[n:]+a[:n]\r\n    print(\" \".join(a))\r\n    \r\nif __name__ == '__main__':\r\n    a = input(\"Enter your array: \")\r\n    n = int(input(\"Enter the value of n: \"))\r\n    k = int(input(\"Enter the value of k: \"))\r\n    split_Arr(a,n,k)\r\n    \r\n'''Output:\r\nEnter your array: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\r\nEnter the value of n: 5\r\nEnter the value of k: 10\r\n11 12 13 14 15 1 2 3 4 5 6 7 8 9 10\r\n'''\r\n\r\n#--------------------------------------------------------------------------------------#\r\n\r","votes":null},{"text":"\r\n    first = a[:n]\r\n    second = a[n:]\r\n    third = first + second\r\n    return third\r\nprint(split_Arr([1,2,3,4,5,6],2,6))\r\n#output:[1,2,3,4,5,6,1,2]\r\n\r\n\r","votes":null},{"text":"\r\n    b = a.copy()\r\n    c = []\r\n    for i in range(n-k):\r\n        c.append(b[i])\r\n    for i in range(n-k,n):\r\n        b[i] = c[i-n+k]\r\n    return b\r\n\r\nprint(split_Arr([1,2,3,4,5,6],6,3))\r\n\r\n\"\"\"\r\n\r\nExpected output : \r\n[4, 5, 6, 1, 2, 3]\r\n\r\n\"\"\"\r\n\r\n# 1.2\r\n\r","votes":null},{"text":"\r\n    a1= a[:n]\r\n    a2= a[n:k]\r\n    a3 = a[k:]\r\n    return a1 + a2 + a3\r\n\r\n\r\n# Driver Code\r\na = [1, 2, 3, 4, 5, 6, 7]\r\nn = 3\r\nk = 5\r\nprint(split_Arr(a, n, k))\r\n\r\n# output\r\n# [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]\r\n\r\n\r\n# Alternative Solutions\r","votes":null},{"text":"\r\n    a = a[n:]\r\n    return a + a[:n]\r\n\r\nprint(split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 5))\r\nprint(split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 3))\r\nprint(split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 5))\r\nprint(split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 10))\r\nprint(split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 1))\r\n\r\n\r\n# 30. Write a python program to find the sum of all the elements of a list.\r","votes":null},{"text":"\r\n    \r\n    #splitting the list into two parts\r\n    l = a[:n-k]\r\n    r = a[n-k:]\r\n    \r\n    #adding the first part to the end\r\n    l.extend(r)\r\n    \r\n    return l\r\n\r\n#input\r\na = list(map(int,input(\"Enter the list: \").split()))\r\nn = int(input(\"Enter the size of the list: \"))\r\nk = int(input(\"Enter the number of elements to be added at the end: \"))\r\n\r\n#calling the function\r\nprint(split_Arr(a,n,k))\r\n\r\n\"\"\"\r\nStandard Input and Output\r\n\r\nEnter the list: 1 2 3 4 5 6 7 8 9\r\nEnter the size of the list: 9\r\nEnter the number of elements to be added at the end: 4\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\r\n\r\nEnter the list: 1 2 3 4 5 6 7 8\r\nEnter the size of the list: 8\r\nEnter the number of elements to be added at the end: 3\r\n[1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3]\r\n\r\nEnter the list: 1 2 3 4 5 6 7 8 9\r\nEnter the size of the list: 9\r\nEnter the number of elements to be added at the end: 10\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nTime complexity: O(n) where n is the size of the list\r\nSpace complexit","votes":null},{"text":"\r\n    a = a[:n]\r\n    return a + a[:k]\r\n\r\nprint(split_Arr([1,2,3,4,5,6,7],7,5))\r\n\r\n\r","votes":null},{"text":"\r\n    new_arr = []\r\n    while(len(a)>=n):\r\n        new_arr.extend(a[:n])\r\n        a = a[n:]\r\n    new_arr.extend(a)\r\n    return new_arr\r\n\r\nif __name__ == '__main__':\r\n    a = [1,2,3,4,5,6,7,8,9,10]\r\n    n = 3\r\n    k = 2\r\n    print(\"The Array after spliting is:\", split_Arr(a,n,k))\r\n\r\n\r\n\"\"\"\r\nSample Input:\r\na = [1,2,3,4,5,6,7,8,9,10]\r\nn = 3\r\nk = 2\r\nSample Output:\r\n[1,2,3,4,5,6,7,8,9,10,1,2]\r\nExplanation:\r\nSplitting the array and adding the first part to the end of the array.\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\"\"\"\r\n\r\n\"\"\"\r\nTest Case 1:\r\nInput:\r\na = [1,2,3,4,5,6,7,8,9,10]\r\nn = 3\r\nk = 2\r\nOutput: [1,2,3,4,5,6,7,8,9,10,1,2]\r\n\r\nTest Case 2:\r\nInput:\r\na = [1,2,3,4,5]\r\nn = 4\r\nk = 2\r\nOutput: [1,2,3,4,5,1,2,3]\r\n\r\nTest Case 3:\r\nInput:\r\na = [1,2,3,4,5,6,7,8,9,10]\r\nn = 5\r\nk = 3\r\nOutput: [1,2","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r\nprint(split_Arr([1,2,3,4,5,6],3,2))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # create a list with the first n elements of the input array\r\n    # and the remaining elements to the second list\r\n    # and return the two lists\r\n    b = a[n:]\r\n    c = a[:n]\r\n    return c, b\r\n\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nn = int(input(\"Enter the position: \"))\r\nk = int(input(\"Enter the position: \"))\r\n\r\n\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Split the array\r\n    a = a[:n\/\/2] + a[n\/\/2:]\r\n\r\n    # Add the first part to the end\r\n    a = a + a[:n\/\/2]\r\n\r\n    return a\r\n\r\nif __name__ == '__main__':\r\n    a = [1,2,3,4,5,6,7,8,9,10]\r\n    n = len(a)\r\n\r\n    # Testing the split_Arr function\r\n    a = split_Arr(a,n,1)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,2)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,3)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,4)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,5)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,6)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,7)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,8)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,9)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,10)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,11)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,12)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,13)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,14)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,15)\r\n    print(a)\r\n\r\n    a = split_Arr(a,n,16)\r\n    print","votes":null},{"text":"\r\n    if n == 1:\r\n        return a\r\n    else:\r\n        return a + split_Arr(a[:-n],n-1,k)\r\n\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],4,1))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if n==0:\r\n        return a\r\n    else:\r\n        return a+split_Arr(a,n-1,k)\r\n\r\na = [1,2,3,4,5,6,7,8,9]\r\n\r\n# Calling the function\r\nprint(split_Arr(a,3,5))\r\n\r\n\r\n\"\"\"\r\nOutput:\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    # return a[-n:] + a[:-n]\r\n    return a[-n:] + a[n:k]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    a=a[n:]\r\n    a=a+a[:n]\r\n    \r\n    return a\r\n\r\n\r\na=[1,2,3,4,5,6,7,8,9,10]\r\nn=5\r\nk=","votes":null},{"text":"\r\n    \r\n    # your code here\r\n    if n>len(a):\r\n        return \"invalid input\"\r\n    b=a[n:]\r\n    a=a[:n]\r\n    a=a+b\r\n    return a\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    q = int(input())\r\n\r\n    for q_itr in range(q):\r\n        n = int(input())\r\n\r\n        a = list(map(int, input().rstrip().split()))\r\n\r\n        k = int(input())\r\n\r\n        result = split_Arr(a,n,k)\r\n\r\n        fptr.write(' '.join(map(str, result)))\r\n        fptr.write('\\n')\r\n\r\n    fptr.close()\r\n\r\n# Sample Input\r\n# 1\r\n# 5\r\n# 23 8 12 4 6\r\n# 2\r\n\r\n# Sample Output\r\n# 8 12 4 6 23\r\n\r\n\r\n# Sample Input\r\n# 2\r\n# 2\r\n# 8 6\r\n# 1\r\n# 23\r\n# 2\r\n# 6 4\r\n# 2\r\n# 23 8\r\n# 2\r\n# 12 4\r\n# 3\r\n# 23 8 12\r\n\r\n# Sample Output\r\n# 6 8\r\n# 23 8\r\n# 12 4\r\n# 4 12 8 23\r\n\r\n\r\n# Sample Input\r\n# 2\r\n# 1\r\n# 23\r\n# 2\r\n# 1 2\r\n# 2\r\n# 2 1\r\n\r\n# Sample Output\r\n# 23\r\n# 1 2\r","votes":null},{"text":"\r\n    a = a.split()\r\n    a = a[n:]+a[:n]\r\n    #print(a)\r\n    return ' '.join(a)\r\n\r\nprint(split_Arr('1 2 3 4 5 6 7',3,4))\r\n\r","votes":null},{"text":"\r\n\r\n    # Input\r\n    # a = [1, 2, 3, 4, 5, 6]\r\n    # n = 3\r\n    # k = 2\r\n\r\n    # Output\r\n    # [1, 2, 4, 5, 6, 3]\r\n\r\n    # Code\r\n    # 1) First we'll store the last k elements in a new array\r\n    # 2) Then we'll iterate over the first half of the array and add the elements to the end of the array\r\n    # 3) Finally we'll add the stored elements to the end of the array\r\n\r\n    if k>n:\r\n        return \"Invalid Input\"\r\n    else:\r\n        new_a = []\r\n        for i in range(n-k,n):\r\n            new_a.append(a[i])\r\n        for i in range(n-k):\r\n            a[i+k] = a[i]\r\n        for i in range(k):\r\n            a[i] = new_a[i]\r\n    return a\r\n\r\nif __name__ == '__main__':\r\n    a = [1, 2, 3, 4, 5, 6]\r\n    n = 3\r\n    k = 2\r\n    print(split_Arr(a,n,k))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\nAlgorithm\r\n1) First we'll store the last k elements in a new array\r\n2) Then we'll iterate over the first half of the array and add the elements to the end of the array\r\n3) Finally we'll add the stored elements to the end of the array\r\n\"\"\"\r\n\r\n# Sample Input\/Output\r\n\r\n# Example 1\r\n# \r\n# Input\r\n# a = [1, 2, 3, 4, 5, 6]\r\n# n ","votes":null},{"text":"\r\n    a=a[n:]+a[:n]\r\n    return a\r\n\r\na=[1,2,3,4,5,6,7,8,9,10]\r\nn=5\r\nk=4\r\nprint(split_Arr(a,n,k))\r\n\r","votes":null},{"text":"\r\n    split_arr=[]\r\n    for i in range(0,n-k+1):\r\n        temp=a[i:n-k+1+i]\r\n        split_arr.append(temp)\r\n    return split_arr\r\n\r\n#a=[1,2,3,4,5,6,7,8]\r\n#n=8\r\n#k=3\r\n#print(split_Arr(a,n,k))\r\n\r\n\"\"\"Question 3: Write a python function to remove duplicates from an array\"\"\"\r","votes":null},{"text":"\r\n    a=a+a[:n]\r\n    return a[n:n+k]\r\n\r\nprint(split_Arr([2, 3, 5, 7, 8, 9, 10], 3, 7))\r\n\r\n#Method 2\r","votes":null},{"text":"\r\n    a = a[0:k] + a[k:n]\r\n    return a\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nn = len(a)\r\nk = int(input(\"Enter the value of k: \"))\r\nprint(\"Original Array: \",a)\r\nprint(\"New Array: \",split_Arr(a,n,k))\r\n\r\n'''\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSample Input\/Output:\r\n\r\nEnter the value of k: 7\r\nOriginal Array:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nNew Array:  [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n'''\r\n\r\n\r\n# Method 2: Using Slicing and Extending\r\n\r","votes":null},{"text":"\r\n    print(a[0:n\/\/2])\r\n    print(a[n\/\/2:n])\r\n    a[n\/\/2:n] = a[0:n\/\/2]\r\n    print(a)\r\n\r\n\r\narr = [1,2,3,4,5,6]\r\nn = len(arr)\r\nk = 2\r\n\r\nsplit_Arr(arr,n,k)\r\n\r\n\r\n# Output:\r\n# [1, 2, 3]\r\n# [4, 5, 6]\r\n# [4, 5, 6, 1, 2, 3]\r\n\r\n\r\n# Test Case 2\r\n\r\narr = [1,2,3,4,5,6,7]\r\nn = len(arr)\r\nk = 3\r\n\r\nsplit_Arr(arr,n,k)\r\n\r\n\r\n# Output:\r\n# [1, 2, 3]\r\n# [4, 5, 6, 7]\r\n# [4, 5, 6, 7, 1, 2, 3]\r\n\r\n\r\n# Test Case 3\r\n\r\narr = [1,2,3,4,5,6,7,8]\r\nn = len(arr)\r\nk = 4\r\n\r\nsplit_Arr(arr,n,k)\r\n\r\n\r\n# Output:\r\n# [1, 2, 3, 4]\r\n# [5, 6, 7, 8]\r\n# [5, 6, 7, 8, 1, 2, 3, 4]\r\n\r\n# Test Case 4\r\n\r\narr = [1,2,3,4,5,6,7,8,9]\r\nn = len(arr)\r\nk = 5\r\n\r\nsplit_Arr(arr,n,k)\r\n\r\n\r\n# Output:\r\n# [1, 2, 3","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r\nprint(split_Arr([1,2,3,4,5,6],3,1))\r\n\r\n# 3. Write a Python function which takes a list and returns the first element of the list. If the list is empty, return -1.\r","votes":null},{"text":"\r\n    b = a[:n]\r\n    c = a[n:]\r\n    d = b + c\r\n    return d\r\n\r\n\r\n\r\n\r\na = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\nn = 7\r\nk = 2\r\n\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\n\r\n\r\n# 15. Write a python function that returns the sum of the numbers in the array\r","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r\n\r\n# Testing\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = int(input(\"Enter the number of elements to be added to the end: \"))\r\nprint(split_Arr(a, n, 0))\r\n\r\n\r\n# Using inbuilt function\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = int(input(\"Enter the number of elements to be added to the end: \"))\r\nprint(a[n:]+a[0:n])\r\n\r\n\r\n# Using slicing\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = int(input(\"Enter the number of elements to be added to the end: \"))\r\nprint(a[-n:]+a[:n])\r\n\r\n\r\n# Using extended slicing\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = int(input(\"Enter the number of elements to be added to the end: \"))\r\nprint(a[:n]+a[n::])\r\n\r\n\r\n# Using Deque\r\nfrom collections import deque\r","votes":null},{"text":"\r\n    first=a[0:n-k]\r\n    second=a[n-k:n]\r\n    return first+second\r\n\r\nn = int(input(\"Enter the size of the array: \"))\r\narr = list(map(int,input(\"Enter the elements of the array: \").strip().split()))[:n]\r\nk = int(input(\"Enter the number of elements to be shifted: \"))\r\n\r\narr_final = split_Arr(arr,n,k)\r\nprint(arr_final)\r\n\r\n\r\n'''\r\nOUTPUT","votes":null},{"text":"\r\n    #Return the array\r\n    return a[n:]+a[:n]\r\n\r\n\r\n#Driver code\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1,2,3,4,5,6,7,8,9,10]\r\n    n = 4\r\n    k = 3\r\n    print(split_Arr(arr,n,k))\r\n\r\n    #Output: [5,6,7,8,9,10,1,2,3,4]\r\n\r\n\r\n    #Another Example\r\n\r\n    arr = [1,2,3,4]\r\n    n = 2\r\n    k = 1\r\n    print(split_Arr(arr,n,k))\r\n\r\n    #Output: [3,4,1,2]\r\n\r\n\r\n    #Another Example\r\n\r\n    arr = [1,2,3,4,5,6,7,8,9,10]\r\n    n = 1\r\n    k = 4\r\n    print(split_Arr(arr,n,k))\r\n\r\n    #Output: [5,6,7,8,9,10,1,2,3,4]\r\n\r\n\r\n    #Another Example\r\n\r\n    arr = [1,2,3,4]\r\n    n = 2\r\n    k = 1\r\n    print(split_Arr(arr,n,k))\r\n\r\n    #Output: [3,4,1,2]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # creating new list\r\n    new_list = []\r\n    \r\n    # traversing the list\r\n    for i in range(n):\r\n        \r\n        # adding the elements to the end of the list\r\n        new_list.append(a[i])\r\n        \r\n    # returning the new list\r\n    return new_list\r\n\r\n# main function\r\nif __name__ == \"__main__\":\r\n    \r\n    # storing the input into a list\r\n    a = list(map(int,input().split()))\r\n    \r\n    # taking the number of elements in the list\r\n    n = int(input())\r\n    \r\n    # taking the size of the new list\r\n    k = int(input())\r\n    \r\n    # function call\r\n    print(split_Arr(a,n,k))\r\n    \r\n\"\"\"\r\nTime Complexity: O(N), where 'N' is the size of the input list.\r\nSpace Complexity: O(N), where 'N' is the size of the input list.\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nInput:\r\nEnter the elements of the list: 1 5 6 2 3 4 5\r\nEnter the size of the list: 7\r\nEnter the size of the new list: 4\r\n\r\nOutput:\r\n[1, 5, 6, 2, 3, 4, 5, 1, 5, 6, 2, 3, 4, 5]\r\n\r\nExplanation:\r\nThe first part of the array is [1, 5, 6, 2, 3, 4, 5],\r\nwhich we have added to the end of the array to get\r\n[1, 5, 6, 2, 3, 4, 5, 1, 5, 6, 2, 3, 4, 5]\r\n\r\nSAMPLE I","votes":null},{"text":"\r\n    if n>0:\r\n        a.append(a.pop(0))\r\n        split_Arr(a,n-1,k)\r\n    if n==0:\r\n        print(a)\r\n\r\n\r","votes":null},{"text":"\r\n    if a == []:\r\n        return []\r\n    if n == 0:\r\n        return []\r\n    if n == 1:\r\n        return [a[0]]\r\n    if n == 2:\r\n        if k == 0:\r\n            return [a[1],a[0]]\r\n        else:\r\n            return [a[0],a[1]]\r\n    if n == 3:\r\n        if k == 0:\r\n            return [a[2],a[0],a[1]]\r\n        if k == 1:\r\n            return [a[1],a[2],a[0]]\r\n        else:\r\n            return [a[0],a[1],a[2]]\r\n    else:\r\n        if k == 0:\r\n            return split_Arr(a[1:],n-1,k) + [a[0]]\r\n        else:\r\n            return split_Arr(a[1:],n-1,k-1) + [a[0]]\r\n\r\n\r","votes":null},{"text":"\r\n    b=a[:n]\r\n    c=a[n:]\r\n    d=b+c\r\n    return d\r\n\r\n\r\n\r\na=[1,2,3,4,5,6,7,8,9,10]\r\nn=3\r\nk=3\r\n\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\nimport numpy as np\r","votes":null},{"text":"\r\n    a1=[]\r\n    a1=a[0:k]\r\n    a2=[]\r\n    a2=a[k:n]\r\n    a=a2+a1\r\n    return a\r\n\r\n\r\nn=int(input(\"Enter the size of array: \"))\r\na=[]\r\nfor i in range(0,n):\r\n    a.append(int(input(\"Enter a number: \")))\r\nprint(\"Entered array is: \",a)\r\nk=int(input(\"Enter number of elements that should be added to the end: \"))\r\na=split_Arr(a,n,k)\r\nprint(\"Split array is: \",a)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, 2, 3, 4, 5, 6, 7]\r\n    n = 3\r\n    k = 2\r\n    print(split_Arr(a,n,k))\r\n\r\n\"\"\"\r\nTime Complexity: O(N)\r\nSpace Complexity: O(N)\r\n\r\nInput:\r\n\r\nOutput:\r\n\r\n[3, 4, 5, 6, 7, 1, 2]\r\n\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nInput:\r\n\r\nOutput:\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    l = len(a)\r\n    m = l\/\/n * k\r\n    if l % k == 0:\r\n        return a[m:] + a[:m]\r\n    else:\r\n        return a[m:] + a[:m+1]\r\n\r\na = [1, 2, 3, 4, 5, 6, 7]\r\nn = 3\r\nk = 2\r\n\r\nprint(split_Arr(a,n,k))\r\n\r\n# 2 3 4 5 6 7 1\r\n\r\n# Explanation:\r\n# Let's split the array in the form of chunks of size 3.\r\n# The first part is 1 2 3\r\n# The second part is 4 5 6\r\n# The third part is 7\r\n# Add the first part to the end of the array and you will get the required result.\r\n\r\n# Example 2:\r\n\r\n# Input:\r\n# a = [1, 2]\r\n# n = 2\r\n# k = 2\r\n# Output:\r\n# 2 1\r\n\r\n# Explanation:\r\n# Let's split the array in the form of chunks of size 2.\r\n# The first part is 1\r\n# The second part is 2\r\n# Add the first part to the end of the array and you will get the required result.\r\n\r\n# Your Task:\r\n# You don't need to read input or print anything. Your task is to complete the function splitArr() which takes the array, the size of chunk and the index of chunk as input parameters and returns the required array.\r\n\r\n# Expected Time Complexity: O(N)\r\n# Expected Auxiliary Space: O(1)\r\n\r\n# Constraints:\r\n# 1 \u2264 N \u2264 106\r\n# 1 \u2264 K \u2264 N\r\n\r","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r\n\r","votes":null},{"text":"\r\n    #Code goes here\r\n    l1=a[:n]\r\n    l2=a[n:]\r\n    l3=l1+l2\r\n    return(l3)\r\n\r\n\r\n#Input\r\na=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\r\nn=4\r\nk=2\r\n\r\n#Output\r\nprint(split_Arr(a, n,","votes":null},{"text":"\r\n    if k == 0:\r\n        return a[:n]\r\n    elif k == n:\r\n        return a[n:]\r\n    else:\r\n        return a[n:k] + a[:n]\r\n\r","votes":null},{"text":"\r\n    for i in range(n-k):\r\n        a[i], a[i+k] = a[i+k], a[i]\r\n    return a\r\n\r\n\r\na = [1,2,3,4,5,6,7,8,9,10]\r\nn = len(a)\r\nk = 5\r\na = split_Arr(a,n,k)\r\nprint(\"Split array is: \", a)\r\n\r\n#Time Complexity is O(n)\r\n\r\n#Sample Input and Output\r\n\r\n#Input:\r\n#Enter the number of elements: 10\r\n#Enter the elements: 1 2 3 4 5 6 7 8 9 10\r\n#Enter the value of k: 5\r\n#Output:\r\n#Split array is:  [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\r\n\r\n#Input:\r\n#Enter the number of elements: 10\r\n#Enter the elements: 1 2 3 4 5 6 7 8 9 10\r\n#Enter the value of k: 10\r\n#Output:\r\n#Split array is:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n#Input:\r\n#Enter the number of elements: 10\r\n#Enter the elements: 1 2 3 4 5 6 7 8 9 10\r\n#Enter the value of k: 15\r\n#Output:\r\n#Split array is:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n#Input:\r\n#Enter the number of elements: 10\r\n#Enter the elements: 1 2 3 4 5 6 7 ","votes":null},{"text":"\r\n\r\n    b = []\r\n    for i in range(k):\r\n        b.append(a[i])\r\n    return b + a[k:]\r\n\r\n\r\n#test\r\nprint(split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9], 9,","votes":null},{"text":"\r\n    for i in range(0,n,k):\r\n        a.append(a[i])\r\n    return a\r\n\r\n\r\na = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\nn = len(a)\r\nk = 3\r\nprint(split_Arr(a,n,k))\r\n\r\n#another way\r\n\r","votes":null},{"text":"\r\n    \r\n    # code goes here\r\n    b=a[:n-k]\r\n    c=a[n-k:]\r\n    d=b+c\r\n    return d\r\n\r\n# keep this function call here\r\n# to see how to enter arguments in","votes":null},{"text":"\r\n    a = a[:n]\r\n    b = a[n:]\r\n    c = b + a\r\n    return c\r\n    \r\n\r\n\r\n#split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 10, 1)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    x = n%k\r\n    if x==0:\r\n        return a\r\n    else:\r\n        for i in range(0,x):\r\n            a[-1] = a.pop(0)\r\n        return a\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8]\r\n    n = len(a)\r\n    k = 3\r\n    print(split_Arr(a,n,k))\r\n","votes":null},{"text":"\r\n    a = a[0:n]\r\n    a.extend(a[0:k])\r\n    return a\r\n\r\n\r\na = [1,2,3,4,5,6,7,8,9,10]\r\nk = 5\r\nn = 10\r\n\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\n#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n#Write a python function to remove the duplicates from the list.\r","votes":null},{"text":"\r\n    #create new array\r\n    arr2=[]\r\n    #if n is less than or equal to k, return the same array\r\n    if n<=k:\r\n        return a\r\n    #loop through the array and append the values\r\n    for i in range(0,n):\r\n        arr2.append(a[i])\r\n    #loop through the array and append the values\r\n    for i in range(n,n+k):\r\n        arr2.append(a[i])\r\n    #return the new array\r\n    return arr2\r\n\r\n\r\na=[1,2,3,4,5,6,7,8,9,10]\r\nn=len(a)\r\nk=5\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\n#Method 2\r\n\r\n\r","votes":null},{"text":"\r\n    return a[n:] + a[:n]\r\n\r","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    if n % 2 == 0:\r\n        b = a[int(n\/2):]\r\n        c = a[0:int(n\/2)]\r\n        print(c+b)\r\n    else:\r\n        b = a[int(n\/2)+1:]\r\n        c = a[0:int(n\/2)+1]\r\n        print(c+b)\r\n\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(a)\r\nk = 5\r\nsplit_Arr(a,n,k)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    arr=[]\r\n    for i in range(n):\r\n        arr.append(a[i])\r\n    for i in range(0,n,k):\r\n        for j in range(i,i+k):\r\n            arr.append(a[j])\r\n    return arr\r\n\r\n\r\na = [1, 2, 3, 4, 5, 6, 7","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Enter the array : \")\r\n    a = list(map(int,input().split()))\r\n    print(\"Enter the value of n : \")\r\n    n = int(input())\r\n    print(\"Enter the value of k : \")\r\n    k = int(input())\r\n    print(split_Arr(a,n,k))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    ","votes":null},{"text":"\r\n    #splitting the array\r\n    a1=a[:n]\r\n    a2=a[n:]\r\n    #concatenating the array\r\n    a3=a1+a2\r\n    #printing the new array\r\n    print(a3)\r\n\r\n#input\r\na=[1,2,3,4,5,6,7,8,9]\r\nn=5\r\n#function call\r\nsplit_Arr(a,n,k)\r\n\r\n#example\r\n#Input:\r\n#a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n#n = 5\r\n\r\n#Output:\r\n#[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n#Input:\r\n#a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n#n = 4\r\n\r\n#Output:\r\n#[1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n#Time Complexity: O(n)\r\n#Space Complexity: O(n)\r\n\r\n#Reference: https:\/\/www.geeksforgeeks.org\/split-array-into-two-parts-such-that-difference-of-sums-is-minimum\/\r\n\r\n#This problem was taken from geeksforgeeks\r\n\r\n#This problem was solved using the below logic\r\n\r\n#Let a1 and a2 be the first and second part of the array.\r\n\r\n#Let s1 be the sum of a1 and s2 be the sum of a2.\r\n\r\n#Then, the minimum","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r\n# Test case\r\nprint(split_Arr([1, 2, 3, 4, 5, 6], 3, 3))\r\n\r\n# Output : [4, 5, 6, 1, 2, 3]\r\n\r\n\r\n'''\r\n\r\nApproach 2 :\r\n\r","votes":null},{"text":"\r\n    \r\n    # split array\r\n    a = a[:n]\r\n    \r\n    # add first part to the end\r\n    a = a + a[:n]\r\n    \r\n    # return the array\r\n    return a\r\n\r\n\r","votes":null},{"text":"\r\n    # code here\r\n    #return a\r\n    return a[-n:] + a[:-n]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = 3\r\n    k = 2\r\n","votes":null},{"text":"\r\n    a1 = a[:n]\r\n    a2 = a[n:]\r\n    a3 = a1+a2\r\n    return a3\r\n\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = 5\r\nk = 3\r\n\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if n > len(a):\r\n        return \"Not possible\"\r\n    else:\r\n        first = a[:n]\r\n        second = a[n:]\r\n        return first + second\r\n\r","votes":null},{"text":"\r\n    new_a = []\r\n    for i in range(0,n-k):\r\n        new_a.append(a[i])\r\n    for i in range(n-k,n):\r\n        new_a.append(a[i])\r\n    return new_a\r\n\r","votes":null},{"text":"\r\n    #adding the first part to the end\r\n    a1 = a[:n]\r\n    a2 = a[n:]\r\n    a3 = a1+a2\r\n    #printing the array\r\n    print(a3)\r\n    #adding 1 to the first part\r\n    a4 = [i+1 for i in a3]\r\n    #printing the array\r\n    print(a4)\r\n\r\n#input\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = int(input(\"Enter the number of elements to be split: \"))\r\nk = int(input(\"Enter the number of elements to be added: \"))\r\n#function call\r\nsplit_Arr(a,n,k)\r\n\r\n#output\r\n#Enter the number of elements to be split: 3\r\n#Enter the number of elements to be added: 2\r\n#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n#[2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 1]\r\n\r\n#input\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = int(input(\"Enter the number of elements to be split: \"))\r\nk = int(input(\"Enter the number of elements to be added: \"))\r\n#function call\r\nsplit_Arr(a,n,k)\r\n\r\n#output\r\n#Enter the number of elements to be split: 4\r\n#Enter the number of elements to be added: 3\r\n#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n#[2, 3, 4, 5,","votes":null},{"text":"\r\n    a = list(a)\r\n    for i in range(n-k):\r\n        a.append(a.pop(0))\r\n    return a\r\na = input(\"Enter the elements separated by a space: \")\r\na = a.split(\" \")\r\nn = int(input(\"Enter the length of the array: \"))\r\nk = int(input(\"Enter the number of places to shift: \"))\r\nprint(split_Arr(a,n,k))\r\n\r","votes":null},{"text":"\r\n    a[n:]=a[:n]\r\n    return a\r\n\r\n# Input\r\na = [1,2,3,4,5,6,7,8]\r\nn = 3\r\nk = 4\r\n\r\n# Output: [1,2,3,1,2,3,4,5]\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  \r\n# # # # # # # # # # # ","votes":null},{"text":"\r\n    b = a[0:n\/\/k]\r\n    c = a[n\/\/k:n]\r\n    d = c + b\r\n    return d\r\n\r\n\r\nprint(split_Arr([1,2,3,4,5,6,7],7,2))\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9],9,3))\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9,10],10,4))\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9,10,11],11,5))\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9,10,11,12],12,6))\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13],13,7))\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14],14,8))\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],15,9))\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],16,10))\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],17,11))\r\nprint(split_Arr([1,2,3,4,5,6,","votes":null},{"text":"\r\n    if k==0:\r\n        return a\r\n    else:\r\n        return a[0:n\/\/k]+a[n\/\/k:]\r\n\r\n\r","votes":null},{"text":"\r\n    b = a[0:n-k+1]\r\n    c = a[n-k+1:n+1]\r\n    return c + b\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    l = len(a)\r\n    \r\n    if l <= n:\r\n        print(\"The array is already at the desired length\")\r\n        return a\r\n    \r\n    if l > n and l < (n+k):\r\n        print(\"The array cannot be split\")\r\n        return a\r\n    \r\n    if l > (n+k):\r\n        first_arr = a[:n]\r\n        second_arr = a[n:]\r\n        \r\n        return first_arr + second_arr\r\n\r\n\r\n# Test Cases\r\n\r\nprint(\"Testing with n = 5, k = 2\")\r\na = [1,2,3,4,5,6,7]\r\nn = 5\r\nk = 2\r\nprint(split_Arr(a,n,k))\r\nprint(\"Testing with n = 5, k = 2\")\r\na = [1,2,3,4,5,6,7]\r\nn = 5\r\nk = 2\r\nprint(split_Arr(a,n,k))\r\n\r\nprint(\"\\nTesting with n = 4, k = 2\")\r\na = [1,2,3,4,5,6,7]\r\nn = 4\r\nk = 2\r\nprint(split_Arr(a,n,k))\r\n\r\nprint(\"\\nTesting with n = 3, k = 2\")\r\na = [1,2,3,4,5,6,7]\r\nn = 3\r\nk = 2\r\nprint(split_Arr(a,n,k))\r\n\r\nprint(\"\\nTesting with n = 2, k = 2\")\r\na = [1,2,3,4,5,6,7]\r\nn = 2\r\nk = 2\r\nprint(split_Arr(a,n,k))\r\n\r\nprint(\"\\nTesting with n = 1, k = 2\")\r","votes":null},{"text":"\r\n\r\n    a1 = a[n-k:n]\r\n    a2 = a[0:n-k]\r\n    a3 = a1 + a2\r\n    return a3\r\n\r\na = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\r\n\r\nprint(split_Arr(a,25,10))\r\n\r","votes":null},{"text":"\r\n    return a[:n]+a[n:][:k]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    a1 = a[0:n-k]\r\n    print(a1)\r\n    a2 = a[n-k:n]\r\n    print(a2)\r\n    new = a1 + a2\r\n    print(new)\r\n\r\na = [6, 2, 3, 6, 10, 4, 9, 7, 6, 2, 7, ","votes":null},{"text":"\r\n    return a[0:n-k]+a[n-k:n]\r\n\r\n#input\r\na = [1, 2, 3, 4, 5]\r\nn = 5\r\nk = 3\r\n\r\n#output\r\nprint(split_Arr(a,n,k))\r\n\r\n#input\r\na = [1, 2, 3, 4, 5, 6]\r\nn = 6\r\nk = 3\r\n\r\n#output\r\nprint(split_Arr(a,n,k))\r\n\r\n#input\r\na = [1, 2, 3, 4, 5, 6, 7]\r\nn = 7\r\nk = 3\r\n\r\n#output\r\nprint(split_Arr(a,n,k))\r\n\r\n#input\r\na = [1, 2, 3, 4, 5, 6, 7, 8]\r\nn = 8\r\nk = 3\r\n\r\n#output\r\nprint(split_Arr(a,n,k))\r\n\r\n#input\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nn = 9\r\nk = 3\r\n\r\n#output\r\nprint(split_Arr(a,n,k))\r\n\r\n#input\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = 10\r\nk = 3\r\n\r\n#output\r\nprint(split_Arr(a,n,k))\r\n\r\n#input\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\nn = 11\r\nk = 3\r\n\r\n#output\r\nprint(spli","votes":null},{"text":"\r\n\r\n    if n == 0:\r\n        return a\r\n\r\n    else:\r\n        first_part = a[:n]\r\n        second_part = a[n:]\r\n        second_part.extend(first_part)\r\n        return second_part\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    first = a[:n]\r\n    second = a[n:]\r\n    a = first+second\r\n    return a\r\n\r\nif __name__ == '__main__':\r\n    a = [1,2,3,4,5,6,7,8,9,10]\r\n    n = 5\r\n    k = 10\r\n    print(split_Arr(a,n,k))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        a.append(a.pop(0))\r\n    return a\r\n\r\n\r\nprint(split_Arr([1,2,3,4,5,6], 3, 6))\r\n\r\n# 1st solution\r","votes":null},{"text":"\r\n    a1 = a[0:n - k]\r\n    a2 = a[n - k:n]\r\n    a3 = a[n - k:n] + a[0:n - k]\r\n    return a1,a2,a3\r\n\r\n\r\nprint(split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2))\r\n\r\n\r","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r\narr=[1,2,3,4,5]\r\nn=3\r\nprint(split_Arr(arr,n,k))\r\n\r\n#https:\/\/practice.geeksforgeeks.org\/problems\/split-and-add-array\/0\r\n#https:\/\/www.geeksforgeeks.org\/split-an-array-into-two-parts-of-equal-sum\/\r\n\r\n\r\n#split array in n parts\r","votes":null}],"time":{"count":3.0,"avg":122064.3706666667,"std":19599.6879467862,"cov":0.1605684594}}
{"id":588,"question":"def big_diff(nums):\r\n    \"\"\"Write a python function to find the difference between largest and smallest value in a given array.\"\"\"","answers":[{"text":"\r\n    nums.sort()\r\n    return nums[-1]-nums[0]\r\n\r\n\r","votes":54658.748},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":60634.108},{"text":"\r\n    return max(nums) - min(nums)\r\n\r","votes":67868.636},{"text":"\r\n\r\n    # First, sort the array\r\n    nums.sort()\r\n\r\n    # Then, get the difference between the two numbers\r\n    return nums[-1] - nums[0]\r\n\r\n\r\n# Tests\r\nassert big_diff([3, 2, 4, 5, 1]) == 4\r\nassert big_diff","votes":68991.32},{"text":"\r\n    l = []\r\n    for i in nums:\r\n        l.append(i)\r\n    ans = max(l) - min(l)\r\n    return ans\r\n\r\n\r","votes":73906.92},{"text":"\r\n\r\n    # code goes here\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":75933.316},{"text":"\r\n\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":76145.42},{"text":"\r\n    \r\n    # return max(nums) - min(nums)\r\n    return max(nums) - min(nums)\r\n\r","votes":76435.26},{"text":"\r\n    if len(nums) > 0:\r\n        return max(nums) - min(nums)\r\n    else:\r\n        return 0\r\n\r\n\r","votes":77043.356},{"text":"\r\n    nums.sort()\r\n    big_diff = nums[-1] - nums[0]\r\n    return big_diff\r\n\r\n\r\nnums = [1, 2, 3, 4, 5]\r\nprint(big_diff(nums))\r\n","votes":77681.612},{"text":"\r\n    sorted_nums = sorted(nums)\r\n    return sorted_nums[-1] - sorted_nums[0]\r\n\r\n\r","votes":78048.804},{"text":"\r\n    nums.sort()\r\n    return nums[-1] - nums[0]","votes":78353.196},{"text":"\r\n\r\n    # write your solution here\r\n    # return the difference between the biggest and smallest number\r\n\r\n    return max(nums) - min(nums)\r\n\r\n\r\n#","votes":78696.704},{"text":"\r\n    \r\n    if len(nums) >= 2:\r\n        return max(nums) - min(nums)\r\n    else:\r\n        return 'Array must contain at least two values'\r\n    \r\n#test\r\nprint(big_diff([10, 3, 5, 6]))\r\n\r\n#output\r\n#7\r\n\r\n#Task 4\r\n\r","votes":78875.368},{"text":"\r\n    max_num = nums[0]\r\n    min_num = nums[0]\r\n\r\n    for n in nums:\r\n        if n > max_num:\r\n            max_num = n\r\n        if n < min_num:\r\n            min_num = n\r\n\r\n    return max_num - min_num\r\n\r\n\r","votes":81359.3},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\n# Tests\r","votes":82379.204},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n#Tests\r","votes":84881.408},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nprint(big_diff([1, 2, 3, 4, 5]))\r\nprint(big_diff([5, 6, 7, 8, 9, 10]))\r\nprint(big_diff([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\r\n\r\n### 08. Write a python function to find the difference between largest and smallest value in a given array.\r\n\r\n### Solution\r\n\r","votes":87770.732},{"text":"\r\n    #return max(nums) - min(nums)\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":87975.18},{"text":"\r\n    # return max(nums) - min(nums)\r\n    return sorted(nums)[-1] - sorted(nums)[0]\r\n\r\n\r","votes":88270.828},{"text":"\r\n    # code goes here\r\n    return max(nums) - min(nums)\r\n\r\n\r\n# Sample Test:\r\n# Input: [1, 45, 50, 5, 2, 100, 500, 55, 10, 5000]\r\n# Output: 4855\r\n\r\n# Sample Test:\r\n# Input: [-1, 45, 50, 5, 2, 100, 500, 55, 10, 5000]\r\n# Output: 5055\r\n\r\n# Sample Test:\r\n# Input: [1, 45, 50, 5, 2, 100, 500, 55, 10, 5000, -10000, -100000]\r\n# Output: 5055\r\n\r\n# Sample Test:\r\n# Input: [-10000, -100000]\r\n# Output: 100000\r\n\r\n# Sample Test:\r\n# Input: [1]\r\n# Output: 0\r\n\r\n# Sample Test:\r\n# Input: [0]\r\n# Output: 0\r\n\r\n# Sample Test:\r\n# Input: []\r\n# Output: 0\r\n\r\n# Sample Test:\r\n# Input: [-1, 0, 1]\r\n# Output: 2\r\n\r\n# Sample Test:\r\n# Input: [-10000, -100000, 10000, 100000]\r\n# Output: 200000\r\n\r\n# Sample Test:\r\n# Input: [-10000, -100000, 10000, 100000, 0]\r\n# Output: 200000","votes":89637.388},{"text":"\r\n\r\n    max1 = nums[0]\r\n    min1 = nums[0]\r\n    for i in range(1, len(nums)):\r\n        if nums[i] > max1:\r\n            max1 = nums[i]\r\n        if nums[i] < min1:\r\n            min1 = nums[i]\r\n\r\n    diff = max1 - min1\r\n    return diff\r\n\r\n\r","votes":91486.62},{"text":"\r\n    nums = sorted(nums)\r\n    return nums[-1] - nums[0]\r\n\r","votes":92652.096},{"text":"\r\n    \r\n    return max(nums)-min(nums)\r\n\r\nif __name__ == '__main__':\r\n    print(\"Enter the array elements: \")\r\n    n = int(input())\r\n    nums = list(map(int, input().split()))\r\n    \r\n    diff = big_diff(nums)\r\n    print(\"The difference between largest and smallest value in a given array is \", diff)\r\n\r\n# Enter the array elements:\r\n# 5\r\n# 2 4 7 8 10\r\n# The difference between largest and smallest value in a given array is  8\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nEnter the array elements:\r\n5\r\n2 4 7 8 10\r\nThe difference between largest and smallest value in a given array is  8\r\n\"\"\"    \r\n\r\n# Method 2\r\n\r","votes":96417.048},{"text":"\r\n    nums = [int(i) for i in nums]\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":97676.88},{"text":"\r\n    return(max(nums)-min(nums))\r\n\r\n\r","votes":98058.984},{"text":"\r\n    \r\n    # This is a bit of a hacky solution, but it works\r\n    \r\n    # Sort the array, and then subtract the first from the last\r\n    \r\n    nums.sort()\r\n    return nums[-1] - nums[0]\r\n    \r\n    \r\n# Tests\r","votes":98262.684},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([2, 3, 5, 5, 6, 7, 8, 9, 11]))\r\n\r\n\r\n# # Solution 2\r\n#","votes":98415.168},{"text":"\r\n    \r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":101144.976},{"text":"\r\n    #find the max and min value\r\n    max = nums[0]\r\n    min = nums[0]\r\n    for i in range(1,len(nums)):\r\n        if nums[i] > max:\r\n            max = nums[i]\r\n        elif nums[i] < min:\r\n            min = nums[i]\r\n    return max - min\r\n\r\n\r","votes":101615.024},{"text":"\r\n    \r\n    # find the max value in the list\r\n    max_num = nums[0]\r\n    for num in nums:\r\n        if num > max_num:\r\n            max_num = num\r\n    \r\n    # find the min value in the list\r\n    min_num = nums[0]\r\n    for num in nums:\r\n        if num < min_num:\r\n            min_num = num\r\n\r\n    return max_num - min_num\r\n\r\n# TEST\r\n\r","votes":105348.076},{"text":"\r\n\r\n    # Return the difference between the max and min value in the array\r\n    return max(nums) - min(nums)\r\n\r\n\r\n# Tests\r","votes":105659.412},{"text":"\r\n    small = nums[0]\r\n    large = nums[0]\r\n    for x in nums:\r\n        if x < small:\r\n            small = x\r\n        if x > large:\r\n            large = x\r\n    return large - small\r\n\r\n\r","votes":107954.828},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([1, 3, 5, 4, 2]))\r\n\r","votes":110078.2},{"text":"\r\n    \r\n    nums.sort()\r\n    return nums[-1] - nums[0]\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [int(input()) for _ in range(5)]\r\n    print(big_diff(nums))\r\n\r\n\r\n# Code\r\n#","votes":111469.992},{"text":"\r\n    min_num = nums[0]\r\n    max_num = nums[0]\r\n    for num in nums:\r\n        if num < min_num:\r\n            min_num = num\r\n        if num > max_num:\r\n            max_num = num\r\n    return max_num - min_num\r\n\r\n\r","votes":112087.008},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([1, 5, 2, 9, 10]))\r\n\r\n\r","votes":112133.624},{"text":"\r\n    b = []\r\n    for i in nums:\r\n        b.append(int(i))\r\n    b = sorted(b)\r\n    return b[len(b)-1] - b[0]\r\n\r","votes":112564.152},{"text":"\r\n    nums.sort()\r\n    return nums[-1] - nums[0]\r\n\r","votes":115612.892},{"text":"\r\n    # Code Here\r\n    nums.sort()\r\n    return nums[-1] - nums[0]\r\n\r\n\r\nprint(big_diff([9, 12, 1, 4, 6, 3, 8]))  # 11\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # 8\r\n\r\n# Output:\r\n# 11\r\n# 8\r\n\r\n\r\n# Q. 9\r\n\"\"\"Write a python function to get the sum of all the numbers in a given range.\"\"\"\r\n\r\n\r","votes":116076.436},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\n# test the function\r\nnums = [1, 2, 3, 4, 5]\r\nprint(big_diff(nums))\r\n\r\n\r","votes":117593.576},{"text":"\r\n    max = nums[0]\r\n    min = nums[0]\r\n    for i in nums:\r\n        if i > max:\r\n            max = i\r\n        if i < min:\r\n            min = i\r\n    return max - min\r\n\r\n\r\nnums = [1, 2, 3, 4, 5]\r\nprint(big_diff(nums))\r\n\r\n\r","votes":118820.608},{"text":"\r\n    largest = nums[0]\r\n    smallest = nums[0]\r\n    for x in nums:\r\n        if x > largest:\r\n            largest = x\r\n        if x < smallest:\r\n            smallest = x\r\n    print(largest - smallest)\r\n    return largest - smallest\r\n\r\n\r","votes":123549.868},{"text":"\r\n\r\n    return abs(max(nums) - min(nums))\r\n\r\n\r","votes":125922.152},{"text":"\r\n    \r\n    # smallest = nums[0]\r\n    # largest = nums[0]\r\n    # for i in range(1, len(nums)):\r\n    #     if nums[i] < smallest:\r\n    #         smallest = nums[i]\r\n    #     if nums[i] > largest:\r\n    #         largest = nums[i]\r\n    # return largest - smallest\r\n\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([1, 2, 3, 4, 5]))\r\nprint(big_diff([-10, -5, 0, 3, 4]))\r\nprint(big_diff([1, 2, 3, 4, 5, 10]))\r\nprint(big_diff([10, 0, 3, 4, 5]))\r\nprint(big_diff([1, 2, 3, 4, 5, 10, -10]))\r\nprint(big_diff([10, -10, 3, 4, 5]))\r\n\r\n\r\n# TEST CASES\r\n# [1, 2, 3, 4, 5]\r\n# [-10, -5, 0, 3, 4]\r\n# [1, 2, 3, 4, 5, 10]\r\n# [10, 0, 3, 4, 5]\r\n# [1, 2, 3, 4, 5, 10, -10]\r\n# [10, -10, 3, 4, 5]\r\n\r\n# [1, 2, 3, 4, 5]\r\n# -15\r\n\r\n# [-10, -5, 0, 3, 4]\r\n# 15\r\n\r\n# [1, 2, 3, 4, 5, ","votes":127246.444},{"text":"\r\n    nums.sort()\r\n    return nums[-1]-nums[0]\r\n\r\nif __name__ == '__main__':\r\n    nums = [1, 3, 5, 7, 9, 2, 4, 6, 8]\r\n    print(big_diff(nums))\r\n\r\n\r\n# Alternative Solution\r\n\r","votes":130827.008},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([10, 11, 12, 13, 14, 15]))\r\n# print(big_diff([8, 6, 2, 10]))\r\n# print(big_diff([13, 12, 11, 10, 14, 15]))\r\n# print(big_diff([1000, 200, 30, 4]))\r\n# print(big_diff([-5, 5, 10, 15, 20, 15, 2, 1, -1]))\r\n\r\n\"\"\"Question 4\r\nWrite a python function to find the sum of all numbers in a given array.\r\n\"\"\"\r\n\r\n\r","votes":135625.788},{"text":"\r\n    if len(nums) == 0:\r\n        return 0\r\n    elif len(nums) == 1:\r\n        return 0\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n\r","votes":137463.468},{"text":"\r\n    if nums == []:\r\n        return 0\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n# Another way to do this problem is to use the min() and max() functions.\r\n# Create a variable to store the maximum number in the list, and another variable to store the minimum number in the list. \r\n# After you have these two variables, it is easy to find the difference between the maximum and the minimum numbers by subtracting the two variables.\r\n\r\n#","votes":141946.008},{"text":"\r\n    import numpy as np\r\n    return np.max(nums) - np.min(nums)\r\n\r\n\r","votes":151984.272},{"text":"\r\n\r\n    # get smallest and largest value of list\r\n    smallest, largest = nums[0], nums[0]\r\n    for num in nums:\r\n        if num < smallest:\r\n            smallest = num\r\n        if num > largest:\r\n            largest = num\r\n\r\n    # return difference between largest and smallest value in list\r\n    return largest - smallest\r\n\r\n\r\n# test case 1:\r\nnums = [1, 3, 5, 6, 7, 9, 13, 15]\r\nprint(big_diff(nums))\r\n\r\n# test case 2:\r\nnums = [1, 3, 5, 6, 7, 9]\r\nprint(big_diff(nums))\r\n\r\n# test case 3:\r\nnums = [15, 13, 9, 7, 6, 5, 3, 1]\r\nprint(big_diff(nums))\r\n\r\n# test case 4:\r\nnums = [1]\r\nprint(big_diff(nums))\r\n\r\n# test case 5:\r\nnums = [3, 5, 7, 9, 15, 13, 11, 9]\r\nprint(big_diff(nums))\r\n\r\n# test case 6:\r\nnums = [-1, -3, -5, -7, -9, -11, -13, -15]\r\nprint(big_diff(nums))\r\n\r\n# test case 7:\r\nnums = [-5, -7, -9, -11, -13, -15]\r\nprint(big_diff(nums))\r\n\r\n# test case 8:\r\nnums = [-15, -13, -11, -9, -7, -5]\r\nprint(big_diff(nums))\r\n\r\n# test case 9:\r","votes":157137.512},{"text":"\r\n    lst = list(nums)\r\n    max = 0\r\n    min = 0\r\n    for i in range(len(lst)):\r\n        if lst[i] > lst[max]:\r\n            max = i\r\n            \r\n    for i in range(len(lst)):\r\n        if lst[i] < lst[min]:\r\n            min = i\r\n    return lst[max]-lst[min]\r\nprint(big_diff([2, 3, 5, 1, 4]))\r\n\r","votes":165423.104},{"text":"\r\n\r\n    # find the maximum number in the array\r\n    max_num = nums[0]\r\n    for i in range(1, len(nums)):\r\n        if nums[i] > max_num:\r\n            max_num = nums[i]\r\n\r\n    # find the minimum number in the array\r\n    min_num = nums[0]\r\n    for i in range(1, len(nums)):\r\n        if nums[i] < min_num:\r\n            min_num = nums[i]\r\n\r\n    # subtract the minimum number from the maximum number\r\n    diff = max_num - min_num\r\n\r\n    return diff\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(big_diff([1, 5, 2, 3, 4, 6, 7, 8, 9, 10]))\r\n    print(big_diff([1, 5, 10, 2, 3, 4, 6, 7, 8, 9]))\r\n    print(big_diff([1]))\r\n    print(big_diff([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\n    print(big_diff([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\r\n    print(big_diff([20, 18, 16, 14, 12, 10, 8, 6, 4, 2]))\r\n    print(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(big_diff([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))","votes":166908.004},{"text":"\r\n\r\n    nums = [int(i) for i in nums]\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":170874.888},{"text":"\r\n    # Write your code here.\r\n    return max(nums) - min(nums)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\r\n\r\n    nums_count = int(input())\r\n\r\n    nums = list(map(int, input().rstrip().split()))\r\n\r\n    result = big_diff(nums)\r\n\r\n    fptr.write(str(result) + \"\\n\")\r\n\r\n    fptr.close()\r\n\r\n\r\n# Output Format\r\n# Print the result.\r\n\r\n# Sample Input 0\r\n#\r\n# 3\r\n# 1 2 3\r\n# Sample Output 0\r\n#\r\n# 2\r\n# Explanation 0\r\n#\r\n# The largest value is 3 and the smallest value is 1.\r\n# The difference between 3 and 1 is 2.\r\n# Sample Input 1\r\n#\r\n# 4\r\n# 7 9 11 2\r\n# Sample Output 1\r\n#\r\n# 9\r\n# Explanation 1\r\n#\r\n# The largest value is 11 and the smallest value is 2.\r\n# The difference between 11 and 2 is 9.\r\n# Sample Input 2\r\n#\r\n# 3\r\n# 9 8 7\r\n# Sample Output 2\r\n#\r\n# 0\r\n# Explanation 2\r\n#\r\n# The largest value is 9 and the smallest value is 7.\r\n# The difference between 9 and 7 is 2.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#!\/bin\/python3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n# Complete the big_diff function below.\r","votes":171594.22},{"text":"\r\n    small = nums[0]\r\n    big = nums[0]\r\n    for i in nums:\r\n        if i < small:\r\n            small = i\r\n        if i > big:\r\n            big = i\r\n    return big - small\r\n\r\n\r","votes":182215.356},{"text":"\r\n    if nums and isinstance(nums, list):\r\n        if len(nums)>1:\r\n            return max(nums) - min(nums)\r\n        else:\r\n            return 0\r\n    else:\r\n        return \"No match\"\r\n\r\n\r\nprint(big_diff([9, 10, 11, 12, 13, 14, 15]))\r\nprint(big_diff([1, 2]))\r\nprint(big_diff([1]))\r\nprint(big_diff([]))\r\nprint(big_diff([\"a\"]))\r\nprint(big_diff([9, 10, 11, 12, 13, 14, 15, \"a\"]))\r\n\r\n\r\n# Testing\r\n\r","votes":null},{"text":"\r\n    a = nums.split() #spliting the list of integers into a new list\r\n    b = list(map(int, a))#converting the integers from string to integers\r\n    print(max(b)-min(b))\r\n","votes":null},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n# TEST CASES\r\nprint(big_diff([5,2,7,1])) # 6\r\nprint(big_diff([1,2,3])) # 2\r\nprint(big_diff([-1,-2,-3])) # 2\r\nprint(big_diff([])) # 0\r\n\r\n# 100\/100 in Python \r\n# 0\/100 in JavaScript\r\n\r\n# 1. Write a Python program to get the first three items of a given list.\r\n\r","votes":null},{"text":"\r\n    # create an empty list to store the maximum and minimum values\r\n    max_min = []\r\n    # iterate over the list\r\n    for number in nums:\r\n        # check if the list is empty\r\n        if len(max_min) == 0:\r\n            # add the first element to the list\r\n            max_min.append(number)\r\n        # if the list is not empty\r\n        else:\r\n            # check if the number is greater than the last element\r\n            if number > max_min[-1]:\r\n                # add the number to the list\r\n                max_min.append(number)\r\n            # if the number is less than last element\r\n            elif number < max_min[-1]:\r\n                # add the number to the list\r\n                max_min.append(number)\r\n            # if the number is equal to the last element\r\n            elif number == max_min[-1]:\r\n                # add the number to the list\r\n                max_min.append(number)\r\n    # return the difference between the last and first element in the list\r\n    return max_min[-1] - max_min[0]\r\n\r\n# test function\r\nnumbers = [1, 3, 5, 2, 1]\r\nprint(big_diff(numbers))\r\n\r\n\r\n# Challenge 2\r","votes":null},{"text":"\r\n    #Code\r\n    nums = [float(num) for num in nums]\r\n    return max(nums) - min(nums)\r\n\r\n\r\n# Output\r\nprint(big_diff([2, ","votes":null},{"text":"\r\n    # code goes here\r\n    nums = list(map(int, nums.split(',')))\r\n    return max(nums) - min(nums)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    #code here\r\n    big_num=nums[0]\r\n    small_num=nums[0]\r\n    for num in nums:\r\n        if num>big_num:\r\n            big_num=num\r\n        if num<small_num:\r\n            small_num=num\r\n    return big_num-small_num\r\n\r\nprint(big_diff([1,2,3,4,5]))\r\nprint(big_diff([5,6,7,8,9]))\r\nprint(big_diff([100,200,300,400,500]))\r\nprint(big_diff([10,5,6,7,8]))\r\nprint(big_diff([10,100,50,45,500]))\r\nprint(big_diff([10,100,50,45,500]))\r\n\r\n'''\r\n\r","votes":null},{"text":"\r\n\r\n    # Solution 1\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 2\r\n    # return max(nums) - nums[0] if nums[0] < max(nums) else nums[-1] - min(nums)\r\n\r\n    # Solution 3\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 4\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 5\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 6\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 7\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 8\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 9\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 10\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 11\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 12\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 13\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 14\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 15\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 16\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 17\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 18\r\n    # return max(nums) - min(nums)\r\n\r\n    # Solution 19\r\n    # retur","votes":null},{"text":"\r\n    \r\n    # initialize variable to store the largest and smallest values\r\n    largest = nums[0]\r\n    smallest = nums[0]\r\n    \r\n    # loop through the length of the array\r\n    for num in nums:\r\n        \r\n        # check if the current number is greater than the largest number\r\n        if num > largest:\r\n            largest = num\r\n            \r\n        # check if the current number is less than the smallest number\r\n        if num < smallest:\r","votes":null},{"text":"\r\n    \r\n    return max(nums) - min(nums)\r\n\r\nif __name__ == \"__main__\":\r\n    print(big_diff([-1, 2, 4, 7, 10, 5]))\r\n    print(big_diff([-2, 2, 4, 7, 10, 5]))\r\n    print(big_diff([-2, -1, 4, 7, 10, 5]))\r\n    print(big_diff([-2, -1, -4, 7, 10, 5]))\r\n    print(big_diff([-2, -1, -4, -7, 10, 5]))\r\n    print(big_diff([-2, -1, -4, -7, -10, 5]))\r\n    print(big_diff([-2, -1, -4, -7, -10, -5]))\r\n    print(big_diff([-2, -1, -4, -7, -10, -5, -11, -9]))\r\n    print(big_diff([-2, -1, -4, -7, -10, -5, -11, -9, 0]))\r\n    print(big_diff([-2, -1, -4, -7, -10, -5, -11, -9, -1]))\r\n    print(big_diff([-2, -1, -4, -7, -10, -5, -11, -9, -1, 1]))\r\n    print(big_diff([-2, -1, -4, -7, -10, -5, -11, -9, -1, 1, 2]))\r\n    print(big_diff([-2, -1, -4, -7, -10, -5, -11, -9, -1, 1, 2, 3]))\r\n    print(big_diff([","votes":null},{"text":"\r\n    if len(nums) == 0:\r\n        return -1, -1\r\n\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    return max_num - min_num, max_num, min_num\r\n\r\n\r","votes":null},{"text":"\r\n    length = len(nums)\r\n    if length<2:\r\n        return 0\r\n    min_value = nums[0]\r\n    max_value = nums[0]\r\n    for i in range(1,length):\r\n        if nums[i]>max_value:\r\n            max_value = nums[i]\r\n        if nums[i]<min_value:\r\n            min_value = nums[i]\r\n    return (max_value-min_value)\r\n\r\n\r\n# This is the test code\r\ntest = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(big_diff(test))\r\ntest = [10, 5, 4, 3, 2, 1]\r\nprint(big_diff(test))\r\ntest = [10, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nprint(big_diff(test))\r\ntest = [10, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]\r\nprint(big_diff(test))\r\ntest = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\nprint(big_diff(test))\r\ntest = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,","votes":null},{"text":"\r\n    if len(nums) == 0:\r\n        return 0\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([1, 2, 3, 4, 5]))\r\nprint(big_diff([5, 2, 3, 7, 1]))\r\nprint(big_diff([5, -2, 3, 7, 1]))\r\nprint(big_diff([1,","votes":null},{"text":"\r\n    # code\r\n    nums.sort()\r\n    print(nums[-1] - nums[0])\r\n    return None\r\n\r\nbig_diff([10, 5, 2, 8, 15])\r\n\r","votes":null},{"text":"\r\n    #find the max\r\n    max_num = nums[0]\r\n    for i in range(1, len(nums)):\r\n        if nums[i] > max_num:\r\n            max_num = nums[i]\r\n    #find the min\r\n    min_num = nums[0]\r\n    for i in range(1, len(nums)):\r\n        if nums[i] < min_num:\r\n            min_num = nums[i]\r\n    return max","votes":null},{"text":"\r\n    if len(nums) == 0:\r\n        return 0\r\n    elif len(nums) == 1:\r\n        return nums[0]\r\n    else:\r\n        nums.sort()\r\n        return nums[-1] - nums[0]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([1, 20, 3, 4]))\r\n    print(big_diff([1, 20, 3, 4, 10]))\r\n    print(big_diff([10, 20, 30, 40]))\r\n    print(big_diff([10, 20, 30, 40, 50]))\r\n    print(big_diff([10, 20, 30, 40, 50, 60]))\r\n    print(big_diff([100, 20","votes":null},{"text":"\r\n    smallest = nums[0]\r\n    biggest = nums[0]\r\n    for i in range(1, len(nums)):\r\n        if nums[i] > biggest:\r\n            biggest = nums[i]\r\n        if nums[i] < smallest:\r\n            smallest = nums[i]\r\n    return biggest - smallest\r\n\r\nprint(big_diff([1, 2, 3, 4, 5]))\r\nprint(big_diff([5, 2, 9, 1, 3]))\r\nprint(big_diff([-1, 0, 10, 10]))\r\nprint(big_diff([-1, 10, 10, 10]))\r\nprint(big_diff([10, -10, 10, 10]))\r\nprint(big_diff([-10, -10, -10, -10]))\r\nprint(big_diff([-1, 0, 1, 3]))\r\nprint(big_diff([-2, 2, -4, 4]))\r\n\r\n\"\"\"Explanation:\r\n\r\nWe need to consider the following cases:\r\n\r\nCase 1: When all numbers are positive.\r\nIn this case, the difference between the smallest and the biggest number is the difference between the biggest and the smallest number.\r\n\r\nCase 2: When all numbers are negative.\r\nIn this case, the difference between the smallest and the biggest number is the difference between the biggest and the smallest number.\r\n\r\nCase 3: When there is a positive and a negative number.\r\nIn this case, the difference between the smallest and the biggest number is the difference between the absolute value of the biggest and the absolute value of the smallest number.\r\n\r\nCase 4: When the smallest negative number is the biggest positive number.\r\nIn this case, the difference between the smallest and the biggest number is the difference between the absolute value of the biggest and the absolute value of the smallest number.\r\n\r\nCase 5: When the biggest negative number is the smallest positiv","votes":null},{"text":"\r\n    # create empty list\r\n    list = []\r\n    # append values to list\r\n    for num in nums:\r\n        list.append(num)\r\n    # sort list\r\n    list.sort()\r\n    # print the difference\r\n    print(list[-1] - list[0])\r\n\r\n# call the function\r\nbig_diff([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\r\nbig_diff([9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 3])\r\nbig_diff([3, 1, 2])\r\nbig_diff([3, 2, 1])\r\n```\r\n\r\n### 7. Find the missing number in a list of numbers\r\n\r\n```python\r","votes":null},{"text":"\r\n\r\n    return max(nums) - min(nums)\r\n\r\n\r\n# Test\r\nprint(big_diff([10, 3, 5, 6]))\r\nprint(big_diff([7, 2, 10, 9]))\r\nprint(big_diff([2, 10, 7, 9]))\r\nprint(big_diff([10, 9, 7, 2]))\r\nprint(big_diff([10, 9, 7, 0]))\r\nprint(big_diff([","votes":null},{"text":"\r\n    \r\n    return max(nums) - min(nums)\r\n\r\n\r\n#Tests\r\nprint(big_diff([1, 2, 3, 4, 5])) #5\r\nprint(big_diff([-10, -10, -10, -10, -10])) #0\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) #9\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) #10\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) #11\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) #12\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) #13\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) #14\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])) #15\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8","votes":null},{"text":"\r\n    #sorting the array\r\n    nums.sort()\r\n    #returning the difference between the highest and lowest value\r\n    return nums[-1] - nums[0]\r\n\r\nprint(big_diff([2, 3, 10, 5])) #should return 8\r\nprint(big_diff([1, 5, ","votes":null},{"text":"\r\n\r\n    # input\r\n    nums = [1, 2, 3, 4, 5]\r\n\r\n    # output\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    diff = max_num - min_num\r\n\r\n    print(diff)\r\n\r\n\r","votes":null},{"text":"\r\n    sorted_nums = sorted(nums)\r\n    return sorted_nums[-1] - sorted_nums[0]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(big_diff([1, 2, 3, 5, -11, 200]))\r\n    print(big_diff([10, 3, 5, 6, 2]))\r\n    print(big_diff([10, 3, 5, 6, 2, 1]))\r\n    print(big_diff([1, 2, 3, 5, -11, 200]))\r\n    print(big_diff([1, 2, 3, 5, -11, 200, 100]))\r\n    print(big_diff([1, 2, 3, 5, -11, 200, 1000]))\r\n    print(big_diff([1, 1, 1, 1, 1]))\r\n    print(big_diff([1, 2, 3, 5, -11, 200, 1000, 10]))\r\n    print(big_diff([1, 2, 3, 5, -11, 200, 1000, 10, 100]))\r\n    print(big_diff([10, 3, 5, -6, 2, 1]))\r\n    print(big_diff([1, 2, 3, 5, -11, 200, 1000, 10, 100, 4000]))\r\n    print(big_diff([10, 3, 5, -6, 2, 1, 100000, 1000000, 10000, 4000]))\r\n    print(big_diff([10, 3","votes":null},{"text":"\r\n    diff = None\r\n    nums = sorted(nums)\r\n    for i in range(0, len(nums)-1):\r\n        diff = nums[i+1] - nums[i]\r\n    return diff\r\n\r","votes":null},{"text":"\r\n    #Write your code here\r\n    n = len(nums)\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        maxNum = nums[0]\r\n        minNum = nums[0]\r\n        for i in range(1, n):\r\n            if nums[i] > maxNum:\r\n                maxNum = nums[i]\r\n            else:\r\n                minNum = nums[i]\r\n        return maxNum - minNum\r\n\r\n\r\n\r\n\r\n# Test case\r\nprint(big_diff([1, 3, 5, 7, 9, 11]))\r\nprint(big_diff([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 14","votes":null},{"text":"\r\n    sorted_nums = sorted(nums)\r\n    return sorted_nums[-1] - sorted_nums[0]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(big_diff([1, 3, 5, 7, 9, 11]))\r\n    print(big_diff([-1, 3, 5, 7, 9, 11]))\r\n    print(big","votes":null},{"text":"\r\n    # write your code here\r\n    return max(nums) - min(nums)\r\n\r\n\r\n\r\n# test code\r\ntest_cases = [\r\n    [10, 15, 20, 5, 30],\r\n    [10, 15, 20, 5, 20],\r\n    [10, 15, 20, 5, 5],\r\n    [10, 15, 20, 5, 15],\r\n    [10, 10, 10, 10, 10],\r\n    [10, 15, 20, 5, 0]\r\n]\r\n\r\nfor i in test_cases:\r\n    print(i, big","votes":null}],"time":{"count":56.0,"avg":105989.164,"std":30568.0152163112,"cov":0.2884069849}}
{"id":589,"question":"def perfect_squares(a, b):\r\n    \"\"\"Write a function to find perfect squares between two given numbers.\"\"\"","answers":[{"text":"\r\n    squares = []\r\n    for n in range(a, b + 1):\r\n        if n ** 0.5 % 1 == 0:\r\n            squares.append(n)\r\n    return squares\r\n\r\n\r","votes":102435.544},{"text":"\r\n    numbers = []\r\n    for i in range(a, b+1):\r\n        if i**0.5 % 1 == 0:\r\n            numbers.append(i)\r\n    return numbers\r\n\r\n\r","votes":107125.792},{"text":"\r\n    squares = []\r\n    for num in range(a, b + 1):\r\n        if num ** 0.5 == int(num ** 0.5):\r\n            squares.append(num)\r\n    return squares\r\n\r\n\r","votes":109196.068},{"text":"\r\n    return [x for x in range(a, b + 1) if x**0.5 % 1 == 0]\r\n\r\n\r","votes":111034.928},{"text":"\r\n    squares = []\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r","votes":114553.148},{"text":"\r\n    squares = []\r\n    for i in range(a, b + 1):\r\n        if i**0.5 == int(i**0.5):\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r","votes":117158.456},{"text":"\r\n    return [i for i in range(a, b + 1) if i ** 0.5 % 1 == 0]\r\n\r\n\r","votes":119363.468},{"text":"\r\n    lst = []\r\n    for i in range(a, b + 1):\r\n        if (i ** 0.5) % 1 == 0:\r\n            lst.append(i)\r\n    return lst\r\n\r\n\r","votes":121327.58},{"text":"\r\n    return [x for x in range(a, b + 1) if x**0.5 % 1 == 0]\r\n\r\n\r\nprint(perfect_squares(1, 100))\r\n\r\n\r","votes":124263.38},{"text":"\r\n    out = []\r\n    for i in range(a, b+1):\r\n        if i**0.5 % 1 == 0:\r\n            out.append(i)\r\n    return out\r\n\r","votes":130373.412},{"text":"\r\n    # Return an empty list if the first number is greater than the second number\r\n    if a > b:\r\n        return []\r\n\r\n    # Create the list of perfect squares\r\n    perfect_squares = []\r\n    for sq in range(a, b + 1):\r\n        if sq ** 0.5 == int(sq ** 0.5):\r\n            perfect_squares.append(sq)\r\n\r\n    return perfect_squares\r\n\r\n\r","votes":132811.644},{"text":"\r\n    if a < 0 or b < 0:\r\n        return []\r\n    squares = []\r\n    for i in range(a, b+1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = int(input(\"Enter the lower number: \"))\r","votes":135007.8},{"text":"\r\n    squares = []\r\n    a = int(a)\r\n    b = int(b)\r\n    for i in range(a, b+1):\r\n        if int(i**0.5)**2 == i:\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r","votes":138201.148},{"text":"\r\n    squares = list()\r\n    for square in range(a, b+1):\r\n        if square**0.5 == int(square**0.5):\r\n            squares.append(square)\r\n    return squares\r\n\r\n\r","votes":138931.556},{"text":"\r\n    l = []\r\n    if a > b:\r\n        a, b = b, a\r\n    for i in range(a, b + 1):\r\n        if i**0.5 == int(i**0.5):\r\n            l.append(i)\r\n    return l\r\n\r\n\r","votes":140362.636},{"text":"\r\n    perfect_squares = []\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            perfect_squares.append(i)\r\n    return perfect_squares\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(3, 100))\r\n","votes":143188.956},{"text":"\r\n\r\n    if a > b:\r\n        return -1\r\n\r\n    squares = []\r\n\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            squares.append(i)\r\n\r\n    return squares\r\n\r\n\r","votes":144401.244},{"text":"\r\n    sq = []\r\n    for i in range(a, b+1):\r\n        if i**0.5 == round(i**0.5):\r\n            sq.append(i)\r\n    return sq\r\n\r","votes":144587.392},{"text":"\r\n    a, b = int(a), int(b)\r\n    return [i for i in range(a, b + 1) if i ** 0.5 % 1 == 0]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(1, 10))  # [1, 4, 9]\r\n    print(perfect_squares(1, 100))  # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n    print(perfect_squares(1, 1000))  # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 36","votes":145022.188},{"text":"\r\n    squares = []\r\n    for i in range(a, b+1):\r\n        if i**0.5 == int(i**0.5):\r\n            squares.append(i)\r\n    return squares\r\n            \r\nprint(perfect_squares(1, 10))\r\n\r\n#----------------------------------------------------------------------------------------------------------------------------------------------------------\r","votes":145862.756},{"text":"\r\n    squares = []\r\n    i = a\r\n    while i <= b:\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            squares.append(i)\r\n        i += 1\r\n    return squares\r\n\r\n\r","votes":146423.988},{"text":"\r\n    squares = []\r\n    for i in range(a, b + 1):\r\n        if int(i ** 0.5) ** 2 == i:\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"All perfect squares between 2 and 10:\")\r\n    print(perfect_squares(2, 10))\r\n    print()\r\n    print(\"All perfect squares between 1 and 250:\")\r\n    print(perfect_squares(1, 250))\r\n\r\n\r\n# Tests\r","votes":149551.66},{"text":"\r\n    if a < 0 or b < 0:\r\n        raise ValueError(\"The numbers must be greater than 0\")\r\n    squares = []\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r","votes":155062.748},{"text":"\r\n    squares = []\r\n\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 % 1 == 0:\r\n            squares.append(i)\r\n\r\n    return squares\r\n\r\n\r","votes":163886.56},{"text":"\r\n    squared = []\r\n    for i in range(a, b + 1):\r\n        if i**0.5 == int(i**0.5):\r\n            squared.append(i)\r\n    return squared\r\n\r\n\r","votes":206064.188},{"text":"\r\n    l = []\r\n    for i in range(a, b + 1):\r\n        s = int(i**0.5)\r\n        if s**2 == i:\r\n            l.append(i)\r\n    return l\r\n\r\n\r","votes":207024.476},{"text":"\r\n    return [i for i in range(a, b + 1) if int(i ** 0.5) ** 2 == i]\r\n\r\n\r","votes":217064.124},{"text":"\r\n    squares = []\r\n    for i in range(a, b+1):\r\n        if i**0.5 % 1 == 0:\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r","votes":225552.064},{"text":"\r\n    perfect_squares = []\r\n    for x in range(a, b + 1):\r\n        if x ** 0.5 == int(x ** 0.5):\r\n            perfect_squares.append(x)\r\n    return perfect_squares\r\n\r\n\r","votes":349157.084},{"text":"\r\n    \r\n    # start with the larger number\r\n    if a > b:\r\n        a, b = b, a\r\n    \r\n    # find the squares in the range\r\n    squares = []\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            squares.append(i)\r\n            \r\n    return squares\r\n\r\n\r\n# test case 1\r\na = 1\r\nb = 10\r\nprint(perfect_squares(a, b)) # output: [1, 4, 9]\r\n\r\n# test case 2\r\na = 1\r\nb = 15\r\nprint(perfect_squares(a, b)) # output: [1, 4, 9, 16]\r\n\r\n# test case 3\r\na = 5\r\nb = 10\r\nprint(perfect_squares(a, b)) # output: [9]\r\n\r\n# test case 4\r\na = 9\r\nb = 10\r\nprint(perfect_squares(a, b)) # output: [9]\r\n\r\n# test case 5\r\na = 1\r\nb = 1000\r\nprint(perfect_squares(a, b)) # output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, ","votes":430446.632},{"text":"\r\n\r\n    # 1) Create a list of integers between the two given numbers\r\n    numbers = list(range(a, b + 1))\r\n\r\n    # 2) Test the integers in the list to see if they are perfect squares\r\n    squares = []\r\n    for n in numbers:\r\n        if n**0.5 % 1 == 0:\r\n            squares.append(n)\r\n\r\n    # 3) Return the list of integers that are perfect squares\r\n    return squares\r\n\r\n\r\nprint(perfect_squares(2, 5))\r\nprint(perfect_squares(3, 10))\r\nprint(perfect_squares(100, 1000))\r\nprint(perfect_squares(200, 300))\r\nprint(perfect_squares(1000, 10000))\r\n\r\n\r","votes":1603677.504},{"text":"\r\n    list_of_squares = []\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 % 1 == 0:\r\n            list_of_squares.append(i)\r\n    return list_of_squares\r\n\r\n\r\nprint(perfect_squares(1, 10))\r\nprint(perfect_squares(1, 100))\r\nprint(perfect_squares(1, 1000))\r\nprint(perfect_squares(1, 10000))\r\n\r\n\r","votes":1717264.5399999998},{"text":"\r\n    return [i for i in range(a, b + 1) if i ** (1\/2) == int(i ** (1\/2))]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(perfect_squares(1, 10))\r\n    print(perfect_squares(1, 100))\r\n    print(perfect_squares(1, 1000))\r\n    print(perfect_squares(1, 10000))\r\n    print(perfect_squares(1, 100000))\r\n    print(perfect_squares(1, 100","votes":null},{"text":"\r\n    squares = [i**2 for i in range(a, b+1) if is_square(i**2)]\r\n    return squares\r\n\r\n\r","votes":null},{"text":"\r\n    return [x**2 for x in range(a, b + 1) if (x**2)%1 == 0]\r\n\r","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for x in range(a, b + 1):\r\n        if x == x ** 0.5:\r\n            perfect_squares.append(x)\r\n    return perfect_squares\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in range(a, b+1):\r\n        if i**0.5 in range(a, b+1):\r\n            result.append(i)\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(perfect_squares(int(input()), int(input())))\r\n\r\n\r\n# Output:\r\n# Enter a: 1\r\n# Enter b: 100\r\n# [1, 4, 9, 16, 25, 36, 49, 64, ","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == i ** 0.5 % 1:\r\n            perfect_squares.append(i)\r\n    return perfect_squares\r\n\r","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for i in range(a, b + 1):\r\n        root = math.sqrt(i)\r\n        if root == math.floor(root):\r\n            perfect_squares.append(i)\r\n    return perfect_squares\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(perfect_squares(1, 5))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert perfect_squares(1, 5) == [1, 4]\r\n    assert perfect_squares(3, 6) == [9]\r\n    assert perfect_squares(1, 10) == [1, 4, 9]\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\r\n","votes":null},{"text":"\r\n    if a > b:\r\n        return None\r\n    else:\r\n        return [i ** 2 for i in range(a, b + 1) if i ** 2 in range(a, b + 1)]\r\n\r\n\r\n# Tests\r","votes":null},{"text":"\r\n\r\n    squares = []\r\n\r\n    for num in range(a, b + 1):\r\n        if num ** 0.5 == int(num ** 0.5):\r\n            squares.append(num)\r\n\r\n    return squares\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(1, 10))\r\n    print(perfect_squares(1, 100))\r\n    print(perfect_squares(50, 100))\r\n    print(perfect_squares(3, 100))\r\n    print(perfect_squares(10, 100))\r\n    print(perfect_squares(1, 1000))\r\n    print(perfect_squares(1, 10000))\r\n    print(perfect_squares(1, 100000))\r\n    print(perfect_squares(1, 1000000))\r\n    print(perfect_squares(1, 10000000))\r\n    print(perfect_squares(1, 100000000))\r\n    print(perfect_squares(1, 1000000000))\r\n    print(perfect_squares(1, 10000000000))\r\n    print(perfect_squares(1, 100000000000))\r\n    print(perfect_squares(1, 1000000000000))\r\n    print(perfect_squares(1, 10000000000000))\r\n    print(perfect_squares(1, 100000000000000))\r\n    print(perfect_squares(1, 10000000","votes":null},{"text":"\r\n    return [i**2 for i in range(a, b + 1) if i ** 2 >= a and i ** 2 <= b]\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(a, b+1):\r\n        if i**0.5 == int(i**0.5):\r\n            print(i)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    perfect = []\r\n    for i in range(a, b):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            perfect.append(i)\r\n    return perfect\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(1, 100))\r\n\r\n\r\n# Sum of squares of first n natural numbers\r","votes":null},{"text":"\r\n    return [i**2 for i in range(a, b+1) if i**2 % 1 == 0]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(perfect_squares(1, 5))\r\n\r\n    #These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert perfect_squares(1, 5) == [1, 4]\r\n    assert perfect_squares(3, 9) == [9]\r\n    assert perfect_squares(1, 7) == [1, 4, 9]\r\n    assert perfect_squares(3, 8) == [9]\r\n    assert perfect_squares","votes":null},{"text":"\r\n    return [i * i for i in range(a, b + 1) if i * i >= a and i * i <= b]\r\n\r\n\r","votes":null},{"text":"\r\n    return [i**2 for i in range(a, b + 1) if i**2 >= a and i**2 <= b]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(perfect_squares(1, 5))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert perfect_squares(1, 5) == [1, 4]\r\n    assert perfect_squares(3, 7) == [3, 4, 5, 6]\r\n    assert perfect_squares(6, 10) == [6, 8, 10]\r\n    assert perfect_squares(7, 10) == [9]\r\n    assert perfect_squares(1, 100) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\r\n\r\n","votes":null},{"text":"\r\n    return [i ** 2 for i in range(a, b + 1) if i ** 2 >= a and i ** 2 <= b]\r\n\r\n\r","votes":null},{"text":"\r\n    num = []\r\n    for i in range(a, b+1):\r\n        if i == (i**0.5)**2:\r\n            num.append(i)\r\n    return num\r\n\r\n\r\nprint(perfect_squares(4, 20))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return [i**2 for i in range(a, b+1) if i**0.5 == int(i**0.5)]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(perfect_squares(1, 2))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert perfect_squares(1, 2) == [1]\r\n    assert perfect_squares(1, 3) == [1, 2]\r\n    assert perfect_squares(1, 4) == [1, 2, 4]\r\n    assert perfect_squares(3, 4) == [9]\r\n    assert perfect_squares(3, 6) == [","votes":null},{"text":"\r\n    return [i**2 for i in range(a, b + 1) if i**0.5 == int(i**0.5)]\r\n\r\n\r\nprint(perfect_squares(1, 3))\r\nprint(perfect_squares(1, 4))\r\nprint(perfect_squares(1, 5))\r\nprint(perfect_squares(1, 6))\r\nprint(perfect_squares(1, 7))\r\nprint(perfect_squares(1, 8))\r\nprint(perfect_squares(1, 9))\r\nprint(perfect_squares(1, 10))\r\nprint(perfect_squares(1, 11))\r\nprint(perfect_squares(1, 12))\r\nprint(perfect_squares(1, 13))\r\nprint(perfect_squares(1, 14))\r\nprint(perfect_squares(1, 15))\r\nprint(perfect_squares(1, 16))\r\nprint(perfect_squares(1, 17))\r\nprint(perfect_squares(1, 18))\r\nprint(perfect_squares(1, 19))\r\nprint(perfect_squares(1, 20))\r\nprint(perfect_squares(1, 21))\r\nprint(perfect_squares(1, 22))\r\nprint(perfect_squares(1, 23))\r\nprint(perfect_squares(1, 24))\r\nprint(perfect_squares(1, 25))\r\nprint(perfect_squares(1, 26))\r\nprint(perfect_squares(1, 27))\r\nprint(perfect_squares(1, 28))\r\nprint(perfect_squares(1, 29))\r\nprint(perfect_squares(1, 30))\r\nprint","votes":null},{"text":"\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            print(i)\r\n\r\nperfect_squares(1, 100)\r\n\r\n\r\n# 11. Write a Python program to find the sum of all numbers which are factors of a given positive integer.\r\n\r","votes":null},{"text":"\r\n    if a > b:\r\n        return []\r\n    else:\r\n        return [i ** 2 for i in range(a, b + 1) if is_square(i)]\r\n\r\n\r","votes":null},{"text":"\r\n    # Create a list of integers from a to b\r\n    nums = list(range(a, b + 1))\r\n    # Create an empty list to store perfect squares\r\n    p_squares = []\r\n    # Loop through the list of numbers\r\n    for num in nums:\r\n        # Find the square root\r\n        sqrt = num ** 0.5\r\n        # If the square root is an integer, add it to the list of perfect squares\r\n        if sqrt == int(sqrt):\r\n            p_squares.append(num)\r\n    # Sort the list of perfect squares\r\n    p_squares.sort()\r\n    # Return the list of perfect squares\r\n    return p_squares\r\n\r\n\r\nprint(perfect_squares(1, 10))  # [1, 4, 9]\r\nprint(perfect_squares(11, 20))  # [16]\r\nprint(perfect_squares(21, 30))  # []\r\nprint(perfect_squares(31, 40))  # [36]\r\nprint(perfect_squares(41, 50))  # [49]\r\nprint(perfect_squares(51, 60))  # [64]\r\nprint(perfect_squares(61, 70))  # []\r\nprint(perfect_squares(71, 80))  # [81]\r\nprint(perfect_squares(81, 90))  # [81]\r\nprint(perfect_squares(-1, 0))  # []\r\nprint(perfect_squares(-3, -2))  # []\r\nprint(perfect_squares(1, 40))  # [1, 4, 9, 16, 25, 36, 49]\r\nprint(perfect_squares(-3, 9))  # [1, 4, 9]","votes":null},{"text":"\r\n    return [n**2 for n in range(a, b+1) if n**2 in range(a, b+1)]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(1, 100))\r\n\r\n\r\n# Output:\r\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n\r\n\r\n# Example 2\r\n\r\n\r","votes":null},{"text":"\r\n    return [i ** 2 for i in range(a, b + 1) if i ** 2 <= b]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    perfect_squares = []\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            perfect_squares.append(i)\r\n    return perfect_squares\r\n\r\n\r\n# Test cases\r\nassert perfect_squares(2, 3) == [2, 3]\r\nassert perfect_squares(1, 5) == [1, 4]\r\nassert perfect_squares(-1, 5) == []\r\nassert perfect_squares(-1, 0) == []\r\nassert perfect_squares(0, 0) == [0]\r\nassert perfect_squares(0, 1) == [0, 1]\r\nassert perfect_squares(0, 2) == [0, 1]\r\nassert perfect_squares(4, 9) == [4, 9]\r\nassert perfect_squares(10, 15) == [10, 12, 14, 15]\r\nassert perfect_squares(10, 16) == [10, 12, 14, 16]\r\nassert perfect_squares(10, 17) == [10, 12, 14, 16]\r\nassert perfect_squares(10, 25) == [10, 12, 14, 16, 18, 20, 22, 24, 25]\r\nassert perfect_squares(10, 26) == [10, 12, 14, 16, 18, 20, 22, 24, 25, 26]\r\nassert perfect_squares(10, 27) == [10, 12, 14, 16, 18, 20, 22, 24, 25, 26]\r","votes":null},{"text":"\r\n\r\n    return [i**2 for i in range(a, b + 1) if (i**2) % (b + 1) == 0]\r\n\r\n\r\nnum1 = int(input('Enter the first number: '))\r\nnum2 = int(input('Enter the second number: '))\r\n\r\nprint(perfect_squares(num1, num2))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    assert a < b\r\n\r\n   ","votes":null},{"text":"\r\n    for i in range(a, b+1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            yield i\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(a, b+1):\r\n        if i**0.5 % 1 == 0:\r\n            print(i)\r\n\r\n\r\n# perfect_squares(0, 12)\r\n# perfect","votes":null},{"text":"\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            yield i\r\n\r\n\r","votes":null},{"text":"\r\n    squares = []\r\n    for n in range(a, b + 1):\r\n        if n ** 0.5 == int(n ** 0.5):\r\n            squares.append(n)\r\n    return squares\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(1, 25))\r\n    print(perfect_squares(2, 100))\r\n    print(perfect_squares(10, 250))\r\n    print(perfect_squares(25, 50))\r\n    print(perfect_squares(100, 250))\r\n    print(perfect_squares(1000, 2500))\r\n    print(perfect_squares(10000, 25000))\r\n    print(perfect_squares(25000,","votes":null},{"text":"\r\n    # return [i**2 for i in range(a, b + 1) if i**2 % 2 == 0]\r\n    return [i ** 2 for i in range(a, b + 1) if i ** 2 % 2 == 0]\r\n\r\n\r","votes":null},{"text":"\r\n    return [i ** 2 for i in range(a, b + 1) if (i ** 2) % 2 == 0]\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 % 1 == 0:\r\n            print(i)\r\n\r\n\r","votes":null},{"text":"\r\n    return [num for num in range(a, b) if num ** 0.5 % 1 == 0]\r\n\r\n\r\nprint(perfect_squares(1, 10))\r\nprint(perfect_squares(1, 11))\r\nprint(perfect_squares(1, 12))\r\nprint(perfect_squares(1, 13))\r\nprint(perfect_squares(1, 14))\r\nprint(perfect_squares(1, 15))\r\nprint(perfect_squares(1, 16))\r\nprint(perfect_squares(1, 17))\r\nprint(perfect_squares(1, 18))\r\nprint(perfect_squares(1, 19))\r\nprint(perfect_squares(1, 20))\r\nprint(perfect_squares(1, 21))\r\nprint(perfect_squares(1, 22))\r\nprint(perfect_squares(1, 23))\r\nprint(perfect_squares(1, 24))\r\nprint(perfect_squares(1, 25))\r\nprint(perfect_squares(1, 26))\r\nprint(perfect_squares(1, 27))\r\nprint(perfect_squares(1, 28))\r\nprint(perfect_squares(1, 29))\r\nprint(perfect_squares(1, 30))\r\nprint(perfect_squares(1, 31))\r\nprint(perfect_squares(1, 32))\r\nprint(perfect_squares(1, 33))\r\nprint(perfect_squares(1, 34))\r\nprint(perfect_squares(1, 35))\r\nprint(perfect_squares(1, 36))\r\nprint(perfect_squares(1, 37))\r\nprin","votes":null},{"text":"\r\n    return all(i ** 0.5 == int(i ** 0.5) for i in range(a, b + 1))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return [x**2 for x in range(a, b+1) if is_perfect_square(x)]\r\n\r\n\r","votes":null},{"text":"\r\n    assert a < b, \"a must be less than b\"\r\n    assert a > 0, \"a must be greater than 0\"\r\n    return [i ** 2 for i in range(a, b + 1) if (i ** 2) % b == 0]\r\n\r\n\r","votes":null},{"text":"\r\n    return [x * x for x in range(a, b + 1) if is_perfect_square(x * x)]\r\n\r\n\r","votes":null},{"text":"\r\n    return list(filter(lambda x: x * x > a and x * x < b, range(a, b + 1)))\r\n\r\n\r","votes":null},{"text":"\r\n    return [i * i for i in range(a, b) if is_perfect_square(i * i)]\r\n\r\n\r","votes":null},{"text":"\r\n    squares = [x * x for x in range(a, b + 1) if x * x >= a and x * x <= b]\r\n    print(f\"Perfect squares between {a} and {b} inclusive: {squares}\")\r\n    return squares\r\n\r\n\r\n# perfect_squares(1, 10)\r\n# perfect_squares(1, 100)\r\n# perfect_squares(1, 1000)\r\n# perfect_squares(10, 1000)\r\n# perfect_squares(10, 10000)\r\n# perfect_squares(100, 10000)\r\n# perfect_squares(1000, 10000)\r\n# perfect_squares(1000, 100000)\r\n# perfect_squares(10000, 100000)\r\n# perfect_squares(100000, 100000)\r\n# perfect_squares(100000, 1000000)\r\n# perfect_squares(100000, 10000000)\r\n# perfect_squares(1000000, 10000000)\r\n# perfect_squares(1000000, 100000000)\r\n# perfect_squares(10000000, 100000000)\r\n# perfect_squares(10000000, 1000000000)\r\n# perfect_squares(100000000, 1000000000)\r\n# perfect_squares(100000000, 10000000000)\r\n# perfect_squares(1000000000, 10000000","votes":null},{"text":"\r\n\r\n    squares = []\r\n    for square in range(a, b+1):\r\n        if square == int(square**0.5):\r\n            squares.append(square)\r\n    return squares\r\n\r\n\r","votes":null},{"text":"\r\n    if a <= 0 or b <= 0:\r\n        return None\r\n    if a > b:\r\n        return None\r\n    return [x for x in range(a, b + 1) if x ** 0.5 % 1 == 0]\r\n\r\n\r\n# test\r\nassert perfect_squares(1, 3) == [1, 2]\r\nassert perfect_squares(1, 100) == [1, 4, 9, 16, 25, 36, 49, 64, 81]\r\nassert perfect_squares(2, 100) == [4, 9, 16, 25, 36, 49, 64, 81]\r\nassert perfect_squares(1, 10) == [1, 4, 9]\r\nassert perfect_squares(1, 1000) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\nassert perfect_squares(1, 1) == [1]\r\nassert perfect_squares(2, 2) == [4]\r\nassert perfect_squares(2, 3) == [4]\r\nassert perfect_squares(2, 9) == [4, 9]\r\nassert perfect_squares(2, 10) == [4, 9]\r\nassert perfect_squares(2, 11) == [4, 9]\r\nassert perfect_squares(2, 12) == [4, 9]\r\nassert perfect_squares(2, 13) == [4, 9]\r\nassert perfect_squares(2, 14) == [4, 9]\r\nassert perfect_squares(2, 15) == [4, 9]\r\nassert perfect_squares(2, 16) == [4, 9","votes":null},{"text":"\r\n    squares = [i ** 2 for i in range(a, b + 1)]\r\n    return squares\r\n\r\n\r","votes":null},{"text":"\r\n    return [n**2 for n in range(a, b + 1) if n**2 >= a and n**2 <= b]\r\n\r\n\r","votes":null},{"text":"\r\n    squares = []\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r\nprint(perfect_squares(1, 10))\r\nprint(perfect_squares(2, 25))\r\nprint(perfect_squares(4, 9))\r\nprint(perfect_squares(1, 1))\r\nprint(perfect_squares(1, ","votes":null},{"text":"\r\n    return set(range(a, b + 1)).intersection(set(i * i for i in range(a, b + 1)))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(1, 2))  # {1}\r\n    print(perfect_squares(1, 4))  # {1, 4}\r\n    print(perfect_squares(2, 4))  # {4}\r\n    print(perfect_squares(2, 10))  # {3, 4}\r\n    print(perfect_squares(3, 10))  # {4, 9}\r\n    print(perfect_squares(10, 10))  # {10}\r\n    print(perfect_squares(10, 11))  # {10}\r\n    print(perfect_squares(1, 1000000))  # {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\r\n","votes":null},{"text":"\r\n    print(list(i**2 for i in range(a, b)))\r\n\r\n\r\nperfect_squares(3, 20)\r\n\r\n\r","votes":null},{"text":"\r\n    return {x for x in range(a, b + 1) if x ** 0.5 % 1 == 0}\r\n\r\n\r","votes":null},{"text":"\r\n    return [n**2 for n in range(a, b + 1) if int(n**0.5)**2 == n]\r\n\r\n\r","votes":null},{"text":"\r\n    return [i ** 2 for i in range(a, b + 1) if (i ** 2) % 2 == 0]\r\n\r\n\r\nprint(perfect_squares(3, 10))\r\nprint(per","votes":null},{"text":"\r\n    return [i**2 for i in range(a, b+1) if i**2 in range(a, b+1)]\r\n\r\n\r\n# Test cases\r\nprint(perfect_squares(1, 100))\r\nprint(perfect_squares(7, 32))","votes":null},{"text":"\r\n\r\n    return [i**2 for i in range(a, b + 1) if i**2 >= a and i**2 <= b]\r\n\r\n\r","votes":null},{"text":"\r\n    return [x*x for x in range(a,b+1) if x*x >= a and x*x <= b]\r\n\r","votes":null},{"text":"\r\n    return [i*i for i in range(a, b+1) if is_perfect_square(i)]\r\n\r\n\r","votes":null},{"text":"\r\n    return [i ** 2 for i in range(a, b + 1) if (i ** 0.5) % 1 == 0]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(perfect_squares(0, 5))\r\n    print(perfect_squares(0, 10))\r\n    print(perfect_squares(0, 100))\r\n    print(perfect_squares(-10, 10))\r\n    print(perfect_squares(-100, 100))\r\n    print(perfect_squares(-1000, 1000))\r\n    print(perfect_squares(-100000000, 100000000))\r\n    print(perfect_squares(-10000000000000000000, 10000000000000000000))\r\n    print(perfect_squares(-100000000000000000000, 100000000000000000000))\r\n    print(perfect_squares(0, 0))\r\n    print(perfect_squares(100, 100))\r\n    print(perfect_squares(1000000000000000000000, 1000000000000000000000))\r\n    print(perfect_squares(1000000000000000000000, 1000000000000000000000))\r\n    print(perfect_squares(-10000000000000","votes":null},{"text":"\r\n    i = a\r\n    squares = []\r\n    while i <= b:\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            squares.append(i)\r\n        i += 1\r\n    return squares\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(1, 10))\r\n    print(perfect_squares(1, 100))\r\n    print(perfect_squares(1, 10000))\r\n    print(perfect_squares(1, 100000))\r\n    print(perfect_squares(1, 1000000))\r\n    print(perfect_squares(1, 10000000))\r\n    print(perfect_squares(1, 100000000))\r\n    print(perfect_squares(1, 1000000000))\r\n    print(perfect_squares(1, 10000000000))\r\n    print(perfect_squares(1, 100","votes":null},{"text":"\r\n    return [x for x in range(a, b) if x ** 0.5 == int(x ** 0.5)]\r\n\r\n\r","votes":null},{"text":"\r\n    return [x*x for x in range(a, b+1) if x*x >= a and x*x <= b]\r\n\r","votes":null},{"text":"\r\n    return filter(lambda x: x ** 0.5 % 1 == 0, range(a, b))\r\n\r\n\r","votes":null},{"text":"\r\n    return [i**2 for i in range(a, b + 1) if i**2 % b == 0]\r\n\r\n\r","votes":null},{"text":"\r\n    perfect_squares = []\r\n    square = a\r\n    while square <= b:\r\n        if (square ** 0.5) % 1 == 0:\r\n            perfect_squares.append(square)\r\n        square += 1\r\n    return perfect_squares\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(perfect_squares(2, 25))\r\n    print(perfect_squares(1, 25))\r\n    print(perfect_squares(2, 15))\r\n    print(perfect_squares(1, 20))\r\n    print(perfect_squares(1, 26))\r\n    print(perfect_squares(1, 27))\r\n    print(perfect_squares(1, 28))\r\n    print(perfect_squares(1, 29))\r\n    print(perfect_squares(1, 30))\r\n    print(perfect_squares(1, 31))\r\n    print(perfect_squares(1, 32))\r\n    print(perfect_squares(1, 33))\r\n    print(perfect_squares(1, 34))\r\n    print(perfect_squares(1, 35))\r\n    print(perfect_squares(1, 36))\r\n    print(perfect_squares(1, 37))\r\n    print(perfect_squares(1, 38))\r\n    print(perfect_squares(1, 39))\r\n    print(perfect_squares(1, 40))\r\n    print(perfect_squares(1, 41))\r\n    print(perfect_squares(1, 42))\r\n    print(perfect_squares(1, 43))\r\n    print(perfect_squares(1, 44))\r\n    print(perfect_sq","votes":null}],"time":{"count":32.0,"avg":254262.02075,"std":375466.8106479921,"cov":1.4766924669}}
{"id":591,"question":"def swap_List(newList):\r\n    \"\"\"Write a python function to interchange the first and last elements in a list.\"\"\"","answers":[{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r","votes":75486.68},{"text":"\r\n    \r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":84317.656},{"text":"\r\n    if len(newList) > 1:\r\n        temp = newList[0]\r\n        newList[0] = newList[-1]\r\n        newList[-1] = temp\r\n\r\n    return newList\r\n\r\n\r","votes":86529.304},{"text":"\r\n    list = newList\r\n    list[0], list[-1] = list[-1], list[0]\r\n    return list\r\n\r\n\r","votes":88716.284},{"text":"\r\n    return [newList[-1]] + newList[1:-1] + [newList[0]]\r\n\r","votes":90477.984},{"text":"\r\n    if len(newList) > 1:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n        return newList\r\n    else:\r\n        return \"List should have atleast 2 elements.\"\r\n\r\n\r","votes":91711.712},{"text":"\r\n    if len(newList)==0:\r\n        return newList\r\n    else:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n        return newList\r\n\r","votes":92095.828},{"text":"\r\n\r\n    if len(newList) > 1:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":93851.628},{"text":"\r\n    \r\n    #print(newList)\r\n    #print(newList[0])\r\n    #print(newList[-1])\r\n    \r\n    #temp = newList[0]\r\n    #newList[0] = newList[-1]\r\n    #newList[-1] = temp\r\n    \r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    \r\n    print(newList)\r\n    return newList\r\n\r","votes":93965.664},{"text":"\r\n    \r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nif __name__ == '__main__':\r\n    newList = [1, 2, 3, 4, 5]\r\n    print(\"The new list is: \", swap_List(newList))\r\n    \r\n    \r\n    # Output:\r\n    # The new list is:  [5, 2, 3, 4, 1]\r\n\r\n\r","votes":94443.732},{"text":"\r\n    \r\n    # swap_List\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\n# swap_List\r","votes":101128.748},{"text":"\r\n    \r\n    if len(newList) > 1:\r\n        newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0]\r\n    return newList\r\n\r\n\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(\"List:\", list)\r\nprint(\"Swapped List:\", swap_List(list))\r\n\r\n\r\n# 2. Write a python function to interchange the first and last elements in a list.\r\n# 3. Write a python function to interchange the first and last elements in a list.\r\n# 4. Write a python function to interchange the first and last elements in a list.\r\n# 5. Write a python function to interchange the first and last elements in a list.\r\n# 6. Write a python function to interchange the first and last elements in a list.\r\n# 7. Write a python function to interchange the first and last elements in a list.\r\n# 8. Write a python function to interchange the first and last elements in a list.\r\n# 9. Write a python function to interchange the first and last elements in a list.\r\n# 10. Write a python function to interchange the first and last elements in a list.\r\n\r\n\r\n#","votes":101205.344},{"text":"\r\n    if type(newList) == list:\r\n        return [newList[-1]] + newList[1:-1] + [newList[0]]\r\n    else:\r\n        return None\r\n\r\n\r","votes":103371.264},{"text":"\r\n    \r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    \r\n    return newList\r\n\r\nprint(swap_List([1, 2, 3, 4, 5]))\r\n\r\nprint(swap_List([1, 2, 3, 4, 5]))\r\n\r\n\r","votes":105009.72},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r","votes":106663.332},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":107570.276},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r\n\r","votes":108395.084},{"text":"\r\n    first_element = newList[0]\r\n    last_element = newList[-1]\r\n    newList[0] = last_element\r\n    newList[-1] = first_element\r\n    return newList\r\n\r\n\r\nnewList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(newList)\r\nprint(swap_List(newList))\r\n\r\n\"\"\"Question 2\r\nWrite a Python program to create a new list from the given list with the last element repeated three times.\r\nSample Output:\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9]\r\n\"\"\"\r\n\r\n\r","votes":108700.468},{"text":"\r\n\r\n    if isinstance(newList,list):\r\n        for i in range(len(newList)):\r\n            if i == 0:\r\n                f_e = newList[i]\r\n            elif i == (len(newList)-1):\r\n                l_e = newList[i]\r\n        newList[i] = f_e\r\n        newList[0] = l_e\r\n        return newList\r\n    else:\r\n        return \"Please enter a list\"\r\n\r\n# swap_List([1,2,3,4])\r\n# [4, 2, 3, 1]\r\n\r","votes":108771.568},{"text":"\r\n    \r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r","votes":110556.284},{"text":"\r\n    if newList == []:\r\n        return \"Empty List\"\r\n    \r\n    temp = newList[len(newList)-1]\r\n    newList[len(newList)-1] = newList[0]\r\n    newList[0] = temp\r\n    return newList\r\n\r\n\r\n\r","votes":110802.636},{"text":"\r\n    \r\n    first, last = newList[0], newList[-1]\r\n    newList[0], newList[-1] = last, first\r\n    return newList\r\n\r\n\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n\r\n\r\n# 3. Write a python function to find the sum of numbers in a list.\r\n\r","votes":110988.596},{"text":"\r\n    return [newList[-1]] + newList[1:-1] + [newList[0]]\r\n\r\n\r","votes":113194.272},{"text":"\r\n    # your code here\r\n    if type(newList) != list:\r\n        return \"Please enter a list!\"\r\n    else:\r\n        temp = newList[0]\r\n        newList[0] = newList[-1]\r\n        newList[-1] = temp\r\n        return newList\r\n\r\n\r","votes":113933.264},{"text":"\r\n\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":116183.528},{"text":"\r\n    \r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r\n# Test cases\r","votes":118695.744},{"text":"\r\n    if len(newList) == 1:\r\n        return newList\r\n    else:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n        return newList\r\n\r\n\r","votes":123271.74},{"text":"\r\n    last = newList[-1]\r\n    newList[-1] = newList[0]\r\n    newList[0] = last\r\n    return newList\r\n\r","votes":124402.088},{"text":"\r\n    if len(newList) == 0:\r\n        return []\r\n    else:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":128366.492},{"text":"\r\n    \r\n    first_element = newList[0]\r\n    last_element = newList[-1]\r\n    newList[0] = last_element\r\n    newList[-1] = first_element\r\n    return newList\r\n\r\n\r","votes":129588.916},{"text":"\r\n    newList[0],newList[-1]=newList[-1],newList[0]\r\n    return newList\r\n\r","votes":129800.612},{"text":"\r\n    # Code here!\r\n    newList[0],newList[-1]=newList[-1],newList[0]\r\n    return newList\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# swap_List([1, 2, 3, 4])\r","votes":130041.692},{"text":"\r\n    \r\n    if len(newList) == 0:\r\n        return None\r\n    else:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n        return newList\r\n\r\n\r","votes":133396.572},{"text":"\r\n    n = len(newList)\r\n    if n <= 1:\r\n        return newList\r\n    else:\r\n        return [newList[-1]] + newList[1:-1] + [newList[0]]\r\n\r\n\r","votes":134496.568},{"text":"\r\n    if len(newList) == 0:\r\n        return None\r\n    else:\r\n        temp = newList[0]\r\n        newList[0] = newList[-1]\r\n        newList[-1] = temp\r\n        return newList\r\n\r","votes":135907.22},{"text":"\r\n    if (len(newList) > 1):\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":138116.496},{"text":"\r\n\r\n    # swap the first and last elements in a list\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return(newList)\r\n\r\n\r\n\r","votes":148094.084},{"text":"\r\n    \r\n    # Swap the first and last \r\n    # values using list slicing\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n# Driver Code\r\nList = [1, 2, 3, 4]\r\nprint(\"List before swapping: \", List)\r\nprint(\"List after swapping: \", swap_List(List))\r\n\r\n\r\n# Output\r\n# List before swapping:  [1, 2, 3, 4]\r\n# List after swapping:  [4, 2, 3, 1]\r\n\r\n\r\n\r\n# Python program to interchange first and last elements in a list\r","votes":150041.112},{"text":"\r\n\r\n    # create variable to store the length of the list\r\n    length = len(newList)\r\n\r\n    # create variable to store the first element of the list\r\n    first_element = newList[0]\r\n\r\n    # create variable to store the last element of the list\r\n    last_element = newList[length - 1]\r\n\r\n    # swap the first and last element\r\n    newList[0] = last_element\r\n    newList[length - 1] = first_element\r\n\r\n    # return the swapped list\r\n    return newList\r\n\r\n\r\n# call the function\r\nswap_List([2, 5, 1, 4, 3])\r\n\r\n\r","votes":156524.468},{"text":"\r\n    \r\n    #initialization\r\n    \r\n    #swapping\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    \r\n    #return\r\n    return newList\r\n\r\n\r","votes":156657.136},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r\n# newList = [1, 2, 3, 4]\r\n# print(swap_List(newList))\r\n\r","votes":157074.504},{"text":"\r\n    x=newList[-1]\r\n    newList[-1]=newList[0]\r\n    newList[0]=x\r\n    return newList\r\n\r","votes":157246.476},{"text":"\r\n\r\n    length = len(newList)\r\n    if length > 1:\r\n        first_element = newList[0]\r\n        last_element = newList[length-1]\r\n        newList[0] = last_element\r\n        newList[length-1] = first_element\r\n        return newList\r\n    else:\r\n        return newList\r\n\r\n\r","votes":159895.824},{"text":"\r\n\r\n    if type(newList) != list:\r\n        raise TypeError(\"Please enter a list\")\r\n    if len(newList) == 0:\r\n        raise IndexError(\"The list is empty\")\r\n    if len(newList) == 1:\r\n        return newList\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\n\r","votes":163789.316},{"text":"\r\n    \r\n    # store the value of the first element in the list\r\n    first_value = newList[0]\r\n    \r\n    # store the value of the last element in the list\r\n    last_value = newList[-1]\r\n    \r\n    # assign the last element value to the first element\r\n    newList[0] = last_value\r\n    \r\n    # assign the first element value to the last element\r\n    newList[-1] = first_value\r\n    \r\n    return newList\r\n\r\n# create a list\r\nnewlist = [1, 2, 3, 4, 5]\r\n\r\n# call the function\r\nnewlist = swap_List(newlist)\r\n\r\n# print the list\r\nprint(newlist)\r\n\r\n\r","votes":184368.824},{"text":"\r\n    oldList = newList.copy()\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return oldList, newList\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    newList.append(newList[0])\r\n    del newList[0]\r\n    return newList\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(newList) <= 1:\r\n        return newList\r\n    else:\r\n        return [newList[-1]] + newList[1:-1] + [newList[0]]\r\n\r\n\r\nprint(swap_List([1, 2, 3, 4]))\r\nprint(swap_List([1, 2, 3, 4, 5]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(swap_List([1, 2, 3, 4, 5,","votes":null},{"text":"\r\n    newList.insert(0, newList.pop(-1))\r\n    return newList\r\n    \r","votes":null},{"text":"\r\n    \r\n    return newList[::-1]\r\n\r","votes":null},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n\r","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    print(newList)\r\n    # Swap the first and last elements\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    print(newList)\r\n    \r\n\r\n\r\nprint(\"Swap the first and last elements in a list: \")\r\nswap_List([1, 2, 3, 4, 5])\r\n\r\n\r","votes":null},{"text":"\r\n    newList.insert(0,newList[-1])\r\n    newList.remove(newList[-1])\r\n    return newList\r\n\r\n\r\nprint(swap_List([1,2,3,4,5]))\r\n\r","votes":null},{"text":"\r\n\r\n    if len(newList) == 0:\r\n        print(\"List is empty\")\r\n    else:\r\n        print(\"original list\", newList)\r\n        temp = newList[0]\r\n        newList[0] = newList[-1]\r\n        newList[-1] = temp\r\n        print(\"new list\", newList)\r\n\r\n\r","votes":null},{"text":"\r\n    # create a empty list\r\n    newList.append(newList[0])\r\n    # get the first element\r\n    first = newList[0]\r\n    # get the second element\r\n    second = newList[-1]\r\n    # replace the first element with second\r\n    newList[0] = second\r\n    # replace the last element with first\r\n    newList[-1] = first\r\n    # return the list\r\n    return newList\r\n\r\n\r\n# Driver code\r\nli = [1, 2, 3, 4, 5]\r\nprint(\"Before interchanging the","votes":null},{"text":"\r\n    newList.append(newList[0])\r\n    newList.pop(0)\r\n    newList.insert(0, newList[-1])\r\n    newList.pop(-1)\r\n    return newList\r\n\r","votes":null},{"text":"\r\n\r\n    firstEl = newList[0]\r\n    lastEl = newList[-1]\r\n\r\n    newList[0] = lastEl\r\n    newList[-1] = firstEl\r\n\r\n    return newList\r\n\r\n\r\n# Output\r\nprint(\"Before interchanging the first and last elements: \", newList)\r\nprint(\"After interchanging the first and last elements: \", swap_List(newList))\r\n\r\n# Another method\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    print('Original List: ', newList)\r\n    \r\n    if(len(newList) == 0):\r\n        print('Empty list')\r\n    else:\r\n        firstIndex = 0\r\n        lastIndex = len(newList) - 1\r\n        temp = newList[firstIndex]\r\n        newList[firstIndex] = newList[lastIndex]\r\n        newList[lastIndex] = temp\r\n        print('Swapped list: ', newList)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(newList) == 0:\r\n        print(\"List is empty\")\r\n    elif len(newList) == 1:\r\n        print(\"List contains only one element\")\r\n    else:\r\n        temp = newList[0]\r\n        newList[0] = newList[len(newList)-1]\r\n        newList[len(newList)-1] = temp\r\n        print(\"New List is: \",newList)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #return newList[0], newList[len(newList)-1]\r\n    return newList[len(newList)-1], newList[0]\r\n\r","votes":null},{"text":"\r\n    \r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    \r\n    return newList\r\n\r\n\r\n# Test case 1\r\nmyList = [1, 2, 3, 4, 5, 6]\r\nprint(swap_List(myList))\r\n# Expected output:\r\n'''\r\n[6, 2, 3, 4, 5, 1]\r\n'''\r\n\r\n# Test case 2\r\nmyList = [5, 4, 3, 2, 1]\r\nprint(swap_List(myList))\r\n# Expected output:\r\n'''\r\n[1, 4, 3, 2, 5]\r\n'''\r\n\r\n# Test case 3\r\nmyList = ['a', 'b', 'c']\r\nprint(swap_List(myList))\r\n# Expected output:\r\n'''\r\n['c', 'b', 'a']\r\n'''\r\n\r\n# Test case 4\r\nmyList = ['a', 'b', 'c', 'd', 'e']\r\nprint(swap_List(myList))\r\n# Expected output:\r\n'''\r\n['e', 'b', 'c', 'd', 'a']\r\n'''\r\n\r\n# Test case 5\r\nmyList = ['a', 'b', 'c', 'd', 'e', 'f']\r\nprint(swap_List(myList))\r\n# Expected output:\r\n'''\r\n['f', 'b', 'c', 'd', 'e', 'a']\r\n'''\r\n\r\n# Test case 6\r\nmyList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(swap_List(myList))\r\n# Expected output:\r\n'''\r\n[9, 2, 3, 4, 5, 6, 7, 8, 1]\r\n''","votes":null},{"text":"\r\n    \r\n    if type(newList) == 'str':\r\n        newList = newList.split(\" \")\r\n        \r\n    if type(newList) == 'int':\r\n        newList = [newList]\r\n    \r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nprint(swap_List([1, 2, 3, 4]))\r\nprint(swap_List(\"1 2 3 4\"))\r\nprint(swap_List(1))\r\n\r\n\r","votes":null},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    print(newList)\r\n\r\n# swap_List([1, 2, 3, 4, 5])\r\n# swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n# swap_List([1, 2, 3])\r\nswap_List([1])\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    last = newList[-1]\r\n    newList[-1] = newList[0]\r\n    newList[0] = last\r\n    print(newList)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if len(newList) == 1:\r\n        return [newList[0]]\r\n    return [newList[-1]] + swap_List(newList[1:-1]) + [newList[0]]\r\n\r\n\r\nprint(swap_List([1, 2, 3, 4, 5]))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    print(\"Original list:\", newList)\r\n\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n\r\n    print(\"Modified list:\", newList)\r\n\r\n\r","votes":null},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    print(newList)\r\n\r\n\r\nif __name__ == '__main__':\r\n    newList = [1, 2, 3, 4, 5]\r\n    swap_List(newList)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return newList[::-1]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # First, check if the list is empty or not\r\n    if len(newList) == 0:\r\n        print(\"The list is empty.\")\r\n        return\r\n\r\n    # Swap the elements\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n\r\n    # Display the list\r\n    print(\"The swapped list is: \", end=\"\")\r\n    for i in newList:\r\n        print(i, end=\" \")\r\n\r\n\r\n# Driver code\r\nnewList = [1, 2, 3, 4, 5]\r\nswap_List(newList)\r\n\r\nnewList = [1, 2, 3]\r\nswap_List(newList)\r\n\r\nnewList = [1]\r\nswap_List(newList)\r\n\r\nnewList = []\r\nswap_List(newList)\r\n\r\n\"\"\"\r\nTime Complexity: O(1) where '1' denotes the number of elements in the list.\r\nSpace Complexity: O(1) where '1' denotes the number of elements in the list.\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nEnter the elements of the list: 1 2 3 4 5\r\nThe swapped list is: 5 2 3 4 1\r\n\r\nSAMPLE 2\r\n\r\nEnter the elements of the list: 1 2 3\r\nThe swapped list is: 3 2 1\r\n\r\nSAMPLE 3\r\n\r\nEnter the elements of the list: 1\r\nThe swapped list is: 1\r\n\r\nSAMPLE 4\r\n\r\nEnter the elements of the list:\r\nThe list is empty.\r\n\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nWe can also use the pop() method of the list to swap the first and last elements.\r\n\r\nPSEUDOCODE\r\n\r\n1. Check if the list is empty or not.\r\n2. Po","votes":null},{"text":"\r\n    \r\n    a = newList[0]\r\n    b = newList[len(newList)-1]\r\n    newList[0] = b\r\n    newList[len(newList)-1] = a\r\n    print(newList)\r\n\r","votes":null},{"text":"\r\n    n = len(newList)\r\n    if n == 0:\r\n        return []\r\n    return newList[-1:] + newList[:-1]\r\n\r\n\r","votes":null},{"text":"\r\n    print(\"The original List is: \", newList)\r\n    x = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = x\r\n    print(\"The modified list is: \", newList)\r\n    \r\n    \r","votes":null},{"text":"\r\n    swapList = newList\r\n    swapList[0], swapList[-1] = swapList[-1], swapList[0]\r\n    return swapList\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [1, 2, 3, 4, 5]\r\n    print(\"Original list: \", list1)\r\n    print(\"Swap List: \", swap_List(list1))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(1)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nOriginal list:  [1, 2, 3, 4, 5]\r\nSwap List:  [5, 2, 3, 4, 1]\r\n\r\nSAMPLE II\r\n\r\nOriginal list:  [1, 2, 3, 4, 5, 6, 7]\r\nSwap List:  [7, 2, 3, 4, 5, 6, 1]\r\n\r\nSAMPLE III\r\n\r\nOriginal list:  [1, 2, 3, 4, 5, 6, 7, 8]\r\nSwap List:  [8, 2, 3, 4, 5, 6, 7, 1]\r\n\r\nSAMPLE IV\r\n\r\nOriginal list:  [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nSwap List:  [9, 2, 3, 4, 5, 6, 7, 8","votes":null},{"text":"\r\n    \r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    print(newList)\r\n    \r\nswap_List([1,2,3,4,5])\r\n\r","votes":null},{"text":"\r\n    \r\n    newList.append(newList[0])\r\n    newList.insert(0, newList[-1])\r\n    newList.pop(-1)\r\n    return newList\r\n\r\n#-----------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    if newList == []:\r\n        raise TypeError('List cannot be empty')\r\n    else:\r\n        return [newList[-1], newList[0]] + newList[1:-1]\r\n\r\n\r","votes":null},{"text":"\r\n    print(\"Original List: \",newList)\r\n    newList[0],newList[-1] = newList[-1],newList[0]\r\n    print(\"New List: \",newList)\r\n\r","votes":null},{"text":"\r\n    print(newList)\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    print(newList)\r\n\r\n\r\nswap_List([1, 2, 3])\r\nswap_List([1, 2, 3, 4])\r\nswap_List([1, 2, 3, 4, 5])\r\n\r\n\r","votes":null},{"text":"\r\n    newList.append(newList[0])\r\n    newList[0] = newList[-1]\r\n    newList[-1] = newList[-2]\r\n    newList.pop(-2)\r\n    return newList\r\n\r","votes":null},{"text":"\r\n\r\n    newList.append(newList[0])\r\n    newList.remove(newList[0])\r\n    newList.insert(0, newList.pop())\r\n\r\n    return newList\r\n\r\n\r","votes":null},{"text":"\r\n    # print(\"Old list is\", newList)\r\n    # print(\"New list is\", newList[::-1])\r\n    return newList[::-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"\r\n    from timeit import timeit\r\n    print(timeit(stmt='swap_List([1,2,3,4,5,6,7])', setup=\"from __main__ import swap_List\"))\r\n    \"\"\"\r\n\r\n    newList = [1, 2, 3, 4, 5, 6, 7]\r\n    print(\"Old list is\", newList)\r\n    newList = swap_List(newList)\r\n    print(\"New list is\", newList)\r\n    newList = [1]\r\n    print(\"Old list is\", newList)\r\n    newList = swap_List(newList)\r\n    print(\"New list is\", newList)\r\n    newList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(\"Old list is\", newList)\r\n    newList = swap_List(newList)\r\n    print(\"New list is\", newList)\r\n    newList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(\"Old list is\", newList)\r\n    newList = swap_List(newList)\r\n    print(\"New list is\", newList)\r\n    newList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21","votes":null},{"text":"\r\n    temp=newList[0]\r\n    newList[0]=newList[-1]\r\n    newList[-1]=temp\r\n\r","votes":null},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return \"Swapped list:\", newList\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    #Code\r\n    newList[0],newList[len(newList)-1] = newList[len(newList)-1],newList[0]\r\n    return newList\r\n\r\n#Test case 1\r\nnewList = [1, 2, 3, 4, 5]\r\nprint(swap_List(newList))\r\n\r\n#Test case 2\r\nnewList = [\"a\", \"b\", \"c\", \"d\", \"e\"]\r\nprint(swap_List(newList))\r\n\r\n#Test case 3\r\nnewList = [1, 22, 333, 4444, 55555]\r\nprint(swap_List(newList))\r\n\r\n#Test case 4\r\nnewList = [\"a\", \"b\", \"c\", \"d\", \"e\"]\r\nprint(swap_List(newList))\r\n\r\n#Test case 5\r\nnewList = [1, 2, 3, 4, 5]\r\nprint(swap_List(newList))\r\n\r\n#Test case 6\r\nnewList = [1, 2, 3, 4, 5]\r\nprint(swap_List(newList))\r\n\r\n#Test case 7\r\nnewList = [\"a\", \"b\", \"c\", \"d\", \"e\"]\r\nprint(swap_List(newList))\r\n\r\n#Test case 8\r\nnewList = [1, 22, 333, 4444, 55555]\r\nprint(swap_List(newList))\r\n\r\n#Test case 9\r\nnewList = [\"a\", \"b\", \"c\", \"d\", \"e\"]\r\nprint(swap_List(newList))\r\n\r\n#Test case 10\r\nnewList = [1, 2, 3, 4, 5]\r\nprint(swap_List(newList))\r\n\r\n#Test case 11\r\nnewLis","votes":null},{"text":"\r\n    \r\n    return newList[::-1]\r\n\r\n\r","votes":null},{"text":"\r\n    #list = []\r\n    a = newList[0]\r\n    b = newList[-1]\r\n    #list.append(b)\r\n    #list.append(a)\r\n    newList.pop(0)\r\n    newList.append(a)\r\n    newList.insert(0,b)\r\n    return newList\r\n\r\n\r\n\r\n\r","votes":null}],"time":{"count":45.0,"avg":119507.7053333333,"std":25332.8712772454,"cov":0.2119768864}}
{"id":593,"question":"def removezero_ip(ip):\r\n    \"\"\"Write a function to remove leading zeroes from an ip address.\"\"\"","answers":[{"text":"\r\n    octets = ip.split('.')\r\n    return '.'.join([octet.lstrip('0') or '0' for octet in octets])\r\n\r\n\r","votes":63325.584},{"text":"\r\n    ip = ip.split(\".\")\r\n    ip = \".\".join([str(int(i)) for i in ip])\r\n    return ip\r\n\r\n\r","votes":82748.76},{"text":"\r\n    return '.'.join([str(int(i)) for i in ip.split('.')])\r\n\r\n\r","votes":83873.636},{"text":"\r\n    ip = ip.split('.')\r\n    ip = [str(int(i)) for i in ip]\r\n    return '.'.join(ip)\r\n\r\n\r","votes":92498.868},{"text":"\r\n    # 0.0.0.0 -> 0.0.0\r\n    # 0.0.0.1 -> 0.0.0.1\r\n    # 0.0.1.0 -> 0.0.1\r\n    # 0.1.0.0 -> 0.1\r\n    # 1.0.0.0 -> 1\r\n\r\n    iplist = ip.split(\".\")\r\n    iplist = [int(i) for i in iplist]\r\n    iplist = [str(i) for i in iplist]\r\n    while iplist[0] == \"0\" and len(iplist) > 1:\r\n        iplist.pop(0)\r\n    ip = \".\".join(iplist)\r\n    return ip\r\n\r\n\r","votes":95384.044},{"text":"\r\n    return '.'.join(map(lambda x: str(int(x)), ip.split('.')))\r\n\r","votes":95865.592},{"text":"\r\n    ip = str(ip)\r\n    ip = ip.split(\".\")\r\n    ip = [x.lstrip(\"0\") for x in ip]\r\n    ip = \".\".join(ip)\r\n    return ip\r\n\r","votes":96153.076},{"text":"\r\n    return ip.lstrip('0').replace('0', '')\r\n\r\n\r","votes":96833.108},{"text":"\r\n    return '.'.join(map(lambda x: str(int(x)), ip.split('.')))\r\n\r\n\r","votes":98284.692},{"text":"\r\n    return '.'.join([str(int(i)) for i in ip.split('.')])\r\n\r","votes":99460.036},{"text":"\r\n    ip = str(ip)\r\n    ip = ip.split('.')\r\n    ip = [int(i) for i in ip]\r\n    ip = [str(i) for i in ip]\r\n    ip = [i.lstrip('0') for i in ip]\r\n    ip = [i if i else '0' for i in ip]\r\n    ip = '.'.join(ip)\r\n    return ip\r\n\r\n\r\n\r\n#\r\n#","votes":102487.512},{"text":"\r\n    ip_list = list(map(int, ip.split('.')))\r\n    ip_list = [str(i) for i in ip_list if i != 0]\r\n    return '.'.join(ip_list)\r\n\r\n\r\n#print(removezero_ip('192.168.0.1'))\r\n\r","votes":106634.42},{"text":"\r\n\r\n    return \".\".join(str(int(i)) for i in ip.split(\".\"))\r\n\r\n\r","votes":111509.02},{"text":"\r\n    return \".\".join([str(int(i)) for i in ip.split(\".\")])\r\n\r","votes":111668.664},{"text":"\r\n    output = []\r\n    for i in ip.split('.'):\r\n        if i[0] == '0' and len(i) > 1:\r\n            i = i[1:]\r\n        output.append(i)\r\n    return '.'.join(output)\r\n\r\n\r","votes":114611.664},{"text":"\r\n\r\n    # The ip address is made up of four octets, so we need to split it by '.'\r\n    # and then remove the leading zeroes in each octet\r\n    octets = ip.split('.')\r\n\r\n    # Create a new list to store the cleaned up octets\r\n    cleaned_octets = []\r\n\r\n    # Iterate through each octet and remove the leading zeroes\r\n    for octet in octets:\r\n        cleaned_octets.append(str(int(octet)))\r\n\r\n    # Return the cleaned up ip address as a string\r\n    return '.'.join(cleaned_octets)\r\n\r\n\r","votes":116674.856},{"text":"\r\n    ip = str(ip)\r\n    ip = ip.split('.')\r\n    ip = [int(i) for i in ip]\r\n    ip = [str(i) for i in ip]\r\n    ip = '.'.join(ip)\r\n    return ip\r\n\r","votes":122690.416},{"text":"\r\n    ip = ip.split('.')\r\n    ip = '.'.join([str(int(i)) for i in ip])\r\n    return ip\r\n\r\n\r","votes":122905.916},{"text":"\r\n    ip = str(ip)\r\n    ip = ip.split(\".\")\r\n    newip = []\r\n    for item in ip:\r\n        if item.startswith(\"0\"):\r\n            item = item.lstrip(\"0\")\r\n        newip.append(item)\r\n    return \".\".join(newip)\r\n\r\n\r","votes":126535.872},{"text":"\r\n\r\n    return '.'.join(str(int(i)) for i in ip.split('.'))\r\n\r","votes":127833.032},{"text":"\r\n    ip = ip.split('.')\r\n    for i in range(len(ip)):\r\n        while ip[i].startswith('0') and len(ip[i]) > 1:\r\n            ip[i] = ip[i][1:]\r\n    return '.'.join(ip)\r\n\r","votes":129286.064},{"text":"\r\n    ip = list(ip)\r\n    new_ip = []\r\n    for i in ip:\r\n        if i == \"0\":\r\n            pass\r\n        else:\r\n            new_ip.append(i)\r\n    new_ip = \"\".join(new_ip)\r\n    return new_ip\r\n\r\n\r\nprint(removezero_ip(\"000000000\"))\r\n\r\n# 000000000 ---> 0\r\n# 100100101 ---> 100100101\r\n# 100100000 ---> 1001000\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 ---> 0\r\n# 000000000 --->","votes":139027.768},{"text":"\r\n    if \".\" in ip:\r\n        ip = ip.split(\".\")\r\n        return \".\".join(map(str, [int(i) for i in ip]))\r\n    elif \":\" in ip:\r\n        ip = ip.split(\":\")\r\n        return \":\".join(map(str, [int(i) for i in ip]))\r\n\r\n\r","votes":144692.896},{"text":"\r\n    if len(ip) == 3:\r\n        return ip\r\n    ip = ip.split('.')\r\n    for i in range(len(ip)):\r\n        if ip[i][0] == '0' and len(ip[i]) > 1:\r\n            ip[i] = ip[i][1:]\r\n        else:\r\n            continue\r\n    ip = '.'.join(ip)\r\n    return ip\r\n\r\n\r","votes":148984.4},{"text":"\r\n    i = []\r\n    for x in ip.split(\".\"):\r\n        if x.startswith(\"0\"):\r\n            x = x[1:]\r\n        i.append(x)\r\n    return \".\".join(i)\r\n\r","votes":165442.396},{"text":"\r\n    ip = ip.split('.')\r\n    for i in range(len(ip)):\r\n        while ip[i][0] == '0' and len(ip[i]) > 1:\r\n            ip[i] = ip[i][1:]\r\n        if len(ip[i]) == 0:\r\n            ip[i] = '0'\r\n    ip = '.'.join(ip)\r\n    return ip\r\n\r","votes":171040.032},{"text":"\r\n    iplist = ip.split('.')\r\n    iplist = [int(x) for x in iplist]\r\n    for i in range(len(iplist)):\r\n        if iplist[i]==0:\r\n            iplist[i] = ''\r\n        else:\r\n            break\r\n    iplist = [str(i) for i in iplist]\r\n    iplist = '.'.join(iplist)\r\n    return iplist\r\n\r\nprint(removezero_ip(\"192.168.0.1\"))\r\nprint(removezero_ip(\"10.0.0.1\"))\r\nprint(removezero_ip(\"0.0.0.0\"))\r\nprint(removezero_ip(\"10.0.0.1\"))\r\nprint(removezero_ip(\"192.168.0.1\"))\r\nprint(removezero_ip(\"192.168.0.1\"))\r\nprint(removezero_ip(\"255.255.255.255\"))\r\nprint(removezero_ip(\"0.0.0.0\"))\r\nprint(removezero_ip(\"192.168.0.1\"))\r\nprint(removezero_ip(\"192.168.0.1\"))\r\nprint(removezero_ip(\"0.0.0.0\"))\r\nprint(removezero_ip(\"255.255.255.255\"))\r\nprint(removezero_ip(\"192.168.0.1\"))\r\nprint(removezero_ip(\"0.0.0.0\"))\r\nprint(removezero_ip(\"255.255.255.255\"))\r\nprint(removezero_ip(\"192.168.0.1\"))\r\nprint(removezero_ip(\"192.168.0.1\"))\r\nprint(removezero_ip(\"0.0.0.0\"))","votes":184063.156},{"text":"\r\n    ip = ip.split('.')\r\n    for i in range(len(ip)):\r\n        if ip[i][0] == '0' and len(ip[i]) > 1:\r\n            ip[i] = ip[i][1:]\r\n            ip[i] = str(int(ip[i]))\r\n    ip = '.'.join(ip)\r\n    return ip\r\n\r\n\r\nprint(removezero_ip('00.00.00.00'))\r\nprint(removezero_ip('100.00.00.00'))\r\nprint(removezero_ip('100.100.00.00'))\r\nprint(removezero_ip('100.100.100.00'))\r\nprint(removezero_ip('100.100.100.100'))\r\nprint(removezero_ip('00.100.100.100'))\r\nprint(removezero_ip('00.00.100.100'))\r\nprint(removezero_ip('00.00.00.100'))\r\n\r\n\r\n# Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.\r\n\r\n\r","votes":216647.656},{"text":"\r\n    ip = ip.split('.')\r\n    ip = list(map(int, ip))\r\n    ip = [str(x) for x in ip]\r\n    ip = '.'","votes":null},{"text":"\r\n\r\n    while ip[0] == '0' and len(ip) > 1:\r\n        ip = ip[1:]\r\n    return ip\r\n\r\n\r\nip = \"010.020.030.040\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"001.002.003.004\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"1.2.3.4\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.001\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprint(removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprin","votes":null},{"text":"\r\n    ip = ip.split('.')\r\n    for i in range(len(ip)):\r\n        while ip[i].startswith(\"0\") and ip[i] != \"0\":\r\n            ip[i] = ip[i][1:]\r\n    return ip\r\n\r\n\r\nprint(removezero_ip('0.0.0.0'))\r\nprint(removezero_ip('1.0.0.0'))\r\nprint(removezero_ip('10.0.0.0'))\r\nprint(removezero_ip('1.2.3.4'))\r\nprint(removezero_ip('10.20.30.40'))\r\nprint(removezero_ip('100.200.300.400'))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    ip = str(ip)\r\n    if '.' in ip:\r\n        ip = list(ip.split('.'))\r\n        ip[0] = ip[0].lstrip('0')\r\n        ip[1] = ip[1].lstrip('0')\r\n        ip[2] = ip[2].lstrip('0')\r\n        ip[3] = ip[3].lstrip('0')\r\n        ip = '.'.join(ip)\r\n    elif ':' in ip:\r\n        ip = list(ip.split(':'))\r\n        ip[0] = ip[0].lstrip('0')\r\n        ip[1] = ip[1].lstrip('0')\r\n        ip[2] = ip[2].lstrip('0')\r\n        ip[3] = ip[3].lstrip('0')\r\n        ip[4] = ip[4].lstrip('0')\r\n        ip[5] = ip[5].lstrip('0')\r\n        ip = ':'.join(ip)\r\n    else:\r\n        ip = ip.lstrip('0')\r\n    return ip\r\n\r\n\r\nif __name__ == '__main__':\r\n    ip = '0.0.0.0'\r\n    print(f\"Input: {ip}\")\r\n    print(f\"Output: {removezero_ip(ip)}\")\r\n\r\n    ip = '0.0.0.1'\r\n    print(f\"Input: {ip}\")\r\n    print(f\"Output: {removezero_ip(ip)}\")\r\n\r\n    ip = '14.0.0.0'\r\n    print(f\"Input: {ip}\")\r\n    print(f\"Output: {removezero_ip(ip)}\")\r\n\r\n    ip = '0.0.0.0'\r\n    print(f\"Input: {ip}\")\r\n    print(f\"Output: {removezero_ip(ip)}\")\r\n\r\n    ip = '0.0.0.0'\r\n    print","votes":null},{"text":"\r\n    return ip.lstrip('0') or '0'\r\n\r","votes":null},{"text":"\r\n    if ip[0] == \"0\":\r\n        return removezero_ip(ip[1:])\r\n    else:\r\n        return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip = list(ip)\r\n    while ip[0] == '0' and ip[1] == '.':\r\n        ip.remove('0')\r\n        ip.remove('.')\r\n    ip = ''.join(ip)\r\n    return ip\r\n\r\n\r\n# Test removezero_ip()\r\nprint(removezero_ip('100.100.100.100'))\r\nprint(removezero_ip('010.010.100.100'))\r\nprint(removezero_ip('000.000.000.000'))\r\n\r\n\r\n# 5. Write a function that will take an IP address as a parameter and return the number of consecutive 0s.\r","votes":null},{"text":"\r\n    \r\n    ip = ip.split('.')\r\n    for i in range(4):\r\n        while ip[i].startswith(\"0\") and ip[i] != \"0\":\r\n            ip[i] = ip[i].lstrip(\"0\")\r\n    ip = '.'.join(ip)\r\n    return ip\r\n\r\nprint(removezero_ip(\"192.168.0.1\"))\r\nprint(removezero_ip(\"10.10.10.00\"))\r\nprint(removezero_ip(\"10.10.10.010\"))\r\nprint(removezero_ip(\"10.10.10.10\"))\r\nprint(removezero_ip(\"192.168.0.0\"))\r\nprint(removezero_ip(\"192.168.0.00\"))\r\nprint(removezero_ip(\"192.168.0.000\"))\r\n\r\n#-----------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    ip_list = ip.split(\".\")\r\n    new_ip_list = []\r\n    for i in ip_list:\r\n        if i[0] == \"0\":\r\n            new_ip_list.append(i[1:])\r\n        else:\r\n            new_ip_list.append(i)\r\n    if new_ip_list[0] == \"0\":\r\n        new_ip_list[0] = \"0\"\r\n    return \".\".join(new_ip_list)\r\n\r\n\r\nprint(removezero_ip(\"192.168.100.1\"))\r\nprint(removezero_ip(\"192.168.010.1\"))\r\nprint(removezero_ip(\"192.168.001.1\"))\r\nprint(removezero_ip(\"192.168.000.1\"))\r\nprint(removezero_ip(\"192.168.000.001\"))\r\nprint(removezero_ip(\"192.168.0.0\"))\r\nprint(removezero_ip(\"192.168.0.00\"))\r\nprint(removezero_ip(\"0.168.0.0\"))\r\nprint(removezero_ip(\"00.168.0.0\"))\r\nprint(removezero_ip(\"000.168.0.0\"))\r\nprint(removezero_ip(\"0000.168.0.0\"))\r\nprint(removezero_ip(\"0000.0168.0.0\"))\r\nprint(removezero_ip(\"0000.00168.0.0\"))\r\nprint(removezero_ip(\"0000.000168.0.0\"))\r\nprint(removezero_ip(\"0000.0000168.0.0\"))\r\nprint(removezero_ip(\"0000.00000","votes":null},{"text":"\r\n    ip = ip.split(\".\")\r\n    ip = [int(x) for x in ip]\r\n    ip = [str(x) for x in ip]\r\n    while ip[0] == '0':\r\n        ip = ip[1:]\r\n    ip = '.'.join(ip)\r\n    return ip\r\n\r\n\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('0.0.0.0'))\r\nprint(removezero_ip('1.0.0.0'))\r\nprint(removezero_ip('0.0.0.0'))\r\nprint(removezero_ip('1.1.0.0'))\r\nprint(removezero_ip('0.0.0.1'))\r\nprint(removezero_ip('0.0.0.0'))\r\nprint(removezero_ip('10.1.2.3'))\r\nprint(removezero_ip('10.0.0.0'))\r\n\r\n\r\n# 1.7\r\n\r","votes":null},{"text":"\r\n    ip = \"\".join(ip.split('.'))\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    while ip.startswith('0'):\r\n        ip = ip[1:]\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    if ip.startswith(\"0\"):\r\n        while ip.startswith(\"0\"):\r\n            ip = ip[1:]\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip_list = []\r\n    for i in ip:\r\n        if i != '0':\r\n            ip_list.append(i)\r\n        else:\r\n            pass\r\n    return '.'.join(ip_list)\r\n\r\nprint(removezero_ip('192.168.1.0'))\r\nprint(removezero_ip('192.168.01.00'))\r\nprint(removezero_ip('192.168.00.00'))\r\nprint(removezero_ip('192.168.001.001'))\r\nprint(removezero_ip('0.001.001.001'))\r\nprint(removezero_ip('1.0.0.0'))\r\n\r\n\r\n# 2\r","votes":null},{"text":"\r\n    return int(ip)\r\n\r\n\r","votes":null},{"text":"\r\n    if ip[0] == '0':\r\n        return removezero_ip(ip[1:])\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    ip = ip.split('.')\r\n    new_ip = []\r\n    for i in ip:\r\n        if i == '0':\r\n            new_ip.append('0')\r\n        else:\r\n            new_ip.append(i)\r\n    return '.'.join(new_ip)\r\n\r\n\r","votes":null},{"text":"\r\n    newip = []\r\n    for i in ip:\r\n        if i != '0':\r\n            newip.append(i)\r\n    return newip\r\n\r","votes":null},{"text":"\r\n    if ip[0] == \"0\":\r\n        ip = ip.lstrip('0')\r\n    else:\r\n        ip = ip\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    for item in ip:\r\n        if int(item) > 0:\r\n            return item\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    if ip[0] == '0':\r\n        ip = ip[1:]\r\n        ip = removezero_ip(ip)\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    final = []\r\n    for i in ip:\r\n        if i != '0':\r\n            final.append(i)\r\n        else:\r\n            final.append(i)\r\n            break\r\n    return \"\".join(final)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    while ip[0] == '0' and len(ip) > 1:\r\n        ip = ip[1:]\r\n    return ip\r\n\r\n# Tests\r\nprint(removezero_ip('00010101') == '10101')\r\nprint(removezero_ip('10101') == '10101')\r\nprint(removezero_ip('00000000') == '0')\r\nprint(removezero_ip('0010101') == '10101')\r\nprint(removezero_ip('1001010') == '1001010')\r\nprint(removezero_ip('000') == '0')\r\nprint(removezero_ip('0') == '0')\r\nprint(removezero_ip('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    return ip.lstrip(\"0\") or \"0\"\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.split('.')\r\n    while ip[0] == '0':\r\n        ip.pop(0)\r\n        ip = [str(int(i)) for i in ip]\r\n    return '.'.join(ip)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # create a list for the ip\r\n    ip_list = list(ip)\r\n    \r\n    # create a list for the result\r\n    res = []\r\n    \r\n    # iterate over the ip list\r\n    for i in ip_list:\r\n        \r\n        # check if the current item is 0\r\n        if i != '0':\r\n            \r\n            # if it is not 0 append the item to the result list\r\n            res.append(i)\r\n            \r\n            # if it is 0, we have to check the next item\r\n            if i == '.':\r\n                \r\n                # if the next item is not 0, append it to the result list\r\n                if ip_list[ip_list.index(i)+1] != '0':\r\n                    res.append(ip_list[ip_list.index(i)+1])\r\n                \r\n                # if the next item is 0, we have to check the next item\r\n                else:\r\n                    \r\n                    # if the next item is not 0, append it to the result list\r\n                    if ip_list[ip_list.index(i)+2] != '0':\r\n                        res.append(ip_list[ip_list.index(i)+2])\r\n                        \r\n                    # if the next item is 0, we have to check the next item\r\n                    else:\r\n                        \r\n                        # if the next item is not 0, append it to the result list\r\n                        if ip_list[ip_list.index(i)+3] != '0':\r\n                            res.append(ip_list[ip_list.index(i)+3])\r\n                            \r\n    # join the result list and return the result\r\n    return ''.join(res)\r\n\r\n\r\n# test\r\nprint(removezero_ip('101.010.010.001'))\r\nprint(removezero_ip('001.010.010.","votes":null},{"text":"\r\n    ip = ip.split('.')\r\n    for i in range(len(ip)):\r\n        while ip[i].startswith('0') and len(ip[i]) > 1:\r\n            ip[i] = ip[i][1:]\r\n    return '.'.join(ip)\r\n\r\n\r\n# Tests\r\nprint(removezero_ip('10.100.101.102'))\r\nprint(removezero_ip('10.000.001.002'))\r\nprint(removezero_ip('10.00.01.02'))\r\nprint(removezero_ip('010.10.11.12'))\r\nprint(removezero_ip('0.0.0.0'))\r\nprint(removezero_ip('000.00.00.00'))\r\nprint(removezero_ip('00.00.00.00'))\r\nprint(removezero_ip('0.0.0.0'))\r\nprint(removezero_ip('0000.000.000.000'))\r\nprint(removezero_ip('1.0.0.0'))\r\nprint(removezero_ip('11.0.0.0'))\r\nprint(removezero_ip('111.0.0.0'))\r\nprint(removezero_ip('1111.0.0.0'))\r\nprint(removezero_ip('11111.0.0.0'))\r\nprint(removezero_ip('111111.0.0.0'))\r\nprint(removezero_ip('1111111.0.0.0'))\r\nprint(removezero_ip('11111111.0.0.0'))\r\nprint(removezero_ip('111111111.0.0.0'))\r\nprint(removezero_ip('1111111111.0.0","votes":null},{"text":"\r\n    ip_list = []\r\n    for i in ip:\r\n        if i != 0:\r\n            ip_list.append(i)\r\n    return ip_list\r\n\r\n\r","votes":null},{"text":"\r\n    if ip[0] == '0':\r\n        return ip[1:]\r\n    else:\r\n        return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    while ip.startswith('0') and '.' in ip:\r\n        ip = ip.replace('0.', '.')\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    ip = ip.split(\".\")\r\n    for i in range(len(ip)):\r\n        while len(ip[i]) > 1 and ip[i][0] == \"0\":\r\n            ip[i] = ip[i][1:]\r\n    return \".\".join(ip)\r\n\r\nprint(removezero_ip(\"01","votes":null},{"text":"\r\n    if ip[0] == '0':\r\n        ip = ip[1:]\r\n        return removezero_ip(ip)\r\n    else:\r\n        return ip\r\n\r\nprint(removezero_ip('000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    if ip[0] == '0':\r\n        return ip[1:]\r\n    else:\r\n        return ip\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    ip = ip.split(\".\")\r\n    ip = [str(i) for i in ip if i != \"0\"]\r\n    ip = \".\".join(ip)\r\n    return ip\r\n\r\n\r\nprint(removezero_ip(192.168.0.1))\r\nprint(removezero_ip(192.168.0.1))\r\nprint(removezero_ip(192.168.0.1))\r\nprint(removezero_ip(192.168.0.1))\r\nprint(removezero_ip(192.168.0.1))\r\nprint(removezero_ip(192.168.0.1))\r\nprint(removezero_ip(192.168.0.1))\r\nprint(removezero_ip(192.168.0.1))\r\nprint(removezero_ip(192.168.0.1))\r\nprint(removezero_ip(192.168.0.1))\r\nprint(removezero_ip(192.168.0.1))\r\n\r\n\r","votes":null},{"text":"\r\n    if type(ip) is not str:\r\n        return None\r\n    if len(ip) < 7:\r\n        return None\r\n    if ip[0] != '0':\r\n        return ip\r\n    if ip[1] == '.':\r\n        return removezero_ip(ip[2:])\r\n    elif ip[1] == '0':\r\n        return removezero_ip(ip[1:])\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.split(\".\")\r\n    new = []\r\n    for i in ip:\r\n        if int(i) > 0:\r\n            new.append(i)\r\n        else:\r\n            new.append(\"0\")\r\n    return \".\".join(new)\r\n\r\n\r\nprint(removezero_ip(\"10.0.0.0\"))\r\nprint(removezero_ip(\"10.0.0.1\"))\r\nprint(removezero_ip(\"10.0.0.2\"))\r\nprint(removezero_ip(\"10.0.0.3\"))\r\n","votes":null},{"text":"\r\n    ip = ip.split('.')\r\n    for i in range(len(ip)):\r\n        ip[i] = ip[i].lstrip('0')\r\n    return '.'.join(ip)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(removezero_ip('192.168.1.0000'))\r\n    print(removezero_ip('192.168.1.100'))\r\n    print(removezero_ip('10.00.1.00'))\r\n    print(removezero_ip('0.00.0.0'))\r\n    print(removezero_ip('0.00.0.000'))\r\n    print(removezero_ip('0.00.1.00'))\r\n    print(removezero_ip('10.10.1.00'))\r\n    print(removezero_ip('10.00.1.00'))\r\n    print(removezero_ip('10.00.1.00'))\r\n    print(removezero_ip('0.00.1.00'))\r\n    print(removezero_ip('10.10.1.00'))\r\n    print(removezero_ip('10.00.1.00'))\r\n    print(removezero_ip('10.00.1.00'))\r\n    print(removezero_ip('0.00.1.00'))\r\n    print(removezero_ip('10.10.1.00'))\r\n    print(removezero_ip('10.00.1.00'))\r\n    print(removezero_ip('10.00.1.00'))\r\n    print(removezero_ip('0.00.1.00'))\r\n    print(removezero_ip('10.10.1.00'))\r\n    print(removezero_ip('10.00.1.00')","votes":null},{"text":"\r\n    if ip.startswith('0'):\r\n        return removezero_ip(ip[1:])\r\n    else:\r\n        return ip\r\n\r","votes":null},{"text":"\r\n\r\n    ip = ip.split(\".\")\r\n    ip = [x for x in ip if x != '0']\r\n    return \".\".join(ip)\r\n\r\n\r","votes":null},{"text":"\r\n    ip = \"\".join(ip.split(\".\"))\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    print(\"Original IP:\", ip)\r\n\r\n    # Convert string to list\r\n    ip_list = list(ip.split(\".\"))\r\n\r\n    for i in range(len(ip_list)):\r\n        if ip_list[i] == \"0\":\r\n            ip_list.remove(\"0\")\r\n\r\n    # Re-join list with periods\r\n    ip = \".\".join(ip_list)\r\n\r\n    print(\"New IP:\", ip)\r\n\r\n\r\n# Call function\r\nremovezero_ip(\"192.168.0.0\")\r\n\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    ip = ip.split(\".\")\r\n    ip = [x for x in ip if x != \"0\"]\r\n    ip = \".\".join(ip)\r\n    return ip\r\n\r\n\r\nprint(removezero_ip(\"192.168.0.101\"))\r\nprint(removezero_ip(\"192.168.000.101\"))\r\nprint(removezero_ip(\"192.168.000.1000\"))\r\nprint(removezero_ip(\"192.168.000.0000\"))\r\nprint(removezero_ip(\"192.168.000.1000\"))\r\nprint(removezero_ip(\"192.168.0.0\"))\r\nprint(removezero_ip(\"192.168.0.0\"))\r\nprint(removezero_ip(\"0.0.0.0\"))\r\n\r\n\r\n# 2. Write a function that takes a string and returns the first word in\r\n# the string.\r\n\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    if ip[0] == '0':\r\n        ip = ip[1:]\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    ip = ip.split('.')\r\n    ip_new = []\r\n    for i in ip:\r\n        if i.startswith('0'):\r\n            i = i.lstrip('0')\r\n        if not i.isdigit():\r\n            raise ValueError('Wrong input')\r\n        if not len(i) > 0:\r\n            i = '0'\r\n        if int(i) > 255:\r\n            raise ValueError('Wrong input')\r\n        ip_new.append(i)\r\n    return '.'.join(ip_new)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(removezero_ip('192.168.0.1'))\r\n    print(removezero_ip('192.168.00.01'))\r\n    print(removezero_ip('192.168.1","votes":null},{"text":"\r\n    ip = str(ip)\r\n    while ip[0] == '0':\r\n        ip = ip[1:]\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    while ip[0] == \"0\" and len(ip) > 1:\r\n        ip = ip[1:]\r\n        \r\n    return ip\r\n\r","votes":null},{"text":"\r\n    ip = ip.split('.')\r\n    res = []\r\n    for i in ip:\r\n        res.append(str(int(i)))\r\n    return '.'.join(res)\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    ip = input(\"Enter an IP address: \")\r\n    print(\"The IP address is","votes":null},{"text":"\r\n    ip = str(ip)\r\n    if '.' in ip:\r\n        new_ip = []\r\n        for part in ip.split('.'):\r\n            if part[0] == '0':\r\n                new_ip.append(part.lstrip('0'))\r\n            else:\r\n                new_ip.append(part)\r\n        return '.'.join(new_ip)\r\n    else:\r\n        return ip\r\n\r\n#Test\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('10.0.0.001'))\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('10.0.0.001'))\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('10.0.0.001'))\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('10.0.0.001'))\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('10.0.0.001'))\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('10.0.0.001'))\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('10.0.0.001'))\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('10.0.0.001'))\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('10.0.0.001'))\r\nprint(removezero_ip('10.0.0.1'))\r\nprint(removezero_ip('10.0.0.0","votes":null},{"text":"\r\n    return ip.lstrip('0') or '0'\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    # 1. Check if the ip address is valid\r\n    # 2. If the ip address is valid, then remove the leading zeroes from the ip address\r\n\r\n    # 1\r\n    if ip == None:\r\n        return None\r\n    elif len(ip) == 0:\r\n        return None\r\n    elif \".\" not in ip:\r\n        return None\r\n    elif len(ip.split(\".\")) != 4:\r\n        return None\r\n    elif not all(str(i).isdigit() for i in ip.split(\".\")):\r\n        return None\r\n    elif not 0 <= int(ip.split(\".\")[0]) <= 255:\r\n        return None\r\n    elif not 0 <= int(ip.split(\".\")[1]) <= 255:\r\n        return None\r\n    elif not 0 <= int(ip.split(\".\")[2]) <= 255:\r\n        return None\r\n    elif not 0 <= int(ip.split(\".\")[3]) <= 255:\r\n        return None\r\n\r\n    # 2\r\n    # ip_list = [str(i) for i in ip.split(\".\")]\r\n    ip_list = list()\r\n    for i in ip.split(\".\"):\r\n        if int(i) == 0:\r\n            ip_list.append(\"0\")\r\n        else:\r\n            ip_list.append(str(i))\r\n    ip = \".\".join(ip_list)\r\n    return ip\r\n\r\n\r\n# print(removezero_ip(ip=\"0.1.0.1\"))\r\n# print(removezero_ip(ip=\"1.0.1.1\"))\r\n# print(removezero_ip(ip=\"1.1.1.0\"))\r\n# print(removezero_ip(ip=\"0.0.0.0\"))\r\n\r\n# print(removezero_ip(ip=\"1.100.1.1\"))\r\n# print(removezero_ip","votes":null},{"text":"\r\n    \r\n    if ip == '0.0.0.0':\r\n        return '0.0.0.0'\r\n    else:\r\n        ip = ip.split('.')\r\n        ip = list(map(str,ip))\r\n        ip[0] = ip[0].lstrip('0')\r\n        if ip[0] == '':\r\n            ip[0] = '0'\r\n        ip[1] = ip[1].lstrip('0')\r\n        if ip[1] == '':\r\n            ip[1] = '0'\r\n        ip[2] = ip[2].lstrip('0')\r\n        if ip[2] == '':\r\n            ip[2] = '0'\r\n        ip[3] = ip[3].lstrip('0')\r\n        if ip[3] == '':\r\n            ip[3] = '0'\r\n        ip = '.'.join(ip)\r\n        return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip = list(map(str, ip))\r\n    while ip[0] == '0':\r\n        ip.pop(0)\r\n    return int(''.join(ip))\r\n\r\n\r","votes":null},{"text":"\r\n    ip_list = list(ip)\r\n    for i in range(len(ip_list)):\r\n        if ip_list[i] != '0':\r\n            break\r\n        else:\r\n            ip_list.pop(0)\r\n            i += 1\r\n\r\n    return \"\".join(ip_list)\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in ip.split(\".\"):\r\n        if int(i) == 0:\r\n            result.append(\"0\")\r\n        elif int(i) > 0:\r\n            result.append(str(i))\r\n    return \".\".join(result)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    ip = list(ip)\r\n    while ip[0] == '0' and len(ip) > 1:\r\n        ip.pop(0)\r\n    return ''.join(ip)\r\n\r\n\r","votes":null},{"text":"\r\n    if ip == '0.0.0.0':\r\n        return '0.0.0.0'\r\n    ip_list = ip.split('.')\r\n    ip_list_new = []\r\n    for x in ip_list:\r\n        if x != '0':\r\n            ip_list_new.append(x)\r\n    ip_new = '.'.join(ip_list_new)\r\n    return ip_new\r\n\r\n\r","votes":null},{"text":"\r\n    # remove leading zero\r\n    ip = ip.strip('0')\r\n    # remove the dots\r\n    ip = ip.replace('.', '')\r\n    # return the new ip\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip_list = list(ip)\r\n    for i in range(len(ip_list)):\r\n        if ip_list[i] == \"0\":\r\n            ip_list.pop(i)\r\n        else:\r\n            break\r\n    return \"\".join(ip_list)\r\n\r\n\r","votes":null},{"text":"\r\n    if ip.split(\".\")[0] == \"0\":\r\n        ip = \".\".join(ip.split(\".\")[1:])\r\n        return removezero_ip(ip)\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    if(ip[0] == '0'):\r\n        ip = ip[1:]\r\n        return removezero_ip(ip)\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    if ip == \"0.0.0.0\":\r\n        return \"0.0.0.0\"\r\n    \r\n    ip_list = ip.split(\".\")\r\n    for i in range(0, len(ip_list)):\r\n        if ip_list[i] == \"0\" and len(ip_list[i]) == 1:\r\n            ip_list[i] = \"\"\r\n        else:\r\n            ip_list[i] = ip_list[i]\r\n    \r\n    ip_list = [x for x in ip_list if x != \"\"]\r\n    new_ip = \".\".join(ip_list)\r\n    return new_ip\r\n\r\nif __name__ == \"__main__\":\r\n    print(removezero_ip(ip = \"1.0.0.0\"))\r\n    print(removezero_ip(ip = \"10.1.0.1\"))\r\n    print(removezero_ip(ip = \"0.0.0.0\"))\r\n    print(removezero_ip(ip = \"0.1.0.1\"))\r\n    print(removezero_ip(ip = \"0.0.1.1\"))\r\n    print(removezero_ip(ip = \"0.0.0.1\"))\r\n    print(removezero_ip(ip = \"0.1.1.0\"))\r\n    print(removezero_ip(ip = \"1.1.0.0\"))\r\n    print(removezero_ip(ip = \"1.0.1.0\"))\r\n    print(removezero_ip(ip = \"1.0.0.1\"))\r\n    print(removezero_ip(ip = \"1.1.1.1\"))\r\n    print(removezero_ip(ip = \"0.1.1.1\"))\r\n    print(removezero_ip(ip = \"1.1.1.0\"))\r\n    print(removezero_ip(ip = \"0.1.1.0\"))\r\n    print(removezero_ip(ip = \"","votes":null},{"text":"\r\n    if ip[0] == '0':\r\n        return removezero_ip(ip[1:])\r\n    else:\r\n        return ip\r\n\r","votes":null},{"text":"\r\n    \r\n    if ip.split('.')[0] == '0':\r\n        \r\n        ip = '.'.join(ip.split('.')[1:])\r\n        \r\n        return ip\r\n    \r\n    else:\r\n        \r\n        return ip\r\n\r\n\r","votes":null},{"text":"\r\n    if float(ip.split(\".\")[0]) == 0:\r\n        ip = ip.split(\".\")[1]\r\n        if float(ip.split(\".\")[0]) == 0:\r\n            ip = ip.split(\".\")[1]\r\n            if float(ip.split(\".\")[0]) == 0:\r\n                ip = ip.split(\".\")[1]\r\n    return ip\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(removezero_ip(\"192.168.0.0\"))\r\n    print(removezero_ip(\"192.168.0.1\"))\r\n    print(removezero_ip(\"10.0.0.1\"))\r\n    print(removezero_ip(\"10.0.0.0\"))\r\n    print(removezero_ip(\"1.1.1.1\"))\r\n    print(removezero_ip(\"0.0.0.0\"))\r\n    print(removezero_ip(\"0.1.1.1\"))\r\n    print(removezero_ip(\"0.1.1.0\"))\r\n    print(removezero_ip(\"0.1.0.1\"))\r\n    print(removezero_ip(\"0.0.1.1\"))\r\n    print(removezero_ip(\"0.0.1.0\"))\r\n    print(removezero_ip(\"0.0.0.1\"))\r\n    print(removezero_ip(\"0.0.0.0\"))\r\n    print(removezero_ip(\"1.0.1.1\"))\r\n    print(removezero_ip(\"1.0.1.0\"))\r\n    print(removezero_ip(\"1.0.0.1\"))\r\n    print(removezero_ip(\"1.0.0.0\"))\r\n    print(removezero_ip(\"0.1.1.1\"))\r\n    print(removezero_ip(\"0.1.1.0\"))\r\n    print(removezero_ip(\"0.1.0.1\"))","votes":null},{"text":"\r\n    if ip.count('.') != 3:\r\n        return ip\r\n    ip_list = ip.split('.')\r\n    ip_list = [int(i) for i in ip_list]\r\n    while ip_list[0] == 0:\r\n        ip_list = ip_list[1:]\r\n    ip_list = [str(i) for i in ip_list]\r\n    ip_list = '.'.join(ip_list)\r\n    return ip_list\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.split(\".\")\r\n    while ip[0] == \"0\":\r\n        ip.pop(0)\r\n        ip.insert(0, \"0\")\r\n    return \".\".join(ip)\r\n\r","votes":null},{"text":"\r\n    ip = ip.split(\".\")\r\n    ip = [int(i) for i in ip]\r\n    ip[0] = str(ip[0])\r\n    ip[1] = str(ip[1])\r\n    ip[2] = str(ip[2])\r\n    ip[3] = str(ip[3])\r\n    if ip[0] == \"0\":\r\n        ip[0] = \"0.0\"\r\n    if ip[1] == \"0\":\r\n        ip[1] = \"0.0\"\r\n    if ip[2] == \"0\":\r\n        ip[2] = \"0.0\"\r\n    if ip[3] == \"0\":\r\n        ip[3] = \"0.0\"\r\n    ip = \".\".join(ip)\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip_list = [x for x in ip if x != '0']\r\n    if not ip_list:\r\n        return '0.0.0.0'\r\n    return '.'.join(ip_list)\r\n\r\nprint(removezero_ip('0.0.0.0'))\r\nprint(removezero_ip('1.0.0.0'))\r\nprint(removezero_ip('123.0.0.0'))\r\nprint(removezero_ip('0.1.0.0'))\r\nprint(removezero_ip('0.0.1.0'))\r\nprint(removezero_ip('0.0.0.1'))\r\nprint(removezero_ip('0.0.0.0'))\r\nprint(removezero_ip('1.2.3.4'))\r\nprint(removezero_ip('10.10.10.10'))\r\n\r\n\r","votes":null},{"text":"\r\n    return ''.join(map(str, ip))\r\n\r\n#Test\r\nip = [1, 2, 3, 4]\r\nprint(removezero_ip(ip))\r\n\r\n#Method 2\r","votes":null},{"text":"\r\n    ip = ip.split(\".\")\r\n    if ip[0] == \"0\":\r\n        ip[0] = \"\"\r\n    if ip[1] == \"0\":\r\n        ip[1] = \"\"\r\n    if ip[2] == \"0\":\r\n        ip[2] = \"\"\r\n    if ip[3] == \"0\":\r\n        ip[3] = \"\"\r\n    if ip[0] == \"\":\r\n        ip[0] = \"0\"\r\n    if ip[1] == \"\":\r\n        ip[1] = \"0\"\r\n    if ip[2] == \"\":\r\n        ip[2] = \"0\"\r\n    if ip[3] == \"\":\r\n        ip[3] = \"0\"\r\n    ip = \".\".join(ip)\r\n    return ip\r\n\r","votes":null}],"time":{"count":28.0,"avg":120255.8262857143,"std":33690.4398771839,"cov":0.2801564042}}
{"id":594,"question":"def diff_even_odd(list1):\r\n    \"\"\"Write a function to find the difference of first even and odd number of a given list.\"\"\"","answers":[{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return even[0] - odd[0]\r\n\r\n\r","votes":99511.296},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return even[0] - odd[0]\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([6, 2, 8, 4, 10, 3, 7, 9, 5, 1]))\r\n\r\n\r","votes":103288.18},{"text":"\r\n    even_list = []\r\n    odd_list = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even_list.append(i)\r\n        else:\r\n            odd_list.append(i)\r\n    return abs(even_list[0] - odd_list[0])\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8]))\r\n","votes":109901.796},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return even[0] - odd[0]\r\n\r\n# print(diff_even_odd([10, 12, 20, 30]))\r\n\r\n\r","votes":109951.22},{"text":"\r\n    even = []\r\n    odd = []\r\n    \r\n    # Checking if the list has even or odd numbers.\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n\r\n    # Checking if even or odd list is empty\r\n    if even:\r\n        if odd:\r\n            return abs(even[0] - odd[0])\r\n        else:\r\n            return -1\r\n    elif odd:\r\n        return -1\r\n    else:\r\n        return 0\r\n\r\n\r","votes":111344.852},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in range(len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            even.append(list1[i])\r\n        elif list1[i] % 2 != 0:\r\n            odd.append(list1[i])\r\n    return even[0]-odd[0]\r\n\r","votes":113610.608},{"text":"\r\n    #list1 = list(map(int, input().split()))\r\n    #print(list1)\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    print(even)\r\n    print(odd)\r\n    return even[0] - odd[0]\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(diff_even_odd(list1))\r\n\r\n\r","votes":116263.456},{"text":"\r\n    even=[]\r\n    odd=[]\r\n    for i in range(len(list1)):\r\n        if list1[i]%2==0:\r\n            even.append(list1[i])\r\n        elif list1[i]%2==1:\r\n            odd.append(list1[i])\r\n    if len(even)==0:\r\n        return -1\r\n    elif len(odd)==0:\r\n        return -1\r\n    else:\r\n        return even[0]-odd[0]\r\n\r","votes":123938.624},{"text":"\r\n    \r\n    list1.sort()\r\n    \r\n    # Check if the list is empty\r\n    if len(list1) == 0:\r\n        return -1\r\n    \r\n    # Check if the list contains even or odd number\r\n    if list1[0] % 2 == 0:\r\n        for i in list1:\r\n            if i % 2 == 1:\r\n                return i - list1[0]\r\n        return -1\r\n    \r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            return i - list1[0]\r\n    return -1\r\n\r\n\r","votes":125111.572},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in range(len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            even.append(list1[i])\r\n        else:\r\n            odd.append(list1[i])\r\n    return even[0] - odd[0]\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n\r","votes":128337.1},{"text":"\r\n    \r\n    even = []\r\n    odd = []\r\n    \r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    \r\n    return(even[0] - odd[0])\r\n\r\n# Test Cases\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # 16\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # 10\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))  # 1\r\nprint(diff_even_odd([100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90]))  # 20\r\n\r\n\r\n# Q3 - Maximum Sum of Non-Adjacent Numbers\r","votes":128411.908},{"text":"\r\n    even_list = []\r\n    odd_list = []\r\n    for i in range(len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            even_list.append(list1[i])\r\n        else:\r\n            odd_list.append(list1[i])\r\n    return even_list[0] - odd_list[0]\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6]))\r\n\r\n\r\n# 15. Write a Python program to get the sum of all the items in a list.\r","votes":128519.624},{"text":"\r\n\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return even[0] - odd[0]\r\n\r\n\r","votes":135981.912},{"text":"\r\n    list1 = list1.copy()\r\n    even_num = []\r\n    odd_num = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even_num.append(i)\r\n        else:\r\n            odd_num.append(i)\r\n    try:\r\n        return even_num[0] - odd_num[0]\r\n    except IndexError:\r\n        return 0\r","votes":153547.012},{"text":"\r\n    list2 = []\r\n    list3 = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            list2.append(i)\r\n        else:\r\n            list3.append(i)\r\n    if list2 == []:\r\n        return \"No even number in the list\"\r\n    elif list3 == []:\r\n        return \"No odd number in the list\"\r\n    else:\r\n        return list2[0] - list3[0]\r\n\r\nprint(diff_even_odd([3, 4, 5, 6, 1, 2]))\r\nprint(diff_even_odd([3, 2, 1, 5, 6, 4]))\r\nprint(diff_even_odd([3, 2, 1, 5, 6, 7]))\r\nprint(diff_even_odd([3, 2, 1, 5, 6, 4, 7]))\r\nprint(diff_even_odd([3, 2, 1, 5, 6, 4, 7, 8]))\r\nprint(diff_even_odd([2, 4, 6, 8, 1, 3, 5, 7]))\r\nprint(diff_even_odd([2, 4, 6, 8, 1, 3, 5, 7, 9]))\r\nprint(diff_even_odd([2, 4, 6, 8, 1, 3, 5, 7, 9, 10]))\r\n\r\n# Exercise 2\r\n\r","votes":167131.66},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        list2.append(i)\r\n    even = []\r\n    odd = []\r\n    for i in range(len(list2)):\r\n        if list2[i] % 2 == 0:\r\n            even.append(list2[i])\r\n        else:\r\n            odd.append(list2[i])\r\n    return even[0] - odd[0]\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\n\r\n\r","votes":175535.804},{"text":"\r\n    list_even = []\r\n    list_odd = []\r\n    for number in list1:\r\n        if number % 2 == 0:\r\n            list_even.append(number)\r\n        else:\r\n            list_odd.append(number)\r\n    if len(list_even) == 0:\r\n        return \"No even number in the list\"\r\n    elif len(list_odd) == 0:\r\n        return \"No odd number in the list\"\r\n    else:\r\n        return list_even[0] - list_odd[0]\r\n\r\n\r\nprint(diff_even_odd([1, 2, 4, 5, 60, 3]))\r\nprint(diff_even_odd([1, 4, 4, 5, 60, 3]))\r\nprint(diff_even_odd([1, 4, 4, 5, 60, 3, 10, 25]))\r\nprint(diff_even_odd([1, 4, 4, 5, 60, 3, 10]))\r\nprint(diff_even_odd([1, 4, 4, 5, 60, 3, 10, 15, 23]))\r\nprint(diff_even_odd([1, 2, 4, 5, 60, 3, 10, 15, 23, 100, 120, 105, 102, 101]))\r\nprint(diff_even_odd([1, 2, 4, 5, 60, 3, 10, 15, 23, 100, 120, 105, 102, 101]))\r\n\r\n\r","votes":180693.044},{"text":"\r\n    list1 = [int(i) for i in list1]\r\n    odd_nums = []\r\n    even_nums = []\r\n    for num in list1:\r\n        if num % 2 == 0:\r\n            even_nums.append(num)\r\n        else:\r\n            odd_nums.append(num)\r\n    try:\r\n        return even_nums[0] - odd_nums[0]\r\n    except IndexError:\r\n        return 0\r\n\r\n\r","votes":205347.064},{"text":"\r\n    list1 = list(map(int, list1))\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return even[0] - odd[0]\r\n\r\n\r","votes":206837.34},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in range(len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            even.append(list1[i])\r\n        else:\r\n            odd.append(list1[i])\r\n    if len(even) > 0:\r\n        return even[0] - odd[0]\r\n    else:\r\n        return -1\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7]))\r\n\r\n\r\n# Q3\r","votes":208565.012},{"text":"\r\n\r\n    # even_num = []\r\n    # odd_num = []\r\n    # for i in list1:\r\n    #     if i % 2 == 0:\r\n    #         even_num.append(i)\r\n    #     else:\r\n    #         odd_num.append(i)\r\n    #\r\n    # return even_num[0] - odd_num[0]\r\n\r\n    even = [i for i in list1 if i % 2 == 0]\r\n    odd = [i for i in list1 if i % 2 != 0]\r\n\r\n    return even[0] - odd[0]\r\n\r\n\r","votes":211600.408},{"text":"\r\n\r\n    list1.sort()\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    if even == []:\r\n        return -1\r\n    elif odd == []:\r\n        return -1\r\n    else:\r\n        return even[0] - odd[0]\r\n\r\n\r\n# Driver Code\r\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(diff_even_odd(list1))\r\n\r\nlist1 = [1, 3, 5, 7, 9, 11]\r\nprint(diff_even_odd(list1))\r\n\r\nlist1 = [2, 4, 6, 8, 10]\r\nprint(diff_even_odd(list1))\r\n\r\n# Output\r\n# 2\r\n# 2\r\n# -1\r\n# -1\r\n# -1\r\n# -1\r\n# -1\r\n# -1\r\n# -1\r\n# -1\r\n# -1\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n# Alternate Solution\r\n\r\n\r","votes":224668.916},{"text":"\r\n    if len(list1) == 0:\r\n        return \"Empty List\"\r\n    \r\n    even = None\r\n    odd = None\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even = i\r\n            break\r\n        \r\n    for i in list1:\r\n        if i % 2 == 1:\r\n            odd = i\r\n            break\r\n\r\n    if even is None:\r\n        return \"No even number in the list\"\r\n    elif odd is None:\r\n        return \"No odd number in the list\"\r\n\r\n    return abs(odd - even)\r\n\r\nprint(diff_even_odd([2, 3, 4, 5]))\r\nprint(diff_even_odd([1, 3, 4, 5]))\r\nprint(diff_even_odd([2, 4, 6, 8]))\r\nprint(diff_even_odd([1, 3, 5, 7]))\r\nprint(diff_even_odd([]))\r\n\r\n\r\n# Solution 2\r","votes":235371.448},{"text":"\r\n\r\n    odd = []\r\n    even = []\r\n    for num in list1:\r\n        if num % 2 == 0:\r\n            even.append(num)\r\n        else:\r\n            odd.append(num)\r\n    if odd == [] or even == []:\r\n        return 'None'\r\n    return abs(odd[0] - even[0])\r\n\r\n#test\r\nprint(diff_even_odd([1,2,3,4,5,6,7,8,9,10]))\r\nprint(diff_even_odd([10,9,8,7,6,5,4,3,2,1]))\r\nprint(diff_even_odd([1,3,5,7,9]))\r\nprint(diff_even_odd([2,4,6,8,10]))\r\nprint(diff_even_odd([1,3,5,7,9,11]))\r\nprint(diff_even_odd([2,4,6,8,10,12]))\r\nprint(diff_even_odd([1,2,3]))\r\nprint(diff_even_odd([3,2,1]))\r\nprint(diff_even_odd([2,3,1]))\r\nprint(diff_even_odd([1,1,1,1,1,1,1,1,1]))\r\nprint(diff_even_odd([2,2,2,2,2,2,2,2,2]))\r\nprint(diff_even_odd([1,1,3,1,1,3,1,1,3]))\r\nprint(diff_even_odd([2,2,4,2,2,4,2,2,4]))\r\nprint(diff_even_odd([1,1,1,1,1,1,3]))\r\nprint(diff_even_odd([2,2,2,2,2,2,4]))\r\nprint(diff_even_odd([1,1,3,1,1,3]))\r","votes":240465.5},{"text":"\r\n    list_numbers = []\r\n    list_even = []\r\n    list_odd = []\r\n    for x in list1:\r\n        if type(x) == int:\r\n            list_numbers.append(x)\r\n    for x in list_numbers:\r\n        if x % 2 == 0:\r\n            list_even.append(x)\r\n        else:\r\n            list_odd.append(x)\r\n    if len(list_even) > 0 and len(list_odd) > 0:\r\n        return list_even[0] - list_odd[0]\r\n    if len(list_even) > 0 and len(list_odd) == 0:\r\n        return list_even[0] - list_even[1]\r\n    if len(list_even) == 0 and len(list_odd) > 0:\r\n        return list_odd[0] - list_odd[1]\r\n    return \"No even and odd numbers found\"\r\n\r\n\r","votes":301559.2},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return even[0] - odd[0]\r\n\r\n\r\nprint(diff_even_odd([2, 3, 4, 5, 6, 7]))\r\nprint(diff_even_odd([1, 3, 5, 7]))\r\nprint(diff_even_odd([2, 4, 6, 8","votes":null},{"text":"\r\n    if len(list1) == 0:\r\n        return \"Empty list\"\r\n    if len(list1) == 1:\r\n        return \"Single element\"\r\n    if len(list1) == 2:\r\n        if list1[0] % 2 == 0 and list1[1] % 2 != 0 or list1[0] % 2 != 0 and list1[1] % 2 == 0:\r\n            return list1[0] - list1[1]\r\n        else:\r\n            return \"No even and odd numbers found\"\r\n    else:\r\n        #  Finding the first even and odd number in the list\r\n        for i in range(len(list1)):\r\n            if list1[i] % 2 == 0:\r\n                even_num = list1[i]\r\n                break\r\n            else:\r\n                even_num = 0\r\n        for i in range(len(list1)):\r\n            if list1[i] % 2 != 0:\r\n                odd_num = list1[i]\r\n                break\r\n            else:\r\n                odd_num = 0\r\n    #  Returning the difference\r\n        if even_num != 0 and odd_num != 0:\r\n            return even_num - odd_num\r\n        else:\r\n            return \"No even and odd numbers found\"\r\n\r\n#  Testing the function\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7])","votes":null},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    even.sort()\r\n    odd.sort()\r\n\r\n    if len(odd) == len(even):\r\n        return odd[0] - even[0]\r\n    elif len(odd) > len(even):\r\n        return odd[0] - even[0]\r\n    else:\r\n        return even[0] - odd[0]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    first_even = None\r\n    first_odd = None\r\n    for i in list1:\r\n        if i % 2 == 0 and first_even == None:\r\n            first_even = i\r\n        elif i % 2 != 0 and first_odd == None:\r\n            first_odd = i\r\n        elif first_even and first_odd:\r\n            break\r\n\r\n    return first_even - first_odd\r\n\r\n\r\nprint(diff_even_odd([2, 5, 3, 1, 4, 10]))\r\nprint(diff_even_odd([2, 5, 3, 1, 4, 10, 11]))\r\nprint(diff_even_odd([2, 5, 3, 1, 4, 10, 11, 12]))\r\nprint(diff_even_odd([2, 5, 3, 1, 4, 10, 11, 12, 13]))\r\nprint(diff_even_odd([2, 5, 3, 1, 4, 10, 11, 12, 13, 14]))\r\nprint(diff_even_odd([2, 5, 3, 1, 4, 10, 11, 12, 13, 14, 15]))\r\nprint(diff_even_odd([2, 5, 3, 1, 4, 10, 11, 12, 13, 14, 15, 16]))\r\nprint(diff_even_odd([2, 5, 3, 1, 4, 10, 11, 12, 13, 14, 15, 16, 17]))\r\nprint(diff_even_odd([2, 5, 3, 1, 4, 10, ","votes":null},{"text":"\r\n    if list1 == []:\r\n        return None\r\n\r\n    for i in range(len(list1)):\r\n        if i % 2 == 0 and list1[i] % 2 == 0:\r\n            first_even = list1[i]\r\n        elif i % 2 != 0 and list1[i] % 2 != 0:\r\n            first_odd = list1[i]\r\n            break\r\n\r\n    if first_odd > first_even:\r\n        return first_odd - first_even\r\n    elif first_even > first_odd:\r\n        return first_even - first_odd\r\n    else:\r\n        return 0\r\n\r\n\r","votes":null},{"text":"\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even = i\r\n        else:\r\n            odd = i\r\n    \r\n    return even - odd\r\n\r\nprint(diff_even_odd([5, 4, 1, 2, 3, 4, 1, 2, 3, 4]))\r\n\r\n\r","votes":null},{"text":"\r\n    even_list = []\r\n    odd_list = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even_list.append(i)\r\n        else:\r\n            odd_list.append(i)\r\n    return abs(even_list[0] - odd_list[0])\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6","votes":null},{"text":"\r\n    return abs(list1[0] - list1[-1])\r\n\r\n\r","votes":null},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n   ","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in range(len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            even.append(list1[i])\r\n        else:\r\n            odd.append(list1[i])\r\n    if len(even) > 0 and len(odd) > 0:\r\n        return abs(even[0] - odd[0])\r\n    else:\r\n        return 0\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9]))\r\nprint(diff_even_odd([2, 4, 6, 8, 10]))\r\nprint(diff_even_odd([","votes":null},{"text":"\r\n    even_odd = []\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    even_odd.append(even[0])\r\n    even_odd.append(odd[0])\r\n    return even_odd\r\n\r\n\r\nprint(diff_even_odd([1, 3, 2, 4, 5, 6, 7, 8, 9]))\r\n\r\n\r\n# 10\r","votes":null},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        if i % 2 == 0:\r\n            list2.append(list1[i])\r\n        else:\r\n            list2.append(list1[i])\r\n    return list2\r\n\r\n\r\nprint(diff_even_odd([0, 1, 2, 3, 4, 5]))\r\n\r\n\r","votes":null},{"text":"\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    even_numbers = []\r\n    odd_numbers = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even_numbers.append(i)\r\n        else:\r\n            odd_numbers.append(i)\r\n    try:\r\n        even_num = even_numbers[0]\r\n        odd_num = odd_numbers[0]\r\n        print(even_num - odd_num)\r\n    except IndexError as e:\r\n        print(\"Even or Odd numbers not found in the given list\")\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort()\r\n    for i in range(len(list1)):\r\n        if i % 2 != 0:\r\n            even = list1[i]\r\n        if i % 2 == 0:\r\n            odd = list1[i]\r\n    return odd - even\r\n\r\n\r\nprint(diff_even_odd([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if i % 2 == 0:\r\n            even = list1[i]\r\n        else:\r\n            odd = list1[i]\r\n    return even - odd\r\n\r\n\r\nprint(diff_even_odd([2, 3, 4, 5, 6, 7, 8]))\r\n\r\n\r\n# Q18\r","votes":null},{"text":"\r\n\r\n    for i in range(1, len(list1) + 1):\r\n        if i % 2 == 0:\r\n            even = list1[i - 1]\r\n        else:\r\n            odd = list1[i - 1]\r\n    return even - odd\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([7, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22]))\r\nprint(diff_even_odd([5, 7, 3, 4, 5, 6, 7, 8, 9, 10, 22, 12, 11]))\r\n\r\n# Time complexity: O(n)\r\n# Space complexity: O(1)\r\n\r\n\r","votes":null},{"text":"\r\n    even_num = []\r\n    odd_num = []\r\n    for i in list1:\r\n        if i%2 == 0:\r\n            even_num.append(i)\r\n        else:\r\n            odd_num.append(i)\r\n    return odd_num[0]-even_num[0]\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17","votes":null},{"text":"\r\n    # List to store the even and odd numbers\r\n    even_nums = []\r\n    odd_nums = []\r\n    # Check if the list contains even and odd numbers\r\n    for num in list1:\r\n        if isinstance(num, int):\r\n            if num % 2 == 0:\r\n                even_nums.append(num)\r\n            elif num % 2 != 0:\r\n                odd_nums.append(num)\r\n    # Check if even_nums list has even numbers\r\n    if even_nums:\r\n        first_even = even_nums[0]\r\n        # Check if odd_nums list has odd numbers\r\n        if odd_nums:\r\n            first_odd = odd_nums[0]\r\n            # Return the difference of first even and odd number\r\n            return first_even - first_odd\r\n        # Return the difference of first even and 0\r\n        else:\r\n            return first_even - 0\r\n    # Return the difference of first odd and 0\r\n    else:\r\n        first_odd = odd_nums[0]\r\n        return first_odd - 0\r\n\r\n\r\n# Test Case 1\r\nprint(\"Test Case 1:\")\r\nprint(diff_even_odd(list1=[]))\r\nprint(\"Expected Result: 0\")\r\nprint(\" \")\r\n\r\n# Test Case 2\r\nprint(\"Test Case 2:\")\r\nprint(diff_even_odd(list1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(\"Expected Result: 1\")\r\nprint(\" \")\r\n\r\n# Test Case 3\r\nprint(\"Test Case 3:\")\r\nprint(diff_even_odd(list1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\nprint(\"E","votes":null},{"text":"\r\n    return list1[0] - list1[1]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    list2 = []\r\n    for i in range(0, len(list1)):\r\n        if i % 2 == 0:\r\n            list2.append(list1[i])\r\n    return max(list2) - min(list2)\r\n\r\n    # return max(list2) - min(list2)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [2, 1, 3, 8, 9, 6, 5, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(diff_even_odd(list1))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    evens = []\r\n    odds = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            evens.append(i)\r\n        else:\r\n            odds.append(i)\r\n    even = evens[0]\r\n    odd = odds[0]\r\n    sum_even = sum(evens)\r\n    sum_odd = sum(odds)\r\n\r","votes":null},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        if i%2==0:\r\n            list2.append(i)\r\n    else:\r\n        if i%2==1:\r\n            list2.append(i)\r\n    return list2[0]-list2[1]\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9]))\r\nprint(diff_even_odd([2, 4, 6, 8, 10]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 20]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\nprint(diff_even_odd([1, 2]))\r\nprint(diff_even_odd([1]))\r\nprint(diff_even_odd([2]))\r\nprint(diff_even_odd([3]))\r\nprint(diff_even_odd([2, 4, 6, 8, 10, 12]))\r\nprint(diff_even_odd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 1","votes":null},{"text":"\r\n    if len(list1)<=1:\r\n        return \"The list contains either 0 element or 1 element\"\r\n    elif len(list1)==2:\r\n        if list1[0]%2==0 and list1[1]%2==0:\r\n            return \"Both the numbers are even\"\r\n        elif list1[0]%2==0 and list1[1]%2!=0:\r\n            return \"The first number is even\"\r\n        elif list1[0]%2!=0 and list1[1]%2==0:\r\n            return \"The second number is even\"\r\n        else:\r\n            return \"Both the numbers are odd\"\r\n    else:\r\n        i=0\r\n        j=0\r\n        while i<len(list1):\r\n            if list1[i]%2==0:\r\n                i+=1\r\n            else:\r\n                return \"The first odd number is {}\".format(list1[i])\r\n        while j<len(list1):\r\n            if list1[j]%2==0:\r\n                return \"The first even number is {}\".format(list1[j])\r\n            else:\r\n                j+=1\r\n\r\n# Test cases\r\nprint(diff_even_odd([1, 3, 5, 6, 7, 8, 9]))\r\nprint(diff_even_odd([1, 3, 5, 7, 8, 9]))\r\nprint(diff_even_odd([1, 3, 5, 7, 8, 9, 10]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 10]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9]))\r\nprint(diff_even_odd([1, 3, 5, 7]))\r\nprint(diff_even_odd([1, 3, 5]))\r\nprint(diff","votes":null},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            list2.append(i)\r\n        elif i % 2 != 0:\r\n            list2.append(i)\r\n    if len(list2) % 2 == 0:\r\n        return list2[0] - list2[1]\r\n    else:\r\n        return list2[1] - list2[0]\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort(key=lambda x: int(x[1:]))\r\n    even = list1[0]\r\n    odd = list1[1]\r\n    return abs(int(even[1:]) - int(odd[1:]))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(diff_even_odd([\"e17\", \"o12\", \"e40\", \"e25\", \"o22\", \"e1\"]))\r\n    print(diff_even_odd([\"e1\", \"e2\", \"e3\", \"e4\", \"e5\", \"e6\"]))\r\n    print(diff_even_odd([\"o1\", \"o2\", \"o3\", \"o4\", \"o5\", \"o6\"]))\r\n    print(diff_even_odd([\"o1\", \"e2\", \"o3\", \"e4\", \"o5\", \"e6\"]))\r\n    print(diff_even_odd([\"o1\", \"e2\", \"o3\", \"e4\", \"o5\", \"e6\", \"o7\"]))\r\n    print(diff_even_odd([\"o1\", \"e2\", \"o3\", \"e4\", \"o5\", \"e6\", \"o7\", \"e8\"]))\r\n    print(diff_even_odd([\"o1\", \"e2\", \"o3\", \"e4\", \"o5\", \"e7\", \"o8\"]))\r\n    print(diff_even_odd([\"o1\", \"e2\", \"o3\", \"e4\", \"o5\", \"e7\", \"o8\", \"e9\"]))\r\n    print(diff_even_odd([\"o1\", \"e2\", \"o3\", \"e4\", \"o5\", \"e7\", \"o8\", \"e9\", \"o10\"]))\r\n    print(diff_even_odd([\"o1\", \"e2\", \"o3\", \"e4\", \"o5\", \"e7\"","votes":null},{"text":"\r\n    list1.sort()\r\n    \r\n   ","votes":null},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if (i % 2 == 0):\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    if len(even) > len(odd):\r\n        return even[0] - odd[0]\r\n    else:\r\n        return even[0] - odd[-1]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # list1 = [5, 8, 10]\r\n    \r\n    list1.sort()\r\n    \r\n    for i in range(len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            even = list1[i]\r\n        if list1[i] % 2 != 0:\r\n            odd = list1[i]\r\n    print(\"Difference of first even and odd number: \", even - odd)\r\n\r\n\r\ndiff_even_odd([3, 8, 10])\r\ndiff_even_odd([5, 8, 10])\r\n\r\n# output:\r\n# Difference of first even and odd number:  3\r\n# Difference of first even and odd number:  5\r\n\r\n\r\n# Q4\r","votes":null},{"text":"\r\n    \r\n    # initialize a variable to store the even and odd numbers\r\n    even, odd = 0, 0\r\n    \r\n    # iterate through the list\r\n    for i in list1:\r\n        # check if the number is even\r\n        if i % 2 == 0:\r\n            even = i\r\n        # check if the number is odd\r\n        elif i % 2 != 0:\r\n            odd = i\r\n    \r\n    # return the difference of the two\r\n    return even - odd\r\n\r\n\r\n# check if the function is working properly\r\nlist1 = [1, 3, 4, 5, 6, 7, 8, 9, 10]\r\nassert diff_even_odd(list1) == 2\r\n\r\n\r\n# ------------------------------------------------------------------------------------------\r\n# Method 2: Using List Comprehensions\r\n\r","votes":null},{"text":"\r\n\r\n    list2 = []\r\n    list3 = []\r\n    for i in range(len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            list2.append(list1[i])\r\n        else:\r\n            list3.append(list1[i])\r\n\r\n    if len(list2) == 0:\r\n        return -1\r\n\r\n    if len(list3) == 0:\r\n        return -1\r\n\r\n    if len(list2) % 2 == 0:\r\n        return list2[len(list2)\/\/2] - list3[len(list3) \/\/ 2]\r\n    else:\r\n        return list2[len(list2)\/\/2] - list3[len(list3) \/\/ 2 + 1]\r\n\r\n\r\nlist1 = [1, 4, 3, 7, 2, 9, 6, 10]\r\nprint(diff_even_odd(list1))\r\n\r\nlist2 = [1, 4, 3, 7, 2, 9, 6, 10, 5]\r\nprint(diff_even_odd(list2))\r\n\r\nlist3 = [1, 4, 3, 7, 2, 9, 6, 10, 5, 11, 8, 12, 13]\r\nprint(diff_even_odd(list3))\r\n\r\nlist4 = [1, 4, 3, 7, 2, 9, 6, 10, 5, 11, 8, 12, 13, 14]\r\nprint(diff_even_odd(list4))\r\n\r\nlist5 = [1, 4, 3, 7, 2, 9, 6, 10, 5, 11, 8, 12, 13, 1","votes":null},{"text":"\r\n    \r\n    list2 = []\r\n    a = 0\r\n    b = 0\r\n    for i in list1:\r\n        if i%2 == 0:\r\n            a += 1\r\n            list2.append(i)\r\n        if i%2 != 0:\r\n            b += 1\r\n            list2.append(i)\r\n    if a == 0 and b == 0:\r\n        return 0\r\n    elif a == 0:\r\n        return list2[0]\r\n    elif b == 0:\r\n        return list2[1]\r\n    elif a == 1:\r\n        return list2[0] - list2[1]\r\n    elif b == 1:\r\n        return list2[0] - list2[2]\r\n    elif a == 2:\r\n        return list2[1] - list2[2]\r\n    elif b == 2:\r\n        return list2[1] - list2[3]\r\n    elif a == 3:\r\n        return list2[2] - list2[3]\r\n    elif b == 3:\r\n        return list2[2] - list2[4]\r\n    elif a == 4:\r\n        return list2[3] - list2[4]\r\n    elif b == 4:\r\n        return list2[3] - list2[5]\r\n    elif a == 5:\r\n        return list2[4] - list2[5]\r\n    elif b == 5:\r\n        return list2[4] - list2[6]\r\n    elif a == 6:\r\n        return list2[5] - list2[6]\r\n    elif b == 6:\r\n        return list2[5] - list2[7]\r\n    elif a == 7:\r\n        return list2[6] - list2[7]\r\n    elif b == 7:\r\n        return list2[6] - list2[","votes":null},{"text":"\r\n    \r\n    even_num = 0\r\n    odd_num = 0\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even_num = i\r\n        elif i % 2 == 1:\r\n            odd_num = i\r\n    return (even_num - odd_num)\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9]))\r\nprint(diff_even_odd([6, 1, 3, 5, 7, 9]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(diff_even_odd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]))\r\nprint(diff_even_odd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 2","votes":null},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    if len(even) > 0 and len(odd) > 0:\r\n        return even[0] - odd[0]\r\n    else:\r\n        return \"Error: List doesn't have even and odd numbers!\"\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11, 13]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11, 13, 15]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11, 13, 15, 17]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11","votes":null},{"text":"\r\n    l = []\r\n    for i in range(0, len(list1)):\r\n        if i % 2 == 0:\r\n            l.append(list1[i])\r\n        else:\r\n            l.append(list1[i])\r\n\r\n    print(l)\r\n\r\n\r","votes":null},{"text":"\r\n    list2 = []\r\n    diff = 0\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            list2.append(i)\r\n    if len(list2) % 2 == 0:\r\n        for i in range(len(list2)):\r\n            if i % 2 == 0:\r\n                diff += list2[i]\r\n    else:\r\n        for i in range(len(list2)):\r\n            if i % 2 != 0:\r\n                diff += list2[i]\r\n    return diff\r\n\r\n\r\nprint(diff_even_odd([2, 6, 4, 8, 10, 3]))\r\n\r\n\r\n# Q2\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #Initialize variables\r\n    first_even = 0\r\n    first_odd = 0\r\n    \r\n    #Check if the first even value in the list is larger than first odd value in the list\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            first_even = i\r\n        elif i % 2 != 0:\r\n            first_odd = i\r\n    \r\n    #If first_even is larger than first_odd, return the difference between first_even and first_odd\r\n    if first_even > first_odd:\r\n        return first_even - first_odd\r\n    else:\r\n        return first_odd - first_even\r\n\r\n#Test diff_even_odd(list1)\r\nlist1 = [2, 3, -4, 5, 10, 21, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]\r\nprint(diff_even_odd(list1))\r\n\r\n#Test diff_even_odd(list2)\r\nlist2 = [2, 3, -4, 5, 10, 21, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61]\r\nprint(diff_even_odd(list2))\r\n\r\n#Test diff_even_odd(list3)\r\nlist3 = [2, ","votes":null},{"text":"\r\n    even_list = []\r\n    odd_list = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even_list.append(i)\r\n        else:\r\n            odd_list.append(i)\r\n    if even_list:\r\n        if odd_list:\r\n            odd_list.sort()\r\n            return even_list[0] - odd_list[0]\r\n        else:\r\n            return even_list[0]\r\n    else:\r\n        return odd_list[0]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [2, 4, 3, 6, 1, 9, 7, 8, 5]\r\n    print(f\"The difference of first even and odd number of {list1} is {diff_even_odd(list1)}\")\r\n    list1 = [2, 4, 3, 6, 1, 9, 7, 8]\r\n    print(f\"The difference of first even and odd number of {list1} is {diff_even_odd(list1)}\")\r\n    list1 = [2, 4, 3, 6, 1, 9, 7, 8, 5, 10]\r\n    print(f\"The difference of first even and odd number of {list1} is {diff_even_odd(list1)}\")\r\n    list1 = [2, 4, 3, 6, 1, 9, 7, 8, 5, 10, 100]\r\n    print(f\"The difference of first even and odd number of {list1} is {diff_even_odd(list1)}\")\r\n    list1 = [2, 4, 3, 6, 1, 9, 7, 8, 5, 10, 100, 101]\r\n    print(f\"The difference of first eve","votes":null},{"text":"\r\n    list1 = list(map(int, input().split()))\r\n    even_list = []\r\n    odd_list = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even_list.append(i)\r\n        else:\r\n            odd_list.append(i)\r\n    if len(even_list) > 0 and len(odd_list) > 0:\r\n        return abs(even_list[0] - odd_list[0])\r\n    else:\r\n        return 0\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9]))\r\nprint(diff_even_odd([2, 4, 6]))\r\nprint(diff_even_odd([2, 4, 8]))\r\nprint(diff_even_odd([2, 4]))\r\nprint(diff_even_odd([2]))\r\nprint(diff_even_odd([]))\r\n\r\n\r","votes":null},{"text":"\r\n    # code goes here\r\n    difference = 0\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            difference = i - list1[list1.index(i)+1]\r\n    return difference\r\n\r\n# keep this function call here\r\nprint(diff_even_odd([2, 3, 4, 5, 6, 7, 8]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9]))\r\n\r\n\r\n# Given a list of numbers,\r\n# find the first number which occurs odd number of times in the list.\r\n# If no such number exists, return -1.\r\n# Example:\r\n# Input: [2, 3, 3, 5, 5, 5, 5, 6, 7, 7]\r\n# Output: 5\r\n# Input: [2, 3, 3, 5, 5, 6, 7, 7]\r\n# Output: -1\r\n\r","votes":null},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if(list1[i] % 2 == 0):\r\n            return(list1[i] - list1[0])\r\n        else:\r\n            return(list1[0] - list1[i])\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nprint(diff_even_odd(list1))\r\n\r\n\r\n# Q4. Write a python function to find the maximum of three numbers.\r\n#","votes":null},{"text":"\r\n    odd_num = []\r\n    even_num = []\r\n    for i in list1:\r\n        if i%2 == 0:\r\n            even_num.append(i)\r\n        else:\r\n            odd_num.append(i)\r\n    diff_even = abs(even_num[0] - even_num[1])\r\n    diff_odd = abs(odd_num[0] - odd_num[1])\r\n    if diff_even > diff_odd:\r\n        return diff_odd\r\n    else:\r\n        return diff_even\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, ","votes":null},{"text":"\r\n\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8]\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7]\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\n\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\r\n\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,","votes":null},{"text":"\r\n    even = []\r\n    odd = []\r\n    for x in list1:\r\n        if x%2 == 0:\r\n            even.append(x)\r\n        else:\r\n            odd.append(x)\r\n    \r\n    if even == [] or odd == []:\r\n        return \"None\"\r\n    \r\n    return even[0] - odd[0]\r\n\r\n\r\nlist1 = [1,2,3,4,5,6,7]\r\nprint(diff_even_odd(list1))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9,10]\r\nprint(diff_even_odd(list1))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]\r\nprint(diff_even_odd(list1))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,","votes":null},{"text":"\r\n    list1 = [int(i) for i in list1]\r\n    even_list = [i for i in list1 if i % 2 == 0]\r\n    odd_list = [i for i in list1 if i % 2 != 0]\r\n    if len(even_list) == 0:\r\n        return -1\r\n    elif len(odd_list) == 0:\r\n        return -1\r\n    else:\r\n        return abs(even_list[0] - odd_list[0])\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Enter space-separated numbers: \")\r\n    numbers = input()\r\n    print(diff_even_odd(numbers))\r\n\r\n\r\n'''\r\nTime Complexity \nThe time complexity of the above algorithm will be O(N) where \u2018N\u2019 is the number of elements in the input list.\r\n\r\nSpace Complexity \nThe algorithm runs in constant space O(1).\r\n\r\n'''\r\n\r\n'''\r\nSample Input\r\n\r\nEnter space-separated numbers:\r\n9 2 3 6 4 5 7 1 0\r\n\r\nSample Output\r\n\r\n2\r\n\r\nExplanation\r\n\r\nThe difference between 2 and 9 is 7. The difference between 4 and 6 is 2. The difference between 5 and 0 is 5. \r\nThe difference between 3 and 7 is 4. The difference between 6 and 1 is 5. Hence, we return 2.\r\n\r\nIf there is no even number or odd number in the given list, then the function will return -1.\r\n\r\n'''\r\n\r\n'''\r\nFurther Reading\r\n\r\nTo learn more about the difference of even and odd numbers, check out the following articles:\r\n\r\nhttps:\/\/www.geeksforgeeks.org\/difference-between-two-numbers-in-a-given-list\/\r\nhttps:\/\/www.geeksforgeeks.org\/","votes":null},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            list2.append(list1[i])\r\n    for i in range(len(list1)):\r\n        if list1[i] % 2 == 1:\r\n            list2.append(list1[i])\r\n    return list2[0] - list2[1]\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9]))\r\nprint(diff_even_odd([2, 4, 6, 8, 10]))\r\nprint(diff_even_odd([2, 3, 4, 5, 6]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11]))\r\nprint(diff_even_odd([2, 4, 6, 8, 10, 12]))\r\nprint(diff_even_odd([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]))","votes":null},{"text":"\r\n\r\n    even_num = []\r\n    odd_num = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even_num.append(i)\r\n        elif i % 2 == 1:\r\n            odd_num.append(i)\r\n    return abs(even_num[0] - odd_num[0])\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19","votes":null},{"text":"\r\n    even_num, odd_num = 0, 1\r\n    for i in list1:\r\n        if(i % 2 == 0 and i > even_num):\r\n            even_num = i\r\n        elif(i % 2 != 0 and i > odd_num):\r\n            odd_num = i\r\n    return even_num - odd_num\r\n\r\n\r","votes":null},{"text":"\r\n    even = []\r\n    odd = []\r\n    even_num = 0\r\n    odd_num = 0\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n            even_num = i\r\n        else:\r\n            odd.append(i)\r\n            odd_num = i\r\n    return str(even_num - odd_num)\r\n\r\n\r\n#","votes":null},{"text":"\r\n    list1.sort()\r\n    count = 0\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            count += 1\r\n    if count % 2 == 0:\r\n        even = list1[count \/\/ 2]\r\n        odd = list1[count \/\/ 2 - 1]\r\n        return even - odd\r\n    else:\r\n        even = list1[count \/\/ 2]\r\n        odd = list1[count \/\/ 2 + 1]\r\n        return even - odd\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7]))\r\n\r\n# Method 2\r\n\r","votes":null},{"text":"\r\n    \r\n    odd_num = 0\r\n    even_num = 0\r\n    \r\n    for num in list1:\r\n        if num % 2 == 0:\r\n            even_num = num\r\n        elif num % 2 != 0:\r\n            odd_num = num\r\n    return abs(even_num - odd_num)\r\n\r","votes":null},{"text":"\r\n    \r\n    even_list = []\r\n    odd_list = []\r\n    for i in list1:\r\n        if i%2==0:\r\n            even_list.append(i)\r\n        else:\r\n            odd_list.append(i)\r\n    if len(even_list)>=2:\r\n        return abs(even_list[0]-even_list[1])\r\n    elif len(odd_list)>=2:\r\n        return abs(odd_list[0]-odd_list[1])\r\n    else:\r\n        return \"No even or odd numbers in the list\"\r\n\r\nlist_input=input().split(\",\")\r\nfor i in range(len(list_input)):\r\n    list_input[i] = int(list_input[i])\r\nprint(diff_even_odd(list_input))\r\n\r\n# Test case\r\n# 2,3,4,5\r\n# 1,2,3,4\r\n# 2,4,5,6\r\n# 2,4,6,8\r\n# 2,3,4\r\n# 1,2,3,4,5\r\n# 1,2,3,4,5,6\r\n# 1,2,3,4,5,6,7,8\r\n# 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\r\n# 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\r\n\r\n# Output\r\n# 4\r\n# 2\r\n# 2\r\n# 2\r\n# No even or odd numbers in the list\r\n# 4\r\n# 2\r\n# 16\r\n#","votes":null},{"text":"\r\n    even_num = []\r\n    odd_num = []\r\n    for i in range(0, len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            even_num.append(list1[i])\r\n        elif list1[i] % 2 != 0:\r\n            odd_num.append(list1[i])\r\n    if len(even_num) == 0:\r\n        return \"No even number in the list\"\r\n    elif len(odd_num) == 0:\r\n        return \"No odd number in the list\"\r\n    elif len(even_num) == 1:\r\n        if len(odd_num) == 1:\r\n            return \"The difference is\", abs(even_num[0] - odd_num[0])\r\n        elif len(odd_num) == 2:\r\n            return \"The difference is\", abs(even_num[0] - odd_num[1])\r\n        else:\r\n            return \"The difference is\", abs(even_num[0] - odd_num[2])\r\n    elif len(even_num) == 2:\r\n        if len(odd_num) == 1:\r\n            return \"The difference is\", abs(even_num[1] - odd_num[0])\r\n        elif len(odd_num) == 2:\r\n            return \"The difference is\", abs(even_num[1] - odd_num[1])\r\n        else:\r\n            return \"The difference is\", abs(even_num[1] - odd_num[2])\r\n    elif len(even_num) == 3:\r\n        if len(odd_num) == 1:\r\n            return \"The difference is\", abs(even_num[2] - odd_num[0])\r\n        elif len(odd_num) == 2:\r\n            return \"The difference is\", abs(even_num[2] - odd_num[1])\r\n        else:\r\n            retur","votes":null},{"text":"\r\n    num_list = []\r\n    for num in list1:\r\n        if type(num) != int:\r\n            return \"You have entered invalid input.\"\r\n        num_list.append(num)\r\n    num_list = sorted(num_list)\r\n    even_num = []\r\n    odd_num = []\r\n    if len(num_list) == 0:\r\n        return \"The list is empty.\"\r\n    elif len(num_list) == 1:\r\n        return \"There is only one element in the list.\"\r\n    elif len(num_list) == 2:\r\n        return \"There is only two elements in the list.\"\r\n    elif len(num_list) % 2 == 0:\r\n        for num in num_list:\r\n            if num % 2 == 0:\r\n                even_num.append(num)\r\n            else:\r\n                odd_num.append(num)\r\n        return abs(even_num[0]-even_num[1])\r\n    else:\r\n        for num in num_list:\r\n            if num % 2 == 0:\r\n                even_num.append(num)\r\n            else:\r\n                odd_num.append(num)\r\n        return abs(even_num[0]-odd_num[0])\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([1, 3, 5, 7, 9]))\r\nprint(diff_even_odd([2, 4, 6, 8, 10]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, ","votes":null},{"text":"\r\n\r\n    # initialize even\/odd numbers to none\r\n    even_num = None\r\n    odd_num = None\r\n\r\n    # iterate through list\r\n    for num in list1:\r\n        # check if even\r\n        if num % 2 == 0:\r\n            # check if even number already set\r\n            if even_num:\r\n                # if so, check if even number is less than current num\r\n                if even_num < num:\r\n                    # if so, set even_num to equal current num\r\n                    even_num = num\r\n            else:\r\n                # if not, set even_num to equal current num\r\n                even_num = num\r\n        # check if odd\r\n        if num % 2 != 0:\r\n            # check if odd number already set\r\n            if odd_num:\r\n                # if so, check if odd number is less than current num\r\n                if odd_num < num:\r\n                    # if so, set odd_num to equal current num\r\n                    odd_num = num\r\n            else:\r\n                # if not, set odd_num to equal current num\r\n                odd_num = num\r\n\r\n    # check if odd_num is not none\r\n    if odd_num:\r\n        # check if even_num is not none\r\n        if even_num:\r\n            # if so, return difference between even_num and odd_num\r\n            return even_num - odd_num\r\n        else:\r\n            # if not, return None\r\n            return None\r\n    else:\r\n        # if not, return None\r\n        return None\r\n\r\n\r\n# test\r\nprint(diff_even_odd([2, 3, 6, 5, 9, 7, 1, 8, 4]))\r\nprint(diff_even_odd([0, -2, 5, 3, 7, 9, 1, 5, 8]))\r\nprint(diff_even_odd([","votes":null},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            list2.append(i)\r\n    for i in list1:\r\n        if i % 2 != 0:\r\n            list2.append(i)\r\n    return list2[0] - list2[1]\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        if count == 0:\r\n            if list1[i] % 2 == 0:\r\n                list2.append(list1[i])\r\n                count += 1\r\n        else:\r\n            if list1[i] % 2 != 0:\r\n                list2.append(list1[i])\r\n                count += 1\r\n    print(list2)\r\n    return (list2[0] - list2[1])\r\n\r\n\r\n# DRIVER CODE\r\nif __name__ == \"__main__\":\r\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(diff_even_odd(list1))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nInput: [1,2,3,4,5,6,7,8,9,10]\r\nOutput: 2\r\n\r\nExplanation: Since the first even number is 2 and the first odd number is 1,\r\n             the difference is 2.\r\n\r\nSAMPLE 2\r\n\r\nInput: [10,20,30,40,50,60,70,80,90,100]\r\nOutput: 20\r\n\r\nExplanation: Since the first even number is 10 and the first odd number is 20,\r\n             the difference is 10.\r\n\r\nSAMPLE 3\r\n\r\nInput: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]","votes":null},{"text":"\r\n    list1.sort()\r\n    list2 = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            list2.append(i)\r\n    j = 0\r\n    if j < len(list2):\r\n        k = 1\r\n        if k < len(list2):\r\n            print(list2[j] - list2[k])\r\n        else:\r\n            print(list2[j])\r\n    else:\r\n        print(\"No Even number\")\r\n\r\n\r","votes":null},{"text":"\r\n    even_num = 0\r\n    odd_num = 0\r\n    list_len = len(list1)\r\n    for i in range(list_len):\r\n        if list1[i] % 2 == 0:\r\n            even_num = list1[i]\r\n        else:\r\n            odd_num = list1[i]\r\n    diff = abs(even_num - odd_num)\r\n    return diff\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = list1.split()\r\n    list1 = list(map(int, list1))\r\n    list1.sort()\r\n    # print(list1)\r\n\r\n    for i in range(len(list1)):\r\n        if (i + 1) % 2 == 0:\r\n            even_number = list1[i]\r\n        else:\r\n            odd_number = list1[i]\r\n\r\n    return odd_number - even_number\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if i % 2 == 0:\r\n            even = list1[i]\r\n        else:\r\n            odd = list1[i]\r\n    return abs(even - odd)\r\n\r\n\r","votes":null},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            list2.append(i)    \r\n    for i in list1:\r\n        if i % 2 != 0:\r\n            list2.append(i)\r\n    return list2[0] - list2[1] \r\n\r\nprint(diff_even_odd([3, 5, 7, 8, 10, 12]))\r\n\r","votes":null},{"text":"\r\n\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    print(even[0] - odd[0])\r\n\r\n\r","votes":null},{"text":"\r\n    even = list1[0]\r\n    odd = list1[1]\r\n    if even % 2 == 0:\r\n        return even - odd\r\n    elif odd % 2 == 1:\r\n        return odd - even\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    first_odd = []\r\n    first_even = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            count += 1\r\n            first_even.append(i)\r\n            if count == 1:\r\n                first_even = [i]\r\n        else:\r\n            count += 1\r\n            first_odd.append(i)\r\n            if count == 1:\r\n                first_odd = [i]\r\n\r\n    if len(first_odd) == 0:\r\n        return \"There is no odd number\"\r\n    elif len(first_even) == 0:\r\n        return \"There is no even number\"\r\n    else:\r\n        return abs(first_odd[0] - first_even[0])\r\n\r\n\r\nprint(diff_even_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(diff_even_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(diff_even_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\r\nprint(diff_even_odd([0, 1, 2, 3, 4, 5","votes":null},{"text":"\r\n    even = []\r\n    odd = []\r\n    i = 0\r\n    while i < len(list1):\r\n        if list1[i] % 2 == 0 and i % 2 == 0:\r\n            even.append(list1[i])\r\n        elif list1[i] % 2 != 0 and i % 2 != 0:\r\n            odd.append(list1[i])\r\n        i += 1\r\n    print(even, odd)\r\n    return abs(even[0] - odd[0])\r\n\r\n\r\n# diff_even_odd([1, 3, 5, 6, 7, 8, 10, 11, 12])\r\n\r\n\r","votes":null},{"text":"\r\n    even_sum = 0\r\n    odd_sum = 0\r\n    if len(list1) < 1:\r\n        return 0\r\n    for i in range(len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            even_sum += list1[i]\r\n        else:\r\n            odd_sum += list1[i]\r\n    return abs(even_sum - odd_sum)\r\n\r\n\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n\r\n\r","votes":null},{"text":"\r\n    even_odd_list = []\r\n    even = []\r\n    odd = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    if len(even) != 0:\r\n        for i in range(0, len(even) - 1, 2):\r\n            even_odd_list.append(even[i] - even[i + 1])\r\n        if len(odd) != 0:\r\n            for i in range(0, len(odd) - 1, 2):\r\n                even_odd_list.append(odd[i] - odd[i + 1])\r\n        return even_odd_list\r\n    else:\r\n        for i in range(0, len(odd) - 1, 2):\r\n            even_odd_list.append(odd[i] - odd[i + 1])\r\n        return even_odd_list\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(diff_even_odd(list1))\r\n\r\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(diff_even_odd(list2))\r\n\r\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\nprint(diff_even_odd(list3))\r\n\r\nlist4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\nprint(diff_even_odd(list4))\r\n\r\nlist5 = [1, 2, 3, 4, ","votes":null},{"text":"\r\n    even_num = []\r\n    odd_num = []\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even_num.append(i)\r\n        elif i % 2 != 0:\r\n            odd_num.append(i)\r\n    even_sum = sum(even_num)\r\n    odd_sum = sum(odd_num)\r\n    diff = abs(even_sum - odd_sum)\r\n    print(diff)\r\n\r\n\r\ndiff_even_odd([1, 2, 3, 4, 5])\r\n\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    even = 0\r\n    odd = 0\r\n    for i in range(len(list1)):\r\n        if list1[i]%2 == 0:\r\n            even = list1[i]\r\n        else:\r\n            odd = list1[i]\r\n    return odd - even\r\n\r\nlist1 = [1, 2, -3, 4, 5, 6, -7, 8]\r\nprint(diff_even_odd(list1))\r\n\r\n# 5\r\n\r\n# In[39]:\r\n\r\n\r","votes":null},{"text":"\r\n    even = 0\r\n    odd = 0\r\n    for i in range(0, len(list1)):\r\n        if list1[i] % 2 == 0:\r\n            even += list1[i]\r\n        else:\r\n            odd += list1[i]\r\n    return even - odd\r\n\r\n\r\nprint(diff_even_odd([2, 3, 4, 5]))\r\nprint(diff_even_odd([2, 4, 6, 8]))\r\nprint(diff_even_odd([2, 4, 10, 8]))\r\nprint(diff_even_odd([2, 4, 10, 20]))\r\n\r\n# Challenge 2\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #finding even and odd numbers\r\n    even_list = []\r\n    odd_list = []\r\n    \r\n    for i in list1:\r\n        if i%2 == 0:\r\n            even_list.append(i)\r\n        else:\r\n            odd_list.append(i)\r\n    \r\n    if len(even_list) > 0 and len(odd_list) > 0:\r\n        return even_list[0] - odd_list[0]\r\n    else:\r\n        return \"Invalid input\"\r\n        \r\n    \r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6]))\r\nprint(diff_even_odd([1, 3, 5]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\nprint(diff_even_odd([1, 2, 3, 4, 5, ","votes":null},{"text":"\r\n    list1 = list(map(int, list1))\r\n    even = 0\r\n    odd = 0\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            even = i\r\n        else:\r\n            odd = i\r\n    return even - odd\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # create a list\r\n    list2 = []\r\n    \r\n    # iterate over the list\r\n    for i in list1:\r\n        # check if the number is even\r\n        if i%2 == 0:\r\n            # add the number to the list\r\n            list2.append(i)\r\n        # else\r\n        else:\r\n            # add the number to the list\r\n            list2.append(i)\r\n        \r\n    # find the difference of even and odd number\r\n    return list2[0] - list2[1]\r\n\r\n# print the output\r\nprint(diff_even_odd([2, 5, 3, 1, 7, 4]))\r\nprint(diff_even_odd([2, 5, 3, 1, 7]))\r\nprint(diff_even_odd([2, 5, 3, 1]))\r\nprint(diff_even_odd([2, 5, 3]))\r\nprint(diff_even_odd([2, 5]))\r\nprint(diff_even_odd([2]))\r\nprint(diff_even_odd([]))\r\n\r\n\r\n\r\n#--------------Task 2---------------------------\r\n\r","votes":null},{"text":"\r\n    is_even = False\r\n    is_odd = False\r\n    even_list = []\r\n    odd_list = []\r\n    for i in list1:\r\n        if(i % 2 == 0):\r\n            if(is_even):\r\n                even_list.append(i)\r\n            else:\r\n                is_even = True\r\n                even_list.append(i)\r\n        else:\r\n            if(is_odd):\r\n                odd_list.append(i)\r\n            else:\r\n                is_odd = True\r\n                odd_list.append(i)\r\n\r\n    if(len(even_list) == 0):\r\n        return \"There is no even number in the list.\"\r\n\r\n    if(len(odd_list) == 0):\r\n        return \"There is no odd number in the list.\"\r\n\r\n    return str(even_list[0] - odd_list[0])\r\n\r\n\r\n\r\n\r\n# Test case 1\r\nlist1 = [2, 4, 6, 8, 10]\r\nprint(diff_even_odd(list1))\r\n\r\n# Test case 2\r\nlist1 = [1, 3, 5, 7, 9]\r\nprint(diff_even_odd(list1))\r\n\r\n# Test case 3\r\nlist1 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\r\nprint(diff_even_odd(list1))\r\n\r\n# Test case 4\r\nlist1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23,","votes":null}],"time":{"count":25.0,"avg":161819.78224,"std":54288.9724981235,"cov":0.3354903322}}
{"id":597,"question":"def find_kth(arr1, arr2, m, n, k):\r\n    \"\"\"Write a function to find kth element from the given two sorted arrays.\"\"\"","answers":[{"text":"\r\n    l1 = 0\r\n    l2 = 0\r\n    while (l1 < m and l2 < n):\r\n        if arr1[l1] <= arr2[l2]:\r\n            if k == 1:\r\n                return arr1[l1]\r\n            k -= 1\r\n            l1 += 1\r\n        else:\r\n            if k == 1:\r\n                return arr2[l2]\r\n            k -= 1\r\n            l2 += 1\r\n    \r\n    if l1 == m:\r\n        return arr2[l2 + k - 1]\r\n        \r\n    return arr1[l1 + k - 1]\r\n\r\n\r","votes":120327.556},{"text":"\r\n    if m > n:\r\n        m, n = n, m\r\n        arr1, arr2 = arr2, arr1\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = min(m, k \/\/ 2)\r\n    j = k - i\r\n\r\n    if arr1[i - 1] < arr2[j - 1]:\r\n        return find_kth(arr1[i:], arr2, m - i, n, j)\r\n    else:\r\n        return find_kth(arr1, arr2[j:], m, n - j, i)\r\n\r\n\r","votes":126634.616},{"text":"\r\n    # Time Complexity: O(log(m+n))\r\n    # Space Complexity: O(1)\r\n\r\n    if m == 0: return arr2[k-1]\r\n    if n == 0: return arr1[k-1]\r\n    if k == 1: return min(arr1[0], arr2[0])\r\n\r\n    i = min(m, k \/\/ 2)\r\n    j = min(n, k \/\/ 2)\r\n\r\n    if arr1[i-1] < arr2[j-1]:\r\n        return find_kth(arr1[i:], arr2, m - i, n, k - i)\r\n    else:\r\n        return find_kth(arr1, arr2[j:], m, n - j, k - j)\r\n\r\n\r","votes":136316.352},{"text":"\r\n    if m > n:\r\n        arr1, arr2, m, n = arr2, arr1, n, m\r\n\r\n    if m == 0:\r\n        return arr2[k-1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = min(m, k\/\/2)\r\n    j = k - i\r\n\r\n    if arr1[i-1] < arr2[j-1]:\r\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\r\n    else:\r\n        return find_kth(arr1, arr2[j:], m, n-j, k-j)\r\n\r\n\r","votes":137506.108},{"text":"\r\n    if k == 0:\r\n        return -1\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    pa = min(m, k \/\/ 2)\r\n    pb = min(n, k \/\/ 2)\r\n    if arr1[pa - 1] < arr2[pb - 1]:\r\n        return find_kth(arr1[pa:], arr2, m - pa, n, k - pa)\r\n    else:\r\n        return find_kth(arr1, arr2[pb:], m, n - pb, k - pb)\r\n\r\n\r","votes":144291.824},{"text":"\r\n    if m < 0 or n < 0 or k < 1:\r\n        return -1\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    pa = arr1[0]\r\n    pb = arr2[0]\r\n\r\n    if pa <= pb:\r\n        return find_kth(arr1[1:], arr2, m - 1, n, k - 1)\r\n    else:\r\n        return find_kth(arr1, arr2[1:], m, n - 1, k - 1)\r\n\r\n\r","votes":147479.128},{"text":"\r\n    if k <= 0 or k > n + m:\r\n        return\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = min(m, k \/\/ 2)\r\n    j = min(n, k \/\/ 2)\r\n\r\n    if arr1[i - 1] > arr2[j - 1]:\r\n        return find_kth(arr1, arr2[j:], m, n - j, k - j)\r\n    else:\r\n        return find_kth(arr1[i:], arr2, m - i, n, k - i)\r\n\r\n\r","votes":150367.896},{"text":"\r\n    if m > n:\r\n        arr1, arr2, m, n = arr2, arr1, n, m\r\n    i, j, count = 0, 0, 0\r\n    while i < m and j < n:\r\n        if arr1[i] <= arr2[j]:\r\n            i += 1\r\n            count += 1\r\n            if count == k:\r\n                return arr1[i-1]\r\n        else:\r\n            j += 1\r\n            count += 1\r\n            if count == k:\r\n                return arr2[j-1]\r\n    if i == m:\r\n        return arr2[j+k-1]\r\n    return arr1[i+k-1]\r\n\r\n\r\narr1 = [1, 3, 4, 8, 10, 15, 20, 22, 25]\r\narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 3\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\n\r","votes":178786.056},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = 0\r\n    j = 0\r\n    while i < m and j < n:\r\n        if i + j + 1 == k:\r\n            return min(arr1[i], arr2[j])\r\n        elif i + j + 1 < k:\r\n            if arr1[i] < arr2[j]:\r\n                i += 1\r\n            else:\r\n                j += 1\r\n        else:\r\n            if arr1[i] < arr2[j]:\r\n                return arr1[i]\r\n            else:\r\n                return arr2[j]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    arr2 = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 11))\r\n","votes":185910.028},{"text":"\r\n    i = 0\r\n    j = 0\r\n    while i + j < k - 1:\r\n        if i < m and (j >= n or arr1[i] <= arr2[j]):\r\n            i += 1\r\n        else:\r\n            j += 1\r\n    if i < m:\r\n        return arr1[i]\r\n    return arr2[j]\r\n\r\n\r","votes":197752.78},{"text":"\r\n    i, j = 0, 0\r\n    while i < m and j < n:\r\n        if arr1[i] < arr2[j]:\r\n            if k == 1:\r\n                return arr1[i]\r\n            i += 1\r\n            k -= 1\r\n        else:\r\n            if k == 1:\r\n                return arr2[j]\r\n            j += 1\r\n            k -= 1\r\n    if i == m:\r\n        return arr2[j + k - 1]\r\n    return arr1[i + k - 1]\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 3, 5, 7]\r\n    arr2 = [2, 4, 8, 9]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 4\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 5, 6]\r\n    arr2 = [2, 3, 4]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 2\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 3, 5, 7, 9, 10]\r\n    arr2 = [2, 4, 8, 10, 11]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 4\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 3, 5, 7, 9, 10]\r\n    arr2 = [2, 4, 8, 10, 11]\r\n    m = le","votes":232000.264},{"text":"\r\n    if m < n:\r\n        m, n = n, m\r\n        arr1, arr2 = arr2, arr1\r\n    if arr1[m - 1] > arr2[n - 1]:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k <= m:\r\n        return find_kth(arr1[:k], arr2, m, n, k)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n - (k - m), k - m)\r\n\r\n\r\n# Test program\r\narr1 = [1, 5, 8, 10, 15, 20, 30]\r\narr2 = [3, 6, 9, 12, 16, 23]\r\nk = 4\r\narr3 = [1, 3, 5, 7, 9, 10, 12, 15, 16, 17]\r\narr4 = [2, 4, 6, 8, 11, 13, 14, 15, 16, 17]\r\nk = 9\r\n\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2),","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = min(m, k \/\/ 2)\r\n    j = k - i\r\n\r\n    if arr1[i - 1] < arr2[j - 1]:\r\n        return find_kth(arr1[i:], arr2, m - i, n, k - i)\r\n    else:\r\n        return find_kth(arr1, arr2[j:], m, n - j, k - j)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 5, 8, 9, 10]\r\n    arr2 = [2, 3, 4, 6, 7, 11]\r\n    k = 4\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n    print(find_kth_recursive(arr1, arr2, len(arr1), len(arr2), k))\r\n    print(find_kth_iterative(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(log(m + n))\r\nSPACE COMPLEXITY: O(1)\r\n\"\"\"\r\n\r\n\"\"\"\r\nTEST CASES:\r\n\r\n[1, 2, 3, 4, 5]\r\n[6, 7, 8, 9, 10]\r\n2\r\n2\r\n\r\n[1, 2, 3, 4, 5]\r\n[6, 7,","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if m < k\/\/2:\r\n        return find_kth(arr1, arr2, m, n-k\/\/2, k\/\/2)\r\n    elif n < k\/\/2:\r\n        return find_kth(arr1, arr2, m-k\/\/2, n, k\/\/2)\r\n    else:\r\n        return find_kth(arr1, arr2, m-k\/\/2, n-k\/\/2, k\/\/2)\r\n\r\n\r\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\r\narr2 = [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\r\nm, n, k = len(arr1), len(arr2), 10\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    p1, p2 = 0, 0\r\n    while k > 0:\r\n        if p1 == m:\r\n            return arr2[p2]\r\n        if p2 == n:\r\n            return arr1[p1]\r\n        if arr1[p1]","votes":null},{"text":"\r\n    \r\n    if m == 0 and n != 0:\r\n        return arr2[(k-1)]\r\n    if m != 0 and n == 0:\r\n        return arr1[(k-1)]\r\n    if m == 0 and n == 0:\r\n        return -1\r\n    \r\n    if m == 0:\r\n        return arr2[(k-1)]\r\n    if n == 0:\r\n        return arr1[(k-1)]\r\n    \r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    if m <= k\/\/2:\r\n        return find_kth(arr1[m:], arr2, m, n, k - m)\r\n    if n <= k\/\/2:\r\n        return find_kth(arr1, arr2[n:], m, n, k - n)\r\n        \r\n    if arr1[m-1] <= arr2[n-1]:\r\n        return find_kth(arr1, arr2[n:], m, n, k - n)\r\n    else:\r\n        return find_kth(arr1[m:], arr2, m, n, k - m)\r\n\r\n\r\n\r\narr1 = [1, 3, 5, 7, 9]\r\narr2 = [2, 4, 6, 8, 9]\r\n\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 3\r\n\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    a, b = 0, 0\r\n    while k > 0:\r\n        if a == m:\r\n            return arr2[b + k - 1]\r\n        if b == n:\r\n            return arr1[a + k - 1]\r\n        if arr1[a] < arr2[b]:\r\n            a += 1\r\n        else:\r\n            b += 1\r\n        k -= 1\r\n    return -1\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 5, 7, 9, 11]\r\n    arr2 = [2, 3, 4, 6, 8, 10]\r\n    k = 4\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n    arr1 = [1, 2, 3, 4, 5]\r\n    arr2 = [6, 7, 8, 9]\r\n    k = 7\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n    arr1 = [10, 11, 12, 13, 14]\r\n    arr2 = [15, 16, 17, 18, 19]\r\n    k = 2\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    k = 10\r\n    print(find_kth(ar","votes":null},{"text":"\r\n    while m > 0 and n > 0:\r\n        if arr1[m - 1] > arr2[n - 1]:\r\n            k -= 1\r\n            if k == 0:\r\n                return arr1[m - 1]\r\n            m -= 1\r\n        else:\r\n            k -= 1\r\n            if k == 0:\r\n                return arr2[n - 1]\r\n            n -= 1\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n\r\n    return arr1[k - 1]\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0],arr2[0])\r\n    p1 = min(k \/\/ 2, m)\r\n    p2 = k - p1\r\n    if arr1[p1-1] < arr2[p2-1]:\r\n        return find_kth(arr1[p1:], arr2, m - p1, n, k - p1)\r\n    else:\r\n        return find_kth(arr1, arr2[p2:], m, n - p2, k - p2)\r\n\r\narr1 = [1, 3, 5, 7, 9]\r\narr2 = [0, 2, 4, 6, 8, 10]\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 5))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 6))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 7))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 8))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 9))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 10))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 11))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 12))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2)","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    elif n == 0:\r\n        return arr1[k-1]\r\n    elif k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    if m < k\/\/2:\r\n        return find_kth(arr1, arr2, m, n, k-m)\r\n    elif n < k\/\/2:\r\n        return find_kth(arr1, arr2, m, n, k-n)\r\n    else:\r\n        if arr1[m-1] < arr2[n-1]:\r\n            return arr2[n-1]\r\n        else:\r\n            return arr1[m-1]\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if arr1[m-1] < arr2[n-1]:\r\n        if k <= n:\r\n            return find_kth(arr1, arr2[0:n-1], m, n-1, k)\r\n        else:\r\n            return find_kth(arr1[0:m-1], arr2, m-1, n, k-n)\r\n    else:\r\n        if k <= m:\r\n            return find_kth(arr1[0:m-1], arr2, m-1, n, k)\r\n        else:\r\n            return find_kth(arr1, arr2[0:n-1], m, n-1, k-m)\r\n\r\n\r\narr1 = [1, 3, 5, 6]\r\narr2 = [2, 4, 7, 8, 10]\r\nm = 4\r\nn = 5\r\nk = 3\r\n\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\n\r\n# # O(log(m+n))\r\n# class Node:\r\n#    ","votes":null},{"text":"\r\n    arr1_idx = m - 1\r\n    arr2_idx = n - 1\r\n\r\n    for i in range(k):\r\n        if arr1_idx == -1:\r\n            return arr2[arr2_idx]\r\n        elif arr2_idx == -1:\r\n            return arr1[arr1_idx]\r\n        elif arr1[arr1_idx] > arr2[arr2_idx]:\r\n            arr2_idx -= 1\r\n        else:\r\n            arr1_idx -= 1\r\n\r\n    return arr1[arr1_idx]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 5, 7, 9]\r\n    arr2 = [2, 4, 6, 8, 10]\r\n    k = 5\r\n\r\n    print(f\"The {k}th element from the two sorted arrays is {find_kth(arr1, arr2, 5, 5, k)}\")\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n) [where n is the length of either of the arrays]\r\nSPACE COMPLEXITY: O(1)\r\n\"\"\"\r\n\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    if not arr1 or not arr2:\r\n        return None\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    # If kth is smaller than the sum of elements in the two arrays.\r\n    if k <= m + n:\r\n        if m > 0 and k == m + n - 1:\r\n            return arr2[0]\r\n        elif n > 0 and k == m + n - 2:\r\n            return arr1[0]\r\n        # if k is in the first array\r\n        if k <= m:\r\n            return find_kth(arr1[1:], arr2, m - 1, n, k)\r\n        # if k is in the second array\r\n        return find_kth(arr1, arr2[1:], m, n - 1, k - m)\r\n\r\n    # If kth is greater than the sum of elements in the two arrays.\r\n    return None\r\n\r\n\r","votes":null},{"text":"\r\n\r\n\r\n    # 1. Find the pivot\r\n    # 2. If k < pivot, search in first array\r\n    # 3. If k > pivot, search in second array\r\n    # 4. If k == pivot, return the element\r\n\r\n    pivot = find_pivot(arr1, arr2, m, n)\r\n\r\n    if k < pivot:\r\n        return find_kth(arr1, arr2, m, n, k)\r\n    else:\r\n        if k > pivot:\r\n            return find_kth(arr1, arr2, m, n, k-pivot)\r\n        else:\r\n            return arr2[0]\r\n\r\n\r","votes":null},{"text":"\r\n    if m + n == k:\r\n        return min(arr1[m-1], arr2[n-1])\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if arr1[m-1] < arr2[n-1]:\r\n        return find_kth(arr1, arr2[1:], m, n-1, k-m)\r\n    else:\r\n        return find_kth(arr1[1:], arr2, m-1, n, k-n)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 4, 5, 6]\r\n    arr2 = [2, 3, 4, 5, 7, 8, 9, 10]\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 3))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 4))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 5))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 6))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 7))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 8))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 9))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2),","votes":null},{"text":"\r\n    if m + n >= k:\r\n        if m == 0:\r\n            return arr2[k - 1]\r\n        if n == 0:\r\n            return arr1[k - 1]\r\n        if k == 1:\r\n            return min(arr1[0], arr2[0])\r\n\r\n        # Partition arr1[0..i-1] arr2[0..j-1] and arr1[i..m-1] arr2[j..n-1]\r\n        i = min(m, k \/\/ 2)\r\n        j = min(n, k \/\/ 2)\r\n        if arr1[i - 1] > arr2[j - 1]:\r\n            return find_kth(arr1, arr2[j:], m, n - j, k - j)\r\n        else:\r\n            return find_kth(arr1[i:], arr2, m - i, n, k - i)\r\n    else:\r\n        if m == 0:\r\n            return arr2[k-1]\r\n        if n == 0:\r\n            return arr1[k-1]\r\n        if k == 1:\r\n            return min(arr1[0], arr2[0])\r\n\r\n        i = min(m, k \/\/ 2)\r\n        j = min(n, k \/\/ 2)\r\n        if arr1[i - 1] > arr2[j - 1]:\r\n            return find_kth(arr1, arr2, m, n - j, k - j)\r\n        else:\r\n            return find_kth(arr1, arr2, m - i, n, k - i)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 3, 5, 7, 9]\r\n    arr2 = [0, 2, 4, 6, 8]\r\n    k = 3\r\n    print(find_","votes":null},{"text":"\r\n    if m == 0 and n == 0:\r\n        return None\r\n    while n > 0 and m > 0:\r\n        if arr1[m - 1] > arr2[n - 1]:\r\n            n = n - 1\r\n        else:\r\n            m = m - 1\r\n    if n == 0:\r\n        return arr1[m - 1]\r\n    else:\r\n        return arr2[n - 1]\r\n\r\n\r","votes":null},{"text":"\r\n    # arr1 = [1,3,5,7,9]\r\n    # arr2 = [2,4,6,8,10]\r\n    # m = 5\r\n    # n = 5\r\n    # k = 5\r\n    # ans = 7\r\n    # if m == 0:\r\n    #     return arr2[k-1]\r\n    # if n == 0:\r\n    #     return arr1[k-1]\r\n    # if k == 1:\r\n    #     return min(arr1[0],arr2[0])\r\n\r\n    if m == 0:\r\n        return arr2[k-1]\r\n\r\n    if n == 0:\r\n        return arr1[k-1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0],arr2[0])\r\n\r\n    if k == m:\r\n        return arr1[k-1]\r\n\r\n    if k == n:\r\n        return arr2[k-1]\r\n\r\n    if k < m:\r\n        if arr1[k-1] >= arr2[n-1]:\r\n            return arr1[k-1]\r\n        else:\r\n            return find_kth(arr1, arr2, k, n, k)\r\n\r\n    if k > m:\r\n        if arr2[k-m-1] >= arr1[m-1]:\r\n            return arr2[k-m-1]\r\n        else:\r\n            return find_kth(arr1, arr2, m, k-m, k)\r\n\r\n\r\n# arr1 = [1,3,5,7,9]\r\n# arr2 = [2,4,6,8,10]\r\n# m = 5\r\n# n = 5\r\n# k = 5\r\n# print(find_kth(arr1, arr2, m, n, ","votes":null},{"text":"\r\n    if m + n - k + 1 <= k:\r\n        return arr2[k - 1]\r\n    elif k <= m + n - 2 * k:\r\n        return arr1[k - 1]\r\n    elif arr1[m - 1] > arr2[n - 1]:\r\n        return arr1[m - 1]\r\n    elif arr2[n - 1] > arr1[m - 1]:\r\n        return arr2[n - 1]\r\n    else:\r\n        return arr1[m - 1]\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    arr1_index, arr2_index = 0, 0\r\n    while arr1_index < m and arr2_index < n:\r\n        if arr1[arr1_index] <= arr2[arr2_index]:\r\n            arr1_index += 1\r\n        else:\r\n            arr2_index += 1\r\n\r\n        if arr1_index + arr2_index == k:\r\n            return arr1[arr1_index] if arr1_index < m else arr2[arr2_index]\r\n        elif arr1_index + arr2_index > k:\r\n            return arr1[arr1_index-1] if arr1_index > 0 else arr2[arr2_index-1]\r\n\r\n\r","votes":null},{"text":"\r\n    # find the minimum and maximum values of k\r\n    low, high = max(0, k - n), min(m, k)\r\n\r\n    # find the value of k when low <= k <= high\r\n    while low <= high:\r\n        mid = low + (high - low) \/\/ 2\r\n\r\n        # if the value of mid is in the first array\r\n        if mid < m and arr1[mid] < arr2[n - 1]:\r\n            low = mid + 1\r\n\r\n        # if the value of mid is in the second array\r\n        elif mid > 0 and arr2[mid - 1] < arr1[m - 1]:\r\n            high = mid - 1\r\n\r\n        # if the value of mid is in both the arrays\r\n        else:\r\n            # if the value of mid is not in the first array\r\n            if mid < m:\r\n                # return the value of arr1[mid]\r\n                return arr1[mid]\r\n            \r\n            # if the value of mid is not in the second array\r\n            if mid > 0:\r\n                # return the value of arr2[mid - 1]\r\n                return arr2[mid - 1]\r\n\r\n            # if both the value of mid is in both the arrays\r\n            else:\r\n                # return the minimum value from both the arrays\r\n                return min(arr1[0], arr2[0])\r\n\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    pa = min(m, k\/\/2)\r\n    pb = k - pa\r\n\r\n    if arr1[pa-1] < arr2[pb-1]:\r\n        return find_kth(arr1, arr2[pb:], m, n-pb, k-pa)\r\n    else:\r\n        return find_kth(arr1[pa:], arr2, m-pa, n, k-pb)\r\n\r\n\r","votes":null},{"text":"\r\n    if m + n == k:\r\n        return arr1[m - 1]\r\n    elif m + n > k:\r\n        if m > 0:\r\n            return find_kth(arr1, arr2, m - 1, n, k)\r\n        else:\r\n            return arr2[n - 1]\r\n    else:\r\n        if n > 0:\r\n            return find_kth(arr1, arr2, m, n - 1, k)\r\n        else:\r\n            return arr1[m - 1]\r\n\r\n\r\nprint(find_kth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 5, 10, 10))\r\n\r\n\r","votes":null},{"text":"\r\n    # base case\r\n    if m == 0 or n == 0:\r\n        return\r\n    if k == 1:\r\n        if arr1[0] > arr2[0]:\r\n            return arr2[0]\r\n        else:\r\n            return arr1[0]\r\n    # recursive case\r\n    mid1 = m\/\/2\r\n    mid2 = n\/\/2\r\n    if arr1[mid1] > arr2[mid2]:\r\n        return find_kth(arr1, arr2[mid2 + 1:], m, n - mid2 - 1, k - mid2 - 1)\r\n    elif arr1[mid1] < arr2[mid2]:\r\n        return find_kth(arr1[mid1 + 1:], arr2, m - mid1 - 1, n, k - mid1 - 1)\r\n    else:\r\n        return arr1[mid1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 2, 3, 4, 5]\r\n    arr2 = [6, 7, 8, 9, 10]\r\n    k = 3\r\n    print(f\"{k}th smallest element from the","votes":null},{"text":"\r\n    if m + n < k:\r\n        return -1\r\n\r\n    if m == 0 and n != 0:\r\n        return arr2[k-1]\r\n\r\n    if m != 0 and n == 0:\r\n        return arr1[k-1]\r\n\r\n    if k == 1:\r\n        if arr1[0] < arr2[0]:\r\n            return arr1[0]\r\n        else:\r\n            return arr2[0]\r\n\r\n    if k == m:\r\n        return arr1[m - 1]\r\n\r\n    if k == n:\r\n        return arr2[n - 1]\r\n\r\n    if arr1[m - 1] > arr2[n - 1]:\r\n        return find_kth(arr1, arr2[0:n - 1], m, n - 1, k)\r\n\r\n    return find_kth(arr1[0:m - 1], arr2, m - 1, n, k)\r\n\r\n\r","votes":null},{"text":"\r\n    if m+n < k:\r\n        return -1\r\n    elif m == 0:\r\n        return arr2[k-1]\r\n    elif n == 0:\r\n        return arr1[k-1]\r\n    elif k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    elif k == m+n:\r\n        return max(arr1[-1], arr2[-1])\r\n    elif m == 1:\r\n        if arr1[0] < arr2[k-1]:\r\n            return arr2[k-1]\r\n        else:\r\n            return arr1[0]\r\n    elif n == 1:\r\n        if arr2[0] < arr1[k-1]:\r\n            return arr1[k-1]\r\n        else:\r\n            return arr2[0]\r\n    else:\r\n        # Find the median of the first element from each array.\r\n        med_ele_1 = min(arr1[0], arr2[0])\r\n        # Find the median of the last element from each array.\r\n        med_ele_2 = max(arr1[-1], arr2[-1])\r\n        # If the median is the kth smallest element.\r\n        if k <= m and med_ele_1 == arr1[k-1]:\r\n            return med_ele_1\r\n        elif k > m and med_ele_2 == arr2[k-m-1]:\r\n            return med_ele_2\r\n        # The median lies between the first element from each array.\r\n        elif med_ele_1 < med_ele_2:\r\n            # If the median is in the first half.\r\n            if k <= m:\r\n                return find_kth(arr1[1:], arr2, m-1, n, k)\r\n            else:\r\n                return find_kth(arr1, arr2[1:], m, n-1, k-m)\r\n        # The median lie","votes":null},{"text":"\r\n\r\n    if m + n == 0:\r\n        return None\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    mid1 = m \/\/ 2\r\n    mid2 = n \/\/ 2\r\n\r\n    if arr1[mid1] > arr2[mid2]:\r\n        return find_kth(arr1, arr2, mid1, n, k)\r\n    elif arr2[mid2] > arr1[mid1]:\r\n        return find_kth(arr1, arr2, m, mid2, k)\r\n    else:\r\n        return arr1[mid1]\r\n\r\n\r\n# Test program\r\narr1 = [1, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]\r\narr2 = [2, 3, 6, 7, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48","votes":null},{"text":"\r\n    # Finding the smaller size of two arrays\r\n    if m < n:\r\n        sm = m\r\n    else:\r\n        sm = n\r\n    # Finding the bigger size of two arrays\r\n    if m > n:\r\n        bd = m\r\n    else:\r\n        bd = n\r\n    # Finding the kth element when smaller size <= k < bigger size\r\n    if sm > k:\r\n        if arr1[k] <= arr2[k]:\r\n            return arr1[k]\r\n        else:\r\n            return arr2[k]\r\n    else:\r\n        # Finding the kth element when k >= bigger size\r\n        # Finding the midpoint of bigger size\r\n        mid = bd \/\/ 2\r\n        # Finding the midpoint element of bigger size\r\n        mid_element = arr1[mid] if m > n else arr2[mid]\r\n        # Finding the index of smaller size k\r\n        kth = k - sm\r\n        # Finding the kth element when k >= bigger size\r\n        if arr1[kth] <= arr2[kth]:\r\n            if mid_element >= arr1[kth]:\r\n                return arr1[kth]\r\n            else:\r\n                return arr1[k]\r\n        else:\r\n            if mid_element >= arr2[kth]:\r\n                return arr2[kth]\r\n            else:\r\n                return arr2[k]\r\n\r\n\r\n# Driver Code\r\narr1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]\r\narr2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    mid = k \/\/ 2\r\n    if arr1[m-1] <= arr2[n-1]:\r\n        if mid <= m:\r\n            return find_kth(arr1, arr2, m-mid, n, k-mid)\r\n        else:\r\n            return find_kth(arr1, arr2, m, n-mid, k-mid)\r\n    else:\r\n        if mid <= n:\r\n            return find_kth(arr1, arr2, m, n-mid, k-mid)\r\n        else:\r\n            return find_kth(arr1, arr2, m-mid, n, k-mid)\r\n\r\n\r","votes":null},{"text":"\r\n    while k > 0:\r\n        if m == 0:\r\n            return arr2[n-k]\r\n        if n == 0:\r\n            return arr1[m-k]\r\n        if arr1[m-1] > arr2[n-1]:\r\n            k -= 1\r\n            n -= 1\r\n        else:\r\n            k -= 1\r\n            m -= 1\r\n    return arr1[m]\r\n\r","votes":null},{"text":"\r\n    if k == 0:\r\n        return -1\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k == 2:\r\n        return max(arr1[0], arr2[0])\r\n    if k > m+n:\r\n        return -1\r\n    if k <= m:\r\n        return arr1[k-1]\r\n    if k <= n:\r\n        return arr2[k-1]\r\n    if arr1[m-1] > arr2[n-1]:\r\n        return find_kth(arr1, arr2, m, n-1, k-n)\r\n    return find_kth(arr1, arr2, m-1, n, k-m)\r\n\r\n\r\narr1 = [1, 3, 6, 9, 12, 15]\r\narr2 = [2, 4, 7, 8, 10, 16]\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 7))\r\n\r\n\r","votes":null},{"text":"\r\n    j = k - 1\r\n    i = 0\r\n    while j >= 0:\r\n        if i == m:\r\n            return arr2[j]\r\n        if j == n:\r\n            return arr1[i]\r\n        if arr1[i] < arr2[j]:\r\n            i += 1\r\n        else:\r\n            j -= 1\r\n    return arr1[i]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 2, 3, 4, 5]\r\n    arr2 = [6, 7, 8, 9, 10]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n\r\n    print(find_kth(arr1, arr2, m, n, 4))\r\n    print(find_kth(arr1, arr2, m, n, 6))\r\n    print(find_kth(arr1, arr2, m, n, 8))\r\n    print(find_kth(arr1, arr2, m, n, 10))\r\n    print(find_kth(arr1, arr2, m, n, 100))\r\n    print(find_kth(arr1, arr2, m, n, -1))\r\n    print(find_kth(arr1, arr2, m, n, 0))\r\n    print(find_kth(arr1, arr2, m, n, 1))\r\n    print(find_kth(arr1, arr2, m, n, 5))\r\n    print(find_kth(arr1, arr2, m, n, 11))\r\n    print(find_kth(arr1, arr2, m, n, 12))\r\n    print(find_kth(arr1, arr2, m, n, 13))\r\n    print(find_kth","votes":null},{"text":"\r\n\r\n    # Find the array with minimum length\r\n    if m > n:\r\n        arr1, arr2, m, n = arr2, arr1, n, m\r\n\r\n    # We will use this to find if the element is present in the first array\r\n    seen = set()\r\n\r\n    for i in range(m):\r\n        if arr1[i] not in seen:\r\n            seen.add(arr1[i])\r\n            k -= 1\r\n        if k == 0:\r\n            return arr1[i]\r\n\r\n    for i in range(n):\r\n        if arr2[i] not in seen:\r\n            seen.add(arr2[i])\r\n            k -= 1\r\n        if k == 0:\r\n            return arr2[i]\r\n\r\n    return None\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # check if either one array is empty\r\n    if not arr1 or not arr2:\r\n        return arr1 or arr2\r\n\r\n    # check if k is less than the total number of elements\r\n    if k > m + n:\r\n        return -1\r\n\r\n    # check if k is in the range of first array\r\n    if k <= m:\r\n        return arr1[k - 1]\r\n\r\n    # check if k is in the range of second array\r\n    if k > m:\r\n        return arr2[k - m - 1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 3, 5, 7, 9]\r\n    arr2 = [2, 4, 6, 8, 10]\r\n    k = 6  # kth element is 6\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n    arr1 = [1, 2, 3, 4, 5]\r\n    arr2 = [3, 4, 5, 6, 7]\r\n    k = 6\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n    arr1 = [1, 2, 3, 4, 5]\r\n    arr2 = [3, 4, 5, 6, 7]\r\n    k = 5\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n    arr1 = [1, 2, 3, 4, 5]\r\n    arr2 = [3, 4, 5, 6, 7]\r\n    k = 5\r\n    print(find_kth(arr1, arr2, len(arr1)","votes":null},{"text":"\r\n\r\n    while m > 0 and n > 0:\r\n        if arr1[m-1] > arr2[n-1]:\r\n            m -= 1\r\n        elif arr2[n-1] > arr1[m-1]:\r\n            n -= 1\r\n        else:\r\n            return arr1[m-1]\r\n\r\n    if m > 0:\r\n        return arr1[m-1]\r\n    if n > 0:\r\n        return arr2[n-1]\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k > m + n:\r\n        return -1\r\n    if k <= m:\r\n        return find_kth(arr1, arr2, m - 1, n, k)\r\n    if k > m:\r\n        return find_kth(arr1, arr2, m, n - 1, k - m)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 2, 3, 4, 5]\r\n    arr2 = [6, 7, 8, 9, 10]\r\n    k = 5\r\n    print(find_kth(arr1, arr2, len(arr","votes":null},{"text":"\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    # If k is smaller than the sum of lengths of two arrays\r\n    if k <= m + n:\r\n        # Partition arr1[] such that all elements less than\r\n        # the kth element are on left side of arr1[]\r\n        # and first k elements are on right side of arr1[]\r\n        if m > k:\r\n            # kth element is in the first k elements of arr1[]\r\n            return find_kth(arr1[0:k], arr2, m - k, n, k)\r\n        elif m <= k and k <= m + n:\r\n            # kth element is in the remaining elements of arr1[]\r\n            return find_kth(arr1, arr2[0:k - m], m, n - k + m, k)\r\n        else:\r\n            # kth element is in the first k elements of arr2[]\r\n            return find_kth(arr1, arr2[0:k], m, n - k, k)\r\n    else:\r\n        # If k is greater than the sum of lengths of two arrays\r\n        return min(arr1[m - 1], arr2[n - 1])\r\n\r\n\r","votes":null},{"text":"\r\n    if k == 0:\r\n        return -1\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if arr1[m-1] < arr2[n-1]:\r\n        return find_kth(arr1, arr2, m-1, n, k-1)\r\n    if arr2[n-1] < arr1[m-1]:\r\n        return find_kth(arr1, arr2, m, n-1, k-1)\r\n    return arr2[n-1]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if m + n - k < 0:\r\n        return -1\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if arr1[m - 1] > arr2[n - 1]:\r\n        return find_kth(arr1, arr2, m - 1, n, k)\r\n    elif arr1[m - 1] < arr2[n - 1]:\r\n        return find_kth(arr1, arr2, m, n - 1, k)\r\n    else:\r\n        return arr1[m - 1]\r\n\r\n\r\n# Driver Code\r\narr1 = [1, 2, 3, 4]\r\narr2 = [5, 6, 7, 8]\r\n\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 3))\r\n\r\n\r\n# Time Complexity: O(log(m+n))\r\n# Space Complexity: O(1)\r\n# Where m = length of first array, n = length of second array\r\n\r\n\r\n# Other Method\r","votes":null},{"text":"\r\n\r\n    # If k is smaller than m+n, we need to find kth element in arr1 or arr2.\r\n    if k <= m + n:\r\n\r\n        # If k is smaller than m, we need to find kth element in arr1.\r\n        if k <= m:\r\n            return find_kth(arr1, arr2, m, n, k)\r\n\r\n        # If k is greater than or equal to m+1, we need to find (k-m)-th element in arr2.\r\n        return find_kth(arr2, arr1, n, m, k - m)\r\n\r\n    # If k is greater than m+n, we need to return arr1[m] or arr2[n].\r\n    if arr1[m-1] > arr2[n-1]:\r\n        return arr1[m-1]\r\n\r\n    else:\r\n        return arr2[n-1]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if k > m:\r\n        return find_kth(arr2, arr1[m:], n - m, m, k - m)\r\n\r\n    return find_kth(arr1[:m \/\/ 2], arr2[:k - 1], m \/\/ 2, n, k - m \/\/ 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if arr1[m - 1] < arr2[n - 1]:\r\n        return find_kth(arr1, arr2, m, n - 1, k - n)\r\n    else:\r\n        return find_kth(arr1, arr2, m - 1, n, k - m)\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    # arr1 = [1, 3, 4, 5, 7, 8, 9]\r\n    # arr2 = [2, 3, 4, 6, 7, 9]\r\n    # m = 7\r\n    # n = 6\r\n    # k = 3\r\n    i = 0\r\n    j = 0\r\n    while i + j < k - 1:\r\n        if i < m and j < n and arr1[i] < arr2[j]:\r\n            i += 1\r\n        elif i < m and j < n and arr1[i] >= arr2[j]:\r\n            j += 1\r\n        elif i == m:\r\n            j += 1\r\n        elif j == n:\r\n            i += 1\r\n\r\n    if i == m:\r\n        return arr2[j]\r\n    if j == n:\r\n        return arr1[i]\r\n\r\n    if arr1[i] < arr2[j]:\r\n        return arr1[i]\r\n    else:\r\n        return arr2[j]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 4, 5, 7, 8, 9]\r\n    arr2 = [2, 3, 4, 6, 7, 9]\r\n    m = 7\r\n    n = 6\r\n    k = 3\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 3, 4, 5, 7, 8, 9]\r\n    arr2 = [2, 3, 4, 6, 7, 9]\r\n    m = 7\r\n    n = 6\r\n    k = 6\r\n    print(find_kth(ar","votes":null},{"text":"\r\n\r\n    # If either one of the arrays is empty\r\n    if m < 0 or n < 0:\r\n        if m < 0:\r\n            return arr2[k]\r\n        if n < 0:\r\n            return arr1[k]\r\n\r\n    # If k is smaller than or equal to the size of the smaller array\r\n    if k <= m + n:\r\n        if k <= m:\r\n            return find_kth(arr1, arr2, m-1, n, k)\r\n        return find_kth(arr1, arr2, m, n-1, k-m)\r\n\r\n    # If k is greater than the size of the smaller array\r\n    return min(arr1[m], arr2[n])\r\n\r\n\r\narr1 = [1, 2, 3, 4, 5, 1","votes":null},{"text":"\r\n    if m > 0 and n > 0:\r\n        if arr1[0] < arr2[0]:\r\n            return find_kth(arr1[1:], arr2, m-1, n, k-1)\r\n        elif arr2[0] < arr1[0]:\r\n            return find_kth(arr1, arr2[1:], m, n-1, k-1)\r\n        else:\r\n            return arr1[0]\r\n    elif m > 0:\r\n        return find_kth(arr1[1:], [], m-1, 0, k-1)\r\n    elif n > 0:\r\n        return find_kth([], arr2[1:], 0, n-1, k-1)\r\n    else:\r\n        return None\r\n\r\n\r\narr1 = [1, 2, 3, 4]\r\narr2 = [5, 6, 7, 8]\r\nk = 5\r\n\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n# Time Complexity: O(n1+n2) where n1 and n2 are the sizes of the input arrays\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Recursive Approach\r","votes":null},{"text":"\r\n    \r\n    if m == 0:\r\n        return arr2[k-1]\r\n    elif n == 0:\r\n        return arr1[k-1]\r\n    elif k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    i = (k-1) \/\/ (m+n-k+1)\r\n    j = (k-1) % (m+n-k+1)\r\n    \r\n    if j < m:\r\n        return arr1[i]\r\n    elif j > m:\r\n        return arr2[j-m]\r\n    else:\r\n        return min(arr1[i], arr2[j-m])\r\n\r\n\r","votes":null},{"text":"\r\n    if m + n - k + 1:\r\n        return -1\r\n    if m < n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    # if length of first array is smaller than the k-th smallest element\r\n    if m < k:\r\n        return find_kth(arr2, arr1[k - m - 1:], n - k + m, m, k - m)\r\n    # if first element of first array is smaller than or equal to k-th element\r\n    elif arr1[k - m - 1] < arr2[n - 1]:\r\n        return find_kth(arr1, arr2[k:], m, n - k, k)\r\n    # if first element of first array is greater than k-th element\r\n    else:\r\n        return find_kth(arr1[k:], arr2, m - k, n, k)\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    mid1 = m \/\/ 2\r\n    mid2 = n \/\/ 2\r\n    if arr1[mid1] > arr2[mid2]:\r\n        return find_kth(arr1, arr2[mid2+1:], m, n-mid2-1, k-mid2-1)\r\n    elif arr1[mid1] < arr2[mid2]:\r\n        return find_kth(arr1[mid1+1:], arr2, m-mid1-1, n, k-mid1-1)\r\n    else:\r\n        return arr1[mid1]\r\n\r\n\r","votes":null},{"text":"\r\n    i = 0\r\n    j = 0\r\n\r\n    while i < m and j < n:\r\n        if arr1[i] <= arr2[j]:\r\n            i += 1\r\n        else:\r\n            j += 1\r\n\r\n    if i == m:\r\n        return arr2[j+k-1]\r\n    elif j == n:\r\n        return arr1[i+k-1]\r\n    else:\r\n        return -1\r\n\r\n\r\narr1 = [1, 2, 3, 4, 5]\r\narr2 = [6, 7, 8, 9, 10]\r\nm = len(arr1)\r\nn = len(arr2)\r\n\r\nprint(\"Kth element from the combined sorted array is \", find_kth(arr1, arr2, m, n, 4))\r\n\r\n# Time Complexity: O(k)\r\n# Space Complexity: O(1)\r\n\r\n\r\n# Approach 2: Binary Search\r\n\r","votes":null},{"text":"\r\n    if arr1[m-1] > arr2[n-1]:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = min(m, k\/\/2)\r\n    j = k - i\r\n\r\n    if arr1[i-1] < arr2[j-1]:\r\n        return find_kth(arr1, arr2, i, n, j)\r\n    else:\r\n        return find_kth(arr1, arr2, m, j, k-j)\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    if(m==0):\r\n        return arr2[k-1]\r\n    if(n==0):\r\n        return arr1[k-1]\r\n    if(k==1):\r\n        return min(arr1[0], arr2[0])\r\n    if(k==m+n):\r\n        return max(arr1[-1], arr2[-1])\r\n    if(m>n):\r\n        k=k%(m+n-n)\r\n    else:\r\n        k=k%(m+n-m)\r\n    if(k<=m):\r\n        return find_kth(arr1[:k], arr2, m-k, n, k)\r\n    else:\r\n        return find_kth(arr1, arr2[:k-m], m, n-k+m, k)\r\n\r\narr1 = [1,2,3,4,5]\r\narr2 = [6,7,8,9,10]\r\nm, n, k = len(arr1), len(arr2), 10\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r","votes":null},{"text":"\r\n    # Find the middle of the two arrays\r\n    mid = (m + n + 1) \/\/ 2\r\n    \r\n    # Find the smaller element in the first half of the array\r\n    if m > 0 and (n == 0 or arr1[m - 1] > arr2[n - 1]):\r\n        return find_kth(arr1[:m], arr2, m - 1, n, k)\r\n    # Find the smaller element in the second half of the array\r\n    elif n > 0 and (m == 0 or arr1[m - 1] <= arr2[n - 1]):\r\n        return find_kth(arr1, arr2[:n], m, n - 1, k)\r\n    # Both arrays have elements\r\n    else:\r\n        # Check if we have reached the desired index\r\n        if k == 1:\r\n            return min(arr1[m - 1], arr2[n - 1])\r\n        # If not, recur for the first half of the arrays\r\n        elif m > 0 and (n == 0 or arr1[m - 1] > arr2[n - 1]):\r\n            return find_kth(arr1[:m], arr2, m - 1, n, k - 1)\r\n        # If not, recur for the second half of the arrays\r\n        else:\r\n            return find_kth(arr1, arr2[:n], m, n - 1, k - 1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 2, 3, 4, 5]\r\n    arr2 = [3, 4, 5, 6, 7, 8, 9]\r\n    n = len(arr1)\r\n    m = len(arr2)\r\n    k = 2\r\n    print(find_kth(arr1, arr2, n, m, k))\r\n\r","votes":null},{"text":"\r\n    \r\n    # Base case\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    # Divide the arrays into 2 parts\r\n    a1 = arr1[m\/\/2]\r\n    a2 = arr2[n\/\/2]\r\n\r\n    if a1 > a2:\r\n        # if arr1[m\/\/2] is greater than arr2[n\/\/2], then kth element could be present in the right part of arr1\r\n        return find_kth(arr1, arr2, m\/\/2, n, k)\r\n    else:\r\n        # if arr1[m\/\/2] is smaller than arr2[n\/\/2], then kth element could be present in the right part of arr2\r\n        return find_kth(arr1, arr2, m, n\/\/2, k - n\/\/2)\r\n\r\n\r","votes":null},{"text":"\r\n    # if m == 0:\r\n    #     return arr2[k-1]\r\n    # if n == 0:\r\n    #     return arr1[k-1]\r\n    # if k == 1:\r\n    #     return min(arr1[0], arr2[0])\r\n    # if k == m + n:\r\n    #     return max(arr1[m-1], arr2[n-1])\r\n    # if k - 1 <= m:\r\n    #     return find_kth(arr1, arr2, m-1, n, k-1)\r\n    # elif k - 1 <= m + n:\r\n    #     return find_kth(arr1, arr2, m, n-1, k-1)\r\n    # else:\r\n    #     return max(arr1[m-1], arr2[n-1])\r\n\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k == m + n:\r\n        return max(arr1[m-1], arr2[n-1])\r\n    \r\n    # if k > m + n:\r\n    #     return find_kth(arr1, arr2, m, n, k)\r\n    # else:\r\n    if k <= m:\r\n        return find_kth(arr1, arr2, m-1, n, k)\r\n    elif k <= m + n:\r\n        return find_kth(arr1, arr2, m, n-1, k)\r\n    else:\r\n        return max(arr1[m-1], arr2[n-1])\r\n\r\n\r\n# Driver code\r\narr1 = [1, 5, 9, 10, 15, 2","votes":null},{"text":"\r\n\r\n    if m > n:\r\n        m, n = n, m\r\n        arr1, arr2 = arr2, arr1\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if k <= m:\r\n        return find_kth(arr1[:k], arr2, k, n, k)\r\n\r\n    return find_kth(arr1, arr2[:k - m], m, k - m, k)\r\n\r\n\r","votes":null},{"text":"\r\n    if k == 1: return min(arr1[0], arr2[0])\r\n    if k > m+n: return None\r\n    if k <= m: return find_kth(arr1[k-1:], arr2, m-k+1, n, k)\r\n    return find_kth(arr1, arr2[k-m-1:], m, n-k+m, k)\r\n\r","votes":null},{"text":"\r\n    # check if first array is empty\r\n    if m == 0:\r\n        return arr2[n - k]\r\n\r\n    # check if second array is empty\r\n    if n == 0:\r\n        return arr1[m - k]\r\n\r\n    # find median\r\n    if m + n >= k:\r\n        if m > n:\r\n            return find_kth(arr1, arr2, m - n, n, k)\r\n        else:\r\n            return find_kth(arr1, arr2, m, n - m, k)\r\n\r\n    # find median\r\n    if m > n:\r\n        return find_kth(arr1, arr2, m - n, n, k + n - m)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n - m, k + m - n)\r\n\r\n\r\n# test cases\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 3))\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 4))\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 5))\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 6))\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 7))\r\nprint(find_kth([1, 3","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    \r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    if k > m + n:\r\n        return find_kth(arr1, arr2, m, n, k-n)\r\n    \r\n    if k <= m:\r\n        return find_kth(arr1, arr2, m-1, n, k)\r\n    \r\n    return find_kth(arr1, arr2, m, n-1, k-m)\r\n\r\n# Test Program\r\narr1 = [1, 2, 3, 4]\r\narr2 = [5, 6, 7, 8]\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 4))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 5))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 6))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 7))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 8))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 9))\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), 10))\r\n\r\n\r\n# Recursive Approach\r","votes":null},{"text":"\r\n    if m + n <= k:\r\n        return None\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if arr1[m - 1] <= arr2[n - 1]:\r\n        return find_kth(arr1, arr2, m, n - 1, k - 1)\r\n    if arr2[n - 1] <= arr1[m - 1]:\r\n        return find_kth(arr1, arr2, m - 1, n, k - 1)\r\n    return arr1[m - 1]\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = (k-1)\/\/2\r\n    j = k - i - 1\r\n\r\n    if arr1[i] <= arr2[j]:\r\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\r\n    else:\r\n        return find_kth(arr1, arr2[j:], m, n-j, k-j)\r\n\r\n\r\narr1 = [1, 2, 3, 4, 5, 6]\r\narr2 = [7, 8, 9, 10, 11, 12, 13]\r\n\r\nk = 4\r\n\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n# Time Complexity: O(Log(m) + Log(n))\r\n# Space Complexity: O(1)\r\n\r","votes":null},{"text":"\r\n    while m > 0 and n > 0:\r\n        if arr1[m-1] > arr2[n-1]:\r\n            m -= 1\r\n        elif arr1[m-1] < arr2[n-1]:\r\n            n -= 1\r\n        else:\r\n            m -= 1\r\n            n -= 1\r\n    if m == 0:\r\n        return arr2[n-1]\r\n    return arr1[m-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 5, 8, 10, 15]\r\n    arr2 = [3, 6, 7, 9, 12, 18]\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 4))\r\n\r\n    arr1 = [1, 5, 8, 10, 15]\r\n    arr2 = [3, 6, 7, 9, 12, 18]\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 6))\r\n\r\n    arr1 = [4, 5, 8, 10, 15]\r\n    arr2 = [3, 6, 7, 9, 12, 18]\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 6))\r\n\r\n    arr1 = [4, 5, 8, 10, 15]\r\n    arr2 = [3, 6, 7, 9, 12, 18]\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 11))\r\n\r\n    arr1 = [4, 5, 8, 10,","votes":null},{"text":"\r\n    if (m+n) < k:\r\n        return -1\r\n\r\n    i = 0\r\n    j = 0\r\n    count = 0\r\n    while count < k:\r\n        if i == m:\r\n            return arr2[j]\r\n        elif j == n:\r\n            return arr1[i]\r\n        elif arr1[i] < arr2[j]:\r\n            i += 1\r\n        else:\r\n            j += 1\r\n        count += 1\r\n\r\n    if i == m:\r\n        return arr2[j]\r\n    else:\r\n        return arr1[i]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 5, 7, 9]\r\n    arr2 = [2, 4, 6, 8, 10]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 6\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n```\r\n\r\n### 2.2 \u6590\u6ce2\u90a3\u5951\u6570\u5217\r\n\r\n#### 2.2.1 \u9012\u5f52\r\n\r\n```python\r","votes":null},{"text":"\r\n    \"\"\"\r\n    Time Complexity: O(log(min(m, n)))\r\n    Space Complexity: O(1)\r\n    \"\"\"\r\n    if m > n:\r\n        m, n = n, m\r\n        arr1, arr2 = arr2, arr1\r\n\r\n    # Edge case\r\n    if k > m:\r\n        return find_kth(arr2, arr1, n, m, k - m)\r\n\r\n    # Find the middle of the first array\r\n    mid1 = m \/\/ 2\r\n    mid2 = k \/\/ 2 - 1\r\n\r\n    # If the middle of the first array <= the middle of the second array,\r\n    # the kth element must be in the second half of the first array and the first half of the second array\r\n    if arr1[mid1] <= arr2[mid2]:\r\n        return find_kth(arr1[mid1 + 1:], arr2, m - mid1 - 1, n, k - mid1 - 1)\r\n    # If the middle of the first array > the middle of the second array,\r\n    # the kth element must be in the second half of the second array and the first half of the first array\r\n    else:\r\n        return find_kth(arr1, arr2[mid2 + 1:], m, n - mid2 - 1, k - mid2 - 1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 5, 7, 9]\r\n    arr2 = [2, 4, 6, 8, 10, 11, 12]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    print(find_kth(arr1, arr2, m, n, 8))\r\n\r\n    arr1 = [1, 2, 3, 4, 5, 6, 7]\r\n    arr","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    half = k \/\/ 2\r\n    if arr1[m-1] < arr2[n-1]:\r\n        # search in arr1\r\n        if m >= half:\r\n            return find_kth(arr1, arr2, m-half, n, half)\r\n        else:\r\n            return find_kth(arr1, arr2, m, n-half, k-m)\r\n    else:\r\n        # search in arr2\r\n        if n >= half:\r\n            return find_kth(arr1, arr2, m, n-half, half)\r\n        else:\r\n            return find_kth(arr1, arr2, m-half, n, k-n)\r\n\r\n\r","votes":null},{"text":"\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    \r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if m > n:\r\n        if m - n >= k:\r\n            return find_kth(arr1, arr2, m - n, n, k)\r\n        k = k - (m - n)\r\n        return find_kth(arr1 + n, arr2, m, n, k)\r\n    else:\r\n        if n - m >= k:\r\n            return find_kth(arr1, arr2, m, n - m, k)\r\n        k = k - (n - m)\r\n        return find_kth(arr1, arr2 + m, m, n, k)\r\n\r","votes":null},{"text":"\r\n    arr1 = arr1[:m]\r\n    arr2 = arr2[:n]\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k == m+n:\r\n        return max(arr1[-1], arr2[-1])\r\n    if k <= m:\r\n        return find_kth(arr1, arr2, m-k, n, k)\r\n    if k <= m+n:\r\n        return find_kth(arr1, arr2, m, n-k+m, k)\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    elif n == 0:\r\n        return arr1[k - 1]\r\n    \r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    # Recursive case\r\n    if arr1[m - 1] < arr2[n - 1]:\r\n        return find_kth(arr1, arr2, m - 1, n, k - m)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n - 1, k - n)\r\n\r\n\r","votes":null},{"text":"\r\n    if m + n == k:\r\n        return min(arr1[-1], arr2[-1])\r\n    elif m + n < k:\r\n        return -1\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if arr1[0] > arr2[0]:\r\n        return find_kth(arr1, arr2[1:], m, n - 1, k)\r\n    else:\r\n        return find_kth(arr1[1:], arr2, m - 1, n, k)\r\n\r\nN = int(input())\r\narr1 = list(map(int, input().split()))\r\narr2 = list(map(int, input().split()))\r\nm, n = len(arr1), len(arr2)\r\n\r\nprint(find_kth(arr1, arr2, m, n, N))\r\n\r\n\r\n# Method 2: Using the idea of Binary search\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if arr1[m-1] < arr2[n-1]:\r\n        return find_kth(arr1, arr2[1:], m, n-1, k-1)\r\n    if arr1[m-1] > arr2[n-1]:\r\n        return find_kth(arr1[1:], arr2, m-1, n, k-1)\r\n    else:\r\n        return arr1[m-1]\r\n\r\n\r\narr1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89]\r\narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30","votes":null},{"text":"\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    i = int(k \/ 2) - 1\r\n    j = k - i - 1\r\n    if i < m and j < n:\r\n        if arr1[i] < arr2[j]:\r\n            return find_kth(arr1, arr2[j:], m, n - j, k - j)\r\n        else:\r\n            return find_kth(arr1[i:], arr2, m - i, n, k - i)\r\n    elif i < m:\r\n        return find_kth(arr1[i:], [], m - i, 0, k - i)\r\n    else:\r\n        return find_kth([], arr2[j:], 0, n - j, k - j)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 5, 7, 9, 11, 13, 15]\r\n    arr2 = [2, 4, 6, 8, 10, 12, 14, 16]\r\n\r\n    print(f\"Kth smallest element: {find_kth(arr1, arr2, len(arr1), len(arr2), 5)}\")\r\n\r\n    arr1 = [1, 3, 5, 7, 9, 11, 13, 15]\r\n    arr2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\r\n\r\n    print(f\"Kth smallest element: {find_kth(arr1, arr2, len(arr1), len(arr2), 1)}\")\r\n\r\n    arr1 = [1, 3, 5, 7, 9","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    mid_m = m \/\/ 2\r\n    mid_n = n \/\/ 2\r\n\r\n    if mid_m + mid_n < k:\r\n        if arr1[mid_m] < arr2[mid_n]:\r\n            return find_kth(arr1, arr2[mid_n + 1:], m, n - mid_n - 1, k - mid_n - 1)\r\n        else:\r\n            return find_kth(arr1[mid_m + 1:], arr2, m - mid_m - 1, n, k - mid_m - 1)\r\n\r\n    if mid_m + mid_n == k:\r\n        return arr1[mid_m]\r\n\r\n    if arr1[mid_m] > arr2[mid_n]:\r\n        return find_kth(arr1, arr2[mid_n + 1:], m, n - mid_n - 1, k - mid_n - 1)\r\n    else:\r\n        return find_kth(arr1[mid_m + 1:], arr2, m - mid_m - 1, n, k - mid_m - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    # base cases: only one array is left\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    # k is 1\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    # k is mid of the two arrays\r\n    if k == m + n:\r\n        return max(arr1[m - 1], arr2[n - 1])\r\n    # k is less than mid of the two arrays\r\n    if k <= m:\r\n        return find_kth(arr1[:k], arr2, m, n - k, k)\r\n    # k is greater than mid of the two arrays\r\n    return find_kth(arr1, arr2[:k - m], m, n - k, k)\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(m):\r\n        for j in range(n):\r\n            if i + j + 1 == k:\r\n                return arr1[i], arr2[j]\r\n\r\n    return None\r\n\r\n\r\n# Driver code\r\narr1 = [1, 3, 5, 7, 9]\r\narr2 = [2, 4, 6, 8, 10]\r\nk = 5\r\n\r\n# print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n\r\n# -----------------------------------------------------------------------------------------------------------------------\r\n# BINARY SEARCH\r\n# -----------------------------------------------------------------------------------------------------------------------\r\nfrom bisect import bisect_left\r\n\r\n\r","votes":null},{"text":"\r\n    index1 = index2 = 0\r\n    while index1 + index2 < k - 1:\r\n        if arr1[index1] <= arr2[index2]:\r\n            index1 += 1\r\n        else:\r\n            index2 += 1\r\n    if index1 == m:\r\n        return arr2[index2]\r\n    elif index2 == n:\r\n        return arr1[index1]\r\n    else:\r\n        if arr1[index1] <= arr2[index2]:\r\n            return arr1[index1]\r\n        else:\r\n            return arr2[index2]\r\n    \r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 2, 3, 4]\r\n    arr2 = [5, 6, 7, 8, ","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    pa, pb = m + n - k, min(k, m)\r\n    return (\r\n        find_kth(arr1, arr2, pa, pb, k - pb)\r\n        if arr1[pa - 1] > arr2[pb - 1]\r\n        else find_kth(arr1, arr2, pa, pb, k - pb - 1)\r\n    )\r\n\r\n\r\n# TESTS\r\nfor arr1, arr2, k, expected in [\r\n    ([1, 2, 3, 4], [5, 6, 7, 8], 3, 3),\r\n    ([1, 2, 3, 4], [5, 6, 7, 8], 4, 4),\r\n    ([1, 2, 3, 4], [5, 6, 7, 8], 5, 5),\r\n    ([1, 2, 3, 4], [5, 6, 7, 8], 6, 5),\r\n    ([1, 2, 3, 4], [5, 6, 7, 8], 7, 6),\r\n    ([1, 2, 3, 4], [5, 6, 7, 8], 8, 7),\r\n    ([1, 2, 3, 4], [5, 6, 7, 8], 9, 7),\r\n    ([1, 2, 3, 4], [5, 6, 7, 8], 10, 8),\r\n    ([1], [1, 2, 3,","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    mid_m = m \/\/ 2\r\n    mid_n = n \/\/ 2\r\n    if arr1[mid_m - 1] < arr2[mid_n - 1]:\r\n        return find_kth(arr1[mid_m:], arr2, m - mid_m, n, k - mid_m)\r\n    else:\r\n        return find_kth(arr1, arr2[mid_n:], m, n - mid_n, k - mid_n)\r\n\r\n\r","votes":null},{"text":"\r\n    # Return -1 if k is less than 1\r\n    if k < 1:\r\n        return -1\r\n\r\n    # Find total count of elements in merged array\r\n    count = m + n\r\n\r\n    # Base case\r\n    if k > count:\r\n        return -1\r\n\r\n    # Find mid for current window\r\n    mid = (m + n) \/\/ 2\r\n\r\n    # If mid is in first array\r\n    if mid <= m:\r\n        if arr2[n - 1] >= arr1[mid - 1]:\r\n            return find_kth(arr1, arr2, m, n - 1, k)\r\n        else:\r\n            return find_kth(arr1, arr2, mid, n, k - mid)\r\n    # If mid is in second array\r\n    else:\r\n        if arr1[m - 1] >= arr2[mid - m - 1]:\r\n            return find_kth(arr1, arr2, m - 1, n, k)\r\n        else:\r\n            return find_kth(arr1, arr2, m, mid, k - (m - mid))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(log(m+n))\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    if m + n <= k:\r\n        return None\r\n    elif m == 0:\r\n        return arr2[k-1]\r\n    elif n == 0:\r\n        return arr1[k-1]\r\n    elif k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = min(m, k \/\/ 2)\r\n    j = min(n, k \/\/ 2)\r\n\r\n    if arr1[i-1] < arr2[j-1]:\r\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\r\n    else:\r\n        return find_kth(arr1, arr2[j:], m, n-j, k-j)\r\n\r\n\r\n# Test cases\r\nprint(find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], 5, 7, 7))\r\nprint(find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], 5, 7, 8))\r\nprint(find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], 5, 7, 10))\r\nprint(find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], 5, 7, 1))\r\nprint(find_kth([], [6, 7, 8, 9, 10, 11, 12], 0, 7, 1))\r\nprint(find_kt","votes":null},{"text":"\r\n\r\n    if m + n == 0:\r\n        return\r\n\r\n    if m == 0:\r\n        return arr2[k-1]\r\n\r\n    if n == 0:\r\n        return arr1[k-1]\r\n\r\n    # if both arrays have at least one element\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    # if k is greater than total number of elements in both arrays\r\n    if k > m + n:\r\n        return\r\n\r\n    # Find median of first window. We have to take ceil to ignore\r\n    # the elements on right side\r\n    med_win1 = (ceil(m\/2.0) + ceil(n\/2.0))\r\n\r\n    # Find median of second window\r\n    med_win2 = (ceil(m\/2.0) + floor(n\/2.0))\r\n\r\n    if (med_win1 <= m and arr1[med_win1 - 1] > arr2[med_win2 - 1]):\r\n        # Median of first window is greater than\r\n        # median of second window. Recur for first\r\n        # half of first array and second half of\r\n        # second array\r\n        return find_kth(arr1, arr2, med_win1, n - med_win2, k)\r\n\r\n    elif (med_win2 <= n and arr1[med_win1 - 1] < arr2[med_win2 - 1]):\r\n        # Median of second window is greater than\r\n        # median of first window. Recur for second\r\n        # half of first array and first half of\r\n        # second array\r\n        return find_kth(arr1 + med_win1, arr2, m - med_win1, med_win2, k - med_win1)\r\n\r\n    else:\r\n        # else recur for first half of both array","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k]\r\n    if n == 0:\r\n        return arr1[k]\r\n    if k == 0:\r\n        return min(arr1[0], arr2[0])\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if arr1[m - 1] < arr2[n - 1]:\r\n        return find_kth(arr1, arr2, m - 1, n, k - m)\r\n    elif arr1[m - 1] > arr2[n - 1]:\r\n        return find_kth(arr1, arr2, m, n - 1, k - n)\r\n    else:\r\n        return arr1[m - 1]\r\n\r\n\r\narr1 = [1, 3, 5, 7, 9]\r\narr2 = [2, 4, 6, 8, 10]\r\nk = 4\r\n\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n\r\n# 2nd approach\r","votes":null},{"text":"\r\n    if m > 0 and n > 0:\r\n        if arr1[m - 1] > arr2[n - 1]:\r\n            return find_kth(arr1, arr2, m - 1, n, k)\r\n        elif arr1[m - 1] < arr2[n - 1]:\r\n            return find_kth(arr1, arr2, m, n - 1, k)\r\n        else:\r\n            return arr1[m - 1]\r\n    else:\r\n        if m > 0:\r\n            return arr1[m - 1]\r\n        if n > 0:\r\n            return arr2[n - 1]\r\n        else:\r\n            return -1\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n\r\n    # If k == 1 then return the element.\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    # If kth element in the first array is less than\r\n    # (or equal to) kth element in the second array,\r\n    # then kth element is present in first array.\r\n    if arr1[m-1] <= arr2[n-1]:\r\n        # If k is less than the number of elements\r\n        # in first array, then kth element is in\r\n        # first array.\r\n        if k <= m:\r\n            return find_kth(arr1, arr2, m, n-1, k)\r\n        # Else kth element is in second array.\r\n        return find_kth(arr1, arr2, m-1, n, k-m)\r\n\r\n    # If kth element in the second array is less than\r\n    # (or equal to) kth element in the first array,\r\n    # then kth element is present in second array.\r\n    if arr2[n-1] < arr1[m-1]:\r\n        # If k is less than the number of elements\r\n        # in second array, then kth element is in\r\n        # second array.\r\n        if k <= n:\r\n            return find_kth(arr1, arr2, m-1, n, k)\r\n        # Else kth element is in first array.\r\n        return find_kth(arr1, arr2, m, n-1, k-n)\r\n\r\n    return -1\r\n\r\n\r\n# Driver code\r\narr1 = [1, 5, 9, 10, 15, 20]\r\narr2 = [2, 3, 8, ","votes":null},{"text":"\r\n    if m + n - k < k:\r\n        return -1\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k == m + n:\r\n        return max(arr1[m - 1], arr2[n - 1])\r\n\r\n    i = min(m, k \/\/ 2)\r\n    j = min(n, k \/\/ 2)\r\n\r\n    if arr1[i - 1] == arr2[j - 1]:\r\n        return arr1[i - 1]\r\n    elif arr1[i - 1] > arr2[j - 1]:\r\n        return find_kth(arr1, arr2, i, j, k - j + 1)\r\n    else:\r\n        return find_kth(arr1, arr2, i, j, k - i + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    i = min(m, k\/\/2)\r\n    j = min(n, k\/\/2)\r\n    if arr1[i-1] < arr2[j-1]:\r\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\r\n    else:\r\n        return find_kth(arr1, arr2[j:], m, n-j, k-j)\r\n\r\n\r\narr1 = [1, 3, 5, 6, 7, 9]\r\narr2 = [2, 4, 8, 10]\r\n\r\nprint(find","votes":null},{"text":"\r\n    if m < 0 or n < 0:\r\n        return None\r\n\r\n    if m == 0:\r\n        return arr2[n - 1]\r\n\r\n    if n == 0:\r\n        return arr1[m - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[m - 1], arr2[n - 1])\r\n\r\n    if arr1[m - 1] > arr2[n - 1]:\r\n        return find_kth(arr1, arr2, m - 1, n, k - 1)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n - 1, k - 1)\r\n\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    arr1 = [1, 5, 9, 10, 15, 20]\r\n    arr2 = [2, 3, 8, 13]\r\n    k = 3\r\n\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n\r\n    arr1 = [1, 5, 9]\r\n    arr2 = [2, 3, 8, 13]\r\n    k = 4\r\n\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n\r\n    arr1 = [1, 5, 9]\r\n    arr2 = [2, 3, 8, 13]\r\n    k = 5\r\n\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n\r\n    arr1 = [1, 5, 9, 10, 15, 20]\r\n    arr2 = [","votes":null},{"text":"\r\n    \r\n    # If first array is empty then return element from \r\n    # second array\r\n    if (m == 0):\r\n        return arr2[k-1]\r\n    \r\n    # If second array is empty then return element from \r\n    # first array\r\n    if (n == 0):\r\n        return arr1[k-1]\r\n    \r\n    # If k is smaller than either m or n, then return \r\n    # the element from the array having larger length\r\n    if (k <= m):\r\n        return find_kth(arr1, arr2, m, n-1, k)\r\n    \r\n    # If k is greater than either m or n, then return \r\n    # the element from the array having smaller length\r\n    if (k > m+n):\r\n        return find_kth(arr1, arr2, m-1, n, k-m-n)\r\n    \r\n    # If k is in the range of two arrays, then return \r\n    # the element from the array having smaller length\r\n    if (arr1[m-1] > arr2[n-1]):\r\n        return find_kth(arr1, arr2, m-1, n, k)\r\n    \r\n    return find_kth(arr1, arr2, m, n-1, k)\r\n\r\n\r\n# Driver program to test above function\r\n#arr1 = [1, 5, 9, 10, 15, 20]\r\n#arr2 = [2, 3, 8, 13]\r\n#k = 5\r\n#arr1 = [1, 5, 9, 10, 15]\r\n#arr2 = [2, 3, 8, 13]\r\n#k = 6\r\n#arr1 = [1, 5, 9, 10, 15]\r\n#arr2 = [2, 3, 8, 13]","votes":null}],"time":{"count":11.0,"avg":159761.1461818182,"std":34472.1144997421,"cov":0.2157728291}}
{"id":598,"question":"def armstrong_number(number):\r\n    \"\"\"Write a function to check whether the given number is armstrong or not.\"\"\"","answers":[{"text":"\r\n    sum_of_power = 0\r\n    n = len(str(number))\r\n    for i in str(number):\r\n        sum_of_power += int(i) ** n\r\n    return 1 if sum_of_power == number else 0\r\n\r\n\r","votes":59268.808},{"text":"\r\n    \r\n    # Initialize\r\n    sum = 0\r\n    \r\n    # Get the input as string\r\n    number = str(number)\r\n    \r\n    # Get the length of the number\r\n    len_num = len(number)\r\n    \r\n    # Find the sum of power of each digit\r\n    for digit in number:\r\n        sum += (int(digit) ** len_num)\r\n    \r\n    # return\r\n    return sum == int(number)\r\n\r\n\r\n\r","votes":84315.596},{"text":"\r\n    \r\n    number = str(number)\r\n    sum = 0\r\n    for n in number:\r\n        sum = sum + int(n) ** len(number)\r\n    return sum == int(number)\r\n\r\n","votes":87450.64},{"text":"\r\n    n = number\r\n    sum = 0\r\n    while n > 0:\r\n        r = n % 10\r\n        sum += r ** 3\r\n        n \/\/= 10\r\n    return sum == number\r\n\r\n\r\nprint(armstrong_number(153))\r","votes":89918.644},{"text":"\r\n    sum = 0\r\n    num = number\r\n    while num > 0:\r\n        r = num % 10\r\n        sum += r ** 3\r\n        num \/\/= 10\r\n    return number == sum\r\n\r\n\r","votes":91084.928},{"text":"\r\n    sum = 0\r\n    n = number\r\n    while n > 0:\r\n        r = n % 10\r\n        sum += r**3\r\n        n = int(n\/10)\r\n    return sum == number\r\n\r","votes":93161.66},{"text":"\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":94738.652},{"text":"\r\n    # your code goes here\r\n    sum = 0\r\n    n = number\r\n    while n > 0:\r\n        digit = n % 10\r\n        sum += digit ** 3\r\n        n = n \/\/ 10\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(armstrong_number(n))\r\n\r\n\r\n# Explanation:\r\n#","votes":95696.436},{"text":"\r\n    n = number\r\n    s = 0\r\n    while n > 0:\r\n        r = n % 10\r\n        s = s + r * r * r\r\n        n = n \/\/ 10\r\n    return s == number\r\n\r\n\r\nprint(armstrong_number(153))","votes":98400.208},{"text":"\r\n    number = str(number)\r\n    length = len(number)\r\n    sum = 0\r\n    for i in range(length):\r\n        sum += int(number[i])**length\r\n    if sum == int(number):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":99590.532},{"text":"\r\n    x = number\r\n    n = 0\r\n    while x > 0:\r\n        n += 1\r\n        x = x \/\/ 10\r\n    sum = 0\r\n    x = number\r\n    while x > 0:\r\n        a = x % 10\r\n        sum += a ** n\r\n        x = x \/\/ 10\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":101137.276},{"text":"\r\n    digits = [int(i) for i in str(number)]\r\n    power = len(digits)\r\n    return number == sum([int(i)**power for i in str(number)])\r\n\r\n\r","votes":101390.06},{"text":"\r\n    # number = int(input(\"Enter the number: \"))\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        rem = temp % 10\r\n        sum += rem ** 3\r\n        temp \/\/= 10\r\n    return sum == number\r\n\r\n\r","votes":101645.24},{"text":"\r\n    num = number\r\n    sum = 0\r\n    while num > 0:\r\n        digit = num % 10\r\n        sum += digit ** 3\r\n        num = num \/\/ 10\r\n    return sum == number\r\n\r\n\r\n# test\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(100))\r\n\r\n\r\n# Solution 2\r","votes":103621.44},{"text":"\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        temp \/\/= 10\r\n        sum += digit**3\r\n    return sum == number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(154))\r\n","votes":103677.68},{"text":"\r\n    # Create a list with digits of the given number.\r\n    digits = [int(digit) for digit in str(number)]\r\n    # Calculate the length of the list.\r\n    length = len(digits)\r\n    # Calculate the sum of the digits raised to the length.\r\n    sum_of_digits = sum([digit ** length for digit in digits])\r\n    # Compare the number and the sum of the digits raised to the length.\r\n    return number == sum_of_digits\r\n\r\n\r","votes":104642.616},{"text":"\r\n    sum_of_cubes = 0\r\n    for i in range(len(str(number))):\r\n        sum_of_cubes += int(str(number)[i])**3\r\n    if sum_of_cubes == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":104979.748},{"text":"\r\n    \r\n    # The number is equal to the sum of cubes of its digits.\r\n    # Example: 153=1**3 + 5**3 + 3**3\r\n    \r\n    # Convert the given number to a string.\r\n    number_str = str(number)\r\n    \r\n    # Create a variable to store the sum of cubes of its digits.\r\n    sum_of_cubes = 0\r\n    \r\n    # Create a variable to store the length of the given number.\r\n    number_length = len(number_str)\r\n    \r\n    # Loop to calculate the sum of cubes of its digits.\r\n    for digit in number_str:\r\n        digit = int(digit)\r\n        sum_of_cubes = sum_of_cubes + (digit ** 3)\r\n    \r\n    # Return True if the sum of cubes of its digits is equal to the given number,\r\n    # otherwise return False.\r\n    if sum_of_cubes == number:\r\n        return True\r\n    else:\r\n        return False\r\n# Main function.\r","votes":107250.176},{"text":"\r\n    total = 0\r\n    original = number\r\n    while original:\r\n        digit = original % 10\r\n        total += digit ** 3\r\n        original \/\/= 10\r\n    return total == number\r\n\r\n\r","votes":108731.964},{"text":"\r\n    num_length = len(str(number))\r\n    rem = []\r\n    for i in range(num_length):\r\n        rem.append(int(str(number)[i]))\r\n    rem_length = len(rem)\r\n    result = 0\r\n    for i in range(rem_length):\r\n        result += rem[i] ** rem_length\r\n    return number == result\r\n\r\n\r","votes":108979.092},{"text":"\r\n    digits = [int(digit) for digit in str(number)]\r\n    return number == sum([int(digit) ** len(digits) for digit in str(number)])\r\n\r\n\r","votes":114095.568},{"text":"\r\n    \r\n    sum = 0\r\n    \r\n    temp = number\r\n    \r\n    while temp > 0:\r\n        \r\n        sum = sum + (temp % 10) ** 3\r\n        \r\n        temp = int(temp \/ 10)\r\n        \r\n    if sum == number:\r\n        \r\n        return True\r\n    \r\n    else:\r\n        \r\n        return False\r\n\r\n\r","votes":118086.956},{"text":"\r\n    original_number = number\r\n    number = str(number)\r\n    sum = 0\r\n    for i in number:\r\n        sum += int(i)**len(number)\r\n    return sum == original_number\r\n\r\n\r","votes":118386.956},{"text":"\r\n    # input\r\n    #   number: int\r\n    # output\r\n    #   True if armstrong else False\r\n\r\n    # Edge case\r\n    if number < 0:\r\n        return False\r\n\r\n    # init variables\r\n    orig_number = number\r\n    sum_of_powers = 0\r\n\r\n    # logic\r\n    # count sum of each digit raised to its power\r\n    while number > 0:\r\n        sum_of_powers += (number % 10) ** len(str(orig_number))\r\n        number = int(number \/ 10)\r\n\r\n    # return True if sum == orig_number\r\n    return sum_of_powers == orig_number\r\n\r\n\r\n# print(armstrong_number(153))\r\n# print(armstrong_number(125))\r\n# print(armstrong_number(126))\r\n# print(armstrong_number(123))\r\n# print(armstrong_number(1234))\r\n# print(armstrong_number(-123))\r\n# print(armstrong_number(-1234))\r\n# print(armstrong_number(-12345))\r\n# print(armstrong_number(-123456))\r\n\r\n\r\n# # 4. Write a function to check whether a number is a palindrome or not.\r\n#","votes":119143.732},{"text":"\r\n    number = str(number)\r\n    sum = 0\r\n    for i in range(len(number)):\r\n        sum += int(number[i])**len(number)\r\n    if sum == int(number):\r\n        return True\r\n    return False\r\n\r\n\r","votes":119632.488},{"text":"\r\n    sum = 0\r\n    n = number\r\n    while n > 0:\r\n        digit = n % 10\r\n        sum += digit ** 3\r\n        n = n \/\/ 10\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":126608.5},{"text":"\r\n    \r\n    number = str(number)\r\n    total = 0\r\n    \r\n    for i in number:\r\n        total += int(i)**len(number)\r\n    \r\n    if total == int(number):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":127490.168},{"text":"\r\n    n = len(str(number))\r\n    s = str(number)\r\n    sum = 0\r\n    for i in s:\r\n        sum += int(i)**n\r\n    return sum == number\r\n\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1634))\r\n\r\n\r\n#2. Write a function that takes a string as an argument and returns the count of\r\n#the vowels in the string.\r\n\r","votes":130966.952},{"text":"\r\n    sum, copy = 0, number\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum += digit * digit * digit\r\n        number \/\/= 10\r\n    return sum == copy\r\n\r\n\r","votes":133615.528},{"text":"\r\n    a, b = 0, number\r\n\r\n    while b > 0:\r\n        a += (b % 10) ** 3\r\n        b \/\/= 10\r\n\r\n    return a == number\r\n\r\n\r","votes":133914.816},{"text":"\r\n    sum = 0\r\n    n = number\r\n    while n > 0:\r\n        digit = n % 10\r\n        sum += digit ** 3\r\n        n \/\/= 10\r\n    return sum == number\r\n\r\n\r\nprint(armstrong_number(7))\r\nprint(armstrong_number(1634))\r\nprint(armstrong_number(407))\r\nprint(armstrong_number(125))\r\nprint(armstrong_number(153))\r\n\r\n# Output:\r\n# True\r\n# True\r\n# False\r\n# False\r\n#","votes":134797.472},{"text":"\r\n    # Write your code here\r\n    number = str(number)\r\n    return int(number) == sum([int(number[i])**len(number) for i in range(len(number))])\r\n\r\n# Tests\r","votes":135696.692},{"text":"\r\n    sum = 0\r\n    n = number\r\n    while n > 0:\r\n        r = n % 10\r\n        n = n\/\/10\r\n        sum += r ** 3\r\n    return sum == number\r\n\r\n\r","votes":144636.272},{"text":"\r\n    \r\n    #return number == sum([int(digit)**3 for digit in str(number)])\r\n    #return sum([int(digit)**3 for digit in str(number)]) == number\r\n    \r\n    #return number == sum(map(int, str(number)**3))\r\n    #return sum(map(int, str(number)**3)) == number\r\n    \r\n    return sum([int(digit)**3 for digit in str(number)]) == number\r\n\r\nprint(armstrong_number(100))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(200))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(0))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(407))\r\nprint(armstrong_number(371))\r\nprint","votes":150118.84},{"text":"\r\n    str_number = str(number)\r\n    len_number = len(str_number)\r\n    sum = 0\r\n    for i in str_number:\r\n        sum += int(i) ** len_number\r\n\r\n    if number == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(154))\r\n\r\n\r\n# 2. Write a function to check whether the given number is a palindrome or not.\r\n# (A palindrome is a number that remains same when its digits are reversed. Like,\r\n# 121, 2323, 34343, 454554 etc.)\r\n\r\n\r","votes":151768.292},{"text":"\r\n    \r\n    a = str(number)\r\n    b = len(a)\r\n    c = int(a[0])\r\n    d = int(a[1])\r\n    e = int(a[2])\r\n    f = c**b + d**b + e**b\r\n    g = f == number\r\n    return g\r\n\r\n\r","votes":153798.424},{"text":"\r\n    num = number\r\n    sum = 0\r\n    while num > 0:\r\n        digit = num % 10\r\n        sum += digit ** 3\r\n        num \/\/= 10\r\n    if sum == number:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Test 1\r\n    number = 153\r\n    print(\"Test 1: \")\r\n    print(f\"The given number is {number}.\")\r\n    print(f\"Is the given number {number} an armstrong number? {armstrong_number(number)}\")\r\n\r\n    # Test 2\r\n    number = 125\r\n    print(\"Test 2: \")\r\n    print(f\"The given number is {number}.\")\r\n    print(f\"Is the given number {number} an armstrong number? {armstrong_number(number)}\")\r\n\r\n    # Test 3\r\n    number = 111\r\n    print(\"Test 3: \")\r\n    print(f\"The given number is {number}.\")\r\n    print(f\"Is the given number {number} an armstrong number? {armstrong_number(number)}\")\r\n\r\n    # Test 4\r\n    number = 100\r\n    print(\"Test 4: \")\r\n    print(f\"The given number is {number}.\")\r\n    print(f\"Is the given number {number} an armstrong number? {armstrong_number(number)}\")\r\n\r\n    # Test 5\r\n    number = 1000\r\n    print(\"Test 5: \")\r\n    print(f\"The given number is {number}.\")\r\n    print(f\"Is the given number {number} an armstrong number? {armstrong_number(number)}\")\r\n\r\n    # Test 6\r\n    number = 1001\r\n    print(\"Test 6: \")\r\n    print(f\"The given number is {number}.\")","votes":162156.58},{"text":"\r\n    \r\n    sum_of_cubes = 0\r\n    num = number\r\n    while num > 0:\r\n        digit = num % 10\r\n        sum_of_cubes += (digit**3)\r\n        num = num \/\/ 10\r\n        \r\n    if sum_of_cubes == number:\r\n        return True\r\n    return False\r\n\r\n\r\n# Test Cases\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(9474))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1634))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(9474))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1634))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(9474))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1634))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(9474))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1634))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(9474))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1634))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(9474))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1634))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(9474))","votes":168961.612},{"text":"\r\n    n_str = str(number)\r\n    n_len = len(n_str)\r\n    sum = 0\r\n    for i in n_str:\r\n        sum += (int(i) ** n_len)\r\n    if sum == number:\r\n        return True\r\n    return False\r\n\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(371))","votes":178394.36},{"text":"\r\n    temp = number\r\n    sum = 0\r\n    while(temp>0):\r\n        sum+=temp%10**len(str(number))\r\n        temp\/\/=10\r\n    if(sum==number):\r\n        return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    print(\"Enter a number: \")\r\n    number=int(input())\r\n    if(armstrong_number(number)):\r\n        print(\"Armstrong number\")\r\n    else:\r\n        print(\"Not an Armstrong number\")\r\n\r\n\r\n#Another Solution\r\n\r","votes":null},{"text":"\r\n    \r\n    # Your code goes here\r\n    number = int(number)\r\n    if number < 0:\r\n        return False\r\n    else:\r\n        original_number = number\r\n        sum = 0\r\n        while number != 0:\r\n            digit = number % 10\r\n            sum += digit**3\r\n            number = number \/\/ 10\r\n        if original_number == sum:\r\n            return True\r\n        else:\r\n            return False\r\n\r\ntest = int(input())\r\n\r\nwhile test > 0:\r\n    test -= 1\r\n    number = input()\r\n    if armstrong_number(number) == True:\r\n        print('True')\r\n    else:\r\n        print('False')\r\n\r\n# Output Format\r\n# For each test case, display True if the given number is an Armstrong number, else display False.\r\n\r\n# Sample Input\r\n# 3\r\n# 153\r\n# 125\r\n# 54\r\n\r\n# Sample Output\r\n# True\r\n# False\r\n# True\r\n\r\n# Explanation\r\n# Test case 1: 153 is an Armstrong number since 1^3 + 5^3 + 3^3 = 153.\r\n# Test case 2: 125 is not an Armstrong number since 1^3 + 2^3 + 5^3 = 32 and not 125.\r\n# Test case 3: 54 is an Armstrong number since 5^3 + 4^3 = 54.\r\n\r\n# Time complexity: O(log N) where N is the given number\r\n# Space complexity: O(1)\r\n\r\n# The function armstrong_number() takes the number as an input and returns True if the number is an Armstrong number and False if it is not.\r\n\r\n# Method 2\r\n\r","votes":null},{"text":"\r\n    \r\n    # 153 = 1^3 + 5^3 + 3^3\r\n    \r\n    # find the number of digits in the number\r\n    n = len(str(number))\r\n    \r\n    # find the sum\r\n    sum = 0\r\n    \r\n    while number > 0:\r\n        digit = number % 10\r\n        sum += digit ** n\r\n        number \/\/= 10\r\n        \r\n    return sum == number\r\n\r\n\r","votes":null},{"text":"\r\n    try:\r\n        number = int(number)\r\n        original_number = number\r\n        temp = number\r\n        while temp > 0:\r\n            digit = temp % 10\r\n            temp \/\/= 10\r\n            number **= digit\r\n        if original_number == number:\r\n            return \"Yes\"\r\n        else:\r\n            return \"No\"\r\n    except:\r\n        return","votes":null},{"text":"\r\n    import math\r\n    temp = number\r\n    num_of_digits = 0\r\n    while(temp > 0):\r\n        temp \/\/= 10\r\n        num_of_digits += 1\r\n    sum = 0\r\n    temp = number\r\n    while(temp > 0):\r\n        digit = temp % 10\r\n        sum += digit ** num_of_digits\r\n        temp \/\/= 10\r\n    if sum == number:\r\n        print(\"Armstrong number\")\r\n    else:\r\n        print(\"Not an Armstrong number\")\r\n\r\n\r","votes":null},{"text":"\r\n    print(f\"{number} is an Armstrong Number if the sum of the cube of each digit is equal to the number itself.\")\r\n    sum = 0\r\n    for i in str(number):\r\n        sum += int(i) ** 3\r\n    if sum == number:\r\n        print(f\"{number} is an Armstrong Number\")\r\n    else:\r\n        print(f\"{number} is not an Armstrong Number\")\r\n\r\n\r\narmstrong_number(153)\r\narmstrong_number(154)\r\narmstrong_number(1634)\r\narmstrong_number(1635)\r\narmstrong_number(1234567889)\r\narmstrong_number(1234567890)\r\n\r\n\r\n# Write a function to check whether the given number is palindrome or not.\r","votes":null},{"text":"\r\n\r\n    # initialise\r\n    armstrong = 0\r\n    number_of_digits = 0\r\n    temp = number\r\n\r\n    # find the number of digits in the given number\r\n    while temp > 0:\r\n        temp \/\/= 10\r\n        number_of_digits += 1\r\n\r\n    # find the armstrong number\r\n    while number > 0:\r\n        armstrong += (number % 10)**number_of_digits\r\n        number \/\/= 10\r\n\r\n    if number == armstrong:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    number = str(number)\r\n    length = len(number)\r\n    sum = 0\r\n    for i in number:\r\n        sum += int(i) ** length\r\n    if sum == number:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter the number to check if it is Armstrong or not: \"))\r\n    if armstrong_number(number):\r\n        print(\"The number is an Armstrong number.\")\r\n    else:\r\n        print(\"The number is not an Armstrong number.\")\r\n\r\n\r\n\"\"\"\r\nTime Complexity  \r\nThe time complexity of the above algorithm will be O(N) where \u2018N\u2019 is the number of digits in the given number.\r\n\r\nSpace Complexity  \r\nThe algorithm runs in constant space O(1).\r\n\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the number to check if it is Armstrong or not: 153\r\nThe number is an Armstrong number.\r\n\r\nSAMPLE II\r\n\r\nEnter the number to check if it is Armstrong or not: 123\r\nThe number is not an Armstrong number.\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTime Complexity  \r\nThe time complexity of the above algorithm will be O(N) where \u2018N\u2019 is the number of digits in the given number.\r\n\r\nSpace Complexity  \r\nThe algorithm runs in constant space O(1).\r\n\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\nEnter the number to check if it is Armstrong or not: 153\r\nThe number is an Armstrong number.\r\n\r\nSAMPLE II\r\n\r\nEnter the number to check if it is Armstrong or not: 123\r\nThe number is not an Armstrong number.\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTime Complexity  \r\nThe time complexity of the above algorithm will be O(N) where ","votes":null},{"text":"\r\n    \r\n    # Convert to string\r\n    num = str(number)\r\n    \r\n    # Find the length of the number\r\n    length = len(num)\r\n    \r\n    # Find the sum of the cubes of the digits\r\n    sum = 0\r\n    for i in num:\r\n        sum += int(i) ** length\r\n        \r\n    # Return whether sum equals the given number\r\n    return sum == number\r\n\r\n# Test cases\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(100))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(1000))\r\nprint(armstrong_number(1234))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(2000))\r\nprint(armstrong_number(121))\r\nprint(armstrong_number(10))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(0))\r\nprint(armstrong_number(370))\r\nprint(armstrong_number(-123))","votes":null},{"text":"\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp =","votes":null},{"text":"\r\n    temp=number\r\n    sum=0\r\n    while(temp>0):\r\n        digit=temp%10\r\n        sum+=digit**3\r\n        temp\/\/=10\r\n    if(sum==number):\r\n        print('The number is armstrong')\r\n    else:\r\n        print('The number is not armstrong')\r\n\r\narmstrong_number(153)\r\narmstrong_number(154)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # initialize the original number to the given number\r\n    original = number\r\n\r\n    # calculate the sum of the cubes of the individual digits in the original number\r\n    sum_of_cubes = 0\r\n    while(original > 0):\r\n        digit = original % 10\r\n        sum_of_cubes += digit ** 3\r\n        original = original \/\/ 10\r\n\r\n    # if sum of cubes is equal to the original number, it is an armstrong number\r\n    if sum_of_cubes == number:\r\n        print(\"The given number {0} is an armstrong number.\".format(number))\r\n    else","votes":null},{"text":"\r\n    n = len(str(number))\r\n    num = 0\r\n    while number > 0:\r\n        digit = number % 10\r\n        num += digit**n\r\n        number \/\/= 10\r\n    return num\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(1234))\r\n    print(armstrong_number(555))\r\n    print(armstrong_number(999))\r\n    print(armstrong_number(443))\r\n    print(armstrong_number(1634))\r\n    print(armstrong_number(1235))\r\n    print(armstrong_number(1))\r\n    print(armstrong_number(154))\r\n    print(armstrong_number(153","votes":null},{"text":"\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n        if sum == number:\r\n            print(f\"{number} is an armstrong number\")\r\n        else:\r\n            print(f\"{number} is not an armstrong number\")\r\n\r\n\r","votes":null},{"text":"\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp = temp \/\/ 10\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Test Code\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1253))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1020))\r\nprint(armstrong_number(1534))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(370))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1020))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(1534))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(1020))\r\nprint(armstrong_number(370))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1253))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(1534))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(370))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1253))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(1534))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(370))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1020))\r\nprint(armstrong_number(37","votes":null},{"text":"\r\n    num = number\r\n    sum_of_cubes = 0\r\n    order = 0\r\n    while num != 0:\r\n        num = num \/\/ 10\r\n        order += 1\r\n    remainder = number\r\n    while remainder != 0:\r\n        digit = remainder % 10\r\n        sum_of_cubes += digit ** order\r\n        remainder = remainder \/\/ 10\r\n    if sum_of_cubes == number:\r\n        print(f\"{number} is an Armstrong number\")\r\n    else:\r\n        print(f\"{number} is not an Armstrong number\")\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    temp = number\r\n    while(temp > 0):\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        print(sum,digit)\r\n        temp \/\/= 10\r\n    return number == sum\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(125))\r\nprint(armstrong_number(407))\r\nprint(armstrong_number(0))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(-1))\r\nprint(armstrong_number(100))\r\nprint(armstrong_number(101))\r\nprint(armstrong_number(102))\r\nprint(armstrong_number(103))\r\nprint(armstrong_number(104))\r\nprint(armstrong_number(105))\r\nprint(armstrong_number(106))\r\nprint(armstrong_number(107))\r\nprint(armstrong_number(108))\r\nprint(armstrong_number(109))\r\nprint(armstrong_number(110))\r\nprint(armstrong_number(111))\r\nprint(armstrong_number(112))\r\nprint(armstrong_number(113))\r\nprint(armstrong_number(114))\r\nprint(armstrong_number(115))\r\nprint(armstrong_number(116))\r\nprint(armstrong_number(117))\r\nprint(armstrong_number(118))\r\nprint(armstrong_number(119))\r\nprint(armstrong_number(120))\r\nprint(armstrong_number(121))\r\nprint(armstrong_number(122))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(124))\r\nprint(armstrong_number(125))\r\nprint(ar","votes":null},{"text":"\r\n    number_list = []\r\n    while number > 0:\r\n        number_list.append(number % 10)\r\n        number = number \/\/ 10\r\n    print(number_list)\r\n    sum = 0\r\n    for i in range(len(number_list)):\r\n        sum += (number_list[i] ** len(number_list))\r\n    print(sum)\r\n    if sum == int(str(number)):\r\n        print(\"Armstrong number\")\r\n    else:\r\n        print(\"Not an Armstrong number\")\r\n\r\n\r\narmstrong_number(371)\r\n\r\n'''\r\n\r\n\r\n# 3. Write a Python program to check if two given integers are consecutive. \r\n'''\r","votes":null},{"text":"\r\n    temp=number\r\n    sum=0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp = temp \/\/ 10\r\n    if sum == number:\r\n        print('The number is armstrong')\r\n    else:\r\n        print('The number is not armstrong')\r\n    \r","votes":null},{"text":"\r\n    sum = 0\r\n    temp = number\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum += digit ** 3\r\n        number \/\/= 10\r\n    if temp == sum:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(125))\r\n    print(armstrong_number(154))\r\n    print(armstrong_number(123))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(log(n))\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    n = int(number)\r\n    result = n\r\n    while n > 0:\r\n        result = result + (n % 10)**3\r\n        n = n \/\/ 10\r\n    return result == number\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    digits = [int(i) for i in str(number)]\r\n    # print(digits)\r\n    sum_ = 0\r\n    for i in digits:\r\n        sum_ += i**len(digits)\r\n        # print(sum_)\r\n    \r\n    if sum_ == number:\r\n        print(\"The number is Armstrong\")\r\n    else:\r\n        print(\"The number is not Armstrong\")\r\n\r\n\r\narmstrong_number(1634)\r\narmstrong_number(895)\r\n\r\n\r\n\r\n\r\n\r\n# 4. Write a Python program to check whether a given integer is a palindrome or not.\r","votes":null},{"text":"\r\n    \r\n    n=str(number)\r\n    n=int(n)\r\n    i=0\r\n    sum=0\r\n    while(i<len(n)):\r\n        d=n%10\r\n        sum=sum+d**3\r\n        n=n\/\/10\r\n        i=i+1\r\n    if(sum==number):\r\n        print(\"The number is armstrong\")\r\n    else:\r\n        print(\"The number is not armstrong\")\r\n\r","votes":null},{"text":"\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit**3\r\n        temp \/\/= 10\r\n\r\n    if number == sum:\r\n        print(\"{} is an Armstrong number\".format(number))\r\n    else:\r\n        print(\"{} is not an Armstrong number\".format(number))\r\n\r\n\r","votes":null},{"text":"\r\n    n = number\r\n    sum = 0\r\n    while n != 0:\r\n        r = n % 10\r\n        sum += r ** 3\r\n        n = n \/\/ 10\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nnumber = int(input(\"Enter an integer: \"))\r\n\r\nif armstrong_number(number):\r\n    print(f\"{number} is an armstrong number\")\r\nelse:\r\n    print(f\"{number} is not an armstrong number\")\r\n\r\n\r\n\"\"\"\r\nSample Input:\r\n153\r\n\r\nSample Output:\r\n153 is an armstrong number\r\n\r\nTime Complexity: O(log(N))\r\nSpace Complexity: O(1)\r\n\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\n\r\n### Alternative Solution\r\n\r","votes":null},{"text":"\r\n    \r\n    n = int(number)\r\n    copy = n\r\n    s = 0\r\n    while copy > 0:\r\n        rem = copy % 10\r\n        s += rem ** 3\r\n        copy \/\/= 10\r\n    if n == s:\r\n        print(\"Armstrong Number\")\r\n    else:\r\n        print(\"Not an Armstrong Number\")\r\n\r\narmstrong_number(153)\r\narmstrong_number(154)\r\n\r\n\r\n# Another Solution\r\n\r","votes":null},{"text":"\r\n    n=int(number)\r\n    s=0\r\n    while n>0:\r\n        s=s+(n%10)**3\r\n        n=n\/\/10\r\n    if number==s:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\na=int(input(\"Enter the number\"))\r\nprint(armstrong_number(a))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Converting the number to a list of digits\r\n    digits = list(map(int, str(number)))\r\n    \r\n    # Iterating over the number of digits\r\n    for i in range(len(digits)):\r\n        \r\n        # Calculating the power\r\n        p = digits[i] ** len(digits)\r\n        \r\n        # Checking if the power equals","votes":null},{"text":"\r\n    \r\n    # Converting to string\r\n    temp = str(number)\r\n    \r\n    # Calculating the sum of nth power of each digit in the number\r\n    sum_of_powers = 0\r\n    for i in temp:\r\n        sum_of_powers += int(i)**len(temp)\r\n    \r\n    # If the sum of nth power of each digit in the number\r\n    # is same as the number then it's an armstrong number\r\n    if sum_of_powers == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Input from the user\r\nnumber = int(input(\"Enter a number: \"))\r\n\r\n# Calling the function","votes":null},{"text":"\r\n    num = number\r\n    sum_num = 0\r\n    while num > 0:\r\n        digit = num % 10\r\n        sum_num += digit ** 3\r\n        num = num \/\/ 10\r\n    if sum_num == number:\r\n        print('The number is armstrong')\r\n    else:\r\n        print('The number is not armstrong')\r\n\r\n\r\n# Driver Code\r\narmstrong_number(153)\r\narmstrong_number(154)\r\n\r\n\r\n# Time Complexity: O(log N)\r\n# Space Complexity: O(1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 7. Write a program to check for palindrome.\r\n\"\"\"\r\nA palindrome is a number that remains same when its digits are reversed. \r\nFor example, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676","votes":null},{"text":"\r\n    num = number\r\n    sum = 0\r\n    while num > 0:\r\n        digit = num % 10\r\n        sum += digit ** 3\r\n        num = num \/\/ 10\r\n    if sum == number:\r\n        print(\"The given number is an Armstrong number\")\r\n    else:\r\n        print(\"The given number is not an Armstrong number\")\r\n\r\n\r","votes":null},{"text":"\r\n    #","votes":null},{"text":"\r\n    if number < 0:\r\n        return \"Invalid Number\"\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp = temp \/\/ 10\r\n    return \"Yes\" if sum == number else \"No\"\r\n\r\n\r","votes":null},{"text":"\r\n    num=number\r\n    sum=0\r\n    while num>0:\r\n        x=num%10\r\n        sum=sum+(x**3)\r\n        num=num\/\/10\r\n    if sum==number:\r\n        print(\"It is an armstrong number\")\r\n    else:\r\n        print(\"It is not an armstrong number\")\r\n\r\n\r\n# Program to check if the given number is an Armstrong number or not\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    \r\n    # finding the sum of the cube of individual digits of the input number\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum += digit ** 3\r\n        number \/\/= 10\r\n    return sum == number\r\n\r\n# Test cases\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1253))\r\nprint(armstrong_number(1532))\r\nprint(armstrong_number(1234))\r\nprint(armstrong_number(54748))\r\nprint(armstrong_number(1111))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(1534))\r\nprint(armstrong_number(15345345345))\r\nprint(armstrong_number(0))\r\nprint(armstrong_number(-1))\r\nprint(armstrong_number(-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    \r\n    # 1-4-8-27\r\n    # 3-9-1\r\n    # 153\r\n    # 370\r\n    # 371\r\n    # 0\r\n    \r\n    # 153 = 3*3*3 + 9*9*9 + 1*1*1\r\n    \r\n    # 370 = 3*3*3 + 7*7*7 + 0*0*0\r\n    \r\n    # 371 = 3*3*3 + 7*7*7 + 1*1*1\r\n    \r\n    # 0 = 0*0*0\r\n    \r\n    # 0 = 0*0*0\r\n    \r\n    # 0 = 0*0*0\r\n    \r\n    # 1 = 1*1*1\r\n\r\n    # 111 = 1*1*1\r\n    \r\n    # 111 = 1*1*1\r\n    \r\n    # 111 = 1*1*1\r\n    \r\n    # 111 = 1*1*1\r\n    \r\n    # 111 = 1*1*1\r\n    \r\n    # 111 = 1*1*1\r\n    \r\n    # 111 = 1*1*1\r\n\r\n    \r\n    number = str(number)\r\n    original_number = number\r\n    length = len(number)\r\n    result = 0\r\n    \r\n    for i in range(0, length):\r\n        result += int(number[i])**length\r\n        \r\n        \r\n    if result == int(original_number):\r\n        print(\"Yes, %s is an Armstrong number.\" % original_number)\r\n    \r\n    else:\r\n        print(\"No, %s is not an Armstrong number.\"","votes":null},{"text":"\r\n    \r\n    # Find the length of the number\r\n    length = len(str(number))\r\n    \r\n    # Find the cubes of digits of the number\r\n    sum = 0\r\n    while(number != 0):\r\n        sum = sum + (number % 10) ** length\r\n        number = number \/\/ 10\r\n    \r\n    # If sum equals to the original number, it is an Armstrong number\r\n    if(sum == number):\r\n        return \"Yes\"\r\n    else:\r\n        return \"No\"\r\n\r\n# Sample Test Case \r\nprint(armstrong_number(153)) # Should print 'Yes'\r\nprint(armstrong_number(140)) # Should print 'No'\r\nprint(armstrong_number(243)) # Should print 'Yes'\r\nprint(armstrong_number(444)) # Should print 'No'\r\nprint(armstrong_number(2)) # Should print 'Yes'\r\nprint(armstrong_number(11)) # Should print 'No'\r\nprint(armstrong_number(1)) # Should print 'Yes'\r\nprint(armstrong_number(10)) # Should print 'No'\r\nprint(armstrong_number(0)) # Should print 'Yes'\r\nprint(armstrong_number(-1)) # Should print 'No'\r\nprint(armstrong_number(-153)) # Should print 'No'\r\nprint(armstrong_number(-1534)) # Should print 'No'\r\nprint(armstrong_number(-1534236469)) # Should print 'No'\r\n\r\n# Sample Output \r\n# Yes\r\n# No\r\n# Yes\r\n# No\r\n# Yes\r\n# No\r\n# Yes\r\n# No\r\n# Yes\r\n# No\r\n# No\r\n# No\r\n\r\n# Solution\r\n\r","votes":null},{"text":"\r\n    import math\r\n    n = number\r\n    sum = 0\r\n    while n","votes":null},{"text":"\r\n    original_num = number\r\n    number = str(number)\r\n    sum_ = 0\r\n    for n in number:\r\n        sum_ += int(n)**len(number)\r\n    return True if sum_ == original_num else False\r\n\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(191))\r\nprint(armstrong_number(243))\r\nprint(armstrong_number(125))\r\nprint(armstrong_number(121))\r\nprint(armstrong_number(345))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(235))\r\nprint(armstrong_number(145))\r\nprint(armstrong_number(1533))\r\nprint(armstrong_number(15334))\r\nprint(armstrong_number(153345))\r\nprint(armstrong_number(1533456))\r\nprint(armstrong_number(15334567))\r\nprint(armstrong_number(153345678))\r\nprint(armstrong_number(1533456789))\r\nprint(armstrong_number(15334567890))\r\nprint(armstrong_number(153345678901))\r\nprint(armstrong_number(1533456789012))\r\nprint(armstrong_number(15334567890123))\r\nprint(armstrong_number(153345678901234))\r\nprint(armstrong_number(153345","votes":null},{"text":"\r\n    n = len(str(number))\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** n\r\n        temp \/\/= 10\r\n    if sum == number:\r\n        return \"Armstrong Number\"\r\n    return \"Not an Armstrong Number\"\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(1634))\r\n    print(armstrong_number(123))\r\n    print(armstrong_number(1234))\r\n    print(armstrong_number(154))\r\n\r\n\r\n\"\"\"\r\nTest cases:\r\n1. If number is Armstrong number, return \"Armstrong Number\".\r\n2. If number is not Armstrong number, return \"Not an Armstrong Number\".\r\n\"\"\"\r\n\r\n\"\"\"\r\nInput:\r\n53\r\n153\r\n123\r\n1234\r\n154\r\n\r\nOutput:\r\nNot an Armstrong Number\r\nArmstrong Number\r\nNot an Armstrong Number\r\nNot an Armstrong Number\r\nNot an Armstrong Number\r\n\r\nExplanation:\r\n1. 53 is not an Armstrong number because 53 != 5**3 + 3**3 = 125\r\n2. 153 is an Armstrong number because 153 = 1**3 + 5**3 + 3**3 = 153\r\n3. 123 is not an Armstrong number because 123 != 1**3 + 2**3 + 3**3 = 13\r\n4. 1234 is not an Armstrong number because 1234 != 1**4 + 2**4 + 3**4 + 4**4 = 360\r\n5. 154 is not an Armstrong number because 154 != ","votes":null},{"text":"\r\n    given_number = list(str(number))\r\n    given_number_length = len(given_number)\r\n    given_number_sum = sum([int(i) ** given_number_length for i in given_number])\r\n\r\n    if given_number_sum == number:\r\n        print(f\"{number} is an armstrong number.\")\r\n    else:\r\n        print(f\"{number} is not an armstrong number.\")\r\n\r\n\r\narmstrong_number(153)\r\narmstrong_number(407)\r\narmstrong_number(1634)\r\narmstrong_number(123456789)\r\narmstrong_number(123456788)\r\narmstrong_number(1234567890)\r\narmstrong_number(12345678901)\r\narmstrong_number(123456789012)\r\narmstrong_number(1234567890123)\r\narmstrong_number(12345678901234)\r\narmstrong_number(123456789012345)\r\narmstrong_number(1234567890123456)\r\narmstrong_number(12345678901234567)\r\narmstrong_number(123456789012345678)\r\narmstrong_number(1234567890123456789)\r\narmstrong_number(12345678901234567890)\r\narmstrong_number(123456789012345678901)\r\narmstrong_number(1234567890123456789012)\r\narmstrong_number(1","votes":null},{"text":"\r\n    \r\n    # 153 = 1^3 + 5^3 + 3^3\r\n    # 1 + 125 + 27 = 153\r\n    # 1 + 1 + 1 + 1 + 5 + 5 + 5 + 3 + 3 + 3 = 153\r\n    \r\n    # 20 = 2^2 + 0^2\r\n    # 4 + 0 = 4\r\n    # 4 + 0 + 0 = 4\r\n    # 4 + 0 + 0 + 0 = 4\r\n    \r\n    # 1634 = 1^4 + 6^4 + 3^4 + 4^4\r\n    # 1 + 64 + 81 + 256 = 350\r\n    # 1 + 1 + 1 + 1 + 1 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 6 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 4 + 4 + 4 + 4 = 1634\r\n    \r\n    # 1534 != 1^4 + 5^4 + 3^4 + 4^4\r\n    \r\n    # 1000 = 1^3 + 0^3 + 0^3 + 0^3\r\n    # 1 + 0 + 0 + 0 = 1\r\n    # 1 + 0 + 0 + 0 + 0 = 1\r\n    # 1 + 0 + 0 + 0 + 0 + 0 = 1\r\n    \r\n    # 1001 = 1^3 + 0^3 + ","votes":null},{"text":"\r\n    \r\n    # get the number of digits in the number\r\n    num_of_digits = len(str(number))\r\n\r\n    # initialize the sum\r\n    sum = 0\r\n\r\n    # get the last digit\r\n    last_digit = number % 10\r\n\r\n    # get the first digit\r\n    first_digit = number \/\/ 10 ** (num_of_digits - 1)\r\n\r\n    # add the first digit to sum\r\n    sum += first_digit ** num_of_digits\r\n\r\n    # get the middle digits\r\n    middle_digits = number - first_digit * 10 ** (num_of_digits - 1) - last_digit\r\n\r\n    # add the middle digits to sum\r\n    sum += middle_digits ** num_of_digits\r\n\r\n    # add the last digit to sum\r\n    sum += last_digit ** num_of_digits\r\n\r\n    # check if sum is equal to the number\r\n    if sum == number:\r\n        print(number, \"is an armstrong number\")\r\n    else:\r\n        print(number, \"is not an armstrong number\")\r\n\r\n# call the function\r\narmstrong_number(153)\r\narmstrong_number(123)\r\narmstrong_number(154)\r\narmstrong_number(543)\r\narmstrong_number(9474)\r\narmstrong_number(371)\r\narmstrong_number(1634)\r\narmstrong_number(370)\r\narmstrong_number(1634)\r\narmstrong_number(1634)\r\narmstrong_number(154)\r\narmstrong_number(154)\r\narmstrong_number(154)\r\narmstrong_number(154)\r\narmstrong_number(154)\r\narmstrong_number(154)\r\narmstrong_number(154)\r\narmstrong_number(154)\r\narmstrong_number(","votes":null},{"text":"\r\n    number_list = []\r\n    temp = number\r\n    while temp > 0:\r\n        number_list.append(temp % 10)\r\n        temp \/\/= 10\r\n    armstrong = 0\r\n    for i in range(len(number_list)):\r\n        armstrong += number_list[i] ** len(number_list)\r\n    if armstrong == number:\r\n        return True\r\n    return False\r\n\r\n\r\n# Test cases\r\nprint(armstrong_number(271))\r\nprint(armstrong_number(272))\r\nprint(armstrong_number(125))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(477))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(0))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(9474))\r\nprint(armstrong_number(9475))\r\nprint(armstrong_number(1234))\r\nprint(armstrong_number(1235))\r\nprint(armstrong_number(135))\r\nprint(armstrong_number(11))\r\nprint(armstrong_number(10))\r\nprint(armstrong_number(12))\r\nprint(armstrong_number(13))\r\nprint(armstrong_number(14))\r\nprint(armstrong_number(15))\r\nprint(armstrong_number(16))\r\nprint(armstrong_number(17))\r\nprint(armstrong_number(18))\r\nprint(armstrong_number(19))\r\nprint(armstrong_number(20))\r\nprint(armstrong_number(21))\r\nprint(armstrong_number(22))\r\nprint(ar","votes":null},{"text":"\r\n    number = list(map(int, str(number)))\r\n    num = len(number)\r\n    value = sum([int(number[i])**num for i in range(num)])\r\n    if value == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list_of_numbers = [153, 370, 371, 407]\r\n    for i in list_of_numbers:\r\n        if armstrong_number(i","votes":null},{"text":"\r\n    sum = 0\r\n    number = int(number)\r\n    temp = number\r\n    while temp > 0:\r\n        sum += (temp % 10) ** 3\r\n        temp \/\/= 10\r\n    return 1 if sum == number else 0\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(154))\r\n\r\n\r\n\"\"\"\r\nSOLUTION\r\n\r","votes":null},{"text":"\r\n    n=number\r\n    sum=0\r\n    while n>0:\r\n        d=n%10\r\n        sum=sum+d**3\r\n        n=n\/\/10\r\n    if sum==number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n\r\n\r\nif __name__=='__main__':\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(144))\r\n    print(armstrong_number(1634))\r\n    print(armstrong_number(272))\r\n    print(armstrong_number(163))\r\n    print(armstrong_number(207))\r\n    print(armstrong_number(100))\r\n    print(armstrong_number(154))\r\n    print(armstrong_number(371))\r\n    print(armstrong_number(370))\r\n    print(armstrong_number(371))\r\n    print(armstrong_number(156))\r\n    print(armstrong_number(154))\r\n    print(armstrong_number(190))\r\n    print(armstrong_number(15","votes":null},{"text":"\r\n    \r\n    num = int(number)\r\n    num_str = str(num)\r\n    sum = 0\r\n    for i in num_str:\r\n        sum += int(i) ** len(num_str)\r\n    if sum == num:\r\n        return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(123))\r\n    print(armstrong_number(121))\r\n    print(armstrong_number(132))\r\n    print(armstrong_number(125))\r\n    print(armstrong_number(133))\r\n    print(armstrong_number(13232))\r\n    print(armstrong_number(100))\r\n    print(armstrong_number(10))\r\n    print(armstrong_number(1000))\r\n    print(armstrong_number(10000))\r\n    print(armstrong_number(100000))\r\n    print(armstrong_number(1000000))\r\n    print(armstrong_number(10000000))\r\n    print(armstrong_number(100000000))\r\n    print(armstrong_number(1000000000))\r\n    print(armstrong_number(10000000000))\r\n    print(armstrong_number(100000000000))\r\n    print(armstrong_number(1000000000000))\r\n    print(armstrong_number(10000000000000))\r\n    print(armstrong_number(100000000000000))\r\n    print(armstrong_number(10000000000000","votes":null},{"text":"\r\n    sum_of_digit = 0\r\n    while number > 0:\r\n        remainder = number % 10\r\n        sum_of_digit += remainder ** 3\r\n        number = number \/\/ 10\r\n    return sum_of_digit\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter the number: \"))\r\n    if armstrong_number(number):\r\n        print(\"{} is an armstrong number.\".format(number))\r\n    else:\r\n        print(\"{} is not an armstrong number.\".format(number))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(log(n))\r\nSpace Complexity: O(1)\r\n\r\nSample Input 1:\r\nEnter the number: 153\r\n\r\nSample Output 1:\r\n153 is an armstrong number.\r\n\r\nSample Input 2:\r\nEnter the number: 24\r\n\r\nSample Output 2:\r\n24 is not an armstrong number.\r\n\r\nEXPLANATION:\r\nIn the first example, the input is 153.\r\n153 is an armstrong number because 1^3 + 5^3 + 3^3 = 153.\r\n\r\nIn the second example, the input is 24.\r\n24 is not an armstrong number because 2^3 + 4^3 = 29.\r\n29 is not equal to 24.\r\n\r\nThe first example is an armstrong number because the sum of the cubes of the digits in the number is equal to the number itself.\r\nThis is because the sum of the cubes of the digits is equal to the number itself.\r\nOn the other hand, the second example is not an armstrong number because the sum of the cubes of the digits is not equal to the number itself.\r\n\r\nFor example, the first example can be written as:\r\n1^3 + 5^3 + 3^3 = 153\r\n\r\nSo, we can see that 15","votes":null},{"text":"\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum = sum + digit * digit * digit\r\n        temp = temp \/\/ 10\r\n    if number == sum:\r\n        print(f\"{number} is an Armstrong number\")\r\n    else:\r\n        print(f\"{number} is not an Armstrong number\")\r\n\r\n\r\narmstrong_number(153)\r\narmstrong_number(125)\r\narmstrong_number(1634)\r\narmstrong_number(1456)\r\n","votes":null},{"text":"\r\n\r\n    # Get the length of the number\r\n    num_len = len(str(number))\r\n\r\n    # Get the number without the 0's\r\n    number = int(str(number).replace('0', ''))\r\n\r\n    # Get the required armstrong number\r\n    armstrong_num = ((number \/\/ (10 ** (num_len - 1))) + (number % 10)) ** num_len\r\n\r\n    # Return True if the number is armstrong\r\n    return True if number == armstrong_num else False\r\n\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(154))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #finding the number of digits in the input number\r\n    count = 0\r\n    while number:\r\n        number = number\/\/10\r\n        count += 1\r\n    \r\n    #finding the sum of the cubes of each digit\r\n    sum = 0\r\n    while number > 0:\r\n        temp = number % 10\r\n        sum = sum + (temp ** 3)\r\n        number = number \/\/ 10\r\n    \r\n    #checking if sum equals the input number\r\n    if sum == number:\r\n        return \"It is an armstrong number.\"\r\n    else:\r\n        return \"It is not an armstrong number.\"\r\n    \r\n\r\n\r\n#armstrong_number(153)\r\n#armstrong_number(370)\r\n#armstrong_number(371)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    temp = number\r\n    while temp > 0:\r\n        temp = temp \/\/ 10\r\n        count = count + 1\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        dig = temp % 10\r\n        sum = sum + dig ** count\r\n        temp = temp \/\/ 10\r\n    if sum == number:\r\n        return \"It is an armstrong number\"\r\n    else:\r\n        return \"It is not an armstrong number\"\r\n\r\nnumber = int(input(\"Enter the number to check: \"))\r\nprint(armstrong_number(number))\r\n\r\n# 2nd Method\r","votes":null},{"text":"\r\n    digit = 0\r\n    result = 0\r\n    num = number\r\n    while num > 0:\r\n        digit = num % 10\r\n        result += digit ** 3\r\n        num \/\/= 10\r\n    if number == result:\r\n        print(f\"{number} is an armstrong number.\")\r\n    else:\r\n        print(f\"{number} is not an armstrong number.\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter number to check: \"))\r\n    armstrong_number(number)\r\n\r\n\r\n\"\"\"\r\nTime Complexity \nThe time complexity of the above algorithm will be O(log n) which is the number of digits in the input number.\r\n\r\nSpace Complexity :\r\nNo additional space is required, hence the space complexity is O(1).\r\n\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nI\/P: 153\r\n\r\nO\/P: 153 is an armstrong number.\r\n\r\n\r\nSAMPLE 2\r\n\r\nI\/P: 125\r\n\r\nO\/P: 125 is not an armstrong number.\r\n\r\n\r\nSAMPLE 3\r\n\r\nI\/P: 371\r\n\r\nO\/P: 371 is an armstrong number.\r\n\r\n\r\nSAMPLE 4\r\n\r\nI\/P: 407\r\n\r\nO\/P: 407 is an armstrong number.\r\n\r\n\r\nSAMPLE 5\r\n\r\nI\/P: 1634\r\n\r\nO\/P: 1634 is not an armstrong number.\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    check = 0\r\n    temp = number\r\n    while temp > 0:\r\n        check += temp % 10\r\n        temp \/\/= 10\r\n    return check == number\r\n\r\n#print(armstrong_number(153))\r\n#print(armstrong_number(154))\r\n\r\n# Write a function that returns the number of 1s in the binary\r\n# representation of a number.\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    num = number\r\n    while(num > 0):\r\n        r = num%10\r\n        sum += r**3\r\n        num = num\/\/10\r\n\r\n    if(sum == number):\r\n        print(\"Armstrong number\")\r\n    else:\r\n        print(\"Not an Armstrong number\")\r\n\r\n\r\narmstrong_number(int(input()))\r\n\r\n#","votes":null},{"text":"\r\n    num = number\r\n    sum = 0\r\n    power = 0\r\n    while num > 0:\r\n        power = num % 10\r\n        sum += power ** 3\r\n        num \/\/= 10\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Enter a number:\")\r\n    number = int(input())\r\n    print(f\"Is {number} an Armstrong number? {armstrong_number(number)}\")\r\n\r\n\r\n\"\"\"\r\nTime Complexity \nThe above algorithm will take O(d) time where \u2018d\u2019 is the number of digits in the given number.\r\n\r\nSpace Complexity:\r\nThe algorithm runs in constant space O(1).\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1","votes":null},{"text":"\r\n    n = number\r\n    number = 0\r\n    while n > 0:\r\n        number += n % 10 ** 3\r\n        n \/\/= 10\r\n    if n == 0 and number == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # The sum of the cubes of the digits of a number equals the number itself.\r\n    # For example, 0, 1, 153, 370, 371 and 407 are the armstrong numbers.\r\n\r\n    # IMPORTS\r\n    import math\r\n\r\n    # NOTE: The number is assumed to be a positive integer.\r\n\r\n    # FUNCTIONS\r\n   ","votes":null},{"text":"\r\n    if number < 0:\r\n        return False\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit =","votes":null}],"time":{"count":39.0,"avg":116973.1180512821,"std":25669.6991699494,"cov":0.219449559}}
{"id":599,"question":"def sum_average(number):\r\n    \"\"\"Write a function to find sum and average of first n natural numbers.\"\"\"","answers":[{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r","votes":63639.968},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i+1\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":68235.308},{"text":"\r\n    sum_of_numbers = 0\r\n    for i in range(number + 1):\r\n        sum_of_numbers += i\r\n    average = sum_of_numbers \/ number\r\n    return sum_of_numbers, average\r\n\r\n\r","votes":70839.628},{"text":"\r\n    sum = 0\r\n    count = 0\r\n    for i in range(1, number+1):\r\n        sum = sum + i\r\n        count = count + 1\r\n    average = sum \/ count\r\n    return sum, average\r\n\r","votes":71814.128},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\nprint(sum_average(10))\r\n\r\n# 2. Write a function to find the sum of all the multiples of 3 or 5 below 1000.\r","votes":74137.176},{"text":"\r\n\r\n    sum = 0\r\n    for i in range(0, number+1):\r\n        sum += i\r\n    average = sum\/number\r\n    return sum, average\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(10))\r\n\r\n\r\n\"\"\"\r\nFunction Name    :  sum_average()\r\nFunction Date    :  5 Sep 2020\r\nFunction Author  :  Prasad Dangare\r\nInput            :  Int\r\nOutput           :  Int\r\n\"\"\"\r\n\r\n\r","votes":75313.312},{"text":"\r\n    # Write your code here\r\n    if number <= 0:\r\n        return None\r\n    \r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    \r\n    average = sum \/ number\r\n    return sum, average\r\n\r","votes":76414.6},{"text":"\r\n    sum = 0\r\n    for i in range(number + 1):\r\n        sum += i\r\n    return sum, (sum \/ number)\r\n\r\n\r","votes":77628.744},{"text":"\r\n\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n\r\n    average = sum \/ number\r\n\r\n    return sum, average\r\n\r\n\r","votes":77792.464},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r\n\r","votes":79113.724},{"text":"\r\n    total = 0\r\n    for num in range(1,number+1):\r\n        total += num\r\n    average = total\/number\r\n    return total, average\r\n\r","votes":79290.268},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum = sum + i\r\n    average = sum \/ number\r\n    return sum, average\r\n    \r\nprint(sum_average(10))\r\n\r\n\r","votes":79714.66},{"text":"\r\n    result = 0\r\n    for i in range(1, number + 1):\r\n        result += i\r\n        print(i)\r\n    return result, result \/ number\r\n\r\n\r\nprint(sum_average(10))\r\n\r\n\r","votes":79891.388},{"text":"\r\n    sum_number = 0\r\n    for i in range(1, number + 1):\r\n        sum_number += i\r\n    average = sum_number \/ number\r\n    return sum_number, average\r\n\r\n\r","votes":81975.64},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    return (sum, average)\r\n\r\n\r","votes":84779.38},{"text":"\r\n\r\n    sum = 0\r\n    for num in range(1, number + 1):\r\n        sum += num\r\n\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":85809.564},{"text":"\r\n    if type(number) is not int:\r\n        raise TypeError(\"number must be an integer\")\r\n    if number <= 0:\r\n        raise ValueError(\"number must be a positive integer\")\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r\n\r","votes":86858.684},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum = sum + i + 1\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r\nprint(sum_average(10))\r\n\r\n\r","votes":87643.036},{"text":"\r\n    return sum(range(1, number + 1)), sum(range(1, number + 1)) \/ number\r\n\r\n\r\nprint(sum_average(5))\r\n\r\n\r","votes":88266.804},{"text":"\r\n    # return a tuple with the sum and the average\r\n    # sum = 0\r\n    # average = 0\r\n    # for i in range(1, n + 1):\r\n    #     sum += i\r\n    # average = sum\/n\r\n    # return sum, average\r\n    return sum(range(1, number + 1)), sum(range(1, number + 1)) \/ number\r\n\r\n\r","votes":89020.576},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n\r\n    average = sum\/number\r\n    return (sum, average)\r\n\r\n\r","votes":89360.48},{"text":"\r\n    sum = 0\r\n    for i in range(1,number+1):\r\n        sum += i\r\n    return sum, sum\/number\r\n\r\n\r","votes":90140.52},{"text":"\r\n    sum_number = 0\r\n    for i in range(1, number+1):\r\n        sum_number += i\r\n    return sum_number, sum_number\/number\r\n\r\n\r","votes":91100.78},{"text":"\r\n    sum = 0\r\n    average = 0\r\n    for n in range(1, number + 1):\r\n        sum = sum + n\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":91893.58},{"text":"\r\n    sum = 0\r\n    # loop till the number\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    average = sum\/number\r\n    return sum, average\r\n\r\n\r\n# Test the function\r\nprint(sum_average(5))\r\n\r\n\r\n# Using dictionary\r","votes":92967.74},{"text":"\r\n    sum = 0\r\n    for i in range(1,number+1):\r\n        sum = sum + i\r\n    return sum, sum\/number\r\n\r\n\r","votes":93291.34},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":93787.976},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n        ave = sum \/ number\r\n    return sum, ave\r\n\r\n\r\nprint(sum_average(5))\r\n\r\n\r","votes":96314.06},{"text":"\r\n    sum_of_numbers = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_numbers += i\r\n    average = sum_of_numbers \/ number\r\n\r\n    return sum_of_numbers, average\r\n\r\n\r","votes":96995.924},{"text":"\r\n    sum_of_num = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_num = sum_of_num + i\r\n    average = sum_of_num \/ number\r\n    return sum_of_num, average\r\n\r\n\r","votes":97312.164},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    average = sum\/number\r\n    return sum, average\r\n\r\n\r","votes":97870.432},{"text":"\r\n    if type(number) != int:\r\n        return \"Please enter an integer\"\r\n    elif number < 0:\r\n        return \"Please enter a positive integer\"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":98937.976},{"text":"\r\n    sum_of_numbers = 0\r\n    for i in range(1, number+1):\r\n        sum_of_numbers += i\r\n    average = sum_of_numbers\/number\r\n    return sum_of_numbers, average\r\n\r\n\r","votes":100351.248},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum = sum + i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":101268.012},{"text":"\r\n    sum_ = 0\r\n    for i in range(1, number + 1):\r\n        sum_ = sum_ + i\r\n    return sum_, sum_\/number\r\n\r\n\r\nprint(sum_average(100))\r\n\r\n\r","votes":101824.224},{"text":"\r\n    \r\n    sum = 0\r\n    sum_list = []\r\n    for i in range(1, number + 1):\r\n        sum = sum + i\r\n        sum_list.append(i)\r\n    return sum, sum\/number\r\n\r\n\r\nprint(sum_average(10))\r\n\r\n\r\n\r\n#Exercise 2\r\n#Write a function named find_mean that takes a list of numbers and returns the mean of the numbers.\r\n\r","votes":102208.212},{"text":"\r\n    s = 0\r\n    for i in range(number+1):\r\n        s += i\r\n    return s, s\/number\r\n\r","votes":103726.484},{"text":"\r\n    \r\n    sum = 0\r\n    \r\n    for num in range(1, number + 1):\r\n        sum += num\r\n        \r\n    average = sum \/ number\r\n    \r\n    return sum, average\r\n\r\n\r","votes":107182.2},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    return(sum, sum\/number)\r\n\r\n\r","votes":107317.304},{"text":"\r\n    \r\n    # your code goes here\r\n    sum = 0\r\n    for i in range(1,number+1):\r\n        sum = sum + i\r\n        \r\n    average = sum\/number\r\n    \r\n    return sum,average\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(sum_average(n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":107731.568},{"text":"\r\n    s = 0\r\n    for i in range(1, number + 1):\r\n        s = s + i\r\n    return s, s \/ number\r\n\r\n\r","votes":110106.596},{"text":"\r\n    # code goes here\r\n    sum = 0\r\n    for i in range(0, number):\r\n        sum += i + 1\r\n    average = sum \/ number\r\n    return (sum, average)\r\n\r\n\r","votes":110158.66},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum = sum + i\r\n    average = sum\/number\r\n    return sum, average\r\n\r","votes":111624.66},{"text":"\r\n    sum = 0\r\n    average = 0\r\n    for i in range(number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":112551.516},{"text":"\r\n    total = 0\r\n    for i in range(1, number+1):\r\n        total += i\r\n    return total, total\/number\r\n\r\n\r\nprint(sum_average(10))\r\n\r\n\r","votes":113041.204},{"text":"\r\n    sum = 0\r\n    for num in range(number + 1):\r\n        sum += num\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":114857.324},{"text":"\r\n    sum_of_n = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_n += i\r\n    average = sum_of_n\/number\r\n    return sum_of_n, average\r\n\r\n\r","votes":115064.412},{"text":"\r\n    sum_numbers = 0\r\n    for x in range(0, number+1):\r\n        sum_numbers += x\r\n    return sum_numbers, sum_numbers\/number\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(100))\r\n\r\n\r\n# Using list comprehension\r","votes":116537.776},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    return sum, sum\/number\r\n\r\n\r","votes":118158.416},{"text":"\r\n    \r\n    sum_ = 0\r\n    for i in range(1, number+1):\r\n        sum_ = sum_ + i\r\n    average = sum_ \/ number\r\n    \r\n    return sum_, average\r\n\r","votes":118173.22},{"text":"\r\n    sum_value = 0\r\n    for i in range(1, number+1):\r\n        sum_value += i\r\n    average = sum_value\/number\r\n    return sum_value, average\r\n\r\n\r","votes":118730.44},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum = sum + (i + 1)\r\n    average = sum \/ number\r\n    return (sum, average)\r\n\r\n\r","votes":119541.012},{"text":"\r\n    sum_of_n = 0\r\n    avg_of_n = 0\r\n    for i in range(1, number+1):\r\n        sum_of_n += i\r\n    avg_of_n = sum_of_n \/ number\r\n    return sum_of_n, avg_of_n\r\n\r\n\r","votes":120227.508},{"text":"\r\n    sum_of_numbers = 0\r\n    for numbers in range(1, number + 1):\r\n        sum_of_numbers += numbers\r\n    average = sum_of_numbers \/ number\r\n    return sum_of_numbers, average\r\n\r\n\r\nprint(sum_average(10))\r\n\r\n\r","votes":120455.104},{"text":"\r\n    sum = 0\r\n    for i in range(1,number+1):\r\n        sum += i\r\n    avg = sum\/number\r\n    return (sum,avg)\r\n\r","votes":125837.54},{"text":"\r\n    sum = 0\r\n    average = 0\r\n\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":127264.48},{"text":"\r\n    return sum(range(1, number + 1)), sum(range(1, number + 1)) \/ number\r\n\r\n\r","votes":127875.844},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    average = sum\/number\r\n    return sum, average\r\n\r","votes":128018.36},{"text":"\r\n    sum_of_numbers = 0\r\n    for num in range(1, number + 1):\r\n        sum_of_numbers = sum_of_numbers + num\r\n    return sum_of_numbers, sum_of_numbers \/ number\r\n\r\n\r\nprint(sum_average(10))\r\n\r\n\r","votes":132896.896},{"text":"\r\n    sum=0\r\n    for i in range(1,number+1):\r\n        sum+=i\r\n    average=sum\/number\r\n    return sum,average\r\n\r","votes":134363.656},{"text":"\r\n    # create the sum and average variables with 0 to start\r\n    sum = 0\r\n    average = 0\r\n    # for loop for the first n natural numbers\r\n    for i in range(1, number + 1):\r\n        # add the values to sum\r\n        sum = sum + i\r\n        # average equals the sum divided by the number of values\r\n        average = sum \/ number\r\n    # return the sum and average\r\n    return sum, average\r\n\r\n# call the function and print the results\r\nprint(sum_average(5))\r\n\r\n\r\n# ==============================================================================================================\r\n# Challenge 02\r\n# Print all the prime numbers between 1 and 100.\r\n# ==============================================================================================================\r\n\r\n# create the function\r","votes":136294.772},{"text":"\r\n\r\n    # Use the formula for sum and average of first n natural numbers.\r\n    # Sum = n(n+1)\/2\r\n    # Average = n(n+1)\/2n\r\n    sum = (number*(number+1))\/2\r\n    average = sum\/number\r\n\r\n    # Return the result.\r\n    return sum, average\r\n\r\n\r\n# Call the function.\r\nprint(sum_average(10))\r\n\r\n\r","votes":139416.836},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    # To find average\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\nprint(sum_average(10))\r\n\r\n# Recursive Function\r\n\r","votes":178364.828},{"text":"\r\n    sum_value = number * (number+1) \/\/ 2\r\n    average_value = sum_value \/\/ number\r\n    return sum_value, average_value\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(0, number):\r\n        sum += i\r\n    average = sum\/number\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    if number < 1:\r\n        print(\"Please enter a positive integer.\")\r\n        return\r\n    if number == 1:\r\n        print(\"Sum of 1 natural number is 1.\")\r\n        print(\"Average of 1 natural number is 1.\")\r\n        return\r\n\r\n    sum_of_n = (number * (number + 1)) \/\/ 2\r\n    print(f\"Sum of {number} natural numbers is {sum_of_n}.\")\r\n    print(f\"Average of {number} natural numbers is {sum_of_n \/ number}.\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter a positive integer: \"))\r\n    sum_average(n)\r\n\r\n\r\n# 4. Write a function to find sum of squares of first n natural numbers.\r","votes":null},{"text":"\r\n    # using list comprehension\r\n    # sum_ = sum([n for n in range(1, number+1)])\r\n    # average = sum_ \/ number\r\n\r\n    # using loop\r\n    sum_ = 0\r\n    for n in range(1, number+1):\r\n        sum_ += n\r\n    average = sum_ \/ number\r\n\r\n    print(f\"Sum: {sum_}\")\r\n    print(f\"Average: {average}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter a number: \"))\r\n    sum_average(number)\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE I\r\n\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    number = int(input())\r\n    for i in range(1, number + 1):\r\n        sum = sum + i\r\n        average = sum \/ number\r\n    print(\"Sum of the first {0} natural numbers is {1} and average is {2:.2f}\".format(number, sum, average))\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum \/ number\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    print(f\"Sum: {sum} and Average: {average}\")\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum\r\n    \r","votes":null},{"text":"\r\n    sum = 0\r\n    for num in range(1, number + 1):\r\n        sum += num\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sum_average(5))\r\n    print(sum_average(7))\r\n    print(sum_average(10))\r\n    print(sum_average(15))\r\n\r\n\r\n\"\"\"\r\nFunction Name    :  sum_average()\r\nFunction Date    :  2 Oct 2020\r\nFunction Author  :  Prasad Dangare\r\nInput            :  Integer\r\nOutput           :  Integer,Float\r\n\"\"\"\r\n\r\n\"\"\"\r\nSample Input : 5\r\nSample Output: (15, 3)\r\n\r\nSample Input : 7\r\nSample Output: (28, 4)\r\n\r\nSample Input : 10\r\nSample Output: (55, 5.5)\r\n\r\nSample Input : 15\r\nSample Output: (90, 6)\r\n\"\"\"\r\n\r\n\"\"\"\r\nIn the above program, we have defined a function named sum_average() which takes a number as an input. \r\nThe function returns the sum and average of the numbers up to N.\r\n\r\nFirst we have taken the variable sum and assigned 0 to it. Then we have taken a loop which runs from 1 to N. \r\nWe have added the value of i with the value of sum.","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum = sum + i\r\n    return sum, sum \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    sum_of_numbers = 0\r\n    for i in range(number):\r\n        sum_of_numbers += i\r\n    average = sum_of_numbers \/ number\r\n    return sum_of_numbers, average\r\n\r\n\r\nprint(\"Test sum_average():\")\r\nprint(sum_average(10))  # Should be (45, 4.5)\r\nprint(sum_average(5))  # Should be (10, 2.0)\r\nprint(sum_average(1))  # Should be (0, 0.0)\r\n\r\n\r","votes":null},{"text":"\r\n    sum_of_n = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_n += i\r\n    return \"Sum of first \" + str(number) + \" natural numbers is \" + str(sum_of_n) + \" and average is \" + str(\r\n        sum_of_n \/\/ number)\r\n\r\n\r","votes":null},{"text":"\r\n    sum_number = 0\r\n    for i in range(0,number):\r\n        sum_number += i\r\n    average = sum_number\/number\r\n    return [sum_number,average]\r\n\r\nprint(sum_average(10))\r\n\r\n#Given a list of integers, return the largest integer in the list\r","votes":null},{"text":"\r\n    sum = 0\r\n    for n in range(number + 1):\r\n        sum += n\r\n    return sum, sum \/ (number + 1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"The sum of the first {} natural numbers is: {}\".format(\r\n        10, sum_average(10)[0]))\r\n    print(\"The average of the first {} natural numbers is: {}\".format(\r\n        10, sum_average(10)[1]))\r\n\r\n    print(\"The sum of the first {} natural numbers is: {}\".format(\r\n        40, sum_average(40)[0]))\r\n    print(\"The average of the first {} natural numbers is: {}\".format(\r\n        40, sum_average(40)[1]))\r\n\r\n    print(\"The sum of the first {} natural numbers is: {}\".format(\r\n        100, sum_average(100)[0]))\r\n    print(\"The average of the first {} natural numbers is: {}\".format(\r\n        100, sum_average(100)[1]))\r\n\r\n    print(\"The sum of the first {} natural numbers is: {}\".format(\r\n        200, sum_average(200)[0]))\r\n    print(\"The average of the first {} natural numbers is: {}\".format(\r\n        200, sum_average(200)[1]))\r\n\r\n    print(\"The sum of the first {} natural numbers is: {}\".format(\r\n        300, sum_average(300)[0]))\r\n    print(\"The average of the first {} natural numbers is: {}\".format(\r\n        300, sum_average(300)[1]))\r\n\r\n    print(\"The sum of the first {} natural numbers is: {}\".format(\r\n        400, sum_average(400)[0]))\r\n    print(\"The average of the first {} natura","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(0, number):\r\n        sum = sum + i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    n = int(input(\"Enter the number of terms: \"))\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        sum = sum + i\r\n    average = sum \/ n\r\n    print(\"The sum is = \", sum)\r\n    print(\"The average is = \", average)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    sum = 0\r\n    natural_num = 0\r\n\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n        natural_num += 1\r\n\r\n    print(\"Sum is:\", sum)\r\n    print(\"Average is:\", sum \/ natural_num)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter n: \"))\r\n    sum_average(n)\r\n\r\n\r\n# Testcase:\r\n# Enter n: 5\r\n# Sum is: 15\r\n# Average is: 3.0\r\n\r\n# Enter n: 10\r\n# Sum is: 55\r\n# Average is: 5.5\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n\r\n\"\"\"\r\n# Alternative Method:\r\n# Using List\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    n = 0\r\n    while n < number:\r\n        sum += n\r\n        n += 1\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(0,number):\r\n        sum = sum + i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    # find sum\r\n    sum_of_numbers = number * (number + 1) \/\/ 2\r\n    # find average\r\n    average_of_numbers = sum_of_numbers \/ number\r\n    print(f\"The sum of first {number} natural numbers is {sum_of_numbers}\")\r\n    print(f\"The average of first {number} natural numbers is {average_of_numbers}\")\r\n\r\n\r\n# call the function\r\nsum_average(10)\r\n\r\n\r\n# Write a function which takes number as input and prints first n natural numbers.\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum = sum + i\r\n    average = sum \/ number\r\n    print(sum, average)\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    print('Sum of first', number, 'natural numbers is', sum, 'and average is', average)\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for num in range(1, number+1):\r\n        sum += num\r\n    average = sum\/number\r\n    print(f\"Sum of first {number} natural numbers is {sum} and the average is {average}\")\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    return sum, sum\/number\r\n\r\n\r\nif __name__ ==","votes":null},{"text":"\r\n    if number == 1:\r\n        return 1\r\n    elif number == 2:\r\n        return 3\r\n    elif number == 3:\r\n        return 6\r\n    elif number == 4:\r\n        return 10\r\n    elif number == 5:\r\n        return 15\r\n    elif number == 6:\r\n        return 21\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r\n\r\nnumber = int(input(\"Enter a number: \"))\r\nprint(sum_average(number))\r\n\r\n\r","votes":null}],"time":{"count":63.0,"avg":101417.8148571429,"std":21353.4519946835,"cov":0.2105493204}}
{"id":600,"question":"def is_Even(n) :\r\n    \"\"\"Write a python function to check whether the given number is even or not using bitwise operator.\"\"\"","answers":[{"text":"\r\n    return (n & 1) == 0\r\n\r","votes":40861.204},{"text":"\r\n    return((n & 1) == 0)\r\n\r","votes":43454.34},{"text":"\r\n    return n&1 == 0\r\n\r\n\r\n\r","votes":55269.544},{"text":"\r\n    return n & 1 == 0\r\n\r","votes":56488.164},{"text":"\r\n    return n & 1 == 0\r\n\r\n\r","votes":57146.344},{"text":"\r\n    return (n & 1) == 0\r\n\r\n\r","votes":57804.048},{"text":"\r\n    # return (n&1 == 0)\r\n    # return n % 2 == 0\r\n    return n & 1 == 0\r\n\r\nif __name__ == '__main__':\r\n    n = 12\r\n    if is_Even(n) :\r\n        print(f'{n} is even')\r\n    else :\r\n        print(f'{n} is odd')\r\n\r","votes":58068.896},{"text":"\r\n    return not(n & 1)\r\n\r","votes":58331.052},{"text":"\r\n\r\n    return (n & 1) == 0\r\n\r\n\r","votes":58969.952},{"text":"\r\n    if n & 1:\r\n        return False\r\n    else:\r\n        return True\r\n\r","votes":59093.56},{"text":"\r\n    if n&1 :\r\n        return False\r\n    return True\r\n\r\n\r\n\r\nprint(is_Even(2))\r\nprint(is_Even(3))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":64238.996},{"text":"\r\n    if n & 1 :\r\n        return False\r\n    return True\r\n\r","votes":64242.628},{"text":"\r\n    return True if (n & 1) == 0 else False\r\n\r","votes":65367.316},{"text":"\r\n    return n&1 == 0\r\n\r","votes":66889.136},{"text":"\r\n    return n & 1 == 0\r\n\r\nprint(is_Even(1))\r\nprint(is_Even(2))\r\n\r\n\r\n\r","votes":67046.236},{"text":"\r\n\r\n    if (n & 1) == 0:\r\n        return True\r\n    else :\r\n        return False\r\n    \r\n\r","votes":68463.196},{"text":"\r\n    return not (n & 1)\r\n\r","votes":68612.42},{"text":"\r\n    return (n & 1) == 0\r\n\r\n# is_Even(23)\r\n\r\n\r","votes":69911.716},{"text":"\r\n\r\n    if n & 1 == 1 :\r\n        return False\r\n    else :\r\n        return True\r\n\r\n\r","votes":71557.14},{"text":"\r\n    return (n & 1) == 0\r\n\r\n\r\nprint(is_Even(3))\r\n\r\n\r","votes":71558.168},{"text":"\r\n    return (n & 1 == 0)\r\n\r","votes":74089.896},{"text":"\r\n    # Return True if n is even, False otherwise\r\n    return (n & 1) == 0\r\n\r\n\r","votes":76852.544},{"text":"\r\n    return (n&1)==0\r\n\r","votes":76988.22},{"text":"\r\n    if n&1==0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":80379.024},{"text":"\r\n\r\n    return (n & 1) == 0\r\n\r\n'''\r\nI\/P : 2\r\nO\/P : True\r\nI\/P : 3\r\nO\/P : False\r\n\r\nTime Complexity : O(1)\r\nSpace Complexity : O(1)\r\n'''\r\n\r","votes":81208.592},{"text":"\r\n    if n & 1 != 0 :\r\n        return False\r\n    else :\r\n        return True\r\n\r\n\r\n\r","votes":81940.776},{"text":"\r\n    return n&1==0\r\n\r","votes":83020.808},{"text":"\r\n    \r\n    if n & 1 :\r\n        return False\r\n    else :\r\n        return True\r\n\r\n\r","votes":83472.124},{"text":"\r\n    return not (n & 1)\r\n\r\n\r","votes":85183.708},{"text":"\r\n    return True if n & 1 == 0 else False\r\n\r","votes":85281.944},{"text":"\r\n    return (n & 1) == 0\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter a number: \"))\r\n    if (is_Even(n)):\r\n        print(\"Number is Even\")\r\n    else:\r\n        print(\"Number is Odd\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":86926.472},{"text":"\r\n\r\n    if(n & 1):\r\n        return 0\r\n    else:\r\n        return 1\r\n\r\n\r","votes":87485.98},{"text":"\r\n    return not n & 1\r\n\r","votes":88110.108},{"text":"\r\n    return True if n & 1 == 0 else False\r\n\r\nprint(is_Even(2))\r\nprint(is_Even(3))\r\nprint(is_Even(4))\r\n\r\n\r\n# 2. Write a python program to check whether a given number is positive or negative using bitwise operators.\r","votes":88589.152},{"text":"\r\n    if (n & 1) == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":89576.076},{"text":"\r\n    if n & 1 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":89833.584},{"text":"\r\n\r\n    if n & 1:\r\n        return False\r\n    return True\r\n\r","votes":92215.092},{"text":"\r\n    return n&1 ==0\r\n\r","votes":93926.716},{"text":"\r\n    return n & 1 == 0\r\n\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter a number: \"))\r\n    if is_Even(number) :\r\n        print(f\"{number} is even number.\")\r\n    else :\r\n        print(f\"{number} is odd number.\")\r\n\r\n'''\r\nSample Input\/Output:\r\nExample 1:\r\n    Input: 2\r\n    Output: 2 is even number.\r\n\r\nExample 2:\r\n    Input: 3\r\n    Output: 3 is odd number.\r\n\r\nExample 3:\r\n    Input: 4\r\n    Output: 4 is even number.\r\n'''\r\n\r\n# Time Complexity: O(1)\r\n# Space Complexity: O(1)\r\n\r\n# Optimize the Solution\r","votes":94212.196},{"text":"\r\n    if(n & 1 == 0) :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":97232.332},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    return False\r\n\r","votes":106518.356},{"text":"\r\n    return n & 1 == 0\r\n\r\n# Output\r\nprint(is_Even(10))\r\nprint(is_Even(3))\r\n\r\n\r\n# Q3. Write a Python function to find the maximum in a list.\r","votes":106735.512},{"text":"\r\n    if n&1 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":107357.76},{"text":"\r\n    \r\n    bitwise = n & 1\r\n    \r\n    if bitwise == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":108052.184},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n\r","votes":114036.66},{"text":"\r\n\r\n    return (n & 1 == 0)\r\n\r\n\r","votes":117223.104},{"text":"\r\n    if(n & 1) :\r\n        return False\r\n    return True\r\nprint(is_Even(2))\r\n\r","votes":118215.996},{"text":"\r\n    return n & 1 == 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(is_Even(100))\r\n    print(is_Even(101))\r\n    print(is_Even(102))\r\n    print(is_Even(103))\r\n    print(is_Even(104))\r\n    print(is_Even(105))\r\n    print(is_Even(106))\r\n    print(is_Even(107))\r\n    print(is_Even(108))\r\n    print(is_Even(109))\r\n    print(is_Even(110))\r\n    print(is_Even(111))\r\n    print(is_Even(112))\r\n    print(is_Even(113))\r\n    print(is_Even(114))\r\n    print(is_Even(115))\r\n    print(is_Even(116))\r\n    print(is_Even(117))\r\n    print(is_Even(118))\r\n    print(is_Even(119))\r\n    print(is_Even(120))\r\n    print(is_Even(121))\r\n    print(is_Even(122))\r\n    print(is_Even(123))\r\n    print(is_Even(124))\r\n    print(is_Even(125))\r\n    print(is_Even(126))\r\n    print(is_Even(127))\r\n    print(is_Even(128))\r\n    print(is_Even(129))\r\n    print(is_Even(130))\r\n    print(is_Even(131))\r\n  ","votes":132258.668},{"text":"\r\n\r\n    return (n & 1) == 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    numbers = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n\r\n    for num in numbers:\r\n        print(num, \"is even?\", is_Even(num))\r\n\r\n\r\n# Time Complexity: O(1) -> Since there is only one operation performed in the function\r\n# Space Complexity: O(1) -> Since no additional space is allocated to perform the function\r\n\r\n\r","votes":136116.284},{"text":"\r\n    return n & 1 == 0\r\n\r\n# Test Code\r\nprint(is_Even(11))\r\nprint(is_Even(12))\r\nprint(is_Even(13))\r\nprint(is_Even(14))\r\nprint(is_Even(15))\r\nprint(is_Even(16))\r\nprint(is_Even(17))\r\n\r\n# Output\r\n# False\r\n# True\r\n# False\r\n# True\r\n# False\r\n# True\r\n# False\r\n\r\n# 1) Take an input from the user as a number\r\n# 2) Check whether the given number is even or not using bitwise operator\r\n# 3) If the number is even, print \"The given number is even\".\r\n# 4) If the number is odd, print \"The given number is odd\"\r\n\r","votes":138917.388},{"text":"\r\n    return n & 1 == 0\r\n\r\n\r\n# Test case 1\r\nn = 2\r\nprint(is_Even(n))\r\n\r\n# Test case 2\r\nn = 3\r\nprint(is_Even(n))\r\n\r\n# Test case 3\r\nn = 100\r\nprint(is_Even(n))\r\n\r\n# Test case 4\r\nn = 1\r\nprint(is_Even(n))\r\n\r\n# Test case 5\r\nn = 30\r\nprint(is_Even(n))\r\n\r\n# Test case 6\r\nn = 1000000000\r\nprint(is_Even(n))\r\n\r\n# Test case 7\r\nn = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":192309.532},{"text":"\r\n    if(n & 1) == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    print(is_Even(2))\r\n    print(is_Even(3))\r\n    print(is_Even(100))\r\n    print(is_Even(101))\r\n    print(is_Even(102))\r\n    print(is_Even(103))\r\n    print(is_Even(104))\r\n    print(is_Even(105))\r\n    print(is_Even(106))\r\n    print(is_Even(107))\r\n    print(is_Even(108))\r\n    print(is_Even(109))\r\n    print(is_Even(110))\r\n    print(is_Even(111))\r\n    print(is_Even(112))\r\n    print(is_Even(113))\r\n    print(is_Even(114))\r\n    print(is_Even(115))\r\n    print(is_Even(116))\r\n    print(is_Even(117))\r\n    print(is_Even(118))\r\n    print(is_Even(119))\r\n    print(is_Even(120))\r\n    print(is_Even(121))\r\n    print(is_Even(122))\r\n    print(is_Even(123))\r\n    print(is_Even(124))\r\n    print(is_Even(125))\r\n    print(is_Even(126))\r\n    print(is_Even(127))\r\n    print(is_Even(128))\r","votes":234412.172},{"text":"\r\n    return n & 1\r\n    \r","votes":null},{"text":"\r\n    if n & 1 == 0 :\r\n        print(\"Yes, it is an even number.\")\r\n    else :\r\n        print(\"No, it is an odd number.\")\r\n\r","votes":null},{"text":"\r\n    if n & 1:\r\n        return \"Odd\"\r\n    else:\r\n        return \"Even\"\r\n\r\n\r","votes":null},{"text":"\r\n    return n&1 == 0\r\n\r\nprint(is_Even(4))\r\nprint(is_Even(5))\r\n\r\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n\r\n    if (n & 1) :\r\n        return 'Even'\r\n    return 'Odd'\r\n\r","votes":null},{"text":"\r\n    print(\"Enter a number : \")\r\n    n = int(input())\r\n    check = n & 1\r\n    return check\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if n&1:\r\n        print(f\"{n} is an odd number.\")\r\n    else:\r\n        print(f\"{n} is an even number.\")\r\n\r\n#","votes":null},{"text":"\r\n\r\n    return (n & 1) == 0\r\n\r\nnumber = int(input(\"Enter a number: \"))\r\n\r\nif is_Even(number) :\r\n    print(f\"{number} is an Even number\")\r\nelse :\r\n    print(f\"{number} is an Odd number\")\r\n\r\n\r\n\r\n# Q14. Write a python function to convert a given string into a list of characters.\r\n\r","votes":null},{"text":"\r\n    #return 1 if n % 2 == 0 else 0\r\n    return n & 1\r\n\r\nprint (\"Is 10 even? \", is_Even(10))\r\nprint (\"Is 11 even? \", is_Even(11))\r\n\r\n# =============================================================================\r\n# 21. Write a python function to check whether the given number is odd or not using bitwise operator.\r\n# =============================================================================\r","votes":null},{"text":"\r\n    return n & 1\r\n\r\n\r","votes":null},{"text":"\r\n    return (n & 1) == 0\r\n\r\n\r\n# Driver Code\r\nprint(\"Enter a number: \")\r\nn = int(input())\r\n\r\nif is_Even(n) :\r\n    print(\"Even\")\r\nelse :\r\n    print(\"Odd\")\r\n\r\n\r\n# Enter a number: \r\n# 10\r\n# Odd\r\n\r\n# 2. Write a Python function to check whether the given number is even or odd using bitwise operator.\r\n\r\n\r\n# Solution:\r\n\r","votes":null},{"text":"\r\n\r\n    if n & 1 :\r\n        print('Not Even')\r\n    else :\r\n        print('Even')\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if n&1:\r\n        print(\"Not Even\")\r\n    else:\r\n        print(\"Even\")\r\n\r\n\r","votes":null}],"time":{"count":52.0,"avg":87539.4810769231,"std":34200.498999006,"cov":0.3906865631}}
