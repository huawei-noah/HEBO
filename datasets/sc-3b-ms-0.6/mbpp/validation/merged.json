{"id":514,"question":"def sum_elements(test_tup):\r\n    \"\"\"Write a function to find the summation of tuple elements in the given tuple list.\"\"\"","answers":[{"text":"\r\n    return sum(test_tup)\r\n\r\n\r","votes":65853.104},{"text":"\r\n\r\n    return sum(test_tup)\r\n\r","votes":76071.436},{"text":"\r\n    sum_val = 0\r\n    for i in test_tup:\r\n        sum_val += i\r\n    return sum_val\r\n\r","votes":76623.58},{"text":"\r\n    sum_ = 0\r\n    for i in test_tup:\r\n        sum_ = sum_ + i\r\n    return sum_\r\n\r\n\r","votes":78642.408},{"text":"\r\n    test_sum = 0\r\n    for i in test_tup:\r\n        test_sum += i\r\n    return test_sum\r\n\r","votes":79841.656},{"text":"\r\n    print(test_tup)\r\n    result = 0\r\n    for element in test_tup:\r\n        result += element\r\n    return result\r\n\r","votes":80230.396},{"text":"\r\n    return sum(test_tup)\r\n\r","votes":85374.892},{"text":"\r\n    sum_ = 0\r\n    for i in range(0, len(test_tup)):\r\n        sum_ = sum_ + test_tup[i]\r\n    return sum_\r\n\r\n\r","votes":85463.22},{"text":"\r\n    sum_list = 0\r\n    for element in test_tup:\r\n        sum_list += element\r\n    return sum_list\r\n\r","votes":90098.12},{"text":"\r\n    sum = 0\r\n    for element in test_tup:\r\n        sum += element\r\n    return sum\r\n\r\n\r\n# Write a function to print the summation of tuple elements for all the tuples in the given tuple list\r","votes":93574.612},{"text":"\r\n    test_list = []\r\n    sum = 0\r\n    for i in test_tup:\r\n        test_list.append(i)\r\n    for i in test_list:\r\n        sum += i\r\n    return sum\r\n\r","votes":94048.176},{"text":"\r\n    return sum(test_tup)\r\n\r\n\"\"\"\r\nFunction to call the sum_elements function with the tuple,\r\nand print the result.\r\n\"\"\"\r\nprint(sum_elements((1, 2, 3)))","votes":94617.556},{"text":"\r\n    test_list = []\r\n    for i in test_tup:\r\n        test_list.append(i)\r\n    return sum(test_list)\r\n\r","votes":94940.568},{"text":"\r\n    sum_ = 0\r\n    for i in test_tup:\r\n        sum_ += i\r\n    return sum_\r\n\r","votes":95472.636},{"text":"\r\n    # return sum(test_tup)\r\n    return sum([i for i in test_tup])\r\n\r\n","votes":95538.112},{"text":"\r\n    sum = 0\r\n    for elem in test_tup:\r\n        sum += elem\r\n    return sum\r\n\r\n\r\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\"} id=\"l031k80q0w4d\" outputId=\"286886c6-44e1-49d2-8e52-36d0766927a0\"\r\nprint(sum_elements((3, 6, 9, 12)))\r\nprint(sum_elements((3, 6, 9, 12, 15, 18)))\r\n\r\n# + [markdown] id=\"iY1_2_9j1K7c\"\r\n# ## 3.3.1.2. Nested function\r\n#\r\n# Nested function is defined within the function's body. The nested function can be called from the function that called it. Nested function is used to write the functions that are reusable and can be reused in different functions.\r\n#\r\n# Nested function is created using the **def** keyword. It is defined between the","votes":100496.72},{"text":"\r\n    \r\n    return sum(test_tup)\r\n\r\n\r","votes":105678.288},{"text":"\r\n    return(sum(test_tup))","votes":109237.468},{"text":"\r\n    if len(test_tup) == 0:\r\n        return 0\r\n    else:\r\n        return test_tup[0] + sum_elements(test_tup[1:])\r\n\r","votes":110895.776},{"text":"\r\n    sum_ = 0\r\n    for i in range(len(test_tup)):\r\n        sum_ += test_tup[i]\r\n    return sum_\r\n\r","votes":111787.332},{"text":"\r\n\r\n    # your code here\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum += test_tup[i]\r\n    return sum\r\n\r\n\r\ntest_tup = (1, 2, 3, 4)\r\nprint(sum_elements(test_tup))\r\n","votes":113139.64},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\nprint(sum_elements([1, 2, 3, 4, 5]))\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\nprint(sum_elements((1, 2, 3, 4, 5, 6)))\r\n\r\n# 5.15.2.1\r","votes":113251.352},{"text":"\r\n    sum_val = 0\r\n    for i in test_tup:\r\n        sum_val += i\r\n    return sum_val\r\n\r\n\r","votes":113285.3},{"text":"\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum += test_tup[i]\r\n    return sum\r\n\r\n\r","votes":115568.496},{"text":"\r\n    summation = 0\r\n    for i in test_tup:\r\n        summation += i\r\n    return summation\r\nprint(sum_elements((1,2,3,4,5,6)))\r\nprint(sum_elements([1,2,3,4,5,6]))\r\nprint(sum_elements([1,2,3,4,5,6,7,8,9,10]))\r\nprint(sum_elements(range(1,12)))\r\nprint(sum_elements(range(1,12,2)))\r\nprint(sum_elements(range(1,12,3)))\r\n\r\n# 3. Write a function using which you can print the list elements in the given list\r","votes":117184.932},{"text":"\r\n    sum = 0\r\n    for element in test_tup:\r\n        sum += element\r\n    return sum\r\n\r","votes":119607.412},{"text":"\r\n    total = 0\r\n    for i in test_tup:\r\n        total += i\r\n    return total\r\n\r","votes":120525.964},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r","votes":120942.86},{"text":"\r\n    sum = 0\r\n    for element in test_tup:\r\n        sum += element\r\n    return sum\r\n\r\nprint(sum_elements((1,2,3)))\r\n\r\n# Function to find the summation of two numbers\r","votes":121260.624},{"text":"\r\n    total = 0\r\n    for elem in test_tup:\r\n        total += elem\r\n    return total\r\n\r\n\r","votes":123481.956},{"text":"\r\n    return sum(test_tup)\r\n\r\n# Write a function to find the minimum value in the given list.\r","votes":123550.384},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum = sum + i\r\n    return sum\r\n\r\n\r","votes":124605.972},{"text":"\r\n\r\n    return sum(test_tup)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \"\"\"Write a function to find the summation of tuple elements in the given tuple list.\"\"\"\r\n\r\n    print(sum_elements([1, 2, 3, 4, 5]))\r\n    print(sum_elements([1, 2, 3]))\r\n","votes":124865.712},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r","votes":127890.264},{"text":"\r\n    result = 0\r\n    for element in test_tup:\r\n        result += element\r\n    return result\r\n\r","votes":128141.276},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r\n# Write a function to calculate the sum of a list of integers.\r","votes":128875.624},{"text":"\r\n    sum=0\r\n    for i in test_tup:\r\n        sum=sum+i\r\n    return sum\r\ntest_tup = (1,2,3,4,5)\r\nprint(sum_elements(test_tup))\r\n\r","votes":129929.132},{"text":"\r\n    sum_val = 0\r\n    for element in test_tup:\r\n        sum_val += element\r\n    return sum_val\r\n\r","votes":132396.972},{"text":"\r\n    sum_number = 0\r\n    for element in test_tup:\r\n        sum_number += element\r\n    return sum_number\r\n\r\n\r","votes":133744.684},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n# Write a function to print the content of a tuple in the given tuple list.\r","votes":135687.74},{"text":"\r\n    total = 0\r\n    for element in test_tup:\r\n        total += element\r\n    return total\r\n\r\n\r","votes":135789.268},{"text":"\r\n\r\n    sum_tup = 0\r\n\r\n    for element in test_tup:\r\n        sum_tup += element\r\n\r\n    return sum_tup\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    test_tup = (1, 2, 3)\r\n    print(\"The sum of the elements in the tuple is: \")\r\n    print(sum_elements(test_tup))\r\n","votes":136156.84},{"text":"\r\n    return sum(test_tup)\r\n\r\n# Driver Code\r\ntest_tuple = (1, 2, 3, 4, 5)\r\nprint(sum_elements(test_tuple))\r\n","votes":136387.856},{"text":"\r\n    sum_val = 0\r\n    for element in test_tup:\r\n        sum_val += element\r\n    return sum_val\r\n\r\n'''\r\nThis function uses the function sum_elements to find the sum of \r\nall the values in a list of tuples.\r\n'''\r","votes":139623.944},{"text":"\r\n    sum = 0\r\n    for element in test_tup:\r\n        sum += element\r\n    return sum\r\n\r\n\r","votes":140053.996},{"text":"\r\n    sum_list = 0\r\n    for i in test_tup:\r\n        sum_list += i\r\n    return sum_list\r\n\r","votes":142053.232},{"text":"\r\n    sum_ = 0\r\n    for element in test_tup:\r\n        sum_ += element\r\n    return sum_\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sum(range(10)))\r\n    print(sum_elements(range(10)))\r\n    print(sum_elements(range(10, 0, -1)))\r\n    print(sum_elements(range(10, 0, -2)))\r\n    print(sum_elements((1, 2, 3)))\r\n    print(sum_elements((1, 2, 3, 4)))\r\n    print(sum_elements((1, 2, 3, 4, 5)))\r\n    print(sum_elements((1, 2, 3, 4, 5, 6)))\r\n    print(sum_elements((1, 2, 3, 4, 5, 6, 7)))\r\n    print(sum_elements((1, 2, 3, 4, 5, 6, 7, 8)))\r\n    print(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9)))\r\n","votes":145650.02},{"text":"\r\n    summation = 0\r\n    summation = sum(test_tup)\r\n    return summation\r\n\r\n\r","votes":147610.448},{"text":"\r\n    sum_ = 0\r\n    for element in test_tup:\r\n        sum_ += element\r\n    return sum_\r\n\r\n\r","votes":148039.236},{"text":"\r\n    sum = 0\r\n    for element in test_tup:\r\n        sum += element\r\n    return sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_tup = (38, 29, 1, 3, 29, 1)\r\n    print(sum_elements(test_tup))\r\n","votes":152538.34},{"text":"\r\n    test_sum = 0\r\n    for elements in test_tup:\r\n        test_sum += elements\r\n    return test_sum\r\n\r\n\r","votes":154968.424},{"text":"\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum = sum + test_tup[i]\r\n    return sum\r\n\r\n\r","votes":156355.968},{"text":"\r\n    sum_of_elements = 0\r\n    for element in test_tup:\r\n        sum_of_elements += element\r\n    return sum_of_elements\r\n\r\n\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\nprint(sum_elements((4, 5, 6, 7, 8)))\r\nprint(sum_elements((9, 10, 11, 12, 13)))\r\nprint(sum_elements((14, 15, 16, 17, 18)))\r\n\r\n\r\n# 1.1.2\r","votes":158558.132},{"text":"\r\n    sum_ = 0\r\n    for element in test_tup:\r\n        sum_ += element\r\n    return sum_\r\n\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10))) # Should print 55\r\nprint(sum_elements((0,))) # Should print 0\r\nprint(sum_elements((10,))) # Should print 10\r\nprint(sum_elements(tuple())) # Should print 0","votes":160394.876},{"text":"\r\n    return sum(test_tup)\r\n\r\n# Function to find the sum of numbers from a list\r\n\r","votes":162282.624},{"text":"\r\n    # your code goes here\r\n    sum_ = 0\r\n    for i in range(len(test_tup)):\r\n        sum_ += test_tup[i]\r\n    return sum_\r\n\r\n\r\n# test your function\r\nassert sum_elements([1, 2, 3, 4]) == 10\r\nassert sum_elements([1, 2, 3]) == 6\r\nassert sum_elements([1, 2]) == 3\r\nassert sum_elements([]) == 0\r\n","votes":209633.58},{"text":"\r\n    sum_tup = 0\r\n    for element in test_tup:\r\n        sum_tup += element\r\n    return sum_tup\r\n\r\nif __name__ == \"__main__\":\r\n    print(sum_elements([5, 6, 7, 8]))\r\n    print(sum_elements(([2, 5, 6], [2, 3, 5, 7])))\r\n    print(sum_elements((3, 4, 5), (8, 9, 10), (11, 12, 13)))\r\n    print(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\r\n    print(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\r\n    print(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)))\r\n    print(sum_elements())\r\n","votes":242082.984},{"text":"\r\n    return sum(test_tup[0])\r\n\r\n\r","votes":null},{"text":"\r\n    sum_of_elements = 0\r\n    for element in range(len(test_tup)):\r\n        sum_of_elements += test_tup[element]\r\n    return sum_of_elements\r\n\r\ntest_list1 = [1, 2, 3, 4, 5]\r\ntest_list2 = [1, 2, 3, 4, 5]\r\nprint(sum_tup(test_list1))\r\nprint(sum_tuple(test_list2))\r\nprint(sum_elements(test_list1))\r\n```\r\n##### Output\r\n```\r\n15\r\n15\r\n15\r\n```\r\n\r\n##### Explanation\r\n* The first function `sum_tup()` sums up the elements of a given tuple.\r\n* The second function `sum_tuple()` sums up the elements of a given tuple.\r\n* The third function `sum_elements()` sums up the elements of a given tuple.\r\n\r\n##### Note\r\n* The functions `sum_tup()` and `sum_tuple()` are not defined. You have to write your own function for this.\r\n* The functions `sum_elements()` and `sum_tup()` are not defined. You have to write your own function for this.\r\n","votes":null},{"text":"\r\n    sum_ = 0\r\n    for element in test_tup:\r\n        sum_ += element\r\n    return sum_\r\n\r\nprint(sum_elements((1,2,3)))\r\nprint(sum_elements([1,2,3]))\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9)))\r\nprint(sum_elements([1,2,3,4,5,6,7,8,9]))\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10)))\r\nprint(sum_elements([1,2,3,4,5,6,7,8,9,10]))\r\n\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10,11)))\r\nprint(sum_elements([1,2,3,4,5,6,7,8,9,10,11]))\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10,11,12)))\r\nprint(sum_elements([1,2,3,4,5,6,7,8,9,10,11,12]))\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10,11,12,13)))\r\nprint(sum_elements([1,2,3,4,5,6,7,8,9,10,11,12,13]))\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14)))\r\nprint(sum_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10,","votes":null},{"text":"\r\n    return sum(test_tup)\r\n    # Write your code here\r\n\r\nprint(sum_elements(test_tup)) # Should print 19","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\nprint(sum_elements((1,2,3,4,5)))\r\nprint(sum_elements((1,2,'3',4,5)))\r\nprint(sum_elements(range(1,6)))\r\nprint(sum_elements(list(range(1,6))))\r\nprint(sum_elements(map(int,range(1,6))))\r\nprint(sum_elements(set(range(1,6))))\r\nprint(sum_elements(dict(zip(range(1,6),range(1,6)))))\r\nprint(sum_elements(tuple(range(1,6))))\r\n\r\n# Function to find the sum of the given list.\r","votes":null},{"text":"\r\n    summ = 0\r\n    for i in test_tup:\r\n        summ += i\r\n    return summ\r\n\r\nprint(sum_elements((2, 3, 4)))\r\nprint(sum_elements((1, 2, 3)))\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7)))\r\n```\r\n```\r\n$ python3 summation.py\r\n12\r\n6\r\n28\r\n```\r\n#### 3.10.1.2.1.3.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1","votes":null},{"text":"\r\n    # your code here\r\n    return sum(test_tup)\r\n\r\n# test\r\nprint(sum_elements(test_tuple))\r\n# 11\r\n\r\n```\r\n\r\n## Q12\r\n```python\r\n\"\"\"Write a function to find the number of odd elements in the given list.\"\"\"\r\n# your code here\r\n\r","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\nprint(sum_elements(my_tup))\r\n```\r\n- [ ] [Question 2](https:\/\/github.com\/username_0\/CPSC-383-Course-Materials\/blob\/main\/week_1\/Assignment_2_Q2.ipynb)\r\n```py\r\n# Q2 - Using a list comprehension, create a list that contains all the elements of the original list, \r\n# but each element has been doubled.\r\n# i.e. [2, 4, 6, 8] -> [2, 4, 6, 8, 4, 8, 12, 16]\r\n\r\nmy_list = [1, 2, 3, 4]\r\n\r\nmy_list_doubled = [my_list[i] + my_list[i] for i in range(len(my_list))]\r\n\r\nprint(my_list_doubled)\r\n```\r\n- [ ] [Question 3](https:\/\/github.com\/username_0\/CPSC-383-Course-Materials\/blob\/main\/week_1\/Assignment_2_Q3.ipynb)\r\n```py\r\n# Q3 - Using a list comprehension, create a list that contains all the words in the original list, where each word has been made lowercase.\r\n# i.e. ['Hello', 'World'] -> ['hello', 'world']\r\n\r\nmy_list = ['Hello', 'World']\r\n\r\nmy_list_lower = [w.lower() for w in my_list]\r\n\r\nprint(my_list_lower)\r\n```\r\n- [ ] [Question 4](https:\/\/github.com\/username_0\/CPSC-383-Course-Materials\/blob\/main\/week_1\/Assignment_2_Q4.ipynb)\r\n```py\r\n# Q4 - Using a list comprehension, create a list that contains all the words in the original list, where each word has been made lowercase and where the first letter of each word has been removed.\r\n# i.e. ['Hello', 'World'] -","votes":null},{"text":"\r\n    # initialize sum to zero\r\n    sum = 0\r\n    # for each element in the given tuple\r\n    for element in test_tup:\r\n        # add the element to sum\r\n        sum += element\r\n    # return the sum\r\n    return sum\r\n\r\n# print the sum of tuple elements\r\nprint(sum_elements(test_tup))","votes":null},{"text":"\r\n\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n\r\n    return sum\r\n\r\n\r\nprint(sum_elements(test_tup))\r\n# output: 25\r\n```\r\n\r\n#### 4.1.2. \u53d8\u91cf\u4f5c\u7528\u57df\r\n\r\n\u53d8\u91cf\u4f5c\u7528\u57df\u662f\u6307\u53d8\u91cf\u5b9a\u4e49\u7684\u8303\u56f4\uff0c\u5728\u53d8\u91cf\u5b9a\u4e49\u7684\u8303\u56f4\u5185\uff0c\u53d8\u91cf\u540d\u662f\u6709\u6548\u7684\u3002\r\n\r\n##### 4.1.2.1. \u5c40\u90e8\u53d8\u91cf\uff08local variable\uff09\r\n\r\n\u5c40\u90e8\u53d8\u91cf\u662f\u6307\u5b9a\u4e49\u5728\u51fd\u6570\u5185\u90e8\u7684\u53d8\u91cf\uff0c\u5b83\u53ea\u6709\u5728\u51fd\u6570\u5185\u90e8\u6709\u6548\u3002\r\n\r\n\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u51fd\u6570\u5185\u90e8\uff0c\u5728\u51fd\u6570\u5916\u90e8\u65e0\u6cd5\u8bbf\u95ee\u3002\r\n\r\n```python\r","votes":null},{"text":"\r\n    # your code here\r\n    sum_val=0\r\n    for element in test_tup:\r\n        sum_val=sum_val+element\r\n    print(sum_val)\r\n    \r\ntest_tup=(1,2,3,4)\r\nsum_elements(test_tup)\r\n\r\n\r\n# + [markdown] id=\"l37674P4f1K3\" colab_type=\"text\"\r\n# ### Question 5.\r\n#\r\n# The list of students is given below. The name of each student is given in the list. The student has a score in the list. Write a function to find the student with the highest score.\r\n#\r\n# ```\r\n# student_list = [\"John\", 98, \"Anna\", 94, \"Mike\", 99]\r\n# ```\r\n#\r\n# ### Answer\r\n#\r\n# ```\r\n# max_score = 0\r\n# max_index = 0\r\n# for i, name in enumerate(student_list):\r\n#     if student_list[i] == max_score:\r\n#         max_index = i\r\n#     elif student_list[i] > max_score:\r\n#         max_score = student_list[i]\r\n#         max_index = i\r\n# print(max_index)\r\n# ```\r\n#\r\n# ### Explanation\r\n#\r\n# The code above uses the enumerate function to iterate through the list and assign the index of each element to it. The code breaks the loop when the max_score is found. The max_index is then assigned to the index of the student with the highest score.\r\n#\r\n# ### Question 6.\r\n#\r\n# Write a function to find the sum of the odd numbers in a given list.\r\n#\r\n# ```\r\n# odd_sum = 0\r\n# odd_list = [10, 12, 14, 16, 18, 20]\r\n# ```\r\n#\r\n# ### Answer\r\n#\r\n# ```\r\n# for i in odd_lis","votes":null},{"text":"\r\n    sum = 0\r\n    for x in test_tup:\r\n        sum = sum + x\r\n    return sum\r\n\r\nprint(sum_elements(test_tup))\r\n# -\r\n\r\n# # 3. 1D List\r\n\r\n# +\r\n# 1D list\r\n\r\ntest_list = [1,2,3,4,5]\r\n\r\nprint(test_list)\r\nprint(test_list[0])\r\nprint(test_list[1:])\r\nprint(test_list[1:3])\r\nprint(test_list[1:2])\r\nprint(test_list[-1])\r\nprint(test_list[-2:])\r\nprint(test_list[-2:-1])\r\nprint(test_list[::])\r\nprint(test_list[::-1])\r\n# -\r\n\r\n# # 4. Dictionary\r\n\r\n# +\r\n# Dictionary\r\n\r\ntest_dict = {'a': 1, 'b': 2, 'c': 3}\r\n\r\nprint(test_dict)\r\nprint(test_dict['b'])\r\nprint(test_dict['a'])\r\nprint(test_dict.keys())\r\nprint(test_dict.values())\r\nprint(test_dict.items())\r\nprint(test_dict.get('d'))\r\nprint(test_dict.setdefault('d'))\r\nprint(test_dict.setdefault('d', 10))\r\n# -\r\n\r\n# # 5. Tuple\r\n\r\n# +\r\n# Tuple\r\n\r\ntest_tup = ('a', 1, 1.2, True)\r\n\r\nprint(test_tup)\r\nprint(test_tup[0])\r\nprint(test_tup[1:])\r\nprint(test_tup[1:3])\r\nprint(test_tup[1:2])\r\nprint(test_tup[-1])\r\nprint(test_tup[-2:])\r\nprint(test_tup[-2:-1])\r\nprint(test_tup[::])\r\nprint(test_tup[::-1])\r\n# -\r\n\r\n# # 6. Set\r\n\r\n","votes":null},{"text":"\r\n    sum_val = 0\r\n    for i in test_tup:\r\n        sum_val += i\r\n    return sum_val\r\n\r\n# Tests\r\nassert sum_elements(tuple_list) == 6, \"Function is not working properly\"\r\n```\r\n\r\n### Output\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"\/home\/mohit\/Documents\/Python\/Python-Basics\/Day 2\/Sum_of_Tuple_Elements.py\", line 13, in <module>\r\n    sum_val = 0\r\n  File \"\/home\/mohit\/Documents\/Python\/Python-Basics\/Day 2\/Sum_of_Tuple_Elements.py\", line 10, in sum_elements\r\n    sum_val += i\r\n  File \"\/home\/mohit\/Documents\/Python\/Python-Basics\/Day 2\/Sum_of_Tuple_Elements.py\", line 10, in <genexpr>\r\n    sum_val += i\r\nTypeError: unsupported operand type(s) for +=: 'int' and'str'\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\n```\r\nassert sum_elements(tuple_list) == 6, \"Function is not working properly\"\r\n```\r\n\r\n### Suggested solution [Optional]\r\n\r\n```\r","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\nprint(sum_elements([1, 2, 3, 4, 5]))\r\n```\r\n\r\n### Expected Behavior\r\n\r\n```\r\n$ python3 sum_tuple_elements.py\r\n15\r\n```\r\n\r\n### Actual Behavior\r\n\r\n```\r\n$ python3 sum_tuple_elements.py\r\nTraceback (most recent call last):\r\n  File \"sum_tuple_elements.py\", line 10, in <module>\r\n    print(sum_elements([1, 2, 3, 4, 5]))\r\nTypeError: 'int' object is not iterable\r\n```\r\n\r\n### Your Environment\r\n\r\n- Python version: 3.6.9\r\n- Operating System: Windows 10 Pro (64-bit)\r\n- VS Code version: 1.49.2\n<issue_comment>username_1: This seems to be a duplicate of https:\/\/github.com\/microsoft\/vscode-python\/issues\/13741","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\nprint(sum_elements(test_tup))\r\n```\r\n\r\n### Expected Behavior\r\nThe code should run without any error.\r\n\r\n### Actual Behavior\r\nThe program throws the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 41, in <module>\r\n    print(sum_elements(test_tup))\r\n  File \"test.py\", line 30, in sum_elements\r\n    return sum(test_tup)\r\nTypeError: 'int' object is not iterable\r\n```\r\n\r\n### Your Environment\r\n<!--- Include as many relevant details about the environment you experienced the bug in -->\r\n* Python version: 3.7.2\r\n* pip version: 19.0.3\r\n* OS: Windows 10\n<issue_comment>username_1: Hello @username_0,\r\n\r\nI'm not sure I understand what you're asking. \r\nCan you please elaborate on what you're trying to achieve?\r\nAlso, please note that you can use a list comprehension instead of the `sum` function to achieve the same result.\r\n```python\r\ntest_tup = (1, 2, 3, 4, 5)\r\n\r","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\n# Test your function\r\n\r\nprint(sum_elements(([1, 2, 3])))\r\nprint(sum_elements(([1, 2, 3], [4, 5, 6])))\r\nprint(sum_elements(([1, 2, 3], [4, 5, 6], [7, 8, 9])))\r\n","votes":null},{"text":"\r\n    sum_val = 0\r\n    for i in test_tup:\r\n        sum_val += i\r\n    return sum_val\r\n\r\nprint(\"Sum of tuples is \" + str(sum_elements(test_tup)))\r\nprint(\"Sum of lists is \" + str(sum_elements(test_list)))\r\n\r\n# Create a dictionary\r\ntest_dict = {\r\n    'a': 1,\r\n    'b': 2,\r\n    'c': 3\r\n}\r\n\r\n# Add items to a dictionary\r\ntest_dict['d'] = 4\r\n\r\n# Delete items from a dictionary\r\ndel test_dict['b']\r\n\r\n# Check if a key exists in a dictionary\r\nprint('a' in test_dict)\r\n\r\n# Get the length of a dictionary\r\nprint(len(test_dict))\r\n\r\n# Get the values of a dictionary\r\nprint(test_dict.values())\r\n\r\n# Get the keys of a dictionary\r\nprint(test_dict.keys())\r\n\r\n# Get the items of a dictionary\r\nprint(test_dict.items())\r\n\r\n# Get the item of a dictionary\r\nprint(test_dict.get('a'))\r\n\r\n# Get a value from a dictionary by key and default value\r\nprint(test_dict.get('d', 'Not Found'))\r\n\r\n# Get a value from a dictionary by key and default value\r\nprint(test_dict.get('d', 'Not Found'))\r\n\r\n# Get an item count in a dictionary\r\nprint(test_dict.count('a'))\r\n\r\n# Get the items count in a dictionary\r\nprint(test_dict.items())\r\n\r\n# Get the items count in a dictionary\r\nprint(test_dict.items())\r\n\r\n# Get the items count in a dictionary\r\nprint(test_dict.items())\r\n","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\nprint(sum_elements(test_tup))\r\n```\r\n\r\n### Output:\r\n\r\n```\r\n30\r\n```\r\n\r\n### Rationale:\r\n\r\nUsing `sum()` function on a tuple is a common operation. Python has a built-in function `sum()` that accepts a sequence of numbers (i.e., any iterable object) and returns the sum of all elements in the sequence.\r\n\r\n#### Solution:\r\n\r\n```python\r","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\nprint(sum_elements(test_tup))\r\n```\r\n\r\nOutput: \r\n```\r\n28\r\n```\r\n\r\n##### 3. `zip()`\r\n\r\nThe `zip()` function is used to combine multiple lists into a single tuple. It is used in the following way:\r\n\r\n```python\r\n# zip() function\r\na = [1, 2, 3]\r\nb = [4, 5, 6]\r\n\r\n# result = [ (1, 4), (2, 5), (3, 6) ]\r\nresult = zip(a, b)\r\nprint(result)\r\n\r\n# result = [ (1, 2), (3, 5), (6, 6) ]\r\nresult = zip(a, b, fillvalue=(1, 2))\r\nprint(result)\r\n```\r\n\r\nOutput:\r\n```\r\n<zip at 0x00000182110E4268>\r\n<zip at 0x00000182110E4268>\r\n```\r\n\r\n##### 4. `enumerate()`\r\n\r\nThe `enumerate()` function is used to count the index of an element in a list. It is used in the following way:\r\n\r\n```python\r\n# enumerate() function\r\na = [1, 2, 3]\r\n\r\n# result = [('0', 1), ('1', 2), ('2', 3)]\r\nresult = enumerate(a)\r\nprint(result)\r\n```\r\n\r\nOutput:\r\n```\r\n<enumerate at 0x00000182110E4268>\r\n```\r\n\r\n##### 5. `sorted()`\r\n\r\nThe `sorted()` function returns a new sorted list, which is a copy of the original list. It is used in the following way:\r\n\r\n```python\r\n# sorted() function\r\na = [1, 2, 3]\r\nb = [4, 5, 6]\r\n\r\n# result = [1, 2, ","votes":null}],"time":{"count":57.0,"avg":122115.8266666667,"std":31683.0228964389,"cov":0.2594505869}}
{"id":515,"question":"def modular_sum(arr, n, m):\r\n    \"\"\"Write a function to check if there is a subset with sum divisible by m.\"\"\"","answers":[{"text":"\r\n    for x in range(n):\r\n        if sum(arr[x : x + m]) % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n, m = list(map(int, input().split()))\r\n    arr = list(map(int, input().split()))\r\n    print(modular_sum(arr, n, m))\r\n","votes":95175.176},{"text":"\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            cur_sum = arr[i] + arr[j]\r\n            if cur_sum % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r","votes":143913.188},{"text":"\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if arr[i] + arr[j] == m:\r\n                return True\r\n    return False\r\n\r\n\r","votes":146143.412},{"text":"\r\n    arr = sorted(arr)\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if (arr[i] + arr[j]) % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r","votes":150805.872},{"text":"\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if (arr[i] + arr[j]) % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    print(modular_sum(arr, len(arr), 4))\r\n","votes":171155.432},{"text":"\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if (arr[i] + arr[j]) % m == 0:\r\n                return True\r\n    return False\r\n\r\nif __name__ == \"__main__\":\r\n    n, m = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    print(modular_sum(arr, n, m))\r\n","votes":181216.396},{"text":"\r\n    # Complete this function\r\n    # arr is a list of integers\r\n    # n is size of list\r\n    # m is a number\r\n    # Return True if there is a subset with sum divisible by m; otherwise, return False.\r\n    # Time complexity O(n * m)\r\n    # Space complexity O(n)\r\n    # Hint: Try to use modulo operator to calculate the sum of elements in the list\r\n    # Hint: Use a hash table to store the sum of each element in the list\r\n    # Hint: Try to find a solution with a hash map and a modulo operator\r\n    # Hint: Try to solve the problem without using modulo operator\r\n    # Hint: Try to solve the problem without using a hash table\r\n    # Hint: Try to solve the problem without using a hash table and without using modulo operator\r\n\r\n    # Initialize a hash map to store the sum of each element in the list\r\n    sum_map = {}\r\n\r\n    # Get the sum of each element in the list\r\n    for i in range(n):\r\n        sum_map[arr[i]] = sum_map.get(arr[i], 0) + 1\r\n\r\n    # Loop through each element in the list\r\n    for i in range(n):\r\n        # Get the sum of the current element\r\n        cur_sum = sum_map[arr[i]]\r\n        # If the current sum is divisible by m, the current number is divisible by m as well\r\n        if cur_sum % m == 0:\r\n            return True\r\n\r\n    # If we have not returned yet, there is no subset with sum divisible by m\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Test 01\r\n    print(modular_sum([1, 2, 3], 3, 6))\r\n\r\n    # Test 02\r\n    print(modular_sum([1, 2, 3], 3, 4))\r\n\r\n    # Test 03\r\n    print(modular_sum([1, 2, 3], 3, 1))\r\n\r\n    # Test 04\r\n    print(modular_sum([1, 2, 3], 3, 3))\r\n\r\n    # Test 05\r\n    print(modular_sum([1, 2, 3, 4, 5], 5,","votes":null},{"text":"\r\n    # write your code here\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    import math\r\n    import itertools\r\n    import heapq\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections import defaultdict\r\n    from collections import Counter\r\n    from collections import deque\r\n    from collections import namedtuple\r\n    from collections import OrderedDict\r\n    from collections impor","votes":null},{"text":"\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Initialize result\r\n    result = False\r\n\r\n    # Iterate over all subsets\r\n    for i in range(m, n + 1):\r\n        # Check if the subset is divisible by m\r\n        if (sum(arr) % i == 0):\r\n            result = True\r\n            break\r\n\r\n    # Return result\r\n    return result\r\n\r\n\r\nprint(divisibleSumSubsets([1, 2, 3], 5, 3))\r\nprint(divisibleSumSubsets([1, 2, 3, 4], 10, 4))\r\n","votes":null},{"text":"\r\n    # Initialize result\r\n    sum_set = set()\r\n    for i in range(n):\r\n        # Initialize sum with current element\r\n        sum_curr = arr[i]\r\n        sum_set.add(sum_curr)\r\n        for j in range(i + 1, n):\r\n            # If sum_curr is not divisible by m, then no need to check remaining elements\r\n            if sum_curr % m!= 0:\r\n                break\r\n            else:\r\n                # If sum_curr is divisible by m, then add remaining elements to sum\r\n                sum_curr += arr[j]\r\n                sum_set.add(sum_curr)\r\n    return sum_set\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7]\r\n    m = 2\r\n    n = len(arr)\r\n    print(f'Array: {arr}')\r\n    print(f'Sum: {sum(arr)}')\r\n    print(f'Sum set: {sum_set(arr, n, m)}')\r\n    print(f'Modular sum set: {modular_sum(arr, n, m)}')\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        arr[i] = arr[i] % m\r\n    \r\n    for i in range(n):\r\n        if arr[i] == 0:\r\n            count += 1\r\n            \r\n    if count == n:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n, m = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i!= j and (arr[i] + arr[j]) % m == 0:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    print(modular_sum([2,1,1,1,1], 5, 3))","votes":null},{"text":"\r\n    # Write your code here\r\n    if m == 0:\r\n        return True\r\n    elif m < 0:\r\n        return False\r\n    elif m % 2 == 0:\r\n        for i in range(0, n):\r\n            if arr[i] % 2 == 0 and check_modular_sum(arr, i, m\/\/2):\r\n                return True\r\n    for i in range(0, n):\r\n        if arr[i] % 2 == 1 and check_modular_sum(arr, i, m-1):\r\n            return True\r\n    return False\r\n\r\nprint(modular_sum(arr, n, m))","votes":null},{"text":"\r\n    # TODO: Write your code here.\r\n    return arr.sum() % m == 0\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(n-m + 1):\r\n        if sum(arr[i:i+m]) % m == 0:\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        if sum(arr[:i+1]) % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n, m = map(int, input().split(' '))\r\n    arr = list(map(int, input().split(' ')))\r\n    if modular_sum(arr, n, m):\r\n        print('Yes')\r\n    else:\r\n        print('No')\r\n","votes":null},{"text":"\r\n    res = False\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] % m == 0:\r\n                res = True\r\n                break\r\n        if res:\r\n            break\r\n    return res\r\n\r","votes":null},{"text":"\r\n    if n == 1 and arr[0] % m == 0:\r\n        return True\r\n\r\n    for i in range(n):\r\n        if arr[i] % m == 0 and modular_sum(arr, n - 1, m):\r\n            return True\r\n\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    while True:\r\n        n, m = list(map(int, input().split()))\r\n        if n == 0 and m == 0:\r\n            break\r\n        arr = list(map(int, input().split()))\r\n        if modular_sum(arr, n, m):\r\n            print(\"True\")\r\n        else:\r\n            print(\"False\")\r\n","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n, m = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n\r\n    print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    if m == 0:\r\n        return True\r\n    for i in range(1, n+1):\r\n        if arr[i] % m == 0 and modular_sum(arr, n, m-arr[i]):\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return m == 0\r\n    elif arr[n - 1] % m == 0:\r\n        return True\r\n    else:\r\n        return modular_sum(arr, n - 1, m)\r\n\r\n\r","votes":null},{"text":"\r\n    l = []\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            l.append(i)\r\n    return l\r\n\r\n\r","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    for i in range(m, n+1, m):\r\n        if len(set(arr).intersection(set(range(i, n+1, m)))) > 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(modular_sum([3, 5, 10, 15], 15, 5))  # True\r\n    print(modular_sum([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23], 23, 3))  # True\r\n    print(modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10))  # True\r\n    print(modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 2))  # False\r\n    print(modular_sum([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ","votes":null},{"text":"\r\n    # Write your code here.\r\n    # O(n*m)\r\n    a = [0]*(m+1)\r\n    for i in arr:\r\n        a[i%m] += 1\r\n    for i in range(m+1):\r\n        if a[i]!= 0:\r\n            return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    print(modular_sum([1,2,3,4], 4, 5))\r\n    print(modular_sum([1,2,3,4], 4, 2))\r\n    print(modular_sum([1,2,3,4], 4, 1))\r\n    print(modular_sum([1,2,3,4], 4, 0))\r\n    print(modular_sum([1,2,3,4], 4, 3))\r\n    print(modular_sum([1,2,3,4], 4, 9))\r\n    print(modular_sum([1,2,3,4], 4, 10))\r\n    print(modular_sum([1,2,3,4], 4, 11))\r\n","votes":null},{"text":"\r\n    #Write your code here\r\n    return (sum(arr) % m == 0) and all(sum(arr[:i+1]) % m == 0 for i in range(n))\r\n\r\nassert modular_sum([3,4,5,6,7], 5, 15) == True\r\nassert modular_sum([3,4,5,6,7], 5, 20) == False\r\n```<issue_closed>","votes":null},{"text":"\r\n    # check if there is a subset with sum divisible by m\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            return True\r\n\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    sum_arr = 0\r\n    for x in arr:\r\n        sum_arr += x\r\n    if sum_arr % m == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    s = 0\r\n    for i in range(n):\r\n        s += arr[i]\r\n        if s % m == 0:\r\n            return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    print(modular_sum(arr, 5, 6))\r\n    print(modular_sum(arr, 5, 3))","votes":null},{"text":"\r\n    i = 0\r\n    while i < n:\r\n        if arr[i] % m == 0:\r\n            return True\r\n        i += 1\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        if (m % arr[i]) == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n, m = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    print(divisible_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    for i in range(1, n + 1):\r\n        if (m % i) == 0:\r\n            break\r\n    else:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Fill this in.\r\n    if m == 1:\r\n        return (sum(arr) % n == 0)\r\n    else:\r\n        for i in range(n):\r\n            if arr[i] % m == 0:\r\n                arr[i] = 0\r\n                if modular_sum(arr, n, m - 1):\r\n                    return True\r\n                arr[i] = 1\r\n    return False\r\n\r\nprint(modular_sum([1, 2, 3, 4, 5], 11, 2))\r\n\r\n\"\"\"\r\nTime complexity: O(n*m)\r\nSpace complexity: O(n)\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    l = len(arr)\r\n    for i in range(l):\r\n        for j in range(i+1, l):\r\n            if arr[i] + arr[j] % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r\n# Driver Code\r\narr = [2, 1, 4, 3, 1]\r\nn = len(arr)\r\nm = 2\r\nif modular_sum(arr, n, m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n","votes":null},{"text":"\r\n    modulo = 0\r\n    for i in range(n):\r\n        modulo = modulo + arr[i] % m\r\n    if modulo % m == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(0, n, m):\r\n        if not any(arr[i + j] % m for j in range(m)):\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    l = len(arr)\r\n    if n == 0:\r\n        return True\r\n    if n < 0 or m == 0:\r\n        return False\r\n    if l < 2:\r\n        return False\r\n    if n == 1:\r\n        return True\r\n\r\n    # find the element which is smaller than n\r\n    i = 0\r\n    while i <= l - 1:\r\n        if arr[i] <= n:\r\n            i += 1\r\n        else:\r\n            break\r\n\r\n    # if the element not found, the sum is not divisible by m\r\n    if i == l:\r\n        return False\r\n\r\n    # for the first element, check if the sum is divisible by m\r\n    if arr[i] == n:\r\n        if arr[i] % m == 0:\r\n            return True\r\n\r\n    # otherwise, check if the sum is divisible by m by subtracting the subarray\r\n    # from the array and checking the sum of the remaining subarray\r\n    m_arr = [m] * (n - arr[i])\r\n    return modular_sum(arr, n - arr[i], m_arr)\r\n\r\n\r\nprint(modular_sum([1, 2, 3, 6], 3, 10))\r\nprint(modular_sum([1, 2, 3, 6], 3, 3))\r\nprint(modular_sum([1, 2, 3, 6], 3, 2))\r\nprint(modular_sum([1, 2, 3, 6], 3, 1))\r\nprint(modular_sum([1, 2, 3, 6], 3, 0))\r\nprint(modular_sum([1, 2, 3, 6], 3, -1))\r\nprint(modular_sum([1, 2, 3, 6], 3, -2))\r\nprint(modular_sum([1, 2, 3, 6], 3, -3))\r\nprint(modular_sum([1, 2, 3, 6], 3, -4))\r\nprint(modular_sum([1, 2, 3, 6]","votes":null},{"text":"\r\n    l = 0\r\n    r = n\r\n    s = 0\r\n    while l <= r:\r\n        s = (l + r) \/\/ 2\r\n        for i in range(n):\r\n            if s % arr[i] == 0:\r\n                break\r\n        if i == n:\r\n            return True\r\n        if s > m:\r\n            r = s - 1\r\n        else:\r\n            l = s + 1\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    sum_arr = 0\r\n    for i in range(n):\r\n        sum_arr += arr[i]\r\n\r\n    if sum_arr % m == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = list(map(int, input().split()))\r\n    m = int(input())\r\n    n = len(arr)\r\n\r\n    res = modular_sum(arr, n, m)\r\n    print(res)\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nfor t in range(int(input())):\r\n    l, r, m = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    if modular_sum(arr, l, m):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    arr.sort()\r\n    for i in range(n-m+1):\r\n        if sum(arr[i:i+m]) % m == 0:\r\n            return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5], 3, 10))\r\n    print(modular_sum([1, 3, 5], 3, 9))\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5, 6, 9, 12], 6, 10))\r\n    print(modular_sum([1, 3, 5,","votes":null},{"text":"\r\n    arr_sum = 0\r\n    for i in range(n):\r\n        arr_sum += arr[i]\r\n    if arr_sum % m == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # If the sum is divisible by m, then return True\r\n    if sum(arr) % m == 0:\r\n        return True\r\n    \r\n    # If the sum is not divisible by m, then return False\r\n    else:\r\n        return False\r\n\r\nif __name__ == \"__main__\":\r\n    n, m = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        if (arr[i] % m == 0):\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n, m = map(int, input().split())\r\n        arr = list(map(int, input().split()))\r\n        print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            sum = arr[i] + arr[j]\r\n            if sum % m == 0:\r\n                return True\r\n    return False\r\n\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\nm = int(input())\r\nres = modular_sum(arr, n, m)\r\nprint(res)\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            if modular_sum(arr, n-1, m) == True:\r\n                return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    for i in range(0, len(arr)):\r\n        if m % arr[i] == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nn, m = map(int, input().split())\r\narr = list(map(int, input().split()))\r\nprint(divisible_sum_subsets(arr, 0, 0, n, m))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        if sum(arr[i]) % m == 0:\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    if m in arr:\r\n        return True\r\n    if m == 0:\r\n        return True\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            if modular_sum(arr, n, m - arr[i]):\r\n                return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(arr)):\r\n        if (arr[i] % m == 0) and (sum(arr[i:]) % m == 0):\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4]\r\n    n = 4\r\n    m = 4\r\n    print(f\"The array {arr} is {divisible_sum(arr, n, m)}\")\r\n    arr = [1, 2, 3, 5]\r\n    n = 4\r\n    m = 7\r\n    print(f\"The array {arr} is {divisible_sum(arr, n, m)}\")\r\n\r\n    arr = [1, 2, 3, 4]\r\n    n = 4\r\n    m = 4\r\n    print(f\"The array {arr} is {divisible_sum(arr, n, m)}\")\r\n    arr = [1, 2, 3, 5]\r\n    n = 4\r\n    m = 7\r\n    print(f\"The array {arr} is {divisible_sum(arr, n, m)}\")\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    sum = 0\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            sum = sum + arr[i]\r\n    if sum % m == 0:\r\n        return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    arr = list(map(int, input().split()))\r\n    n = len(arr)\r\n    m = int(input())\r\n    print(modular_sum(arr, n, m))","votes":null},{"text":"\r\n    # Write your code here\r\n    arr.sort()\r\n    mod = [0] * n\r\n    for i in range(n):\r\n        mod[i] = arr[i] % m\r\n    for i in range(n - 1):\r\n        if mod[i] + mod[i + 1] == 0:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    m = str(m)\r\n    arr = str(arr)\r\n    arr = [int(x) for x in arr]\r\n    arr.sort()\r\n    arr = tuple(arr)\r\n    m = tuple(m)\r\n    for i in range(0, len(m) - 1):\r\n        if arr[i] + arr[i + 1] % int(m[i + 1]) == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nprint(modular_sum(\"1234567890\", \"111111111\", \"111111111\"))\r\nprint(modular_sum(\"1234567890\", \"111111111\", \"111122222\"))\r\nprint(modular_sum(\"1234567890\", \"999999999\", \"999999999\"))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    arr.sort()\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    m = int(input())\r\n    print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n\r\n    for i in range(n):\r\n        if sum(arr[i]) % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n, m = map(int, input().split())\r\n    arr = []\r\n    for _ in range(n):\r\n        arr.append(list(map(int, input().split())))\r\n    print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    for i in range(n - m + 1):\r\n        if sum(arr[i:i+m]) % m == 0:\r\n            return True\r\n    return False\r\n\r\nif __name__ == \"__main__\":\r\n    print(modular_sum([1, 3, 2, 4, 6, 5, 7], 6, 2))\r\n","votes":null},{"text":"\r\n    for i in range(1, n + 1):\r\n        if i % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = 10\r\nm = 3\r\nprint(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    arr.sort()\r\n    for i in range(n-m+1):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nassert modular_sum([1, 2, 3, 3, 4], 5, 3) == True\r\nassert modular_sum([1, 2, 3, 3, 4], 5, 2) == True\r\nassert modular_sum([1, 2, 3, 3, 4], 5, 1) == True\r\nassert modular_sum([1, 2, 3, 3, 4], 5, 0) == True\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -1) == False\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -2) == False\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -3) == False\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -4) == False\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -5) == False\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -6) == False\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -7) == False\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -8) == False\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -9) == False\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -10) == False\r\nassert modular_sum([1, 2, 3, 3, 4], 5, -11) == False\r\nassert modular_sum([1,","votes":null},{"text":"\r\n\r\n    # If n and m are same, then return true\r\n    if n == m:\r\n        return True\r\n\r\n    for i in range(n \/\/ m + 1):\r\n        if arr[i * m] == m:\r\n            if modular_sum(arr, n, m):\r\n                return True\r\n    return False\r\n\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nm = 2\r\n\r\nans = modular_sum(arr, n, m)\r\nprint(ans)\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        arr[i] = (arr[i] * m) % 1000000007\r\n\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == 0:\r\n                return True\r\n    return False\r\n\r\nif __name__ == \"__main__\":\r\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 23) == True, \"modular_sum should return True\"\r\n    assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 13) == False, \"modular_sum should return False\"\r\n    assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 12) == True, \"modular_sum should return True\"\r\n    assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 20) == True, \"modular_sum should return True\"\r\n    assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 19) == False, \"modular_sum should return False\"\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    sum = 0\r\n    for i in range(n):\r\n        sum += arr[i]\r\n    return sum % m == 0\r\n\r\n\r\nassert modular_sum([1, 2, 3, 4], 4, 6) is True\r\nassert modular_sum([1, 2, 3, 4], 3, 6) is True\r\nassert modular_sum([1, 2, 3, 4], 2, 6) is True\r\nassert modular_sum([1, 2, 3, 4], 1, 6) is False\r\nassert modular_sum([1, 2, 3, 4], 4, 3) is True\r\nassert modular_sum([1, 2, 3, 4], 3, 3) is True\r\nassert modular_sum([1, 2, 3, 4], 2, 3) is True\r\nassert modular_sum([1, 2, 3, 4], 1, 3) is True\r\n","votes":null},{"text":"\r\n    arr.sort()\r\n    mod = 10 ** m\r\n    for i in range(len(arr)):\r\n        if i >= n:\r\n            break\r\n        if arr[i] % mod == 0:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    for i in range(n, m + 1):\r\n        if sum(arr[i - n : i]) % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(1, n):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    if n == 0:\r\n        return True\r\n    if m == 0:\r\n        return False\r\n    for i in range(n):\r\n        if arr[i] % m == 0 and arr[i] % m!= 0 and modular_sum(arr, n-1, m-arr[i]):\r\n            return True\r\n        else:\r\n            continue\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(modular_sum([1, 2, 3], 3, 2))\r\n    print(modular_sum([1, 2, 3], 4, 2))\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    if m % arr[n - 1] == 0:\r\n        return modular_sum(arr, n - 1, m \/ arr[n - 1])\r\n    else:\r\n        return modular_sum(arr, n - 1, m)\r\n\r","votes":null},{"text":"\r\n    if m == 1:\r\n        return all(arr[i] % m == 0 for i in range(n))\r\n\r\n    # Partition the array into two parts\r\n    left, right = [], []\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            left.append(i)\r\n        else:\r\n            right.append(i)\r\n\r\n    # Check if m is a divisor of all elements in left part\r\n    return modular_sum(left, len(left), m) and modular_sum(right, len(right), m)\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    if arr[n - 1] % m == 0:\r\n        return True\r\n    else:\r\n        return modular_sum(arr, n - 1, m)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = [int(x) for x in input().split()]\r\n    m = int(input())\r\n    print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        sum_ = 0\r\n        for j in range(len(arr[i])):\r\n            sum_ += arr[i][j]\r\n\r\n        if sum_ % m == 0:\r\n            return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n, m = map(int, input().split())\r\n        arr = []\r\n        for _ in range(n):\r\n            arr.append(list(map(int, input().split())))\r\n\r\n        print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    l = 0\r\n    r = 0\r\n    for i in range(1, n + 1):\r\n        l = (l + arr[i - 1]) % m\r\n        r = (r + arr[i]) % m\r\n        if l == r:\r\n            print(l)\r\n            break\r\n    else:\r\n        print(-1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n, m = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    modular_sum(arr, n, m)\r\n```\r\n\r\n**Constraints:**\r\n1 \u2264 `n` \u2264 `10^6`\r\n1 \u2264 `m` \u2264 `10^9`\r\n2 \u2264 `arr[i]` \u2264 `10^9`","votes":null},{"text":"\r\n    sum1 = 0\r\n    for i in arr:\r\n        sum1 += i\r\n        if sum1 % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    assert modular_sum([1, 1, 1, 1], 4, 2) == True\r\n    assert modular_sum([1, 1, 1, 1], 4, 3) == False\r\n    assert modular_sum([1, 1, 1, 1], 4, 1) == True\r\n","votes":null},{"text":"\r\n    # Write your code below\r\n    for i in range(1, n + 1):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(modular_sum([1, 2, 3, 4], 4, 3))\r\n    print(modular_sum([1, 2, 3, 4], 4, 4))\r\n    print(modular_sum([1, 2, 3, 4], 4, 6))\r\n    print(modular_sum([1, 2, 3, 4], 4, 7))\r\n    print(modular_sum([1, 2, 3, 4], 4, 8))\r\n    print(modular_sum([1, 2, 3, 4], 4, 9))\r\n    print(modular_sum([1, 2, 3, 4], 4, 10))\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    arr.sort()\r\n    l = len(arr)\r\n    if m == 0:\r\n        return True\r\n    if n == 0:\r\n        return False\r\n    for i in range(l):\r\n        if arr[i] % m == 0:\r\n            if n >= arr[i] \/\/ m:\r\n                if modular_sum(arr[:i], n - (arr[i] \/\/ m), m):\r\n                    return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n, m = map(int, input().split())\r\n        arr = list(map(int, input().split()))\r\n        print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # n = 5\r\n    # m = 3\r\n\r\n    # arr = [2, 3, 4, 5, 6]\r\n    # n = 6\r\n    # m = 6\r\n\r\n    # arr = [1, 2, 3, 4, 5, 6]\r\n    # n = 6\r\n    # m = 1\r\n\r\n    # arr = [1, 2, 3, 4, 5, 6]\r\n    # n = 6\r\n    # m = 4\r\n\r\n    # arr = [1, 2, 3, 5, 6]\r\n    # n = 6\r\n    # m = 3\r\n\r\n    # arr = [1, 2, 3, 4, 5, 6]\r\n    # n = 6\r\n    # m = 10\r\n\r\n    # arr = [1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    # n = 10\r\n    # m = 1\r\n\r\n    # arr = [1, 2, 3, 4, 5, 6]\r\n    # n = 6\r\n    # m = 5\r\n\r\n    # arr = [1, 2, 3, 4, 5, 6]\r\n    # n = 6\r\n    # m = 7\r\n\r\n    # arr = [1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    # n = 10\r\n    # m = 2\r\n\r\n    # arr = [1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    # n = 10\r\n    # m = 3\r\n\r\n    # arr = [1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    # n = 10\r\n    # m = 4\r\n\r\n    # arr = [1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    # n = 10\r\n    # m ","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] % m == arr[j] % m:\r\n                return True\r\n    return False\r\n\r\n\r\n# Driver Code\r\narr = [1, 2, 4, 5, 10, 11, 12, 15, 16, 17]\r\nm = 3\r\nn = len(arr)\r\nif modular_sum(arr, n, m):\r\n    print(\"A subset with sum divisible by m exists\")\r\nelse:\r\n    print(\"No subset with sum divisible by m exists\")\r\n","votes":null},{"text":"\r\n    return any(True for i in range(1, n+1) if (i+m) % arr[i-1] == 0)\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    if (n) == 1:\r\n        return (arr[0] % m == 0)\r\n    else:\r\n        for i in range(1, n):\r\n            if arr[i] % m == 0:\r\n                return True\r\n            else:\r\n                return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_cases = int(input())\r\n    for t in range(1, test_cases+1):\r\n        arr_size = int(input())\r\n        arr = [int(i) for i in input().split()]\r\n        n = len(arr)\r\n        m = int(input())\r\n\r\n        if modular_sum(arr, n, m):\r\n            print(f'Case #{t}: True')\r\n        else:\r\n            print(f'Case #{t}: False')\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    if m % arr[n-1] == 0:\r\n        return True\r\n    return modular_sum(arr, n-1, m)\r\n\r","votes":null},{"text":"\r\n    if m > n:\r\n        return False\r\n    if m == n:\r\n        if sum(arr) % m == 0:\r\n            return True\r\n        else:\r\n            return False\r\n    \r\n    for i in range(n, -1, -1):\r\n        arr[i] += 1\r\n        if arr[i] % m == 0:\r\n            return True\r\n        arr[i] -= 1\r\n    return False\r\n    \r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(modular_sum(arr, 20, 5))\r\n    print(modular_sum(arr, 20, 10))\r\n    print(modular_sum(arr, 20, 15))\r\n    print(modular_sum(arr, 20, 20))\r\n    print(modular_sum(arr, 20, 25))","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[j] % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    m = int(input())\r\n    print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    for i in range(1, n+1):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\narr = [1, 2, 3, 4]\r\nn = len(arr)\r\nm = 5\r\nprint(f\"The sum of the elements in the array is {sum(arr)}\")\r\nprint(f\"The array is: {arr}\")\r\nprint(f\"The array is divisible by {m} - {modular_sum(arr, n, m)}\")\r\n```\r\n\r\n**Output:**\r\n\r\n```\r\nThe sum of the elements in the array is 10\r\nThe array is: [1, 2, 3, 4]\r\nThe array is divisible by 5 - True\r\n```\r\n\r\n### **Q2. Write a function to check if an array is sorted in increasing order or not.**\r\n\r\n```python\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    elif m == 0:\r\n        return False\r\n    elif arr[n-1] % m == 0:\r\n        return True\r\n    else:\r\n        return modular_sum(arr, n-1, m)\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 6, 3))\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    arr.sort()\r\n    for i in range(len(arr)):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 12, 3))\r\nprint(modular_sum([2, 2, 3, 4, 5, 6], 12, 3))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 12, 9))","votes":null},{"text":"\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\n# print(modular_sum(arr, 10, 2))\r\n\r","votes":null},{"text":"\r\n    # check if the sum of all elements is divisible by m\r\n    total_sum = 0\r\n    for i in range(n):\r\n        total_sum += arr[i]\r\n    if total_sum % m == 0:\r\n        # check if there is a subset with sum divisible by m\r\n        for i in range(n):\r\n            if arr[i] % m == 0:\r\n                # set the remainder of the last element to 0\r\n                arr[n - 1] = 0\r\n                # call the function recursively\r\n                return modular_sum(arr, n - 1, m)\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Driver code\r\n    n, m = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    for i in range(0, n):\r\n        if m % arr[i] == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3]\r\n    print(modular_sum(arr, 3, 4))\r\n","votes":null},{"text":"\r\n    for i in range(1, n+1):\r\n        if (arr[i-1] % m) == 0:\r\n            return True\r\n    return False\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 3, 4, 7, 10, 11, 15, 16, 18, 20]\r\n    m = 2\r\n    print(modular_sum(arr, 10, m))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        if sum(arr[i]) % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    m = 10\r\n    print(modular_sum(arr, len(arr), m))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if (i+j) % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7]\r\n    n = len(arr)\r\n    m = 2\r\n    print(f'Sum divisible by {m}: {modular_sum(arr, n, m)}')\r\n\r\n```\r\n\r\n**Output:**\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/72851791\/134742182-5e58e3fe-482b-4ab8-8968-1544103836f2.png)\r\n\r\n### Conclusion:\r\n\r\nThe above solution was very simple and easy to understand. However, there are several different approaches to check if a number is divisible by a given number, in this case, m. I will be adding more solutions in future blogs.\r\n\r\nThank you for reading this blog. See you in next one.\r\n","votes":null},{"text":"\r\n    return sum(arr[i] for i in range(n) if arr[i] % m == 0) % m == 0\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_cases = int(input())\r\n\r\n    for _ in range(test_cases):\r\n        n, m = map(int, input().split())\r\n        arr = list(map(int, input().split()))\r\n\r\n        if modular_sum(arr, n, m):\r\n            print(\"Yes\")\r\n        else:\r\n            print(\"No\")\r\n","votes":null},{"text":"\r\n    if m == 1:\r\n        return True\r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            if modular_sum(arr, n, m \/\/ arr[i]):\r\n                return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    for i in range(n):\r\n        if arr[i] % m == 0 and (arr[i] \/\/ m) in arr and (arr[i] \/\/ m) not in arr[:i] and (arr[i] \/\/ m) not in arr[i+1:]:\r\n            return True\r\n    return False\r\n\r\n# Driver code\r\narr = [2,3,1,4,5]\r\nm = 3\r\nn = len(arr)\r\nprint(arr)\r\nprint(n)\r\nprint(m)\r\n\r\nif modular_sum(arr, n, m):\r\n    print(\"Subset exists\")\r\nelse:\r\n    print(\"Subset doesn't exist\")","votes":null},{"text":"\r\n\r\n    # Initialize the sum of the current array\r\n    curr_sum = 0\r\n\r\n    # Iterate over all elements in the array\r\n    for i in range(n):\r\n\r\n        # Add the ith element of the array to the sum\r\n        curr_sum += arr[i]\r\n\r\n        # If the sum is not divisible by m\r\n        if curr_sum % m!= 0:\r\n\r\n            # Return False\r\n            return False\r\n\r\n    # If the sum is divisible by m\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    m = int(input())\r\n    arr = list(map(int, input().split()))\r\n    print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n    result = False\r\n    for i in range(0, n):\r\n        if arr[i] % m == 0:\r\n            result = True\r\n            break\r\n    return result\r\n\r\nif __name__ == '__main__':\r\n    n, m = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    result = modular_sum(arr, n, m)\r\n    print(str(result).lower())\r\n","votes":null},{"text":"\r\n    for x in arr:\r\n        if x % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in range(n):\r\n        sum_ = 0\r\n        for j in range(i+1, n):\r\n            sum_ += arr[j]\r\n            if sum_ % m == 0:\r\n                result.append(sum_)\r\n                if len(result) == m:\r\n                    return result\r\n    return False\r\n\r\n\r","votes":null}],"time":{"count":6.0,"avg":148068.246,"std":29859.5343194525,"cov":0.2016606202}}
{"id":516,"question":"def radix_sort(nums):\r\n    \"\"\"Write a function to sort a list of elements using radix sort.\"\"\"","answers":[{"text":"\r\n    m = 1\r\n    while m <= max(nums):\r\n        bucket = [[] for _ in range(10)]\r\n        for num in nums:\r\n            bucket[int(num \/ m) % 10].append(num)\r\n        nums = []\r\n        for bucket_nums in bucket:\r\n            nums += bucket_nums\r\n        m *= 10\r\n    return nums\r\n\r\nif __name__ == '__main__':\r\n    nums = [2, 20, 1, 10, 6, 12, 13, 11, 15, 8, 22, 24, 23, 21]\r\n    nums = radix_sort(nums)\r\n    print(nums)\r\n","votes":139611.488},{"text":"\r\n    if len(nums) > 1:\r\n        for _ in range(len(str(max(nums)))):\r\n            num_buckets = [[] for _ in range(10)]\r\n            for num in nums:\r\n                digit = num \/\/ (10 ** _) % 10\r\n                num_buckets[digit].append(num)\r\n            nums = []\r\n            for bucket in num_buckets:\r\n                nums += bucket\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import doctest\r\n\r\n    doctest.testmod()\r\n","votes":140309.668},{"text":"\r\n    radix = max(nums) + 1\r\n    buckets = [[] for _ in range(radix)]\r\n\r\n    for num in nums:\r\n        buckets[num].append(num)\r\n\r\n    result = []\r\n    for bucket in buckets:\r\n        result.extend(bucket)\r\n\r\n    return result\r\n\r\n\r\nnums = [5, 2, 3, 1, 4]\r\nprint(radix_sort(nums))\r\n","votes":149236.964},{"text":"\r\n    if len(nums) < 2:\r\n        return nums\r\n    max_digit = max(nums)\r\n    nums_digit = [0] * (max_digit + 1)\r\n    for num in nums:\r\n        nums_digit[num] += 1\r\n    for i in range(1, max_digit + 1):\r\n        nums_digit[i] += nums_digit[i - 1]\r\n    nums_sorted = [0] * len(nums)\r\n    for num in reversed(nums):\r\n        nums_sorted[nums_digit[num] - 1] = num\r\n        nums_digit[num] -= 1\r\n    return nums_sorted\r\n\r\n\r\nnums = [1, 3, 3, 2, 2]\r\nprint(radix_sort(nums))\r\n","votes":155445.296},{"text":"\r\n    max_value = max(nums)\r\n    digit = 1\r\n    while max_value \/\/ digit > 0:\r\n        bucket = [[] for _ in range(10)]\r\n        for num in nums:\r\n            bucket[num \/\/ digit % 10].append(num)\r\n        pos = 0\r\n        for bucket_ in bucket:\r\n            nums[pos:pos + len(bucket_)] = bucket_\r\n            pos += len(bucket_)\r\n        digit *= 10\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [12, 11, 13, 5, 6]\r\n    print(radix_sort(nums))\r\n    # [5, 6, 11, 12, 13]\r\n","votes":155706.932},{"text":"\r\n\r\n    # find maximum element\r\n    max_ele = max(nums)\r\n    max_digit = len(str(max_ele))\r\n\r\n    # create buckets\r\n    buckets = [[] for _ in range(10 ** max_digit)]\r\n\r\n    # put elements in buckets\r\n    for num in nums:\r\n        digit = int(str(num)[:max_digit])\r\n        buckets[digit].append(num)\r\n\r\n    # put elements back into list\r\n    result = []\r\n    for bucket in buckets:\r\n        result.extend(bucket)\r\n\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [50, 2, 3, 4, 1]\r\n    print(radix_sort(nums))\r\n","votes":159515.252},{"text":"\r\n    max_val = max(nums)\r\n    if max_val == 0:\r\n        return nums\r\n    num_bits = len(bin(max_val)) - 2\r\n    bit_masks = [0b1 << i for i in range(num_bits)]\r\n    for i in range(num_bits):\r\n        bit_masks[i] |= bit_masks[i] << 1\r\n        bit_masks[i] |= bit_masks[i] << 2\r\n        bit_masks[i] |= bit_masks[i] << 4\r\n        bit_masks[i] |= bit_masks[i] << 8\r\n        bit_masks[i] |= bit_masks[i] << 16\r\n        bit_masks[i] |= bit_masks[i] << 32\r\n    counts = [0] * (max_val + 1)\r\n    for num in nums:\r\n        counts[num] += 1\r\n    for i in range(1, max_val + 1):\r\n        counts[i] += counts[i - 1]\r\n    res = [0] * len(nums)\r\n    for i in range(len(nums)):\r\n        res[counts[nums[i]] - 1] = nums[i]\r\n        counts[nums[i]] -= 1\r\n    return res\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [5, 4, 2, 1, 3]\r\n    res = radix_sort(nums)\r\n    print(\"Sorted list:\", res)\r\n","votes":224460.968},{"text":"\r\n    max_element = max(nums)\r\n    min_element = min(nums)\r\n    buckets = [0] * (max_element - min_element + 1)\r\n    for i in nums:\r\n        buckets[i - min_element] += 1\r\n    for j in range(1, len(buckets)):\r\n        buckets[j] += buckets[j - 1]\r\n    result = [0] * len(nums)\r\n    for i in range(len(nums) - 1, -1, -1):\r\n        result[buckets[nums[i] - min_element] - 1] = nums[i]\r\n        buckets[nums[i] - min_element] -= 1\r\n    return result\r\n\r\n\r","votes":233690.72},{"text":"\r\n    if not nums:\r\n        return nums\r\n    max_num = max(nums)\r\n    max_num_length = len(str(max_num))\r\n    buckets = [[] for _ in range(10)]\r\n\r\n    for num in nums:\r\n        buckets[num\/\/max_num_length].append(num)\r\n\r\n    return [num for bucket in buckets for num in bucket]\r\n\r\n\r","votes":null},{"text":"\r\n    N = len(nums)\r\n    d = [0] * max(nums)\r\n    for num in nums:\r\n        d[num] += 1\r\n    for i in range(1, max(nums) + 1):\r\n        d[i] += d[i - 1]\r\n    result = [0] * N\r\n    for num in nums:\r\n        result[d[num] - 1] = num\r\n        d[num] -= 1\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    pass\r\n","votes":null},{"text":"\r\n    # write your code here\r\n\r\n\r","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    max_index = len(str(max_num))\r\n    digits = [0] * 10\r\n\r\n    for num in nums:\r\n        index = int(str(num)[::-1])\r\n        digits[index] += 1\r\n\r\n    for i in range(1, 10):\r\n        digits[i] += digits[i - 1]\r\n\r\n    sorted_nums = []\r\n    for i in range(len(nums)):\r\n        index = int(str(nums[i])[::-1])\r\n        sorted_nums.append(nums[digits[index] - 1])\r\n\r\n    return sorted_nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_list = [3, 2, 1]\r\n    print(radix_sort(test_list))\r\n","votes":null},{"text":"\r\n    max_len = max(map(len, nums))\r\n    bucket = [0] * max_len\r\n    for num in nums:\r\n        bucket[num] += 1\r\n    for i in range(1, max_len):\r\n        bucket[i] += bucket[i - 1]\r\n    result = [0] * len(nums)\r\n    for num in nums:\r\n        result[bucket[num] - 1] = num\r\n        bucket[num] -= 1\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO\r\n    pass\r\n\r\n\r","votes":null},{"text":"\r\n    # create an array to store the index of each element\r\n    indices = [i for i in range(len(nums))]\r\n    # create a list to store the total number of digits in the elements\r\n    num_digits = [len(str(i)) for i in nums]\r\n    # create an array to store the total number of digits in the elements\r\n    # using a dictionary to count the total number of digits\r\n    num_digits_dict = {str(i): num_digits.count(i) for i in range(10)}\r\n    # set the maximum number of digits\r\n    max_num_digits = max(num_digits_dict.values())\r\n    # create an array to store the numerator of each digit\r\n    num_digits_array = [0] * (max_num_digits + 1)\r\n    # create an array to store the denominator of each digit\r\n    denominator_array = [0] * (max_num_digits + 1)\r\n    # create an array to store the digit of each element\r\n    digits_array = [0] * len(nums)\r\n    # set the denominator of the first digit\r\n    denominator_array[0] = 1\r\n    # calculate the numerator of each digit\r\n    for num_digit in num_digits_dict.values():\r\n        # set the numerator of the next digit to the numerator of the current digit\r\n        num_digits_array[num_digit] = num_digits_array[num_digit - 1] + num_digit\r\n        # set the denominator of the next digit to the denominator of the current digit\r\n        denominator_array[num_digit] = denominator_array[num_digit - 1] * 10\r\n    # loop through the array of elements\r\n    for i in range(len(nums)):\r\n        # calculate the digit of the current element\r\n        digit = int(nums[i] \/ denominator_array[num_digits[i]])\r\n        # get the index of the current element\r\n        index = indices[i]\r\n        # get the index of the first element that has the same digit\r\n        # by using binary search\r\n        first_element_index = binary_search(num_digits_array[digit], indices, i)\r\n        # swap the current element with the first element that has the same digit\r\n        if first_element_index!= i:\r\n          ","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    count = [0] * (max_num + 1)\r\n    for num in nums:\r\n        count[num] += 1\r\n    for i in range(1, max_num + 1):\r\n        count[i] += count[i - 1]\r\n    result = []\r\n    for num in nums:\r\n        result.append(num)\r\n        count[num] -= 1\r\n    for i in range(max_num, -1, -1):\r\n        for _ in range(count[i]):\r\n            result.append(i)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    # nums = [1, 4, 2, 5, 3, 7, 6, 8, 9]\r\n    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    # nums = [1, 2, 3, 4]\r\n    # nums = [1, 2, 3]\r\n    # nums = [1]\r\n    # nums = []\r\n    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    # nums = [2, 1, 3, 4, 5, 6, 7, 8, 9]\r\n    # nums = [3, 1, 2, 4, 5, 6, 7, 8, 9]\r\n    # nums = [4, 1, 2, 3, 5, 6, 7, 8, 9]\r\n    # nums = [5, 1, 2, 3, 4, 6, 7, 8, 9]\r\n    # nums = [6, 1, 2, 3, 4, 5, 7, 8, 9]\r\n    # nums = [7, 1, 2, 3, 4, 5, 6, 8, 9]\r\n    # nums = [8, 1, 2, 3, 4, 5, 6, 7, 9]\r\n    # nums = [9, 1, 2, 3, 4, 5, 6, 7, 8]\r\n    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    # nums = [1, ","votes":null},{"text":"\r\n    # Your code here\r\n    pass\r\n\r\n# Tests\r\nassert radix_sort([100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2","votes":null},{"text":"\r\n    # Write your code here\r\n    # return nums\r\n    # radix sort algorithm\r\n   ","votes":null},{"text":"\r\n\r\n    nums_len = len(nums)\r\n    bucket = [[] for _ in range(10)]\r\n\r\n    for i in range(nums_len):\r\n        bucket[nums[i] \/\/ 10].append(nums[i])\r\n\r\n    for i in range(1, 10):\r\n        bucket[i] = bucket[i] + bucket[i - 1]\r\n\r\n    return [bucket[i][0] for i in range(10)]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    max_num = max(nums)\r\n    nums_list = [0] * (max_num + 1)\r\n    for num in nums:\r\n        nums_list[num] += 1\r\n    nums_list_sorted = [0] * len(nums)\r\n    for i in range(1, len(nums_list_sorted)):\r\n        nums_list_sorted[i] = nums_list_sorted[i - 1] + nums_list[i]\r\n    nums_sorted = [0] * len(nums)\r\n    for i in range(len(nums_list_sorted) - 1, -1, -1):\r\n        nums_sorted[nums_list_sorted[i] - 1] = i\r\n    return nums_sorted\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [4, 2, 5, 1, 3, 2, 5, 1, 2, 1, 3, 3, 4, 3, 4, 5, 5, 2, 2, 5, 2, 5, 3, 5, 4, 4, 2, 4, 1, 1, 5, 1, 2, 2, 5, 2, 5, 4, 5, 4, 5, 2, 5, 3, 2, 2, 5, 1, 3, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 3, 5, 3, 4, 1, 2, 4, 3, 3, 2, 5, 4, 5, 5, 2, 2, 2, 5, 2, 3, 2, 1, 5, 5, 3, 4, 5, 5, 3, 4, 5, 5, 3, 5, 4, 5, 1, 5, 2, 1, 5, 4, 5, 3","votes":null},{"text":"\r\n    n = len(nums)\r\n    if n <= 1:\r\n        return nums\r\n    max_digit = 1\r\n    while max_digit * 10 <= n:\r\n        max_digit *= 10\r\n    max_digit = max_digit \/\/ 10\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        buckets[num \/\/ max_digit % 10].append(num)\r\n    res = []\r\n    for bucket in buckets:\r\n        res += bucket\r\n    return res\r\n\r","votes":null},{"text":"\r\n    pass\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    n = len(nums)\r\n    if n == 0:\r\n        return\r\n    max_num = max(nums)\r\n    max_digit = 0\r\n    while max_num > 0:\r\n        max_digit += 1\r\n        max_num = max_num \/\/ 10\r\n    for i in range(max_digit):\r\n        output = [None] * n\r\n        for j in range(n):\r\n            output[nums[j] \/\/ (10 ** i) % 10] = nums[j]\r\n        for j in range(n):\r\n            nums[j] = output[j]\r\n    return nums\r\n\r\n\r\nnums = [5, 3, 2, 1, 4]\r\nprint(radix_sort(nums))\r\n","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    max_digits = len(str(max_num))\r\n    count = [0] * (max_digits + 1)\r\n    for num in nums:\r\n        count[len(str(num))]+=1\r\n    for i in range(1,len(count)):\r\n        count[i]+=count[i-1]\r\n    result = [0] * len(nums)\r\n    for num in nums:\r\n        result[count[len(str(num))]-1] = num\r\n        count[len(str(num))]-=1\r\n    return result\r\n\r\nif __name__ == '__main__':\r\n    nums = [3,2,1,5,6,4]\r\n    print(radix_sort(nums))","votes":null},{"text":"\r\n    nums = [str(x) for x in nums]\r\n    max_num_len = max(len(x) for x in nums)\r\n    sorted_nums = [nums[0] * max_num_len]\r\n    for num in nums:\r\n        i = 0\r\n        while i < max_num_len and sorted_nums[i] < num:\r\n            i += 1\r\n        sorted_nums.insert(i, num)\r\n    return [int(x) for x in sorted_nums]\r\n    \r\nif __name__ == \"__main__\":\r\n    print(radix_sort([53, 16, 5, 36, 20]))\r\n    print(radix_sort([53, 16, 5, 36, 20, 2]))\r\n    print(radix_sort([53, 16, 5, 36, 20, 2, 1]))\r\n    print(radix_sort([53, 16, 5, 36, 20, 2, 1, 9]))\r\n    print(radix_sort([53, 16, 5, 36, 20, 2, 1, 9, 6]))\r\n","votes":null},{"text":"\r\n    if len(nums) <= 1:\r\n        return nums\r\n    buckets = [[] for _ in range(10)]\r\n    for n in nums:\r\n        buckets[n\/\/10].append(n)\r\n    nums = [0] * len(nums)\r\n    for i in range(10):\r\n        nums[:len(buckets[i])] = buckets[i]\r\n        buckets[i] = nums\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [5, 6, 3, 4, 1, 2]\r\n    print(radix_sort(nums))\r\n","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    num_digits = int(math.log10(max_num) + 1)\r\n    count = [0 for _ in range(10)]\r\n    for num in nums:\r\n        count[num \/\/ (10 ** (num_digits - 1)) % 10] += 1\r\n    res = [0 for _ in range(max_num + 1)]\r\n\r\n    for digit in range(10):\r\n        for _ in range(count[digit]):\r\n            res[digit * 10 ** (num_digits - 1) + count[digit] - 1] = digit\r\n\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    # Create an array of 10 digits, with each digit representing the\r\n    # number of digits in a number.\r\n    # Create a temporary array to maintain the sorted list.\r\n    # Create a temp array to maintain the count of digits for each number.\r\n    # Write a for loop to traverse through the numbers to be sorted.\r\n    # Write a nested for loop to traverse through the numbers in a group.\r\n    # Write a nested for loop to traverse through the numbers in a group\r\n    # and find the digit with the maximum value and swap the position of\r\n    # the number with the digit with the maximum value.\r\n    # Write a nested for loop to traverse through the numbers in a group\r\n    # and find the digit with the minimum value and swap the position of\r\n    # the number with the digit with the minimum value.\r\n    # Return the sorted array.\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO: Implement this function\r\n\r\nif __name__ == '__main__':\r\n    nums = [3, 2, 1, 0, 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3]\r\n    print(nums)\r\n    radix_sort(nums)\r\n    print(nums)\r\n","votes":null},{"text":"\r\n    # TODO: Implement\r\n    pass\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n","votes":null},{"text":"\r\n    nums = list(map(str, nums))\r\n    len_nums = len(nums)\r\n    max_num = max(nums)\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num = max_num if max_num <= 10 else max_num \/\/ 10\r\n    max_num ","votes":null},{"text":"\r\n    max_digit = len(str(max(nums)))\r\n    for i in range(1, max_digit + 1):\r\n        counts = [0] * 10\r\n        for num in nums:\r\n            counts[num \/\/ (10 ** (i - 1)) % 10] += 1\r\n        j = 0\r\n        for i in range(10):\r\n            while counts[i] > 0:\r\n                nums[j] = i * 10 ** (i - 1) + j\r\n                j += 1\r\n                counts[i] -= 1\r\n    return nums\r\n\r\nnums = [3, 2, 1]\r\nprint(radix_sort(nums))\r\n# [1, 2, 3]\r\n```\r\n\r\n```python\r","votes":null},{"text":"\r\n\r\n    # TODO: Sort the list of numbers from the least significant digit to the most significant digit.\r\n    # Hint: Use the following function:\r\n    #\r\n    #","votes":null},{"text":"\r\n    # write your code here\r\n    radix_sort(nums, 1024)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    count = [0] * 10\r\n    for i in nums:\r\n        count[i] += 1\r\n    for i in range(1, 10):\r\n        count[i] += count[i-1]\r\n    ret = []\r\n    for i in range(len(nums)):\r\n        ret.append(nums[count[nums[i]]-1])\r\n        count[nums[i]] -= 1\r\n    return ret\r\n\r\n\r\nif __name__ == '__main__':\r\n    assert radix_sort([4, 1, 5, 6, 2, 0, 8, 7, 3, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    assert radix_sort([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    assert radix_sort([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    assert radix_sort([]) == []\r\n    assert radix_sort([2, 1, 8, 3, 6]) == [1, 2, 3, 6, 8]\r\n    assert radix_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\r\n    assert radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    assert radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,","votes":null},{"text":"\r\n\r\n    # Initialize the count array with zeroes\r\n    count = [0 for _ in range(10)]\r\n\r\n    # Calculate the frequencies of each digit\r\n    for num in nums:\r\n        count[num \/\/ 10] += 1\r\n\r\n    # Store the indices of the elements that need to be sorted\r\n    indices = []\r\n\r\n    # Calculate the sum of count array\r\n    sum_count = sum(count)\r\n\r\n    # Calculate the index of the current element\r\n    # and increment the value in the count array\r\n    for i in range(10):\r\n        count[i] += count[i - 1]\r\n        indices.append(count[i] - 1)\r\n\r\n    # Store the sorted array\r\n    ans = []\r\n\r\n    # Rearrange the indices\r\n    for i in range(len(nums)):\r\n        ans.append(nums[indices[i]])\r\n\r\n    return ans\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    if len(nums) <= 1:\r\n        return nums\r\n    max_digit = max(str(num) for num in nums)\r\n    max_digit = int(max_digit)\r\n    bucket = [[] for _ in range(10)]\r\n    for num in nums:\r\n        bucket[int(num \/\/ max_digit)].append(num)\r\n    nums = []\r\n    for i, nums_ in enumerate(bucket):\r\n        nums.extend(nums_)\r\n    return nums\r\n\r\n\r\n# nums = [8, 5, 7, 1, 3, 6, 0, 9, 2, 4]\r\n# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\r\n# nums = [3, 2, 1]\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\r\nprint(nums)\r\nprint(radix_sort(nums))\r\n","votes":null},{"text":"\r\n    n = len(nums)\r\n    if n <= 1:\r\n        return nums\r\n    d = max(nums)\r\n    k = len(str(d))\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        buckets[num \/\/ (10 ** (k - 1)) % 10].append(num)\r\n    res = []\r\n    for bucket in buckets:\r\n        res += bucket\r\n    return res\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(radix_sort([3, 2, 1]))\r\n    print(radix_sort([1, 2, 3]))\r\n    print(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(radix_sort([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]))\r\n    print(radix_sort([100, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\r\n","votes":null},{"text":"\r\n    n = len(nums)\r\n    if n == 1:\r\n        return nums\r\n    max_value = max(nums)\r\n    if max_value < 10:\r\n        return nums\r\n    max_digit = len(str(max_value))\r\n    output = [[] for i in range(10)]\r\n    for i in nums:\r\n        output[i \/\/ max_value % 10].append(i)\r\n    output = [item for sublist in output for item in sublist]\r\n    return output\r\n\r\n\r","votes":null},{"text":"\r\n    # Step 1: Find the maximum number to know number of digits\r\n    max_num = max(nums)\r\n    max_num_len = 1\r\n    while max_num >= 10:\r\n        max_num \/= 10\r\n        max_num_len += 1\r\n\r\n    # Step 2: Do counting sort for each digit\r\n    counts = [0] * 10\r\n    for num in nums:\r\n        digit = num \/\/ (10 ** (max_num_len - 1))\r\n        counts[digit] += 1\r\n\r\n    # Step 3: Do bucket sort\r\n    i = 0\r\n    while i < 10:\r\n        if counts[i]!= 0:\r\n            j = counts[i] - 1\r\n            while j >= 0:\r\n                nums[i + j * (10 ** (max_num_len - 1))] = num\r\n                j -= 1\r\n        i += 1\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [1700, 45, 7500, 7500, 7500, 1600, 500]\r\n    radix_sort(nums)\r\n    print(nums)\r\n","votes":null},{"text":"\r\n\r\n    # sort each digit separately\r\n    # and then combine the results\r\n    # (the number of digits is the max)\r\n    for i in range(1, len(str(max(nums)))):\r\n        # loop through each digit\r\n        # and get each digit's bucket of elements\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            # calculate the index of the digit\r\n            index = int(num \/ (10 ** (i - 1))) % 10\r\n            # add the element to the bucket\r\n            buckets[index].append(num)\r\n        # combine the digits\r\n        nums = []\r\n        for bucket in buckets:\r\n            # append all elements in the bucket\r\n            nums += bucket\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_data = [\r\n        200, 100, 12, 5, 6, 1, 14, 10, 11, 13, 2, 7, 3, 4, 9, 8, 15, 16, 17, 18, 19,\r\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\r\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\r\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\r\n        80,","votes":null},{"text":"\r\n    # Write your code here.\r\n    pass\r\n\r","votes":null},{"text":"\r\n    max_digit = len(str(max(nums)))\r\n    # create a table to store the count of digits\r\n    count = [0] * (max_digit + 1)\r\n    # count the elements in nums\r\n    for num in nums:\r\n        count[len(str(num))] += 1\r\n    # calculate the starting index of the sorted array\r\n    start = [0] * (max_digit + 1)\r\n    # calculate the starting index of the sorted array\r\n    for i in range(1, len(count)):\r\n        start[i] = start[i - 1] + count[i - 1]\r\n    # calculate the sorted array\r\n    output = []\r\n    for num in nums:\r\n        output.append(num)\r\n    for i in range(max_digit, -1, -1):\r\n        for j in range(start[i], start[i] + count[i]):\r\n            output[j] = output[j] \/\/ 10 ** (i - 1) * 10 ** (i - 1) + (output[j] % 10 ** (i - 1))\r\n    return output\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [3, 30, 34, 5, 9, 8]\r\n    print(nums)\r\n    print(radix_sort(nums))\r\n","votes":null},{"text":"\r\n    digits = [0 for _ in range(10)]\r\n    for num in nums:\r\n        digits[num \/\/ 10] += 1\r\n\r\n    for i in range(1, 10):\r\n        digits[i] += digits[i-1]\r\n\r\n    output = []\r\n    for num in nums:\r\n        output.append(num % 10)\r\n        digits[num \/\/ 10] -= 1\r\n\r\n    return output\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_list = [1, 13, 4, 17, 2, 10, 9, 11, 15, 3]\r\n    print(radix_sort(test_list))","votes":null},{"text":"\r\n    # write your code here\r\n    length = len(nums)\r\n    # 1. Create buckets\r\n    buckets = [[] for i in range(10)]\r\n    # 2. Divide the elements into buckets\r\n    for num in nums:\r\n        buckets[num \/\/ 1000000007].append(num)\r\n\r\n    # 3. Merge the buckets\r\n    i = 0\r\n    while i < length:\r\n        if len(buckets[i]) > 0:\r\n            nums[i] = buckets[i].pop(0)\r\n        else:\r\n            i += 1\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [23, 45, 2, 1, 6, 9, 25, 52, 4, 1, 12]\r\n    print(\"Input: \", nums)\r\n    print(\"Output: \", radix_sort(nums))\r\n","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    bucket_num = 10\r\n    buckets = [[] for _ in range(bucket_num)]\r\n    for num in nums:\r\n        bucket = num \/\/ (max_num \/\/ bucket_num)\r\n        buckets[bucket].append(num)\r\n    return sum(buckets, [])\r\n\r\n\r","votes":null},{"text":"\r\n    max = max(nums)\r\n    # find the number of digits\r\n    n = len(str(max))\r\n    # a list of length n, each element is 0\r\n    count = [0] * n\r\n    for num in nums:\r\n        # get the digit of num\r\n        digit = (num \/\/ (10 ** (n - 1))) % 10\r\n        # count[digit] += 1\r\n        count[digit] += 1\r\n    # a list of length n, each element is 0\r\n    output = [0] * len(nums)\r\n    # a list of length n, each element is 0\r\n    carry = 0\r\n    for i in range(n - 1, -1, -1):\r\n        # iterate through count, and add the elements\r\n        for j in range(count[i]):\r\n            output[carry] = i * 10 ** (n - 1) + j\r\n            carry += 1\r\n    return output\r\n\r\nif __name__ == '__main__':\r\n    print(radix_sort([123, 456, 789, 234, 567, 890]))","votes":null},{"text":"\r\n    if len(nums) < 2:\r\n        return nums\r\n\r\n    max_digit = len(str(max(nums)))\r\n    sorted_nums = [[] for _ in range(10)]\r\n    for num in nums:\r\n        sorted_nums[num \/\/ (max_digit ** i) % 10].append(num)\r\n\r\n    return [num for sublist in sorted_nums for num in sublist]\r\n\r\n\r","votes":null},{"text":"\r\n    # YOUR CODE HERE\r\n    # Hint: You will need to use a lookup table.\r\n    # See the hints for more details.\r\n    #\r\n    # Time complexity: O(n * k)\r\n    # Space complexity: O(k)\r\n\r\n    # Use a lookup table to store the counts of each digit\r\n    lookup = [0] * 10\r\n    for num in nums:\r\n        lookup[num] += 1\r\n\r\n    # Sort the elements in the lookup table\r\n    for digit in range(10):\r\n        for i in range(lookup[digit]):\r\n            nums[i] = digit\r\n\r\n    return nums\r\n\r\n\r\n# Tests\r\nif __name__ == '__main__':\r\n    print(radix_sort([123, 456, 789, 12, 54, 321]))\r\n","votes":null},{"text":"\r\n    if not nums:\r\n        return\r\n    d = {i: len(str(i)) for i in range(10)}\r\n    d.update(sorted(d.items(), key=lambda x: x[1]))\r\n    result = [0 for i in range(len(nums))]\r\n    for i in range(len(nums)):\r\n        result[d[nums[i]]] = nums[i]\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    count = [0]*10\r\n    for i in nums:\r\n        count[i\/\/10] += 1\r\n    count.append(len(nums))\r\n    new_num = []\r\n    for i in range(10):\r\n        for j in range(count[i]):\r\n            new_num.append(nums[i*count[i] + j])\r\n    return new_num\r\n\r\nif __name__ == '__main__':\r\n    nums = [12, 10, 11, 13]\r\n    print(radix_sort(nums))\r\n    nums = [12, 10, 11, 13, 12, 10, 11, 13]\r\n    print(radix_sort(nums))\r\n    nums = [1]\r\n    print(radix_sort(nums))\r\n    nums = [2, 1]\r\n    print(radix_sort(nums))\r\n    nums = [12, 10, 11, 13, 12, 10, 11, 13, 12, 10, 11, 13]\r\n    print(radix_sort(nums))\r\n","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    buckets = [[] for _ in range(max_num + 1)]\r\n\r\n    for num in nums:\r\n        buckets[num].append(num)\r\n\r\n    for i in range(1, len(buckets)):\r\n        buckets[i].sort()\r\n\r\n        for j in range(i):\r\n            buckets[i].extend(buckets[j])\r\n\r\n    return [x for x in buckets[0]]\r\n\r\n\r\n\r\nprint(radix_sort([3, 2, 1, 4]))\r\nprint(radix_sort([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))","votes":null},{"text":"\r\n\r\n    # get max number in nums\r\n    max_num = max(nums)\r\n\r\n    # get number of digits in max number\r\n    num_digits = len(str(max_num))\r\n\r\n    # create an array to store counts\r\n    count_arr = [0 for digit in range(num_digits + 1)]\r\n\r\n    # traverse all numbers and store count in count_arr\r\n    for num in nums:\r\n        # get digits of num\r\n        digits = [int(digit) for digit in str(num)]\r\n\r\n        # traverse each digit\r\n        for digit in digits:\r\n            count_arr[digit] += 1\r\n\r\n    # traverse count_arr and update nums\r\n    for digit in range(num_digits, -1, -1):\r\n        for i in range(count_arr[digit]):\r\n            # update nums\r\n            nums[i] += 10 ** (num_digits - digit) * (digit + 1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [3, 30, 34, 5, 9]\r\n    print(nums)\r\n    radix_sort(nums)\r\n    print(nums)\r\n","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    bucket = [[] for _ in range(10)]\r\n    for num in nums:\r\n        bucket[num \/\/ max_num % 10].append(num)\r\n    return [num for bucket in bucket for num in bucket]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    assert radix_sort([]) == []\r\n    assert radix_sort([10]) == [10]\r\n    assert radix_sort([1, 10]) == [1, 10]\r\n    assert radix_sort([1, 4, 10, 100, 1000]) == [1, 4, 100, 1000, 10]\r\n    assert radix_sort([1, 9, 10, 100, 1000]) == [1, 9, 10, 100, 1000]\r\n    assert radix_sort([1, 9, 10, 100, 1000, 10000]) == [1, 9, 10, 100, 1000, 10000]\r\n    assert radix_sort([1, 9, 10, 100, 1000, 10000, 100000]) == [9, 10, 100, 1000, 10000, 100000, 1]\r\n    assert radix_sort([1, 9, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000]) == [1, 9, 10, 100, 1000, 10000, 100000, 1000000, ","votes":null},{"text":"\r\n    # TODO: Write your code here.\r\n    length = len(nums)\r\n    if length == 0:\r\n        return nums\r\n    max_number = max(nums)\r\n    num_digits = 1\r\n    while max_number \/\/ num_digits > 0:\r\n        num_digits = num_digits * 10\r\n    num_buckets = [[] for _ in range(num_digits)]\r\n    for num in nums:\r\n        num_buckets[int(num \/\/ num_digits)].append(num)\r\n    bucket_nums = [[] for _ in range(num_digits)]\r\n    for bucket_num in num_buckets:\r\n        for bucket_num_i in bucket_num:\r\n            bucket_nums[int(bucket_num_i \/\/ num_digits)].append(bucket_num_i)\r\n    nums = []\r\n    for bucket_num in bucket_nums:\r\n        for bucket_num_i in bucket_num:\r\n            nums.append(bucket_num_i)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums) <= 1:\r\n        return nums\r\n    max_num = max(nums)\r\n    digits = len(str(max_num))\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        buckets[num \/\/ (10 ** (digits - 1)) % 10].append(num)\r\n    result = []\r\n    for bucket in buckets:\r\n        result += radix_sort(bucket)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO: Write your code here.\r\n    if nums == []:\r\n        return nums\r\n    max_val = max(nums)\r\n    max_val_len = len(str(int(max_val)))\r\n    buckets = [[] for _ in range(10**max_val_len)]\r\n    for num in nums:\r\n        buckets[len(str(num))-1].append(num)\r\n    sorted_nums = [0 for _ in range(len(nums))]\r\n    i = 0\r\n    for bucket in buckets:\r\n        for num in bucket:\r\n            sorted_nums[i] = num\r\n            i += 1\r\n    return sorted_nums\r\n```","votes":null},{"text":"\r\n    # TODO\r\n    return\r\n","votes":null},{"text":"\r\n    # TODO: Implement this function.\r\n    pass\r\n\r\n\r","votes":null},{"text":"\r\n    # \u8ba1\u6570\u6392\u5e8f\r\n    count_sort(nums)\r\n    # \u57fa\u6570\u6392\u5e8f\r\n    radix_sort_by_count_sort(nums)\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    for i in range(1, len(nums) \/\/ 2 + 1):\r\n        count = [0] * 10\r\n        for num in nums:\r\n            count[num \/\/ i % 10] += 1\r\n        idx = 0\r\n        for j in range(10):\r\n            while count[j] > 0:\r\n                nums[idx] = j * i\r\n                idx += 1\r\n                count[j] -= 1\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [3, 23, 11, 1, 22, 2, 10, 21]\r\n    print(radix_sort(nums))\r\n","votes":null},{"text":"\r\n    radix_list = [[] for i in range(10)]\r\n    for num in nums:\r\n        radix_list[int(num \/ 10)].append(num)\r\n    nums = [i for sublist in radix_list for i in sublist]\r\n    return nums\r\n\r\n\r\n# Tests\r","votes":null},{"text":"\r\n\r\n    # Create a dictionary to store the radix values of each element\r\n    radix = {}\r\n    for num in nums:\r\n        radix.setdefault(num \/\/ 10, []).append(num % 10)\r\n\r\n    # Sort the elements of the dictionary in ascending order in the range of 0 to 9\r\n    # The code below is equivalent to:\r\n    # radix = {i: [j] for i in range(10) for j in radix.get(i, [])}\r\n    for i in range(10):\r\n        radix[i].sort()\r\n\r\n    # Merge the elements of the dictionary into a result list\r\n    result = []\r\n    for i in range(10):\r\n        result.extend(radix[i])\r\n\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n\r\n    doctest.testmod(verbose=True)\r\n","votes":null},{"text":"\r\n\r\n    # Get the max number from the list\r\n    max_num = max(nums)\r\n\r\n    # Create an array to hold each digit and the count of each digit\r\n    digit_count = [0 for _ in range(10)]\r\n    for num in nums:\r\n        digit_count[(num \/\/ max_num) % 10] += 1\r\n\r\n    # Create an array to hold the sorted numbers\r\n    output = [0 for _ in range(len(nums))]\r\n\r\n    # Create a loop to iterate through each digit\r\n    for digit in range(1, 10):\r\n        # Create a counter to track the current index\r\n        index = 0\r\n\r\n        # Create a loop to iterate through each digit count\r\n        while digit_count[digit] > 0:\r\n            # Add the number to the output array\r\n            output[index] = digit * max_num + digit_count[digit] - 1\r\n\r\n            # Decrement the digit count\r\n            digit_count[digit] -= 1\r\n\r\n            # Increment the index\r\n            index += 1\r\n\r\n    # Return the output array\r\n    return output\r\n\r\n\r\nprint(radix_sort([3, 5, 2, 1, 4, 6, 7, 8, 9, 0]))\r\n# [0, 3, 2, 1, 4, 6, 7, 8, 9, 5]\r\n```\r\n\r\n<br>\r\n\r\n# \uc774\uc9c4 \ud0d0\uc0c9\r\n\r\n- \ubc30\uc5f4\uc758 \ud2b9\uc815 \uc6d0\uc18c\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \uac80\uc0c9\ud558\ub294 \uc54c\uace0\ub9ac\uc998\r\n- \uc774\uc9c4 \ud0d0\uc0c9\uc740 \ubc30\uc5f4\uc758 \uc911\uac04\uc5d0 \uc788\ub294 \uc6d0\uc18c\ub97c \ucc3e\uc544\uac00\uba74\uc11c \uac80\uc0c9\ud558\ub294 \uc54c\uace0\ub9ac\uc998\r\n- \ubc30\uc5f4\uc744 \ud0d0\uc0c9\ud560 \ub54c, \ubc30\uc5f4\uc758 \ub05d\uc5d0\uc11c\ubd80\ud130 \uc2dc\uc791\ud574\uc11c \uc911\uac04\uc5d0 \uc788\ub294 \uc6d0\uc18c\ub97c \ucc3e\uc544\uac00\uba74\uc11c \uac80\uc0c9\ud558\ub294 \uc54c\uace0\ub9ac\uc998\r\n- \ubc30\uc5f4\uc744 \ud0d0\uc0c9\ud560 \ub54c, \ubc30\uc5f4\uc758 \ub05d\uc5d0\uc11c\ubd80\ud130 \uc2dc\uc791\ud574\uc11c \uc911\uac04\uc5d0 \uc788\ub294 \uc6d0\uc18c\ub97c \ucc3e\uc544\uac00\uba74\uc11c \uac80\uc0c9\ud558\ub294 \uc54c\uace0\ub9ac\uc998\r\n- \ubc30\uc5f4\uc744 \ud0d0\uc0c9\ud560 \ub54c, \ubc30\uc5f4\uc758 \ub05d\uc5d0\uc11c\ubd80\ud130 \uc2dc\uc791\ud574\uc11c \uc911\uac04\uc5d0 \uc788\ub294 \uc6d0\uc18c\ub97c \ucc3e\uc544\uac00\uba74","votes":null},{"text":"\r\n    # TODO: Implement this function\r\n    # Hint: see the comments in the code below.\r\n\r\n    # Create a hash table of size 10, each key is the digit of the digit in the array\r\n    # and each value is a list of elements with the same digit\r\n    digit_to_array = {}\r\n    for i in range(10):\r\n        digit_to_array[i] = []\r\n    for num in nums:\r\n        digit_to_array[num \/\/ 10].append(num)\r\n    # Use a list to represent the output\r\n    output = []\r\n    # Use the digit to array to find the index of the digit in the output\r\n    # and add the corresponding element to the output\r\n    for i in range(10):\r\n        output += digit_to_array[i]\r\n    return output\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [5, 9, 3, 2, 8, 1, 7, 6, 4, 0]\r\n    assert radix_sort(nums) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n","votes":null},{"text":"\r\n    n = len(nums)\r\n    if n == 1:\r\n        return nums\r\n\r\n    k = max(nums)\r\n    if k > 0:\r\n        for i in range(1, 10):\r\n            count = [0] * 10\r\n            for num in nums:\r\n                digit = num \/\/ (10 ** (i - 1)) % 10\r\n                count[digit] += 1\r\n            j = 0\r\n            for i in range(1, 10):\r\n                while count[i] > 0:\r\n                    nums[j] = num \/\/ (10 ** (i - 1)) % 10\r\n                    count[i] -= 1\r\n                    j += 1\r\n\r\n        return nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_digit = 0\r\n    for num in nums:\r\n        max_digit = max(max_digit, len(str(num)))\r\n\r\n    digits = [0] * (max_digit + 1)\r\n\r\n    for num in nums:\r\n        digits[len(str(num))] += 1\r\n\r\n    for i in range(1, max_digit + 1):\r\n        for j in range(digits[i]):\r\n            nums[i * digits[i] + j] = nums[j]\r\n            digits[i] -= 1\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [3, 30, 34, 5, 9]\r\n    print(nums)\r\n    radix_sort(nums)\r\n    print(nums)\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n   ","votes":null},{"text":"\r\n    # 1. Find the maximum number to know the number of digits.\r\n    max_num = max(nums)\r\n    max_num_size = len(str(max_num))\r\n\r\n    # 2. Create a list of buckets for each digit.\r\n    buckets = [[] for _ in range(10)]\r\n\r\n    # 3. Distribute the elements in the given list.\r\n    for num in nums:\r\n        bucket_index = int(num \/\/ (max_num \/\/ max_num_size))\r\n        buckets[bucket_index].append(num)\r\n\r\n    # 4. Concatenate the elements from each bucket.\r\n    sorted_list = []\r\n    for bucket in buckets:\r\n        sorted_list.extend(bucket)\r\n\r\n    return sorted_list\r\n","votes":null},{"text":"\r\n    pass\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(radix_sort([2, 3, 5, 1, 4, 6, 7]))\r\n","votes":null},{"text":"\r\n    max_val = max(nums)\r\n    digits = len(str(max_val))\r\n    buckets = [[] for i in range(10)]\r\n    for num in nums:\r\n        buckets[num \/\/ (max_val \/\/ digits) % 10].append(num)\r\n    # Merge all buckets into one sorted list.\r\n    return [item for bucket in buckets for item in bucket]\r\n\r\n\r","votes":null},{"text":"\r\n    # Create a dict of counts to store the frequency of each digit in the list\r\n    counts = [0] * len(str(max(nums)))\r\n    for num in nums:\r\n        counts[len(str(num)) - 1] += 1\r\n\r\n    # Create a new list with the index of the minimum digit\r\n    index = [0] * len(nums)\r\n    for i in range(len(nums)):\r\n        index[counts[i] - 1] = i\r\n\r\n    # Rearrange the numbers in ascending order\r\n    for i in range(len(nums)):\r\n        nums[i] = nums[index[i]]\r\n\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"\r\n    This is the test function.\r\n    If you are reading this, you are probably looking for\r\n    the code to run. You are not expected to understand how the code works.\r\n    \"\"\"\r\n    # Test 1:\r\n    nums = [1, 3, 2, 5, 4]\r\n    print(nums)\r\n    radix_sort(nums)\r\n    print(nums)\r\n\r\n    # Test 2:\r\n    nums = [13, 5, 2, 100, 400, 8, 25, 15]\r\n    print(nums)\r\n    radix_sort(nums)\r\n    print(nums)\r\n\r\n    # Test 3:\r\n    nums = [1000000000, 1000000000, 1000000000, 1000000000,\r\n            1000000000, 1, 1000000000, 1000000000]\r\n    print(nums)\r\n    radix_sort(nums)\r\n    print(nums)\r\n","votes":null},{"text":"\r\n    if len(nums) <= 1:\r\n        return nums\r\n    max_digit = max_digit(nums)\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        buckets[num \/\/ (max_digit + 1)].append(num)\r\n    ans = []\r\n    for bucket in buckets:\r\n        ans += bucket\r\n    return ans\r\n\r\n\r","votes":null},{"text":"\r\n    if not nums:\r\n        return []\r\n    max_num = max(nums)\r\n    max_digit = int(math.log10(max_num)) + 1\r\n    buckets = [[] for i in range(10 ** max_digit)]\r\n    for num in nums:\r\n        buckets[num \/\/ (10 ** (max_digit - 1)) % 10].append(num)\r\n    result = []\r\n    for num_list in buckets:\r\n        result.extend(num_list)\r\n    return result\r\n\r\n\r\nnums = [170, 45, 75, 90, 802, 24, 2]\r\nprint(radix_sort(nums))\r\n\r\n# 3.2 \u5feb\u901f\u6392\u5e8f\r\nimport time\r\nimport math\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums) <= 1:\r\n        return nums\r\n    max_value = max(nums)\r\n    digits = [0] * (max_value + 1)\r\n    for i in nums:\r\n        digits[i] += 1\r\n    # print(digits)\r\n    # print(digits[0:10])\r\n    for i in range(1, len(digits)):\r\n        digits[i] += digits[i-1]\r\n    # print(digits)\r\n    # print(digits[0:10])\r\n    result = [0] * len(nums)\r\n    for i in range(len(nums) - 1, -1, -1):\r\n        result[digits[nums[i]]-1] = nums[i]\r\n        digits[nums[i]] -= 1\r\n    return result\r\n```\r\n\r\n## 1.2.2 \u6876\u6392\u5e8f\r\n* \u5b9e\u73b0\u601d\u60f3\uff1a\r\n  * \u9996\u5148\u5bf9\u5f85\u6392\u5e8f\u7684\u6570\u5217\u8fdb\u884c\u5206\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u5185\u7684\u6570\u503c\u8303\u56f4\u662f\u76f8\u7b49\u7684\u3002\r\n  * \u5bf9\u6bcf\u7ec4\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u3002\r\n  * \u5f85\u6240\u6709\u7ec4\u4e2d\u7684\u6570\u636e\u6392\u597d\u5e8f\u540e\uff0c\u5c06\u6bcf\u4e2a\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u6570\u5217\u653e\u5230\u65b0\u7684\u6570\u7ec4\u4e2d\u3002\r\n  * \u5bf9\u4e0a\u8ff0\u8fc7\u7a0b\u91cd\u590d\uff0c\u76f4\u5230\u6240\u6709\u6570\u5217\u6392\u5e8f\u5b8c\u6bd5\u3002\r\n* \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\r\n  * \u6700\u597d\uff1aO(n)\r\n  * \u6700\u574f\uff1aO(n)\r\n  * \u5e73\u5747\uff1aO(n)\r\n\r\n* \u4ee3\u7801\uff1a\r\n```python\r","votes":null},{"text":"\r\n    # radix_sort(nums)\r\n    # return nums\r\n    nums_length = len(nums)\r\n    if nums_length <= 1:\r\n        return nums\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        buckets[num \/\/ 10].append(num)\r\n    result = []\r\n    for bucket in buckets:\r\n        result += bucket\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [5, 3, 2, 4, 1]\r\n    print(radix_sort(nums))\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    arr = [0]*10\r\n    for i in range(len(nums)):\r\n        arr[int(nums[i])]+=1\r\n    res = []\r\n    for i in range(1,10):\r\n        for j in range(arr[i]):\r\n            res.append(str(i))\r\n    return res\r\n\r","votes":null},{"text":"\r\n    pass\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66]\r\n    radix_sort(nums)\r\n    print(nums)\r\n","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    digits = len(str(max_num))\r\n    buckets = [[] for _ in range(10 ** digits)]\r\n    for num in nums:\r\n        buckets[num \/\/ (10 ** (digits - 1)) % 10].append(num)\r\n    return sum([b for b in buckets], [])\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO: write your code here\r\n    # 1. \u627e\u51fa\u6700\u5927\u7684\u6570\u4f4d\uff0c\u4ee5\u6b64\u4e3a\u57fa\u6570\r\n    max_digit = len(str(max(nums)))\r\n    radix = [0] * max_digit\r\n    for num in nums:\r\n        # 2. \u5bf9\u6bcf\u4e2a\u6570\u8fdb\u884c\u8ba1\u6570\r\n        for d in str(num):\r\n            radix[int(d)] += 1\r\n    # 3. \u5bf9\u8ba1\u6570\u7ed3\u679c\u8fdb\u884c\u5f52\u5e76\r\n    k = 0\r\n    for d in range(max_digit):\r\n        while radix[d] > 0:\r\n            nums[k] = d * 10 ** d + k\r\n            k += 1\r\n            radix[d] -= 1\r\n    return nums\r\n\r\nif __name__ == '__main__':\r\n    num_list = [49, 38, 65, 97, 76, 19, 87, 53, 27, 31, 44, 55, 20]\r\n    print(radix_sort(num_list))\r\n","votes":null},{"text":"\r\n    # YOUR CODE HERE\r\n    return nums\r\n","votes":null},{"text":"\r\n    digits = len(str(max(nums)))\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        buckets[int(str(num)[-digits])].append(num)\r\n    return [num for bucket in buckets for num in bucket]\r\n\r\n# Test\r\nnums = [4,3,1,2]\r\nprint(radix_sort(nums))\r\n","votes":null},{"text":"\r\n\r\n    # radix sort\r\n    for exp in range(1, len(str(max(nums)))+1):\r\n        bucket = [[] for _ in range(10)]\r\n        for num in nums:\r\n            bucket[int(num\/exp) % 10].append(num)\r\n        nums = [item for sublist in bucket for item in sublist]\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    key_list = [0] * 10\r\n    for num in nums:\r\n        key_list[int(num \/ 1000000) % 10] += 1\r\n    radix_sort_helper(nums, key_list)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO\r\n    if len(nums) > 1:\r\n        for digit in range(len(str(max(nums)))))[::-1]:\r\n            if nums.count(digit) > 0:\r\n                nums = nums[:nums.index(digit)] + nums[nums.index(digit)+1:]\r\n    return nums\r\n\r","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    max_num_len = len(str(max_num))\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        buckets[num\/\/(max_num\/\/10)] += [num]\r\n    return [sum(b) for b in buckets]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n    print(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))","votes":null},{"text":"\r\n    # get max value\r\n    max_val = max(nums)\r\n    # create buckets\r\n    buckets = [[] for _ in range(10)]\r\n    # put elements in buckets\r\n    for num in nums:\r\n        buckets[num].append(num)\r\n    # sort buckets\r\n    for bucket in buckets:\r\n        bucket.sort()\r\n    # merge buckets\r\n    nums = []\r\n    for bucket in buckets:\r\n        nums += bucket\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    if nums == []:\r\n        return []\r\n    max_digit = max(map(lambda x: len(str(x)), nums))\r\n    radix = [[] for _ in range(10)]\r\n    for num in nums:\r\n        radix[num \/\/ max_digit].append(num)\r\n    return sum(map(lambda x: sorted(x), radix), [])\r\n\r\n\r\nclass Solution:\r\n   ","votes":null},{"text":"\r\n    # write your code here\r\n    if not nums:\r\n        return nums\r\n\r\n    min_value = min(nums)\r\n    max_value = max(nums)\r\n    max_digit = len(str(max_value))\r\n\r\n    buckets = [[] for _ in range(max_digit)]\r\n    for num in nums:\r\n        buckets[len(str(num)) - 1].append(num)\r\n\r\n    sorted_nums = []\r\n    for bucket in buckets:\r\n        sorted_nums += bucket\r\n\r\n    return sorted_nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [2, 1, 3, 4, 8, 9, 10, 12, 13, 16, 17, 18, 42, 19, 19, 34, 19, 10, 3, 19]\r\n    print(radix_sort(nums))\r\n","votes":null},{"text":"\r\n    pass\r\n\r","votes":null}],"time":{"count":8.0,"avg":169747.161,"std":37386.2765328239,"cov":0.2202468443}}
{"id":517,"question":"def largest_pos(list1):\r\n    \"\"\"Write a python function to find the largest postive number from the given list.\"\"\"","answers":[{"text":"\r\n    max_val = list1[0]\r\n    for i in list1:\r\n        if i > max_val:\r\n            max_val = i\r\n    return max_val\r\n\r\n\r","votes":68660.728},{"text":"\r\n    return max(list1, key=int)\r\n\r\n\r","votes":72823.46},{"text":"\r\n\r\n    largest = 0\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r","votes":77743.38},{"text":"\r\n\r\n    # Write your code here\r\n    list2 = [x for x in list1 if x>0]\r\n    return max(list2)\r\n\r\n\r","votes":78061.14},{"text":"\r\n\r\n    return max(list1)\r\n\r\n\r","votes":79597.408},{"text":"\r\n    largest_number = 0\r\n    for element in list1:\r\n        if element > 0:\r\n            if element > largest_number:\r\n                largest_number = element\r\n    return largest_number\r\n\r\n\r","votes":79953.288},{"text":"\r\n\r\n    largest = 0\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\n\r","votes":84290.236},{"text":"\r\n    if list1 == []:\r\n        return 0\r\n    else:\r\n        return max(list1)\r\n\r","votes":84877.324},{"text":"\r\n    result = 0\r\n    for i in list1:\r\n        if i>result:\r\n            result = i\r\n    return result\r\n\r\n\r","votes":85967.92},{"text":"\r\n    max=list1[0]\r\n    for i in list1:\r\n        if i>0 and i>max:\r\n            max=i\r\n    return max\r\n\r\n\r","votes":90223.38},{"text":"\r\n\r\n    # Write your code here.\r\n    return max(filter(lambda x: x>=0, list1))\r\n\r","votes":90471.168},{"text":"\r\n    largest_pos = 0\r\n    for i in list1:\r\n        if i > largest_pos:\r\n            largest_pos = i\r\n    return largest_pos\r\n\r\n\r","votes":92618.736},{"text":"\r\n    max_value = 0\r\n    for value in list1:\r\n        if value > 0 and value > max_value:\r\n            max_value = value\r\n    return max_value\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [1, 2, -3, 4, -5, 6]\r\n    pos_val = largest_pos(list1)\r\n    print(\"The largest positive number from the given list is: \", pos_val)\r\n","votes":93768.08},{"text":"\r\n    pos_max = list1[0]\r\n    for i in list1:\r\n        if i >= 0:\r\n            if i > pos_max:\r\n                pos_max = i\r\n    return pos_max\r\n\r","votes":95578.356},{"text":"\r\n    return max(list1, key=int)\r\n\r","votes":96549.396},{"text":"\r\n    list1.sort(reverse=True)\r\n    return list1[0]\r\n\r","votes":97245.952},{"text":"\r\n    return max(list1)\r\n\r","votes":98206.116},{"text":"\r\n    max_num = max(list1)\r\n    return max_num\r\n\r\n\r\n# Write a python function to find the largest postive number from the given list.\r","votes":98357.632},{"text":"\r\n    largest = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\n\r","votes":98559.312},{"text":"\r\n    max = list1[0]\r\n    for i in list1:\r\n        if i > max:\r\n            max = i\r\n    return max\r\n\r\nprint(largest_pos([2,4,3,1,5,6,8]))\r\n","votes":101180.772},{"text":"\r\n    max_value = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > max_value:\r\n            max_value = list1[i]\r\n    return max_value\r\n\r\n\r","votes":102246.168},{"text":"\r\n    return max(list1)\r\n\r\n\r","votes":102615.08},{"text":"\r\n    max = list1[0]\r\n    for i in list1:\r\n        if i > max:\r\n            max = i\r\n    return max\r\nprint(largest_pos([1, 2, -3, 4, 5, 6, 7]))\r\n# -\r\n\r\n# # Python Functions 2\r\n#\r\n# ## Function Parameters\r\n#\r\n# - The function receives a list of parameters as arguments to the function.\r\n#\r\n# - The function must have at least one parameter.\r\n#\r\n# - The function can have any number of parameters.\r\n#\r\n# - The parameters can have default values.\r\n#\r\n# - The parameters can be typed or untyped.\r\n#\r\n# - The parameters can be positional or keyword.\r\n#\r\n# - The parameters can be passed by value or by reference.\r\n#\r\n# ## Function Return Values\r\n#\r\n# - A function can return a value.\r\n#\r\n# - The return value can be typed or untyped.\r\n#\r\n# - The return value can be None.\r\n#\r\n# - The return value can be passed by value or by reference.\r\n#\r\n# ## Local and Global Variables\r\n#\r\n# - Python treats all the variables declared in a function as local variables.\r\n#\r\n# - Python treats all the variables declared outside a function as global variables.\r\n#\r\n# ## Function Scope\r\n#\r\n# - Variables declared inside a function are only visible inside the function.\r\n#\r\n# - Variables declared outside a function are visible outside the function.\r\n#\r\n# - Local variables are destroyed when the function exits.\r\n#\r\n# - Global variables are destroyed when the program exits.\r\n#\r\n# ## Global vs Local Variables\r\n#\r\n# - Global variables are visible outside the function.\r\n#\r\n# - Global variables are destroyed when the program exits.\r\n#\r\n# - Local variables are destroyed when the function exits.\r\n#\r\n# - Local variables are destroyed when the program exits.\r\n#\r\n# ## Built-in Functions\r\n#","votes":102829.888},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\n\r","votes":102891.408},{"text":"\r\n    largest = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\nif __name__ == '__main__':\r\n    print(largest_pos([-1, -5, 4, 3, 1, 6, 2]))\r\n","votes":103538.104},{"text":"\r\n    max_value = max(list1)\r\n    return max_value\r\n\r\n\r","votes":104931.204},{"text":"\r\n\r\n    max_pos=list1[0]\r\n    for i in range(len(list1)):\r\n        if max_pos<list1[i]:\r\n            max_pos=list1[i]\r\n    return max_pos\r\n\r","votes":106633.988},{"text":"\r\n    result = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > result:\r\n            result = list1[i]\r\n    return result\r\n\r\nprint(largest_pos([-2, -5, 0, 2, 3, 4, 9, 10, -10, 11]))","votes":106691.42},{"text":"\r\n    max_val = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            max_val = list1[i]\r\n\r\n    return max_val\r\n\r","votes":106712.032},{"text":"\r\n    return max(list1, key=int)\r\n\r\n# for test\r\nprint(largest_pos([1,2,3,4,5]))\r\nprint(largest_pos([1,2,-3,4,-5]))","votes":107647.34},{"text":"\r\n    return max(list(filter(lambda x: x > 0, list1)))\r\n\r\n\r","votes":109576.592},{"text":"\r\n    max_number = list1[0]\r\n    for i in list1:\r\n        if i > max_number:\r\n            max_number = i\r\n    return max_number\r\n\r","votes":112959.852},{"text":"\r\n    largest = list1[0]\r\n    for i in range(1,len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    list1 = [3,-2,6,9,7]\r\n    print(largest_pos(list1))","votes":114495.72},{"text":"\r\n    if len(list1)==0:\r\n        return -1\r\n    max_ = list1[0]\r\n    for i in list1:\r\n        if i>0:\r\n            max_ = i\r\n    return max_\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(largest_pos([]))\r\n    print(largest_pos([1, 2, -3, -1]))\r\n    print(largest_pos([1, 2, 3, 4, 5]))","votes":115136.084},{"text":"\r\n    largest_pos = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest_pos:\r\n            largest_pos = list1[i]\r\n    return largest_pos\r\n\r","votes":117663.912},{"text":"\r\n    largest_num = list1[0]\r\n    for i in list1:\r\n        if i > largest_num:\r\n            largest_num = i\r\n    return largest_num\r\n\r\n\r","votes":118311.82},{"text":"\r\n    largest = list1[0]\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\n\r","votes":122150.396},{"text":"\r\n    max = list1[0]\r\n    for i in list1:\r\n        if i > max:\r\n            max = i\r\n    return max\r\n\r\nprint(largest_pos([-1, -2, -3, -4, -5]))\r\n\r\n\r\n# -\r\n\r\n# #### 3.3.3.1.  \u6700\u5927\u548c\u6700\u5c0f\u503c\r\n\r\n# +\r","votes":123098.04},{"text":"\r\n    return max(list1, key=int)\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [1, 2, 3, 4, 5, -1, 6, 7, 8, 9, 10, -21]\r\n    print(largest_pos(list1))\r\n","votes":123107.676},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            list2.append(list1[i])\r\n    if len(list2) == 0:\r\n        print(\"No positive numbers in the list.\")\r\n    return(max(list2))\r\n\r\n#Write a python function to find the largest postive number from the given list.\r","votes":124600.092},{"text":"\r\n    largest = 0\r\n    for i in range(0,len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9]\r\nprint(largest_pos(list1))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9]\r\nprint(largest_pos(list1))","votes":124885.136},{"text":"\r\n    return max(list1, key=int)\r\n\r\n# Driver Code\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # 10\r\nprint(largest_pos([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # 10\r\nprint(largest_pos([10])) # 10\r\nprint(largest_pos([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # 10\r\n","votes":125155.796},{"text":"\r\n    pos_num = 0\r\n    for i in list1:\r\n        if i > pos_num:\r\n            pos_num = i\r\n    return pos_num\r\n\r\n\r","votes":127989.792},{"text":"\r\n    largest_num = 0\r\n    for n in list1:\r\n        if n > largest_num:\r\n            largest_num = n\r\n    return largest_num\r\n\r","votes":129203.64},{"text":"\r\n    largest = 0\r\n    for element in list1:\r\n        if element > largest:\r\n            largest = element\r\n    return largest\r\n\r\n\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(largest_pos([1, 2, 3, -4, 5, 6, 7, 8, 9, 10]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]))\r\n","votes":129637.196},{"text":"\r\n    if len(list1) == 0:\r\n        return -1\r\n    max_value = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > max_value:\r\n            max_value = list1[i]\r\n    return max_value\r\n\r","votes":130470.104},{"text":"\r\n    max_ = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > max_:\r\n            max_ = list1[i]\r\n    return max_\r\n\r\n\r\nprint(largest_pos([1, 2, 3]))\r\n","votes":130663.376},{"text":"\r\n    output = 0\r\n    for i in list1:\r\n        if i > output:\r\n            output = i\r\n    return output\r\n\r\nprint(largest_pos([5, 1, 2, 3, 4, 5, 6, 7]))\r\n\r\n\"\"\"\r\nQuestion 3:\r\nWrite a python function that calculates the area of a triangle given the length of the three sides.\r\n\"\"\"\r\n\r\n\r","votes":132954.984},{"text":"\r\n    return max(list1, key=int)\r\n\r\n\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n","votes":133086.592},{"text":"\r\n    largest = list1[0]\r\n    for i in range(0, len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\n\r","votes":133300.096},{"text":"\r\n    largest_number = 0\r\n    for num in list1:\r\n        if num > largest_number:\r\n            largest_number = num\r\n    return largest_number\r\n\r\nprint(largest_pos([1, 2, 3, -1, -10, -20]))\r\n","votes":133796.704},{"text":"\r\n    max_num = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > max_num:\r\n            max_num = list1[i]\r\n    return max_num\r\n\r\nprint(largest_pos([1, 2, 3, 4, 5, 6]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6]))\r\nprint(largest_pos([-9, -8, -7, -6, -5, -4, -3, -2, -1]))\r\nprint(largest_pos([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(largest_pos([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))","votes":135393.592},{"text":"\r\n    return max(list1, key=int)\r\n\r\nif __name__ == '__main__':\r\n    print(largest_pos([1,2,34,5,6,78,-9,0])) # 78\r\n    print(largest_pos([-12, -9, -7, -5, -3, -1])) # -1\r\n","votes":136096.612},{"text":"\r\n    max_pos = 0\r\n    for index in range(len(list1)):\r\n        if list1[index] > 0:\r\n            max_pos = list1[index]\r\n    return max_pos\r\n\r\n\r","votes":136381.744},{"text":"\r\n    return max(list1, key=lambda element: element if element > 0 else 0)\r\n\r\n\r","votes":137175.112},{"text":"\r\n    list1 = [int(i) for i in list1]\r\n    list1.sort()\r\n    return list1[-1]\r\n\r\n\r","votes":140081.14},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    list1 = [4, 5, 1, 2, 10, 3]\r\n    print(largest_pos(list1))\r\n","votes":142553.992},{"text":"\r\n    return max(filter(lambda x: x > 0, list1))\r\n\r\n\r\nprint(largest_pos([1, 2, 3, -4, 5]))\r\n# Output: 5\r\n\r\nprint(largest_pos([1, 2, 3, -4, -5, 2, 3, -4, -5, 2, 3, -4, -5]))\r\n# Output: 5\r\n\r\n\r","votes":147749.58},{"text":"\r\n    largest_pos = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest_pos:\r\n            largest_pos = list1[i]\r\n    return largest_pos\r\n\r\n\r\nprint(largest_pos([10, 20, 30, 40, -10]))\r\nprint(largest_pos([10, 20, 30, 40, 50, 60]))\r\n","votes":147807.304},{"text":"\r\n    largest = -1\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(largest_pos([1, 12, 123, 24, -1, 0]))\r\n","votes":148120.992},{"text":"\r\n    largest = list1[0]\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\n\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5]))\r\n","votes":148479.68},{"text":"\r\n    # Initialize largest to -999999\r\n    largest = -999999\r\n    # Iterate through the list\r\n    for item in list1:\r\n        # If the item is a positive number and is greater than largest\r\n        if item > 0 and item > largest:\r\n            # Update largest\r\n            largest = item\r\n    # Return largest\r\n    return largest\r\n\r\n# Driver Code\r\nprint('Largest Postive number is :',largest_pos([1,2,3,4,5,6,7,8,9]))\r\nprint('Largest Postive number is :',largest_pos([-1,-2,-3,-4,-5,-6,-7,-8,-9]))\r\nprint('Largest Postive number is :',largest_pos([0,0,0,0,0,0,0,0,0]))\r\nprint('Largest Postive number is :',largest_pos([-10,-11,-12,-13,-14,-15,-16,-17,-18]))\r\nprint('Largest Postive number is :',largest_pos([10,11,12,13,14,15,16,17,18]))\r\nprint('Largest Postive number is :',largest_pos([18,17,16,15,14,13,12,11,10]))","votes":151886.352},{"text":"\r\n    max_n = 0\r\n    for n in list1:\r\n        if n > 0:\r\n            max_n = n\r\n    return max_n\r\n\r","votes":156627.456},{"text":"\r\n    postive_list = [i for i in list1 if i > 0]\r\n    return max(postive_list)\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n\r\n    # List of numbers\r\n    list1 = [4, 5, 6, -7, -12, 0, 1, 10, -20]\r\n\r\n    # Print the largest postive number from the list\r\n    print(largest_pos(list1))\r\n","votes":174491.228},{"text":"\r\n    if not list1:\r\n        return 0\r\n    largest_num = list1[0]\r\n    for num in list1:\r\n        if num > largest_num:\r\n            largest_num = num\r\n    return largest_num\r\n\r","votes":176609.236},{"text":"\r\n    return max(list1, key=int)\r\n\r\nprint(largest_pos([1, 2, 3, -4, 5]))\r\nprint(largest_pos([1, 2, -3, 4, 5]))\r\nprint(largest_pos([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, -10]))\r\n","votes":189720.012},{"text":"\r\n    \r\n    \r\n    # The maximum element\r\n    max = 0\r\n    \r\n    # Traverse for all elements\r\n    for i in list1:\r\n        if(i>max):\r\n            max = i\r\n            \r\n    return max\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    # List\r\n    list1 = [1,2,3,4,5,6]\r\n    \r\n    # Function Call\r\n    print(largest_pos(list1))","votes":197125.9},{"text":"\r\n\r\n    max = list1[0]\r\n    for i in range(1,len(list1)):\r\n        if(list1[i]>max):\r\n            max = list1[i]\r\n\r\n    return max\r\n\r\nprint(largest_pos([3, 1, 2, -2, -1, 100, 99, 1000]))\r\nprint(largest_pos([10, 1, 2, -2, -1, 100, 99, 1000]))\r\nprint(largest_pos([-3, 1, 2, -2, -1, -100, 99, 1000]))\r\nprint(largest_pos([-3, 1, 2, -2, -1, -100, 99, 1000, -1000]))\r\nprint(largest_pos([0, 1, 2, -2, -1, -100, 99, 1000, -1000]))\r\n","votes":311620.336},{"text":"\r\n    for el in list1:\r\n        if el > 0:\r\n            return el\r\n    return 0\r\n\r","votes":null},{"text":"\r\n    max_value = 0\r\n    max_index = -1\r\n    for i in range(len(list1)):\r\n        if list1[i] > max_value:\r\n            max_value = list1[i]\r\n            max_index = i\r\n    return max_index\r\n\r\n\r\nprint(largest_pos(my_list))\r\n","votes":null},{"text":"\r\n    max_num = max(list1)\r\n    return max_num\r\nprint(largest_pos([-1,2,-3,4,5]))\r\nprint(largest_pos([1,2,3,4,5,6]))\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9,100]))\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9,100,101]))\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9,100,100]))\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9,100,100,101]))\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9,100,100,101,102]))\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9,100,100,101,102,103]))\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9,100,100,101,102,103,104]))\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9,100,100,101,102,103,104,105]))\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9,100,100,101,102,103,104,105,106]))\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9,100,100,101,102,103,","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            return list1[i]\r\n    return 0\r\n\r\n\"\"\"\r\nInput: [10,10,20,1,5,15,10]\r\nOutput: 15\r\n\"\"\"\r\nprint(largest_pos([10,10,20,1,5,15,10]))\r\n\r\n\"\"\"\r\nInput: [10,-10]\r\nOutput: 10\r\n\"\"\"\r\nprint(largest_pos([10,-10]))\r\n\r\n\"\"\"\r\nInput: [10,-10,0]\r\nOutput: 10\r\n\"\"\"\r\nprint(largest_pos([10,-10,0]))\r\n\r\n\"\"\"\r\nInput: [-10,-10,10]\r\nOutput: 10\r\n\"\"\"\r\nprint(largest_pos([-10,-10,10]))\r\n\r\n\"\"\"\r\nInput: [-10,10]\r\nOutput: 10\r\n\"\"\"\r\nprint(largest_pos([-10,10]))\r\n\r\n\"\"\"\r\nInput: [0]\r\nOutput: 0\r\n\"\"\"\r\nprint(largest_pos([0]))\r\n\r\n\"\"\"\r\nInput: [0,10]\r\nOutput: 10\r\n\"\"\"\r\nprint(largest_pos([0,10]))\r\n\r\n\"\"\"\r\nInput: [-10,0,10]\r\nOutput: 10\r\n\"\"\"\r\nprint(largest_pos([-10,0,10]))\r\n\r\n\"\"\"\r\nInput: [0,-10,10]\r\nOutput: 10\r\n\"\"\"\r\nprint(largest_pos([0,-10,10]))\r\n\r\n\"\"\"\r\nInput: [-10,10,0]\r\nOutput: 10\r\n\"\"\"\r\nprint(largest_pos([-10,10,0]))\r\n\r\n\"\"\"\r\nInput: [-10,0,0]\r\nOutput: 0\r\n\"\"\"\r\nprint(largest_pos([-10,","votes":null},{"text":"\r\n    max_pos = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            max_pos = i+1\r\n    return max_pos\r\n\r\n\r","votes":null},{"text":"\r\n    return max(list1, key=int)\r\n\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7, -1]))\r\n# -\r\n\r\n# # **1.1.2. Nested List Comprehensions**\r\n#\r\n# ### **1.1.2.1. Using nested list comprehensions to create a list of lists**\r\n#\r\n# - The nested list comprehension is a list comprehension where the elements of the list are lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n# - The nested list comprehension is a nested structure where the elements of the list are nested lists.\r\n\r\n# +\r\nlist_of_list = [[1, 2, 3], [4,","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            return list1[i]\r\n\r","votes":null},{"text":"\r\n    pos=0\r\n    for i in range(len(list1)):\r\n        if list1[i]>0:\r\n            pos=i\r\n            break\r\n    return pos\r\n\r\nprint(largest_pos([1,-2,3,4,5]))\r\nprint(largest_pos([0,-1,2,3,4]))\r\n","votes":null},{"text":"\r\n    largest = float(\"-inf\")\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\nprint(largest_pos([1,2,3,4,5,6,7]))\r\nprint(largest_pos([1,2,-3,4,-5,6,7]))\r\n```\r\n**Output**\r\n```\r\n7\r\n7\r\n```\n<issue_comment>username_1: @username_0,\r\nThe issue is fixed in the latest version of the repository, please check it out.\n<issue_comment>username_0: @username_1 \r\nI have changed the code to\r\n```\r","votes":null},{"text":"\r\n    list1 = [int(x) for x in list1.split()]\r\n    if len(list1) == 0:\r\n        return None\r\n    max_val = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0 and list1[i] > max_val:\r\n            max_val = list1[i]\r\n    return max_val\r\n\r","votes":null},{"text":"\r\n    for i in list1:\r\n        if i>0:\r\n            return i\r\n    return 0\r\n\r\nprint(\"Largest positive number in a list is: \", largest_pos(list1))\r\n","votes":null},{"text":"\r\n    if len(list1) == 0:\r\n        return\r\n    largest, i = -1, -1\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0 and list1[i] > largest:\r\n            largest = list1[i]\r\n    return i\r\n\r\n\r\nprint(largest_pos([-1, -2, -3, 4, 5]))\r\nprint(largest_pos([1, 4, 5, 6, 7]))\r\nprint(largest_pos([1, 1, 1, 1, 1, 1]))\r\nprint(largest_pos([0, 0, 0, 0, 0]))\r\n","votes":null},{"text":"\r\n\r\n    max = list1[0]\r\n    for i in list1:\r\n        if i > max:\r\n            max = i\r\n    return max\r\n\r\n\r\n# The function should accept an array of integers and should return the largest postive number.\r\n# It should be defined as a function.\r\n\r\n# Tests\r\n# If the function is not defined, it should raise a NameError.\r\n# If the function is defined, it should return an integer.\r\n# If the array is empty, it should return 0.\r\n# If the array contains only negative numbers, it should return 0.\r\n# If the array contains only positive numbers, it should return the largest number.\r\n# If the array contains both negative and positive numbers, it should return the largest number.\r\n# If the function is defined, it should return the largest number in the given array.\r\nprint(largest_pos([1, 2, 3, 4, 5]))\r\nprint(largest_pos([-1, -2, -3, -4, -5]))\r\nprint(largest_pos([-1, 2, 3, 4, 5]))\r\nprint(largest_pos([1, -2, 3, 4, 5]))\r\nprint(largest_pos([1, 2, -3, 4, 5]))\r\nprint(largest_pos([1, 2, 3, -4, 5]))\r\nprint(largest_pos([1, 2, 3, 4, -5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 6]))\r\nprint(largest_pos([1, 2, -3, -4, -5, 6]))\r\nprint(largest_pos([1, 2, 3, -4, -5, 6]))\r\nprint(largest_pos([-1, 2, 3, 4, 5, 6]))\r\nprint(largest_pos([-1, -2, 3, 4, 5, 6]))\r\nprint(largest_pos([-1, -2, -3, 4, 5","votes":null},{"text":"\r\n    max_val = list1[0]\r\n    largest_index = 0\r\n    for i in range(1,len(list1)):\r\n        if list1[i] > max_val:\r\n            max_val = list1[i]\r\n            largest_index = i\r\n    return max_val, largest_index\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [1,2,10,4,5]\r\n    print(largest_pos(list1))\r\n    list2 = [-1,2,10,-4,5]\r\n    print(largest_pos(list2))\r\n    list3 = [1,2,10,4,-5]\r\n    print(largest_pos(list3))\r\n","votes":null},{"text":"\r\n    for i in list1:\r\n        if i > 0:\r\n            return i\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    max_pos = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            max_pos = i\r\n            return max_pos\r\n    return max_pos\r\n\r","votes":null},{"text":"\r\n\r\n    # Initializing the largest value to 0\r\n    largest_value = 0\r\n\r\n    # Iterating the list\r\n    for value in list1:\r\n\r\n        # Checking the value with the largest value\r\n        if value > largest_value:\r\n            largest_value = value\r\n\r\n    # Printing the largest value\r\n    print(largest_value)\r\n\r\n\r\n# Driver Code\r\n# list1 = [1, 2, 3, -4, 5, 6, 7, -8, 9, -10]\r\n# largest_pos(list1)\r\n# list2 = [1, 2, 3, -4, 5, 6, 7, -8, 9, -10]\r\n# largest_pos(list2)\r\nlist3 = [1, 2, 3, -4, 5, 6, 7, -8, 9, -10]\r\nlargest_pos(list3)\r\n# list4 = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\r\n# largest_pos(list4)\r\n","votes":null},{"text":"\r\n    largest_pos_val = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest_pos_val:\r\n            largest_pos_val = list1[i]\r\n    return largest_pos_val\r\n\r\n\r\nprint(largest_pos(list1))\r\nprint(largest_pos(list2))\r\n","votes":null},{"text":"\r\n    largest = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\n\r\nprint(largest_pos(list1))\r\n","votes":null},{"text":"\r\n    result = -1\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            result = i\r\n            break\r\n    return result\r\n\r","votes":null},{"text":"\r\n    list1=list(map(int,list1))\r\n    list1.sort()\r\n    for i in range(len(list1)):\r\n        if list1[i]>0:\r\n            return list1[i]\r\n    return None\r\n\r\n\r","votes":null},{"text":"\r\n    max_val = 0\r\n    for val in list1:\r\n        if val > max_val:\r\n            max_val = val\r\n    return max_val\r\n\r\n\r\nprint(largest_pos([1, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 1, 2, 3, 4, 2, ","votes":null},{"text":"\r\n    return max(list1)\r\n\r\nprint(largest_pos([1, 2, 3, 4, 5]))\r\n```\r\n\r\n### Exercise 5\r\n```python\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            return list1[i]\r\n    return 0\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    list1 = [1, -3, 4, -12, 2, 1, -5, 3, -1]\r\n    print(\"Maximum element is \", largest_pos(list1))\r\n    print(\"Maximum element is \", largest_pos(list1))\r\n    print(\"Maximum element is \", largest_pos(list1))\r\n","votes":null},{"text":"\r\n\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            return list1[i]\r\n    return 0\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            return list1[i]\r\n\r\n    return list1[0]\r\n\r\n\r","votes":null},{"text":"\r\n    for i in list1:\r\n        if i>0:\r\n            return i\r\n    else:\r\n        return 0\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    list2=[]\r\n    for i in list1:\r\n        if i>0:\r\n            list2.append(i)\r\n    return max(list2)\r\n\r\nfor i in range(1,11):\r\n    print(f'{i} -> {largest_pos(list1)}')","votes":null},{"text":"\r\n    if len(list1)==0:\r\n        return 0\r\n    else:\r\n        return max(list1)+1\r\n    return 0\r\nprint(largest_pos([1,2,3,4,5,6,7,8,9]))\r\n\r\n# 2.\r","votes":null}],"time":{"count":68.0,"avg":120612.2688823529,"std":36024.9789727726,"cov":0.2986841994}}
{"id":518,"question":"def sqrt_root(num):\r\n    \"\"\"Write a function to find the square root of a perfect number.\"\"\"","answers":[{"text":"\r\n    sqrt_num = num ** 0.5\r\n    return sqrt_num\r\n\r\n\r","votes":72618.988},{"text":"\r\n    num = num ** 0.5\r\n    return int(num)\r\n\r","votes":76322.892},{"text":"\r\n    sqrt = num ** 0.5\r\n    if sqrt == int(sqrt):\r\n        return int(sqrt)\r\n    else:\r\n        return sqrt\r\n\r","votes":82894.852},{"text":"\r\n    i = 0\r\n    while True:\r\n        i += 1\r\n        if i * i == num:\r\n            return i\r\n\r\n\r","votes":86139.396},{"text":"\r\n    sqrt = num ** 0.5\r\n    if sqrt.is_integer():\r\n        return sqrt\r\n    else:\r\n        return 0\r\n\r\n\r","votes":93691.492},{"text":"\r\n    if num > 0:\r\n        sqrt_num = int(num ** 0.5)\r\n        if sqrt_num * sqrt_num == num:\r\n            return sqrt_num\r\n    return None\r\n\r","votes":94141.2},{"text":"\r\n    if num < 0:\r\n        return -1\r\n    sqrt_num = 0\r\n    while True:\r\n        if sqrt_num ** 2 == num:\r\n            return sqrt_num\r\n        else:\r\n            sqrt_num += 1\r\n\r\n\r","votes":94220.064},{"text":"\r\n    return int(num ** (1 \/ 2))\r\n\r\n\r","votes":97962.028},{"text":"\r\n    if num < 0:\r\n        return None\r\n    elif num == 0:\r\n        return 0\r\n    else:\r\n        return num ** 0.5\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sqrt_root(15))\r\n    print(sqrt_root(20))\r\n    print(sqrt_root(32))\r\n    print(sqrt_root(40))\r\n    print(sqrt_root(49))\r\n    print(sqrt_root(51))\r\n    print(sqrt_root(59))\r\n    print(sqrt_root(625))\r\n","votes":101571.336},{"text":"\r\n    return int(num ** 0.5)\r\n\r\n\r\nprint(\"The square root of 16 is: \", sqrt_root(16))\r\nprint(\"The square root of 17 is: \", sqrt_root(17))\r\nprint(\"The square root of 18 is: \", sqrt_root(18))\r\nprint(\"The square root of 24 is: \", sqrt_root(24))\r\nprint(\"The square root of 25 is: \", sqrt_root(25))\r\nprint(\"The square root of 26 is: \", sqrt_root(26))\r\nprint(\"The square root of 27 is: \", sqrt_root(27))\r\nprint(\"The square root of 28 is: \", sqrt_root(28))\r\nprint(\"The square root of 30 is: \", sqrt_root(30))\r\nprint(\"The square root of 31 is: \", sqrt_root(31))\r\nprint(\"The square root of 32 is: \", sqrt_root(32))\r\n","votes":107319.684},{"text":"\r\n    num_sqrt = 0\r\n    while num_sqrt**2!= num:\r\n        num_sqrt += 1\r\n    return num_sqrt\r\n\r\n\r","votes":117307.592},{"text":"\r\n    return num ** 0.5\r\n\r\n\r","votes":117504.012},{"text":"\r\n    if num < 0:\r\n        return \"The square root of a negative number cannot be calculated.\"\r\n    elif num == 0:\r\n        return \"The square root of zero cannot be calculated.\"\r\n    else:\r\n        square_root = 0  # Initialize the square root to zero\r\n        for i in range(1, num + 1):  # Run a loop for num + 1 times\r\n            square_root += 1  # Add one to the square root counter\r\n            if num \/\/ square_root == square_root:  # If the remainder of the division is zero\r\n                return square_root  # Return the square root of num\r\n\r\n\r","votes":143011.792},{"text":"\r\n    a = 0\r\n    b = num \/\/ 2\r\n    while (a <= b):\r\n        c = (a + b) \/\/ 2\r\n        if c * c == num:\r\n            return c\r\n        elif c * c > num:\r\n            b = c - 1\r\n        else:\r\n            a = c + 1\r\n    return None\r\n\r\n\r","votes":202043.588},{"text":"\r\n    # Base case\r\n    if num == 1:\r\n        return 1\r\n    # Newton's method\r\n    elif num % 2 == 0:\r\n        guess = num \/\/ 2\r\n        return guess * guess\r\n    else:\r\n        guess = (num + 1) \/\/ 2\r\n        while guess ** 2 > num:\r\n            guess = (guess + num \/\/ guess) \/\/ 2\r\n        return guess\r\n\r\n\r","votes":null},{"text":"\r\n    # If num is 1, return 1\r\n    if num == 1:\r\n        return 1\r\n    # If num is 0, return 0\r\n    elif num == 0:\r\n        return 0\r\n    # If num is even, return the floor of the square root of half the number\r\n    elif num % 2 == 0:\r\n        return sqrt_root(num\/2)\r\n    # If num is odd, return the square root of half the number plus 1\r\n    else:\r\n        return sqrt_root((num\/2) + 1)\r\n\r","votes":null},{"text":"\r\n\r\n    if num % 2 == 0:\r\n        num \/= 2\r\n        return num\r\n    else:\r\n        num = num + 1\r\n        while True:\r\n            num = (num + num \/ num) \/ 2\r\n            if num % 2 == 0:\r\n                return num\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    elif num % 2 == 0:\r\n        return 2\r\n    elif num % 3 == 0:\r\n        return 3\r\n    elif num % 4 == 0:\r\n        return 4\r\n    elif num % 5 == 0:\r\n        return 5\r\n    elif num % 6 == 0:\r\n        return 6\r\n    elif num % 7 == 0:\r\n        return 7\r\n    elif num % 8 == 0:\r\n        return 8\r\n    elif num % 9 == 0:\r\n        return 9\r\n    elif num % 10 == 0:\r\n        return 10\r\n    elif num % 11 == 0:\r\n        return 11\r\n    elif num % 12 == 0:\r\n        return 12\r\n    elif num % 13 == 0:\r\n        return 13\r\n    elif num % 14 == 0:\r\n        return 14\r\n    elif num % 15 == 0:\r\n        return 15\r\n    elif num % 16 == 0:\r\n        return 16\r\n    elif num % 17 == 0:\r\n        return 17\r\n    elif num % 18 == 0:\r\n        return 18\r\n    elif num % 19 == 0:\r\n        return 19\r\n    elif num % 20 == 0:\r\n        return 20\r\n    elif num % 21 == 0:\r\n        return 21\r\n    elif num % 22 == 0:\r\n        return 22\r\n    elif num % 23 == 0:\r\n        return 23\r\n    elif num % 24 == 0:\r\n        return 24\r\n    elif num % 25 == 0:\r\n        return 25\r\n    elif num % 26 == 0:\r\n        return 26\r\n    elif num % 27 == 0:\r\n        return 27\r\n    elif num % 28 == 0:\r\n        return 28\r\n    elif num % 29 == 0:\r\n        return 29\r\n    elif num % 30 == 0:\r\n        return 30\r\n    elif num % 31 == 0:\r\n        return 31\r\n    elif num % 32 == 0:\r\n        return ","votes":null},{"text":"\r\n    # num is a perfect number, so we can use num.sqrt()\r\n    return num.sqrt()\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num % 2 == 0:\r\n        return sqrt_root(num \/\/ 2)\r\n    else:\r\n        return sqrt_root(num+1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    for i in range(1, num):\r\n        if (num % i == 0):\r\n            return i\r\n    return num\r\n\r","votes":null},{"text":"\r\n    sqrt_num = math.sqrt(num)\r\n    return sqrt_num\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    elif num % 2 == 0:\r\n        return num\r\n    else:\r\n        return 1 + sqrt_root(num\/2)\r\n\r","votes":null},{"text":"\r\n    return 2 * num\r\n\r\nprint(sqrt_root(36))\r\n```\r\n\r\n<br>\r\n\r\n```python\r\n# 10. Write a Python program to find the sum of digits in a given number.\r\nnum = 5566\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return num\r\n    else:\r\n        return sqrt_root(num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        while True:\r\n            num = num \/\/ 2\r\n            if num == 1:\r\n                return num\r\n            else:\r\n                num = num ** 2\r\n    return 0\r\n\r\n\r","votes":null},{"text":"\r\n    try:\r\n        sqrt = int(math.sqrt(num))\r\n    except ValueError:\r\n        return None\r\n    if (sqrt * sqrt) == num:\r\n        return sqrt\r\n    else:\r\n        return None\r\n\r\n\r\nfor num in range(1, 1000000):\r\n    if sqrt_root(num) is not None:\r\n        print(str(num) +'is a perfect number')\r\n        break\r\n","votes":null},{"text":"\r\n    if num % 2 == 0:\r\n        return True\r\n    else:\r\n        if num > 1:\r\n            for i in range(2, num \/\/ 2 + 1):\r\n                if num % i == 0:\r\n                    return False\r\n    return True\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input(\"Enter a number: \"))\r\n    print(sqrt_root(num))\r\n","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num % 2 == 0:\r\n        num = num \/\/ 2\r\n    else:\r\n        num = num \/\/ 2 + 1\r\n    result = sqrt_root(num)\r\n    if result ** 2 == num:\r\n        return result\r\n    else:\r\n        return sqrt_root(num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    x = num\r\n    while x > 1:\r\n        if num % x == 0:\r\n            x = x - 1\r\n        else:\r\n            x = x + 1\r\n    return x\r\n\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n \r\n    return result\r\n\r\nx = int(input(\"Enter the perfect number to find its square root: \"))\r\nprint(sqrt_root(x))\r\n\r\n# -\r\n\r\n\r\n\r\n# ## 3. Write a program to find the factorial of a given number.\n# ### Note : Use recursion for factorial.\n\n# +","votes":null},{"text":"\r\n    sqrt = math.sqrt(num)\r\n    if sqrt.is_integer():\r\n        return sqrt\r\n    else:\r\n        return sqrt_root(sqrt)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sqrt_root(101))\r\n","votes":null},{"text":"\r\n    if num % 4 == 0:\r\n        return \"Not a perfect number.\"\r\n    if num % 2 == 0:\r\n        return sqrt_root(num \/\/ 2) + sqrt_root(num \/\/ 2)\r\n    return sqrt_root(num \/\/ 2) + sqrt_root(num \/\/ 2) + 1\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Please enter a perfect number.\")\r\n    num = int(input())\r\n    print(\"The square root of the perfect number is\", sqrt_root(num))\r\n","votes":null},{"text":"\r\n    if num == 1:\r\n        return num\r\n    elif num % 2 == 0:\r\n        return sqrt_root(num \/\/ 2) + sqrt_root(num \/\/ 2)\r\n    else:\r\n        return sqrt_root(num \/\/ 2) + sqrt_root(num \/\/ 2) + 1\r\n\r\n\r\nsquare_root_num = sqrt_root(perfect_num)\r\nprint(f'The square root of {perfect_num} is {square_root_num}.')\r\n","votes":null},{"text":"\r\n    if num > 1:\r\n        return sqrt_root(num \/\/ 2)\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return 0\r\n\r\n\r","votes":null},{"text":"\r\n    return num ** (1\/2)\r\n\r\nprint(sqrt_root(16))\r\n```\r\n- 16 is perfect number but it is not a perfect square.\r\n\r\n### 4. What will be the output?\r\n\r\n```\r\n2\r\n```\r\n\r\n### 5. What will be the function's output?\r\nThe function is not applicable to this problem.\r\n\r\n### 6. Please explain the program.\r\nThe square root of a perfect number is 1.\r\nThe perfect number is a number that is the square of a perfect number.\r\nThe square of a perfect number is a number that is the square of a perfect number.\r\nThe square of a perfect number is a number that is the square of a perfect number.\r\nThe square of a perfect number is a number that is the square of a perfect number.\r\n\r\n```\r\n### Program:\r\n\r\n```python\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num % 2 == 0 and num > 2:\r\n        return sqrt_root(num \/\/ 2) + sqrt_root(num \/\/ 2)\r\n    elif num % 2!= 0:\r\n        return sqrt_root(num \/\/ 2) + 1\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(1, num\/\/2 + 1):\r\n        if num % i == 0:\r\n            return i\r\n\r","votes":null},{"text":"\r\n    if num > 1:\r\n        return sqrt_root(num \/\/ 2) + sqrt_root(num \/\/ 2)\r\n    else:\r\n        return num\r\n\r","votes":null},{"text":"\r\n    # Check if num is a perfect square.\r\n    for i in range(1, int(num ** 0.5) + 1):\r\n        if num % i == 0:\r\n            return i\r\n    return None\r\n\r","votes":null},{"text":"\r\n    sqrt_num = int(num ** (1\/2))\r\n    if sqrt_num * sqrt_num!= num:\r\n        return \"The square root of {} is not a perfect number.\".format(num)\r\n    return \"The square root of {} is {}.\".format(num, sqrt_num)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if num % 2 == 0:\r\n        return num - 1\r\n    else:\r\n        return num + 1\r\n\r\nprint(sqrt_root(12))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(3))\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(0))\r\nprint(sqrt_root(100))\r\nprint(sqrt_root(1000))\r\nprint(sqrt_root(10000))\r\nprint(sqrt_root(100000))\r\n\r\n# -\r\n\r\n# **Question 1**\r\n#\r\n# Write a function called `is_perfect` that accepts a number and returns whether that number is perfect or not. A perfect number is one where all the factors are equal to the number itself.\r\n#\r\n# For example, 12 is a perfect number because 12 = 1*2*3.\r\n#\r\n# For example, 3 is not a perfect number because 3!= 1*2*3.\r\n#\r\n# You can write your solution in any language you like, but the function should return True or False.\r\n#\r\n# The function `is_perfect` will be called as follows:\r\n#\r\n# ```\r\n# >>> is_perfect(12)\r\n# True\r\n#\r\n# >>> is_perfect(3)\r\n# False\r\n#\r\n# ```\r\n#\r\n# **Question 2**\r\n#\r\n# Write a function called `is_square` that accepts a number and returns whether that number is a perfect square or not. A perfect square is a number where the square of all the digits is the same as the number itself.\r\n#\r\n# For example, 100 is a perfect square because 100 = 1*1*1*1.\r\n#\r\n# For example, 8 is not a perfect square because 8!= 1*1*1.\r\n#\r\n# You can write your solution in any language you like, but the function should return True or Fals","votes":null},{"text":"\r\n    num = int(num)\r\n    for i in range(2, num):\r\n        if num % i == 0:\r\n            return i\r\n\r\n\r","votes":null},{"text":"\r\n    sqrt_num = 0\r\n    for i in range(1, num):\r\n        if num % i == 0:\r\n            sqrt_num += 1\r\n    return sqrt_num\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    for i in range(1, num):\r\n        if num % i == 0:\r\n            return i\r\n    return num\r\n\r\n\r","votes":null},{"text":"\r\n    num_sqrt = math.sqrt(num)\r\n    if num_sqrt.is_integer():\r\n        return num_sqrt\r\n    else:\r\n        return num_sqrt + 1\r\n\r\n\r","votes":null},{"text":"\r\n    x = 2\r\n    while x < num:\r\n        if x**2 > num:\r\n            break\r\n        else:\r\n            x += 1\r\n    return x - 1\r\n\r\n\r\n@pytest.mark.parametrize(\"num\", [10, 11, 131, 51, 151, 43, 122, 45, 151])\r","votes":null},{"text":"\r\n    if num % 2 == 0:\r\n        print(\"The square root of\", num, \"is\", num \/\/ 2)\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    if num % 2 == 0:\r\n        return 0\r\n    else:\r\n        return num \/\/ 2 + 1\r\n\r\n\r","votes":null},{"text":"\r\n    sqrt = math.sqrt(num)\r\n    if sqrt == int(sqrt):\r\n        return sqrt\r\n    else:\r\n        return int(sqrt) + 1\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        print('The number cannot be negative.')\r\n    elif num == 0:\r\n        print('The number cannot be zero.')\r\n    elif num == 1:\r\n        return 1\r\n    elif num % 2 == 0:\r\n        return 2\r\n    elif num % 3 == 0:\r\n        return 3\r\n    else:\r\n        for i in range(3, num\/\/2+1, 2):\r\n            if num % i == 0:\r\n                return i\r\n\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(3))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(8))\r\nprint(sqrt_root(9))\r\nprint(sqrt_root(13))\r\nprint(sqrt_root(15))\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(17))\r\nprint(sqrt_root(19))\r\nprint(sqrt_root(21))\r\nprint(sqrt_root(22))\r\nprint(sqrt_root(23))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(26))\r\nprint(sqrt_root(30))\r\nprint(sqrt_root(50))\r\nprint(sqrt_root(100))\r\nprint(sqrt_root(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    if num % 2 == 0:\r\n        return (num\/2)**0.5\r\n    else:\r\n        return (num**(1\/2))**2\r\n\r\nif __name__ == \"__main__\":\r\n    print(sqrt_root(36))\r\n    print(sqrt_root(12))\r\n","votes":null},{"text":"\r\n    if num == 0 or num == 1:\r\n        return num\r\n\r\n    # find the square root of num\r\n    sqrt_num = sqrt(num)\r\n\r\n    # check if num is a perfect square\r\n    if sqrt_num**2 == num:\r\n        return sqrt_num\r\n    else:\r\n        return sqrt_root(sqrt_num)\r\n\r","votes":null},{"text":"\r\n    num = int(num)\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        for i in range(2, num):\r\n            if num % i == 0:\r\n                return num\r\n        return num\r\n\r","votes":null},{"text":"\r\n    for i in range(1, num):\r\n        if num % i == 0:\r\n            return i\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    for i in range(2, num\/\/2):\r\n        if num % i == 0:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n\r\n    # Get the input from the user\r\n    num = int(input(\"Enter a perfect number: \"))\r\n\r\n    # Print the output\r\n    print(sqrt_root(num))\r\n","votes":null},{"text":"\r\n    if num==0:\r\n        return 0\r\n    if num==1:\r\n        return 1\r\n    if num%2==0:\r\n        return sqrt_root(num\/2)\r\n    else:\r\n        return 2*sqrt_root(num-1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num in [2, 3, 5, 7, 13, 17, 19, 23, 29, 31, 37]:\r\n        return num\r\n    else:\r\n        i = 2\r\n        while True:\r\n            if num % i == 0:\r\n                num = num \/ i\r\n                return i\r\n            else:\r\n                i += 1\r\n\r\n\r","votes":null},{"text":"\r\n    sqrt = num ** 0.5\r\n    return sqrt\r\n\r\n# Call sqrt_root() and store the result\r\nsqrt = sqrt_root(num)\r\n\r\n# Print the result\r\nprint(\"The square root of {} is {:.2f}\".format(num, sqrt))\r\n","votes":null},{"text":"\r\n    if num % 2 == 0:\r\n        return num\r\n    else:\r\n        return num \/\/ 2\r\n\r\n\r","votes":null},{"text":"\r\n    if num % 2 == 0:\r\n        return (num \/\/ 2) * 2\r\n    else:\r\n        return ((num + 1) \/\/ 2) * 2\r\n\r\n\r\n# In[41]:\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    for i in range(1,num):\r\n        if i*i == num:\r\n            return i\r\n    return -1\r\n\r\nprint(sqrt_root(121))\r\nprint(sqrt_root(11))\r\nprint(sqrt_root(25))\r\n```\r\n\r\n**Output:**\r\n```\r\n11\r\n3\r\n5\r\n```\r\n\r\n## **Task 2: Write a function to find the square of a number.**\r\n**Input:**\r\n```\r\nnumber = 4\r\n```\r\n**Output:**\r\n```\r\n16\r\n```\r\n**Hints:**\r\n```\r\nUse the built-in function **pow()**\r\n```\r\n\r\n**Solution:**\r\n```python\r\n# Task 2\r","votes":null},{"text":"\r\n    num = abs(num)\r\n    if num == 1:\r\n        return 1\r\n    for i in range(2, num):\r\n        if num % i == 0:\r\n            return i\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    num = 64\r\n    print(sqrt_root(num))\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    elif num % 2 == 0:\r\n        return sqrt_root(num \/ 2)\r\n    else:\r\n        return 1 + sqrt_root(num - 1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"\r\n    The code below is a test code for the sqrt_root function.\r\n    Do not modify the code below.\r\n    \"\"\"\r\n    assert sqrt_root(1) == 1\r\n    assert sqrt_root(4) == 2\r\n    assert sqrt_root(9) == 3\r\n    assert sqrt_root(16) == 4\r\n    assert sqrt_root(512) == 8\r\n    assert sqrt_root(1441) == 11\r\n    print('Well done!')\r\n","votes":null},{"text":"\r\n    if num % 2 == 0:\r\n        return 2\r\n    else:\r\n        return 1 + sqrt_root(num\/\/2)\r\n\r\nif __name__ == \"__main__\":\r\n    perfect = [int(i) for i in raw_input().split(\",\")]\r\n    perfect.sort()\r\n    count = 0\r\n    for i in range(len(perfect)):\r\n        if perfect[i] == perfect[i-1]**2:\r\n            count += 1\r\n    print count","votes":null},{"text":"\r\n    if num < 0:\r\n        print(\"Invalid number\")\r\n        return\r\n    else:\r\n        sqrt = 0\r\n        while num > 0:\r\n            sqrt += 1\r\n            num\/\/=2\r\n        return sqrt\r\n\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(17))\r\nprint(sqrt_root(18))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(26))\r\nprint(sqrt_root(27))\r\nprint(sqrt_root(36))\r\nprint(sqrt_root(37))\r\nprint(sqrt_root(38))\r\nprint(sqrt_root(49))\r\nprint(sqrt_root(50))\r\nprint(sqrt_root(51))\r\nprint(sqrt_root(64))\r\nprint(sqrt_root(65))\r\nprint(sqrt_root(66))\r\nprint(sqrt_root(77))\r\nprint(sqrt_root(78))\r\nprint(sqrt_root(79))\r\nprint(sqrt_root(98))\r\nprint(sqrt_root(99))\r\nprint(sqrt_root(100))\r\nprint(sqrt_root(101))\r\nprint(sqrt_root(102))\r\nprint(sqrt_root(103))\r\nprint(sqrt_root(104))\r\nprint(sqrt_root(105))\r\nprint(sqrt_root(106))\r\nprint(sqrt_root(107))\r\nprint(sqrt_root(108))\r\nprint(sqrt_root(109))\r\nprint(sqrt_root(110))\r\nprint(sqrt_root(111))\r\nprint(sqrt_root(112))\r\nprint(sqrt_root(113))\r\nprint(sqrt_root(114))\r\nprint(sqrt_root(115))\r\nprint(sqrt_root(116))\r\nprint(sqrt_root(117))\r\nprint(sqrt_root(11","votes":null},{"text":"\r\n    n = num\r\n    if n % 2 == 0:\r\n        return 0\r\n    else:\r\n        i = 1\r\n        while i < n:\r\n            if n % i == 0:\r\n                return i\r\n            else:\r\n                i += 1\r\n\r\n# print(sqrt_root(16))\r\n# print(sqrt_root(25))\r\n# print(sqrt_root(196))\r\n\r\n# 1846170049\r\n# 10519363\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n# 196\r\n#","votes":null},{"text":"\r\n    for i in range(1, num):\r\n        if num % i == 0:\r\n            return i\r\n    return num\r\n\r\nprint(sqrt_root(131))\r\n\r\n\r","votes":null},{"text":"\r\n    # num = int(input('Enter a perfect number: '))\r\n    # if num % 2 == 0:\r\n    #     num = num \/ 2\r\n    #     return sqrt_root(num)\r\n    # else:\r\n    #     num = num * 3 + 1\r\n    #     return sqrt_root(num)\r\n    if num % 2 == 0:\r\n        num = num \/ 2\r\n        return sqrt_root(num)\r\n    else:\r\n        num = num * 3 + 1\r\n        return sqrt_root(num)\r\n\r\nprint(sqrt_root(121))\r\nprint(sqrt_root(122))\r\nprint(sqrt_root(133))\r\nprint(sqrt_root(244))\r\nprint(sqrt_root(245))\r\nprint(sqrt_root(344))\r\nprint(sqrt_root(345))\r\nprint(sqrt_root(444))\r\nprint(sqrt_root(445))\r\nprint(sqrt_root(555))\r\nprint(sqrt_root(556))\r\nprint(sqrt_root(666))\r\nprint(sqrt_root(667))\r\nprint(sqrt_root(777))\r\nprint(sqrt_root(778))\r\nprint(sqrt_root(888))\r\nprint(sqrt_root(889))\r\nprint(sqrt_root(999))\r\nprint(sqrt_root(1000))\r\nprint(sqrt_root(1001))\r\nprint(sqrt_root(1002))\r\nprint(sqrt_root(1003))\r\nprint(sqrt_root(1004))\r\nprint(sqrt_root(1005))\r\nprint(sqrt_root(1006))\r\nprint(sqrt_root(1007))\r\nprint(sqrt_root(1008))\r\nprint(sqrt_root(1009))\r\nprint(sqrt_root(1010))\r\nprint(sqrt_root(1011))\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 1\r\n    elif num % 2 == 0:\r\n        return sqrt_root(num \/\/ 2)\r\n    else:\r\n        return (num + sqrt_root(num \/\/ 2)) \/\/ 2\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    if num % 2 == 0:\r\n        return sqrt_root(num \/\/ 2) * 2\r\n    else:\r\n        return sqrt_root(num \/\/ 2 + 1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Your code goes here\r\n    i = 0\r\n    while num % 2 == 0:\r\n        num = num \/ 2\r\n        i = i + 1\r\n    return i\r\n\r\n\r","votes":null},{"text":"\r\n    x = 0.0\r\n    while x**2 <= num:\r\n        x = x + 0.01\r\n    return x\r\n\r\nif __name__ == \"__main__\":\r\n    \"\"\"Run the test.\"\"\"\r\n    test = int(input(\"Enter the number to test: \"))\r\n    print(\"The square root of the number is: \", sqrt_root(test))\r\n","votes":null},{"text":"\r\n    num = int(num)\r\n    if num < 0:\r\n        print('The number cannot be negative')\r\n    elif num == 0:\r\n        return 0\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        for i in range(2, int(num ** 0.5) + 1):\r\n            if num % i == 0:\r\n                return i\r\n        return num\r\n\r\n# Tests\r\nprint(sqrt_root(0))\r\nprint(sqrt_root(0.5))\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(3))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(5))\r\nprint(sqrt_root(6))\r\nprint(sqrt_root(7))\r\nprint(sqrt_root(8))\r\nprint(sqrt_root(9))\r\nprint(sqrt_root(10))\r\nprint(sqrt_root(11))\r\nprint(sqrt_root(12))\r\nprint(sqrt_root(13))\r\nprint(sqrt_root(14))\r\nprint(sqrt_root(15))\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(17))\r\nprint(sqrt_root(18))\r\nprint(sqrt_root(19))\r\nprint(sqrt_root(20))\r\nprint(sqrt_root(21))\r\nprint(sqrt_root(22))\r\nprint(sqrt_root(23))\r\nprint(sqrt_root(24))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(26))\r\nprint(sqrt_root(27))\r\nprint(sqrt_root(28))\r\nprint(sqrt_root(29))\r\nprint(sqrt_root(30))\r\nprint(sqrt_root(31))\r\nprint(sqrt_root(32))\r\nprint(sqrt_root(33))\r\nprint(sqrt_root(34))\r\nprint(sqrt_root(35))\r\nprint","votes":null},{"text":"\r\n    for i in range(1, num):\r\n        if  num % i == 0:\r\n            return i\r\n    return num\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    if num == 1:\r\n        return 1\r\n    if num % 2 == 0:\r\n        return sqrt_root(num \/ 2) + sqrt_root(num \/ 2)\r\n    else:\r\n        return sqrt_root(num \/ 2) + sqrt_root(num \/ 2) + 1\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # print(sqrt_root(16))\r\n    print(sqrt_root(8))\r\n    # print(sqrt_root(17))\r\n","votes":null},{"text":"\r\n    num = int(num)\r\n    if num < 0:\r\n        return \"The number must be a positive integer.\"\r\n    else:\r\n        return sqrt(num)\r\n\r\n\r","votes":null},{"text":"\r\n    sqrt_num = sqrt(num)\r\n    if sqrt_num == int(sqrt_num):\r\n        return sqrt_num\r\n\r\n# 18. Write a program to find the factorial of a given number.\r","votes":null},{"text":"\r\n    # Check if the number is a perfect square.\r\n    if num % 4 == 3:\r\n        return \"The number is not a perfect square.\"\r\n    # Find the square root of the number.\r\n    for i in range(1, num \/\/ 2):\r\n        if (num \/\/ i) * i == num:\r\n            return i\r\n    return \"The number is not a perfect square.\"\r\n\r\n\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(16))\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    elif num == 1:\r\n        return 1\r\n    elif num % 2 == 0:\r\n        return sqrt_root(num \/\/ 2)\r\n    else:\r\n        return num * sqrt_root(num - 2)\r\n\r\n\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(3))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(5))\r\nprint(sqrt_root(6))\r\nprint(sqrt_root(7))\r\nprint(sqrt_root(8))\r\nprint(sqrt_root(9))\r\nprint(sqrt_root(10))\r\nprint(sqrt_root(11))\r\nprint(sqrt_root(12))\r\nprint(sqrt_root(13))\r\nprint(sqrt_root(14))\r\nprint(sqrt_root(15))\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(17))\r\nprint(sqrt_root(18))\r\nprint(sqrt_root(19))\r\nprint(sqrt_root(20))\r\nprint(sqrt_root(21))\r\nprint(sqrt_root(22))\r\nprint(sqrt_root(23))\r\nprint(sqrt_root(24))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(26))\r\nprint(sqrt_root(27))\r\nprint(sqrt_root(28))\r\nprint(sqrt_root(29))\r\nprint(sqrt_root(30))\r\nprint(sqrt_root(31))\r\nprint(sqrt_root(32))\r\nprint(sqrt_root(33))\r\nprint(sqrt_root(34))\r\nprint(sqrt_root(35))\r\nprint(sqrt_root(36))\r\nprint(sqrt_root(37))\r\nprint(sqrt_root(38))\r\nprint(sqrt_root(39))\r\nprint(sqrt_root(40)","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 1\r\n    elif num % 2 == 0:\r\n        return sqrt_root(num\/2)\r\n    else:\r\n        return sqrt_root(num+1)\r\n\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(100))\r\nprint(sqrt_root(10000))\r\nprint(sqrt_root(100000))\r\nprint(sqrt_root(1000000000))\r\nprint(sqrt_root(10000000000))\r\nprint(sqrt_root(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        return int(math.sqrt(num))\r\n\r\n# Finding the square root of a perfect number\r\nprint(sqrt_root(64))\r\nprint(sqrt_root(81))\r\nprint(sqrt_root(361))\r\nprint(sqrt_root(129))\r\nprint(sqrt_root(243))\r\nprint(sqrt_root(1025))\r\nprint(sqrt_root(16385))\r\n","votes":null},{"text":"\r\n    # Check if the number is even\r\n    if num % 2 == 0:\r\n        print(\"Number is not a perfect square\")\r\n    # If the number is odd\r\n    else:\r\n        # Make a list of all the numbers from 1 to the square root of the number\r\n        number_list = [i for i in range(1, int(num ** 0.5) + 1)]\r\n        # Make a count of how many times the number is in the list\r\n        count = 0\r\n        # Loop through each number in the list\r\n        for i in number_list:\r\n            # If the number is a factor of the number\r\n            if num % i == 0:\r\n                # Increase the count\r\n                count += 1\r\n        # If the count is 2, the number is a perfect square\r\n        if count == 2:\r\n            print(\"The number is a perfect square\")\r\n        # Else, it is not a perfect square\r\n        else:\r\n            print(\"The number is not a perfect square\")\r\n\r\n\r\n# Write a function to find the prime factors of a number\r","votes":null},{"text":"\r\n    root = 0\r\n    while (num % 2 == 0):\r\n        num \/= 2\r\n    if num % 3 == 0:\r\n        root = 2\r\n    elif num % 3 == 1:\r\n        root = 3\r\n    else:\r\n        root = 4\r\n    return root\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(2,num):\r\n        if num%i == 0:\r\n            return i\r\n    return num\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num % 2 == 0:\r\n        return 2 * sqrt_root(num \/ 2)\r\n    else:\r\n        return (num + sqrt_root(num)) \/ 2\r\n\r\n\r","votes":null},{"text":"\r\n    i = 1\r\n    while i * i <= num:\r\n        if num % i == 0:\r\n            print(num, 'is a perfect number.')\r\n            return True\r\n        i += 1\r\n    print(num, 'is not a perfect number.')\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    sqrt_num = math.sqrt(num)\r\n    if int(sqrt_num)!= sqrt_num:\r\n        return False\r\n    return int(sqrt_num)\r\n","votes":null},{"text":"\r\n    return int(math.sqrt(num))\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        raise ValueError(\"sqrt_root only accepts positive numbers.\")\r\n    elif num == 0:\r\n        return 0\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return sqrt_root(num-1) + sqrt_root(num-2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        return 2 * sqrt_root(int((num - 1) \/ 2))\r\n\r\n\r","votes":null},{"text":"\r\n    sqrt_num = num ** 0.5\r\n\r\n    if sqrt_num == int(sqrt_num):\r\n        return int(sqrt_num)\r\n    else:\r\n        return sqrt_num\r\n\r\n\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(36))\r\nprint(sqrt_root(37))\r\nprint(sqrt_root(49))\r\nprint(sqrt_root(50))\r\nprint(sqrt_root(51))\r\nprint(sqrt_root(52))\r\nprint(sqrt_root(53))\r\nprint(sqrt_root(54))\r\nprint(sqrt_root(55))\r\nprint(sqrt_root(56))\r\nprint(sqrt_root(57))\r\nprint(sqrt_root(58))\r\nprint(sqrt_root(59))\r\nprint(sqrt_root(60))\r\nprint(sqrt_root(61))\r\nprint(sqrt_root(62))\r\nprint(sqrt_root(63))\r\nprint(sqrt_root(64))\r\nprint(sqrt_root(65))\r\nprint(sqrt_root(66))\r\nprint(sqrt_root(67))\r\nprint(sqrt_root(68))\r\nprint(sqrt_root(69))\r\nprint(sqrt_root(70))\r\nprint(sqrt_root(71))\r\nprint(sqrt_root(72))\r\nprint(sqrt_root(73))\r\nprint(sqrt_root(74))\r\nprint(sqrt_root(75))\r\nprint(sqrt_root(76))\r\nprint(sqrt_root(77))\r\nprint(sqrt_root(78))\r\nprint(sqrt_root(79))\r\nprint(sqrt_root(80))\r\nprint(sqrt_root(81))\r\nprint(sqrt_root(82))\r\nprint(sqrt_root(83))\r\nprint(sqrt_root(84))\r\nprint(sqrt_root(85)","votes":null},{"text":"\r\n    # use while loop to iterate\r\n    # return the square root\r\n    while True:\r\n        if num%2 == 0:\r\n            num \/= 2\r\n        else:\r\n            num = (num+1)\/\/2\r\n        if num == 1:\r\n            return num\r\n\r\nprint(sqrt_root(2147483647))\r\nprint(sqrt_root(123456))\r\nprint(sqrt_root(897654321))\r\nprint(sqrt_root(123456789))\r\nprint(sqrt_root(1234567890))\r\nprint(sqrt_root(0))\r\nprint(sqrt_root(0.5))\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(1.5))\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(2.5))\r\nprint(sqrt_root(3))\r\nprint(sqrt_root(3.5))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(4.5))\r\nprint(sqrt_root(5))\r\nprint(sqrt_root(5.5))\r\nprint(sqrt_root(6))\r\nprint(sqrt_root(6.5))\r\nprint(sqrt_root(7))\r\nprint(sqrt_root(7.5))\r\nprint(sqrt_root(8))\r\nprint(sqrt_root(8.5))\r\nprint(sqrt_root(9))\r\nprint(sqrt_root(9.5))\r\nprint(sqrt_root(10))\r\nprint(sqrt_root(10.5))\r\nprint(sqrt_root(11))\r\nprint(sqrt_root(11.5))\r\nprint(sqrt_root(12))\r\nprint(sqrt_root(12.5))\r\nprint(sqrt_root(13))\r\nprint(sqrt_root(13.5))\r\nprint(sqrt_root(14))\r\nprint(sqrt_root(14.5))\r\nprint(sqrt_root","votes":null},{"text":"\r\n    if num < 0:\r\n        raise ValueError(\"num must be a positive number.\")\r\n\r\n    i = 2\r\n    while i < num:\r\n        if num % i == 0:\r\n            num = num \/\/ i\r\n        else:\r\n            i += 1\r\n\r\n    return num\r\n\r\n\r\nprint(sqrt_root(9))\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(-16))\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    if num == 1:\r\n        return 1\r\n    if num % 2 == 0:\r\n        return sqrt_root(num \/ 2) + sqrt_root(num \/ 2)\r\n    else:\r\n        return sqrt_root(num \/ 2) + 1\r\n\r\n\r\nnum = int(input(\"Enter a perfect number: \"))\r\nroot = sqrt_root(num)\r\nprint(root)\r\n","votes":null},{"text":"\r\n    num_list = []\r\n    while num!= 0:\r\n        num_list.append(num % 10)\r\n        num = int(num \/ 10)\r\n\r\n    return 10 ** (len(num_list) - 1) if num_list.count(0) == 1 else 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sqrt_root(10))\r\n    print(sqrt_root(1))\r\n    print(sqrt_root(2))\r\n    print(sqrt_root(3))\r\n    print(sqrt_root(4))\r\n","votes":null},{"text":"\r\n    if num < 0:\r\n        return 'Error: Please enter a positive number.'\r\n    elif num == 0:\r\n        return 0\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return 2 * sqrt_root(num\/2)\r\n\r","votes":null},{"text":"\r\n    a = num\r\n    b = num\r\n    while b > a:\r\n        c = (a + b) \/\/ 2\r\n        if c * c == num:\r\n            return c\r\n        elif c * c > num:\r\n            b = c\r\n        else:\r\n            a = c\r\n    return b\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return 'Please enter a positive number.'\r\n    elif num == 0:\r\n        return 0.0\r\n    else:\r\n        num = int(num)\r\n        sqrt = 0\r\n        for i in range(2, num):\r\n            if num % i == 0:\r\n                sqrt = i\r\n                break\r\n        return sqrt\r\n\r\n# Tests\r\nprint(sqrt_root(100))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(0))\r\nprint(sqrt_root(-4))\r\n","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        return num*sqrt_root(num-1)\r\n\r\nprint(sqrt_root(97))\r\n","votes":null}],"time":{"count":14.0,"avg":106196.3511428571,"std":33159.3853742608,"cov":0.3122459954}}
{"id":521,"question":"def check_isosceles(x,y,z):\r\n    \"\"\"Write a function to print check if the triangle is scalene or not.\"\"\"","answers":[{"text":"\r\n    if x+y>z and x+z>y and y+z>x:\r\n        return True\r\n    else:\r\n        return False\r","votes":49345.94},{"text":"\r\n    if x == 0 or y == 0 or z == 0:\r\n        return 0\r\n    elif x!= 0 and y!= 0 and z!= 0:\r\n        if x+y > z and y+z > x and x+z > y:\r\n            return 1\r\n        else:\r\n            return 0\r\n    else:\r\n        return 0\r\n\r","votes":121870.6},{"text":"\r\n    if x == y == z:\r\n        print(\"Scalene\")\r\n    elif x == y or x == z or y == z:\r\n        print(\"Isosceles\")\r\n    else:\r\n        print(\"Not Isosceles\")\r\n\r\ncheck_isosceles(4,5,5)\r\ncheck_isosceles(4,5,2)\r\ncheck_isosceles(4,3,5)\r\ncheck_isosceles(4,3,3)\r\ncheck_isosceles(4,4,3)","votes":null},{"text":"\r\n    if (x+y>z) and (y+x>z) and (x+z>y):\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not a scalene triangle\")\r\n\r","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print(\"scalene\")\r\n    else:\r\n        print(\"not scalene\")\r\n\r\ncheck_isosceles(5,6,7)\r\ncheck_isosceles(3,3,3)\r\ncheck_isosceles(3,6,7)\r\ncheck_isosceles(3,3,6)","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print(\"Scalene\")\r\n    elif x!= y!= z:\r\n        print(\"Not Scalene\")\r\n    else:\r\n        print(\"Error\")\r\n\r","votes":null},{"text":"\r\n    if x+y==z:\r\n        print(f\"The triangle is scalene.\")\r\n    elif x+z==y:\r\n        print(f\"The triangle is scalene.\")\r\n    elif y+z==x:\r\n        print(f\"The triangle is scalene.\")\r\n    else:\r\n        print(f\"The triangle is not scalene.\")\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"Scalene\")\r\n    elif x!=y and x!=z and y!=z:\r\n        print(\"Isosceles\")\r\n    else:\r\n        print(\"Not a triangle\")\r\n\r\n\r\ncheck_isosceles(5,5,5)\r\ncheck_isosceles(5,5,6)\r\ncheck_isosceles(5,6,5)","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    if x == y == z:\r\n        print(\"Triangle scalene\")\r\n    elif x == y or x == z or y == z:\r\n        print(\"Triangle is isoceles\")\r\n    else:\r\n        print(\"Triangle is equilateral\")\r\n\r\ncheck_isosceles(5,10,15)\r\ncheck_isosceles(10,10,10)\r\ncheck_isosceles(10,20,30)\r\ncheck_isosceles(30,20,30)\r\ncheck_isosceles(20,20,30)\r\ncheck_isosceles(20,30,30)\r\ncheck_isosceles(30,30,30)","votes":null},{"text":"\r\n    if x+y>z and x+z>y and y+z>x:\r\n        print(\"Scalene Triangle\")\r\n    else:\r\n        print(\"Not a Scalene Triangle\")\r\n\r","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not scalene\")\r\ncheck_isosceles(2,2,2)\r\ncheck_isosceles(2,2,3)\r\ncheck_isosceles(3,3,3)\r\ncheck_isosceles(3,4,3)\r\ncheck_isosceles(2,2,4)\r\ncheck_isosceles(2,3,4)\r\ncheck_isosceles(1,2,3)\r\ncheck_isosceles(1,2,4)\r\ncheck_isosceles(1,3,4)\r\ncheck_isosceles(3,3,2)\r\ncheck_isosceles(3,4,2)\r\ncheck_isosceles(2,2,1)\r\ncheck_isosceles(2,3,1)\r\ncheck_isosceles(1,2,1)\r\ncheck_isosceles(1,3,1)\r\ncheck_isosceles(4,4,4)\r\ncheck_isosceles(4,4,5)\r\ncheck_isosceles(5,5,5)\r\ncheck_isosceles(5,6,6)\r\ncheck_isosceles(6,6,6)\r\ncheck_isosceles(6,7,7)\r\ncheck_isosceles(7,7,7)\r\ncheck_isosceles(7,8,8)\r\ncheck_isosceles(8,8,8)\r\ncheck_isosceles(8,9,9)\r\ncheck_isosceles(9,9,9)\r\ncheck_isosceles(9,10,10)\r\ncheck_isosceles(10,10,10)\r\ncheck_isosceles(10,11,11)\r\ncheck_isoscele","votes":null},{"text":"\r\n    if x==y or x==z or y==z or x+y>z or x+z>y or y+z>x:\r\n        return \"Not a triangle\"\r\n    else:\r\n        return \"Scalene\"\r\n\r\nprint(check_isosceles(1,2,3))\r\nprint(check_isosceles(1,2,4))\r\nprint(check_isosceles(1,3,4))\r\nprint(check_isosceles(2,2,4))\r\nprint(check_isosceles(3,2,4))\r\nprint(check_isosceles(4,2,4))\r\nprint(check_isosceles(4,3,4))\r\nprint(check_isosceles(4,4,4))\r\nprint(check_isosceles(5,4,6))\r\nprint(check_isosceles(5,4,5))\r\nprint(check_isosceles(6,4,5))\r\n\r\n# + [markdown] id=\"81p_d6-qG7j7\"\r\n# ## Write a Python program to find the volume of a sphere with diameter 12 cm. Use 3.14 as pi.\r\n#\r\n#\r\n#\r\n#\r\n\r\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\"} id=\"r700i9-PG7j8\" outputId=\"e088366c-d17b-44d3-9746-84c4f2270204\"\r\nradius = 12\r\nvolume = (4\/3)*3.14*radius**3\r\nprint(volume)\r\n\r\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\"} id=\"s75-u5fUJ87H\" outputId=\"5560c965-32e1-4a55-8003-455f56b1333d\"\r\nradius ","votes":null},{"text":"\r\n    if x == y == z:\r\n        print(\"scalene\")\r\n    elif x == y or x == z or y == z:\r\n        print(\"isosceles\")\r\n    else:\r\n        print(\"equilateral\")\r\n\r\nif __name__ == '__main__':\r\n    a = float(input(\"Enter a: \"))\r\n    b = float(input(\"Enter b: \"))\r\n    c = float(input(\"Enter c: \"))\r\n    check_isosceles(a,b,c)","votes":null},{"text":"\r\n    if x*y == z or y*z == x or x*z == y:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not Scalene\")\r\n\r","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print(\"This triangle is Scalene.\")\r\n    else:\r\n        print(\"This triangle is not Scalene.\")\r\n\r","votes":null},{"text":"\r\n    print(\"scalene\") if x+y>=z else print(\"isosceles\") if y+z>=x else print(\"equilateral\")\r\n\r","votes":null},{"text":"\r\n    if x==y or x==z or y==z:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not scalene\")\r\n\r","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not Scalene\")\r\n\r","votes":null},{"text":"\r\n    if (x==y) and (y!=z) or (x!=y) and (x==z):\r\n        print(\"Scalene\")\r\n    elif (x==y) and (y==z):\r\n        print(\"Equilateral\")\r\n    elif (x==y) or (x==z) or (y==z):\r\n        print(\"Isosceles\")\r\n    else:\r\n        print(\"Not a triangle\")\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print('scalene')\r\n    elif x!=y and y!=z and x!=z:\r\n        print('isosceles')\r\n    else:\r\n        print('equilateral')\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"Scalene Triangle\")\r\n    elif x==y or x==z or y==z:\r\n        print(\"Isosceles Triangle\")\r\n    else:\r\n        print(\"Not A Triangle\")\r\n\r","votes":null},{"text":"\r\n    if x==y or x==z or y==z:\r\n        return 'It is an Isosceles Triangle'\r\n    else:\r\n        return 'It is a Scalene Triangle'\r\n\r\nif __name__ == \"__main__\":\r\n    x = float(input('Enter the value for x: '))\r\n    y = float(input('Enter the value for y: '))\r\n    z = float(input('Enter the value for z: '))\r\n    print(check_scalene(x,y,z))\r\n    print(check_equilateral(x,y,z))\r\n    print(check_isosceles(x,y,z))\r\n","votes":null},{"text":"\r\n    if x==y==z:\r\n        print(\"The triangle is an equilateral triangle.\")\r\n    elif x==y or y==z or x==z:\r\n        print(\"The triangle is an isosceles triangle.\")\r\n    else:\r\n        print(\"The triangle is an scalene triangle.\")\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not Scalene\")\r\n\r\ncheck_isosceles(1,2,3)\r\ncheck_isosceles(3,4,5)\r\ncheck_isosceles(6,7,8)","votes":null},{"text":"\r\n    if x+y>z and y+z>x and x+z>y:\r\n        print(\"Scalene\")\r\n    elif x+y>z or y+z>x or x+z>y:\r\n        print(\"Not Scalene\")\r\n    else:\r\n        print(\"Isosceles\")\r\n            \r\ncheck_isosceles(5,6,7)\r\ncheck_isosceles(4,5,6)\r\n","votes":null},{"text":"\r\n    if x==y==z:\r\n        print(\"Scalene Triangle\")\r\n    elif x==y or x==z or y==z:\r\n        print(\"Isosceles Triangle\")\r\n    else:\r\n        print(\"Non-Isosceles Triangle\")\r\n\r","votes":null},{"text":"\r\n    if x==y or x==z or y==z:\r\n        return \"Scalene\"\r\n    elif x+y>z and x+z>y and y+z>x:\r\n        return \"Isosceles\"\r\n    else:\r\n        return \"Not a triangle\"\r\n\r\n# Driver Code\r\nprint(check_isosceles(3,4,5))\r\nprint(check_isosceles(3,4,6))\r\nprint(check_isosceles(3,5,6))\r\nprint(check_isosceles(4,5,6))\r\nprint(check_isosceles(4,4,5))\r\nprint(check_isosceles(5,6,7))\r\nprint(check_isosceles(5,6,8))\r\nprint(check_isosceles(6,7,8))\r\nprint(check_isosceles(6,6,7))\r\n","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not scalene\")\r\n\r\ncheck_isosceles(1,1,1)\r\ncheck_isosceles(1,1,2)\r\ncheck_isosceles(1,2,1)\r\ncheck_isosceles(2,1,1)\r\ncheck_isosceles(3,3,4)\r\ncheck_isosceles(4,3,3)\r\ncheck_isosceles(5,5,5)\r\ncheck_isosceles(5,5,6)\r\ncheck_isosceles(6,5,5)\r\ncheck_isosceles(6,6,5)\r\ncheck_isosceles(7,7,7)\r\ncheck_isosceles(7,7,8)\r\ncheck_isosceles(8,7,7)\r\ncheck_isosceles(8,8,7)\r\ncheck_isosceles(9,9,9)\r\ncheck_isosceles(9,9,10)\r\ncheck_isosceles(10,9,9)\r\ncheck_isosceles(10,10,9)\r\ncheck_isosceles(11,11,11)\r\ncheck_isosceles(11,11,12)\r\ncheck_isosceles(12,11,11)\r\ncheck_isosceles(12,12,11)\r\ncheck_isosceles(13,13,13)\r\ncheck_isosceles(13,13,14)\r\ncheck_isosceles(14,13,13)\r\ncheck_isosceles(14,14,13)\r\ncheck_isosceles(15,15,15)\r\ncheck_isosceles(15,15","votes":null},{"text":"\r\n    if x+y == z or x+z == y or y+z == x:\r\n        print('This is an isosceles triangle')\r\n    else:\r\n        print('This is not an isosceles triangle')\r\n\r\n\r","votes":null},{"text":"\r\n    if x == y or y == z or z == x:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not scalene\")\r\n\r","votes":null},{"text":"\r\n    if x == y == z:\r\n        print(\"Triangle is an equilateral triangle.\")\r\n    elif x!= y!= z!= 0:\r\n        print(\"Triangle is a scalene triangle.\")\r\n    elif x!= y!= 0 or x!= z!= 0 or y!= z!= 0:\r\n        print(\"Triangle is not a triangle.\")\r\n\r","votes":null},{"text":"\r\n    if x == y == z:\r\n        print('Scalene')\r\n    elif x == y or x == z or y == z:\r\n        print('Isosceles')\r\n    else:\r\n        print('Not a triangle')\r\n\r\n# Driver Code\r\nprint(check_isosceles(1,2,3))\r\nprint(check_isosceles(3,4,5))\r\nprint(check_isosceles(3,4,6))\r\nprint(check_isosceles(3,5,6))\r\nprint(check_isosceles(1,5,6))\r\nprint(check_isosceles(1,2,4))\r\nprint(check_isosceles(1,2,3))","votes":null},{"text":"\r\n    if x==y==z:\r\n        print(\"Triangle is scalene\")\r\n    elif x==y or x==z or y==z:\r\n        print(\"Triangle is isosceles\")\r\n    else:\r\n        print(\"Triangle is not isosceles\")\r\n    \r","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not scalene\")\r\n\r","votes":null},{"text":"\r\n    if x == y == z:\r\n        print('isosceles')\r\n    elif x == y!= z or x == z!= y or y == z!= x:\r\n        print('scalene')\r\n    else:\r\n        print('not scalene')\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"This is an isosceles triangle.\")\r\n    elif x!=y and y!=z and x!=z:\r\n        print(\"This is an scalene triangle.\")\r\n    else:\r\n        print(\"This is not a triangle.\")\r\n\r","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        print(\"Scalene\")\r\n    elif x!= y and y!= z and x!= z:\r\n        print(\"Isosceles\")\r\n    else:\r\n        print(\"Not a triangle\")\r\n\r\n\r","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print(f\"The triangle is isosceles\")\r\n\r","votes":null},{"text":"\r\n    if(x==y or x==z or y==z):\r\n        print(\"Scalene\")\r\n    elif(x+y>z and x+z>y and y+z>x):\r\n        print(\"Isosceles\")\r\n    else:\r\n        print(\"Not an isosceles triangle\")\r\n\r\nif __name__ == \"__main__\":\r\n    try:\r\n        x = float(input(\"Enter the length of side 1: \"))\r\n        y = float(input(\"Enter the length of side 2: \"))\r\n        z = float(input(\"Enter the length of side 3: \"))\r\n        check_isosceles(x,y,z)\r\n    except ValueError:\r\n        print(\"Wrong input!\")\r\n    ","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"Scalene\")\r\n    elif x>=y+z or y>=x+z or z>=x+y:\r\n        print(\"Not a triangle\")\r\n    else:\r\n        print(\"Equilateral\")\r\n\r","votes":null},{"text":"\r\n    if x+y > z and x+z > y and y+z > x:\r\n        print(\"Scalene\")\r\n    elif x+y == z or x+z == y or y+z == x:\r\n        print(\"Equilateral\")\r\n    else:\r\n        print(\"Not Scalene\")\r\n\r\n\r","votes":null},{"text":"\r\n    if x==y==z or x==z==y or y==z==x:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not Scalene\")\r\n        \r\ncheck_isosceles(3,4,5)\r\ncheck_isosceles(3,4,6)\r\ncheck_isosceles(3,5,6)\r\ncheck_isosceles(5,6,7)\r\ncheck_isosceles(6,7,8)\r\ncheck_isosceles(7,8,9)","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        print('The triangle is scalene.')\r\n    else:\r\n        print('The triangle is not scalene.')\r\n\r\n# Write a function to print check if the triangle is a right triangle or not.\r","votes":null},{"text":"\r\n    if (x+y>z and x+z>y and y+z>x):\r\n        print(\"scalene\")\r\n    else:\r\n        print(\"not scalene\")\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not Scalene\")\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print('Scalene')\r\n    else:\r\n        print('Not Scalene')\r\n\r","votes":null},{"text":"\r\n    if x==y==z:\r\n        print('The triangle is equilateral')\r\n    elif x==y or x==z or y==z:\r\n        print('The triangle is isosceles')\r\n    else:\r\n        print('The triangle is scalene')\r\n\r\ncheck_isosceles(1,2,3)\r\ncheck_isosceles(1,1,2)\r\ncheck_isosceles(1,2,1)\r\ncheck_isosceles(2,2,2)\r\ncheck_isosceles(3,4,5)","votes":null},{"text":"\r\n    if x==y or x==z or y==z:\r\n        print(\"The triangle is isoceles\")\r\n    else:\r\n        print(\"The triangle is equilateral\")\r\n\r\n\r\ncheck_isosceles(4,4,4)\r\ncheck_isosceles(1,1,1)\r\ncheck_isosceles(1,2,3)\r\ncheck_isosceles(2,3,4)\r\ncheck_isosceles(3,4,5)\r\ncheck_isosceles(4,5,6)\r\ncheck_isosceles(5,6,7)\r\ncheck_isosceles(6,7,8)\r\ncheck_isosceles(7,8,9)\r\ncheck_isosceles(8,9,10)\r\ncheck_isosceles(9,10,11)\r\ncheck_isosceles(10,11,12)\r\ncheck_isosceles(11,12,13)\r\ncheck_isosceles(12,13,14)\r\ncheck_isosceles(13,14,15)\r\ncheck_isosceles(14,15,16)\r\ncheck_isosceles(15,16,17)\r\ncheck_isosceles(16,17,18)\r\ncheck_isosceles(17,18,19)\r\ncheck_isosceles(18,19,20)\r\n\r\n# + [markdown] id=\"51Q02p2u4325\" colab_type=\"text\"\r\n# ## 3. Write a Python program to find the volume of a sphere with diameter 12 cm. Formula: V=4\/3*\u03c0*r3\r\n#\r\n# ## 4. Write a Python program to find the volume of a sphere with diameter 20 cm. Formula: V=4\/3*\u03c0*r3\r\n#\r\n# ## ","votes":null},{"text":"\r\n    if x+y>z and x+z>y and y+z>x:\r\n        print(True)\r\n    else:\r\n        print(False)\r\n\r\ncheck_isosceles(3,4,5)\r\ncheck_isosceles(1,2,3)\r\ncheck_isosceles(6,7,8)","votes":null},{"text":"\r\n\r\n    if x == y or y == z or x == z:\r\n        print(\"Scalene Triangle\")\r\n    elif x!= y and x!= z and y!= z:\r\n        print(\"Isosceles Triangle\")\r\n    else:\r\n        print(\"Not a triangle\")\r\n\r\nif __name__ == \"__main__\":\r\n    x = int(input(\"Enter the length of side a: \"))\r\n    y = int(input(\"Enter the length of side b: \"))\r\n    z = int(input(\"Enter the length of side c: \"))\r\n\r\n    check_isosceles(x,y,z)\r\n","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print('The triangle is scalene.')\r\n    else:\r\n        print('The triangle is not scalene.')\r\n\r","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        print(\"Scalene\")\r\n    elif x!= y and x!= z and y!= z:\r\n        print(\"Not a triangle\")\r\n    elif  x == y and y == z and x!= z:\r\n        print(\"Equilateral\")\r\n    else:\r\n        print(\"Isosceles\")\r\n\r","votes":null},{"text":"\r\n    if x+y<=z and x+z<=y and y+z<=x:\r\n        print('The triangle is isosceles')\r\n    else:\r\n        print('The triangle is scalene')\r\n\r","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        print('Scalene')\r\n    elif x!= y and y!= z and x!= z:\r\n        print('Not a triangle')\r\n    else:\r\n        print('Equilateral')\r\n        \r\ncheck_isosceles(3,4,4)\r\ncheck_isosceles(3,4,5)\r\ncheck_isosceles(3,5,4)\r\ncheck_isosceles(5,4,3)\r\ncheck_isosceles(5,5,5)\r\ncheck_isosceles(5,5,6)\r\ncheck_isosceles(5,6,5)\r\ncheck_isosceles(6,5,5)\r\ncheck_isosceles(6,6,6)\r\ncheck_isosceles(6,6,7)\r\ncheck_isosceles(6,7,6)\r\ncheck_isosceles(7,6,6)\r\ncheck_isosceles(7,7,7)\r\ncheck_isosceles(7,7,8)\r\ncheck_isosceles(7,8,7)\r\ncheck_isosceles(8,7,7)\r\ncheck_isosceles(8,8,8)\r\ncheck_isosceles(8,8,9)\r\ncheck_isosceles(8,9,8)\r\ncheck_isosceles(9,8,8)\r\ncheck_isosceles(9,9,9)\r\ncheck_isosceles(9,9,10)\r\ncheck_isosceles(9,10,9)\r\ncheck_isosceles(10,9,9)\r\ncheck_isosceles(10,10,10)\r\ncheck_isosceles(10,10,11)\r\ncheck_isosceles(10,11,10)\r\ncheck_isosceles(11","votes":null},{"text":"\r\n    if x+y>=z and x+z>=y and y+z>=x:\r\n        print(\"Scalene\")\r\n    elif x+y<z or x+z<y or y+z<x:\r\n        print(\"Not valid\")\r\n    else:\r\n        print(\"Equilateral\")\r\n\r\nprint(\"Please enter edge 1\")\r\nx = int(input())\r\nprint(\"Please enter edge 2\")\r\ny = int(input())\r\nprint(\"Please enter edge 3\")\r\nz = int(input())\r\ncheck_isosceles(x,y,z)\r\n","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not Scalene\")\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Hello World!\")\r\n    check_scalene(1,1,1)\r\n    check_isosceles(1,1,1)\r\n","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not Scalene\")\r\n\r","votes":null},{"text":"\r\n    a = x+y\r\n    b = y+z\r\n    c = x+z\r\n    \r\n    if (a==b) or (a==c) or (b==c):\r\n        print(\"Triangle is scalene\")\r\n    else:\r\n        print(\"Triangle is not scalene\")\r\n        \r\ncheck_isosceles(4,3,4)\r\ncheck_isosceles(2,3,4)\r\ncheck_isosceles(4,4,4)\r\ncheck_isosceles(4,4,5)\r\ncheck_isosceles(4,4,0)\r\ncheck_isosceles(4,3,1)\r\ncheck_isosceles(4,3,2)\r\ncheck_isosceles(4,3,3)\r\ncheck_isosceles(4,3,4)\r\ncheck_isosceles(4,3,5)\r\ncheck_isosceles(4,3,6)\r\ncheck_isosceles(4,3,7)\r\n","votes":null},{"text":"\r\n    if x==y+z or x+y==z or x+z==y:\r\n        print(\"The triangle is scalene.\")\r\n    elif x!=y+z and x+y!=z and x+z!=y:\r\n        print(\"The triangle is isosceles.\")\r\n    else:\r\n        print(\"The triangle is equilateral.\")\r\n\r\n\r","votes":null},{"text":"\r\n    if (x==y) and (y!=z):\r\n        print(\"Scalene\")\r\n    elif (x==z) and (z!=y):\r\n        print(\"Scalene\")\r\n    elif (y==z) and (z!=x):\r\n        print(\"Scalene\")\r\n    elif (x!=y) and (y!=z) and (z!=x):\r\n        print(\"Not Scalene\")\r\n    elif (x==y) and (y==z):\r\n        print(\"Equilateral\")\r\n    elif (x==y) and (y>z):\r\n        print(\"Isosceles\")\r\n    elif (y==z) and (z>x):\r\n        print(\"Isosceles\")\r\n    elif (z==x) and (x>y):\r\n        print(\"Isosceles\")\r\n    else:\r\n        print(\"Not Valid\")\r\n\r\ncheck_isosceles(5,8,10)\r\ncheck_isosceles(5,8,10)\r\ncheck_isosceles(5,8,11)\r\ncheck_isosceles(5,5,5)\r\ncheck_isosceles(5,5,6)\r\ncheck_isosceles(5,5,7)\r\ncheck_isosceles(5,6,7)","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        print('Scalene')\r\n    elif x!= y!= z:\r\n        print('Not a scalene triangle.')\r\n    else:\r\n        print('Equilateral triangle.')\r\n\r\n\r","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"Scalene\")\r\n    elif x<y+z and y<x+z and z<x+y:\r\n        print(\"Isosceles\")\r\n    else:\r\n        print(\"Not Isosceles\")\r\n\r","votes":null},{"text":"\r\n    if x+y+z == 2:\r\n        print('Scalene')\r\n    elif x+y >= 2 and x+z >= 2 and y+z >= 2:\r\n        print('Isosceles')\r\n    elif x+y >= 2 and x+z >= 2 and x+y > 2 and y+z > 2 and z > 2:\r\n        print('Right-angled')\r\n    else:\r\n        print('Not a triangle')\r\n\r","votes":null},{"text":"\r\n    if x+y>=z and x+z>=y and y+z>=x:\r\n        print(\"Scalene\")\r\n    elif x==y==z:\r\n        print(\"Equilateral\")\r\n    else:\r\n        print(\"Not a triangle\")\r\nprint(\"Enter the sides of the triangle\")\r\na=float(input(\"Side 1: \"))\r\nb=float(input(\"Side 2: \"))\r\nc=float(input(\"Side 3: \"))\r\ncheck_isosceles(a,b,c)","votes":null},{"text":"\r\n    if x == y or y == z or z == x:\r\n        print(\"Scalene\")\r\n    elif x!= y!= z:\r\n        print(\"Not scalene\")\r\n\r\nif __name__ == '__main__':\r\n    x = float(input(\"Enter the length of side A: \"))\r\n    y = float(input(\"Enter the length of side B: \"))\r\n    z = float(input(\"Enter the length of side C: \"))\r\n    check_isosceles(x,y,z)","votes":null},{"text":"\r\n    if x+y>z and x+z>y and y+z>x:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not Scalene\")\r\n\r\n\"\"\"\r\nFunction Name    : Main Function\r\nFunction Date    : 01\/09\/2021\r\nFunction Author  : <NAME> (Student)\r\nInput            : N\/A\r\nOutput           : N\/A\r\n\"\"\"\r\nif __name__ == '__main__':\r\n    a=int(input(\"Enter a\"))\r\n    b=int(input(\"Enter b\"))\r\n    c=int(input(\"Enter c\"))\r\n    check_isosceles(a,b,c)\r\n    \r\n","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        print(\"Scalene\")\r\n    elif x!= y and y!= z and x!= z:\r\n        print(\"Not a Triangle\")\r\n\r","votes":null},{"text":"\r\n    if x==y and x!=z and y!=z:\r\n        print('Scalene')\r\n    elif x==y or x==z or y==z:\r\n        print('Equilateral')\r\n    else:\r\n        print('Isosceles')\r\n\r\nprint('Enter three numbers:')\r\nx=int(input())\r\ny=int(input())\r\nz=int(input())\r\ncheck_isosceles(x,y,z)\r\n","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"Triangle is scalene\")\r\n    else:\r\n        print(\"Triangle is not scalene\")\r\n\r","votes":null},{"text":"\r\n    if (x == y!= z) and (x!= y == z) and (x == y!= z):\r\n        print(\"Triangle is scalene.\")\r\n    else:\r\n        print(\"Triangle is not scalene.\")\r\n\r\ncheck_isosceles(3,4,5)\r\ncheck_isosceles(3,4,3)\r\ncheck_isosceles(3,3,4)\r\ncheck_isosceles(4,3,3)\r\ncheck_isosceles(5,5,5)\r\n","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print(\"Scalene Triangle\")\r\n    elif x + y <= z or x + z <= y or y + z <= x:\r\n        print(\"Not Scalene Triangle\")\r\n    else:\r\n        print(\"It is an Equilateral Triangle\")\r\n\r","votes":null},{"text":"\r\n    if x == y == z or x == y or x == z or y == z:\r\n        print(\"It is not a triangle.\")\r\n    elif x + y > z and x + z > y and y + z > x:\r\n        print(\"It is an isosceles.\")\r\n    else:\r\n        print(\"Not scalene.\")\r\n\r\n# Test Cases\r\ncheck_isosceles(5,5,5)\r\ncheck_isosceles(5,5,6)\r\ncheck_isosceles(5,5,4)\r\ncheck_isosceles(5,5,1)\r\ncheck_isosceles(5,5,10)","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print('Scalene Triangle')\r\n    else:\r\n        print('Not a Scalene Triangle')\r\n\r\ncheck_isosceles(1,1,1)\r\ncheck_isosceles(1,1,2)\r\ncheck_isosceles(1,2,3)\r\ncheck_isosceles(2,2,3)\r\ncheck_isosceles(2,2,1)\r\ncheck_isosceles(2,3,3)\r\ncheck_isosceles(3,3,2)\r\ncheck_isosceles(3,2,3)\r\ncheck_isosceles(3,2,2)\r\ncheck_isosceles(1,2,1)\r\n","votes":null},{"text":"\r\n    if x==y or x==z or y==z:\r\n        print(\"Triangle is isoceles.\")\r\n    elif x!=y and x!=z and y!=z:\r\n        print(\"Triangle is equilateral.\")\r\n    else:\r\n        print(\"Triangle is scalene.\")\r\n        \r\ncheck_isosceles(3,4,5)\r\n```\r\n### Output\r\n```\r\nTriangle is isoceles.\r\n```\r\n## Example 035\r\n```python\r\n#Program to find the area of triangle using Heron's formula\r\n'''\r\nDeveloped by: <NAME>\r\nRegisterNumber: 21004005\r\n'''\r\nimport math\r","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print('The Triangle is Scalene')\r\n    else:\r\n        print('The Triangle is Not Scalene')\r\n\r\nprint('The Triangle is Isosceles')\r\ncheck_isosceles(2,2,2)\r\ncheck_isosceles(2,2,3)\r\ncheck_isosceles(2,3,3)\r\ncheck_isosceles(3,2,3)\r\ncheck_isosceles(3,3,2)\r\ncheck_isosceles(3,3,3)\r\n","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print(f\"{x} is an isosceles triangle\")\r\n    else:\r\n        print(f\"{x} is not an isosceles triangle\")\r\n\r\n\r\n\"\"\"\r\nWrite a function to check if the triangle is equilateral.\r\n\r\nReturn True if the triangle is equilateral, or False if it is not.\r\n\"\"\"\r","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        print('Scalene')\r\n    elif x == y or x == z or y == z:\r\n        print('Isosceles')\r\n    else:\r\n        print('Not a triangle')\r\n\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n\r\n\"\"\"Write a function to print check if the triangle is isosceles or not.\"\"\"\r","votes":null},{"text":"\r\n    if x==y or x==z or y==z:\r\n        print(\"Triangle is isosceles.\")\r\n    elif x+y>z or x+z>y or y+z>x:\r\n        print(\"Triangle is scalene.\")\r\n    else:\r\n        print(\"Triangle is not isosceles.\")\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        return print(\"Scalene\")\r\n    elif x!= y and x!= z and y!= z:\r\n        return print(\"Not a triangle\")\r\n    elif x == y:\r\n        return print(\"Isosceles\")\r\n    elif y == z:\r\n        return print(\"Isosceles\")\r\n    elif x == z:\r\n        return print(\"Isosceles\")\r\n\r\n\r\nx = int(input(\"Enter side 1: \"))\r\ny = int(input(\"Enter side 2: \"))\r\nz = int(input(\"Enter side 3: \"))\r\n\r\ncheck_isosceles(x,y,z)\r\n","votes":null},{"text":"\r\n    if x == y == z or x == z == y or y == z == x:\r\n        print(\"The triangle is an isoceles triangle.\")\r\n    else:\r\n        print(\"The triangle is a scalene triangle.\")\r\n\r","votes":null},{"text":"\r\n    if x==y and x!=z or y==z and y!=x or z==x and z!=y:\r\n        print(\"This is an isosceles triangle.\")\r\n    else:\r\n        print(\"This is an equilateral triangle.\")\r\n\r\n\r\ncheck_isosceles(3,4,5)\r\n\r\ncheck_isosceles(3,4,3)\r\n\r\ncheck_isosceles(3,3,3)\r\n\r\ncheck_isosceles(3,3,4)\r\n\r\ncheck_isosceles(4,4,3)\r\n\r\ncheck_isosceles(4,5,6)","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"scalene\")\r\n    elif x!=y and y!=z and x!=z:\r\n        print(\"not scalene\")\r\n    else:\r\n        print(\"equilateral\")\r\n\r\ncheck_isosceles(1,2,1)\r\ncheck_isosceles(2,2,2)\r\ncheck_isosceles(2,3,4)\r\ncheck_isosceles(1,3,2)\r\ncheck_isosceles(1,2,4)\r\n","votes":null},{"text":"\r\n    if x == y or x == z or y == z:\r\n        print(\"Triangle is scalene.\")\r\n    else:\r\n        print(\"Triangle is not scalene.\")\r\n        \r\ncheck_isosceles(1,2,3)\r\n```\r\n\r\n## Excercise 2 - Creating a Function to Convert Kilometers to Miles\r\n\r\nCreate a function that takes a `kilometer` value as an argument, and returns the corresponding `mile` value.\r\n\r\n### Solution\r\n\r\n```python\r","votes":null},{"text":"\r\n    if x==y or x==z or y==z:\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not scalene\")\r\n\r\ncheck_isosceles(5,6,7)\r\ncheck_isosceles(4,6,7)\r\ncheck_isosceles(4,4,7)\r\ncheck_isosceles(4,4,4)\r\n\r\n# + id=\"g7pY9v7f7-4d\" colab_type=\"code\" colab={\"base_uri\": \"https:\/\/localhost:8080\/\", \"height\": 34} outputId=\"24597f80-7c88-48a9-8125-1830b5b76401\"\r\nx=int(input(\"Enter the value of x:\"))\r\ny=int(input(\"Enter the value of y:\"))\r\nz=int(input(\"Enter the value of z:\"))\r\n\r\nif x<y and x<z:\r\n    print(\"The smallest number is x\")\r\nelif y<x and y<z:\r\n    print(\"The smallest number is y\")\r\nelse:\r\n    print(\"The smallest number is z\")\r\n\r\n# + id=\"yD3z0bYJ8I6h\" colab_type=\"code\" colab={\"base_uri\": \"https:\/\/localhost:8080\/\", \"height\": 34} outputId=\"676a03e7-702d-4d3d-c52b-7394063a7457\"\r\nx=int(input(\"Enter the value of x:\"))\r\ny=int(input(\"Enter the value of y:\"))\r\nz=int(input(\"Enter the value of z:\"))\r\n\r\nif x>y and x>z:\r\n    print(\"The largest number is x\")\r\nelif y>x and y>z:\r\n    print(\"The largest number is y\")\r\nelse:\r\n    print(\"The largest number is z\")\r\n\r\n# + id=\"j7X87e709W4J\" colab","votes":null},{"text":"\r\n    if x == y == z:\r\n        print(\"The triangle is scalene.\")\r\n    elif x == y or y == z or x == z or x + y > z:\r\n        print(\"The triangle is not scalene.\")\r\n    else:\r\n        print(\"The triangle is isosceles.\")\r\n\r\n# Driver Code\r\nx = int(input())\r\ny = int(input())\r\nz = int(input())\r\ncheck_isosceles(x,y,z)","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print (\"The triangle is Scalene\")\r\n    else:\r\n        print (\"The triangle is not Scalene\")\r\n\r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print(\"Scalene.\")\r\n    else:\r\n        print(\"Not scalene.\")\r\n\r\ncheck_isosceles(1,2,3)<jupyter_output><empty_output>","votes":null},{"text":"\r\n    print(x + y >= z and x + z >= y and y + z >= x)\r\n\r","votes":null},{"text":"\r\n    if (x+y>z) and (x+z>y) and (y+z>x):\r\n        print(\"Scalene\")\r\n    else:\r\n        print(\"Not Scalene\")\r\n\r","votes":null},{"text":"\r\n    if (x + y < z) and (x + z < y) and (y + z < x):\r\n        print('scalene')\r\n    elif (x + y == z) or (x + z == y) or (y + z == x):\r\n        print('equilateral')\r\n    else:\r\n        print('isoceles')\r\n\r","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        return \"Scalene triangle\"\r\n    elif x > y + z:\r\n        return \"Invalid triangle\"\r\n    else:\r\n        return \"Valid triangle\"\r\n\r","votes":null},{"text":"\r\n    if x==y==z:\r\n        print(\"This is an equilateral triangle\")\r\n    elif x==y or x==z or y==z:\r\n        print(\"This is an isosceles triangle\")\r\n    else:\r\n        print(\"This is a scalene triangle\")\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    print(\"Enter the length of the side of the triangle\")\r\n    x = float(input())\r\n    print(\"Enter the length of the other side of the triangle\")\r\n    y = float(input())\r\n    print(\"Enter the length of the third side of the triangle\")\r\n    z = float(input())\r\n    check_isosceles(x,y,z)","votes":null},{"text":"\r\n    if x == y or y == z or x == z:\r\n        return \"Scalene\"\r\n    elif x!= y or x!= z or y!= z:\r\n        return \"Not Scalene\"\r\n        \r","votes":null},{"text":"\r\n    if x==y or y==z or x==z:\r\n        print('Scalene Triangle')\r\n    else:\r\n        print('Not Scalene Triangle')\r\n\r\ncheck_isosceles(1,2,3)\r\ncheck_isosceles(1,2,4)\r\ncheck_isosceles(1,3,4)\r\ncheck_isosceles(2,2,4)\r\ncheck_isosceles(3,2,4)\r\ncheck_isosceles(4,2,4)\r\ncheck_isosceles(4,4,4)","votes":null}],"time":{"count":2.0,"avg":85608.27,"std":51282.6788892488,"cov":0.5990388416}}
{"id":524,"question":"def max_sum_increasing_subsequence(arr, n):\r\n    \"\"\"Write a function to find the sum of maximum increasing subsequence of the given array.\"\"\"","answers":[{"text":"\r\n    dp = [0]*(n + 1)\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if (arr[i] > arr[j] and dp[j] + arr[i] > dp[i]):\r\n                dp[i] = dp[j] + arr[i]\r\n\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    # arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    # arr = [2, 3, 4, 1, 2, 4, 5, 7, 10, 9]\r\n    # arr = [10, 10, 10, 10, 10]\r\n    # arr = [1, 5, 6, 1, 9, 1, 1, 1]\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # arr = [1, 1, 1, 1, 1]\r\n    # arr = [1, 2, 3, 4, 5, 6]\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n","votes":132101.004},{"text":"\r\n    # Write your code here\r\n    # initialize the array of sums\r\n    sums = [0] * n\r\n    sums[0] = arr[0]\r\n    # loop for all the elements\r\n    for i in range(1, n):\r\n        # loop for all the elements before the current element\r\n        for j in range(0, i):\r\n            # if current element is greater than the element before the current element\r\n            # then update the sum\r\n            if arr[i] > arr[j] and sums[i] < sums[j] + arr[i]:\r\n                sums[i] = sums[j] + arr[i]\r\n\r\n    # return the maximum sum\r\n    return max(sums)\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n","votes":134296.304},{"text":"\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    max_sum = dp[0]\r\n    for i in range(1, n):\r\n        dp[i] = 0\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[j] + arr[i] > dp[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\r\n","votes":143141.396},{"text":"\r\n\r\n    dp = [0] * n\r\n    ans = 0\r\n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n        ans = max(dp[i], ans)\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n                ans = max(dp[i], ans)\r\n\r\n    return ans\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(max_sum_increasing_subsequence([1, 3, 5, 2, 9, 6, 10], 7))\r\n    print(max_sum_increasing_subsequence([1, 3, 5, 2, 9, 6, 10], 8))\r\n","votes":157941.68},{"text":"\r\n    dp = [0] * n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[j] > arr[i]:\r\n                dp[j] = max(dp[j], dp[i] + arr[j])\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [2, 1, 5, 7, 2, 4, 8, 3, 1]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":158529.668},{"text":"\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    max_sum = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[j] + arr[i] > dp[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n        if dp[i] > max_sum:\r\n            max_sum = dp[i]\r\n    return max_sum\r\n\r\n\r\nprint(max_sum_increasing_subsequence([1, 3, 3, 7, 2, 4, 3, 3], 8))\r\n# 16\r\nprint(max_sum_increasing_subsequence([1, 8, 3, 2, 7, 1, 3, 1], 8))\r\n# 17\r\nprint(max_sum_increasing_subsequence([1, 5, 2, 3, 3, 2, 5, 1], 8))\r\n# 17\r\nprint(max_sum_increasing_subsequence([1, 5, 2, 3, 3, 2, 5, 1], 7))\r\n# 10\r\nprint(max_sum_increasing_subsequence([1, 5, 2, 3, 3, 2, 5, 1], 6))\r\n# 7\r\nprint(max_sum_increasing_subsequence([1, 5, 2, 3, 3, 2, 5, 1], 5))\r\n# 5\r\n\r\n\r\n# Time complexity O(n^2)\r\n\r\n\r","votes":206536.836},{"text":"\r\n    # Fill this in.\r\n    dp = [0 for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[i] < dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n    max_so_far = 0\r\n    for i in range(n):\r\n        if dp[i] > max_so_far:\r\n            max_so_far = dp[i]\r\n    return max_so_far\r\n\r\nif __name__ == \"__main__\":\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 5))\r\n","votes":230051.18},{"text":"\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_sum = max(max_sum, dp[i])\r\n\r\n    return max_sum\r\n\r\nprint(max_sum_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80], 8))\r\n","votes":237790.272},{"text":"\r\n    max_ending_here = 0\r\n    max_so_far = -sys.maxsize - 1\r\n    for i in range(1, n):\r\n        if arr[i] > arr[i - 1]:\r\n            max_ending_here += arr[i]\r\n        else:\r\n            max_ending_here = arr[i]\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i][j] = dp[i-1][j] + arr[i]\r\n            else:\r\n                dp[i][j] = dp[i][j+1]\r\n    return max(dp[n-1])\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], arr[i] + dp[i - 1])\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter the size of array: '))\r\n    arr = list(map(int, input().split()))\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    # Base Case\r\n    if n == 1:\r\n        return arr[0]\r\n        \r\n    # Initialize result\r\n    res = float('-inf')\r\n\r\n    # Initialize the left and right indexes\r\n    left = 0\r\n    right = 1\r\n\r\n    # Loop for all elements\r\n    for i in range(1, n):\r\n        # If the current element is greater than the previous element\r\n        # and the sum of the previous 2 elements is greater than or equal to the current element\r\n        # then update the result\r\n        if arr[i] > arr[left] and arr[i] >= arr[right]:\r\n            res = max(res, arr[i] + arr[left] + arr[right])\r\n            # Update the left and right indexes\r\n            left = i\r\n            right = i + 1\r\n\r\n        # If the current element is less than or equal to the previous element\r\n        # then update the right index\r\n        elif arr[i] <= arr[right]:\r\n            right = i + 1\r\n\r\n    # Return the result\r\n    return res\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    n = len(arr)\r\n    result = max_sum_increasing_subsequence(arr, n)\r\n    print(f\"The result is {result}\")\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i][j] + arr[i] > dp[i][i]:\r\n                dp[i][i] = dp[i][j] + arr[i]\r\n\r\n    max_sum = max(dp[n-1])\r\n\r\n    for i in range(n):\r\n        if dp[n-1][i] == max_sum:\r\n            max_sum_index.append(i)\r\n\r\n    return max_sum\r\n\r\nmax_sum_increasing_subsequence([10, 20, 30, 40, 10], 5)\r\n```\r\n\r\n**Time Complexity:** `O(n^2)`\r\n\r\n**Space Complexity:** `O(n^2)`\r\n\r\n## Solution 2\r\n\r\n### Description\r\n\r\n```\r\nGiven an array arr[] of N integers and a number x, find the maximum sum of a subarray of arr[] such that the sum is greater than x.\r\n```\r\n\r\n### Example\r\n\r\n```\r\nInput: arr[] = {10, 20, 30, 40, 10}, x = 5\r\nOutput: 50\r\n```\r\n\r\n```\r\nInput: arr[] = {10, 20, 30, 40, 10}, x = 15\r\nOutput: 100\r\n```\r\n\r\n### Constraints\r\n\r\n```\r\nN = 5\r\n```\r\n\r\n### Algorithm\r\n\r\nThis algorithm has two steps. The first step is to find the maximum subarray sum that is smaller than x. The second step is to find the maximum subarray sum that is greater than or equal to x.\r\n\r\n```py\r\n# Python3 program to find the maximum sum of a subarray of arr[] \r\n# such that the sum is greater than x. \r\n# arr[","votes":null},{"text":"\r\n    # Create a table to store the result for every index\r\n    table = [0] * n\r\n\r\n    # Initialize result\r\n    result = 0\r\n    for i in range(n):\r\n        # If the value at current index is smaller than the previous result and the value at previous index is also smaller,\r\n        # then update the result\r\n        if arr[i] < arr[table[i]] and arr[i] < result:\r\n            result = arr[i]\r\n            table[i] = i\r\n\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Input array\r\n    arr = [2, -1, 3, -4]\r\n    n = len(arr)\r\n\r\n    # Function call\r\n    result = max_sum_increasing_subsequence(arr, n)\r\n\r\n    # Print result\r\n    print(f\"Maximum sum in increasing subsequence is {result}\")\r\n","votes":null},{"text":"\r\n    # find the maximum sum ending at index i\r\n   ","votes":null},{"text":"\r\n    arr.sort()\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    max_sum = dp[0]\r\n    for i in range(1, n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if dp[i] > dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6], 6))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 8], 7))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 8, 9], 8))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 8, 9, 10], 9))\r\n","votes":null},{"text":"\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n    max_sum = arr[0]\r\n    for i in range(1, n):\r\n        dp[0][i] = arr[i]\r\n        for j in range(1, i + 1):\r\n            dp[j][i] = max(arr[i], dp[j][i - 1] + arr[i])\r\n        max_sum = max(max_sum, dp[0][i])\r\n    return max_sum\r\n\r\n\r\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 5))\r\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 8, 9], 7))\r\n","votes":null},{"text":"\r\n\r\n    # Base case\r\n    if n <= 1:\r\n        return arr[0]\r\n\r\n    # Create a table to store the maximum sum ending with the ith element\r\n    table = [0] * n\r\n\r\n    # Fill the table\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                table[i] = max(table[i], table[j] + arr[i])\r\n\r\n    # Return the maximum value\r\n    return max(table)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 3, 5, 4, 7]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    # Write your code here.\r\n    dp = [0] * (n + 1)\r\n    dp[0] = 0\r\n    max_sum = 0\r\n    for i in range(1, n + 1):\r\n        dp[i] = float(\"-inf\")\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n        if dp[i] > max_sum:\r\n            max_sum = dp[i]\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [2, -1, 3, 4, -1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1","votes":null},{"text":"\r\n    # Write your code here\r\n    return max(sum(arr[:i] + arr[i+1:]) for i in range(n))\r\n\r\n# Driver Code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n","votes":null},{"text":"\r\n    max_ending_here = 0\r\n    max_sub_so_far = 0\r\n    for i in range(n):\r\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\r\n        max_sub_so_far = max(max_ending_here, max_sub_so_far)\r\n    return max_sub_so_far\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i-1]+arr[i])\r\n    return max(dp)","votes":null},{"text":"\r\n    dp = [0] * n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n    return max(dp)\r\n\r\n\r\narr = [2, 4, 6, 1, 3, 5, 7, 8, 9, 10]\r\nprint(max_sum_increasing_subsequence(arr, 10))\r\n\r\narr = [2, 4, 6, 1, 3, 5, 7, 8, 9, 10]\r\nprint(max_sum_increasing_subsequence_one_pass(arr, 10))","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n\r\n    for i in range(n):\r\n        max_ending_here = max(arr[i], max_ending_here+arr[i])\r\n        max_so_far = max(max_ending_here, max_so_far)\r\n\r\n    return max_so_far\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        arr[i] = max(arr[i], arr[i+1])\r\n    return max(arr)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 1, 4, 5, 2, 6, 2, 5]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    res = 0\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n        res = max(res, dp[i][i])\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[j][i-1] + arr[i] > dp[i][i]:\r\n                dp[i][i] = dp[j][i-1] + arr[i]\r\n                res = max(dp[i][i], res)\r\n    return res\r\n\r\n\r\nprint(max_sum_increasing_subsequence([1, 3, 5, 8, 9, 10], 6))\r\n# 19\r\nprint(max_sum_increasing_subsequence([1, 3, 5, 8, 10], 5))\r\n# 15\r\nprint(max_sum_increasing_subsequence([1, 3, 5, 8, 10], 4))\r\n# 12\r\nprint(max_sum_increasing_subsequence([1, 3, 5, 8, 10], 3))\r\n# 10\r\nprint(max_sum_increasing_subsequence([1, 3, 5, 8, 10], 2))\r\n# 8\r\nprint(max_sum_increasing_subsequence([1, 3, 5, 8, 10], 1))\r\n# 0\r\nprint(max_sum_increasing_subsequence([], 0))\r\n# 0\r\n","votes":null},{"text":"\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n    max_sum = 0\r\n\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n\r\n    for gap in range(1, n):\r\n        for i in range(n - gap):\r\n            j = i + gap\r\n\r\n            if arr[j] > arr[i] and dp[i + 1][j - 1] < arr[j]:\r\n                dp[i][j] = arr[j]\r\n\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if dp[i][j] > max_sum:\r\n                max_sum = dp[i][j]\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 100]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    # initializing the dp array\r\n    dp = [[-1 for i in range(n)] for j in range(n)]\r\n    # storing the sum of the subsequence in a temporary variable\r\n    sum_of_subsequence = 0\r\n    # loop for the length of the array\r\n    for i in range(n):\r\n        # defining the starting index of the subsequence\r\n        starting_index = i\r\n        # initializing the max sum of the subsequence in the current iteration\r\n        max_sum_of_subsequence = 0\r\n        # loop for the remaining elements of the array\r\n        for j in range(i+1, n):\r\n            # if the current element is more than the previous element\r\n            if arr[j] > arr[i]:\r\n                # updating the sum of the subsequence in the current iteration\r\n                sum_of_subsequence += arr[j]\r\n                # updating the max sum of the subsequence in the current iteration\r\n                max_sum_of_subsequence = max(max_sum_of_subsequence, sum_of_subsequence)\r\n                # updating the starting index of the subsequence in the current iteration\r\n                starting_index = j\r\n        # storing the sum of the subsequence in the dp array\r\n        dp[i][0] = max_sum_of_subsequence\r\n        # storing the starting index of the subsequence in the dp array\r\n        dp[i][1] = starting_index\r\n    # returning the sum of the maximum increasing subsequence\r\n    return max(sum(dp[i][0] for i in range(n)) for i in range(n))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \"\"\"Taking the array as the input from the user\"\"\"\r\n    arr = input(\"Enter the array seperated by space: \").split()\r\n    arr = [int(i) for i in arr]\r\n    print(f\"The maximum sum of increasing subsequence is {max_sum_increasing_subsequence(arr, len(arr))}\")","votes":null},{"text":"\r\n    # write your code here\r\n    if n == 1:\r\n        return arr[0]\r\n    max_sum = max(arr[0], arr[1])\r\n    for i in range(2, n):\r\n        max_sum = max(max_sum, arr[i] + max(arr[i], arr[i - 1]))\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))","votes":null},{"text":"\r\n    dp = [0] * (n + 1)\r\n    dp[0] = 0\r\n    max_so_far = 0\r\n    for i in range(1, n + 1):\r\n        dp[i] = arr[0]\r\n        max_so_far = max(max_so_far, dp[i])\r\n        for j in range(1, i):\r\n            if arr[j] > arr[i] and dp[j] + arr[i] > dp[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n                max_so_far = max(max_so_far, dp[i])\r\n    return max_so_far\r\n\r\n\r\nprint('Maximum sum of increasing subsequence is:'+\r\n      str(max_sum_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60], 8)))\r\nprint('Maximum sum of increasing subsequence is:'+\r\n      str(max_sum_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60], 9)))\r\nprint('Maximum sum of increasing subsequence is:'+\r\n      str(max_sum_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60], 10)))\r\nprint('Maximum sum of increasing subsequence is:'+\r\n      str(max_sum_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60], 11)))\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    if n == 1:\r\n        return arr[0]\r\n    dp = [1 for _ in range(n)]\r\n    for i in range(1, n):\r\n        dp[i] = 0\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    max_sum = 0\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n        max_sum = max(max_sum, arr[i])\r\n    for length in range(2, n + 1):\r\n        for i in range(n - length + 1):\r\n            j = i + length - 1\r\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\r\n            for k in range(i + 1, j):\r\n                if dp[i][k] < dp[i][j] and arr[k] > arr[j]:\r\n                    dp[i][j] = dp[i][k] + arr[j]\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n\r\n    # Base Case\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n\r\n    # Iterative Approach\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[j] < arr[i] and dp[j][i] + arr[i] > dp[i][i]:\r\n                dp[i][i] = dp[j][i] + arr[i]\r\n\r\n    # Print the maximum sum\r\n    return max(dp[i][i] for i in range(n))\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 15, 5, 2, 1]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    # dp[i][j] means the sum of the subarray arr[i..j]\r\n    # dp[i][j] = dp[i+1][j] + arr[i] if arr[i+1..j] is a max sum subarray\r\n    # dp[i][j] = dp[i][j-1] + arr[i] if arr[i..j-1] is a max sum subarray\r\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\r\n    max_sum = max_sum_ending_at_i = arr[0]\r\n    for i in range(n):\r\n        dp[i][i + 1] = arr[i]\r\n    for i in range(n - 1):\r\n        for j in range(i + 1, n + 1):\r\n            dp[i][j] = max(dp[i][j], dp[i][j - 1] + arr[j])\r\n            dp[i][j] = max(dp[i][j], dp[i + 1][j] + arr[j])\r\n            max_sum_ending_at_i = max(max_sum_ending_at_i, dp[i][j])\r\n    return max_sum_ending_at_i\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 10]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i][j] == 0:\r\n                dp[i][j] = dp[j][i] + 1\r\n    if dp[0][0] == 0:\r\n        return 0\r\n    return max(dp[0][0], dp[0][1])\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    # Your code here\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    max_sum = dp[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i] + dp[i - 1], dp[i])\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6], 6))\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n17\r\n```\r\n\r\n**Constraints**\r\n\r\n- `1 <= n <= 500`\r\n- `1 <= arr[i] <= 10^4`\r\n\r\n## 4. [Longest palindromic substring](https:\/\/github.com\/SaurabhGoel26\/Hacktoberfest-CP\/blob\/main\/0-DSA\/0-DSA\/strings\/longest_palindromic_substring.py)\r\n\r\n**Question**\r\n\r\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\r\n\r\n**Example 1:**\r\n\r\n**Input:** s = \"babad\"\r\n\r\n**Output:** \"bab\"\r\n\r\n**Note:** \"aba\" is also a valid answer.\r\n\r\n**Example 2:**\r\n\r\n**Input:** s = \"cbbd\"\r\n\r\n**Output:** \"bb\"\r\n\r\n**Solution**\r\n\r\n```python\r\n# Python3 program to find the longest palindromic\r\n# substring in a string\r\n\r\n# Function to return the length of\r\n# the longest palindromic substring\r","votes":null},{"text":"\r\n\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    i = 0\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[j][i] < dp[j][i + 1]:\r\n                dp[j][i + 1] = dp[j][i] + 1\r\n    return max(sum(row) for row in dp)\r\n\r\n\r","votes":null},{"text":"\r\n    # If the array is empty or has only one element,\r\n    # then it is a single increasing subsequence.\r\n    if n == 1 or arr[0] < arr[n - 1]:\r\n        return 1\r\n    # If the first element is greater than the last element,\r\n    # then it is not a subsequence.\r\n    if arr[0] > arr[n - 1]:\r\n        return 0\r\n    # If the array size is 2, then the maximum sum\r\n    # can be either arr[0] or arr[1].\r\n    if n == 2:\r\n        return arr[0] + arr[1]\r\n    # If the array size is 3, then the maximum sum\r\n    # can be either arr[0], arr[1] or arr[2].\r\n    if n == 3:\r\n        return max(arr[0] + arr[2], arr[1] + arr[2], arr[0] + arr[1])\r\n    # Initialize the table to 0.\r\n    dp = [0] * n\r\n    # Initialize the value of the first element in\r\n    # the first row.\r\n    dp[0] = arr[0]\r\n    # Initialize the value of the last element in the\r\n    # last row.\r\n    dp[n - 1] = arr[n - 1]\r\n    # Populate the remaining cells in the table\r\n    # in bottom-up manner.\r\n    for i in range(1, n):\r\n        # If the current element is greater than the\r\n        # element on the left, then include the current\r\n        # element in the subarray.\r\n        if arr[i] > arr[i - 1]:\r\n            dp[i] = dp[i - 1] + arr[i]\r\n        # Else, if the current element is greater than\r\n        # the element on the right, then include the\r\n        # current element in the subarray.\r\n        elif arr[i] > arr[i + 1]:\r\n            dp[i] = dp[i + 1] + arr[i]\r\n        # Else, the current element is smaller than the\r\n        # element on the left and right, so the maximum sum\r\n        # lies between the elements on the left and right.\r\n        else:\r\n            dp[i] = max(d","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    max_sum = 0\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n        for j in range(i+1, n):\r\n            dp[i][j] = max(dp[i][j], dp[i][j-1] + arr[j])\r\n            max_sum = max(max_sum, dp[i][j])\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    lis = [0] * n\r\n    lis[0] = arr[0]\r\n    for i in range(1, n):\r\n        lis[i] = max(lis[i - 1], arr[i])\r\n    return max(lis)\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 70]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    # Your code goes here\r\n    # arr[n] is the sum of the maximum increasing subsequence of arr[:n]\r\n    # dp[i] is the sum of the maximum increasing subsequence of arr[:i]\r\n    # It is used to store the max sum of the maximum increasing subsequence of arr[:i]\r\n    dp = [0 for _ in range(n)]\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_sum = max(max_sum, dp[i])\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] <= dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n    return max_sum\r\n\r\nif __name__ == '__main__':\r\n    test_cases = int(input())\r\n    for test in range(test_cases):\r\n        n = int(input())\r\n        arr = list(map(int, input().split()))\r\n        print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    max_ending = arr[0]\r\n    max_ending_sum = arr[0]\r\n\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i - 1] + arr[i])\r\n        max_ending_sum = max(dp[i], max_ending_sum)\r\n        max_ending = max(dp[i], max_ending)\r\n\r\n    return max_ending_sum\r\n\r\n\r\nprint(max_sum_increasing_subsequence([1, 7, 1, 1, 1, 1, 1, 1], 7))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    # return max(max_sum(arr, i, j) for i in range(n) for j in range(i+1, n))\r\n    max_sum = 0\r\n    for i in range(n):\r\n        dp = [0] * n\r\n        dp[i] = arr[i]\r\n        for j in range(i+1, n):\r\n            dp[j] = max(dp[j], arr[j] + dp[j-1])\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    # Fill this in.\r\n    # O(n^2) time | O(n) space\r\n    # dp[i][j] is the maximum sum of increasing subsequence ending at arr[i] and arr[j]\r\n    # Initialize first row and column to 0\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            # If arr[i] is smaller than arr[j], update dp[i][j] by adding arr[i] to dp[j][i]\r\n            if arr[i] < arr[j]:\r\n                dp[i][j] = dp[j][i] + arr[i]\r\n            else:\r\n                dp[i][j] = dp[j][i]\r\n\r\n    # Find the maximum sum of increasing subsequence ending at arr[i]\r\n    # Initialize first row and column to 0\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_sum = max(dp[i][i], max_sum)\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    dp[0][0] = arr[0]\r\n    sum = dp[0][0]\r\n    for i in range(1, n):\r\n        dp[0][i] = arr[i]\r\n        if arr[i] > arr[0]:\r\n            sum += dp[0][i]\r\n        else:\r\n            sum = arr[i]\r\n    for i in range(1, n):\r\n        for j in range(1, n):\r\n            if arr[i] > arr[j]:\r\n                dp[i][j] = dp[i][j - 1] + arr[i]\r\n            else:\r\n                dp[i][j] = arr[i]\r\n                if dp[j][i] + arr[i] > dp[i][j]:\r\n                    dp[i][j] = dp[j][i] + arr[i]\r\n    return sum\r\n\r\n\r\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 5))\r\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 6))\r\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 7))\r\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5], 8))\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    dp = [[0 for j in range(n)] for i in range(n)]\r\n    dp[0][0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[0][i] = 1 if arr[0] < arr[i] else 0\r\n    for i in range(1, n):\r\n        for j in range(1, n):\r\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if arr[j] > arr[j-1] else max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\r\n    return max(max(dp[i][j] for j in range(n)), max(dp[i][j] for i in range(n)))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n\r\n    dp = [[0] * n for i in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i][j] = dp[i][j] + dp[j][i]\r\n\r\n    max_sum = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if dp[i][j] > max_sum:\r\n                max_sum = dp[i][j]\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [2, 1, 5, 2, 3, 2]\r\n    n = len(arr)\r\n\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n\r\n    dp = [0] * n\r\n    for i in range(n):\r\n        dp[i] = arr[i]\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 8))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 7))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 6))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\r\n    print(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], 1))\r\n    print(max_sum_i","votes":null},{"text":"\r\n    # Creating a 2D array to store the DP values\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n\r\n    # Initializing the first row\r\n    dp[0][0] = arr[0]\r\n\r\n    # Calculating the DP values\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i][j] < dp[i - 1][j] + arr[i]:\r\n                dp[i][j] = dp[i - 1][j] + arr[i]\r\n\r\n    # Finding the maximum sum\r\n    max_sum = dp[n - 1][n - 2]\r\n\r\n    # Finding the starting index of maximum sum\r\n    start_index = n - 2\r\n    for i in range(n - 2, -1, -1):\r\n        if max_sum < dp[i][i]:\r\n            max_sum = dp[i][i]\r\n            start_index = i\r\n\r\n    # Printing the result\r\n    print(\"Maximum sum is: \", max_sum)\r\n    print(\"The starting index of maximum sum is: \", start_index)\r\n\r\n    # Returning the maximum sum\r\n    return max_sum\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nn = len(arr)\r\n\r\nmax_sum_increasing_subsequence(arr, n)\r\n","votes":null},{"text":"\r\n\r\n    # Initialize dp[i] with the value 0 in first i elements\r\n    # We can either take it as 0 or add the value of current index\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n\r\n    # Initialize sum as 0\r\n    sum = 0\r\n\r\n    # Iterate for all elements\r\n    for i in range(1, n):\r\n\r\n        # If current element is greater than the previous element\r\n        # add the current element to the sum\r\n        if arr[i] > arr[i - 1]:\r\n            sum += arr[i]\r\n\r\n        # If current element is less than the previous element\r\n        # update the value of sum\r\n        else:\r\n            sum = arr[i]\r\n\r\n        # Update the value of dp[i]\r\n        # with the maximum of sum and\r\n        # the value of dp[i-1]\r\n        dp[i] = max(sum, dp[i - 1])\r\n\r\n    # Return the max sum\r\n    return max(dp)\r\n\r\n\r\n# Driver Code\r\narr = [3, 2, 6, 4, 5]\r\nn = len(arr)\r\n\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n# This code is contributed by <NAME>\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if j == 0 or i == 0:\r\n                dp[i][j] = arr[i][j]\r\n            else:\r\n                dp[i][j] = max(arr[i][j], arr[i-1][j], arr[i][j-1]) + dp[i-1][j]\r\n\r\n    return max(dp[n-1])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]\r\n    n = 3\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n    dp[0][0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i][0] = arr[i]\r\n        for j in range(1, i + 1):\r\n            if arr[i] > arr[j]:\r\n                dp[i][j] = dp[i][j-1] + arr[i]\r\n            else:\r\n                dp[i][j] = dp[i][j-1]\r\n    max_sum = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if dp[i][j] > max_sum:\r\n                max_sum = dp[i][j]\r\n    return max_sum\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n    dp[0][0] = arr[0]\r\n    max_sum = arr[0]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i][j] + arr[i] > dp[i][j + 1]:\r\n                dp[i][j + 1] = dp[i][j] + arr[i]\r\n        max_sum = max(max_sum, dp[i][-1])\r\n    return max_sum\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, -2, 5, 2, 15, 5, 1, -1, 10]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    max_sum = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i-1] + arr[i])\r\n        max_sum = max(dp[i], max_sum)\r\n    return max_sum\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i - 1] + arr[i])\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n    for gap in range(1, n):\r\n        for i in range(n - gap):\r\n            j = i + gap\r\n            dp[i][j] = max(arr[j] - arr[i], dp[i + 1][j]) + arr[i]\r\n    return max(dp[0][n - 1], dp[1][n - 2], dp[2][n - 3], dp[3][n - 4], dp[4][n - 5])\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [3, 10, 2, -1, 6, 8, 5]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    res = 0\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], arr[i] + dp[i - 1])\r\n        res = max(res, dp[i])\r\n    return res\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    dp = [[0] * n for _ in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i][j] = dp[i - 1][j] + arr[j]\r\n    max_sum = float(\"-inf\")\r\n    for i in range(n):\r\n        if max_sum < dp[n - 1][i]:\r\n            max_sum = dp[n - 1][i]\r\n    return max_sum\r\n\r\n\r\nprint(max_sum_increasing_subsequence([10, 15, 20, 25, 30, 35, 40, 45], 8))\r\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6], 6))\r\nprint(max_sum_increasing_subsequence([10, 15, 20, 25, 30, 35, 40, 45], 10))\r\nprint(max_sum_increasing_subsequence([1, 2], 2))\r\nprint(max_sum_increasing_subsequence([10, 20, 30, 40, 50, 60], 6))\r\nprint(max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\r\n","votes":null},{"text":"\r\n    # Your code here\r\n    dp = [[0] * n for _ in range(n)]\r\n    max_ending_here = 0\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n        for j in range(i+1, n):\r\n            dp[i][j] = max(arr[j], arr[i] + dp[i][j-1])\r\n            max_ending_here = max(max_ending_here, dp[i][j])\r\n    return max_ending_here\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 5, 7, 10, 13, 15, 19, 21]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    # If there is only one element in the array then it is the maximum sum subsequence.\r\n    if n == 1:\r\n        return arr[0]\r\n    # This array will store the maximum sum subsequence ending from the ith index.\r\n    maximum_sum = [0] * n\r\n    # This array will store the ending index of the maximum sum subsequence ending from the ith index.\r\n    maximum_ending_index = [0] * n\r\n    # Initialize the maximum sum subsequence ending from the ith index to 0.\r\n    for i in range(n):\r\n        maximum_sum[i] = 0\r\n        maximum_ending_index[i] = 0\r\n\r\n    # Compute the maximum sum subsequence ending from the last element of the array.\r\n    maximum_sum[n - 1] = arr[n - 1]\r\n    maximum_ending_index[n - 1] = n - 1\r\n\r\n    # Compute the maximum sum subsequence ending from the second to the last element of the array.\r\n    for i in range(n - 2, -1, -1):\r\n        # If the current element is greater than the previous element and the sum of the two is greater than\r\n        # the previous maximum sum, then update the maximum sum subsequence ending from the ith index.\r\n        if arr[i] > arr[i + 1] and (arr[i] + maximum_sum[i + 1]) > maximum_sum[i]:\r\n            maximum_sum[i] = arr[i] + maximum_sum[i + 1]\r\n            maximum_ending_index[i] = i + 1\r\n\r\n    # This array will store the maximum sum subsequence ending from the ith index.\r\n    maximum_sum = [0] * n\r\n    # This array will store the ending index of the maximum sum subsequence ending from the ith index.\r\n    maximum_ending_index = [0] * n\r\n    # Initialize the maximum sum subsequence ending from the ith index to the maximum sum subsequence ending from\r\n    # the last element of the array.\r\n    for i in range(n):\r\n        maximum_sum[i] = maximum_sum[maximum_ending_index[i]]\r\n        maximum_ending_index[i] ","votes":null},{"text":"\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    max_sum = 0\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            max_sum = max(max_sum, dp[i][j] + arr[j])\r\n            dp[i][j] = max(arr[j] - arr[i], 0)\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\r\n    max_sum = -float('inf')\r\n    for i in range(1, n + 1):\r\n        for j in range(1, n + 1):\r\n            if arr[i - 1] <= arr[j - 1]:\r\n                dp[i][j] = dp[i - 1][j] + arr[i - 1]\r\n            else:\r\n                dp[i][j] = dp[i][j - 1] + arr[j - 1]\r\n            if dp[i][j] > max_sum:\r\n                max_sum = dp[i][j]\r\n    return max_sum\r\n\r\n\r\narr = [1, 2, 3, -1, -1, 4, 7]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n# # 11\r\n# # 12\r\n# # 13\r\n# # 14\r\n# # 15\r\n# # 16\r\n# # 17\r\n# # 18\r\n# # 19\r\n# # 20\r\n# # 21\r\n# # 22\r\n# # 23\r\n# # 24\r\n# # 25\r\n# # 26\r\n# # 27\r\n# # 28\r\n# # 29\r\n# # 30\r\n# # 31\r\n# # 32\r\n# # 33\r\n# # 34\r\n# # 35\r\n# # 36\r\n# # 37\r\n# # 38\r\n# # 39\r\n# # 40\r\n# # 41\r\n# # 42\r\n# # 43\r\n# # 44\r\n# # 45\r\n# # 46\r\n# # 47\r\n# # 48\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    if n <= 1:\r\n        return n\r\n    max_ending = []\r\n    max_ending.append(arr[0])\r\n    max_ending_sum = arr[0]\r\n    for i in range(1, n):\r\n        if arr[i] > arr[i - 1]:\r\n            max_ending.append(arr[i])\r\n            max_ending_sum = max(max_ending_sum, arr[i])\r\n    return max_ending_sum\r\n            \r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n\r\n    for length in range(2, n + 1):\r\n        for i in range(n - length + 1):\r\n            dp[i][i + length - 1] = arr[i] + max(dp[i + 1][j] for j in range(i + 1, i + length))\r\n\r\n    return dp[0][n - 1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import timeit\r\n\r\n    arr = [10, 18, 2, 5, 3, 7, 101, 18]\r\n    n = len(arr)\r\n\r\n    # timeit.timeit(max_sum_increasing_subsequence(arr, n), number=100000)\r\n    # timeit.timeit(max_sum_increasing_subsequence(arr, n), number=1000000)\r\n\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n\r\n    # Build a table to store results of sub-problems\r\n    L = [None] * n\r\n\r\n    for i in range(n):\r\n        L[i] = arr[i]\r\n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if L[i] > L[j] and L[i] + L[j] > L[i + 1]:\r\n                L[i + 1] = L[i] + L[j]\r\n\r\n    for i in range(n):\r\n        max_ending_here = max(max_ending_here + L[i], L[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [5, 1, 3, 4, 7, 2, 6, 4, 9, 7]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    dp = [[0 for j in range(n)] for i in range(n)]\r\n    max_sum = 0\r\n    for i in range(n):\r\n        for j in range(1, n):\r\n            if arr[i] > arr[j] and dp[i][j-1] == 0:\r\n                dp[i][j] = dp[i][j-1] + arr[i]\r\n            elif arr[i] > arr[j] and dp[i][j-1]!= 0:\r\n                dp[i][j] = max(dp[i][j], dp[i][j-1]+arr[i])\r\n            else:\r\n                dp[i][j] = dp[i][j-1]\r\n    for i in range(n):\r\n        max_sum = max(max_sum, dp[0][i])\r\n    return max_sum\r\n\r","votes":null},{"text":"\r\n\r\n    # Initialize result\r\n    result = 0\r\n\r\n    # Create a dp array to store the maximum sum ending at each index\r\n    dp = [0 for _ in range(n)]\r\n\r\n    # Traverse for all indexes\r\n    for i in range(n):\r\n        # Initialize current sum and current index\r\n        current_sum = 0\r\n        current_index = i\r\n\r\n        # Traverse for all indexes before current index\r\n        for j in range(i):\r\n\r\n            # If the current sum of the subarray ending at the\r\n            # current index is greater than or equal to the\r\n            # current sum and the subarray ending at index j is\r\n            # also greater than or equal to the current sum, then\r\n            # update the current sum\r\n            if (dp[j] + arr[i]) >= current_sum and dp[j] >= current_sum:\r\n                current_sum = dp[j] + arr[i]\r\n                current_index = j\r\n\r\n        # Update the result\r\n        result = max(result, current_sum)\r\n        dp[i] = current_sum\r\n\r\n    # Return the maximum sum\r\n    return result\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r\n","votes":null},{"text":"\r\n    # The array can't contain negative elements\r\n    if any(ele < 0 for ele in arr):\r\n        return -1\r\n    # Initialize sum to 0\r\n    sum = 0\r\n    # Initialize max_sum to negative infinity\r\n    max_sum = -float('inf')\r\n    # Initialize arr[0] as the best sum\r\n    arr[0] = arr[0] + 1\r\n    # Process all array elements one by one\r\n    for i in range(1, n):\r\n        # If element is greater than or equal to the sum\r\n        if arr[i] >= arr[i-1]:\r\n            # Update sum to the new value\r\n            sum = arr[i] + 1\r\n            # Update max_sum if required\r\n            max_sum = max(max_sum, sum)\r\n        else:\r\n            # Update sum to the previous value\r\n            sum = arr[i-1] + 1\r\n            # Update max_sum if required\r\n            max_sum = max(max_sum, sum)\r\n    # Return the maximum sum\r\n    return max_sum\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    arr = [90, 1, 2, 3, 100, 4, 5, 6, 7, 8, 10]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n    # Output: 206\r\n","votes":null},{"text":"\r\n    # Initialize result\r\n    result = 0\r\n\r\n    # Iterate over all subsequences of arr\r\n    for i in range(n):\r\n        # Initialize temp\r\n        temp = 0\r\n\r\n        # Initialize j\r\n        j = i\r\n\r\n        # Traverse all elements from i+1 to n-1\r\n        while j < n:\r\n            # Update current element\r\n            temp += arr[j]\r\n\r\n            # If current sum is greater than previous sum, update result\r\n            if temp > result:\r\n                result = temp\r\n\r\n            # Increment j\r\n            j += 1\r\n\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    # Create a result array to store the result\r\n    # Initialize all values in the result array as -1\r\n    result = [-1] * n\r\n    # Initialize the index of the last element\r\n    # in the result array\r\n    last_index = -1\r\n    # Initialize the current sum\r\n    current_sum = 0\r\n    # Traverse through all the elements\r\n    for i in range(n):\r\n        # If the result array is not visited\r\n        if result[i] == -1:\r\n            # Find the maximum sum ending at arr[i]\r\n            # and update the result array\r\n            current_sum = max(arr[i], arr[i] + result[i])\r\n            # Store the index of the last element\r\n            # in the result array\r\n            last_index = i\r\n            # Traverse through the rest of the elements\r\n            for j in range(i+1, n):\r\n                # If the current sum is greater than\r\n                # the sum ending at arr[j]\r\n                if current_sum > arr[j] + result[j]:\r\n                    # Update the result array\r\n                    result[j] = current_sum\r\n                    # Update the last element\r\n                    # in the result array\r\n                    last_index = j\r\n    # Print the result\r\n    print(result)\r\n    # Return the last index\r\n    return last_index\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    n = len(arr)\r\n    max_sum_increasing_subsequence(arr, n)\r\n","votes":null},{"text":"\r\n    # if the given array is empty or its length is 1, return 0\r\n    if not arr or n == 1:\r\n        return 0\r\n\r\n    dp = [[0] * n for _ in range(n)]\r\n\r\n    # if the given array is one element\r\n    if n == 2:\r\n        if arr[0] < arr[1]:\r\n            return arr[0]\r\n        else:\r\n            return arr[1]\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[j][i-1] + arr[i] > dp[i][i-1]:\r\n                dp[i][i-1] = dp[j][i-1] + arr[i]\r\n    return max(dp[n-1])\r\n\r","votes":null},{"text":"\r\n    # If the array is empty\r\n    if n == 0:\r\n        return 0\r\n    # If the array only has one element\r\n    elif n == 1:\r\n        return arr[0]\r\n    # If the array has more than one element\r\n    else:\r\n        # Initialize the sum of the maximum increasing subsequence\r\n        max_sum = arr[0]\r\n        max_ending = arr[0]\r\n        # Initialize the index of the beginning of the maximum increasing subsequence\r\n        start = 0\r\n        # Initialize the index of the end of the maximum increasing subsequence\r\n        end = 1\r\n        # Traverse the array from'start' to 'n-1'\r\n        for i in range(1, n):\r\n            # If the ending element is greater than the starting element\r\n            if arr[i] > arr[i-1]:\r\n                # Update the values of the maximum increasing subsequence\r\n                max_ending = max(max_ending + arr[i], arr[i])\r\n                # Update the maximum sum of the maximum increasing subsequence\r\n                max_sum = max(max_sum, max_ending)\r\n                # Update the starting element of the maximum increasing subsequence\r\n                start = i\r\n                # Update the ending element of the maximum increasing subsequence\r\n                end = i + 1\r\n        # Return the sum of the maximum increasing subsequence\r\n        return max_sum\r\n\r\n# Driver code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n```\r\n\r\nTime complexity: `O(n^2)`\r\n\r\n## Greedy Approach\r\n\r\n```python\r\n# Python3 program for the greedy approach\r\n# of maximum sum of increasing subsequence\r\n# arr: input array\r\n# n: size of the array\r\n# Function to find the sum of maximum increasing subsequence\r","votes":null},{"text":"\r\n\r\n    # base case\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    # create dp array\r\n    dp = [0] * n\r\n\r\n    # dp[i] will store maximum sum ending at index i\r\n    dp[0] = arr[0]\r\n\r\n    # iterate from 1 to n-1\r\n    for i in range(1, n):\r\n\r\n        # dp[i] will store maximum sum ending at index i\r\n        dp[i] = arr[i]\r\n\r\n        # check for all indices j < i\r\n        for j in range(0, i):\r\n\r\n            # check if arr[i] can be added to the subsequence ending at index j\r\n            if arr[i] > arr[j] and dp[i] > dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n\r\n    # return maximum sum ending at last index\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 9, 2, 5, 10, 2, 4, 7]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    # Code here\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    # Initialize a table of size n * n to store the maximum sum of increasing subsequence ending at\r\n    # index i and column j.\r\n    table = [[0 for j in range(n)] for i in range(n)]\r\n\r\n    # The maximum sum for the subsequence ending at index i and column j is maximum of\r\n    # maximum sum ending at index i and column j, and maximum sum ending at index i - 1 and column j - 1\r\n    # + arr[i - 1][j - 1].\r\n    for i in range(1, n):\r\n        for j in range(1, n):\r\n            table[i][j] = max(table[i - 1][j], table[i][j - 1], table[i - 1][j - 1]) + arr[i - 1][j - 1]\r\n\r\n    # The maximum sum of increasing subsequence ending at index i and column j is the maximum sum\r\n    # ending at index i and column j.\r\n    return max(table[n - 1][n - 1], table[n - 1][n - 2], table[n - 2][n - 1])\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [[1, 2, 3, 5], [1, 3, 5, 7], [1, 4, 5, 8], [1, 5, 6, 9], [1, 6, 7, 10]]\r\n    print('The maximum sum of increasing subsequence is: ', max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n    for i in range(n-2, -1, -1):\r\n        for j in range(i+1, n):\r\n            dp[i][j] = max(arr[i] + dp[i+1][j], arr[j] + dp[i][j-1])\r\n    return dp[0][n-1]\r\n\r\nprint(max_sum_increasing_subsequence(arr, n))","votes":null},{"text":"\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n    mx = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i==j:\r\n                dp[i][j] = arr[i]\r\n            elif i>j:\r\n                if dp[i-1][j] > dp[i][j]:\r\n                    dp[i][j] = dp[i-1][j] + arr[i]\r\n                else:\r\n                    dp[i][j] = dp[i][j] + arr[i]\r\n            if dp[i][j] > mx:\r\n                mx = dp[i][j]\r\n    return mx\r\n\r","votes":null},{"text":"\r\n    dp = [0] * (n)\r\n    dp[0] = arr[0]\r\n    sum = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i-1] + arr[i])\r\n        sum = max(sum, dp[i])\r\n    return sum\r\n\r\n# Driver Code\r\narr = [1, 2, 4, 3, 6, 2]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))","votes":null},{"text":"\r\n    # write your code here\r\n    dp = [[0 for j in range(n)] for i in range(n)]\r\n    for i in range(n):\r\n        for j in range(1, n):\r\n            if arr[i] < arr[j]:\r\n                dp[i][j] = dp[i][j-1] + arr[i]\r\n            else:\r\n                dp[i][j] = max(dp[i][j-1], dp[i][j])\r\n    return max(dp[n-1])\r\n\r\n\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    dp[0][0] = arr[0]\r\n    max_sum = arr[0]\r\n\r\n    for i in range(1, n):\r\n        dp[i][0] = max(dp[i - 1][0] + arr[i], arr[i])\r\n        max_sum = max(dp[i][0], max_sum)\r\n\r\n    for j in range(1, n):\r\n        dp[0][j] = max(dp[0][j - 1] + arr[j], arr[j])\r\n        max_sum = max(dp[0][j], max_sum)\r\n\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [[0] * (n + 1) for i in range(n + 1)]\r\n\r\n    for i in range(n):\r\n        for j in range(i + 1, n + 1):\r\n            if arr[i] < arr[j]:\r\n                dp[i][j] = dp[i][j - 1] + arr[j]\r\n            else:\r\n                dp[i][j] = dp[i][j - 1]\r\n\r\n    max_sum = 0\r\n\r\n    for i in range(n):\r\n        max_sum = max(max_sum, dp[0][i])\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 70]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    if n == 1:\r\n        return arr[0]\r\n    # This array will store the max sum subsequence ending at each index\r\n    max_ending_here = [0] * n\r\n\r\n    # To store the max sum of subsequence ending at each index from 0 to i-1\r\n    max_so_far = [0] * n\r\n\r\n    # Find sum of maximum decreasing subsequence ending at index i-1\r\n    for i in range(1, n):\r\n        max_ending_here[i] = max(arr[i], max_ending_here[i-1])\r\n\r\n    # Fill the output array\r\n    for i in range(n-2, -1, -1):\r\n        max_so_far[i] = max(max_ending_here[i], max_so_far[i+1] + arr[i])\r\n\r\n    # Return sum of maximum sum subsequence ending at index 0\r\n    return max_so_far[0]\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    n = len(arr)\r\n    print(\"The maximum sum of increasing subsequence is :\", end=' ')\r\n    print(max_sum_increasing_subsequence(arr, n))","votes":null},{"text":"\r\n    if n == 1:\r\n        return arr[0]\r\n    if n == 2:\r\n        return max(arr[0], arr[1])\r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n    for i in range(n):\r\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\nprint(max_sum_increasing_subsequence([4, 8, 1, 6, 9, 2, 3, 5], 8))\r\n# 21:16 - 21:26\r\n\r\n# 21:26 - 21:33\r\n# 21:33 - 21:47\r\n# 21:47 - 21:51\r\n# 21:51 - 21:54\r\n# 21:54 - 21:59\r\n# 21:59 - 22:02\r\n# 22:02 - 22:08\r\n# 22:08 - 22:13\r\n# 22:13 - 22:15\r\n# 22:15 - 22:20\r\n# 22:20 - 22:22\r\n# 22:22 - 22:27\r\n# 22:27 - 22:30\r\n# 22:30 - 22:35\r\n# 22:35 - 22:37\r\n# 22:37 - 22:42\r\n# 22:42 - 22:45\r\n# 22:45 - 22:50\r\n# 22:50 - 22:52\r\n# 22:5","votes":null},{"text":"\r\n    max_sum = max_ending = 0\r\n    for i in range(n):\r\n        max_ending = max_ending + 1 if arr[i] > arr[i - 1] else 1\r\n        max_sum = max(max_sum, max_ending)\r\n\r\n    return max_sum\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [1000, 1, 2, 3, 10, 4, 5, 6]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [2, 3, 4, 1, 5]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [10, 11, 12, 13]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [12, 13, 14, 15]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] < arr[j]:\r\n                dp[i][j] = dp[i][j-1] + arr[j]\r\n            else:\r\n                dp[i][j] = dp[i][j-1]\r\n            max_ending_here = max(max_ending_here, dp[i][j])\r\n            max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 70, 60]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    global sol\r\n    global lis\r\n    global curr_sum\r\n    curr_sum = 0\r\n    sol = 0\r\n    lis = [0 for i in range(n)]\r\n    for i in range(n):\r\n        if arr[i] > arr[i-1]:\r\n            lis[i] = lis[i-1] + 1\r\n        else:\r\n            lis[i] = 1\r\n    for i in range(1, n):\r\n        curr_sum = curr_sum + arr[i]\r\n        if curr_sum > sol:\r\n            sol = curr_sum\r\n            if curr_sum > arr[i-1]:\r\n                sol = curr_sum\r\n    return sol\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n    print(lis)\r\n    print(sol)\r\n","votes":null},{"text":"\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_sum = max(arr[i], max_sum)\r\n        dp[i][i] = arr[i]\r\n        for j in range(i+1, n):\r\n            dp[i][j] = max(arr[j] + dp[i][j-1], dp[i][j])\r\n    return max_sum\r\n\r\nif __name__ == '__main__':\r\n    arr = [int(x) for x in input().split()]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    dp = [[0] * n for i in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n\r\n    for l in range(1, n):\r\n        for i in range(n - l):\r\n            j = i + l\r\n            dp[i][j] = max(dp[i][j], dp[i][i] + dp[i + 1][j])\r\n\r\n    return max(dp[0][n - 1], dp[0][n - 2])\r\n\r\n\r","votes":null},{"text":"\r\n    max_endinghere = 0\r\n    max_sofar = 0\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if (arr[i] > arr[j]) and (arr[i] > max_endinghere):\r\n                max_endinghere = arr[i]\r\n                max_sofar = arr[i] + arr[j]\r\n    return max_sofar\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 70, 60]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 70, 60, 100]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))","votes":null},{"text":"\r\n    # Write your code here\r\n    return max(arr[0], max(arr[0] + arr[1], arr[1] + arr[2], arr[2] + arr[3]))\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 4, 2, 3, 5, 3, 2, 1]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [[0 for j in range(n)] for i in range(n)]\r\n    max_sum = 0\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n        max_sum = max(max_sum, dp[i][i])\r\n    \r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] < arr[j]:\r\n                dp[i][j] = arr[i] + max(dp[i][k] for k in range(j))\r\n            else:\r\n                dp[i][j] = dp[i][j-1]\r\n    return max_sum\r\n\r\nprint(max_sum_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80], 10))","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i][j] + arr[i] > dp[i][i]:\r\n                dp[i][i] = dp[i][j] + arr[i]\r\n\r\n    return max(dp[n-1])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n    print(max_sum_increasing_subsequence2(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    # If the array is empty or only one element, return it\r\n    if n == 0 or n == 1:\r\n        return arr[0]\r\n\r\n    # Create a dp array to store the values of max sum subsequence ending at\r\n    # index i\r\n    # The value of dp[i] would be the max sum of the sum of the elements\r\n    # from arr[0] to arr[i]\r\n    dp = [0] * n\r\n\r\n    # Initialize the first element of the dp array\r\n    # The first element of the array is itself\r\n    dp[0] = arr[0]\r\n\r\n    # Initialize the max sum of the array\r\n    # The max sum of the array is the element itself\r\n    max_sum = arr[0]\r\n\r\n    # Loop through the elements of the array\r\n    for i in range(1, n):\r\n        # If the element at index i is greater than or equal to the sum of\r\n        # the elements from the beginning to the element at index i-1\r\n        if arr[i] >= dp[i - 1]:\r\n            # Update the value of the dp array at index i\r\n            dp[i] = dp[i - 1] + arr[i]\r\n        else:\r\n            # Update the value of the dp array at index i\r\n            dp[i] = arr[i]\r\n\r\n        # If the current sum of the array is greater than the max sum\r\n        if dp[i] > max_sum:\r\n            max_sum = dp[i]\r\n\r\n    return max_sum\r\n\r\n\r\n# Driver code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n\r\n    # Create a dp table to store the maximum sum of subsequence ending at index i\r\n    dp = [[-1] * n for i in range(n)]\r\n\r\n    # Initialize the dp table with -1\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n\r\n    # Fill dp table in bottom up manner\r\n    for i in range(1, n):\r\n        for j in range(n-1, i-1, -1):\r\n            if arr[j] < arr[i] and dp[i][j] == -1:\r\n                dp[i][j] = dp[i-1][j] + arr[i]\r\n            elif arr[j] < arr[i] and dp[i][j]!= -1:\r\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + arr[i])\r\n\r\n    # Find the maximum sum of subsequence\r\n    max_sum = -1\r\n    for i in range(n):\r\n        if dp[n-1][i]!= -1:\r\n            max_sum = max(max_sum, dp[n-1][i])\r\n\r\n    return max_sum\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\r\n\r\n    # Fill dp[][] in bottom up manner\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n        for j in range(i + 1, n):\r\n            dp[i][j] = max(dp[i][j], dp[i][j - 1] + arr[j])\r\n\r\n    # Pick maximum sum subsequence\r\n    max_sum = float('-inf')\r\n    max_sum_subsequence = []\r\n    for i in range(n):\r\n        if dp[0][i] > max_sum:\r\n            max_sum = dp[0][i]\r\n            max_sum_subsequence = [0]\r\n        elif dp[0][i] == max_sum:\r\n            max_sum_subsequence.append(0)\r\n    for i in range(1, n):\r\n        for j in range(n):\r\n            if dp[i][j] > max_sum:\r\n                max_sum = dp[i][j]\r\n                max_sum_subsequence = [j]\r\n            elif dp[i][j] == max_sum:\r\n                max_sum_subsequence.append(j)\r\n    return max(max_sum_subsequence)\r\n\r\n\r","votes":null},{"text":"\r\n    # arr[i] is the maximum sum of increasing subsequence ending with arr[i].\r\n    # If arr[i] is 0, then arr[i-1] is also 0.\r\n    # We check if arr[i-1] is 0, and we can only update arr[i] if arr[i-1] is 0.\r\n    # So, we only need to check if arr[i] is 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is also 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is also 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is also 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is also 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is also 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is also 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is 0.\r\n    # If it is 0, then we can only update arr[i] if arr[i-1] is also 0.\r\n    # If it is 0, then we ca","votes":null},{"text":"\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    max_so_far = 0\r\n\r\n    for i in range(n):\r\n        dp[i][i] = arr[i]\r\n        max_so_far = dp[i][i]\r\n\r\n    for i in range(n - 2, -1, -1):\r\n        for j in range(i + 1, n):\r\n            dp[i][j] = max(dp[i + 1][j], dp[i][j - 1], dp[i][j]) + arr[j]\r\n            max_so_far = max(dp[i][j], max_so_far)\r\n\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [[0, 0] for _ in range(n)]\r\n    dp[0][1] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\r\n        dp[i][1] = max(dp[i][0] + arr[i], dp[i - 1][1])\r\n    return max(dp[n - 1][0], dp[n - 1][1])\r\n\r\n\r","votes":null},{"text":"\r\n    # Complete this function\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i][j] < dp[i][j+1] + arr[i]:\r\n                dp[i][j] = dp[i][j+1] + arr[i]\r\n\r\n    res = 0\r\n    for i in range(n):\r\n        res = max(dp[i][j], res)\r\n    return res\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n","votes":null},{"text":"\r\n    dp = [[0 for i in range(n)] for j in range(n)]\r\n    max_so_far = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] < arr[j]:\r\n                dp[i][j] = dp[i][j-1] + arr[j]\r\n            else:\r\n                dp[i][j] = dp[i][j-1]\r\n            if dp[i][j] > max_so_far:\r\n                max_so_far = dp[i][j]\r\n    return max_so_far\r\n\r\n\r\n# Driver code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n^2)\r\n\"\"\"","votes":null}],"time":{"count":8.0,"avg":175048.5425,"std":43164.3823791804,"cov":0.2465852144}}
{"id":527,"question":"def get_pairs_count(arr, n, sum):\r\n    \"\"\"Write a function to find all pairs in an integer array whose sum is equal to a given number.\"\"\"","answers":[{"text":"\r\n    pairs_count = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r","votes":101338.676},{"text":"\r\n    pairs_count = 0\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r","votes":101359.472},{"text":"\r\n    # Write your code here.\r\n    count = 0\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\nprint(get_pairs_count([1, 2, 3, 4, 5], 5, 9))","votes":107271.584},{"text":"\r\n    # base case\r\n    if n == 0:\r\n        if sum == 0:\r\n            return 1\r\n        else:\r\n            return 0\r\n    # recursion case\r\n    return get_pairs_count(arr, n - 1, sum) + get_pairs_count(arr, n - 1, sum - arr[n - 1])\r\n\r\n\r","votes":112285.764},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_list = [1, 2, 3, 4, 5]\r\n    print(get_pairs_count(test_list, len(test_list), 4))\r\n    print(get_pairs_count(test_list, len(test_list), 6))\r\n    print(get_pairs_count(test_list, len(test_list), 10))\r\n","votes":124556.048},{"text":"\r\n    pairs_count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if(arr[i] + arr[j] == sum):\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 1, 3, 2, 5]\r\n    n = len(arr)\r\n    sum = 9\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n","votes":134467.272},{"text":"\r\n    n = len(arr)\r\n    ans = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                ans += 1\r\n    return ans\r\n\r\n\r","votes":140772.396},{"text":"\r\n\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":141640.336},{"text":"\r\n    pairs_count = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n\r\n    return pairs_count\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = 10\r\nsum = 10\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# n = 10\r\n# sum = 11\r\n# print(get_pairs_count(arr, n, sum))\r\n\r\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# n = 10\r\n# sum = 12\r\n# print(get_pairs_count(arr, n, sum))\r\n\r\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# n = 10\r\n# sum = 13\r\n# print(get_pairs_count(arr, n, sum))\r\n\r\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# n = 10\r\n# sum = 14\r\n# print(get_pairs_count(arr, n, sum))\r\n\r\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# n = 10\r\n# sum = 15\r\n# print(get_pairs_count(arr, n, sum))\r\n\r\n# arr = [1,","votes":142535.684},{"text":"\r\n    if n == 0:\r\n        return 0\r\n\r\n    pairs = 0\r\n    for i in range(0, len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r","votes":144998.208},{"text":"\r\n    # get pairs count\r\n    cnt = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if sum == arr[i] + arr[j]:\r\n                cnt += 1\r\n    return cnt\r\n\r\n\r","votes":152640.568},{"text":"\r\n    pairs_count = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i]+arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r","votes":155165.728},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":156532.012},{"text":"\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[j] == sum - arr[i]:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = 10\r\n    sum = 0\r\n    print(get_pairs_count(arr, n, sum)) # 4","votes":166414.392},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]+arr[j]==sum):\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,2,3,4,5]\r\n    n = len(arr)\r\n    sum = 6\r\n    print(get_pairs_count(arr, n, sum))","votes":182941.856},{"text":"\r\n\r\n    pairs_count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if sum == arr[i] + arr[j]:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    n = len(arr)\r\n    sum = int(input(\"Enter the sum:\"))\r\n    print(\"Pairs count is: {}\".format(get_pairs_count(arr, n, sum)))\r\n","votes":198726.692},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 7, 11, 15]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n","votes":200412.112},{"text":"\r\n    pairs_count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    k = int(input())\r\n\r\n    result = get_pairs_count(arr, n, k)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n","votes":240013.88},{"text":"\r\n    pairs_count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if sum == arr[i] + arr[j]:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\r\n    print(get_pairs_count(arr, len(arr), 4))","votes":259159.188},{"text":"\r\n    if not arr:\r\n        return []\r\n    if len(arr) == 1:\r\n        return [(0, arr[0])]\r\n    if len(arr) == 2:\r\n        if arr[0] + arr[1] == sum:\r\n            return [(0, arr[0]), (1, arr[1])]\r\n        else:\r\n            return []\r\n    if arr[0] + arr[1] > sum:\r\n        return get_pairs_count(arr[1:], n, sum)\r\n    elif arr[0] + arr[1] < sum:\r\n        return get_pairs_count(arr[1:], n, sum) + get_pairs_count(arr[2:], n, sum)\r\n    else:\r\n        return get_pairs_count(arr[1:], n, sum) + [(0, arr[0])] + get_pairs_count(arr[2:], n, sum)\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = {}\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                if not pairs.get(arr[i]):\r\n                    pairs[arr[i]] = []\r\n                pairs[arr[i]].append(arr[j])\r\n                if not pairs.get(arr[j]):\r\n                    pairs[arr[j]] = []\r\n                pairs[arr[j]].append(arr[i])\r\n    return pairs\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5]\r\n    print(get_pairs_count(arr, len(arr), 9))\r\n","votes":null},{"text":"\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i]+arr[j]==sum:\r\n                return [i, j]\r\n    return []\r\n\r\nif __name__ == '__main__':\r\n    print(get_pairs_count([1, 2, 3, 4, 5, 6, 7], 8, 2))\r\n    print(get_pairs_count([1, 2, 3, 4, 5, 6, 7], 8, 1))\r\n    print(get_pairs_count([1, 2, 3, 4, 5, 6, 7], 8, 10))\r\n    print(get_pairs_count([1, 2, 3, 4, 5, 6, 7], 8, 9))","votes":null},{"text":"\r\n    # Create a set (for fast lookup) to store numbers\r\n    # from arr such that their sum is equal to 'n'.\r\n    # Initialize count to 0.\r\n    count = 0\r\n    set1 = set()\r\n    for i in range(n):\r\n        if arr[i] in set1:\r\n            count += 1\r\n            set1.remove(arr[i])\r\n    # If count is 0, then there exists no pair in arr\r\n    # whose sum is equal to 'n'.\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5]\r\n    n = 6\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n","votes":null},{"text":"\r\n\r\n    pairs = []\r\n\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    print(get_pairs_count(arr, len(arr), 20))","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(0, n-1):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    pairs = []\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]+arr[j]==sum:\r\n                pairs.append([arr[i],arr[j]])\r\n    return pairs\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    if n == 0:\r\n        return 0\r\n    if n in arr:\r\n        return 1\r\n    # print(n)\r\n    l = get_pairs_count(arr, n\/\/2, sum)\r\n    r = get_pairs_count(arr, n-n\/\/2, sum)\r\n    return l+r\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = 5\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\"\"\"\r","votes":null},{"text":"\r\n\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    print(get_pairs_count(arr, n, int(input())))\r\n","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                result.append((i, j))\r\n\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize counter to 0\r\n    count = 0\r\n    # Traverse through all subarrays of size n\r\n    for i in range(len(arr) - n + 1):\r\n        # Initialize current sum to arr[i]\r\n        cur_sum = arr[i]\r\n        # Traverse through all remaining elements of subarray\r\n        for j in range(1, n):\r\n            # Increment current sum by arr[i+j]\r\n            cur_sum += arr[i + j]\r\n            # If current sum is equal to'sum' then increment count\r\n            if cur_sum == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().rstrip().split()))\r\n    k = int(input())\r\n    print(get_pairs_count(arr, n, k))\r\n","votes":null},{"text":"\r\n    pairs = dict()\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.setdefault(arr[i], []).append(arr[j])\r\n                pairs.setdefault(arr[j], []).append(arr[i])\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(len(arr)):\r\n        for j in range(i+1,len(arr)):\r\n            if sum - arr[i] - arr[j] == 0:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [5, 12, 3, 7]\r\n    n = 9\r\n    sum = 12\r\n    print(get_pairs_count(arr, n, sum))\r\n","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = set()\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if sum - arr[i] - arr[j] == 0:\r\n                pairs.add((arr[i], arr[j]))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    # Store pairs in a set\r\n    pairs = set()\r\n\r\n    # Loop through array\r\n    for i in range(0, n):\r\n        # If element is present in set, add its index in pairs set\r\n        if i in arr and i + 1 in arr and arr[i] + arr[i + 1] == sum:\r\n            pairs.add((i, i + 1))\r\n\r\n    return pairs\r\n\r\n\r\n# Driver code\r\n\r\narr = [1, 3, 1, 4, 2, 5]\r\nsum = 6\r\nn = len(arr)\r\nprint(get_pairs_count(arr, n, sum))\r\n```\r\n## Output\r\n```\r\n{(0, 3), (1, 4)}\r\n```\r\n# 4. Count subsequences\r\n## Task\r\n**Write a function to count the number of subsequences of length 2 and 3 in a given array.**\r\n\r\n## Solution\r\n```\r\n# Python3 program to count number of subsequences\r\n# of length 2 and 3 in a given array\r\n\r\n# Function to count number of subsequences of length\r\n# 2 and 3 in a given array\r","votes":null},{"text":"\r\n    pairs = set()\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            for k in range(j + 1, n):\r\n                if sum == arr[i] + arr[j] + arr[k]:\r\n                    pairs.add((arr[i], arr[j], arr[k]))\r\n\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    return pairs\r\n\r\n\r\n# Time: O(n^2)\r\n# Space: O(1)\r","votes":null},{"text":"\r\n    # Write your code here\r\n    # O(n) time | O(n) space\r\n    # n is the length of the array, sum is the number to find pairs whose sum is equal to\r\n    # the number given, arr is the input array\r\n    # this function returns an array of pairs whose sum is equal to the given number\r\n    # and the index of the first and second element of the pair\r\n    pairs = []\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([i, j])\r\n    return pairs\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    sum = 10\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n","votes":null},{"text":"\r\n\r\n    # Create a result array to store the pairs\r\n    result = []\r\n\r\n    # Traverse through all subarrays of size 2\r\n    for i in range(0, n - 1):\r\n        for j in range(i + 1, n):\r\n            # If the current sum is equal to the given number\r\n            if (arr[i] + arr[j] == sum):\r\n                # Add the pair to the result array\r\n                result.append([arr[i], arr[j]])\r\n\r\n    return result\r\n\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nsum = 10\r\nprint(get_pairs_count(arr, n, sum))\r\n","votes":null},{"text":"\r\n    pairs = set()\r\n    # go through each pair\r\n    for i in range(0, n-1):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.add((i, j))\r\n    return pairs\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n","votes":null},{"text":"\r\n    c = collections.defaultdict(int)\r\n    res = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                c[arr[i]] += 1\r\n                c[arr[j]] += 1\r\n                res.append([i, j])\r\n    return res, c\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nsum = 10\r\nres, c = get_pairs_count(arr, n, sum)\r\nprint(res)\r\nprint(c)\r\n\r\n# Use defaultdict to create a counter for each item in arr\r\n# defaultdict returns a dictionary with a default value for each key\r\n# defaultdict(int) is a special dictionary object that maps keys to default values of zero\r\n# defaultdict allows to iterate over keys and values of the dictionary in a fast and efficient way\r\n# defaultdict is in fact a special dictionary object that maps keys to default values of zero\r\n# defaultdict is also a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n# defaultdict is a dictionary subclass\r\n","votes":null},{"text":"\r\n\r\n    pairs = []\r\n    # Time Complexity: O(n^2)\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([i, j])\r\n    return pairs\r\n\r","votes":null},{"text":"\r\n    pairs_count = dict()\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                if arr[i] not in pairs_count:\r\n                    pairs_count[arr[i]] = 1\r\n                else:\r\n                    pairs_count[arr[i]] += 1\r\n                if arr[j] not in pairs_count:\r\n                    pairs_count[arr[j]] = 1\r\n                else:\r\n                    pairs_count[arr[j]] += 1\r\n    return pairs_count\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    pairs = []\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if sum - arr[i] - arr[j] == 0:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here.\r\n    # 1. create a dictionary with key as value.\r\n    # 2. iterate through the array.\r\n    # 3. find the sum of the current element from the dictionary.\r\n    # 4. if found in dictionary, then create a pair and add the pair to the resultant list.\r\n    # 5. else add the element to the dictionary and update the sum.\r\n    # 6. after the complete iteration, return the resultant list.\r\n\r\n    result = []\r\n    d = {}\r\n\r\n    for i in range(n):\r\n        d[arr[i]] = i\r\n\r\n    for i in range(n):\r\n        sum = arr[i] - sum\r\n        if sum in d:\r\n            result.append((arr[i], arr[d[sum]]))\r\n\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 3, 4, 2, 3, 5, 1, 2, 4, 6, 8, 9, 3, 1, 4]\r\n    n = len(arr)\r\n    sum = 18\r\n\r\n    print(get_pairs_count(arr, n, sum))\r\n","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            if sum - arr[i] - arr[j] == 0:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for first in range(n):\r\n        for second in range(first+1, n):\r\n            if arr[first] + arr[second] == sum:\r\n                pairs.append((first, second))\r\n    return pairs\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n-1):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(0, n):\r\n        for j in range(0, n):\r\n            if arr[i] + arr[j] == sum:\r\n                return True\r\n    return False\r\n\r\narr = [1, 2, 3, 4, 5]\r\nsum = 7\r\nprint(get_pairs_count(arr, len(arr), sum))\r\n# True\r\n\r\narr = [1, 2, 3, 4, 5]\r\nsum = 6\r\nprint(get_pairs_count(arr, len(arr), sum))\r\n# False\r\n\r\narr = [1, 2, 3, 4, 5]\r\nsum = 9\r\nprint(get_pairs_count(arr, len(arr), sum))\r\n# True","votes":null},{"text":"\r\n\r\n    return count_pairs(arr, n, sum, 0)\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if (arr[i] + arr[j]) == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    return pairs\r\n    \r\narr = [1, 2, 3, 4]\r\nprint(get_pairs_count(arr, len(arr), 6))\r\n\"\"\"\r\nOutput:\r\n[[1, 3], [1, 4], [2, 4], [2, 3]]\r\n\"\"\"\r\n```","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 2, 10, 4]\r\n    n = len(arr)\r\n    sum = 15\r\n    # pairs = get_pairs_count(arr, n, sum)\r\n    # print(pairs)\r\n    print(get_pairs_count_sorted_subarray(arr, n, sum))\r\n","votes":null},{"text":"\r\n    # Fill this in.\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r\n# This is for testing your code\r\ntest_pairs = []\r\ntest_arr = [1,2,3,4,5]\r\nassert get_pairs_count(test_arr, len(test_arr), 10) == test_pairs, \"Test Case #1\"\r\n\r\ntest_pairs = [(0,1)]\r\ntest_arr = [5,1,2,3,4]\r\nassert get_pairs_count(test_arr, len(test_arr), 10) == test_pairs, \"Test Case #2\"\r\n\r\ntest_pairs = [(0,2),(1,3)]\r\ntest_arr = [1,2,3,4,5]\r\nassert get_pairs_count(test_arr, len(test_arr), 10) == test_pairs, \"Test Case #3\"\r\n\r\ntest_pairs = [(0,4),(2,3),(3,1)]\r\ntest_arr = [1,2,3,4,5]\r\nassert get_pairs_count(test_arr, len(test_arr), 10) == test_pairs, \"Test Case #4\"\r\n\r\ntest_pairs = [(0,4),(2,3),(3,1)]\r\ntest_arr = [1,2,3,4,5]\r\nassert get_pairs_count(test_arr, len(test_arr), 10) == test_pairs, \"Test Case #4\"\r\n\r\ntest_pairs = [(0,4),(2,3),(3,1)]\r\ntest_arr = [1,2,3,4,5]\r\nassert get_pairs_count(test_arr, len(test_arr), 10) == test_pairs, \"Test Case #4\"\r\n\r\ntest_pairs = [(0,4),(2,3),(","votes":null},{"text":"\r\n\r\n    pairs_list = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_list.append([arr[i], arr[j]])\r\n    return pairs_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    size = int(input())\r\n    arr = list(map(int, input().split()))\r\n    sum = int(input())\r\n    print(get_pairs_count(arr, size, sum))\r\n","votes":null},{"text":"\r\n    pairs = set()\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.add((i, j))\r\n    return pairs\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\nsum = int(input())\r\narr = list(map(int, input().split()))\r\nprint(get_pairs_count(arr, len(arr), sum))\r\n","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(0, n - 1):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append(str(arr[i]) + \" \" + str(arr[j]))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    result = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if sum == arr[i] + arr[j]:\r\n                result.append((arr[i], arr[j]))\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(get_pairs_count([2, 5, 11, 3, 10], 5, 11))\r\n    print(get_pairs_count([1, 2, 3, 4, 5], 5, 10))\r\n    print(get_pairs_count([1, 2, 3, 4, 5], 5, 6))\r\n    print(get_pairs_count([1, 2, 3, 4, 5], 5, 1))\r\n","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([i, j])\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n\r\n    # Sample input\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    sum = 12\r\n    n = len(arr)\r\n\r\n    print('Pairs for sum =', sum, 'in an array of size', n, 'are:')\r\n    print(get_pairs_count(arr, n, sum))\r\n","votes":null},{"text":"\r\n    pairs = set()\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.add((i, j))\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    x = [1, 2, 3, 4, 5]\r\n    print(get_pairs_count(x, 1, 10))\r\n","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in range(len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                result.append((i, j))\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = {}\r\n    for i in range(n):\r\n        pairs[arr[i]] = 0\r\n\r\n    for i in range(n):\r\n        pairs[arr[i]] += 1\r\n\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if pairs[arr[i] + arr[j]] > 0:\r\n                pairs[arr[i] + arr[j]] -= 1\r\n                pairs[arr[j] + arr[i]] -= 1\r\n                if pairs[arr[i] + arr[j]] == 0:\r\n                    pairs.pop(arr[i] + arr[j], None)\r\n                if pairs[arr[j] + arr[i]] == 0:\r\n                    pairs.pop(arr[j] + arr[i], None)\r\n                sum_ = arr[i] + arr[j]\r\n                if sum_ == sum:\r\n                    pairs[arr[i]] += 1\r\n                    pairs[arr[j]] += 1\r\n                    pairs[sum_] += 1\r\n                    pairs[sum_] -= 1\r\n\r\n    return sum_\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        if arr[i] == sum:\r\n            pairs.append((i, i))\r\n        else:\r\n            for j in range(i + 1, n):\r\n                if arr[i] + arr[j] == sum:\r\n                    pairs.append((i, j))\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    sum = int(input())\r\n    print(len(get_pairs_count(arr, n, sum)))\r\n","votes":null},{"text":"\r\n    n1 = 0\r\n    n2 = 0\r\n    for i in range(0, n):\r\n        n1 += arr[i]\r\n        n2 += sum - arr[i]\r\n        if n1 == n2:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ","votes":null},{"text":"\r\n    arr.sort()\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            # Check if the sum of two elements\r\n            # in the sorted array is equal to the\r\n            # given number\r\n            if (arr[i] + arr[j]) == sum:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    pairs = set()\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.add((arr[i], arr[j]))\r\n    return pairs\r\n\r\n# test\r\nprint(get_pairs_count(arr, n, sum))\r\n```\r\n\r\n- [x] [Find the minimum and maximum](https:\/\/github.com\/username_0\/Python\/blob\/main\/Algorithms\/Easy\/Minimum%20and%20maximum.py)\r\n```python\r\n\"\"\"\r\nFind the minimum and maximum in a list of integers.\r\n\"\"\"\r","votes":null},{"text":"\r\n    pairs_count = 0\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\nprint(get_pairs_count(arr, n, sum))\r\n","votes":null},{"text":"\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                print(arr[i], arr[j])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    n = 10\r\n    sum = 11\r\n    get_pairs_count(arr, n, sum)\r\n","votes":null},{"text":"\r\n    # create a set to store the unique pairs\r\n    pairs = set()\r\n    # iterate through the array\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            # check if the sum of the two numbers is equal to the sum\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.add((arr[i], arr[j]))\r\n    return len(pairs)\r\n\r\n\"\"\"\r\nA better way to solve this problem is to use the following function:\r\n\"\"\"\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                print(f\"({arr[i]},{arr[j]})\")\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(\"The array is: \")\r\n    print(arr)\r\n    n = len(arr)\r\n    sum = 9\r\n    get_pairs_count(arr, n, sum)","votes":null},{"text":"\r\n    # Write your code here\r\n    pairs = []\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter the length of the array:'))\r\n    arr = list(map(int, input('Enter the array elements:').split(' ')))\r\n    sum = int(input('Enter the sum of the elements:'))\r\n    print(get_pairs_count(arr, n, sum))\r\n","votes":null},{"text":"\r\n    pairs_count = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r\n# -\r\n\r\n# ### Test your function\r\n#\r\n# The following code tests your function. You should not need to change this.\r\n\r\n# +\r\narr = [1, 2, 4, 5, 7, 11, 13, 17, 19]\r\nn = 10\r\nsum = 15\r\nprint('Number of pairs in array with sum {} is {}.'.format(sum, get_pairs_count(arr, n, sum)))\r\nassert get_pairs_count(arr, n, sum) == 4\r\n\r\n\r\n# -\r\n\r\n# ## 2.1.2. Find all pairs in an integer array whose sum is equal to a given number\r\n#\r\n# The function `get_pairs_count` takes an integer array and a number `target` as input. It returns the number of pairs in the array whose sum is equal to `target`.\r\n#\r\n# The function `get_pairs_count` returns 0 if `target` is not found in the array.\r\n#\r\n# The function `get_pairs_count` returns the number of pairs in the array whose sum is equal to `target` if `target` is found in the array.\r\n#\r\n# The function `get_pairs_count` should work for positive and negative integers.\r\n#\r\n# The function `get_pairs_count` should work for all integer arrays that are not empty.\r\n#\r\n# The function `get_pairs_count` should work for all integer arrays that are not all zeros.\r\n#\r\n# The function `get_pairs_count` should work for all integer arrays that are all integers.\r\n#\r\n# The function `get_pairs_count` should work for all integer arrays of arbitrary length.\r\n#\r\n# The function `get_pairs_coun","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r\n# Time complexity: O(n2)\r\n# Space complexity: O(n)\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = set()\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.add((i, j))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((i, j))\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in range(len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                result.append([arr[i], arr[j]])\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = set()\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.add((i, j))\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the size of the array: \"))\r\n    arr = list(map(int, input(\"Enter the elements of the array: \").split()))\r\n    sum = int(input(\"Enter the sum of the pairs: \"))\r\n    print(get_pairs_count(arr, n, sum))","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append((arr[i], arr[j]))\r\n    return pairs\r\n\r\nprint(get_pairs_count([1,2,3,4,5,6], 6, 10))","votes":null},{"text":"\r\n    pairs = []\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    return pairs\r\n\r\n\r","votes":null}],"time":{"count":19.0,"avg":155959.572,"std":43967.3749877676,"cov":0.2819152068}}
{"id":532,"question":"def check_permutation(str1, str2):\r\n    \"\"\"Write a function to check if the two given strings are permutations of each other.\"\"\"","answers":[{"text":"\r\n    str1_set = set(str1)\r\n    str2_set = set(str2)\r\n    if str1_set == str2_set:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":64234.524},{"text":"\r\n    return ''.join(sorted(str1)) == ''.join(sorted(str2))\r\n\r\n\r","votes":65365.1},{"text":"\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    if str1 == str2:\r\n        return True\r\n    return False\r\n\r\n\r","votes":72376.48},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    return str1 == str2\r\n\r\n\r","votes":76436.772},{"text":"\r\n    # Write your code here\r\n    if str1 == str2:\r\n        return True\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":77702.904},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    if sorted(str1) == sorted(str2):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":78825.624},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    if set(str1)!= set(str2):\r\n        return False\r\n    return True\r\n\r\n\r","votes":81403.756},{"text":"\r\n    # if len(str1)!= len(str2):\r\n    #     return False\r\n    # for i in range(len(str1)):\r\n    #     if str1[i]!= str2[i]:\r\n    #         return False\r\n    # return True\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    if sorted(str1)!= sorted(str2):\r\n        return False\r\n    return True\r\n\r\n\r","votes":87733.42},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    return ''.join(sorted(str1)) == ''.join(sorted(str2))\r\n\r\n\r","votes":88202.54},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    for char in str1:\r\n        if str1.count(char)!= str2.count(char):\r\n            return False\r\n    return True\r\n\r\n\r","votes":89040.9},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":89459.472},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    if sorted(str1) == sorted(str2):\r\n        return True\r\n    return False\r\n\r\n\r","votes":90541.052},{"text":"\r\n    # for each character in the first string\r\n    for i in range(len(str1)):\r\n        # if the character is not in the second string\r\n        if str1[i] not in str2:\r\n            # return false\r\n            return False\r\n    # return true\r\n    return True\r\n\r\n\r","votes":92651.02},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    for ch in str1:\r\n        if ch not in str2:\r\n            return False\r\n    return True\r\n\r","votes":92670.572},{"text":"\r\n    # Check if str1 and str2 are the same length\r\n    if len(str1)!= len(str2):\r\n        return False\r\n\r\n    # Check if the characters in str1 are in str2 in the same order\r\n    for char in str1:\r\n        if char not in str2:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":92707.52},{"text":"\r\n    if len(str1) == len(str2):\r\n        return sorted(str1) == sorted(str2)\r\n    else:\r\n        return False\r\n\r\n\r","votes":93447.656},{"text":"\r\n    # Write your code here.\r\n    if len(str1) == len(str2) and set(str1.lower()) == set(str2.lower()):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":98381.884},{"text":"\r\n    if len(str2)!= len(str1):\r\n        return False\r\n    for char in str1:\r\n        if char not in str2:\r\n            return False\r\n    return True\r\n\r\n\r","votes":98942.748},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    # sort them\r\n    str1, str2 = sorted(str1), sorted(str2)\r\n    for ch in str1:\r\n        if ch not in str2:\r\n            return False\r\n    return True\r\n\r","votes":99712.784},{"text":"\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    if str1 == str2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":102271.456},{"text":"\r\n\r\n    # make str1 and str2 lowercase\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    # create a dictionary of unique characters in str1\r\n    char_dict = {}\r\n\r\n    # find the unique characters in str1\r\n    for char in str1:\r\n        if char in char_dict:\r\n            char_dict[char] += 1\r\n        else:\r\n            char_dict[char] = 1\r\n\r\n    # create a dictionary of unique characters in str2\r\n    char_dict2 = {}\r\n\r\n    # find the unique characters in str2\r\n    for char in str2:\r\n        if char in char_dict2:\r\n            char_dict2[char] += 1\r\n        else:\r\n            char_dict2[char] = 1\r\n\r\n    # compare the unique characters in str1 and str2\r\n    if char_dict == char_dict2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":102580.976},{"text":"\r\n    if str1 == str2:\r\n        return True\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    return all(c in str2 for c in str1)\r\n\r\n\r","votes":103486.956},{"text":"\r\n    # your code goes here\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    return str1 == str2\r\n\r","votes":103802.036},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    # sort the strings\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    # check if the strings are equal\r\n    return str1 == str2\r\n\r\n\r","votes":105000.616},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1 = list(str1)\r\n    str2 = list(str2)\r\n    str1.sort()\r\n    str2.sort()\r\n    for i in range(len(str1)):\r\n        if str1[i]!= str2[i]:\r\n            return False\r\n    return True\r\n\r\n\r\nprint(check_permutation('abcd', 'dcba'))\r\nprint(check_permutation('abcd', 'abc'))\r\nprint(check_permutation('abc', 'abcd'))\r\nprint(check_permutation('abcd', 'ab'))\r\n","votes":108205.964},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1_set = set(str1)\r\n    str2_set = set(str2)\r\n    if str1_set!= str2_set:\r\n        return False\r\n    return True\r\n\r","votes":110117.852},{"text":"\r\n    str1 = \"\".join(sorted(str1))\r\n    str2 = \"\".join(sorted(str2))\r\n    return str1 == str2\r\n\r","votes":112284.572},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1_set, str2_set = set(str1), set(str2)\r\n    if str1_set!= str2_set:\r\n        return False\r\n    return True\r\n\r\n\r","votes":112465.316},{"text":"\r\n    str1 = str1.replace(\" \", \"\")\r\n    str2 = str2.replace(\" \", \"\")\r\n    str1 = \"\".join(sorted(str1))\r\n    str2 = \"\".join(sorted(str2))\r\n    if str1 == str2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":112545.52},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n\r\n    str1_counter = [0] * 26\r\n    str2_counter = [0] * 26\r\n\r\n    for i in range(len(str1)):\r\n        str1_counter[ord(str1[i]) - 97] += 1\r\n        str2_counter[ord(str2[i]) - 97] += 1\r\n\r\n    for i in range(26):\r\n        if str1_counter[i]!= str2_counter[i]:\r\n            return False\r\n\r\n    return True\r\n\r\nif __name__ == \"__main__\":\r\n    str1 = \"abcd\"\r\n    str2 = \"dabc\"\r\n    print(check_permutation(str1, str2))\r\n","votes":114949.776},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    char_dict = {}\r\n    for char in str1:\r\n        if char in char_dict:\r\n            char_dict[char] += 1\r\n        else:\r\n            char_dict[char] = 1\r\n    for char in str2:\r\n        if char in char_dict:\r\n            char_dict[char] -= 1\r\n        else:\r\n            return False\r\n    for value in char_dict.values():\r\n        if value!= 0:\r\n            return False\r\n    return True\r\n\r","votes":116109.464},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    sorted_str1 = sorted(str1)\r\n    sorted_str2 = sorted(str2)\r\n    return sorted_str1 == sorted_str2\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(check_permutation('abc', 'acb'))","votes":116120.704},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    for i in range(len(str1)):\r\n        if str1[i] not in str2:\r\n            return False\r\n        if str2[i] not in str1:\r\n            return False\r\n    return True\r\n\r\n\r","votes":116321.596},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1_set = set(str1)\r\n    str2_set = set(str2)\r\n    if str1_set == str2_set:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":116431.492},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    str1_set = set(str1)\r\n    str2_set = set(str2)\r\n    if str1_set == str2_set:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":117209.696},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1_set = set(str1)\r\n    str2_set = set(str2)\r\n    return str1_set == str2_set\r\n\r\n\r","votes":117837.556},{"text":"\r\n    # Your code goes here\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    count = {}\r\n    for i in str1:\r\n        count[i] = count.get(i, 0) + 1\r\n    for i in str2:\r\n        count[i] = count.get(i, 0) - 1\r\n    for i in count:\r\n        if count[i]!= 0:\r\n            return False\r\n    return True\r\n\r","votes":117892.52},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    else:\r\n        for i in str1:\r\n            if i not in str2:\r\n                return False\r\n        return True\r\n\r\n\r","votes":119249.676},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(check_permutation(\"abc\", \"bca\"))\r\n    print(check_permutation(\"abcd\", \"dcba\"))\r\n    print(check_permutation(\"abcd\", \"dcba\"))\r\n    print(check_permutation(\"abcd\", \"dcba\"))\r\n","votes":120790.564},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    else:\r\n        return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":125668.5},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    dict1 = {}\r\n    dict2 = {}\r\n    for letter in str1:\r\n        if letter in dict1:\r\n            dict1[letter] += 1\r\n        else:\r\n            dict1[letter] = 1\r\n    for letter in str2:\r\n        if letter in dict2:\r\n            dict2[letter] += 1\r\n        else:\r\n            dict2[letter] = 1\r\n    if dict1 == dict2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":126735.852},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    temp_dict = {}\r\n    for i in range(len(str1)):\r\n        if str1[i] in temp_dict:\r\n            temp_dict[str1[i]] += 1\r\n        else:\r\n            temp_dict[str1[i]] = 1\r\n    for i in range(len(str2)):\r\n        if str2[i] in temp_dict:\r\n            temp_dict[str2[i]] -= 1\r\n        else:\r\n            return False\r\n    for value in temp_dict.values():\r\n        if value!= 0:\r\n            return False\r\n    return True\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    str1 = \"abba\"\r\n    str2 = \"bab\"\r\n    print(check_permutation(str1, str2))\r\n","votes":127365.136},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n","votes":128768.412},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n\r\n    str1 = list(str1)\r\n    str2 = list(str2)\r\n    str1.sort()\r\n    str2.sort()\r\n\r\n    return str1 == str2\r\n\r\n\r","votes":134660.396},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    elif str1 == str2:\r\n        return True\r\n    else:\r\n        for i in range(len(str1)):\r\n            if str1[i] not in str2:\r\n                return False\r\n            elif str2[i] not in str1:\r\n                return False\r\n        return True\r\n\r\n\r","votes":139348.42},{"text":"\r\n\r\n    # str1 = 'abccba'\r\n    # str2 = 'bcaacb'\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1_set = set(str1)\r\n    str2_set = set(str2)\r\n    return str1_set == str2_set\r\n\r\n\r","votes":139676.612},{"text":"\r\n    for i in range(len(str1)):\r\n        if str1[i] not in str2:\r\n            return False\r\n    for i in range(len(str2)):\r\n        if str2[i] not in str1:\r\n            return False\r\n    return True\r\n\r","votes":146802.996},{"text":"\r\n    # create two empty dictionaries\r\n    d = {}\r\n    d2 = {}\r\n\r\n    # iterate over the characters of str1\r\n    for i in str1:\r\n        # if the dictionary already has i as a key then add 1 to the value\r\n        if i in d:\r\n            d[i] += 1\r\n        # if the dictionary does not have i as a key then add i to the dictionary\r\n        else:\r\n            d[i] = 1\r\n\r\n    # iterate over the characters of str2\r\n    for i in str2:\r\n        # if the dictionary already has i as a key then add 1 to the value\r\n        if i in d2:\r\n            d2[i] += 1\r\n        # if the dictionary does not have i as a key then add i to the dictionary\r\n        else:\r\n            d2[i] = 1\r\n\r\n    # return True if d2 is a permutation of d, else return False\r\n    if d2 == d:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":147619.904},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1_dict = {}\r\n    str2_dict = {}\r\n    for char in str1:\r\n        if char in str1_dict:\r\n            str1_dict[char] += 1\r\n        else:\r\n            str1_dict[char] = 1\r\n    for char in str2:\r\n        if char in str2_dict:\r\n            str2_dict[char] += 1\r\n        else:\r\n            str2_dict[char] = 1\r\n    for key in str1_dict:\r\n        if key not in str2_dict or str1_dict[key]!= str2_dict[key]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":180031.132},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n\r\n    str1_dict = {}\r\n    str2_dict = {}\r\n\r\n    for idx, char in enumerate(str1):\r\n        str1_dict[char] = str1_dict.get(char, 0) + 1\r\n\r\n    for idx, char in enumerate(str2):\r\n        str2_dict[char] = str2_dict.get(char, 0) + 1\r\n\r\n    return str1_dict == str2_dict\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert check_permutation('abc', 'bca') == True, \"First\"\r\n    assert check_permutation('abc', 'cba') == False, \"Second\"\r\n    assert check_permutation('abc', 'ab') == False, \"Third\"\r\n    assert check_permutation('abc', 'abcc') == False, \"Fourth\"\r\n    assert check_permutation('ab', 'ba') == True, \"Fifth\"\r\n    assert check_permutation('ab', 'abab') == True, \"Sixth\"\r\n    assert check_permutation('ab', 'ab') == True, \"Seventh\"\r\n    assert check_permutation('ab', 'b') == False, \"Eighth\"\r\n    assert check_permutation('ab', 'abcc') == False, \"Ninth\"\r\n    assert check_permutation('ab', 'ba') == True, \"Tenth\"\r\n    assert check_permutation('ab', 'abab') == True, \"Eleventh\"\r\n    assert check_permutation('ab', 'ab') == True, \"Twelfth\"\r\n    assert check_permutation('ab', 'b') == False, \"Thirteenth\"\r\n    assert check_permutation('ab', 'abcc') == False, \"Fourteenth\"\r\n    assert check_permutation('ab', 'ba') == True, \"Fifteenth\"\r\n    assert check_permutation('ab', 'abab') == True, \"Sixteenth\"\r\n    assert check_permutation('ab', 'ab') == True, \"Seventeenth\"\r\n    assert check_permutation('ab', 'b') == False, \"Eighteenth\"\r\n    assert check","votes":188415.18},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n\r\n    char_freq = {}\r\n    for char in str1:\r\n        if char not in char_freq:\r\n            char_freq[char] = 0\r\n        char_freq[char] += 1\r\n\r\n    for char in str2:\r\n        if char not in char_freq:\r\n            return False\r\n        if char_freq[char] == 0:\r\n            return False\r\n        char_freq[char] -= 1\r\n\r\n    return True\r\n\r","votes":192629.228},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str2 = str(str2)\r\n    str1 = str(str1)\r\n    str1.replace(' ', '')\r\n    str2.replace(' ', '')\r\n    str1 = list(str1)\r\n    str2 = list(str2)\r\n    str1.sort()\r\n    str2.sort()\r\n    for i in range(len(str1)):\r\n        if str1[i]!= str2[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":195708.296},{"text":"\r\n    set1 = set()\r\n    set2 = set()\r\n    for i in str1:\r\n        set1.add(i)\r\n    for i in str2:\r\n        set2.add(i)\r\n    if set1 == set2:\r\n        return True\r\n    else:\r\n        return False\r\nprint(check_permutation('abcdef', 'defabc'))\r\nprint(check_permutation('abcdef', 'acebf'))\r\nprint(check_permutation('abcdef', 'accbfd'))\r\nprint(check_permutation('abcdef', 'abcde'))\r\nprint(check_permutation('abcdef', ''))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcde'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r\nprint(check_permutation('abcdef', 'abcdef'))\r","votes":222087.0},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    counter = [0] * 26\r\n    for s in str1:\r\n        counter[ord(s) - ord('a')] += 1\r\n    for s in str2:\r\n        counter[ord(s) - ord('a')] -= 1\r\n    for i in range(len(counter)):\r\n        if counter[i]!= 0:\r\n            return False\r\n    return True\r\n\r\n\r","votes":226192.952},{"text":"\r\n    if str1 == str2:\r\n        return True\r\n    if str1 == \"\" or str2 == \"\":\r\n        return False\r\n    if str1[0] not in str2:\r\n        return False\r\n    return check_permutation(str1[1:], str2[1:])\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r\n@pytest.mark.parametrize(\r\n    \"str1, str2\", [(\"abc\", \"cba\"), (\"abcde\", \"cdeab\"), (\"abc\", \"xyz\")]\r\n)\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    return str1.lower() == str2.lower()\r\n\r\n\r\n# tests\r\nprint(check_permutation('abcd', 'dcba'))\r\nprint(check_permutation('abc', 'abc'))\r\nprint(check_permutation('abc', 'cba'))\r\nprint(check_permutation('abcd', 'abc'))\r\n","votes":null},{"text":"\r\n    if str1 == str2:\r\n        return True\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1 = str.lower(str1)\r\n    str2 = str.lower(str2)\r\n    for i in range(len(str1)):\r\n        if str1[i]!= str2[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    if len(set(str1))!= len(str1):\r\n        return False\r\n    return True\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n\r\n    str1_dict = {}\r\n    str2_dict = {}\r\n    for i in range(len(str1)):\r\n        if str1[i] in str1_dict:\r\n            str1_dict[str1[i]] += 1\r\n        else:\r\n            str1_dict[str1[i]] = 1\r\n\r\n        if str2[i] in str2_dict:\r\n            str2_dict[str2[i]] += 1\r\n        else:\r\n            str2_dict[str2[i]] = 1\r\n\r\n    for i in str1_dict:\r\n        if str1_dict[i]!= str2_dict[i]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\nprint(check_permutation('abcb', 'cbab'))\r\nprint(check_permutation('ab', 'a'))\r\nprint(check_permutation('abc', 'acb'))\r\n\r\n","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n\r\n    for i in range(len(str1)):\r\n        if str1[i]!= str2[i]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    l1 = len(str1)\r\n    l2 = len(str2)\r\n    if l1!= l2:\r\n        return False\r\n    elif l1 == 0:\r\n        return True\r\n    elif l1 == 1:\r\n        if str1 == str2:\r\n            return True\r\n        else:\r\n            return False\r\n    else:\r\n        for i in range(l1):\r\n            if str1[i]!= str2[l1 - i - 1]:\r\n                return False\r\n        return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    return list(str1) == list(str2)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    str1_dict = {}\r\n    for s in str1:\r\n        if s in str1_dict:\r\n            str1_dict[s] += 1\r\n        else:\r\n            str1_dict[s] = 1\r\n    for s in str2:\r\n        if s in str1_dict:\r\n            str1_dict[s] -= 1\r\n        else:\r\n            return False\r\n    for k in str1_dict:\r\n        if str1_dict[k]!= 0:\r\n            return False\r\n    return True\r\n\r\nassert check_permutation(\"abc\", \"cba\") == True\r\nassert check_permutation(\"abc\", \"acb\") == False\r\nassert check_permutation(\"abc\", \"bca\") == False\r\nassert check_permutation(\"abc\", \"aac\") == False\r\nassert check_permutation(\"abc\", \"acb\") == False\r\nassert check_permutation(\"abc\", \"abc\") == True\r\nassert check_permutation(\"\", \"\") == True\r\nassert check_permutation(\"abc\", \"\") == False\r\nassert check_permutation(\"\", \"abc\") == False\r\nassert check_permutation(\"abc\", \"def\") == False\r\nassert check_permutation(\"abc\", \"ab\") == False\r\nassert check_permutation(\"abc\", \"abca\") == False\r\nassert check_permutation(\"abc\", \"abcb\") == False\r\nassert check_permutation(\"abc\", \"acb\") == True\r\nassert check_permutation(\"abc\", \"bc\") == True\r\nassert check_permutation(\"abc\", \"cab\") == True\r\nassert check_permutation(\"abc\", \"cba\") == True\r\nassert check_permutation(\"abc\", \"cabc\") == True\r\nassert check_permutation(\"abc\", \"cabc\") == True\r\nassert check_permutation(\"abc\", \"cab\") == True\r\nassert check_permutation(\"abc\", \"cab\") == True\r\nassert check_permutation(\"abc\", \"abc\") == True\r\nassert check_permutation(\"abc\", \"abc\") == True\r\nassert check_permutation(\"abc\", \"abc\") == True\r\nassert check_permutation(\"abc\", \"abc\") == True\r\nassert check_permutation(\"abc\", \"ab","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    else:\r\n        for i in range(len(str1)):\r\n            if str1[i]!= str2[i]:\r\n                return False\r\n        return True\r\n\r","votes":null},{"text":"\r\n    if str1 == str2:\r\n        return True\r\n    elif str1 == \"\" or str2 == \"\":\r\n        return False\r\n    else:\r\n        if str1[0] == str2[0]:\r\n            return check_permutation(str1[1:], str2[1:])\r\n        else:\r\n            return False\r\n\r\ncheck_permutation(\"abcde\", \"cdeab\")","votes":null},{"text":"\r\n\r\n    if len(str1)!= len(str2):\r\n        return False\r\n\r\n    count = collections.Counter(str1)\r\n\r\n    for c in str2:\r\n        if c not in count:\r\n            return False\r\n        else:\r\n            count[c] -= 1\r\n\r\n    return True\r\n\r\n\r\n\"\"\"\r\nIn mathematics, the permutation of a set of objects A is the arrangement of its members into a sequence or linear order.\r\n- In this case, a string is a permutation of another string if it is composed of the same characters with the same frequencies.\r\n- For example, \"aab\" is a permutation of \"bba\" since the characters a and b appear twice and the characters b and a appear once.\r\n\"\"\"\r\n\"\"\"\r\nThe function check_permutation(str1, str2) takes two strings as arguments and returns True if str2 is a permutation of str1 and False otherwise.\r\n\"\"\"\r\n\"\"\"\r\nExample 1:\r\n\r\nInput: str1 = \"aab\", str2 = \"bba\"\r\nOutput: True\r\nExplanation: \"aab\" is a permutation of \"bba\" since the characters a and b appear twice and the characters b and a appear once.\r\nExample 2:\r\n\r\nInput: str1 = \"aab\", str2 = \"bbb\"\r\nOutput: False\r\nExample 3:\r\n\r\nInput: str1 = \"aab\", str2 = \"bba\"\r\nOutput: True\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nApproach:\r\n- Count the frequency of each character in the first string.\r\n- For each character in the second string, if the frequency of the character is larger than zero, decrement the frequency of the character in the first string.\r\n- If the frequency of the character in the second string is 0, then one of the strings is not a permutation of the other.\r\n- If the character in the second string is not in the first string, then the strings are not permutations.\r\n- If all characters of the second string are visited, then the strings are permutations.\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTime complexity: O(n), where n is the length of str1.\r\nSpace complexity: O(1).\r\n\"\"\"\r\n\r\n\r\nclass Solution","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    elif not (str1 + str2) == sorted(str1 + str2):\r\n        return False\r\n    else:\r\n        return True\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    for i in range(len(str1)):\r\n        if str1[i]!= str2[len(str2) - 1 - i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    return sorted(str1) == sorted(str2)\r\n\r\n# Tests\r\nassert check_permutation('abc', 'acb') == True\r\nassert check_permutation('abc', 'bca') == False\r\nassert check_permutation('abc', 'cba') == False\r\nassert check_permutation('abc', 'abc') == True\r\nassert check_permutation('abc', 'ab') == False\r\nassert check_permutation('abc', 'abcde') == False","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    for i in range(len(str1)):\r\n        if str1[i]!= str2[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    count = [0] * 26\r\n    for ch in str1:\r\n        count[ord(ch) - ord('a')] += 1\r\n    for ch in str2:\r\n        count[ord(ch) - ord('a')] -= 1\r\n    for i in range(len(str1)):\r\n        if count[i]!= 0:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    return str1.replace(' ', '') == str2.replace(' ', '')\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    a = []\r\n    for i in str1:\r\n        a.append(i)\r\n    b = []\r\n    for i in str2:\r\n        b.append(i)\r\n    if a == b:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    \r\n    # If the two strings are not of the same length, they aren't permutations.\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    \r\n    # A dictionary that keeps track of which letters correspond to which positions in the two strings.\r\n    letter_positions = {}\r\n\r\n    # Add the letters in each string to the dictionary.\r\n    for i in range(len(str1)):\r\n        letter_positions[str1[i]] = i\r\n    \r\n    # Check if each letter occurs the same number of times in each string.\r\n    for i in range(len(str1)):\r\n        if letter_positions[str2[i]]!= i:\r\n            return False\r\n    \r\n    return True\r\n\r\n# Tests.\r\nassert check_permutation(\"abc\", \"acb\") == True\r\nassert check_permutation(\"abc\", \"bca\") == True\r\nassert check_permutation(\"abc\", \"cab\") == False\r\nassert check_permutation(\"abc\", \"\") == False\r\nassert check_permutation(\"\", \"abc\") == False\r\nassert check_permutation(\"\", \"\") == True\r\nassert check_permutation(\"abc\", \"def\") == False\r\n","votes":null},{"text":"\r\n    if str1 == str2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# + [markdown] id=\"nK75-pN9z2UW\"\r\n# ## Exercises\n\n# + [markdown] id=\"3yM7wV6a030f\"\n# ### Exercise 1\n#\n# Write a function to check if the given string is a palindrome or not.\n\n# + id=\"K4u_t4B0030g\"","votes":null},{"text":"\r\n    # write your code here\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    else:\r\n        # create a dictionary of all characters in the string\r\n        char_count = {}\r\n        for char in str1:\r\n            if char in char_count:\r\n                char_count[char] += 1\r\n            else:\r\n                char_count[char] = 1\r\n\r\n        for char in str2:\r\n            if char in char_count:\r\n                char_count[char] -= 1\r\n            else:\r\n                return False\r\n        return True\r\n\r\n\r\nassert check_permutation('abc', 'cba') == True\r\nassert check_permutation('abcd', 'badc') == False\r\nassert check_permutation('abcd', 'cbda') == False\r\nassert check_permutation('abcd', 'a') == False\r\nassert check_permutation('abcd', '') == True\r\nassert check_permutation('abcd', 'a') == False\r\nassert check_permutation('abcd', 'aa') == False\r\nassert check_permutation('abcd', 'a') == False\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert check_permutation('abcd', 'abc') == True\r\nassert chec","votes":null},{"text":"\r\n    return str1.replace(' ', '') == str2.replace(' ', '')\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    counts = {}\r\n    for s in str1:\r\n        counts[s] = counts.get(s, 0) + 1\r\n    for s in str2:\r\n        if s in counts:\r\n            if counts[s] > 1:\r\n                return False\r\n            counts[s] -= 1\r\n    return True\r\n\r\nif __name__ == '__main__':\r\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert check_permutation('abba', 'abcb'), \"abba is not a permutation of abcb\"\r\n    assert check_permutation('abba', 'abba'), \"abba is a permutation of itself\"\r\n    assert check_permutation('abba', 'bbaa'), \"abba is not a permutation of bbaa\"\r\n    assert check_permutation('abaa', 'baaa'), \"abaa is a permutation of baa\"\r\n    assert check_permutation('abaa', 'baab'), \"abaa is not a permutation of baab\"\r\n    assert check_permutation('abaa', 'aba'), \"abaa is a permutation of aba\"\r\n    assert check_permutation('abaa', 'abaab'), \"abaa is not a permutation of abaab\"\r\n    assert check_permutation('abaa', 'baa'), \"abaa is a permutation of baa\"\r\n    assert check_permutation('abaa', 'aab'), \"abaa is not a permutation of aab\"\r\n    assert check_permutation('abaa', 'aaba'), \"abaa is not a permutation of aaba\"\r\n    assert check_permutation('abaa', 'aabaa'), \"abaa is not a permutation of aabaa\"\r\n    assert check_permutation('abaa', 'aaaba'), \"abaa is not a permutation of aaaba\"\r\n    assert check_permutation('abaa', 'aabaa'), \"abaa is not a permutation of aabaa\"","votes":null},{"text":"\r\n    # check if the string is the same length\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    # create an array to store the frequency of each character in str1\r\n    freq1 = [0] * 26\r\n    # for each character in str1\r\n    for i in range(len(str1)):\r\n        # increment the frequency of the character\r\n        freq1[ord(str1[i]) - ord('a')] += 1\r\n    # create an array to store the frequency of each character in str2\r\n    freq2 = [0] * 26\r\n    # for each character in str2\r\n    for i in range(len(str2)):\r\n        # increment the frequency of the character\r\n        freq2[ord(str2[i]) - ord('a')] += 1\r\n    # for each character in str1\r\n    for i in range(len(str1)):\r\n        # if the frequencies of the characters are not same\r\n        if freq1[i]!= freq2[i]:\r\n            # return false\r\n            return False\r\n    # return true\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize the character counts with zeroes.\r\n    counts = [0] * 26\r\n    # Initialize the result.\r\n    result = True\r\n    # Iterate through each character in str1.\r\n    for i in range(len(str1)):\r\n        # Get the index of the current character in str2.\r\n        index = ord(str2[i]) - ord('a')\r\n        # Increment the count at the index.\r\n        counts[index] += 1\r\n        # Check if the count at the index is not equal to zero.\r\n        if counts[index]!= 1:\r\n            # If it is not, set the result to False.\r\n            result = False\r\n    # Return the result.\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Get the input strings.\r\n    input_str1 = input(\"Enter string 1: \")\r\n    input_str2 = input(\"Enter string 2: \")\r\n    # Check if the strings are permutations of each other.\r\n    print(check_permutation(input_str1, input_str2))\r\n","votes":null},{"text":"\r\n    # TODO: Your code here\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    for i in range(len(str1)):\r\n        if str1[i]!= str2[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = list(str1)\r\n    str2 = list(str2)\r\n    if (str1 == str2):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    else:\r\n        for i in range(len(str1)):\r\n            if str1[i] == str2[i]:\r\n                continue\r\n            else:\r\n                return False\r\n\r\n        return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    if str1 == str2:\r\n        return True\r\n    # 1. Create a dictionary to store the frequency of each character in str1\r\n    freq = Counter(str1)\r\n    # 2. Check if all the characters of str2 are present in freq\r\n    for ch in str2:\r\n        if ch not in freq:\r\n            return False\r\n    # 3. Check if all the characters of str1 are present in str2\r\n    for ch in freq:\r\n        if ch not in str2:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Convert the strings to lists of characters\r\n    str1 = list(str1)\r\n    str2 = list(str2)\r\n\r\n    # Sort the characters of each string\r\n    str1.sort()\r\n    str2.sort()\r\n\r\n    # Return True if the sorted lists are the same\r\n    return str1 == str2\r\n\r\n\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\r\nprint(check_permutation(\"abc","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n\r\n    str1_dict = {}\r\n    str2_dict = {}\r\n\r\n    for i in range(len(str1)):\r\n        if str1[i] in str1_dict:\r\n            str1_dict[str1[i]] += 1\r\n        else:\r\n            str1_dict[str1[i]] = 1\r\n\r\n        if str2[i] in str2_dict:\r\n            str2_dict[str2[i]] += 1\r\n        else:\r\n            str2_dict[str2[i]] = 1\r\n\r\n    for i in range(len(str1)):\r\n        if str1_dict[str1[i]]!= str2_dict[str2[i]]:\r\n            return False\r\n\r\n    return True\r\n\r\nclass Solution:\r\n   ","votes":null},{"text":"\r\n    # str1 = 'abc'\r\n    # str2 = 'bca'\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    letter_counter = {}\r\n    for letter in str1:\r\n        letter_counter[letter] = letter_counter.get(letter, 0) + 1\r\n    for letter in str2:\r\n        letter_counter[letter] -= 1\r\n        if letter_counter[letter] < 0:\r\n            return False\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(check_permutation('abc', 'bca'))\r\n    print(check_permutation('abc', 'cba'))\r\n    print(check_permutation('abc', 'abc'))\r\n","votes":null},{"text":"\r\n\r\n    if len(str1)!= len(str2):\r\n        return False\r\n\r\n    if sorted(str1)!= sorted(str2):\r\n        return False\r\n\r\n    return True\r\n\r\n\r\nassert check_permutation(\"abc\", \"bca\") == True\r\nassert check_permutation(\"abc\", \"acb\") == False\r\nassert check_permutation(\"abcde\", \"cdeab\") == True\r\nassert check_permutation(\"abcde\", \"abced\") == False\r\nassert check_permutation(\"abc\", \"abc\") == True\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"abcd\") == True\r\nassert check_permutation(\"abcd\", \"abdc\") == False\r\nassert check_permutation(\"abcd\", \"dcab\") == False\r\nassert check_permutation(\"abcd\", \"cbad\") == False\r\nassert check_permutation(\"abcd\", \"cdba\") == False\r\nassert check_permutation(\"abcd\", \"dcda\") == False\r\nassert check_permutation(\"abcd\", \"aacd\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") == False\r\nassert check_permutation(\"abcd\", \"dcba\") =","votes":null},{"text":"\r\n    for i, j in zip(str1, str2):\r\n        if i!= j:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if str1 == str2:\r\n        print(\"Yes, they are permutations.\")\r\n    else:\r\n        print(\"No, they are not permutations.\")\r\n        \r\ncheck_permutation(\"abc\", \"bca\")\r\n#Output: No, they are not permutations.\r\n```\r\n\r\n### **Output:**\r\n<p align=\"center\">\r\n  <img src=\"https:\/\/github.com\/SarthakKeshari12345\/Python-Challenges\/blob\/master\/Python_Challenges\/Data%20Structure\/Linked%20List\/Linked%20List%20Python%20Functions\/check_permutation.png\">\r\n<\/p>\r\n\r\n---\r\n\r\n#### **Input:**\r\n```\r\nEnter the first string: abcd\r\nEnter the second string: dcba\r\n```\r\n\r\n#### **Output:**\r\n<p align=\"center\">\r\n  <img src=\"https:\/\/github.com\/SarthakKeshari12345\/Python-Challenges\/blob\/master\/Python_Challenges\/Data%20Structure\/Linked%20List\/Linked%20List%20Python%20Functions\/check_permutation.png\">\r\n<\/p>\r\n\r\n---\r\n\r\n#### **Input:**\r\n```\r\nEnter the first string: abcd\r\nEnter the second string: abcd\r\n```\r\n\r\n#### **Output:**\r\n<p align=\"center\">\r\n  <img src=\"https:\/\/github.com\/SarthakKeshari12345\/Python-Challenges\/blob\/master\/Python_Challenges\/Data%20Structure\/Linked%20List\/Linked%20List%20Python%20Functions\/check_permutation.png\">\r\n<\/p>\r\n\r\n---\r\n\r\n#### **Input:**\r\n```\r\nEnter the first string: abcd\r\nEnter the second string: abcd\r\n```\r\n\r\n#### **Output:**\r\n<p align=\"center\">\r\n  <img src=\"https:\/\/github.com\/SarthakKeshari12345\/Python-Challenges\/blob\/master\/Python_Challenges\/Data%20Structure\/Linked","votes":null},{"text":"\r\n    if len(str1)!= len(str2):\r\n        return False\r\n    # A dictionary to keep track of the frequencies of each character\r\n    frequency = {}\r\n    for i in str1:\r\n        frequency[i] = frequency.get(i, 0) + 1\r\n    # Check if each character is present only once\r\n    for i in frequency.values():\r\n        if i!= 1:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if len(str1)!= len(str2):\r\n        return \"False\"\r\n    else:\r\n        for i in range(len(str1)):\r\n            if str1[i]!= str2[i]:\r\n                return \"False\"\r\n        return \"True\"\r\n\r\n\r\nprint(check_permutation(\"abc\", \"cba\"))\r\nprint(check_permutation(\"aab\", \"a\"))\r\nprint(check_permutation(\"aab\", \"b\"))","votes":null}],"time":{"count":54.0,"avg":116615.2046666667,"std":36143.5338947183,"cov":0.3099384338}}
{"id":534,"question":"def search_literal(pattern,text):\r\n    \"\"\"Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\"\"\"","answers":[{"text":"\r\n    #Find the position of the pattern in the text\r\n    pattern_position = text.find(pattern)\r\n    if(pattern_position == -1):\r\n        return pattern_position, pattern_position\r\n    else:\r\n        return pattern_position, pattern_position + len(pattern)\r\n\r","votes":105764.44},{"text":"\r\n    start = text.find(pattern)\r\n    end = start + len(pattern)\r\n    return start,end\r\n\r","votes":129898.296},{"text":"\r\n    start = text.find(pattern)\r\n    if start == -1:\r\n        return False\r\n    end = start + len(pattern)\r\n    return text[start:end], start, end\r\n\r","votes":null},{"text":"\r\n    pattern_index = text.find(pattern)\r\n    if pattern_index == -1:\r\n        return None\r\n    else:\r\n        return pattern_index\r\n\r","votes":null},{"text":"\r\n    text_with_pattern = pattern + text\r\n    pattern_count = 0\r\n    text_count = 0\r\n    for i in text_with_pattern:\r\n        if i == pattern[pattern_count]:\r\n            pattern_count += 1\r\n        else:\r\n            pattern_count = 0\r\n        text_count += 1\r\n    return text_count,pattern_count\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        return text.find(pattern)\r\n    else:\r\n        return -1\r\n\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        pattern_location = text.find(pattern)\r\n        return pattern_location\r\n    return 'Pattern not found'\r\n\r","votes":null},{"text":"\r\n    text_len = len(text)\r\n    pattern_len = len(pattern)\r\n    index = -1\r\n\r\n    while index < text_len:\r\n        if pattern == text[index:index+pattern_len]:\r\n            print(\"The pattern is found at the index\", index)\r\n            break\r\n        index += 1\r\n\r\nfind_pattern(\"abc\")\r\nfind_pattern(\"abc\")\r\n\r\nsearch_literal(\"abc\",\"abcd\")\r\nsearch_literal(\"abc\",\"abcd\")\r\n\r\nsearch_literal(\"abcd\",\"abcd\")\r\n\r\nsearch_literal(\"abcd\",\"abce\")\r\n\r","votes":null},{"text":"\r\n    return text.find(pattern)\r\n\r","votes":null},{"text":"\r\n    literal_pos = text.find(pattern)\r\n    if literal_pos!= -1:\r\n        print(literal_pos)\r\n        print(text[literal_pos:literal_pos+len(pattern)])\r\n    else:\r\n        print(\"Literal not found\")\r\n\r\nsearch_literal(\"c\",\"abcde\")\r\nsearch_literal(\"c\",\"abcde\")\r\nsearch_literal(\"c\",\"abcde\")\r\nsearch_literal(\"a\",\"abcde\")\r\nsearch_literal(\"d\",\"abcde\")\r\nsearch_literal(\"a\",\"abcde\")\r\nsearch_literal(\"d\",\"abcde\")\r\nsearch_literal(\"c\",\"abcde\")\r\nsearch_literal(\"a\",\"abcde\")\r\nsearch_literal(\"d\",\"abcde\")\r\n","votes":null},{"text":"\r\n    pattern_len = len(pattern)\r\n    pattern_start = 0\r\n    text_len = len(text)\r\n    text_start = 0\r\n    while pattern_start <= text_len:\r\n        if pattern_start <= text_len:\r\n            if pattern == text[pattern_start:pattern_start+pattern_len]:\r\n                return pattern_start\r\n        pattern_start = pattern_start + 1\r\n    return False\r\n\r","votes":null},{"text":"\r\n    pattern_len = len(pattern)\r\n    text_len = len(text)\r\n    for i in range(text_len):\r\n        if text[i:i+pattern_len] == pattern:\r\n            yield i, text[i:i+pattern_len]\r\n\r\nif __name__ == '__main__':\r\n    pattern = input('Enter the pattern to search for: ')\r\n    text = input('Enter the string to search in: ')\r\n    for i, j in search_literal(pattern,text):\r\n        print(i, j)\r\n","votes":null},{"text":"\r\n    try:\r\n        return text.index(pattern)\r\n    except ValueError:\r\n        return -1\r\n\r","votes":null},{"text":"\r\n    i = 0\r\n    count = 0\r\n    while i < len(text):\r\n        if pattern == text[i:i+len(pattern)]:\r\n            count = count + 1\r\n        i = i + 1\r\n    return count\r\n\r\n# Write a function to count the occurrences of a word in a sentence.\r\n\r","votes":null},{"text":"\r\n    #find where pattern occurs in text\r\n    text_loc = text.find(pattern)\r\n    #find the location in the original string where the pattern occurs\r\n    pattern_loc = text.rfind(pattern)\r\n    return text_loc,pattern_loc\r\n\r","votes":null},{"text":"\r\n    search_list = [m.start() for m in re.finditer(pattern, text)]\r\n    for i in search_list:\r\n        print(i)\r\n    return search_list\r\n\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        return text.find(pattern)\r\n    return False\r\n\r","votes":null},{"text":"\r\n    pattern=pattern.lower()\r\n    text=text.lower()\r\n    ind=text.find(pattern)\r\n    if ind==-1:\r\n        print(\"Pattern not found in the string\")\r\n        return\r\n    print(\"Pattern found at index {}\".format(ind))\r\n    print(\"Pattern found in the string : \",text[ind:ind+len(pattern)])\r\n    return text[ind:ind+len(pattern)]\r\n\r","votes":null},{"text":"\r\n    print(f\"Searching for {pattern} in {text}\")\r\n    index = text.find(pattern)\r\n    if index!= -1:\r\n        print(f\"Found {pattern} in {text} at index position {index}\")\r\n        print(f\"The original string is: {text[index-10:index+len(pattern)+10]}\")\r\n    else:\r\n        print(f\"No match found\")\r\n\r\nsearch_literal(\"hello\", \"hello\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"world\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\nsearch_literal(\"python\", \"hello world\")\r\nsearch_literal(\"hello\", \"hello world\")\r\n","votes":null},{"text":"\r\n    matches = re.findall(pattern,text)\r\n    if matches:\r\n        for match in matches:\r\n            print(match)\r\n            print(text.find(match))\r\n\r","votes":null},{"text":"\r\n    #Check if the pattern is already in the text\r\n    if pattern in text:\r\n        #Find the location of the pattern in the text\r\n        loc=text.find(pattern)\r\n        print(\"The literal '\"+pattern+\"' is found in the text at location \"+str(loc))\r\n    else:\r\n        print(\"The literal '\"+pattern+\"' is not found in the text\")\r\n    print(\"The original text is: \"+text)\r\n\r","votes":null},{"text":"\r\n    pattern = pattern.lower()\r\n    text = text.lower()\r\n    index = text.find(pattern)\r\n    if index == -1:\r\n        return \"Not found\"\r\n    return f\"Found at position {index}\"\r\n\r\nif __name__ == \"__main__\":\r\n    print(search_literal(\"Hello\",\"Hello world\"))\r\n    print(search_literal(\"Hello\",\"Hello World\"))\r\n    print(search_literal(\"hello\",\"Hello world\"))\r\n","votes":null},{"text":"\r\n    #Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\r\n#    pattern = 'cat'\r\n#    text = 'The cat sat on the mat.'\r\n#    return text.find(pattern)\r\n\r\n\r","votes":null},{"text":"\r\n    result_list = []\r\n    for i in range(len(text)):\r\n        if text[i] == pattern[0]:\r\n            if text[i] == pattern[-1]:\r\n                if text[i+1:i+len(pattern)] == pattern:\r\n                    result_list.append([i,i+len(pattern)-1])\r\n            else:\r\n                result_list.append([i,i+1])\r\n    return result_list\r\n\r","votes":null},{"text":"\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return i\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    pattern_found = text.find(pattern)\r\n    if pattern_found == -1:\r\n        return False, \"Pattern not found in the text.\"\r\n    else:\r\n        return True, \"Pattern found in the text at position: \" + str(pattern_found)\r\n\r","votes":null},{"text":"\r\n    return pattern.find(text)\r\n\r","votes":null},{"text":"\r\n    #First check if the pattern is a literal\r\n    if pattern[0] == \"'\":\r\n        #If it is a literal, then search for the pattern in the text string\r\n        try:\r\n            index=text.index(pattern)\r\n            return text[index:index+len(pattern)]\r\n        except ValueError:\r\n            return \"Pattern not found\"\r\n    #If the pattern is not a literal, then try to find the pattern within the text string\r\n    else:\r\n        try:\r\n            index=text.find(pattern)\r\n            return text[index:index+len(pattern)]\r\n        except ValueError:\r\n            return \"Pattern not found\"\r\n\r","votes":null},{"text":"\r\n    text_list = list(text)\r\n    pattern_list = list(pattern)\r\n    pattern_index = 0\r\n    text_index = 0\r\n    while pattern_index < len(pattern_list):\r\n        if pattern_list[pattern_index] == text_list[text_index]:\r\n            pattern_index += 1\r\n            text_index += 1\r\n        else:\r\n            text_index = text_index + 1 - pattern_index\r\n    if pattern_index == len(pattern_list):\r\n        return text_index,text_index+len(pattern_list)\r\n    else:\r\n        return -1,-1\r\n\r","votes":null},{"text":"\r\n    # search for the pattern in the text\r\n    index = text.find(pattern)\r\n    # if the pattern occurs in the text, write a function to print the location of the pattern within the text\r\nprint(search_literal(\"test\", \"The quick brown fox jumped over the lazy dog\"))\r\n\r\n\"\"\"Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\r\nThis function should return the location of the pattern within the text as well as the length of the pattern.\"\"\"\r\nprint(search_literal(\"test\", \"The quick brown fox jumped over the lazy dog\"))\r\n\"\"\"This function should return the location of the pattern within the text as well as the length of the pattern.\"\"\"\r\nprint(search_literal(\"test\", \"The quick brown fox jumped over the lazy dog\"))\r\n\r\n\"\"\"Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\r\nThis function should return the location of the pattern within the text as well as the length of the pattern.\r\nThis function should also print the original text after the search.\"\"\"\r\nprint(search_literal(\"test\", \"The quick brown fox jumped over the lazy dog\"))\r\n\"\"\"This function should return the location of the pattern within the text as well as the length of the pattern.\r\nThis function should also print the original text after the search.\"\"\"\r\nprint(search_literal(\"test\", \"The quick brown fox jumped over the lazy dog\"))\r\n\r\n\"\"\"Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\r\nThis function should return the location of the pattern within the text as well as the length of the pattern.\r\nThis function should also print the original text after the search.\r\nThis function should also print the original text before the search.\"\"\"\r\nprint(search_literal(\"test\", \"The quick brown fox jumped over the lazy dog\"))\r\n\"\"\"This function should return the location of the pattern within the text as well as the length of the pattern.\r\nThis function should also print the original text after the search.\r","votes":null},{"text":"\r\n    #print(pattern)\r\n    #print(text)\r\n    #pattern = pattern.lower()\r\n    #text = text.lower()\r\n    #print(pattern)\r\n    #print(text)\r\n    #pattern = pattern.replace(' ','')\r\n    #text = text.replace(' ','')\r\n    #print(pattern)\r\n    #print(text)\r\n    #pattern = re.sub('[^a-z0-9]',' ',pattern)\r\n    #text = re.sub('[^a-z0-9]',' ',text)\r\n    #print(pattern)\r\n    #print(text)\r\n    #pattern = pattern.replace(' ','')\r\n    #text = text.replace(' ','')\r\n    #print(pattern)\r\n    #print(text)\r\n    try:\r\n        pattern = pattern.lower()\r\n        text = text.lower()\r\n        pattern = pattern.replace(' ','')\r\n        text = text.replace(' ','')\r\n        pattern = re.sub('[^a-z0-9]',' ',pattern)\r\n        text = re.sub('[^a-z0-9]',' ',text)\r\n        pattern = pattern.replace(' ','')\r\n        text = text.replace(' ','')\r\n        if pattern in text:\r\n            return text.find(pattern)\r\n    except:\r\n        return -1\r\n\r\n#print(search_literal('hello', 'hello world'))\r\n\r","votes":null},{"text":"\r\n    #pattern is the literal string to search for\r\n    #text is the string in which the pattern occurs\r\n    #returning the locations\r\n    \r\n    #this will store the locations where the pattern occurs\r\n    locations=[]\r\n    #this will store the locations where the pattern occurs\r\n    location_of_pattern=[]\r\n    #this will store the locations where the literal string occurs\r\n    location_of_literal=[]\r\n    #this will store the locations where the literal string occurs\r\n    locations_of_literal=[]\r\n    #this will store the locations where the pattern occurs\r\n    location_of_pattern_in_text=[]\r\n    #this will store the locations where the literal string occurs\r\n    locations_of_literal_in_text=[]\r\n    #this will store the locations where the pattern occurs\r\n    location_of_pattern_in_text_index=[]\r\n    #this will store the locations where the literal string occurs\r\n    locations_of_literal_in_text_index=[]\r\n    #this will store the locations where the pattern occurs\r\n    location_of_pattern_in_text_index_of_literal=[]\r\n    #this will store the locations where the literal string occurs\r\n    locations_of_literal_in_text_index_of_literal=[]\r\n    #this will store the locations where the pattern occurs\r\n    location_of_pattern_in_text_index_of_literal_index=[]\r\n    #this will store the locations where the literal string occurs\r\n    locations_of_literal_in_text_index_of_literal_index=[]\r\n    #this will store the locations where the pattern occurs\r\n    location_of_pattern_in_text_index_of_literal_index_index=[]\r\n    #this will store the locations where the literal string occurs\r\n    locations_of_literal_in_text_index_of_literal_index_index=[]\r\n    #this will store the locations where the pattern occurs\r\n    location_of_pattern_in_text_index_of_literal_index_index_index=[]\r\n    #this will store the locations where the literal string occurs\r\n    locations_of_literal_in_text_index_of_literal_index_index_index=[]\r\n    #this will store the locations where the pattern occurs\r\n    location_of_pattern_in_text_index_of_literal_index_index_inde","votes":null},{"text":"\r\n    # write your code here\r\n    search_index = text.find(pattern)\r\n    if search_index == -1:\r\n        print(\"The pattern is not found in the string.\")\r\n    else:\r\n        print(\"The pattern is found in the string.\")\r\n        print(\"The location of the pattern in the string is\",search_index)\r\n    return search_index\r\n\r\nsearch_literal('dog', 'I have a dog')\r\nsearch_literal('cat', 'I have a dog')\r\nsearch_literal('dog','I have a cat')","votes":null},{"text":"\r\n    match = pattern.search(text)\r\n    if match:\r\n        print(\"Match found at index\", match.start())\r\n        print(\"Match is\", match.group())\r\n        print(\"Match ends at index\", match.end())\r\n        print(\"Match span\", match.span())\r\n        print(\"Match string\", match.string)\r\n    else:\r\n        print(\"No match found\")\r\n\r","votes":null},{"text":"\r\n    pattern_index=text.find(pattern)\r\n    if pattern_index==-1:\r\n        print(\"The pattern was not found\")\r\n    else:\r\n        print(\"The pattern was found at index\",pattern_index)\r\n    return pattern_index\r\n\r","votes":null},{"text":"\r\n    pattern_index = text.find(pattern)\r\n    if pattern_index == -1:\r\n        print('pattern not found')\r\n    else:\r\n        print('pattern found')\r\n        print(text[pattern_index:pattern_index+len(pattern)])\r\n        print(pattern_index)\r\n\r\n# search_literal('test','testing')\r\nsearch_literal('test','testing')\r\nsearch_literal('test', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\nsearch_literal('testing', 'testing testing testing')\r\n","votes":null},{"text":"\r\n    txt_len=len(text)\r\n    pattern_len=len(pattern)\r\n    if txt_len<pattern_len:\r\n        return False\r\n    for i in range(txt_len-pattern_len+1):\r\n        if text[i:i+pattern_len]==pattern:\r\n            return i\r\n\r","votes":null},{"text":"\r\n    # Write the function that search a literals string in a string and also find the location within the original string where the pattern occurs.\r\n    matches = []\r\n    for i in range(len(text)):\r\n        if pattern == text[i:i+len(pattern)]:\r\n            matches.append(i)\r\n    if len(matches) == 0:\r\n        return None\r\n    else:\r\n        return min(matches)\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search_literal('123', '123456789'))\r\n#print(search","votes":null},{"text":"\r\n    # pattern: string\r\n    # text: string\r\n    # return:\r\n    #   - the index of the first occurence of the pattern\r\n    #   - the index of the first occurence of the pattern,\r\n    #     the index of the last occurence of the pattern\r\n    #     or None if the pattern is not found\r\n    pattern_length = len(pattern)\r\n    text_length = len(text)\r\n    # print(text_length,pattern_length)\r\n    index = text.find(pattern)\r\n    if index!= -1:\r\n        # print(index)\r\n        index_start = index\r\n        index_end = index + pattern_length\r\n        while index_start!= -1:\r\n            # print(index_start,index_end)\r\n            index_start = text.find(pattern,index_end)\r\n            if index_start!= -1:\r\n                index_end = index_start + pattern_length\r\n                # print('index_end', index_end)\r\n    return index, index_start, index_end\r\n\r","votes":null},{"text":"\r\n    loc = text.find(pattern)\r\n    if loc>-1:\r\n        return f\"The string '{text[loc:loc+len(pattern)]}' occurs at position {loc} in the string.\"\r\n    else:\r\n        return f\"The string '{pattern}' does not occur in the string.\"\r\n\r\nprint(search_literal(\"The\", \"The quick brown fox jumps over the lazy dog\"))\r\nprint(search_literal(\"fox\", \"The quick brown fox jumps over the lazy dog\"))\r\nprint(search_literal(\"dog\", \"The quick brown fox jumps over the lazy dog\"))\r\nprint(search_literal(\"lazy\", \"The quick brown fox jumps over the lazy dog\"))\r\nprint(search_literal(\"The\", str(input(\"Please enter a string: \"))))\r\n","votes":null},{"text":"\r\n    #The first time the pattern is found, the location is found\r\n    #If the pattern is not found, the second time the pattern is found, the location is found\r\n    #If the pattern is not found, the third time the pattern is found, the location is found\r\n    #If the pattern is not found, the fourth time the pattern is found, the location is found\r\n    #If the pattern is not found, the seventh time the pattern is found, the location is found\r\n    #If the pattern is not found, the eighth time the pattern is found, the location is found\r\n    #If the pattern is not found, the ninth time the pattern is found, the location is found\r\n    #If the pattern is not found, the tenth time the pattern is found, the location is found\r\n    #If the pattern is not found, the eleventh time the pattern is found, the location is found\r\n    #If the pattern is not found, the twelfth time the pattern is found, the location is found\r\n    #If the pattern is not found, the thirteenth time the pattern is found, the location is found\r\n    #If the pattern is not found, the fourteenth time the pattern is found, the location is found\r\n    #If the pattern is not found, the fifteenth time the pattern is found, the location is found\r\n    #If the pattern is not found, the sixteenth time the pattern is found, the location is found\r\n    #If the pattern is not found, the seventeenth time the pattern is found, the location is found\r\n    #If the pattern is not found, the eighteenth time the pattern is found, the location is found\r\n    #If the pattern is not found, the nineteenth time the pattern is found, the location is found\r\n    #If the pattern is not found, the twentieth time the pattern is found, the location is found\r\n    #If the pattern is not found, the twenty-first time the pattern is found, the location is found\r\n    #If the pattern is not found, the twenty-second time the pattern is found, the location is found\r\n    #If the pattern is not found, the twenty-third time the pattern is found, the location is found\r\n    ","votes":null},{"text":"\r\n    text_index = 0\r\n    while text_index < len(text):\r\n        if text[text_index] == pattern:\r\n            return text_index\r\n        text_index += 1\r\n    return text_index\r\n\r","votes":null},{"text":"\r\n    result = re.search(pattern, text)\r\n    if result:\r\n        print(\"Pattern found at index: \", result.start())\r\n    else:\r\n        print(\"Pattern not found in text\")\r\n\r","votes":null},{"text":"\r\n    \"\"\"The function should be able to search in both the forward and backward direction.\"\"\"\r\n    \"\"\"The function should return a list of all the locations in the original string where the pattern occurs.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern anywhere in the original string.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case sensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"The function should be able to search for the pattern in a case insensitive manner.\"\"\"\r\n    \"\"\"Th","votes":null},{"text":"\r\n    for i in range(len(text)):\r\n        if text[i] == pattern:\r\n            return i\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        print(\"Pattern found at position\",text.find(pattern))\r\n        print(\"Pattern found in original string at position\",text.find(pattern),\":\",text[text.find(pattern):])\r\n    else:\r\n        print(\"Pattern not found.\")\r\n\r","votes":null},{"text":"\r\n    #print(text)\r\n    if pattern in text:\r\n        print(f\"Pattern found at index: {text.find(pattern)}\")\r\nsearch_literal('a', 'a b c d e')\r\nsearch_literal('b', 'a b c d e')\r\nsearch_literal('c', 'a b c d e')\r\nsearch_literal('d', 'a b c d e')\r\nsearch_literal('e', 'a b c d e')\r\nsearch_literal('z', 'a b c d e')\r\nsearch_literal('f', 'a b c d e')\r\nsearch_literal('g', 'a b c d e')\r\nsearch_literal('h', 'a b c d e')\r\nsearch_literal('i', 'a b c d e')\r\nsearch_literal('j', 'a b c d e')\r\nsearch_literal('k', 'a b c d e')\r\nsearch_literal('l', 'a b c d e')\r\n\r\n# Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\r","votes":null},{"text":"\r\n    start_index = text.find(pattern)\r\n    if start_index == -1:\r\n        return -1, -1\r\n    return start_index, start_index + len(pattern) - 1\r","votes":null},{"text":"\r\n    pattern_index=text.find(pattern)\r\n    if pattern_index!=-1:\r\n        print(\"pattern found at index\",pattern_index)\r\n    else:\r\n        print(\"pattern not found\")\r\n\r\n\r\n\r\n# -\r\n\r\n# ### Searching for a literal in a string\r\n\r\nsearch_literal(\"Hello\", \"Hello World\")\r\n\r\nsearch_literal(\"Hello\", \"Hello\")\r\n\r\n# ### Searching for a pattern in a string\r\n\r\nsearch_literal(\"world\", \"Hello World\")\r\n\r\nsearch_literal(\"world\", \"Hello\")\r\n\r\n# ### Searching for a pattern with starting and ending characters in a string\r\n\r\nsearch_literal(\"Hello World\", \"Hello World\")\r\n\r\nsearch_literal(\"Hello World\", \"Hello\")\r\n\r\n# ### Searching for a pattern with starting and ending characters in a string with special characters\r\n\r\nsearch_literal(\"Hello (World)\", \"Hello (World)\")\r\n\r\nsearch_literal(\"Hello (World)\", \"Hello\")\r\n\r\n# ### Searching for a pattern with starting and ending characters in a string with special characters\r\n\r\nsearch_literal(\"Hello (World)\", \"Hello (World)\")\r\n\r\nsearch_literal(\"Hello (World)\", \"Hello\")\r\n\r\n# ### Searching for a pattern with multiple special characters in a string\r\n\r\nsearch_literal(\"(Hello)(World)\", \"Hello (World)\")\r\n\r\nsearch_literal(\"(Hello)(World)\", \"Hello\")\r\n\r\n# ### Searching for a pattern with multiple special characters in a string\r\n\r\nsearch_literal(\"(Hello)(World)\", \"Hello (World)\")\r\n\r\nsearch_literal(\"(Hello)(World)\", \"Hello\")\r\n\r\n# ### Searching for a pattern with multiple special characters in a string\r\n\r\nsearch_literal(\"(Hello)(World)\", \"Hello (World)\")\r\n\r\nsearch_literal(\"(Hello)(World)\", \"Hello\")\r\n\r\n# ### Searching for a pattern with multiple special characters in a string\r\n\r\nsearch_literal(\"(Hello)(World)\", \"Hello (World)\")\r\n\r\nsearch_literal(\"(Hello)(World)\", \"Hello\")\r\n\r\n# ### Searching for a pattern with multiple special characters in a string\r\n\r\nsearch_literal(\"(Hello)(World)\", \"Hello (World)\")\r\n\r\nsearch_literal(\"(Hello)(World)\", \"Hello\")\r\n\r","votes":null},{"text":"\r\n    search_text = text\r\n    search_pattern = pattern\r\n    count = 0\r\n    while True:\r\n        if search_text.find(search_pattern)!= -1:\r\n            count = count + 1\r\n            search_text = search_text.replace(search_pattern, '', 1)\r\n            print(search_text)\r\n        else:\r\n            return count\r\n\r\npattern = \"a\"\r\ntext = \"This is the text\"\r\nprint(search_literal(pattern,text))\r\n\r\n#Search for a pattern in a string:\r\nsearch_text = text\r\nsearch_pattern = pattern\r\ncount = 0\r\nwhile True:\r\n    if search_text.find(search_pattern)!= -1:\r\n        print(search_text)\r\n        count = count + 1\r\n        search_text = search_text[search_text.find(search_pattern)+1:]\r\n    else:\r\n        print(\"The pattern not found in the text\")\r\n        break\r\n\r\n#Search for a pattern in a string using a for loop:\r\nsearch_text = text\r\nsearch_pattern = pattern\r\ncount = 0\r\nwhile search_text.find(search_pattern)!= -1:\r\n    print(search_text)\r\n    count = count + 1\r\n    search_text = search_text[search_text.find(search_pattern)+1:]\r\n    print(search_text)\r\n\r\n#Search for a pattern in a string using while loop:\r\nsearch_text = text\r\nsearch_pattern = pattern\r\ncount = 0\r\nwhile True:\r\n    if search_text.find(search_pattern)!= -1:\r\n        print(search_text)\r\n        count = count + 1\r\n        search_text = search_text[search_text.find(search_pattern)+1:]\r\n    else:\r\n        break\r\n        \r\n#Search for a pattern in a string using while loop:\r\nsearch_text = text\r\nsearch_pattern = pattern\r\ncount = 0\r\nwhile True:\r\n    if search_text.find(search_pattern)!= -1:\r\n        print(search_text)\r\n        count = count + 1\r\n        search_text = search_text","votes":null},{"text":"\r\n    # TODO: Write a function to search for pattern within the text\r\n    # TODO: Write a function to find the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function to print the text with the pattern at the location of the pattern in the text\r\n    # TODO: Write a function t","votes":null},{"text":"\r\n    pattern_len = len(pattern)\r\n    for i in range(len(text)-pattern_len+1):\r\n        if text[i:i+pattern_len] == pattern:\r\n            return i,i+pattern_len\r\n    return -1,-1\r\n\r\n#Search for the word \"A\" in a string\r\npattern = \"A\"\r\ntext = \"Python is a programming language\"\r\nprint(search_literal(pattern,text))\r\n\r\n#Search for the word \"in\" in a string\r\npattern = \"in\"\r\ntext = \"Python is a programming language\"\r\nprint(search_literal(pattern,text))\r\n\r\n#Search for the word \"Python\" in a string\r\npattern = \"Python\"\r\ntext = \"Python is a programming language\"\r\nprint(search_literal(pattern,text))\r\n\r\n#Search for the word \"a\" in a string\r\npattern = \"a\"\r\ntext = \"Python is a programming language\"\r\nprint(search_literal(pattern,text))\r\n\r\n#Search for the word \"programming\" in a string\r\npattern = \"programming\"\r\ntext = \"Python is a programming language\"\r\nprint(search_literal(pattern,text))\r\n\r\n#Search for the word \"is\" in a string\r\npattern = \"is\"\r\ntext = \"Python is a programming language\"\r\nprint(search_literal(pattern,text))\r\n\r\n#Search for the word \"programming\" in a string\r\npattern = \"programming\"\r\ntext = \"Python is a programming language\"\r\nprint(search_literal(pattern,text))\r\n\r\n#Search for the word \"is\" in a string\r\npattern = \"is\"\r\ntext = \"Python is a programming language\"\r\nprint(search_literal(pattern,text))\r\n\r\n#Search for the word \"programming\" in a string\r\npattern = \"programming\"\r\ntext = \"Python is a programming language\"\r\nprint(search_literal(pattern,text))\r\n\r\n#Search for the word \"is\" in a string\r\npattern = \"is\"\r\ntext = \"Python is a programming language\"\r\nprin","votes":null},{"text":"\r\n    l_index=text.find(pattern)\r\n    if l_index == -1:\r\n        return 'Pattern Not Found'\r\n    else:\r\n        return 'Pattern found at index {}'.format(l_index)\r\n\r","votes":null},{"text":"\r\n    pat = re.compile(pattern)\r\n    if re.search(pat,text):\r\n        pos = re.search(pat,text).start()\r\n        return(text[pos:pos+len(pattern)],pos)\r\n    else:\r\n        return(text,0)\r\n\r","votes":null},{"text":"\r\n    pattern_location = 0\r\n    while pattern_location!= -1:\r\n        pattern_location = text.find(pattern,pattern_location)\r\n        if pattern_location!= -1:\r\n            yield pattern_location\r\n            pattern_location += 1\r\n    return\r\n\r","votes":null},{"text":"\r\n    result = re.findall(pattern, text)\r\n    result = [m.start() for m in result]\r\n    return result\r\n\r","votes":null},{"text":"\r\n    pattern_list=[]\r\n    for i in pattern:\r\n        pattern_list.append(i)\r\n    for i in range(len(pattern_list)):\r\n        for j in range(len(text)-len(pattern_list)+i+1):\r\n            if text[j:j+len(pattern_list)] == pattern_list:\r\n                return (j,j+len(pattern_list)-1)\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    result=[]\r\n    while True:\r\n        m=re.search(r'\\b'+pattern+'\\b',text)\r\n        if m:\r\n            result.append(m.span())\r\n            text=text[m.end():]\r\n        else:\r\n            return result\r","votes":null},{"text":"\r\n    return pattern.search(text).span()\r\n\r","votes":null},{"text":"\r\n    p = re.compile(pattern)\r\n    m = p.search(text)\r\n    if m:\r\n        return m.group(),text[m.start():m.end()]\r\n    else:\r\n        return \"\",\" \"\r\n\r","votes":null},{"text":"\r\n\r\n    for i in range(len(text)):\r\n        if pattern in text[i:]:\r\n            return i,i+len(pattern)\r\n    return 0,0\r\n\r","votes":null},{"text":"\r\n    if pattern not in text:\r\n        return -1, text\r\n    else:\r\n        return text.find(pattern), text[text.find(pattern):]\r\n\r","votes":null},{"text":"\r\n    pattern_occurrence = text.find(pattern)\r\n    if pattern_occurrence!= -1:\r\n        print(f\"Pattern {pattern} found at position {pattern_occurrence}\")\r\n    else:\r\n        print(f\"Pattern {pattern} not found in the text\")\r\n    print(f\"The literal {pattern} is found in the text at position {text.find(pattern)}\")\r\n\r\nif __name__ == \"__main__\":\r\n    search_literal(\"python\", \"python is a fun language\")\r\n    search_literal(\"python\", \"the quick brown fox jumps over the lazy dog\")\r\n","votes":null},{"text":"\r\n    result = pattern.search(text)\r\n    if result:\r\n        return result.start(),result.end()\r\n    else:\r\n        return -1, -1\r\n\r","votes":null},{"text":"\r\n    return re.search(pattern,text).start()\r\n\r","votes":null},{"text":"\r\n    start = text.find(pattern)\r\n    if start == -1:\r\n        return []\r\n    end = start + len(pattern)\r\n    return [start,end-start]\r\n\r","votes":null},{"text":"\r\n    pattern = re.escape(pattern)\r\n    pattern = pattern.replace('\\\\*','.*')\r\n    pattern = pattern.replace('\\\\?','.')\r\n    pattern = pattern.replace('\\\\+','+')\r\n    pattern = pattern.replace('\\\\^','^')\r\n    pattern = pattern.replace('\\\\$','$')\r\n    pattern = pattern.replace('\\\\(','\\\\(')\r\n    pattern = pattern.replace('\\\\)','\\\\)')\r\n    pattern = pattern.replace('\\\\|','\\\\|')\r\n    pattern = pattern.replace('\\\\{','\\\\{')\r\n    pattern = pattern.replace('\\\\}','\\\\}')\r\n    pattern = pattern.replace('\\\\[','\\\\[')\r\n    pattern = pattern.replace('\\\\]','\\\\]')\r\n    pattern = pattern.replace('\\\\(','\\\\(')\r\n    pattern = pattern.replace('\\\\)','\\\\)')\r\n    pattern = pattern.replace('\\\\|','\\\\|')\r\n    pattern = pattern.replace('\\\\{','\\\\{')\r\n    pattern = pattern.replace('\\\\}','\\\\}')\r\n    pattern = pattern.replace('\\\\[','\\\\[')\r\n    pattern = pattern.replace('\\\\]','\\\\]')\r\n    pattern = pattern.replace('\\\\(','\\\\(')\r\n    pattern = pattern.replace('\\\\)','\\\\)')\r\n    pattern = pattern.replace('\\\\|','\\\\|')\r\n    pattern = pattern.replace('\\\\{','\\\\{')\r\n    pattern = pattern.replace('\\\\}','\\\\}')\r\n    pattern = pattern.replace('\\\\[','\\\\[')\r\n    pattern = pattern.replace('\\\\]','\\\\]')\r\n\r\n    pattern = re.compile(pattern)\r\n    match = pattern.search(text)\r\n    if match:\r\n        # print(match.start(),match.end())\r\n        return match.start(),match.end()\r\n    return 0,0\r\n\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        index = text.find(pattern)\r\n        return index\r\n    else:\r\n        return -1\r","votes":null},{"text":"\r\n    for i in range(len(text)):\r\n        if text[i:i+len(pattern)]==pattern:\r\n            return [i,i+len(pattern)-1]\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    try:\r\n        result = pattern.search(text)\r\n        if result:\r\n            return result.start()\r\n        else:\r\n            return -1\r\n    except:\r\n        return -1\r\n#end of search_literal\r\n\r","votes":null},{"text":"\r\n    i = text.find(pattern)\r\n    if i == -1:\r\n        print(f\"pattern {pattern} not found\")\r\n    else:\r\n        print(f\"pattern {pattern} found at position {i}\")\r\n    return i\r\n\r\nsearch_literal('abc','abcd')\r\nsearch_literal('abcd','abcd')\r\nsearch_literal('abc','abcefg')\r\n\r\n\"\"\"\r\npattern abc found at position 0\r\npattern abcd found at position 0\r\npattern abc not found\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    try:\r\n        idx = text.index(pattern)\r\n        print(\"\\nThe pattern %s occurs at position %d and its location is %d\" %(pattern,idx,idx-pattern.rfind(pattern)))\r\n    except ValueError:\r\n        print(\"\\nThe pattern %s does not occur in the string\" %(pattern))\r\n    except TypeError:\r\n        print(\"\\nThe input string is empty\")\r\n    return\r\n\r","votes":null},{"text":"\r\n    found = 0\r\n    for i in range(len(pattern)):\r\n        if pattern[i] == text[i]:\r\n            found = 1\r\n    if found == 0:\r\n        return False\r\n    else:\r\n        return True\r\n\r","votes":null},{"text":"\r\n\r\n\r\n    pattern_length = len(pattern)\r\n    text_length = len(text)\r\n    # Initialize pattern and text pointers\r\n    pattern_pointer = 0\r\n    text_pointer = 0\r\n    # Initialize pattern and text pointers\r\n    while pattern_pointer < pattern_length and text_pointer < text_length:\r\n        if text[text_pointer] == pattern[pattern_pointer]:\r\n            pattern_pointer += 1\r\n            text_pointer += 1\r\n        else:\r\n            text_pointer += 1\r\n\r\n    # If the pattern is not found, then return -1\r\n    if pattern_pointer == pattern_length:\r\n        return text_pointer - pattern_length\r\n    else:\r\n        return -1\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Take input string from user\r\n    text = input(\"Enter a string: \")\r\n    # Take the pattern as input from user\r\n    pattern = input(\"Enter a pattern: \")\r\n    # Check if the pattern is contained in the string\r\n    if search_literal(pattern, text) == -1:\r\n        print(\"Pattern Not Found in given String\")\r\n    else:\r\n        print(\"Pattern Found at index\", search_literal(pattern, text))\r\n","votes":null},{"text":"\r\n    pattern_count = 0\r\n    for i in range(len(text)):\r\n        if text[i] == pattern:\r\n            pattern_count += 1\r\n        if pattern_count == 2:\r\n            return i + 1\r\n    return False\r\n\r\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\", \"height\": 34} colab_type=\"code\" id=\"wA81c-v4903X\" outputId=\"3ed99c18-264e-421f-99a7-3104484a3081\"\r\ntext = 'The quick brown fox jumped over the lazy dog'\r\nsearch_literal('fox','The quick brown fox jumped over the lazy dog')\r\n\r\n# + [markdown] colab_type=\"text\" id=\"d3l1sW0m903Y\"\r\n# # Searching for a pattern using a regular expression\n\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\", \"height\": 34} colab_type=\"code\" id=\"69a_79tG903Y\" outputId=\"070c023c-9473-4513-f7c1-d1c10622649f\"\r\nimport re\r\ntext = 'The quick brown fox jumped over the lazy dog'\r\nsearch_re = re.search('fox',text)\r\nsearch_re.group()\n\n# + [markdown] colab_type=\"text\" id=\"3g9f1y9X903a\"\n# # Searching for multiple patterns using a regular expression\n\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\", \"height\": 34} colab_type=\"code\" id=\"hW4nY-p4903a\" outputId=\"036941e5-5355-483e-b347-e3400bb6312b\"\r\nimport re","votes":null},{"text":"\r\n    #pattern = r\"[a-zA-Z0-9_]\"\r\n    #text = \"It is a test\"\r\n    #text = \"abc123\"\r\n    length = len(text)\r\n    text_index = 0\r\n    while text_index < length:\r\n        result = re.search(pattern,text[text_index:])\r\n        if result:\r\n            if pattern in text:\r\n                return True,text_index+result.start()\r\n            else:\r\n                return False,None\r\n        text_index+=1\r\n    return False,None\r\n\r","votes":null},{"text":"\r\n    # Search for pattern in text\r\n    result = re.search(pattern, text)\r\n    # Check if pattern exists\r\n    if result:\r\n        # Find location of pattern in text\r\n        start = result.start()\r\n        # Find location of pattern in text\r\n        end = result.end()\r\n        # Print result\r\n        print(\"Found pattern: \" + pattern)\r\n        print(\"Start: \" + str(start))\r\n        print(\"End: \" + str(end))\r\n        print(\"Text: \" + text[start:end])\r\n        return result.group()\r\n\r\npattern = 'python'\r\nresult = search_literal(pattern, text)\r\nprint(result)\r\n\r\npattern = 'python'\r\nresult = search_literal(pattern, text)\r\nprint(result)\r\n\r\npattern = 'python'\r\nresult = search_literal(pattern, text)\r\nprint(result)\r\n\r\n```\r\n\r\n## References\r\n[Regular Expressions - W3Schools](https:\/\/www.w3schools.com\/python\/python_regex.asp)\r\n\r\n[Python Regular Expressions Tutorial](https:\/\/www.geeksforgeeks.org\/python-regular-expressions-tutorial\/)\r\n\r\n[Python Regular Expressions Tutorial for Beginners](https:\/\/www.geeksforgeeks.org\/python-regular-expressions-tutorial-for-beginners\/)\r\n\r\n[Python Regex Tutorial](https:\/\/www.guru99.com\/python-regex-tutorial.html)\r\n","votes":null},{"text":"\r\n    #first, we find the location of the pattern in the string\r\n    pattern_loc = text.find(pattern)\r\n    #if the pattern occurs in the string, we find the location of the first character of the pattern in the string\r\n    if pattern_loc!= -1:\r\n        #we find the location of the first character of the pattern in the string\r\n        pattern_loc = text.find(pattern, pattern_loc+1)\r\n    #if the pattern occurs in the string, we find the location of the first character of the pattern in the string\r\n    if pattern_loc!= -1:\r\n        #we find the location of the first character of the pattern in the string\r\n        pattern_loc = text.find(pattern, pattern_loc+1)\r\n    #we return the location of the first character of the pattern in the string\r\n    return pattern_loc\r\n\r\n# This function takes in a string and a list of strings. The function returns a list of indices of the first occurrence of each string in the given string.\r","votes":null},{"text":"\r\n    if pattern == text:\r\n        return 0, len(pattern)\r\n    for i in range(len(text) - len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return i, len(pattern)\r\n    return -1,-1\r\n\r","votes":null},{"text":"\r\n    #check if pattern is in text\r\n    if pattern in text:\r\n        return text.find(pattern)\r\n    else:\r\n        return -1\r\n\r","votes":null},{"text":"\r\n    pattern = pattern.lower()\r\n    text = text.lower()\r\n    index = text.find(pattern)\r\n    if index == -1:\r\n        return 'pattern not found'\r\n    return index\r\n#print(search_literal('a','abc'))\r\n#print(search_literal('b','abc'))\r\n#print(search_literal('c','abc'))\r\n#print(search_literal('a','Abc'))\r\n\r","votes":null},{"text":"\r\n    # pattern = r\"I'm\"\r\n    # text = \"I'm a boy\"\r\n    # pattern = re.compile(pattern)\r\n    # print(pattern.search(text))\r\n    # print(pattern.search(text).start())\r\n    # print(pattern.search(text).end())\r\n    # print(pattern.search(text).span())\r\n    # print(pattern.search(text).groups())\r\n    # print(pattern.search(text).group(0))\r\n    # print(pattern.search(text).group(1))\r\n    # print(pattern.search(text).group(2))\r\n\r\n    # pattern = r\"I'm\"\r\n    # text = \"I'm a boy\"\r\n    # pattern = re.compile(pattern)\r\n    # print(pattern.findall(text))\r\n\r\n    # pattern = r\"I'm\"\r\n    # text = \"I'm a boy\"\r\n    # pattern = re.compile(pattern)\r\n    # print(pattern.sub(\"i am\",text))\r\n\r\n    # pattern = r\"I'm\"\r\n    # text = \"I'm a boy\"\r\n    # pattern = re.compile(pattern)\r\n    # print(pattern.subn(\"i am\",text))\r\n\r\n    pattern = r\"I'm\"\r\n    text = \"I'm a boy\"\r\n    pattern = re.compile(pattern)\r\n    print(pattern.sub(\"i am\",text,2))\r\n\r\n    pattern = r\"I'm\"\r\n    text = \"I'm a boy\"\r\n    pattern = re.compile(pattern)\r\n    print(pattern.subn(\"i am\",text,2))\r\n\r\n    pattern = r\"I'm\"\r\n    text = \"I'm a boy\"\r\n    pattern = re.compile(pattern)\r\n    print(pattern.subn(\"i am\",text,2)[0])\r\n\r\n    pattern = r\"I'm\"\r\n    text = \"I'm a boy\"\r\n    pattern = re.compile(pattern)\r\n    print(pattern.subn(\"i am\",text,2)[1])\r\n    print(len(pattern.subn(\"i am\",text,2)[0]))\r\n    print(pattern.subn(\"i am\",text,2)[1])\r\n    print(len(pattern.subn(\"i am\",text,2)[1]))\r\n\r\n","votes":null},{"text":"\r\n    pattern_indices = [i for i, ltr in enumerate(pattern) if ltr in text]\r\n    pattern_indices.sort()\r\n    return pattern_indices[0]\r\n\r","votes":null},{"text":"\r\n    # The following is a regular expression\r\n    # pattern = r'pattern'\r\n    # text = r'text'\r\n    # The ^ symbol indicates the start of the string\r\n    # The $ symbol indicates the end of the string\r\n    # The. symbol indicates any character\r\n    # The + symbol indicates one or more of the preceding\r\n    # The * symbol indicates zero or more of the preceding\r\n    # The? symbol indicates zero or one of the preceding\r\n    # The | symbol indicates one or more alternatives\r\n    # The {x} symbol indicates x repetitions of the preceding\r\n    # The {x,y} symbol indicates x to y repetitions of the preceding\r\n    # The {x,} symbol indicates at least x repetitions of the preceding\r\n    # The {,y} symbol indicates up to y repetitions of the preceding\r\n    # The {x?} symbol indicates x or more repetitions of the preceding\r\n    # The {x,y?} symbol indicates x to y or more repetitions of the preceding\r\n    # The {x,y?} symbol indicates x to y or more repetitions of the preceding\r\n\r\n    # This is a regular expression with some special characters\r\n    # pattern = 'pattern'\r\n    # text = 'text'\r\n    # The \\ symbol indicates a special character to be interpreted as a character\r\n    # The \\w symbol indicates any alphanumeric character\r\n    # The \\s symbol indicates any whitespace character\r\n    # The \\d symbol indicates any digit\r\n    # The \\b symbol indicates a word boundary\r\n    # The \\B symbol indicates a non-word boundary\r\n    # The \\t symbol indicates a tab character\r\n    # The \\n symbol indicates a newline character\r\n    # The \\r symbol indicates a carriage return character\r\n    # The \\f symbol indicates a form-feed character\r\n    # The \\a symbol indicates a bell character\r\n    # The \\v symbol indicates a vertical tab character\r\n    # The \\c symbol indicates a control character\r\n    # The \\e symbol indicates an escape character\r\n    # The \\1 symbol indicates character 1\r\n    # The \\2 symbol indicates character 2\r\n    # The \\3 symbol indicates character 3\r\n    # The \\4 symbol indicates character 4\r\n    # The \\5 symbol indicates character 5\r\n    # The \\6 symbol indicates character 6\r\n    # The \\7 symbol indicates character 7\r\n    # The \\8 symbo","votes":null},{"text":"\r\n    start_loc = 0\r\n    match_loc = text.find(pattern)\r\n    while match_loc!= -1:\r\n        end_loc = match_loc + len(pattern)\r\n        print(start_loc,end_loc,match_loc)\r\n        start_loc = end_loc\r\n        match_loc = text.find(pattern,start_loc)\r\n    return start_loc,match_loc\r\n\r","votes":null},{"text":"\r\n    pattern_idx = text.find(pattern)\r\n    if pattern_idx==-1:\r\n        return -1\r\n    else:\r\n        return pattern_idx\r\n\r","votes":null},{"text":"\r\n    #pattern = 'l'\r\n    #text = 'lllllllllllllllll'\r\n    i = 0\r\n    j = 0\r\n    found = False\r\n    while i < len(text) and j < len(pattern):\r\n        if text[i] == pattern[j]:\r\n            i = i + 1\r\n            j = j + 1\r\n        else:\r\n            j = 0\r\n            i = i + 1\r\n    \r\n    if j == len(pattern):\r\n        found = True\r\n        return i\r\n    else:\r\n        return -1\r\n    \r","votes":null},{"text":"\r\n    result = re.search(pattern,text)\r\n    if result:\r\n        return text.index(result.group(0)),result.group(0)\r\n    else:\r\n        return -1,-1\r\n\r","votes":null},{"text":"\r\n    pos = -1\r\n    while True:\r\n        pos = text.find(pattern,pos+1)\r\n        if pos == -1:\r\n            break\r\n        print(f\"Found {pattern} at {pos}\")\r\n    return text\r\n\r\n\r\nsearch_literal(\"Hello\",\"Hello World\")\r\n\r\n# + [markdown] id=\"52e56681-b142-418a-8068-d92c43498530\"\r\n# # Part 2:  String Processing\r\n#\r\n# The second part of the assignment is to implement a set of string functions that will allow us to manipulate strings in Python.  This task is not very complicated, and can be found in the lecture notes from the first week.  It is important to note that these are string functions, and not string methods.  This means that we have to use the `str` function to convert a string into a string object.  This is necessary because some of the string functions will only work on strings, and not on integers.  String methods are functions that work on string objects, and are available to us from the string object.  We will use string methods to manipulate strings.  We will also use string functions to manipulate strings.\r\n#\r\n# ## 2.1  String Methods\r\n#\r\n# There are a number of string methods available to us in the Python library.  These are functions (or methods) that we can use on string objects.  We can use these to manipulate strings.  The string object in Python is called a `string.String` object.  We can find all of the string methods available to us by typing `help(str.upper)` in the IPython shell.  The output shows that there are a number of string methods available to us.  The most important of the string methods is the `upper` method.  The `upper` method will capitalize the first letter in a string.  We can see this using the `upper` method.\r\n#\r\n# Let's see how this works.  We will use the `upper` method to capitalize the first letter of the string \"Hello World\".\r\n\r\n# + id=\"636d","votes":null}],"time":{"count":2.0,"avg":117831.368,"std":17065.2132337797,"cov":0.1448274218}}
{"id":539,"question":"def basesnum_coresspondingnum(bases_num,index):\r\n    \"\"\"Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\"\"\"","answers":[{"text":"\r\n    return list(map(pow,bases_num,index))\r\n\r","votes":119561.816},{"text":"\r\n    return list(map(pow, bases_num, index))\r\n\r","votes":120497.8},{"text":"\r\n    return list(map(pow,bases_num,index))\r\n\r\n# This function is used to create a list of the bases of the given number.\r","votes":123894.116},{"text":"\r\n    bases_num_coresspondingnum=list(map(pow,bases_num,index))\r\n    return bases_num_coresspondingnum\r\n\r","votes":129841.108},{"text":"\r\n    bases_num=map(pow,bases_num,index)\r\n    return list(bases_num)\r","votes":133081.96},{"text":"\r\n    return list(map(pow,bases_num,index))\r\n\r\n\r","votes":139958.424},{"text":"\r\n    ans = [pow(bases_num[i], index[i]) for i in range(len(bases_num))]\r\n    return ans\r\n\r","votes":140805.472},{"text":"\r\n    bases_num = list(bases_num)\r\n    index = list(index)\r\n    for i in range(len(bases_num)):\r\n        bases_num[i] = pow(bases_num[i],index[i])\r\n    return bases_num\r\n\r","votes":141802.108},{"text":"\r\n    bases_num = map(pow, bases_num, index)\r\n    return list(bases_num)\r\n\r","votes":141857.172},{"text":"\r\n    powers = []\r\n    for i in range(len(bases_num)):\r\n        powers.append(pow(bases_num[i],index[i]))\r\n    return powers\r\n\r\n\r","votes":143507.388},{"text":"\r\n    list_ = []\r\n    for i in range(len(bases_num)):\r\n        list_.append(pow(bases_num[i],index[i]))\r\n    return list_\r\n\r\n\r","votes":147593.148},{"text":"\r\n    power = map(pow, bases_num, index)\r\n    return list(power)\r\n\r","votes":156433.796},{"text":"\r\n    bases_num_coresspondingnum = [bases_num[i]**(index[i]) for i in range(len(bases_num))]\r\n    return(bases_num_coresspondingnum)\r\n\r","votes":158856.764},{"text":"\r\n    bases_num=list(bases_num)\r\n    bases_num=list(map(lambda i:i**index[bases_num.index(i)],bases_num))\r\n    return bases_num\r\n    \r\nbases_num=[1,2,3,4,5,6,7,8,9]\r\nindex_num=[1,2,3,4,5,6,7,8,9]\r\nprint(basesnum_coresspondingnum(bases_num,index_num))\r\n# -\r\n\r\n# # 28. Iterative methods for finding the maximum and minimum values in a list of integers.\r\n\r\n# +\r\nnumbers=[1,2,3,4,5,6,7,8,9]\r","votes":185464.592},{"text":"\r\n    return list(map(pow,bases_num,index))\r","votes":200503.904},{"text":"\r\n    power_list = list(map(pow, bases_num, index))\r\n    return power_list\r\n\r\n\r","votes":203673.224},{"text":"\r\n    pow_bases = map(pow, bases_num, index)\r\n    return list(pow_bases)\r\n\r","votes":221923.612},{"text":"\r\n    #base_num = list(map(pow,bases_num,index))\r\n    #base_num = [pow(bases_num[i],index[i]) for i in range(len(bases_num))]\r\n    #return base_num\r\n    power_list = [pow(bases_num[i],index[i]) for i in range(len(bases_num))]\r\n    return power_list\r\n\r\n\r","votes":231868.952},{"text":"\r\n    index_power=map(pow,bases_num,range(len(bases_num)))\r\n    return list(index_power)\r\n#Function to create the index of the element in the bases to be raised to the power of the corresponding element in the index.\r","votes":null},{"text":"\r\n    if index==0:\r\n        return list(map(pow,bases_num,range(1,bases_num+1)))\r\n    else:\r\n        return list(map(pow,bases_num,basesnum_coresspondingnum(bases_num,index-1)))\r\n\r\n#print(basesnum_coresspondingnum([1,2,3,4,5],5))\r\n\r\n#print(basesnum_coresspondingnum([1,2,3,4,5],1))\r\n\r","votes":null},{"text":"\r\n    return map(lambda x:(x,bases_num**x),index)\r\n\r","votes":null},{"text":"\r\n    return [pow(bases_num[bases_num.index(bases_num[index])],i) for i in range(1,index+1)]\r\n\r","votes":null},{"text":"\r\n    list_bases_num = list(map(lambda x:pow(bases_num, x),index))\r\n    return list_bases_num\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: bases**x,index)\r\n\r","votes":null},{"text":"\r\n    if not index:\r\n        return [1]\r\n    if not index[0]:\r\n        return [bases_num[0]]\r\n    return list(map(lambda x: x*bases_num[0],basesnum_coresspondingnum(bases_num,index[1:])))\r\n\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: x**index,bases_num)\r\nbases_num = [1,2,3,4,5]\r\nindex = [0,1,2,3,4]\r\nprint(list(basesnum_coresspondingnum(bases_num,index)))\r\n\r\n'''\r\nThis way we have a map function which will return a list containing the power of the number in the bases raised to the corresponding number in the index.\r\n'''\r\n","votes":null},{"text":"\r\n    number_list = [i for i in range(0,bases_num)]\r\n    return list(map(lambda x: (x,pow(x,index)),number_list))\r\n\r","votes":null},{"text":"\r\n    return map(lambda x:pow(bases_num,x),index)\r\n\r","votes":null},{"text":"\r\n    return map(pow,range(1,bases_num+1),index)\r\n\r","votes":null},{"text":"\r\n    power = [pow(bases_num,i) for i in index]\r\n    return power\r\n\r","votes":null},{"text":"\r\n    list=[]\r\n    for i in range(bases_num):\r\n        val=pow(bases_num,i)\r\n        list.append(val)\r\n    list=map(lambda x:x[index],list)\r\n    return list\r","votes":null},{"text":"\r\n    if index==0:\r\n        return 1\r\n    else:\r\n        return list(map(lambda x: x**bases_num,list(range(1,index+1))))\r\n\r\n\r","votes":null},{"text":"\r\n    return [pow(bases_num,i) for i in index]\r\n\r","votes":null},{"text":"\r\n    return map(pow,bases_num,index)\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: x**bases_num[index], range(1,bases_num[index])))\r\n\r","votes":null},{"text":"\r\n    return map(pow,bases_num,index)\r","votes":null},{"text":"\r\n    if index == 0:\r\n        return [1]\r\n    elif index == 1:\r\n        return [bases_num]\r\n    elif index >= 2:\r\n        return list(map(lambda x: x * bases_num, basesnum_coresspondingnum(bases_num, index - 1)))\r\n\r\n\r\n### Tests ###\r\nprint(basesnum_coresspondingnum(2, 3))\r\nprint(basesnum_coresspondingnum(2, 0))\r\nprint(basesnum_coresspondingnum(2, 1))\r\nprint(basesnum_coresspondingnum(2, 2))\r\nprint(basesnum_coresspondingnum(2, 4))\r\nprint(basesnum_coresspondingnum(2, 5))\r\n","votes":null},{"text":"\r\n    if index == []:\r\n        return 1\r\n    elif bases_num[index[-1]] == 0:\r\n        return 0\r\n    else:\r\n        return bases_num[index[-1]] * basesnum_coresspondingnum(bases_num,index[:-1])\r\n\r","votes":null},{"text":"\r\n    powlist=[pow(bases_num,i) for i in index]\r\n    return powlist\r\n\r","votes":null},{"text":"\r\n    list_of_powers = [bases ** index for bases in range(1, bases_num + 1)]\r\n    return list_of_powers\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in index:\r\n        if i>0:\r\n            result.append(pow(bases_num,i))\r\n    return result\r\n\r","votes":null},{"text":"\r\n    bases_num_list=list(bases_num)\r\n    result=map(pow,bases_num_list,index)\r\n    return list(result)\r\n\r\nresult_list=basesnum_coresspondingnum(bases_num,index)\r\nprint(result_list)\r\n","votes":null},{"text":"\r\n    bases = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096]\r\n    return list(map(pow,bases,index))\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: bases_num**x,index))\r\n\r","votes":null},{"text":"\r\n    return map(pow,bases_num,index)\r\n\r\n\r\n\"\"\"Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using for loop.\"\"\"\r","votes":null},{"text":"\r\n    if bases_num == 0:\r\n        return []\r\n    else:\r\n        return [bases_num] + list(map(lambda x: bases_num*x, basesnum_coresspondingnum(bases_num-1,index)))\r\n\r","votes":null},{"text":"\r\n    list = [pow(bases_num,index[i]) for i in range(len(index))]\r\n    return list\r\n\r","votes":null},{"text":"\r\n    bases_num = list(map(lambda x:x**index,bases_num))\r\n    return bases_num\r\nbases_num = basesnum_coresspondingnum([2,3,4,5],3)\r\nprint(bases_num)\r\n\r\n#Creating new list of length 5 using zip function\r\nlist1 = [1,2,3]\r\nlist2 = [4,5,6]\r\nlist3 = [7,8,9]\r\nlist4 = [10,11,12]\r\nlist5 = [13,14,15]\r\nlist6 = [16,17,18]\r\nnewlist = list(zip(list1,list2,list3,list4,list5,list6))\r\nprint(newlist)\r\n\r\n#Using the zip function we can create a list with list1 as the first element in the list and so on.\r\nnewlist1 = [list1,list2,list3,list4,list5,list6]\r\nnewlist2 = list(zip(*newlist1))\r\nprint(newlist2)\r\n\r\n#Using the zip function we can create a list with list1 as the first element in the list and so on.\r\nlist7 = [9,2,18,12,15]\r\nlist8 = [6,7,1,19,13]\r\nlist9 = [3,4,5,10,14]\r\nnewlist3 = list(zip(list7,list8,list9))\r\nprint(newlist3)\r\n\r\n#Using the zip function we can create a list with list1 as the first element in the list and so on.\r\nlist10 = [9,2,18,12,15]\r\nlist11 = [6,7,1,19,13]\r\nlist12 = [3,4,5,10,14]\r\nnewlist4 = list(zip(list10,list11,list","votes":null},{"text":"\r\n    return list(map(lambda x:bases_num**x,index))\r\n\r","votes":null},{"text":"\r\n    powers_list = []\r\n    for number in index:\r\n        powers = 1\r\n        for base in range(bases_num):\r\n            if base == bases_num-1:\r\n                powers = powers * bases_num\r\n            if number == base:\r\n                powers = powers * 2\r\n        powers_list.append(powers)\r\n    return powers_list\r","votes":null},{"text":"\r\n    return list(map(lambda x: bases_num**x, index))\r\n\r","votes":null},{"text":"\r\n    bases_num = list(bases_num)\r\n    index = list(index)\r\n    bases_num[0] = 1\r\n    index[0] = 1\r\n    for i in range(0,len(bases_num)):\r\n        bases_num[i] = bases_num[i] * bases_num[i-1]\r\n    for i in range(0,len(index)):\r\n        index[i] = index[i] * index[i-1]\r\n    return list(map(lambda x: (x,bases_num[x]),index))\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x:pow(bases_num,x),index))\r","votes":null},{"text":"\r\n    bases_powers=[]\r\n    for i in range(len(bases_num)):\r\n        bases_powers.append(pow(bases_num[i],index[i]))\r\n    return bases_powers\r\n\r\nprint(bases_powers)\r\n\r","votes":null},{"text":"\r\n    bases_num_list=list()\r\n    for i in range(index):\r\n        bases_num_list.append(bases_num**i)\r\n    return bases_num_list\r","votes":null},{"text":"\r\n    return list(map(pow,bases_num,index))\r\nprint(basesnum_coresspondingnum([1,2,4,5],index))\r\n```\r\nThis is the output:\r\n```\r\n[1, 1, 2, 2, 4, 4, 8, 8, 16, 16, 32, 32, 64, 64, 128, 128]\r\n```\r\nThe output is the power of each number from the list.\r\nNote:\r\n* You can try to understand this by yourself.\r\n* You should be able to use a for loop in Python for this.\r\n* You can use map function from itertools.\r\n\r\n# Solution\r\n```python\r\n\"\"\"Write a function to return the powers of list elements in the given list.\r\nExample:\r\nbases = [1,2,4]\r\nindex = [1,2,3]\r\n\r\nOutput:\r\n[1, 1, 2, 2, 4, 4, 8, 8, 16, 16, 32, 32, 64, 64, 128, 128]\r\n\"\"\"\r","votes":null},{"text":"\r\n    if index == 1:\r\n        return list(map(lambda x: x**bases_num,bases_num))\r\n    else:\r\n        return list(map(lambda x: x**bases_num,basesnum_coresspondingnum(bases_num,index-1)))\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: x**bases_num[index], range(bases_num[index])))\r","votes":null},{"text":"\r\n    bases_list = [0 for _ in range(bases_num)]\r\n    for i in range(bases_num):\r\n        bases_list[i] = pow(bases,index[i])\r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: bases**x,index))\r\n\r","votes":null},{"text":"\r\n    return list(map(pow,range(1,bases_num+1),index))\r\n    \r","votes":null},{"text":"\r\n    if index==0:\r\n        return [1]\r\n    else:\r\n        return list(map(lambda x: x*bases_num,basesnum_coresspondingnum(bases_num,index-1)))\r","votes":null},{"text":"\r\n    return map(lambda x: x**bases_num,index)\r\nbases_num=6\r\nindex=range(2,bases_num+1)\r\nprint(basesnum_coresspondingnum(bases_num,index))\r","votes":null},{"text":"\r\n    bases_num = list(bases_num)\r\n    bases_num.reverse()\r\n    index = list(index)\r\n    index.reverse()\r\n    power = []\r\n    for i in range(len(bases_num)):\r\n        power.append(pow(bases_num[i],index[i]))\r\n    return power\r\n\r","votes":null},{"text":"\r\n    \r\n   ","votes":null},{"text":"\r\n    bases_num = map(lambda num:num**index,bases_num)\r\n    return list(bases_num)\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: pow(bases_num,x),index)\r\n\r\n\r","votes":null},{"text":"\r\n    power_list = []\r\n    for i in range(len(index)):\r\n        power_list.append(bases_num**int(index[i]))\r\n    return power_list\r","votes":null},{"text":"\r\n    return list(map(lambda base:base**index,range(256)))\r\n\r","votes":null},{"text":"\r\n    listofpowers=map(pow,bases_num,index)\r\n    return listofpowers\r\n\r","votes":null},{"text":"\r\n    bases = [2,3,5,7,11,13,17,19]\r\n    index_num = 1\r\n    for i in bases:\r\n        index_num = index_num * i\r\n    index_num = int(index_num)\r\n    return (bases_num ** (index - 1)) % index_num\r\n\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x:pow(bases_num,x),index))\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda val:pow(bases_num,val),index))\r","votes":null},{"text":"\r\n    bases_num_correspondingnum = map(lambda x:pow(x,index),bases_num)\r\n    return list(bases_num_correspondingnum)\r","votes":null},{"text":"\r\n    return list(map(lambda x: x ** index, bases_num))\r\n\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x:pow(bases_num,x),index))\r\n\r\n#Function to find the sum of the bases raised to the corresponding power in the index\r","votes":null},{"text":"\r\n    return map(lambda x:pow(bases_num,x,bases_num),index)\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: 10**x,index)\r\n\r","votes":null},{"text":"\r\n    return map(lambda x:pow(x,index),bases_num)\r\n\r\n#Calling the function\r\nbases_num = [3,5,7,9]\r\nindex=2\r\nprint(bases_num_coresspondingnum(bases_num,index))\r\n        \r\n","votes":null},{"text":"\r\n    return map(lambda x:pow(bases_num,x),index)\r","votes":null},{"text":"\r\n    new_list=list(map(lambda x:bases_num**x,index))\r\n    return new_list\r\n\r","votes":null},{"text":"\r\n    return map(pow, bases_num, index)\r","votes":null},{"text":"\r\n    power_list = [int(bases_num)**i for i in index]\r\n    return power_list\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: x**bases_num[index],range(bases_num[index])))\r\n\r\n\r","votes":null},{"text":"\r\n    x=[]\r\n    for i in range(1,bases_num+1):\r\n        x.append(pow(i,index[i-1]))\r\n    return x\r\n\r","votes":null},{"text":"\r\n    #base_num = 2\r\n    #index = 3\r\n    #index_num = 0\r\n    #bases_num = 10\r\n    #index_base = 1\r\n    #index_num = 0\r\n    #bases_num = 2\r\n    #index_base = 2\r\n    #index_num = 0\r\n    #bases_num = 10\r\n    #index_base = 10\r\n    #index_num = 0\r\n    #bases_num = 3\r\n    #index_base = 3\r\n    #index_num = 0\r\n    #bases_num = 3\r\n    #index_base = 10\r\n    #index_num = 0\r\n    #bases_num = 10\r\n    #index_base = 3\r\n    #index_num = 1\r\n    #bases_num = 10\r\n    #index_base = 10\r\n    #index_num = 1\r\n    #bases_num = 10\r\n    #index_base = 100\r\n    #index_num = 1\r\n    #bases_num = 10\r\n    #index_base = 100\r\n    #index_num = 1\r\n    #bases_num = 2\r\n    #index_base = 3\r\n    #index_num = 1\r\n    #bases_num = 10\r\n    #index_base = 100\r\n    #index_num = 1\r\n    #bases_num = 10\r\n    #index_base = 100\r\n    #index_num = 1\r\n    #bases_num = 3\r\n    #index_base = 3\r\n    #index_num = 1\r\n    #bases_num = 2\r\n    #index_base = 10\r\n    #index_num = 1\r\n    #bases_num = 2\r\n    #index_base = 5\r\n    #index_num = 1\r\n    #bases_num = 10\r\n    #index_base = 3\r\n    #index_num = 1\r\n    #bases_num = 10\r\n    #index_base = 3\r\n    #index_num = 1\r\n    #bases_num = 10\r\n    #index_base = ","votes":null},{"text":"\r\n\r\n    return list(map(lambda x:pow(bases_num,x),index))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Convert list to int\r\n    base = int(bases_num)\r\n    index_num = int(index[index.index(bases_num)+1:])\r\n\r\n    # Create an empty list\r\n    pow_list = []\r\n\r\n    # Loop through the list\r\n    for i in range(2,index_num+1):\r\n        pow_list.append(base**i)\r\n\r\n    # Return the list\r\n    return pow_list\r\n\r\nif __name__ == '__main__':\r\n    # List to hold the bases\r\n    bases = [i for i in range(2,11)]\r\n\r\n    # List to hold the powers\r\n    powers = []\r\n\r\n    # List to hold all the possible combinations\r\n    combinations = []\r\n\r\n    # Loop through bases\r\n    for i in bases:\r\n        # Create the corresponding powers\r\n        powers = basesnum_coresspondingnum(i,bases)\r\n\r\n        # Create the combination list\r\n        combinations.append(powers)\r\n\r\n    # Print the combinations\r\n    print(combinations)","votes":null},{"text":"\r\n    return list(map(lambda x:x**bases_num[index],range(len(bases_num))))\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x:pow(bases_num,x,bases_num),index))\r\n#Test case\r\nbases = int(input(\"Enter the bases: \"))\r\nindex = int(input(\"Enter the index: \"))\r\nbases_num = float(input(\"Enter the bases raised to the index: \"))\r\nprint(basesnum_coresspondingnum(bases_num,index))\r\n'''\r\nSample I\/O:\r\nEnter the bases: 2\r\nEnter the index: 3\r\nEnter the bases raised to the index: 8\r\n[0.0625, 0.015625, 0.0078125]\r\n'''\r\n","votes":null}],"time":{"count":18.0,"avg":157840.2975555556,"std":35243.6149541204,"cov":0.2232865466}}
{"id":542,"question":"def fill_spaces(text):\r\n    \"\"\"Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\"\"\"","answers":[{"text":"\r\n    return text.replace(\",\",\" \").replace(\".\",\" \").replace(\" \",\":\")\r","votes":64378.312},{"text":"\r\n    return text.replace(\" \", \":\").replace(\",\",\".\").replace(\".\",\":\")\r\n\r","votes":64584.276},{"text":"\r\n    text = text.replace(' ', ':')\r\n    text = text.replace(',', ':')\r\n    text = text.replace('.', ':')\r\n    return text\r\n\r\n\r","votes":75539.836},{"text":"\r\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\r\n\r\n\r","votes":90468.396},{"text":"\r\n    return text.replace(' ',':').replace(',',':').replace('.','.')\r\n\r","votes":90471.46},{"text":"\r\n    return text.replace(\" \", ':').replace(\",\", ':').replace(\".\", ':')\r\n\r","votes":90786.98},{"text":"\r\n    text = text.replace(\".\", \":\")\r\n    text = text.replace(\",\", \":\")\r\n    text = text.replace(\" \", \":\")\r\n    return text\r\n\r","votes":101019.676},{"text":"\r\n    text = text.replace(\" \", \":\")\r\n    text = text.replace(\",\", \":\")\r\n    text = text.replace(\".\", \":\")\r\n    return text\r\n\r\n\r","votes":126008.22},{"text":"\r\n    text = text.replace(' ', ':')\r\n    text = text.replace(',', ':')\r\n    text = text.replace('.', ':')\r\n    return text\r\n\r","votes":143841.216},{"text":"\r\n    return re.sub(' +', ':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[^a-zA-Z0-9]','', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[., ]', ':', text)\r\n\r","votes":null},{"text":"\r\n    # print(text)\r\n    new_text = re.sub(r\"([,.])\", r\":\", text)\r\n    # print(new_text)\r\n    return new_text\r\n\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n    return re.sub(r'[^\\W\\d_]+', ':', text)\r\n\r\n\r\n# %%\r","votes":null},{"text":"\r\n    return re.sub(r\"([,.])\", \":\", text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[^\\w\\s]', '', text)\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r'[\\s,.]', ':', text)\r\n    return text\r\n\r\ntext = str(input(\"Enter a text: \"))\r\nprint(fill_spaces(text))","votes":null},{"text":"\r\n\r\n    return re.sub(r'(\\s|\\.|,)+', ':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"([.,])\", r\":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[,.]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r\"^\\s*(.*?)\\s*$\", r\"\\1\", text)\r\n    text = re.sub(r\"\\s+\",\" \", text)\r\n    text = re.sub(r\"(?<!\\w)([,.])(?!\\w)\", r\" \\1 \", text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    text = re.sub(r\" \", r\"\", text)\r\n    text = re.sub(r\"\\.', r\"\", text)\r\n    text = re.sub(r\"\\..\", r\":\", text)\r\n    return text\r\n\r\nif __name__ == \"__main__\":\r\n    print(fill_spaces(\" 1234567890,...,...,..,..., 1234567890\"))\r\n    print(fill_spaces(\"Hello, world!\"))\r\n    print(fill_spaces(\"Hello, world! I wonder how many things I can say.\"))\r\n    print(fill_spaces(\" 1234567890,...,...,..,..., 1234567890\"))\r\n    print(fill_spaces(\"Hello, world! I wonder how many things I can say.\"))\r\n    print(fill_spaces(\"Hello, world! I wonder how many things I can say.\"))\r\n    print(fill_spaces(\"Hello, world! I wonder how many things I can say.\"))\r\n","votes":null},{"text":"\r\n    return re.sub(r'([,.])', r':', text)\r\n\r","votes":null},{"text":"\r\n    # Replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\r\n    text = re.sub(' +', ':', text)\r\n    text = re.sub(',', ':', text)\r\n    text = re.sub('.', ':', text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r\" \", \":\", text)\r\n    text = re.sub(r\"-\", \":\", text)\r\n    text = re.sub(r\",\", \":\", text)\r\n    text = re.sub(r\"\\.\", \":\", text)\r\n\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    text = re.sub(r\"[,.\\s]\", \":\", text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    colonized = re.sub(r'([.!?:;])', r' : \\1', text)\r\n    return colonized\r\n\r","votes":null},{"text":"\r\n    return re.sub(\"[.,]\", \":\", text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"(?<=[\\s,\\.])\\s(?=[a-zA-Z])\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[\\s,.]', ':', text)\r\n\r","votes":null},{"text":"\r\n    text = re.sub('\\s', ':', text)\r\n    text = re.sub(',', ':', text)\r\n    text = re.sub('.', ':', text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[\\s\\.,]', ':', text)\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r\" \", \":\", text)\r\n    text = re.sub(r\",\", \":\", text)\r\n    text = re.sub(r\"\\.\",\":\", text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r'\\s+', ':', text)\r\n    text = re.sub(r'\\.\\s+', ':', text)\r\n    text = re.sub(r','+', ':', text)\r\n    text = re.sub(r'\\s+', ':', text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"([.,])\", r\":\", text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[^A-Za-z0-9]+', ':', text)\r\n\r","votes":null},{"text":"\r\n    text = re.sub(' ',':',text)\r\n    text = re.sub(',',':',text)\r\n    text = re.sub('.',':',text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r'\\s+', ':', text)\r\n    text = re.sub(r'[\\,\\.]', ':', text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n\r\n    return re.sub('[,.]', ':', text).strip()\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[\\s,.]\", \":\", text)\r\n\r\n# 1. Load data\r\ndf = pd.read_csv(r\"..\/data\/raw\/train.csv\")\r\ndf_test = pd.read_csv(r\"..\/data\/raw\/test.csv\")\r\ndf_train = pd.read_csv(r\"..\/data\/raw\/train.csv\")\r\ndf_test = pd.read_csv(r\"..\/data\/raw\/test.csv\")\r\ndf_train = pd.read_csv(r\"..\/data\/raw\/train.csv\")\r\ndf_test = pd.read_csv(r\"..\/data\/raw\/test.csv\")\r\ndf_train = pd.read_csv(r\"..\/data\/raw\/train.csv\")\r\ndf_test = pd.read_csv(r\"..\/data\/raw\/test.csv\")\r\ndf_train = pd.read_csv(r\"..\/data\/raw\/train.csv\")\r\ndf_test = pd.read_csv(r\"..\/data\/raw\/test.csv\")\r\ndf_train = pd.read_csv(r\"..\/data\/raw\/train.csv\")\r\ndf_test = pd.read_csv(r\"..\/data\/raw\/test.csv\")\r\ndf_train = pd.read_csv(r\"..\/data\/raw\/train.csv\")\r\ndf_test = pd.read_csv(r\"..\/data\/raw\/test.csv\")\r\ndf_train = pd.read_csv(r\"..\/data\/raw\/train.csv\")\r\ndf_test = pd.read_csv(r\"..\/data\/raw\/test.csv\")\r\ndf_train = pd.read_csv(r\"..\/data\/raw\/train.csv\")\r\ndf_test = pd.read_csv(r\"..\/data\/raw\/test.csv\")\r\ndf_train = pd.read_csv(r\"..\/data\/raw\/train.csv\")\r\ndf_test = pd.read_csv(r\"..\/data\/raw","votes":null},{"text":"\r\n    text = re.sub('\\s+,',':',text)\r\n    text = re.sub('\\s+\\.','.',text)\r\n    text = re.sub('\\s+',':',text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[,\\. ]\", \":\", text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"([,\\.])\", r\":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[.!?]\", \":\", text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'\\s+', ':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(\"[,.]\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return text.replace(\" \",\"\\n\")\r\n\r","votes":null},{"text":"\r\n    # YOUR CODE GOES HERE\r\n    return re.sub(r\"\\s|\\n|\\,|\\.\", \":\", text)\r\n\r","votes":null},{"text":"\r\n\r\n    return re.sub(r'(\\s+|,|\\.)',':',text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"(\\s|\\.|,)\", \":\", text)\r\n\r\n# Fill spaces in the given text\r\ntext = \"I love Python, JavaScript, and Java. I also like to play volleyball.\"\r\nprint(fill_spaces(text))\r\n","votes":null},{"text":"\r\n    # Your code here\r\n    return re.sub(r'[\\.,]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    pattern = re.compile(r'([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s([a-zA-Z0-9])\\s(","votes":null},{"text":"\r\n    return re.sub(r'\\s|,|\\.|:|!',':',text)\r\n\r\n# Print the output\r\nprint(fill_spaces('Hello, my name is <NAME>. How are you doing today?'))\r\n","votes":null},{"text":"\r\n    return re.sub(r\"[,.]\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r'[^\\w\\s]', '', text)\r\n    return ':'.join(text.split())\r\n# -\r\n\r\nfill_spaces('this is a sentence with spaces. and some commas, and some dots.')\r\n\r\n# +\r\n# Write a function to split the text in the given string into a list of words.\r\n# The words must be separated by whitespace.\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'([,\\.])', \":\", text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'([\\s,.])', ':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'([,.])', ':', text)\r\n\r","votes":null},{"text":"\r\n    return text.replace(\" \",\"_\").replace(\".\",\":\").replace(\",\",\"_\")\r\n\r\n# In[11]:\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'\\s|\\.|,|:|;', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Replace spaces with colons\r\n    text = re.sub(r'[^\\w\\s]', '', text)\r\n    text = text.replace(' ', ':')\r\n\r\n    # Replace commas with colons\r\n    text = re.sub(r'[^\\w\\s]', '', text)\r\n    text = text.replace(',', ':')\r\n\r\n    # Replace dots with colons\r\n    text = re.sub(r'[^\\w\\s]', '', text)\r\n    text = text.replace('.', ':')\r\n\r\n    return text\r\n\r","votes":null},{"text":"\r\n    re_pattern = re.compile(r'([,.])')\r\n    text = re_pattern.sub(r':', text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'([.,!?])', r' : \\1', text)\r\n\r","votes":null},{"text":"\r\n    # Return a new string with all spaces, commas, and dots replaced with colons.\r\n    return re.sub(r'[,.]', ': ', text)\r\n\r\n\r\n# + [markdown] id=\"5H55wK28sR-M\"\r\n# Now the new version of the function will be applied to all the reviews.\n\n# + id=\"k6371y9tsQ82\"\nfor i in range(len(reviews)):\r\n    reviews[i] = fill_spaces(reviews[i])\n\n# + [markdown] id=\"6337s_e8sW2i\"\n# The number of reviews after applying the function is as follows:\n\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\"} id=\"w58K10l3sW9t\" outputId=\"78887c52-8e95-4a94-f17c-a222780920d0\"\nlen(reviews)\n\n# + [markdown] id=\"3o_Y4000se10\"\n# Now that the reviews have been cleaned, we can now count the number of words in each review in the dataset.\n\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\"} id=\"zV8648j1sZ2O\" outputId=\"5c103537-a3e4-4005-c159-4d324a061387\"\nimport nltk\nnltk.download('punkt')\nnltk.download('stopwords')\n\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\"} id=\"890bK8F_sZ3g\" outputId=\"43105808-a017-4a87-8d3a-1ec00b555116\"\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tokenize import sent_tokenize\n\nstop_words = se","votes":null},{"text":"\r\n    text = re.sub(\"[,. ]\", \":\", text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    text = re.sub(' ',':', text)\r\n    text = re.sub(',',':', text)\r\n    text = re.sub('\\.',':', text)\r\n    return text\r\n\r\nprint(fill_spaces(\"Hello, world!\")) # should print: Hello:world!\r\n```\r\n\r\n## Task 5: Splitting Strings\r\n\r\nIn this task, you will be given a string, and you have to split it into a list of words using the `split()` method.\r\n\r\n### Task 5.1: Write a function to split a string by spaces\r\n\r\nUse the `split()` method to split the given string into a list of words.\r\n\r\n```\r","votes":null},{"text":"\r\n    pattern = re.compile(r'([.,])')\r\n    return pattern.sub(r':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub('[\\s,\\.]', ':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'( )|,|\\.|:',r':',text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[,.\\s]',\":\",text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'(\\s|,|\\.)',':',text)\r\n\r\n#Filling the text\r\ntext=fill_spaces(text)\r\n\r\n#Converting the text into a list of words\r\nwords=text.split()\r\n#Removing punctuation\r\nno_punctuation=[word for word in words if word not in punctuations]\r\n#Removing stop words\r\nno_stopwords=[word for word in no_punctuation if word not in stopwords]\r\n#Removing all digits\r\nno_digits=[word for word in no_stopwords if not word.isdigit()]\r\n#Removing all words shorter than 3 characters\r\nno_short_words=[word for word in no_digits if len(word)>2]\r\n#Removing all words longer than 10 characters\r\nno_long_words=[word for word in no_short_words if len(word)<11]\r\n#Removing all words containing numbers\r\nno_digits_words=[word for word in no_long_words if not word.isdigit()]\r\n\r\n#Converting the list of words into a set for counting\r\nwords_set=set(no_digits_words)\r\n#Counting the occurrences of each word\r\nprint(words_set)\r\nfor word in words_set:\r\n    print('word: ',word,'count: ',words_set[word])\r\n#Finding the most common words\r\n#Most common words\r\na=max(words_set.items(),key = operator.itemgetter(1))\r\nprint(a)\r\n\r\n#Finding the 10 most common words\r\nb={}\r\nfor word in words_set:\r\n    b[word]=words_set[word]\r\nc=sorted(b.items(),key = operator.itemgetter(1),reverse=True)[:10]\r\nprint(c)\r\n#Finding the 10 least common words\r\nd={}\r\nfor word in words_set:\r\n    d[word]=words_set[word]\r\ne=sorted(d.items(),key = operator.itemgetter(1))[:10]\r\nprin","votes":null},{"text":"\r\n    spaces = re.compile(r\"\\s+\")\r\n    dots = re.compile(r\"\\.\")\r\n    commas = re.compile(r\",\")\r\n    return spaces.sub(\" \", dots.sub(\".\", commas.sub(\":\", text)))\r\n\r\n\r\n# Get cleaned text\r\nclean_text = fill_spaces(text)\r\n# Print clean text\r\nprint(clean_text)\r\n\r\n# Get tokens\r\ntokens = nltk.word_tokenize(clean_text)\r\n# Print tokens\r\nprint(tokens)\r\n\r\n# Get stopwords\r\nstops = nltk.corpus.stopwords.words(\"english\")\r\n# Print stopwords\r\nprint(stops)\r\n\r\n# Get filtered tokens\r\nfiltered_tokens = [token for token in tokens if token not in stops]\r\n# Print filtered tokens\r\nprint(filtered_tokens)\r\n\r\n# Get lemmatized tokens\r\nlemmatizer = nltk.stem.WordNetLemmatizer()\r\nlemmatized_tokens = [lemmatizer.lemmatize(token) for token in filtered_tokens]\r\n# Print lemmatized tokens\r\nprint(lemmatized_tokens)\r\n\r\n# Get POS tags\r\npos_tagged = nltk.pos_tag(lemmatized_tokens)\r\n# Print POS tags\r\nprint(pos_tagged)\r\n\r\n# Get nouns\r\nnouns = [tag for (word, tag) in pos_tagged if tag == \"NN\"]\r\n# Print nouns\r\nprint(nouns)\r\n\r\n# Get adverbs\r\nadv = [tag for (word, tag) in pos_tagged if tag == \"RB\"]\r\n# Print adverbs\r\nprint(adv)\r\n\r\n# Get verbs\r\nverbs = [tag for (word, tag) in pos_tagged if tag == \"VB\"]\r\n# Print verbs\r\nprint(verbs)\r\n\r\n# Get adjectives\r\nadj = [tag for (word, tag) in pos_tagged if tag == \"JJ\"]\r\n# Print adjectives\r\nprint(adj)\r\n\r\n# Get adjectives\r\npron = [tag for (word, ta","votes":null},{"text":"\r\n    space_reg = re.compile(r\"(\\s|,|\\.)+\")\r\n    text = space_reg.sub(\":\", text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n\r\n    # for i in range(len(text)):\r\n    #     if text[i] in ',.':\r\n    #         text = text[:i] + ':' + text[i+1:]\r\n    #         break\r\n    # return text\r\n\r\n    return re.sub(r'([\\s,\\.])', r':', text)\r\n\r\nif __name__ == '__main__':\r\n    print(fill_spaces(input()))","votes":null},{"text":"\r\n    return re.sub(r\"([\\s,.])\", \":\", text)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    text = \"I am a student who is studying at the University of Birmingham. I am currently studying at the University of Birmingham. I am studying Physics at the University of Birmingham. I am studying Computer Science at the University of Birmingham.\"\r\n\r\n    print(text)\r\n    print()\r\n    print(\"Text with spaces replaced with colons:\")\r\n    print(fill_spaces(text))\r\n","votes":null},{"text":"\r\n    return re.sub(r\"[\\s,.]\", \"\", text)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return re.sub(r\"(?::|,|.)\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[\\s,\\.]\", \":\", text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[\\s*,\\.]\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub('[^A-Za-z0-9 ]', '', text)\r\n    text = re.sub(' +','', text)\r\n    return text\r","votes":null},{"text":"\r\n    return re.sub(r'([.,])\\s+', r':\\1', text)\r\n\r","votes":null},{"text":"\r\n\r\n    # Check if the input is a string\r\n    assert isinstance(text, str)\r\n    \r\n    # Replace all spaces, commas, and dots with a colon\r\n    text = re.sub(r'\\s+', ':', text)\r\n    text = re.sub(r',', ':', text)\r\n    text = re.sub(r'\\.', ':', text)\r\n    \r\n    return text\r\n\r\n# Print the output of the function\r\nprint(fill_spaces('Mr. <NAME>, Ph.D.'))\r\nprint(fill_spaces('Mr. <NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('<NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('Mr. <NAME>, Ph.D.'))\r\nprint(fill_spaces('Mr. <NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('Mr. <NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('<NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('<NAME>, Ph.D.'))\r\nprint(fill_spaces('<NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('<NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('<NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('Mr. <NAME>, Ph.D.'))\r\nprint(fill_spaces('Mr. <NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('Mr. <NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('<NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('<NAME>, Ph.D.'))\r\nprint(fill_spaces('<NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('<NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('<NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces('<NAME>, Ph.D., 2nd Class'))\r\nprint(fill_spaces(","votes":null},{"text":"\r\n    return re.sub('[^a-zA-Z0-9 ]', '', text)\r\n```\r\n\r\nThe function would replace all non-alphanumeric characters with a space. For example, the string \"Mary had a little lamb.\" becomes \"Mary had a little:lamb.\".\r\n\r\nThis is an interesting problem. I think it would be a good problem for those who are new to Python.\r\n\r\n## Other Solutions\r\n\r\nIf you don't want to use a regex, you can use a list comprehension to do the same thing.\r\n\r\n```\r\nimport re\r\n\r","votes":null},{"text":"\r\n    return re.sub('[^A-Za-z0-9\\s]', '', text)\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r' ',':', text)\r\n    text = re.sub(r',',':', text)\r\n    text = re.sub(r'.',':', text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r'[^a-zA-Z0-9\\s]','', text)\r\n    text = re.sub(r'[\\s]+','', text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[.,]', ':', text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(\"([\\s,\\.])\",\" : \",text)\r\n\r\ntext = \"1, 2, 3, 4, 5\"\r\nprint(text)\r\nprint(fill_spaces(text))\r\n```\r\nThe output is:\r\n```\r\n1, 2, 3, 4, 5\r\n: : : 1 : : : 2 : : : 3 : : : 4 : : : 5\r\n```\r\nNotice how the spaces, commas, and dots are replaced with a colon.\r\n\r\n### 2. Create a function to capitalize the first letter of a string.\r\n\r\n```python\r","votes":null},{"text":"\r\n    return re.sub(r'[ \\.\\,\\s]',':',text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'(\\s),(\\s)|(\\s)\\.(?!\\s)|(\\s)\\.(?!\\s)|(\\s)(\\s)(\\s)|(\\s)(\\s)(\\s)|(\\s)(\\s)(\\s)(?!\\s)',':',text)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[,.]\", \":\", text)\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r\"[., ]\", \":\", text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub('\\s', ':', text)\r\n    text = re.sub(',', ':', text)\r\n    text = re.sub('\\.', ':', text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r\"(\\s|\\.|\\,)\", \":\", text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[,. ]\", \": \", text)\r\n\r\n\r","votes":null}],"time":{"count":9.0,"avg":94122.0413333333,"std":26637.7738288926,"cov":0.2830131333}}
{"id":543,"question":"def count_digits(num1,num2):\r\n    \"\"\"Write a function to add two numbers and print number of digits of sum.\"\"\"","answers":[{"text":"\r\n    #return (len(str(int(num1)+int(num2))))\r\n    return (len(str(int(num1)+int(num2))))\r\n\r","votes":62682.392},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    while(sum!=0):\r\n        count+=1\r\n        sum=sum\/\/10\r\n    return count\r\n\r","votes":74445.404},{"text":"\r\n    sum=num1+num2\r\n    num_digits=len(str(sum))\r\n    return num_digits\r\n\r","votes":77262.904},{"text":"\r\n    sum = num1+num2\r\n    count = 0\r\n    while sum>0:\r\n        count += 1\r\n        sum \/\/= 10\r\n    return count\r\n\r\n\r","votes":79502.304},{"text":"\r\n    sum = num1+num2\r\n    count = 0\r\n    while(sum):\r\n        sum = sum \/\/ 10\r\n        count = count + 1\r\n    return count\r\n\r","votes":83758.68},{"text":"\r\n    if num1<10:\r\n        return 1\r\n    else:\r\n        return count_digits(num1\/\/10,num2)+1\r\n\r","votes":88379.072},{"text":"\r\n    sum_num = num1 + num2\r\n    no_of_digits = len(str(sum_num))\r\n    return no_of_digits\r\n\r","votes":89327.912},{"text":"\r\n    num1_digits = len(str(num1))\r\n    num2_digits = len(str(num2))\r\n    if num1_digits > num2_digits:\r\n        sum_digits = num1_digits\r\n    else:\r\n        sum_digits = num2_digits\r\n    return sum_digits\r\n\r","votes":90797.816},{"text":"\r\n    sum = num1 + num2\r\n    digits = 0\r\n    while(sum>0):\r\n        sum = sum \/\/ 10\r\n        digits += 1\r\n    return digits\r\n\r","votes":93762.916},{"text":"\r\n    sum=num1+num2\r\n    sum_digits=len(str(sum))\r\n    return sum_digits\r\n\r\nprint(count_digits(20,30))","votes":96400.6},{"text":"\r\n    if num1<10:\r\n        sum_ = num1+num2\r\n    elif num2<10:\r\n        sum_ = num1+num2\r\n    else:\r\n        sum_ = num1 + num2\r\n        count = 0\r\n        while sum_>0:\r\n            sum_ = sum_\/\/10\r\n            count += 1\r\n        return count\r\n\r","votes":101308.848},{"text":"\r\n    if num1>num2:\r\n        digits=len(str(num1))\r\n    else:\r\n        digits=len(str(num2))\r\n    return digits\r\nprint(count_digits(11,12))\r\nprint(count_digits(123,1234))\r\nprint(count_digits(1234,12345))\r\nprint(count_digits(12345,123456))\r\nprint(count_digits(123456,1234567))\r\nprint(count_digits(1234567,12345678))\r\nprint(count_digits(12345678,123456789))","votes":101714.82},{"text":"\r\n    if num1>num2:\r\n        num=num1\r\n    else:\r\n        num=num2\r\n    count=0\r\n    while num>0:\r\n        count+=1\r\n        num=num\/\/10\r\n    return(count)\r\n\r\nprint(count_digits(123,456))\r\n\r\n#Q1.3\r\n\r","votes":104420.004},{"text":"\r\n    return len(str(num1+num2))\r\n\r\nif __name__ == '__main__':\r\n    num1 = int(input('Enter first number: '))\r\n    num2 = int(input('Enter second number: '))\r\n    print(count_digits(num1,num2))\r\n","votes":113020.292},{"text":"\r\n    if num1>num2:\r\n        max_num=num1\r\n    else:\r\n        max_num=num2\r\n    digits_sum=0\r\n    while max_num>0:\r\n        max_num=max_num\/\/10\r\n        digits_sum=digits_sum+1\r\n    return digits_sum\r\n\r","votes":116575.376},{"text":"\r\n    return len(str(num1+num2))\r\n\r\n\r\n# This function is used to find the sum of two numbers.\r","votes":123168.744},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum>0:\r\n        sum \/\/= 10\r\n        count += 1\r\n    return count\r\n\r","votes":126468.64},{"text":"\r\n    if num1 > 0:\r\n        return 1 + count_digits(num1\/\/10, num2+1)\r\n    else:\r\n        return 0\r\n\r\n\r","votes":130559.352},{"text":"\r\n    if (num1>num2):\r\n        c=num1\r\n        d=num2\r\n    else:\r\n        c=num2\r\n        d=num1\r\n    count=0\r\n    while(c!=0):\r\n        count+=1\r\n        c\/\/=10\r\n    return count\r\n\r","votes":133738.172},{"text":"\r\n    sum_digits = len(str(num1+num2))\r\n    return sum_digits\r\n\r\nprint(count_digits(4,5))\r\nprint(count_digits(12,45))\r\nprint(count_digits(123,456))","votes":133909.488},{"text":"\r\n    if num1 < num2:\r\n        (num1,num2) = (num2,num1)\r\n    sum = num1\r\n    while sum < num2:\r\n        sum = sum + 1\r\n    return len(str(sum))\r\n\r\n#Test Cases\r\nprint(count_digits(120,1200))\r\nprint(count_digits(12,123))","votes":134517.908},{"text":"\r\n    if num1 > num2:\r\n        num1,num2 = num2,num1\r\n    return len(str(num1+num2))\r\n\r\nif __name__ == '__main__':\r\n    print(count_digits(123,456))\r\n    print(count_digits(234,234))","votes":168895.052},{"text":"\r\n    if num1>num2:\r\n        num1,num2 = num2,num1\r\n    if num1==0:\r\n        return len(str(num2))\r\n    return count_digits(num1\/\/10,num2\/\/10)+1\r\ncount_digits(1,10)\r\n'''\r\nInput:\r\nOutput: 3\r\n'''\r\n\r","votes":172730.556},{"text":"\r\n    if num1>num2:\r\n        num1,num2=num2,num1\r\n    sum=num1+num2\r\n    digits=len(str(sum))\r\n    return digits\r\nprint(count_digits(23,65))\r\nprint(count_digits(234,65))\r\nprint(count_digits(2345,65))\r\nprint(count_digits(23456,65))\r\nprint(count_digits(234567,65))\r\nprint(count_digits(2345678,65))\r\nprint(count_digits(23456789,65))\r\nprint(count_digits(234567890,65))\r\nprint(count_digits(2345678901,65))\r\nprint(count_digits(23456789012,65))\r\nprint(count_digits(234567890123,65))\r\nprint(count_digits(2345678901234,65))\r\nprint(count_digits(23456789012345,65))\r\nprint(count_digits(234567890123456,65))\r\nprint(count_digits(2345678901234567,65))\r\nprint(count_digits(23456789012345678,65))\r\nprint(count_digits(234567890123456789,65))\r\nprint(count_digits(2345678901234567890,65))\r\nprint(count_digits(23456789012345678901,65))\r\nprint(count_digit","votes":null},{"text":"\r\n    if num2 == 0:\r\n        return num1\r\n    else:\r\n        return count_digits(num1+1,num2\/\/10)\r\n\r\nprint(count_digits(0,123456))","votes":null},{"text":"\r\n    num1=str(num1)\r\n    num2=str(num2)\r\n    sum=int(num1)+int(num2)\r\n    print(\"sum of two number is \"+str(sum))\r\n    print(\"number of digits of sum is \"+str(len(str(sum))))\r\n\r\ncount_digits(3,3)\r\ncount_digits(123,456)\r\ncount_digits(1234567,8901234)","votes":null},{"text":"\r\n    if num1>num2:\r\n        count= count_digits(num1\/\/10,num2)\r\n    elif num2>num1:\r\n        count= count_digits(num1,num2\/\/10)\r\n    else:\r\n        count=1\r\n    return count\r\nprint(count_digits(325,487))\r\n\r","votes":null},{"text":"\r\n    # convert the numbers to string\r\n    sum_str = str(num1) + str(num2)\r\n    # count the digits\r\n    num_digits = len(sum_str)\r\n    return num_digits\r\n\r\n# test the function\r\nprint(count_digits(10,20))\r\n# 3\r\nprint(count_digits(1,2))\r\n# 2\r\nprint(count_digits(1,1))\r\n# 1\r\nprint(count_digits(123,456))\r\n# 6\r\nprint(count_digits(123,45))\r\n# 5\r\nprint(count_digits(12,12))\r\n# 2\r\nprint(count_digits(0,0))\r\n# 1\r\nprint(count_digits(123456789,123456789))\r\n# 10\r\nprint(count_digits(123456789,123456788))\r\n# 9\r\nprint(count_digits(123456789,123456787))\r\n# 8\r\nprint(count_digits(123456789,123456786))\r\n# 7\r\nprint(count_digits(123456789,123456785))\r\n# 6\r\nprint(count_digits(123456789,123456784))\r\n# 5\r\nprint(count_digits(123456789,123456783))\r\n# 4\r\nprint(count_digits(123456789,123456782))\r\n# 3\r\nprint(count_digits(123456789,123456781))\r\n# 2\r\nprint(count","votes":null},{"text":"\r\n    #Write your code here\r\n    n1=str(num1)\r\n    n2=str(num2)\r\n    count=0\r\n    for i in range(len(n1)):\r\n        count+=int(n1[i])\r\n    for i in range(len(n2)):\r\n        count+=int(n2[i])\r\n    print(count)\r\n\r\n\r","votes":null},{"text":"\r\n    num1 = str(num1)\r\n    num2 = str(num2)\r\n    if len(num1) > len(num2):\r\n        num1, num2 = num2, num1\r\n    if len(num1) < len(num2):\r\n        num2 = str(num2).zfill(len(num1))\r\n    if len(num2) < len(num1):\r\n        num1 = str(num1).zfill(len(num2))\r\n    for i,j in zip(num1,num2):\r\n        sum = int(i) + int(j)\r\n        print(sum,end='')\r\n    print(' ',end='')\r\n    return sum\r\n\r\nprint(count_digits(15,0))\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15,0),end='')\r\nprint(count_digits(15","votes":null},{"text":"\r\n    count = 0\r\n    while num1 or num2:\r\n        if num1:\r\n            count += 1\r\n            num1 \/\/= 10\r\n        if num2:\r\n            count += 1\r\n            num2 \/\/= 10\r\n    return count\r\nprint(count_digits(int(input(\"Enter first number:\")),int(input(\"Enter second number:\"))))\r\n","votes":null},{"text":"\r\n    if num1>num2:\r\n        number=num1\r\n    else:\r\n        number=num2\r\n    count=0\r\n    while(number>0):\r\n        count+=1\r\n        number=number\/\/10\r\n    print(count)\r\n\r","votes":null},{"text":"\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    count = 0\r\n    while num1:\r\n        num1 = num1 \/\/ 10\r\n        count += 1\r\n    while num2:\r\n        num2 = num2 \/\/ 10\r\n        count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    num1 = str(num1)\r\n    num2 = str(num2)\r\n    sum = 0\r\n    for i in range(len(num1)):\r\n        sum += int(num1[i])\r\n    for i in range(len(num2)):\r\n        sum += int(num2[i])\r\n    print(sum)\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    digit_count = len(str(sum))\r\n    if digit_count==1:\r\n        return digit_count\r\n    else:\r\n        return digit_count+count_digits(sum\/\/10,sum%10)\r\n\r\nif __name__ == \"__main__\":\r\n    print(count_digits(1234567,9876543))","votes":null},{"text":"\r\n    num1_digits = len(str(num1))\r\n    num2_digits = len(str(num2))\r\n    return num1_digits+num2_digits\r\n\r\n# Driver code\r\nif __name__ == \"__main__\":\r\n    num1 = int(input(\"Enter first number: \"))\r\n    num2 = int(input(\"Enter second number: \"))\r\n    print(\"Sum is:\",sum(num1,num2),\", number of digits is:\",count_digits(num1,num2))\r\n","votes":null},{"text":"\r\n    sum = num1+num2\r\n    num_digits = len(str(sum))\r\n    return num_digits\r\n\r\nprint(count_digits(12,45))\r\n```\r\n#### 2.2.3 How to use a function to calculate the area of a triangle?\r\n\r\n* In the `area_of_triangle.py` program, we will calculate the area of a triangle. We will use the function `area_of_triangle()` to calculate the area. \r\n```python\r","votes":null},{"text":"\r\n    if num1 == 0 or num2 == 0:\r\n        return 1\r\n    else:\r\n        return 1 + count_digits(num1\/\/10,num2\/\/10)\r\nprint(count_digits(100,10))\r\n\r\n","votes":null},{"text":"\r\n    digits1 = 0\r\n    digits2 = 0\r\n    if num1 == 0:\r\n        digits1 = 1\r\n    else:\r\n        while num1 > 0:\r\n            num1 = num1 \/\/ 10\r\n            digits1 += 1\r\n    if num2 == 0:\r\n        digits2 = 1\r\n    else:\r\n        while num2 > 0:\r\n            num2 = num2 \/\/ 10\r\n            digits2 += 1\r\n    if digits1 > digits2:\r\n        print(abs(digits1 - digits2))\r\n    else:\r\n        print(abs(digits2 - digits1))\r\n\r\ncount_digits(1234567, 9876543)\r\ncount_digits(123, 987)\r\ncount_digits(123, 98765)","votes":null},{"text":"\r\n    if num1==0:\r\n        return num2\r\n    else:\r\n        return count_digits(num1\/\/10,num2+1)\r\n\r\n\r\nprint(count_digits(234,0))\r\n","votes":null},{"text":"\r\n    total=0\r\n    while num1>0:\r\n        total+=1\r\n        num1\/\/=10\r\n    while num2>0:\r\n        total+=1\r\n        num2\/\/=10\r\n    print(total)\r\n\r\nif __name__=='__main__':\r\n    num1=int(input('Enter first number: '))\r\n    num2=int(input('Enter second number: '))\r\n    count_digits(num1,num2)\r\n","votes":null},{"text":"\r\n    sum=0\r\n    while num1>0:\r\n        sum+=1\r\n        num1=num1\/\/10\r\n    while num2>0:\r\n        sum+=1\r\n        num2=num2\/\/10\r\n    return sum\r\nprint(count_digits(12,13))\r\nprint(count_digits(123,456))\r\nprint(count_digits(123456,7890))\r\nprint(count_digits(1234567890,1))","votes":null},{"text":"\r\n    # convert to string\r\n    str1=str(num1)\r\n    str2=str(num2)\r\n    # create an empty list\r\n    digits = []\r\n    # check if any digit is equal\r\n    for i in range(len(str1)):\r\n        if str1[i] == str2[i]:\r\n            # if it is equal add 1 to the list\r\n            digits.append(1)\r\n        else:\r\n            # else add 0 to the list\r\n            digits.append(0)\r\n    # return the number of digits in the list\r\n    return digits.count(1)\r\nprint(count_digits(543,567))\r\nprint(count_digits(456,789))\r\n","votes":null},{"text":"\r\n    num1=str(num1)\r\n    num2=str(num2)\r\n    if len(num1)==0 or len(num2)==0:\r\n        return 0\r\n    if num1[-1]=='.':\r\n        num1=num1[:-1]\r\n    if num2[-1]=='.':\r\n        num2=num2[:-1]\r\n    if num1[-1]=='0':\r\n        num1=num1[:-1]\r\n    if num2[-1]=='0':\r\n        num2=num2[:-1]\r\n    if len(num1)==len(num2):\r\n        digit=0\r\n        for i in range(len(num1)):\r\n            digit=digit+abs(int(num1[i])-int(num2[i]))\r\n        return digit+count_digits(num1[:-1],num2[:-1])\r\n    elif len(num1)>len(num2):\r\n        return count_digits(num1,num2[1:])\r\n    else:\r\n        return count_digits(num1[1:],num2)\r\n\r\nprint(count_digits(1000,100000))\r\nprint(count_digits(10000000000,100000000000))\r\nprint(count_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    if num1 > num2:\r\n        num1, num2 = num2, num1\r\n    sum = 0\r\n    while num1:\r\n        sum += num1 % 10\r\n        num1 \/\/= 10\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    if num2 == 0:\r\n        return 1\r\n    elif num2 > 0:\r\n        return count_digits(num1 + 1, num2 \/\/ 10)\r\n    else:\r\n        return count_digits(num1, abs(num2) \/\/ 10)\r\n\r\nprint(count_digits(0,1000))\r\nprint(count_digits(1,1000))\r\nprint(count_digits(10,1000))\r\nprint(count_digits(100,1000))\r\nprint(count_digits(1000,1000))\r\nprint(count_digits(10000,1000))\r\nprint(count_digits(100000,1000))\r\nprint(count_digits(1000000,1000))\r\nprint(count_digits(10000000,1000))\r\nprint(count_digits(100000000,1000))\r\nprint(count_digits(1000000000,1000))\r\nprint(count_digits(10000000000,1000))\r\nprint(count_digits(100000000000,1000))\r\nprint(count_digits(1000000000000,1000))\r\nprint(count_digits(10000000000000,1000))\r\nprint(count_digits(100000000000000,1000))\r\nprint(count_digits(1000000000000000,1000))\r\nprint(count_digits(10000000000000000,1000))\r\nprint(count_digits(10000000","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    num_digits = len(str(sum))\r\n    print(num_digits)\r\n\r\ncount_digits(1234567,987654321)\r\ncount_digits(123,123)","votes":null},{"text":"\r\n    if num1<10:\r\n        if num2<10:\r\n            print(1)\r\n        else:\r\n            print(count_digits(num1+1,num2))\r\n    else:\r\n        if num2<10:\r\n            print(1+count_digits(num1,num2))\r\n        else:\r\n            print(count_digits(num1,num2)+count_digits(num1+1,num2))\r\n\r\ncount_digits(4,3)\r\n\r\n# + [markdown] id=\"Q4p62qR4h2_C\" colab_type=\"text\"\r\n# **3**. Write a function to find the value of the following equation.\r\n# $$\r\n# f(x)=\\begin{cases}\r\n#     -2x^3+3x^2+5x-3,&x\\in[-1,0] \\\\\r\n#     x^2-2x+5,&x\\in[0,1] \\\\\r\n#     -2x^3+2x^2+5x-3,&x\\in[1,2] \\\\\r\n#     -2x^3+5x^2+5x-3,&x\\in[2,3]\r\n# \\end{cases}\r\n# $$\r\n#\r\n\r\n# + id=\"4o0X_q14h82D\" colab_type=\"code\" colab={}\r\n# %matplotlib inline\r\nimport matplotlib.pyplot as plt\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    print(str(sum).count(str(num1)))\r\n    print(str(sum).count(str(num2)))\r\n\r\n\r","votes":null},{"text":"\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    sum_digits = 0\r\n    while num1!= 0 or num2!= 0:\r\n        if num1!= 0:\r\n            sum_digits = sum_digits + num1 % 10\r\n            num1 = num1 \/\/ 10\r\n        if num2!= 0:\r\n            sum_digits = sum_digits + num2 % 10\r\n            num2 = num2 \/\/ 10\r\n    print(sum_digits)\r\n    return sum_digits\r\n\r\nif __name__ == '__main__':\r\n    #test_count_digits()\r\n    count_digits(\"2147483647\",\"2147483647\")\r\n    #count_digits(\"34\",\"234\")\r\n    #count_digits(\"134\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n    #count_digits(\"234\",\"234\")\r\n  ","votes":null},{"text":"\r\n    sum = num1+num2\r\n    print(sum)\r\n    if len(str(sum)) == 1:\r\n        return 1\r\n    else:\r\n        return 1 + count_digits(sum\/\/10,sum%10)\r\n\r\ncount_digits(23,45)","votes":null},{"text":"\r\n    sum=0\r\n    dig=0\r\n    while num1>0:\r\n        dig=num1%10\r\n        sum+=dig\r\n        num1\/\/=10\r\n    while num2>0:\r\n        dig=num2%10\r\n        sum+=dig\r\n        num2\/\/=10\r\n    print(sum)\r\n\r\n#count_digits(1789,364)\r\n\r\n'''\r\nWrite a program to find the sum of the digits present in the given number.\r\n\r\nSample Input :- 1789\r\n\r\nSample Output :- 17+8+9=27\r\n\r\nExplanation :- In the given number, 1, 7, 8 and 9 are present in the sum.\r\n'''\r\n\r\n'''\r\nWrite a program to find the sum of the digits present in the given number.\r\n\r\nSample Input :- 1789\r\n\r\nSample Output :- 17+8+9=27\r\n\r\nExplanation :- In the given number, 1, 7, 8 and 9 are present in the sum.\r\n'''\r\n\r\n'''\r\nWrite a function which adds two numbers and prints the sum.\r\n\r\nSample Input :- 1789, 364\r\n\r\nSample Output :- 205\r\n\r\nExplanation :- 1789 + 364 = 205\r\n'''\r\n\r\n'''\r\nWrite a function which adds two numbers and prints the sum.\r\n\r\nSample Input :- 1789, 364\r\n\r\nSample Output :- 205\r\n\r\nExplanation :- 1789 + 364 = 205\r\n'''\r\n\r\n'''\r\nWrite a function which subtracts two numbers and prints the difference.\r\n\r\nSample Input :- 1789, 364\r\n\r\nSample Output :- 1425\r\n\r\nExplanation :- 1789 - 364 = 1425\r\n'''\r\n\r\n'''\r\nWrite a function which subtracts two numbers and prints the difference.\r\n\r\nSample Input :- 1789, 364\r\n\r\nSample Output :- 1425\r\n\r\nExplanation :- 1789 - 364 = 1","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum % 10!= 0:\r\n        sum \/\/= 10\r\n        count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    #print(count_digits(123456,654321))\r\n    print(count_digits(123456,654321))","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    if sum == 0:\r\n        return 1\r\n    if sum % 10 == 0:\r\n        return 1 + count_digits(num1,sum\/\/10)\r\n    else:\r\n        return 1 + count_digits(num1,sum\/\/10)\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    return len(str(num1+num2))\r\n\r\nprint(count_digits(123,456))\r\n```\r\n\r\n### Output\r\n```\r\n$ python solution.py\r\n11\r\n```\r\n\r\n---\r\n\r\n## Part 3\r\n\r\nWrite a function to multiply two numbers.\r\n\r\n### Input\r\n```python\r","votes":null},{"text":"\r\n    n = num1\r\n    x = num2\r\n    flag = 0\r\n    while(n>0):\r\n        n = n\/\/10\r\n        flag += 1\r\n    while(x>0):\r\n        x = x\/\/10\r\n        flag += 1\r\n    return flag\r\n\r\nprint(count_digits(123,456))\r\n\r\nprint(count_digits(12,34))\r\n\r\n","votes":null},{"text":"\r\n    # your code goes here\r\n    sum = num1+num2\r\n    num1_digits = len(str(num1))\r\n    num2_digits = len(str(num2))\r\n    sum_digits = len(str(sum))\r\n    \r\n    if sum_digits >= num1_digits and sum_digits >= num2_digits:\r\n        print(sum_digits)\r\n    elif num1_digits >= sum_digits and num1_digits >= num2_digits:\r\n        print(num1_digits)\r\n    else:\r\n        print(num2_digits)\r\n    \r\ncount_digits(123456789,654321)\r\ncount_digits(123456789,123456789)\r\ncount_digits(123456789,12345678)\r\ncount_digits(123456789,1234567)\r\ncount_digits(123456789,123456)\r\ncount_digits(123456789,12345)\r\ncount_digits(123456789,1234)\r\ncount_digits(123456789,123)\r\ncount_digits(123456789,12)\r\ncount_digits(123456789,1)\r\n```\r\n## 2.3.14 String to Integer (atoi)\r\n```python\r\nstring = input('Enter a string: ')\r\nif string.isdigit():\r\n    print(int(string))\r\nelse:\r\n    print('not a digit')\r\n```\r\n## 2.3.15 String to Float (atof)\r\n```python\r\nstring = input('Enter a string: ')\r\nif string.isnumeric():\r\n    print(float(string))\r\nelse:\r\n    print('not a number')\r\n```\r\n## 2.3.16 String Splitting\r\n```python\r\nstring ","votes":null},{"text":"\r\n    sum = num1+num2\r\n    num_digits = 0\r\n    while(sum >= 10):\r\n        sum = sum\/\/10\r\n        num_digits += 1\r\n    print(num_digits)\r\n    return num_digits\r\n\r\n\r\n# Driver Code\r\nnum1 = 123456789\r\nnum2 = 876543210\r\nprint(count_digits(num1, num2))\r\n","votes":null},{"text":"\r\n    digits = 0\r\n    while num1 > 0 or num2 > 0:\r\n        num = num1 + num2\r\n        num1 = num \/\/ 10\r\n        num2 = num % 10\r\n        digits += 1\r\n    return digits\r\n\r","votes":null},{"text":"\r\n    count=0\r\n    while(num1>0 or num2>0):\r\n        if(num1>0):\r\n            count+=1\r\n        if(num2>0):\r\n            count+=1\r\n        num1,num2=num1\/\/10,num2\/\/10\r\n    return count\r\n\r\nprint(count_digits(1234567890,9876543210))\r\n","votes":null},{"text":"\r\n    sum=num1+num2\r\n    print(sum)\r\n    s=str(sum)\r\n    print(\"no of digits in sum is \",len(s))\r\n\r\ncount_digits(123,456)","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(len(str(num1))+len(str(num2))):\r\n        sum += int(str(num1)[i]) + int(str(num2)[i])\r\n    print(sum)\r\n\r\nif __name__ == '__main__':\r\n    count_digits(100,100)","votes":null},{"text":"\r\n    if num1>=10:\r\n        num1=num1\/\/10\r\n    else:\r\n        num1=10\r\n    if num2>=10:\r\n        num2=num2\/\/10\r\n    else:\r\n        num2=10\r\n    if num1==num2:\r\n        print(\"Sum is equal to zero\")\r\n    else:\r\n        num1=num1+num2\r\n        if num1>=10:\r\n            count_digits(num1,num2+1)\r\n        else:\r\n            print(\"Sum is equal to \",num1)\r\n\r\n","votes":null},{"text":"\r\n    sum_digits = 0\r\n    if num1 >= 10:\r\n        sum_digits += 1\r\n    if num2 >= 10:\r\n        sum_digits += 1\r\n    if num1 + num2 >= 10:\r\n        sum_digits += 1\r\n    count = 0\r\n    while num1 >= 10:\r\n        num1 \/\/= 10\r\n        count += 1\r\n    while num2 >= 10:\r\n        num2 \/\/= 10\r\n        count += 1\r\n    while num1 + num2 >= 10:\r\n        num1 += 1\r\n        num2 += 1\r\n        count += 1\r\n    print(sum_digits, count)\r\n\r\ncount_digits(123,456)\r\n","votes":null},{"text":"\r\n    sum = num1+num2\r\n    print(len(str(sum)))\r\n\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"Main.\"\"\"\r\n    count_digits(12,3)\r\n    count_digits(123,45)\r\n    count_digits(1234,567)\r\n","votes":null},{"text":"\r\n    sum = num1+num2\r\n    count = 0\r\n    while sum > 0:\r\n        sum, remainder = divmod(sum,10)\r\n        count += 1\r\n    print(count)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num1 = int(input(\"Enter first number: \"))\r\n    num2 = int(input(\"Enter second number: \"))\r\n    count_digits(num1,num2)\r\n","votes":null},{"text":"\r\n    count1 = num1\r\n    count2 = num2\r\n    digits = 0\r\n    while count1 > 0:\r\n        count1 = count1 \/\/ 10\r\n        digits += 1\r\n    while count2 > 0:\r\n        count2 = count2 \/\/ 10\r\n        digits += 1\r\n    return digits\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    num1 = 30\r\n    num2 = 45\r\n    print(\"Number of digits of sum of %d and %d is : %d\" %(num1, num2, count_digits(num1, num2)))\r\n```\r\n","votes":null},{"text":"\r\n    num1=int(num1)\r\n    num2=int(num2)\r\n    sum=num1+num2\r\n    if sum==0:\r\n        return 1\r\n    if sum>0:\r\n        return count_digits(sum\/\/10,sum%10)+1\r\n    \r\n\r\nprint(count_digits(123456789,0))\r\nprint(count_digits(123456789,123456789))","votes":null},{"text":"\r\n    if num1>num2:\r\n        num=num1\r\n    else:\r\n        num=num2\r\n    sum=0\r\n    while num>0:\r\n        sum+=1\r\n        num\/\/=10\r\n    return sum\r\n\r\n\r\nprint(count_digits(int(input(\"Enter first number: \")),int(input(\"Enter second number: \"))))","votes":null},{"text":"\r\n    num1_len=len(str(num1))\r\n    num2_len=len(str(num2))\r\n    if num1_len>num2_len:\r\n        for i in range(num1_len-num2_len):\r\n            num1=num1*10\r\n    elif num1_len<num2_len:\r\n        for i in range(num2_len-num1_len):\r\n            num2=num2*10\r\n    sum=num1+num2\r\n    print(sum)\r\n    return sum\r\n\r\n# test_input=int(input(\"Enter number 1: \"))\r\n# test_input2=int(input(\"Enter number 2: \"))\r\n# count_digits(test_input,test_input2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num1 and num2:\r\n        if len(str(num1))+ len(str(num2)) == 1:\r\n            return 1\r\n        else:\r\n            return 1 + count_digits(num1\/\/10,num2\/\/10)\r\n    else:\r\n        return 0\r\n\r","votes":null},{"text":"\r\n    sum = num1+num2\r\n    print(sum,end='')\r\n    count = 0\r\n    while sum>0:\r\n        count += 1\r\n        sum \/\/= 10\r\n    print(count)\r\n\r\n\r\ncount_digits(123456789,987654321)\r\n\r\n# -\r\n\r\n# ### 4.2 Reverse String\r\n# Write a function named reverse that takes a string as an input and returns the reverse of the string.\r\n#\r\n# Examples:\r\n#\r\n# ```\r\n# reverse('hello')         # returns: oolleh\r\n# reverse('abracadabra')  # returns: rabdacarba\r\n# ```\r\n#\r\n# Hint: Use the string slicing operator [ ] and the string method [::-1]\r\n\r\n# +\r","votes":null},{"text":"\r\n    sum_digits = 0\r\n    while num1>0:\r\n        sum_digits += 1\r\n        num1 \/\/= 10\r\n    while num2>0:\r\n        sum_digits += 1\r\n        num2 \/\/= 10\r\n    print(sum_digits)\r\n\r\nif __name__ == '__main__':\r\n    count_digits(2456,24567)\r\n    count_digits(2456,87654)\r\n    count_digits(2456,54987)\r\n    count_digits(2456,98765)\r\n","votes":null},{"text":"\r\n    if num2>10:\r\n        return count_digits(num1+1,num2\/\/10)+1\r\n    else:\r\n        return count_digits(num1+1,num2*10)+1\r\n\r\nprint(count_digits(1,9))\r\nprint(count_digits(10,10))\r\nprint(count_digits(10,11))\r\n","votes":null},{"text":"\r\n\r\n    if num1<0:\r\n        neg=True\r\n    else:\r\n        neg=False\r\n\r\n    if num2<0:\r\n        neg2=True\r\n    else:\r\n        neg2=False\r\n\r\n    if neg and neg2:\r\n        num1=num1*(-1)\r\n        num2=num2*(-1)\r\n\r\n    if num1==0:\r\n        num1=1\r\n\r\n    if num2==0:\r\n        num2=1\r\n\r\n    num1_digits=len(str(num1))\r\n    num2_digits=len(str(num2))\r\n\r\n    sum=num1+num2\r\n\r\n    return sum,num1_digits,num2_digits\r\n\r\nsum,num1_digits,num2_digits=count_digits(int(input(\"Enter first number: \")),int(input(\"Enter second number: \")))\r\n\r\nprint(sum,\"+\",num1_digits,\"+\",num2_digits,\"=\",len(str(sum)),\"digits.\")\r\n","votes":null},{"text":"\r\n    sum = num1+num2\r\n    count = 0\r\n    while sum > 0:\r\n        count += 1\r\n        sum \/\/= 10\r\n    return count\r\n\r\nn1 = int(input(\"Enter first number: \"))\r\nn2 = int(input(\"Enter second number: \"))\r\nprint(count_digits(n1,n2))\r\n","votes":null},{"text":"\r\n    x = str(num1)\r\n    y = str(num2)\r\n    if x == \"0\":\r\n        return len(y)\r\n    elif y == \"0\":\r\n        return len(x)\r\n    elif x[0] == \"0\":\r\n        return count_digits(x[1:],y)\r\n    elif y[0] == \"0\":\r\n        return count_digits(x,y[1:])\r\n    elif x[0] == y[0]:\r\n        return count_digits(x[1:],y[1:])\r\n    else:\r\n        return 1 + max(count_digits(x[1:],y),count_digits(x,y[1:]))\r\n\r\nprint(count_digits(1234,5678))\r\nprint(count_digits(0,0))\r\nprint(count_digits(123,0))\r\nprint(count_digits(0,123))\r\nprint(count_digits(123,123))\r\nprint(count_digits(123,456))\r\nprint(count_digits(456,123))","votes":null},{"text":"\r\n    digit1 = len(str(num1))\r\n    digit2 = len(str(num2))\r\n    return digit1+digit2\r\n\r\n# Function to check if a number is prime or not\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(len(num1)):\r\n        i1=num1[i]\r\n        i2=num2[i]\r\n        if i1>i2:\r\n            count+=1\r\n        elif i1<i2:\r\n            count+=1\r\n    return(count)\r","votes":null},{"text":"\r\n    digits = 0\r\n    while num1:\r\n        num1 \/\/= 10\r\n        digits += 1\r\n    while num2:\r\n        num2 \/\/= 10\r\n        digits += 1\r\n    return digits\r\n\r\nprint(count_digits(1234567, 1234567))","votes":null},{"text":"\r\n    if num1==0 or num2==0:\r\n        return 0\r\n    if num1==1:\r\n        return 1\r\n    if num2==1:\r\n        return 1\r\n    if num1==num2:\r\n        return 1\r\n    if num1>num2:\r\n        return count_digits(num1-num2,num2)+1\r\n    else:\r\n        return count_digits(num2-num1,num1)+1\r\n\r","votes":null},{"text":"\r\n    #num1 & num2 are numbers\r\n    #sum = num1 + num2\r\n    #print(len(str(sum))) #len(str(sum)) returns number of digits of sum\r\n    \r\n    #return len(str(sum)) #len(str(sum)) returns number of digits of sum\r\nprint(count_digits(10,20)) #12\r\nprint(count_digits(100,200)) #22\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    while(sum>0):\r\n        count+=1\r\n        sum=sum\/\/10\r\n    print(count)\r\n\r\nnum1=int(input('Enter the first number: '))\r\nnum2=int(input('Enter the second number: '))\r\ncount_digits(num1,num2)\r\n","votes":null},{"text":"\r\n    digits1 = len(str(num1))\r\n    digits2 = len(str(num2))\r\n    return digits1+digits2\r\n\r","votes":null},{"text":"\r\n    x = 0\r\n    while num1>0:\r\n        x += 1\r\n        num1 = num1\/\/10\r\n    while num2>0:\r\n        x += 1\r\n        num2 = num2\/\/10\r\n    return x\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    num_of_digits=0\r\n    while sum>0:\r\n        sum,rem=divmod(sum,10)\r\n        num_of_digits+=1\r\n    print(num_of_digits)\r\n    \r\ncount_digits(10,5)\r\ncount_digits(100,10)\r\ncount_digits(1000,100)\r\ncount_digits(10000,1000)\r\ncount_digits(100000,10000)\r\ncount_digits(1000000,100000)\r\ncount_digits(10000000,1000000)\r\ncount_digits(100000000,10000000)\r\ncount_digits(1000000000,100000000)\r\ncount_digits(10000000000,1000000000)\r\ncount_digits(100000000000,10000000000)\r\ncount_digits(1000000000000,100000000000)\r\ncount_digits(10000000000000,1000000000000)\r\ncount_digits(100000000000000,10000000000000)\r\ncount_digits(1000000000000000,100000000000000)\r\ncount_digits(10000000000000000,1000000000000000)\r\ncount_digits(100000000","votes":null},{"text":"\r\n    if num1>num2:\r\n        num1,num2=num2,num1\r\n    sum=0\r\n    while num1>0:\r\n        sum+=num1%10\r\n        num1\/\/=10\r\n    while num2>0:\r\n        sum+=num2%10\r\n        num2\/\/=10\r\n    print(sum)\r\n    return sum\r\n\r\ncount_digits(5,87)\r\ncount_digits(5,34)\r\n\r\n# + [markdown] id=\"hI85Y6F5KQ3Y\" colab_type=\"text\"\r\n# # 6.11.3.2\r\n#\r\n# The function `count_digits` takes two arguments, `num1` and `num2`. The function finds the sum of `num1` and `num2` and prints the number of digits of sum.\r\n#\r\n# -\r\n#\r\n# ```\r\n# 5 87\r\n# 5 34\r\n# 15\r\n# ```\r\n#\r\n# **Exercise 6.11.3.2**\r\n#\r\n# Write a function to find the sum of two integers `a` and `b` and print the number of digits of sum.\r\n#\r\n# ```\r\n# 5 87\r\n# 5 34\r\n# 15\r\n# ```\r\n#\r\n# -\r\n#\r\n# ```\r\n# 5 87\r\n# 5 34\r\n# 15\r\n# ```\r\n#\r\n# **Exercise 6.11.3.3**\r\n#\r\n# Write a function to find the sum of the digits of a number and print the number of digits of sum.\r\n#\r\n# ```\r\n# 5 87\r\n# 5 34\r\n# 15\r\n# ```\r\n#\r\n# -\r\n#\r\n# ```\r\n# 5 87\r\n# 5 34\r\n# 15\r\n# ```\r\n#\r\n# # 6.11","votes":null},{"text":"\r\n\r\n    if num1 < num2:\r\n        num1,num2 = num2,num1\r\n    while num1!= 0:\r\n        num1 \/\/= 10\r\n    return num2\r\n\r\nprint(count_digits(12345,67890))\r\n\"\"\"\r\nOutput:\r\n5\r\n\"\"\"","votes":null},{"text":"\r\n    #print(num1,num2)\r\n    if num1<0:\r\n        num1*=-1\r\n    if num2<0:\r\n        num2*=-1\r\n    if num1==0 and num2==0:\r\n        print(0)\r\n        return\r\n    if num1>num2:\r\n        num1,num2=num2,num1\r\n    if num1==0:\r\n        num1=1\r\n    if num2==0:\r\n        num2=1\r\n    count=0\r\n    while num1>0:\r\n        count+=1\r\n        num1\/\/=10\r\n    while num2>0:\r\n        count+=1\r\n        num2\/\/=10\r\n    print(count)\r\n\r\nif __name__ == \"__main__\":\r\n    count_digits(10, 5)\r\n    count_digits(100, 0)\r\n    count_digits(0, 100)\r\n    count_digits(1, 1)\r\n    count_digits(1000, 1)\r\n    count_digits(1, 1000)\r\n    count_digits(10000, 1000)\r\n    count_digits(100000, 1000)\r\n    count_digits(1000000, 1000)\r\n    count_digits(0, 0)\r\n    count_digits(1, 0)\r\n    count_digits(0, 1)\r\n    count_digits(1, 10)\r\n    count_digits(1, 100000)\r\n    count_digits(100000, 1000000)","votes":null},{"text":"\r\n    while num1>0 or num2>0:\r\n        num1,num2=num1\/\/10,num2\/\/10\r\n    return num2+num1\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    print(f'The sum of {num1} and {num2} is {sum}.')\r\n    while sum\/\/10!=0:\r\n        sum=sum\/\/10\r\n        print(sum)\r\n    print(f'The sum of {num1} and {num2} is {sum}.')\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 1\r\n    while sum \/\/ 10 > 0:\r\n        sum \/\/= 10\r\n        count += 1\r\n    return count\r\n\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654321))\r\nprint(count_digits(123456789,987654","votes":null},{"text":"\r\n    num1 = str(num1)\r\n    num2 = str(num2)\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(len(num1)):\r\n        sum1 += int(num1[i])\r\n    for j in range(len(num2)):\r\n        sum2 += int(num2[j])\r\n    print(sum1 + sum2)\r\n\r\nif __name__ == '__main__':\r\n    print('Add two numbers and print number of digits of sum:')\r\n    num1 = int(input('Enter first number: '))\r\n    num2 = int(input('Enter second number: '))\r\n    count_digits(num1,num2)\r\n\r\n# + id=\"380w5d6t-96n\" colab_type=\"code\" colab={}\r\n","votes":null},{"text":"\r\n    if num1 == 0 or num2 == 0:\r\n        return 1\r\n    else:\r\n        return count_digits(num1 \/\/ 10, num2 \/\/ 10) + 1\r\n\r","votes":null},{"text":"\r\n    if num1 == 0:\r\n        return 1\r\n    elif num2 == 0:\r\n        return 1\r\n    else:\r\n        if num1 < 10:\r\n            summ = num1\r\n        else:\r\n            summ = num1 + count_digits(num1\/\/10,num2\/\/10)\r\n        return summ\r\n\r","votes":null},{"text":"\r\n    if num1==0:\r\n        return num2\r\n    elif num2==0:\r\n        return num1\r\n    else:\r\n        return (count_digits(num1\/\/10,num2\/\/10)+count_digits(num1%10,num2%10))\r\n\r\n\r\n\r\nprint(count_digits(123456,234567))\r\nprint(count_digits(123,0))\r\n","votes":null},{"text":"\r\n    #code\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    \r\n    if num1 > num2:\r\n        num1 = num1 - num2\r\n        num2 = num2 + num1\r\n        num1 = num1 - num2\r\n    elif num1 < num2:\r\n        num2 = num2 - num1\r\n        num1 = num1 + num2\r\n        num2 = num2 - num1\r\n        \r\n    while num2!= 0:\r\n        num2 = num2 \/\/ 10\r\n        digit = num2 % 10\r\n        count += digit\r\n    return count\r\nprint(count_digits(123,456))\r\nprint(count_digits(123456789,123456789))\r\n","votes":null},{"text":"\r\n    if num1>num2:\r\n        num1,num2=num2,num1\r\n    digits=0\r\n    while num1>0:\r\n        num1\/\/=10\r\n        digits+=1\r\n    return digits\r\n\r","votes":null},{"text":"\r\n    num1=str(num1)\r\n    num2=str(num2)\r\n    sum=0\r\n    if len(num1)>len(num2):\r\n        for i in range(len(num2)):\r\n            sum+=int(num2[i])\r\n    else:\r\n        for i in range(len(num1)):\r\n            sum+=int(num1[i])\r\n    print(sum)\r\n\r\n\r\nif __name__ == '__main__':\r\n    num1=int(input(\"Enter the first number:\"))\r\n    num2=int(input(\"Enter the second number:\"))\r\n    count_digits(num1,num2)\r\n","votes":null},{"text":"\r\n    max_num = 10\r\n    if num1>max_num:\r\n        num1 = max_num\r\n    if num2>max_num:\r\n        num2 = max_num\r\n    count = 0\r\n    while num1!=0 or num2!=0:\r\n        num1,num2 = num1\/\/10,num2\/\/10\r\n        count += 1\r\n    return count\r\ncount_digits(123,456)\r\n'''\r\nThe above function returns 4 because 123+456 = 579 which is 9 digits.\r\n'''\r\n'''\r\nWrite a function to find the sum of all the digits in a number.\r\nIf the number is an empty string, return 0.\r\n'''\r","votes":null}],"time":{"count":23.0,"avg":108580.3153043478,"std":28678.7124463277,"cov":0.2641244167}}
{"id":548,"question":"def longest_increasing_subsequence(arr):\r\n    \"\"\"Write a function to find the length of the longest increasing subsequence of the given sequence.\"\"\"","answers":[{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    elif len(arr) == 1:\r\n        return 1\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r","votes":112689.044},{"text":"\r\n    # Write your code here\r\n    n = len(arr)\r\n    if n <= 1:\r\n        return 1\r\n    max_length = 1\r\n    length_list = [1] * n\r\n    for i in range(1, n):\r\n        curr_length = 1\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                curr_length = max(length_list[j] + 1, curr_length)\r\n        length_list[i] = curr_length\r\n        max_length = max(curr_length, max_length)\r\n    return max_length\r\n\r\n\r","votes":120932.788},{"text":"\r\n    length = len(arr)\r\n    dp = [1] * length\r\n    for i in range(1, length):\r\n        dp[i] = 1\r\n        for j in range(i-1, -1, -1):\r\n            if arr[i] > arr[j] and dp[j]+1 > dp[i]:\r\n                dp[i] = dp[j]+1\r\n    return max(dp)\r\n\r\n\r","votes":126440.484},{"text":"\r\n\r\n    dp = [1] * len(arr)\r\n\r\n    for i in range(1, len(arr)):\r\n        dp[i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[j] + 1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n\r\n    return max(dp)\r\n\r\n\r\nprint(longest_increasing_subsequence([2, 3, 5, 7, 1, 9, 4, 6, 8]))\r\n","votes":129079.672},{"text":"\r\n\r\n    # Write your code here.\r\n    length = 0\r\n    dp = [0] * len(arr)\r\n    for i in range(len(arr)):\r\n        dp[i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[j] + 1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n        if dp[i] > length:\r\n            length = dp[i]\r\n    return length\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]))\r\n","votes":132367.908},{"text":"\r\n    if(len(arr) == 0):\r\n        return 0\r\n    dp = [1] * len(arr)\r\n    dp[0] = 1\r\n    cur = 1\r\n    for i in range(1, len(arr)):\r\n        dp[i] = 1\r\n        for j in range(0, i):\r\n            if(arr[i] > arr[j] and dp[j] + 1 > dp[i]):\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [3, 5, 6, 2, 4, 1, 7, 8, 9]\r\n    print(longest_increasing_subsequence(arr))","votes":136929.424},{"text":"\r\n    dp = [1] * len(arr)\r\n    maxLen = 0\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n                maxLen = max(maxLen, dp[i])\r\n    return maxLen\r\n\r\n\r","votes":139954.552},{"text":"\r\n    n = len(arr)\r\n    if n == 0 or n == 1:\r\n        return 1\r\n    dp = [1] * n\r\n    max_len = 1\r\n    for i in range(1, n):\r\n        dp[i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[j] + 1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n        max_len = max(max_len, dp[i])\r\n    return max_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    assert longest_increasing_subsequence([1, 2, 3, 4, 5]) == 5\r\n    assert longest_increasing_subsequence([5, 4, 3, 2, 1]) == 5\r\n    assert longest_increasing_subsequence([1, 3, 5, 7, 9]) == 3\r\n    assert longest_increasing_subsequence([-1, -3, -5, -7, -9]) == 3\r\n","votes":148234.176},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [1 for i in range(len(arr))]\r\n    lis = [arr[0]]\r\n    for i in range(1, len(arr)):\r\n        dp[i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n        lis.append(arr[i])\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n    doctest.testmod()\r\n","votes":148738.496},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [1] * len(arr)\r\n\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r","votes":148966.36},{"text":"\r\n    n = len(arr)\r\n    if n == 0:\r\n        return 0\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        dp[i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6]))\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7]))\r\nprint(longest_increasing_subsequence([1, 3, 5, 6, 7, 9]))\r\n","votes":148968.32},{"text":"\r\n    if len(arr) == 0 or len(arr) == 1:\r\n        return 1\r\n\r\n    dp = [1 for _ in range(len(arr))]\r\n    max_length = 1\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j]+1)\r\n                if dp[i] > max_length:\r\n                    max_length = dp[i]\r\n\r\n    return max_length\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    print(longest_increasing_subsequence(arr))\r\n","votes":157039.18},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    if len(arr) == 1:\r\n        return 1\r\n    l = [1]*len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and l[i] < l[j] + 1:\r\n                l[i] = l[j] + 1\r\n    return max(l)\r\n\r\n\r","votes":159272.924},{"text":"\r\n\r\n    # Write your code here.\r\n    if not arr:\r\n        return 0\r\n\r\n    n = len(arr)\r\n    dp = [0] * n\r\n    dp[0] = 1\r\n    for i in range(1, n):\r\n        dp[i] = 1\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                if dp[i] < dp[j] + 1:\r\n                    dp[i] = dp[j] + 1\r\n    max_len = 0\r\n    for i in range(n):\r\n        max_len = max(max_len, dp[i])\r\n    return max_len\r\n\r\n\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(longest_increasing_subsequence([1, 2, 5, 3, 4, 5]))\r\nprint(longest_increasing_subsequence([1, 3, 5, 7, 9]))\r\n","votes":173417.6},{"text":"\r\n    if not arr:\r\n        return 0\r\n    n = len(arr)\r\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\r\n    for i in range(1, n + 1):\r\n        for j in range(1, n + 1):\r\n            if arr[i - 1] < arr[j - 1] and dp[i][j - 1] + 1 > dp[i][j]:\r\n                dp[i][j] = dp[i][j - 1] + 1\r\n    return max(max(dp[i][j] for j in range(1, n + 1)) for i in range(1, n + 1))\r\n\r\n\r\n# Time: O(n^2)\r\n# Space: O(n^2)\r","votes":187567.808},{"text":"\r\n    # Create an array of all possible lengths\r\n    lengths = [1] * len(arr)\r\n\r\n    # Calculate the lengths of the subsequences\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            # If the item in the current position is bigger than the item in the previous position then\r\n            # update the length of the subsequence\r\n            if arr[i] > arr[j] and lengths[i] < lengths[j] + 1:\r\n                lengths[i] = lengths[j] + 1\r\n\r\n    # The result is the length of the subsequence with the largest length\r\n    return max(lengths)\r\n\r\n\r","votes":190183.944},{"text":"\r\n    # The idea is to create a dictionary to store the length of subsequences for each element in the sequence\r\n    # The length of the subsequence is the longest one\r\n    length_of_subsequences = {}\r\n    # The max length of the longest subsequence is 1\r\n    length_of_longest_subsequence = 1\r\n    # The key to the dictionary is the index of the element in the sequence\r\n    # And the value is the length of the subsequence\r\n    for index in range(len(arr)):\r\n        length_of_subsequences[index] = 1\r\n        # Find the longest subsequence ending with current element\r\n        for j in range(index):\r\n            if arr[index] > arr[j] and length_of_subsequences[j] + 1 > length_of_subsequences[index]:\r\n                length_of_subsequences[index] = length_of_subsequences[j] + 1\r\n        # If the length of the subsequence is longer than the current one\r\n        if length_of_subsequences[index] > length_of_longest_subsequence:\r\n            length_of_longest_subsequence = length_of_subsequences[index]\r\n    return length_of_longest_subsequence\r\n\r\n# Driver code to test above function\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nprint(longest_increasing_subsequence(arr))","votes":224894.608},{"text":"\r\n    if len(arr) == 1:\r\n        return 1\r\n    elif len(arr) == 2:\r\n        return 2\r\n    else:\r\n        max_length = 1\r\n        for i in range(1, len(arr)):\r\n            if arr[i] > arr[i - 1]:\r\n                max_length += 1\r\n            else:\r\n                max_length = max(max_length, longest_increasing_subsequence(arr[:i]))\r\n        return max_length\r\n\r\n\r","votes":228057.912},{"text":"\r\n    # Write code here\r\n    n = len(arr)\r\n    if n == 1:\r\n        return 1\r\n    dp = [1 for i in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 15, 20, 25, 30, 35, 40, 45, 50]\r\n    print(longest_increasing_subsequence(arr))\r\n","votes":230750.052},{"text":"\r\n    length = len(arr)\r\n    if length == 0:\r\n        return 0\r\n    if length == 1:\r\n        return 1\r\n    if length == 2:\r\n        return 2\r\n    dp = [[0 for _ in range(length)] for _ in range(length)]\r\n    dp[0][0] = 1\r\n    dp[0][1] = 1\r\n    dp[1][0] = 1\r\n    dp[1][1] = 1\r\n    dp[2][0] = 0\r\n    dp[2][1] = 2\r\n    for i in range(3, length):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                if dp[j][0] + 1 > dp[i][0]:\r\n                    dp[i][0] = dp[j][0] + 1\r\n                if dp[j][1] + 1 > dp[i][1]:\r\n                    dp[i][1] = dp[j][1] + 1\r\n    return max(dp[length - 1])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]))\r\n    print(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\n    print(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18, 10, 9, 2, 5, 3, 7, 101, 18]))\r\n","votes":245295.312},{"text":"\r\n    n = len(arr)\r\n    dp = [0]*n\r\n    dp[0] = 1\r\n    for i in range(1,n):\r\n        dp[i] = 1\r\n        for j in range(i-1,-1,-1):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], 1 + dp[j])\r\n    # print(dp)\r\n    max_len = 0\r\n    for i in range(n):\r\n        if dp[i] > max_len:\r\n            max_len = dp[i]\r\n    return max_len\r\n\r\nif __name__ == \"__main__\":\r\n    print(longest_increasing_subsequence([10,22,9,33,21,50,41,60]))\r\n","votes":246489.3},{"text":"\r\n    # Initialize\r\n    dp = [1] * len(arr)\r\n\r\n    # Traverse\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n\r\n    # Find the maximum\r\n    max_len = 0\r\n    for i in range(len(dp)):\r\n        if dp[i] > max_len:\r\n            max_len = dp[i]\r\n\r\n    return max_len\r\n\r\n\r","votes":272195.36},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    if len(arr) == 1:\r\n        return 1\r\n    dp = [1] * len(arr)\r\n    # dp[i] is the length of the longest increasing subsequence of arr[0:i]\r\n    # dp[i] = 1 if arr[i] is the first element in the subsequence\r\n    # dp[i] = dp[j] + 1 if arr[i] is the same as arr[j]\r\n    # dp[i] = max(dp[j] + 1) if arr[i] is different than arr[j]\r\n    for i in range(1, len(arr)):\r\n        dp[i] = 1\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[j] + 1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(longest_increasing_subsequence(arr))\r\n","votes":317706.6},{"text":"\r\n    if not arr or len(arr) == 1:\r\n        return 1\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        dp[i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    print(longest_increasing_subsequence(arr))\r\n    print(longest_increasing_subsequence([10, 22, 9]))\r\n","votes":323134.54},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [1]*len(arr)\r\n    for i in range(1,len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\nif __name__ == '__main__':\r\n    print(longest_increasing_subsequence([1, 2, 2, 3, 4, 5, 6]))\r\n    print(longest_increasing_subsequence([1, 5, 2, 3, 4, 5, 6]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7]))\r\n    print(longest_increasing_subsequence([1, 5, 6, 7]))\r\n    print(longest_increasing_subsequence([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5]))\r\n","votes":382732.712},{"text":"\r\n    dp = [[0 for _ in range(len(arr))] for _ in range(len(arr))]\r\n    dp[0][0] = 1\r\n    max_length = 1\r\n    for i in range(1, len(arr)):\r\n        for j in range(len(arr)):\r\n            if arr[i] > arr[j]:\r\n                dp[i][j] = dp[i][j - 1] if dp[i][j - 1] + 1 > dp[i - 1][j] else dp[i - 1][j]\r\n            else:\r\n                dp[i][j] = dp[i][j - 1]\r\n    for i in range(len(dp)):\r\n        if max_length < dp[i][i]:\r\n            max_length = dp[i][i]\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    assert longest_increasing_subsequence([]) == 0\r\n    assert longest_increasing_subsequence([1]) == 1\r\n    assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\r\n    assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\r\n    assert longest_increasing_subsequence([1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3\r\n    assert longest_increasing_subsequence([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 21\r\n","votes":null},{"text":"\r\n    # base case\r\n    if len(arr) == 0:\r\n        return 0\r\n    # initialize result\r\n    result = 1\r\n    # traverse the array\r\n    for i in range(1, len(arr)):\r\n        # check if arr[i] is greater\r\n        # than the previous elements\r\n        for j in range(0, i):\r\n            if arr[j] < arr[i]:\r\n                break\r\n        else:\r\n            result = max(result, i + 1)\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # print(longest_increasing_subsequence([10,22,9,33,21,50,41,60]))\r\n    print(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 7, 8]))\r\n","votes":null},{"text":"\r\n    # Set the first item as the current best answer\r\n    best_answer = 1\r\n\r\n    # Iterate over all the elements of the given sequence\r\n    for i in range(len(arr)):\r\n\r\n        # For each element, compare it with all the other elements\r\n        for j in range(0, i):\r\n            # If the element is less than the current best, update the current best\r\n            if arr[i] < arr[j]:\r\n                best_answer = max(best_answer, j - i + 1)\r\n\r\n    return best_answer\r\n\r\n\r\n# Driver Code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    # TODO: Implement the function\r\n    # Hint: You may want to use the Dynamic Programming approach.\r\n    # TODO: Write your function here\r\n    # TODO: return the length of the longest increasing subsequence\r\n    \r\n    \r\n    \r\n    # find the length of the subsequence with a length 1\r\n    # find the length of the subsequence with a length 2\r\n    # find the length of the subsequence with a length 3\r\n    # find the length of the subsequence with a length 4\r\n    # find the length of the subsequence with a length 5\r\n    # find the length of the subsequence with a length 6\r\n    # find the length of the subsequence with a length 7\r\n    # find the length of the subsequence with a length 8\r\n    # find the length of the subsequence with a length 9\r\n    # find the length of the subsequence with a length 10\r\n    # find the length of the subsequence with a length 11\r\n    # find the length of the subsequence with a length 12\r\n    # find the length of the subsequence with a length 13\r\n    # find the length of the subsequence with a length 14\r\n    # find the length of the subsequence with a length 15\r\n    # find the length of the subsequence with a length 16\r\n    # find the length of the subsequence with a length 17\r\n    # find the length of the subsequence with a length 18\r\n    # find the length of the subsequence with a length 19\r\n    # find the length of the subsequence with a length 20\r\n    # find the length of the subsequence with a length 21\r\n    # find the length of the subsequence with a length 22\r\n    # find the length of the subsequence with a length 23\r\n    # find the length of the subsequence with a length 24\r\n    # find the length of the subsequence with a length 25\r\n    # find the length of the subsequence with a length 26\r\n    # find the length of the subsequence with a length 27\r\n    # find the length of the subsequence with a length 28\r\n    # find the length of the subsequence with a length 29\r\n    # find the length of the subsequence with ","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [[0] * n for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n        for j in range(i-1, -1, -1):\r\n            if arr[j] < arr[i]:\r\n                dp[i][j] = 1 + dp[i][j+1] if dp[i][j+1] > dp[i][j] else dp[i][j+1]\r\n    res = 0\r\n    for i in range(n):\r\n        res = max(res, dp[i][i])\r\n    return res\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(longest_increasing_subsequence(arr))","votes":null},{"text":"\r\n    if arr is None or len(arr) == 0:\r\n        return 0\r\n    arr.sort()\r\n    n = len(arr)\r\n    dp = [1]*n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    if len(arr) == 1:\r\n        return 1\r\n    dp = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\nprint(longest_increasing_subsequence([1, 3, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,","votes":null},{"text":"\r\n\r\n    # Initialize the result\r\n    len_longest_subsequence = 0\r\n\r\n    # Initialize the result array\r\n    result = []\r\n\r\n    # Traverse through the given array\r\n    for i in range(len(arr)):\r\n\r\n        # Initialize the counter\r\n        counter = 0\r\n\r\n        # Traverse through the given array\r\n        for j in range(i + 1, len(arr)):\r\n\r\n            # Check if the current array element is greater than the next array element\r\n            if arr[i] < arr[j]:\r\n\r\n                # Increment the counter\r\n                counter += 1\r\n\r\n        # If the current counter is greater than the result\r\n        if counter > len_longest_subsequence:\r\n\r\n            # Update the length of the longest subsequence\r\n            len_longest_subsequence = counter\r\n\r\n            # Initialize the length of the result\r\n            length_of_result = len(result)\r\n\r\n            # Initialize the result array\r\n            result = []\r\n\r\n            # Traverse through the given array\r\n            for k in range(i + 1, i + len_longest_subsequence + 1):\r\n\r\n                # Append the current element of the given array\r\n                result.append(arr[k])\r\n\r\n    # Return the result\r\n    return len_longest_subsequence\r\n\r\n\r\n# Driver Code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n\r\nprint(\"Length of the LIS is \", longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    length = 1\r\n    max_length = 1\r\n    for i in range(len(arr)):\r\n        if arr[i] > arr[i - 1]:\r\n            length += 1\r\n            if length > max_length:\r\n                max_length = length\r\n        else:\r\n            length = 1\r\n    return max_length\r\n\r\n\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 5, 6, 7, 8]))  # 5\r\nprint(longest_increasing_subsequence([1, 2, 3, 4]))  # 1\r\nprint(longest_increasing_subsequence([1, 2, 3, 5, 4, 7, 6]))  # 5\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]))  # 6\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12]))  # 7\r\nprint(longest_increasing_subsequence([]) == 0)  # true\r\nprint(longest_increasing_subsequence([1]) == 1)  # true\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    if not arr:\r\n        return 0\r\n    n = len(arr)\r\n    res = 1\r\n    for i in range(n):\r\n        if i == 0:\r\n            res = 1\r\n            for j in range(1, n):\r\n                if arr[j] > arr[i]:\r\n                    res += 1\r\n        else:\r\n            res = max(res, 1 + longest_increasing_subsequence(arr[i:]))\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    arr_len = len(arr)\r\n    dp = [0] * arr_len\r\n    max_len = 1\r\n    max_ending = arr[0]\r\n\r\n    for i in range(1, arr_len):\r\n        dp[i] = 1\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n\r\n        if dp[i] > max_len:\r\n            max_len = dp[i]\r\n            max_ending = arr[i]\r\n\r\n    return max_len, max_ending\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 11, 12, 13, 14, 15]\r\n    print(\"Length: \", longest_increasing_subsequence(arr)[0])\r\n    print(\"Ending: \", longest_increasing_subsequence(arr)[1])\r\n","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    length = 1\r\n    for i in range(len(arr) - 1):\r\n        if arr[i] < arr[i+1]:\r\n            length += 1\r\n        else:\r\n            length = 1\r\n    return length\r\n\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80, 70]))\r\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\nprint(longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 10, 8, 2, 5, 11, 12, 13, 14, 15]))\r\nprint(longest_increasing_subsequence([1, 3, 10, 12, 13, 14, 15]))\r\nprint(longest_increasing_subsequence([1]))","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [1 for _ in range(len(arr))]\r\n    lis = [arr[0]]\r\n    for i in range(1, len(arr)):\r\n        dp[i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n                lis[i] = arr[j]\r\n    return max(dp), lis\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO\r\n    pass\r\n\r\nif __name__ == '__main__':\r\n    sequence = [1, 2, 3, 4, 5, 7, 9, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28]\r\n    print(longest_increasing_subsequence(sequence))\r\n    print(longest_increasing_subsequence(sequence[::-1]))\r\n    print(longest_increasing_subsequence(sequence[::2]))\r\n","votes":null},{"text":"\r\n    if len(arr) < 2:\r\n        return len(arr)\r\n\r\n    # This array will keep track of the subsequences' lengths.\r\n    # For example, if arr = [1, 2, 3, 4, 5, 6],\r\n    # then dp[0] = 1, dp[1] = 1, dp[2] = 2, dp[3] = 3, dp[4] = 4.\r\n    dp = [1] * len(arr)\r\n    prev = [0] * len(arr)\r\n\r\n    # Fill the array with the lengths of the subsequences.\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                prev[i] = j\r\n                dp[i] = dp[j] + 1\r\n\r\n    # Keep track of the length of the longest increasing subsequence.\r\n    max_length = 0\r\n    for i in range(len(arr)):\r\n        if dp[i] > max_length:\r\n            max_length = dp[i]\r\n\r\n    # Recursively compute the length of the longest increasing subsequence of\r\n    # the subsequence obtained after deleting the element at index i.\r\n    for i in range(len(arr)):\r\n        if prev[i]!= 0:\r\n            max_length = max(max_length, dp[i] + longest_increasing_subsequence(arr[:i] + arr[i + 1:]))\r\n\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(longest_increasing_subsequence([1, 2, 3, 4, 5, 6]))\r\n    print(longest_increasing_subsequence([1, 1, 1, 1, 1, 1]))\r\n    print(longest_increasing_subsequence([1, 2, 3]))\r\n    print(longest_increasing_subsequence([1, 3, 5, 4, 7, 2, 6, 8]))\r\n","votes":null},{"text":"\r\n    if len(arr)==0:\r\n        return 0\r\n    # for each element in the array\r\n    for i in range(len(arr)):\r\n        # find the index of the next element that is greater than the current element\r\n        for j in range(i+1,len(arr)):\r\n            # if the next element is greater than the current element\r\n            if arr[i]<arr[j]:\r\n                # increment the length of the longest increasing subsequence\r\n                arr[i]=arr[i]+arr[j]\r\n    # return the length of the longest increasing subsequence\r\n    return max(arr)\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    print(\"Length of Longest Increasing Subsequence is\",\r\n          longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    pass\r\n\r","votes":null},{"text":"\r\n    # Fill this in.\r\n    n = len(arr)\r\n    dp = [[0] * n for i in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n    for i in range(n-1):\r\n        for j in range(i+1, n):\r\n            if arr[i] <= arr[j]:\r\n                dp[i][j] = dp[i][j-1] + 1\r\n            else:\r\n                dp[i][j] = dp[i][j-1]\r\n    max_len = 0\r\n    for i in range(n):\r\n        if dp[i][n-1] >= max_len:\r\n            max_len = dp[i][n-1]\r\n    return max_len\r\n\r\n# Test cases\r\nassert longest_increasing_subsequence([1, 2, 1, 2, 1]) == 3\r\nassert longest_increasing_subsequence([1, 2, 1, 2]) == 2\r\nassert longest_increasing_subsequence([1, 2, 1]) == 1\r\nassert longest_increasing_subsequence([1, 2]) == 1\r\nassert longest_increasing_subsequence([]) == 0\r\n","votes":null},{"text":"\r\n    if not arr:\r\n        return 0\r\n    max_len = 1\r\n    # For each element in the array\r\n    for i in range(len(arr)):\r\n        # Find the length of the longest subarray ending at arr[i]\r\n        len_of_lisc = longest_increasing_subsequence(arr[:i] + arr[i+1:]) + 1\r\n        # Update the result if this is the longest so far\r\n        max_len = max(max_len, len_of_lisc)\r\n    return max_len\r\n\r\n# Driver Code\r\narr = [1,3,5,7,9]\r\nprint(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    else:\r\n        n = len(arr)\r\n        dp = [0 for _ in range(n)]\r\n        for i in range(n):\r\n            dp[i] = 1\r\n            for j in range(i):\r\n                if dp[j] == 1 and arr[j] < arr[i]:\r\n                    dp[i] = max(dp[i], dp[j] + 1)\r\n        return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(arr) < 2:\r\n        return 1\r\n    dp = [0] * len(arr)\r\n    dp[0] = 1\r\n    max_len = 1\r\n    for i in range(1, len(arr)):\r\n        max_len = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[j]+1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n                max_len = max(max_len, dp[i])\r\n    return max_len\r\n\r\n\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80, 70]))\r\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\n","votes":null},{"text":"\r\n    n = len(arr)\r\n    # Initialize LIS array\r\n    LIS = [[0] * n for i in range(n)]\r\n    for i in range(n):\r\n        LIS[i][i] = 1\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and LIS[j][i-1] + 1 > LIS[i][i]:\r\n                LIS[i][i] = LIS[j][i-1] + 1\r\n    return max(max(x) for x in LIS)\r\n\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))\r\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 10, 22, 9, 33, 21, 50, 41, 60]))\r\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))","votes":null},{"text":"\r\n    length = 0\r\n    longest_increasing_subsequence = []\r\n    for i in range(0, len(arr)):\r\n        if arr[i] not in longest_increasing_subsequence:\r\n            longest_increasing_subsequence.append(arr[i])\r\n        elif arr[i] in longest_increasing_subsequence:\r\n            longest_increasing_subsequence.remove(arr[i])\r\n            longest_increasing_subsequence.append(arr[i])\r\n        length = len(longest_increasing_subsequence)\r\n    return length\r\n\r\n\r\nprint(longest_increasing_subsequence([1, 2, 3, 2, 1]))\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7]))\r\nprint(longest_increasing_subsequence([5, 4, 3, 2, 1]))\r\nprint(longest_increasing_subsequence([]))\r\n","votes":null},{"text":"\r\n    result = 0\r\n    for i in range(len(arr)):\r\n        if arr[i] in arr[:i]:\r\n            result = max(result, 1 + longest_increasing_subsequence(arr[:i]))\r\n    return result\r\n\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))\r\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))","votes":null},{"text":"\r\n    # Write your code here\r\n    n = len(arr)\r\n    dp = [0] * n\r\n    max_length = 0\r\n    for i in range(n):\r\n        dp[i] = 1\r\n        for j in range(i - 1, -1, -1):\r\n            if arr[i] > arr[j] and dp[j] + 1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n        max_length = max(max_length, dp[i])\r\n    return max_length\r\n\r\n\r\nassert longest_increasing_subsequence([10, 8, 9, 2, 5, 3, 7, 101, 18]) == 6\r\nassert longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]) == 9\r\nassert longest_increasing_subsequence([0, 1, 0, 2, 3, 2, 4, 2, 5, 0]) == 5\r\nassert longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15, 0]) == 9\r\nassert longest_increasing_subsequence([1, 3, 5, 4, 7]) == 1\r\nassert longest_increasing_subsequence([1, 3, 5, 6, 7, 8, 9]) == 2\r\nassert longest_increasing_subsequence([1, 3, 5, 6, 7, 8, 9, 10]) == 3\r\nassert longest_increasing_subsequence([1, 3, 5, 6, 7, 8, 9, 10, 11]","votes":null},{"text":"\r\n    if len(arr) == 1:\r\n        return 1\r\n    length = 1\r\n    # Stores the previous array element\r\n    prev_element = arr[0]\r\n    for i in range(1, len(arr)):\r\n        # Stores the current array element\r\n        current_element = arr[i]\r\n        if current_element >= prev_element:\r\n            length = length + 1\r\n            prev_element = current_element\r\n    return length\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    if n == 1:\r\n        return 1\r\n    dp = [[1 for _ in range(n)] for _ in range(n)]\r\n    max_len = 1\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[j][i] + 1 > dp[j][i+1]:\r\n                dp[j][i+1] = dp[j][i] + 1\r\n                max_len = max(max_len, dp[j][i+1])\r\n    return max_len\r\n\r\n# Best case: O(n^2)\r\n# Worst case: O(n^2)\r\n# Average case: O(n^2)\r\n# Prefered: O(nlog n)\r\n# Worst case: O(n^2)\r\n# Space complexity: O(n^2)\r\n","votes":null},{"text":"\r\n    # initialize a temporary array to store current and previous index of\r\n    # longest increasing subsequence\r\n    LIS = [-1] * len(arr)\r\n    # initialize current index\r\n    i = 0\r\n\r\n    # traverse the input array\r\n    for j in range(len(arr)):\r\n        # if current element is smaller than or equal to\r\n        # the previous element in the LIS array\r\n        if arr[j] <= arr[LIS[i]]:\r\n            # set the index of the current element in the LIS array\r\n            LIS[j] = LIS[i]\r\n        else:\r\n            # if current element is smaller than the element in the\r\n            # current index of the LIS array\r\n            while (i >= 0) and (arr[j] > arr[LIS[i]]):\r\n                # decrement the index of the previous element in the LIS array\r\n                LIS[j] = LIS[i]\r\n                # decrement the current index\r\n                i -= 1\r\n            # increment the current index\r\n            i += 1\r\n    # return the length of the LIS\r\n    return i + 1\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Fill this in.\r\n\r\n    return 0\r\n\r\n\r\n# The tests below are only used for grading purposes.\r","votes":null},{"text":"\r\n    # Time complexity: O(n^2)\r\n    # Space complexity: O(n)\r\n    # Initialize\r\n    arr = [0] + arr\r\n    length = 1\r\n    longest = [arr[0]]\r\n    for i in range(1, len(arr)):\r\n        # If current element is less than the last\r\n        if arr[i] < arr[i - 1]:\r\n            # If current element is greater than the longest element\r\n            if arr[i] > longest[-1]:\r\n                # Add current element to the longest element\r\n                longest.append(arr[i])\r\n                # Update length\r\n                length = len(longest)\r\n            # If current element is less than the longest element\r\n            else:\r\n                # Find the index of the longest element\r\n                index = longest.index(arr[i - 1])\r\n                # Find the index of the current element\r\n                index = longest.index(arr[i])\r\n                # If current element is greater than the element at the index\r\n                if index > index:\r\n                    # Add current element to the longest element\r\n                    longest.append(arr[i])\r\n                    # Update length\r\n                    length = len(longest)\r\n    return length\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(longest_increasing_subsequence([5, 1, 2, 3, 4, 5]))\r\n    print(longest_increasing_subsequence([2, 1, 4, 3, 5]))\r\n","votes":null},{"text":"\r\n    n = len(arr)\r\n    if n == 0:\r\n        return 0\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[j][i] = max(dp[j][i], dp[j][i - 1] + 1)\r\n    return max(max(dp[i][j] for i in range(n)) for j in range(n))\r\n\r\n\r","votes":null},{"text":"\r\n    if (len(arr) == 0):\r\n        return 0\r\n    dp = [[0]*len(arr) for i in range(0, len(arr))]\r\n    # dp[i][j] is the length of the longest increasing subsequence with\r\n    # elements on left side of arr[i] and right side of arr[j]\r\n    # initially, the subsequence length is 1\r\n    dp[0][0] = 1\r\n    # Length of the longest increasing subsequence with elements on\r\n    # left side of arr[i] is 1\r\n    for i in range(0, len(arr)):\r\n        dp[i][i] = 1\r\n\r\n    # Length of the longest increasing subsequence with elements on\r\n    # right side of arr[j] is 1\r\n    for j in range(0, len(arr)):\r\n        dp[j][j] = 1\r\n\r\n    # Fill the dp table in bottom up manner\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, len(arr)):\r\n            if (arr[i] > arr[j]):\r\n                dp[i][j] = dp[i][j] + dp[i-1][j]\r\n            else:\r\n                dp[i][j] = 1\r\n\r\n    # Find the length of the longest increasing subsequence with elements\r\n    # on left side of arr[i] and right side of arr[j]\r\n    length = 0\r\n    for i in range(0, len(arr)):\r\n        for j in range(0, len(arr)):\r\n            if (dp[i][j] > length):\r\n                length = dp[i][j]\r\n    return length\r\n\r","votes":null},{"text":"\r\n    length = 1\r\n    arr_len = len(arr)\r\n    for i in range(1, arr_len):\r\n        if arr[i] > arr[i - 1]:\r\n            length += 1\r\n        else:\r\n            length = 1\r\n    return length\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    n = len(arr)\r\n    dp = [[0 for j in range(n)] for i in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i][j] + 1 > dp[i][i]:\r\n                dp[i][i] = dp[i][j] + 1\r\n    ans = 0\r\n    for i in range(n):\r\n        ans = max(ans, dp[i][i])\r\n    return ans\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [5, 1, 3, 4, 2, 6, 7, 8, 9]\r\n    print(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    stack, l = [], 0\r\n    for i in range(len(arr)):\r\n        while stack and arr[stack[-1]] <= arr[i]:\r\n            stack.pop()\r\n        stack.append(i)\r\n        if len(stack) == 1:\r\n            l = i + 1\r\n        elif len(stack) > 1:\r\n            l = max(l, i - stack[0])\r\n    return l\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    print(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    n = len(arr)\r\n    dp = [1]*n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[j] + 1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(\"Length of longest increasing subsequence is: \", longest_increasing_subsequence(arr))\r\n\"\"\"\r\nOutput: Length of longest increasing subsequence is:  3\r\n\"\"\"\r\n","votes":null},{"text":"\r\n\r\n    # Init the result\r\n    result = 0\r\n\r\n    # If array is empty\r\n    if len(arr) == 0:\r\n        # Return 0\r\n        return result\r\n\r\n    # Create a copy of array to store the result\r\n    local_array = arr[:]\r\n\r\n    # Traverse through the array\r\n    for i in range(len(arr)):\r\n\r\n        # Initialize the length of current subsequence to 0\r\n        current_length = 0\r\n\r\n        # If we are at the first element\r\n        if i == 0:\r\n            # Set the length of current subsequence to 1\r\n            current_length = 1\r\n            # Set the beginning index of current subsequence to 0\r\n            local_array[i] = 0\r\n\r\n        # Else if current element is greater than previous element\r\n        elif arr[i] > arr[i-1]:\r\n            # Set the length of current subsequence to 1\r\n            current_length = 1\r\n            # Set the beginning index of current subsequence to 0\r\n            local_array[i] = 0\r\n\r\n        # Else if current element is lesser than previous element\r\n        else:\r\n            # Initialize the index of the previous element\r\n            previous_index = i-1\r\n            # Initialize the length of previous subsequence\r\n            previous_length = 0\r\n\r\n            # Traverse through the array from previous index to present\r\n            for j in range(i-1, -1, -1):\r\n\r\n                # If the current element is greater than the previous element\r\n                if arr[j] > arr[i]:\r\n                    # Set the length of previous subsequence to current length\r\n                    # and store the index of previous element\r\n                    previous_length = current_length\r\n                    previous_index = j\r\n                    break\r\n\r\n            # If the length of previous subsequence is greater than current length\r\n            if previous_length > current_length:\r\n                # Set the length of current subsequence to previous length\r\n                # and store the index of previous element\r\n                current_length = previous_length\r\n                local_array[i] = previous_index\r\n                # Increment the result\r\n                result += 1\r\n\r\n        # If the length of current subsequence is greater than result so far\r\n        if current_length > result:\r\n            # Set the result to current length\r\n            result = current_length\r\n            # Set the beginning index of current subsequence to 0\r\n            local_array[i] =","votes":null},{"text":"\r\n    if not arr:\r\n        return 0\r\n    # store the length of the longest subsequence found so far\r\n    max_len = 1\r\n    # store the starting index of the longest subsequence found so far\r\n    max_start = 0\r\n    # store the ending index of the longest subsequence found so far\r\n    max_end = 0\r\n    for i in range(len(arr)):\r\n        if i == 0:\r\n            # base case for when the subsequence is the first element of the array\r\n            arr[0] = arr[0]\r\n            max_len = 1\r\n            max_start = 0\r\n            max_end = 0\r\n        elif arr[i] <= arr[i-1]:\r\n            # if the value at index i is less than the value at index i-1\r\n            # then the current subsequence is longer than the previous subsequence\r\n            arr[i] = arr[i]\r\n            # update the starting and ending indices of the current subsequence\r\n            max_start = max(max_start, arr[i])\r\n            max_end = min(max_end, arr[i])\r\n            # update the length of the longest subsequence found so far\r\n            max_len = max(max_len, max_end-max_start+1)\r\n        else:\r\n            # if the value at index i is greater than the value at index i-1\r\n            # then the current subsequence is the same as the previous subsequence\r\n            arr[i] = arr[i-1]\r\n            # update the length of the longest subsequence found so far\r\n            max_len = max(max_len, max_end-max_start+1)\r\n    return max_len\r\n\r\nprint(longest_increasing_subsequence([1, 5, 3, 7, 2, 4, 5, 7, 1, 6]))\r\nprint(longest_increasing_subsequence([1, 5, 3, 7, 2, 4, 5, 7, 1, 6, 8, 9]))\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))","votes":null},{"text":"\r\n    if not arr:\r\n        return 0\r\n    if len(arr) == 1:\r\n        return 1\r\n    length = 0\r\n    for i in range(len(arr)):\r\n        # check if arr[i] is a part of the lis\r\n        lis = []\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                lis.append(arr[j])\r\n        # if arr[i] is not a part of the lis, add arr[i] to the lis\r\n        if arr[i] not in lis:\r\n            lis.append(arr[i])\r\n        # if arr[i] is a part of the lis, check if arr[i] is part of the lis of length 0\r\n        # if not, add arr[i] to the lis\r\n        if arr[i] in lis and lis[0]!= arr[i]:\r\n            lis.insert(0, arr[i])\r\n        # if arr[i] is a part of the lis, check if arr[i] is part of the lis of length 1\r\n        # if not, add arr[i] to the lis\r\n        if arr[i] in lis and lis[1]!= arr[i]:\r\n            lis.insert(1, arr[i])\r\n        # if arr[i] is a part of the lis, check if arr[i] is part of the lis of length 2\r\n        # if not, add arr[i] to the lis\r\n        if arr[i] in lis and lis[2]!= arr[i]:\r\n            lis.insert(2, arr[i])\r\n        if len(lis) > length:\r\n            length = len(lis)\r\n    return length\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [4, 2, 5, 2, 9, 3, 6, 1]\r\n    print(longest_increasing_subsequence(arr))","votes":null},{"text":"\r\n    # Write your code here\r\n    length = 0\r\n    i = 0\r\n    left = 0\r\n    right = 0\r\n    while i < len(arr):\r\n        if arr[i] > arr[left]:\r\n            left = i\r\n        elif arr[i] < arr[right]:\r\n            right = i\r\n        else:\r\n            i += 1\r\n        while left <= right:\r\n            if arr[left] < arr[left - 1]:\r\n                length = max(length, right - left + 1)\r\n                left += 1\r\n            else:\r\n                right += 1\r\n    return length\r\n\r\n\r","votes":null},{"text":"\r\n    if len(arr) == 0 or len(arr) == 1:\r\n        return 1\r\n    else:\r\n        arr.sort()\r\n        dp = [1 for _ in range(len(arr))]\r\n        dp[0] = 1\r\n        longest = 1\r\n        for i in range(1, len(arr)):\r\n            if arr[i] > arr[i - 1]:\r\n                dp[i] = 1 + dp[i - 1]\r\n            elif dp[i] > longest:\r\n                longest = dp[i]\r\n        return longest\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here.\r\n    dp = [[0 for _ in range(len(arr))] for _ in range(len(arr))]\r\n\r\n    max_len = 1\r\n    curr_len = 1\r\n\r\n    for i in range(len(arr)):\r\n        dp[i][i] = 1\r\n        max_len = 1\r\n        curr_len = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                if dp[i][j] + 1 > dp[i][i]:\r\n                    dp[i][i] = dp[i][j] + 1\r\n                    max_len = dp[i][i]\r\n                    curr_len = 1\r\n                elif dp[i][j] + 1 == dp[i][i]:\r\n                    dp[i][i] = dp[i][i] + 1\r\n                    curr_len += 1\r\n                if dp[j][i] + 1 > dp[i][i]:\r\n                    dp[i][i] = dp[j][i] + 1\r\n                    max_len = dp[i][i]\r\n                    curr_len = 1\r\n                elif dp[j][i] + 1 == dp[i][i]:\r\n                    dp[i][i] = dp[i][i] + 1\r\n                    curr_len += 1\r\n        if max_len > curr_len:\r\n            max_len = curr_len\r\n    return max_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    tests = [\r\n        ([1], 1),\r\n        ([1, 2, 3], 3),\r\n        ([1, 3, 2, 1], 4),\r\n        ([1, 3, 2, 2], 3),\r\n        ([1, 1, 2, 1], 4),\r\n        ([1, 2, 2, 1], 3),\r\n        ([1, 3, 2, 2, 1], 5),\r\n        ([1, 2, 1, 2, 1], 4),\r\n        ([1, 3, 2, 2, 2], 4),\r\n        ([1, 2, 2, 1, 1]","votes":null},{"text":"\r\n    pass\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    # print(longest_increasing_subsequence(arr))\r\n    print(greedy_longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    length = len(arr)\r\n\r\n    # if the given array is empty\r\n    if length == 0:\r\n        return 0\r\n\r\n    # if the given array contains only one element\r\n    elif length == 1:\r\n        return 1\r\n\r\n    # if the given array contains only two elements\r\n    elif length == 2:\r\n        if arr[0] <= arr[1]:\r\n            return 1\r\n        else:\r\n            return 2\r\n\r\n    # if the given array contains only three elements\r\n    elif length == 3:\r\n        if arr[0] <= arr[1] <= arr[2]:\r\n            return 1\r\n        elif arr[1] <= arr[2] <= arr[0]:\r\n            return 1\r\n        else:\r\n            return 2\r\n\r\n    # if the given array contains only four elements\r\n    elif length == 4:\r\n        if arr[0] <= arr[1] <= arr[2] <= arr[3]:\r\n            return 1\r\n        elif arr[0] <= arr[2] <= arr[1] <= arr[3]:\r\n            return 1\r\n        elif arr[0] <= arr[3] <= arr[1] <= arr[2]:\r\n            return 1\r\n        else:\r\n            return 2\r\n\r\n    # if the given array contains only five elements\r\n    elif length == 5:\r\n        if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4]:\r\n            return 1\r\n        elif arr[0] <= arr[2] <= arr[1] <= arr[3] <= arr[4]:\r\n            return 1\r\n        elif arr[0] <= arr[3] <= arr[1] <= arr[2] <= arr[4]:\r\n            return 1\r\n        elif arr[0] <= arr[4] <= arr[1] <= arr[2] <= arr[3]:\r\n            return 1\r\n        else:\r\n            return 2\r\n\r\n    # if the given array contains only six elements\r\n    elif length == 6:\r\n        if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5]:\r\n            return 1\r\n        elif arr[0] <= arr[2] <= arr[1] <= arr[3] <= arr[4] <= arr[5]:\r\n            return 1\r\n      ","votes":null},{"text":"\r\n    n = len(arr)\r\n\r\n    # Create a table to store constructed LIS of subarrays\r\n    LIS = [[0 for _ in range(n)] for _ in range(n)]\r\n\r\n    # Initialize LIS values in the first row\r\n    for i in range(n):\r\n        LIS[i][i] = 1\r\n\r\n    # Fill LIS values in other rows\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and LIS[i][j] + 1 > LIS[i][i]:\r\n                LIS[i][i] = LIS[i][j] + 1\r\n\r\n    # Return length of the LIS\r\n    return max(max(LIS[i]) for i in range(n))\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    # dp[i][j] := length of LIS ending at index i and j\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i][j] < dp[j][i]:\r\n                dp[i][j] = 1 + dp[j][i]\r\n\r\n    res = 0\r\n    for i in range(n):\r\n        res = max(res, dp[i][i])\r\n\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    if not arr:\r\n        return 0\r\n    # dp[i][j] is the length of the longest increasing subsequence of arr[i:j+1].\r\n    # dp[i][j] = 1 + min(dp[i+1][j], dp[i][j-1]) if arr[i] < arr[j] else dp[i][j-1]\r\n    dp = [[1 for _ in range(len(arr))] for _ in range(len(arr))]\r\n    for i in range(len(arr)):\r\n        for j in range(len(arr)):\r\n            if i == j:\r\n                dp[i][j] = 1\r\n            elif arr[i] < arr[j]:\r\n                dp[i][j] = 1 + dp[i+1][j]\r\n            else:\r\n                dp[i][j] = dp[i][j-1]\r\n    return max(max(dp[i]) for i in range(len(arr)))\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    longest_increasing_subsequence = []\r\n    for i in range(len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[j] > arr[i]:\r\n                max_length = max(max_length, j - i + 1)\r\n                longest_increasing_subsequence.append(arr[i])\r\n    return max_length, longest_increasing_subsequence\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [2, 3, 1, 6, 2, 3, 6, 7, 6, 1]\r\n    print(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    max_length = 1\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i-1]:\r\n            arr[i], arr[i-1] = arr[i-1], arr[i]\r\n            if i+1 > max_length:\r\n                max_length = i+1\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n    # create a table to store lengths of subsequences\r\n    L = [0] * n\r\n\r\n    # Initialize L[i] with length of the ith longest\r\n    # increasing subsequence starting from arr[i+1]\r\n    for i in range(1, n):\r\n        # Initialize L[i] with 1\r\n        L[i] = 1\r\n\r\n        # Find length of LIS ending at arr[i]\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and L[j] + 1 > L[i]:\r\n                L[i] = L[j] + 1\r\n\r\n    # return the length of LIS ending at arr[n-1]\r\n    return L[n-1]\r\n\r\n\r","votes":null},{"text":"\r\n    lis = []\r\n    for i in range(len(arr)):\r\n        if i not in lis:\r\n            lis.append(i)\r\n    lis.sort()\r\n    lis.reverse()\r\n    max_length = 1\r\n    for i in range(len(lis)-1):\r\n        if arr[lis[i]] < arr[lis[i+1]]:\r\n            lis[i+1] += 1\r\n            max_length = max(max_length, lis[i+1]-lis[i])\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,2,3,4,5,6,6,6,7,8]\r\n    print(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    if len(arr) == 1:\r\n        return 1\r\n    if len(arr) == 2:\r\n        return 1 if arr[0] < arr[1] else 0\r\n\r\n    dp = [[0 for _ in range(len(arr))] for _ in range(len(arr))]\r\n    dp[0][0] = 1\r\n    dp[0][1] = 1 if arr[0] < arr[1] else 0\r\n\r\n    for i in range(len(arr)):\r\n        for j in range(len(arr)):\r\n            if j == i:\r\n                continue\r\n            if dp[i][j] == 0:\r\n                continue\r\n            if dp[i][j] == 1:\r\n                dp[i][j] = 1 + max(dp[i][k] for k in range(j) if arr[k] < arr[j])\r\n            else:\r\n                dp[i][j] = 1 + max(dp[i][k] for k in range(j) if dp[i][k] == 1)\r\n\r\n    return max(max(dp[i]) for i in range(len(arr)))\r\n\r\n\r\nif __name__ == '__main__':\r\n    assert longest_increasing_subsequence([1, 3, 5, 6, 7, 9]) == 3\r\n    assert longest_increasing_subsequence([2, 3, 4, 6, 7, 8, 9]) == 3\r\n    assert longest_increasing_subsequence([1, 3, 5, 6, 7, 9, 10]) == 4\r\n","votes":null},{"text":"\r\n\r\n    # length of the longest increasing subsequence\r\n    longest = 1\r\n\r\n    # length of the current subsequence\r\n    current = 1\r\n\r\n    # length of the subsequence\r\n    subsequence = 0\r\n\r\n    # length of the subsequence with the maximum length\r\n    max_subsequence = 0\r\n\r\n    # length of the subsequence with the maximum length\r\n    max_subsequence_index = 0\r\n\r\n    # length of the subsequence with the maximum length\r\n    max_subsequence_value = 0\r\n\r\n    # find the length of the longest increasing subsequence\r\n    for i in range(len(arr)):\r\n        # if the current subsequence is not already included\r\n        if current!= 1:\r\n            # find the index of the maximum value in the current subsequence\r\n            max_index = arr.index(max(arr[i:]))\r\n            # if the current value is greater than the maximum value\r\n            if arr[i] > arr[max_index]:\r\n                # update the value in the current subsequence\r\n                arr[i] = arr[max_index]\r\n                # update the index in the current subsequence\r\n                arr.insert(i, max_index)\r\n                current = 1\r\n            # if the current value is smaller than the maximum value\r\n            else:\r\n                # remove the value in the current subsequence\r\n                arr.pop(i)\r\n                current = 1\r\n        # if the current subsequence is already included\r\n        else:\r\n            # find the index of the maximum value in the current subsequence\r\n            max_index = arr.index(max(arr[i:]))\r\n            # if the value in the current subsequence is greater than the maximum value\r\n            if arr[i] > arr[max_index]:\r\n                # update the value in the current subsequence\r\n                arr[i] = arr[max_index]\r\n                # update the index in the current subsequence\r\n                arr.insert(i, max_index)\r\n                # update the current subsequence\r\n                current = 1\r\n                # update the longest subsequence\r\n                longest = current\r\n                # update the subsequence with the maximum value\r\n                max_subsequence = current\r\n                # update the index of the subsequence with the maximum value\r\n                max_subsequence_index = i\r\n                # update the value of the subsequence with the maximum value\r\n                max_subsequence_value = arr[","votes":null},{"text":"\r\n    if not arr:\r\n        return 0\r\n    max_len = 1 # at least one element has to increase by one\r\n\r\n    for i in range(len(arr)):\r\n        # check if the element is already in the current subsequence\r\n        if i not in arr[:i+1]:\r\n            continue\r\n        # check if the element is the first in the sequence\r\n        if i == 0:\r\n            max_len = 1\r\n            continue\r\n        # check if the element is already in the subsequence\r\n        if arr[i] < arr[i-1]:\r\n            continue\r\n        # if not, add the element to the subsequence\r\n        arr[i], arr[i-1] = arr[i-1], arr[i]\r\n        # and extend the current maximum length\r\n        max_len = max(max_len, 1 + longest_increasing_subsequence(arr[i:]))\r\n    return max_len\r\n\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5]))\r\nprint(longest_increasing_subsequence([1, 3, 2, 3, 4, 5]))\r\nprint(longest_increasing_subsequence([1, 3, 2, 1, 4, 5]))\r\n","votes":null},{"text":"\r\n    longest_subsequence = 0\r\n    longest_subsequence_start = 0\r\n    for i in range(len(arr)-1):\r\n        left = 0\r\n        right = i\r\n        while left < right:\r\n            if arr[i] > arr[left] and arr[i] > arr[right]:\r\n                longest_subsequence = max(longest_subsequence, right - left + 1)\r\n                right = right - 1\r\n            elif arr[i] < arr[left]:\r\n                left = left + 1\r\n            else:\r\n                right = right + 1\r\n        if longest_subsequence > longest_subsequence_start:\r\n            longest_subsequence_start = i\r\n    return longest_subsequence_start\r\n\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80, 70]))\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80, 70, 100]))\r\n","votes":null},{"text":"\r\n\r\n    # Write your code here.\r\n    # Store the length of the longest increasing subsequence in the variable \"max_length\"\r\n    # Store the index of the longest increasing subsequence in the variable \"max_index\"\r\n    # Store the index of the first element of the longest increasing subsequence in the variable \"start\"\r\n    # Store the index of the last element of the longest increasing subsequence in the variable \"end\"\r\n    max_length = 0\r\n    max_index = 0\r\n    start = 0\r\n    end = 0\r\n\r\n    # Iterate through each element of the array\r\n    for i in range(len(arr)):\r\n        # Initialize the current length of the longest increasing subsequence to 1\r\n        current_length = 1\r\n\r\n        # Iterate through each element of the array\r\n        for j in range(len(arr)):\r\n            # If the element at index i is greater than the element at index j\r\n            if (arr[i] > arr[j]):\r\n                # If the current length of the longest increasing subsequence is greater than the current length of the subsequence with element at index j\r\n                if (current_length > current_length_of_subsequence_with_element_at_index_j):\r\n                    # Set the current length of the longest increasing subsequence to the current length of the subsequence with element at index j\r\n                    current_length = current_length_of_subsequence_with_element_at_index_j\r\n                    # Set the index of the first element of the longest increasing subsequence to index j\r\n                    start = j\r\n                    # Set the index of the last element of the longest increasing subsequence to index i\r\n                    end = i\r\n                # If the current length of the longest increasing subsequence is equal to the current length of the subsequence with element at index j\r\n                elif (current_length == current_length_of_subsequence_with_element_at_index_j):\r\n                    # Set the current length of the longest increasing subsequence to the current length of the subsequence with element at index j\r\n                    current_length = current_length_of_subsequence_with_element_at_index_j\r\n\r\n                    # If the current length of the longest increasing subsequence is greater than the current length of the subsequence with element at index i\r\n                    if (current_length > current","votes":null},{"text":"\r\n    if len(arr) == 1:\r\n        return 1\r\n    max_length = 1\r\n    for i in range(0,len(arr)):\r\n        if i >= 1:\r\n            if arr[i] > arr[i-1]:\r\n                max_length += 1\r\n            else:\r\n                max_length = max(max_length, longest_increasing_subsequence(arr[i:]))\r\n        else:\r\n            max_length = 1\r\n    return max_length\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 5, 7, 2, 3, 8, 5, 3, 5]\r\n    print(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    if not arr:\r\n        return 0\r\n    n = len(arr)\r\n    dp = [0] * (n + 1)\r\n    for i in range(n):\r\n        dp[i + 1] = 1\r\n        for j in range(i + 1):\r\n            if arr[i] < arr[j]:\r\n                dp[i + 1] = max(dp[i + 1], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    # 1. Initialize the length of the longest increasing subsequence.\r\n    # 2. Initialize the length of the current subsequence.\r\n    # 3. Initialize the previous index.\r\n    # 4. Initialize the current index.\r\n    # 5. Set length to -1.\r\n    # 6. Repeat until the length is -1:\r\n    #    a. If arr[current_index] > arr[previous_index]:\r\n    #       i. Set length to 1 + current_length.\r\n    #       ii. Set previous_index to current_index.\r\n    #    b. Else:\r\n    #       i. Set length to current_length.\r\n    #       ii. Set previous_index to current_index.\r\n    # 7. Set length to length + 1.\r\n    # 8. Return length.\r\n    length = -1\r\n    prev_index = 0\r\n    for index in range(len(arr)):\r\n        if arr[index] > arr[prev_index]:\r\n            length = 1 + length\r\n            prev_index = index\r\n        else:\r\n            length = length\r\n    return length\r\n\r\n\r\n# Test cases\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\narr = [3, 8, 9, 10, 11]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\narr = [7, 7, 7, 7, 7, 7, 7]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\narr = [1, 3, 6, 7, 9, 4, 10, 6, 12]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, ","votes":null},{"text":"\r\n    s=[]\r\n    # for i in range(len(arr)):\r\n    #     if i==0 or arr[i]>=arr[i-1]:\r\n    #         s.append(arr[i])\r\n    #     else:\r\n    #         j=0\r\n    #         for k in range(len(s)):\r\n    #             if s[k]>=arr[i]:\r\n    #                 j=k+1\r\n    #         s.insert(j,arr[i])\r\n    # return len(s)\r\n    # print(s)\r\n    # s=[arr[0]]\r\n    # for i in range(1,len(arr)):\r\n    #     if arr[i]>=arr[i-1]:\r\n    #         s.append(arr[i])\r\n    #     else:\r\n    #         j=0\r\n    #         for k in range(len(s)):\r\n    #             if s[k]>=arr[i]:\r\n    #                 j=k+1\r\n    #         s.insert(j,arr[i])\r\n    # return len(s)\r\n    # s=[arr[0]]\r\n    # for i in range(1,len(arr)):\r\n    #     j=0\r\n    #     while j<len(s) and arr[i]>=s[j]:\r\n    #         j+=1\r\n    #     s.insert(j,arr[i])\r\n    # return len(s)\r\n    # s=[0 for i in range(len(arr))]\r\n    # j=0\r\n    # for i in range(len(arr)):\r\n    #     while j>0 and arr[i]>=s[j-1]:\r\n    #         j-=1\r\n    #     s[j]=arr[i]\r\n    #     j+=1\r\n    # return j\r\n    # s=[arr[0]]\r\n    # for i in range(1,len(arr)):\r\n    #     j=0\r\n    #     while j<len(s) and s[j]>=arr[i]:\r\n    #         j+=1\r\n    #     s.insert(j,arr[i])\r\n    # return len(s)\r\n    # s=[arr[0]]\r\n    # for i in range(1,len(arr)):\r\n    #     j=0\r\n    #     while j<le","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    if len(arr) == 1:\r\n        return 1\r\n\r\n    # Make a copy of the list\r\n    arr_copy = arr[:]\r\n    # Sort the list\r\n    arr_copy.sort()\r\n    # Get the length of the subarray with the largest element\r\n    length = 1\r\n    for i in range(len(arr_copy) - 1):\r\n        if arr_copy[i + 1] > arr_copy[i]:\r\n            length += 1\r\n            # Update the subarray with the largest element\r\n            arr_copy[i + 1] = arr_copy[i]\r\n    return length\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Test 1\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 70]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Test 2\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Test 3\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 70, 90]\r\n    print(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    # TODO: Write the code for this function\r\n    # arr=[-1,0,2,3,2,1]\r\n    arr.sort()\r\n    arr.append(0)\r\n    dp=[]\r\n    max_len=0\r\n    for i in range(len(arr)):\r\n        dp.append(1)\r\n    for i in range(len(arr)-2,-1,-1):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i]<arr[j] and dp[j]==1:\r\n                dp[i]+=1\r\n                break\r\n    for i in range(len(dp)):\r\n        if dp[i]>max_len:\r\n            max_len=dp[i]\r\n    return max_len\r\n\r\nprint(longest_increasing_subsequence([-1,0,2,3,2,1]))\r\n```\r\n\r\n## 288. \u9876\u7aef\u8fed\u4ee3\u5668\r\n```python\r\nclass TopVotedCandidate(object):\r\n\r\n   ","votes":null},{"text":"\r\n    arr.sort()\r\n    n = len(arr)\r\n    dp = [0 for i in range(n)]\r\n    dp[0] = 1\r\n    for i in range(1, n):\r\n        dp[i] = 1\r\n        for j in range(i-1, -1, -1):\r\n            if arr[i] > arr[j] and dp[j] + 1 > dp[i]:\r\n                dp[i] = dp[j] + 1\r\n    return max(dp)\r\n\r\n# Driver Code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n\r\nprint(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    n = len(arr)\r\n    if n == 0:\r\n        return 0\r\n    if n == 1:\r\n        return 1\r\n    L = [1] * n\r\n    for i in range(n):\r\n        L[i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and L[i] < L[j] + 1:\r\n                L[i] = L[j] + 1\r\n    return max(L)\r\n\r\n\r\nprint(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n\r\n    # Initialize result\r\n    result = 0\r\n\r\n    # Create a stack\r\n    stack = []\r\n\r\n    # Traverse through the given array\r\n    for i in arr:\r\n        # Check if this element is present\r\n        if i in stack:\r\n            # Find the top of the stack\r\n            top = stack.index(i)\r\n\r\n            # Remove all the elements (i.e. sub-array) from the stack\r\n            while(top!= -1):\r\n                stack.pop(top)\r\n                top = stack.index(i)\r\n\r\n            # Add the current element\r\n            stack.append(i)\r\n        else:\r\n            # Add the current element\r\n            stack.append(i)\r\n\r\n        # Update the result\r\n        if len(stack) > result:\r\n            result = len(stack)\r\n\r\n    # Return the result\r\n    return result\r\n\r","votes":null},{"text":"\r\n    # Check if the sequence is empty\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    # Initialize the result\r\n    result = 1\r\n\r\n    # Finding the length of the longest increasing subsequence\r\n    # for each element of the given array\r\n    for i in range(1, len(arr)):\r\n        # Finding the length of the longest increasing subsequence\r\n        # which is a subsequence of arr[0..i-1]\r\n        length = longest_increasing_subsequence(arr[0:i])\r\n\r\n        # If the length of the subsequence is greater than\r\n        # the result so far then update the result\r\n        if length + 1 > result:\r\n            result = length + 1\r\n\r\n    return result\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    if len(arr) == 1 or arr[0] == arr[-1]:\r\n        return 1\r\n    if len(arr) == 2:\r\n        return 2\r\n    if arr[0] < arr[1]:\r\n        return 1 + max(longest_increasing_subsequence(arr[1:]), longest_increasing_subsequence(arr[2:]))\r\n    if arr[1] < arr[2]:\r\n        return 2 + max(longest_increasing_subsequence(arr[2:]), longest_increasing_subsequence(arr[3:]))\r\n    if arr[0] > arr[2]:\r\n        return 1 + max(longest_increasing_subsequence(arr[1:]), longest_increasing_subsequence(arr[3:]))\r\n    if arr[0] > arr[1]:\r\n        return 2 + max(longest_increasing_subsequence(arr[2:]), longest_increasing_subsequence(arr[3:]))\r\n\r\n\r\n# +\r","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    arr.sort()\r\n    n = len(arr)\r\n    dp = [0] * n\r\n    dp[0] = 1\r\n    res = 0\r\n    for i in range(1, n):\r\n        res = max(res, dp[i-1])\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1 + 1\r\n    return res\r\n\r\nprint(longest_increasing_subsequence([1, 4, 3, 2, 5]))","votes":null},{"text":"\r\n    # arr = [1,2,3,4,5]\r\n    # print(arr)\r\n    # arr.sort()\r\n    # print(arr)\r\n    # print(len(arr))\r\n    # return len(arr)\r\n    # arr = [8,9,4,2,3,6,7,5]\r\n    # print(arr)\r\n    # arr.sort()\r\n    # print(arr)\r\n    # print(len(arr))\r\n    # return len(arr)\r\n    # arr = [1,2,3,4,5,6,7,8,9]\r\n    # print(arr)\r\n    # arr.sort()\r\n    # print(arr)\r\n    # print(len(arr))\r\n    # return len(arr)\r\n    # arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\r\n    # print(arr)\r\n    # arr.sort()\r\n    # print(arr)\r\n    # print(len(arr))\r\n    # return len(arr)\r\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\r\n    print(arr)\r\n    arr.sort()\r\n    print(arr)\r\n    print(len(arr))\r\n    return len(arr)\r\n\r\nif __name__ == \"__main__\":\r\n    longest_increasing_subsequence([1,2,3,4,5,6","votes":null},{"text":"\r\n    # Write your code here.\r\n    length = 0\r\n    result = []\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[i-1]:\r\n            length += 1\r\n            result.append(arr[i])\r\n        else:\r\n            length = 0\r\n            result = []\r\n    return length + 1\r\n\r\n\r\n# Driver Code\r\narr = [2, 1, 1, 2, 3, 4, 5, 6]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r\n```\r\n\r\n## References\r\n- [GeeksForGeeks](https:\/\/www.geeksforgeeks.org\/longest-increasing-subsequence-dp-4\/)\r\n\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    length = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and len(arr[i]) > length:\r\n                length = len(arr[i])\r\n    return length\r\n\r\nif __name__ == '__main__':\r\n    print(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]))\r\n    print(longest_increasing_subsequence([10, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n","votes":null},{"text":"\r\n    arr = list(map(int, arr))\r\n    arr_length = len(arr)\r\n    if arr_length == 1:\r\n        return 1\r\n\r\n    dp = [0]*arr_length\r\n    dp[0] = 1\r\n\r\n    for i in range(1, arr_length):\r\n        dp[i] = 1\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\r\n                dp[i] = dp[j] + 1\r\n\r\n    max_len = 1\r\n    for i in range(dp):\r\n        max_len = max(max_len, dp[i])\r\n\r\n    return max_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 8, 6, 2, 4, 1, 3]\r\n    print(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [[0] * n for _ in range(n)]\r\n    dp[0][0] = 1\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and dp[i][j] == 0:\r\n                dp[i][j] = 1 + dp[i][j] if dp[i][j + 1] >= dp[i][j] else dp[i][j + 1]\r\n                dp[i][j] = max(dp[i][j], dp[i][j + 1])\r\n    return max(max(dp[i][j] for j in range(n)) for i in range(n))\r\n\r\n# test\r\nassert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 6","votes":null},{"text":"\r\n    arr = sorted(list(arr))\r\n    n = len(arr)\r\n    dp = [[0 for _ in range(n)] for _ in range(n)]\r\n    for i in range(n):\r\n        dp[i][i] = 1\r\n    for i in range(n - 1, -1, -1):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i][j] = 1 + min(dp[i][j], dp[i][j + 1])\r\n    return max(max(dp[i][j] for j in range(n)) for i in range(n))\r\n\r\n\r","votes":null}],"time":{"count":25.0,"avg":193281.56304,"std":72026.7194517698,"cov":0.3726517849}}
{"id":550,"question":"def find_Max(arr,low,high):\r\n    \"\"\"Write a python function to find the maximum element in a sorted and rotated array.\"\"\"","answers":[{"text":"\r\n    max = arr[low]\r\n    for i in range(low+1,high+1):\r\n        if arr[i]>max:\r\n            max = arr[i]\r\n    return max\r\n\r","votes":101326.248},{"text":"\r\n    if low<high:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid]>=arr[mid+1]:\r\n            return find_Max(arr,low,mid)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return arr[low]\r\n\r","votes":113855.436},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    elif low == high-1:\r\n        if arr[low] > arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    else:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid] > arr[low] and arr[mid] > arr[high]:\r\n            return arr[mid]\r\n        elif arr[mid] > arr[low]:\r\n            return find_Max(arr,mid,high)\r\n        else:\r\n            return find_Max(arr,low,mid)\r\n\r","votes":121585.36},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = low+(high-low)\/\/2\r\n    if arr[mid] > arr[mid+1]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r","votes":143256.212},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = low + (high - low)\/\/2\r\n    if arr[mid] > arr[mid + 1]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid + 1,high)\r\n\r","votes":143414.496},{"text":"\r\n    max=arr[low]\r\n    for i in range(low+1,high+1):\r\n        if arr[i]>max:\r\n            max=arr[i]\r\n    return max\r\n\r","votes":147861.412},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    if low==high-1:\r\n        if arr[low]>arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    mid=low+(high-low)\/\/2\r\n    max_left=find_Max(arr,low,mid)\r\n    max_right=find_Max(arr,mid+1,high)\r\n    if max_left>max_right:\r\n        return max_left\r\n    else:\r\n        return max_right\r\narr=[1,3,2,2,5,6,7]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n","votes":159873.704},{"text":"\r\n    if low<high:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]==arr[mid+1]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return max(arr[mid],find_Max(arr,mid+1,high))\r\n    else:\r\n        return arr[low]\r\n\r\nif __name__=='__main__':\r\n    print(find_Max(arr,0,n-1))\r\n","votes":165384.124},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid]>arr[mid+1]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n        \r","votes":174210.02},{"text":"\r\n    if low>=high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid]>=arr[low] and arr[mid]>=arr[high]:\r\n        return arr[mid]\r\n    elif arr[mid]<arr[low]:\r\n        return find_Max(arr,low,mid-1)\r\n    elif arr[mid]<arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return arr[low]\r\n\r","votes":174508.712},{"text":"\r\n    if low >= high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid] > arr[mid+1]:\r\n        return find_Max(arr,low,mid)\r\n    return find_Max(arr,mid+1,high)\r","votes":204699.968},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    elif low<high:\r\n        mid=low+(high-low)\/\/2\r\n        max1=find_Max(arr,low,mid)\r\n        max2=find_Max(arr,mid+1,high)\r\n        return max(max1,max2)\r\n    else:\r\n        return arr[low]\r\n\r\narr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\nprint(find_Max(arr,0,len(arr)-1))","votes":210817.824},{"text":"\r\n    i=low\r\n    j=high\r\n    mid=(low+high)\/\/2\r\n    while(i<=mid and j>=mid+1):\r\n        if(arr[i]<arr[mid] and arr[j]>arr[mid]):\r\n            return arr[j]\r\n        elif(arr[i]>arr[mid] and arr[j]<arr[mid]):\r\n            return arr[i]\r\n        else:\r\n            i+=1\r\n            j-=1\r\n    if(arr[mid]>arr[i] and arr[mid]>arr[j]):\r\n        return arr[mid]\r\n    elif(arr[mid]<arr[i] and arr[mid]<arr[j]):\r\n        return arr[mid]\r\n    else:\r\n        return max(arr[i],arr[j])\r\n\r","votes":221702.588},{"text":"\r\n    if low<high:\r\n        mid=(low+high)\/\/2\r\n        if (arr[mid]>arr[high]):\r\n            return(find_Max(arr,low,mid))\r\n        else:\r\n            return(find_Max(arr,mid+1,high))\r\n    else:\r\n        return(arr[low])\r\n\r","votes":239101.34},{"text":"\r\n    max = arr[low]\r\n    for i in range(low+1,high+1):\r\n        if arr[i] > max:\r\n            max = arr[i]\r\n    return max\r\n\r","votes":249037.704},{"text":"\r\n    while low<high:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]>arr[mid+1]:\r\n            low=mid+1\r\n        else:\r\n            high=mid\r\n    return low\r\n\r","votes":null},{"text":"\r\n    if high >= low:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid] > arr[mid+1]:\r\n            return mid\r\n        if arr[low] > arr[mid]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return -1\r\n\r","votes":null},{"text":"\r\n    if low<high:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]<arr[mid+1]:\r\n            return find_Max(arr,low,mid)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return arr[low]\r\n# Driver code\r\narr=[1,5,9,10,15,19]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n","votes":null},{"text":"\r\n    if low>=high:\r\n        return -1\r\n    mid=(low+high)\/\/2\r\n    if arr[mid]>arr[mid+1]:\r\n        return mid\r\n    else:\r\n        return find_Max(arr,low,mid-1) \r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n        \r\n    mid = (low+high)\/\/2\r\n    if arr[mid] < arr[mid+1]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n        \r\narr = [1,2,3,4,5,6,7,8]\r\nmax_element = find_Max(arr,0,len(arr)-1)\r\nprint(max_element)\r\n```\r\n<hr>\r\n<h2>Searching for a Value in a Sorted Array<\/h2>\r\n<p>In this question, we will write a python function to search for a value in a sorted array.<\/p>\r\n<hr>\r\n<h2>Python Program to Search for a Value in a Sorted Array<\/h2>\r\n```python\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=int((low+high)\/2)\r\n    if arr[mid]>arr[low]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if low>high:\r\n        return -1\r\n    mid=low+(high-low)\/\/2\r\n    if arr[mid]>arr[mid+1]:\r\n        return arr[mid]\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r","votes":null},{"text":"\r\n    if high<=low:\r\n        return\r\n    mid=(low+high)\/\/2\r\n    if arr[mid]<arr[mid+1]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n    \r\narr=[1,2,3,4,5,6,7]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[5,4,3,2,1]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[1,2]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[1]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[5,4,3,2,1]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[1,2,3,4,5,6,7]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[5,4,3,2,1]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[1,2]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[1]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[5,4,3,2,1]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[1,2,3,4,5,6,7]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[5,4,3,2,1]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[1,2]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[1]\r\nprint(find_Max(arr,0,len(arr)-1))\r\narr=[5","votes":null},{"text":"\r\n    max_index=low\r\n    for i in range(low+1,high+1):\r\n        if arr[i]>arr[max_index]:\r\n            max_index=i\r\n    return max_index\r\n\r","votes":null},{"text":"\r\n    if low > high:\r\n        return -1\r\n    mid = low + (high - low)\/\/2\r\n    if arr[mid] < arr[mid + 1]:\r\n        return mid\r\n    elif arr[mid] > arr[mid + 1]:\r\n        return find_Max(arr,low,mid - 1)\r\n    else:\r\n        return find_Max(arr, mid + 1, high)\r\n\r","votes":null},{"text":"\r\n    i = low\r\n    j = high\r\n    while i<=j:\r\n        if arr[i] > arr[j]:\r\n            return j\r\n        i+=1\r\n        j-=1\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid]<arr[mid+1]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\narr = [2, 5, 1, 6, 3, 4, 7]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\"\"\"\r\nInput :\r\narr = [2, 5, 1, 6, 3, 4, 7]\r\nOutput :\r\n7\r\n\"\"\"\r\n```\r\n**Question 89. Binary Search Tree Iterator**\r\n```\r\n\"\"\"\r\nQuestion 89. Binary Search Tree Iterator\r\n\r\nWrite an iterator class, which, given a Binary Search Tree, provides all the elements of BST in sorted order.\r\n\r\nExample:\r\n\r\nInput: The following tree:\r\n\r\n        5\r\n       \/ \\\r\n      3   6\r\n     \/ \\\r\n    2   4\r\nOutput: [2, 3, 4, 5, 6]\r\n\r\nYour runtime beats 69.99 % of python submissions.\r\n\"\"\"\r\n\r\n# Definition for a  binary tree node\r\nclass TreeNode(object):\r\n   ","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid] > arr[mid+1]:\r\n        return find_Max(arr,low,mid-1)\r\n    return find_Max(arr,mid+1,high)\r\n\r\narr = [12, 45, 12, 45, 12, 45, 12, 45]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n","votes":null},{"text":"\r\n    max_element=0\r\n    max_index=0\r\n    for i in range(low,high+1):\r\n        if arr[i]>max_element:\r\n            max_element=arr[i]\r\n            max_index=i\r\n    return max_index\r\n\r","votes":null},{"text":"\r\n    max_idx = low\r\n    for i in range(low,high):\r\n        if arr[i] > arr[max_idx]:\r\n            max_idx = i\r\n    return max_idx\r\n\r","votes":null},{"text":"\r\n    if low<high:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]>arr[mid+1]:\r\n            return mid\r\n        else:\r\n            return max(find_Max(arr,low,mid-1),find_Max(arr,mid+1,high))\r\n    else:\r\n        return low\r\n\r","votes":null},{"text":"\r\n    if low > high:\r\n        return -1\r\n    mid_index = (low+ high)\/2\r\n    if (mid_index == 0):\r\n        if (arr[low] >= arr[1]):\r\n            return arr[low]\r\n        else:\r\n            return arr[1]\r\n    elif (mid_index == len(arr)-1):\r\n        if (arr[high] >= arr[mid_index]):\r\n            return arr[high]\r\n        else:\r\n            return arr[mid_index]\r\n    else:\r\n        if (arr[mid_index] > arr[low] and arr[mid_index] > arr[high]):\r\n            return arr[mid_index]\r\n        elif (arr[mid_index] < arr[low] and arr[mid_index] > arr[high]):\r\n            return find_max(arr,low,mid_index-1)\r\n        elif (arr[mid_index] > arr[low] and arr[mid_index] < arr[high]):\r\n            return find_max(arr,mid_index+1,high)\r\n        else:\r\n            return find_max(arr,low,mid_index-1)\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = low + (high - low) \/\/ 2\r\n    if arr[mid] < arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if high>=low:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]>arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    return arr[high]\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid]>arr[mid+1]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n    \r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    elif low == high - 1:\r\n        return max(arr[low],arr[high])\r\n    elif low == high - 2:\r\n        return max(arr[low],arr[high],arr[low+1])\r\n    elif low == high - 3:\r\n        return max(arr[low],arr[high],arr[low+1],arr[low+2])\r\n    elif low == high - 4:\r\n        return max(arr[low],arr[high],arr[low+1],arr[low+2],arr[low+3])\r\n    elif low == high - 5:\r\n        return max(arr[low],arr[high],arr[low+1],arr[low+2],arr[low+3],arr[low+4])\r\n    elif low == high - 6:\r\n        return max(arr[low],arr[high],arr[low+1],arr[low+2],arr[low+3],arr[low+4],arr[low+5])\r\n    else:\r\n        mid = (low+high)\/\/2\r\n        #print(\"Mid:\",mid)\r\n        #print(\"Left:\",find_Max(arr,low,mid))\r\n        #print(\"Right:\",find_Max(arr,mid+1,high))\r\n        return max(find_Max(arr,low,mid),find_Max(arr,mid+1,high))\r\n\r\narr = [3, 8, 5, 1, 7, 40, 35]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n```\r\n\r\n**Output:**\r\n\r\n```\r\n40\r\n```\r\n\r\n## Explanation:\r\n\r\nIn this question, we are given an array and we have to find the maximum element in the array.\r\n\r\n### Time complexity:\r\n\r\nO(n)\r\n\r\n### Space complexity:\r\n\r\nO(1)\r\n\r\n## Code:\r\n\r\n```python\r","votes":null},{"text":"\r\n    if low == high:\r\n        return low\r\n    mid = low + (high - low)\/\/2\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid - 1)\r\n    else:\r\n        return find_Max(arr,mid + 1,high)\r\n\r\n\r","votes":null},{"text":"\r\n    pivot = arr[low]\r\n    i = low\r\n    j = high+1\r\n    while i <= j:\r\n        while i <= j and arr[j] > pivot:\r\n            j -= 1\r\n        while i <= j and arr[i] <= pivot:\r\n            i += 1\r\n        if i >= j:\r\n            return j\r\n    return i\r\n\r\n# Driver code\r","votes":null},{"text":"\r\n    max_index = low\r\n    for i in range(low+1,high+1):\r\n        if arr[i] > arr[max_index]:\r\n            max_index = i\r\n    return max_index\r\n\r","votes":null},{"text":"\r\n    mid = low + (high-low)\/\/2\r\n    if mid == 0 or arr[mid] > arr[mid-1]:\r\n        return arr[mid]\r\n    elif mid == len(arr)-1 or arr[mid] > arr[mid+1]:\r\n        return arr[mid+1]\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r","votes":null},{"text":"\r\n    max_val = arr[low]\r\n    max_i = low\r\n    for i in range(low+1,high+1):\r\n        if arr[i]>max_val:\r\n            max_val = arr[i]\r\n            max_i = i\r\n    return max_i\r\n\r","votes":null},{"text":"\r\n    if low>high:\r\n        return None\r\n    mid=int((low+high)\/2)\r\n    val=find_Max(arr,low,mid)\r\n    if val==None:\r\n        val=arr[mid]\r\n    val2=find_Max(arr,mid+1,high)\r\n    if val2==None:\r\n        val2=arr[mid+1]\r\n    if val>val2:\r\n        return val\r\n    else:\r\n        return val2\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return low\r\n    mid = (low+high)\/\/2\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\"\"\"\r\nThe function should return the maximum element in a sorted and rotated array.\r\n\"\"\"\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 1, 4, 5, 6, 4]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\"\"\"\r\nThis code is contributed by <NAME>\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    #Write your code here\r\n    if low==high:\r\n        return arr[low]\r\n    elif low<high:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]==arr[mid+1]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return max(arr[mid],find_Max(arr,low,mid))\r\n    else:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]==arr[mid+1]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return max(arr[mid],find_Max(arr,mid+1,high))\r\n\r","votes":null},{"text":"\r\n    if(low==high):\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if(arr[mid]>arr[low]):\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n# Driver Code\r\narr = [12,11,13,5,6,7]\r\nprint(\"Maximum element in the array is\",find_Max(arr,0,len(arr)-1))\r\n```\r\n<br>\r\n<br>\r\n\r\n## 2.1 Find Minimum Element in an Array\r\n\r\nAn array can be sorted in increasing order or in decreasing order.\r\n\r\n- If the array is sorted in increasing order, then the minimum element is the first element.\r\n- If the array is sorted in decreasing order, then the minimum element is the last element.\r\n\r\n### 2.1.1 Find Minimum element in an array using Python\r\n\r\n```python\r\n# Python program to find minimum element in an array\r\n\r\n# Function to find minimum element in an array\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = int((low+high)\/2)\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n    return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if low>=high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    max_of_left = find_Max(arr,low,mid-1)\r\n    max_of_right = find_Max(arr,mid+1,high)\r\n    max_of_mid = arr[mid]\r\n    if max_of_left>max_of_right:\r\n        return max_of_left\r\n    else:\r\n        return max_of_right\r\n\r","votes":null},{"text":"\r\n    if low>=high:\r\n        return arr[low]\r\n    mid=(low+high)\/\/2\r\n    if arr[mid]>arr[mid+1]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    pivot = high\r\n    if low == high:\r\n        return arr[pivot]\r\n    elif low > high:\r\n        return -1\r\n    else:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid] < arr[pivot]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if low>=high:\r\n        return -1\r\n    mid = (low+high)\/\/2\r\n    left = find_Max(arr,low,mid-1)\r\n    right = find_Max(arr,mid+1,high)\r\n    max1 = max(left,right)\r\n    max2 = arr[mid]\r\n    max3 = max(max2,max1)\r\n    return max3\r\n\r","votes":null},{"text":"\r\n    index=0\r\n    while(low<=high):\r\n        mid=(low+high)\/\/2\r\n        if(arr[mid]<=arr[mid+1]):\r\n            low=mid+1\r\n            index=mid\r\n        else:\r\n            high=mid-1\r\n            index=mid+1\r\n    return arr[index]\r\n\r","votes":null},{"text":"\r\n    if high > low:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid] >= arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return arr[low]\r\n\r\narr = [1,2,3,4,5,6,7,8,9,0]\r\nprint(find_Max(arr,0,len(arr)-1))","votes":null},{"text":"\r\n    x=low\r\n    while x<high:\r\n        if arr[x]>arr[x+1]:\r\n            return arr[x+1]\r\n        x+=1\r\n    return arr[low]\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    \r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] < arr[mid+1]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n# Driver Code\r\narr = [1,2,3,4,5,6,7,8,9,10]\r\nprint(\"Maximum element is :\",find_Max(arr,0,len(arr)-1))\r\n","votes":null},{"text":"\r\n    if arr[low]==arr[high]:\r\n        return arr[low]\r\n    elif low<high:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[low]<=arr[mid] and arr[mid]<arr[high]:\r\n            return arr[mid]\r\n        elif arr[mid]>arr[low]:\r\n            return find_Max(arr,low,mid-1)\r\n        elif arr[mid]<arr[high]:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return 0\r\n\r","votes":null},{"text":"\r\n    if low<high:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]>arr[mid+1]:\r\n            return mid\r\n        else:\r\n            if arr[low]<arr[high]:\r\n                return find_Max(arr,low,mid-1)\r\n            else:\r\n                return find_Max(arr,mid+1,high)\r\n    else:\r\n        return low\r\n\r","votes":null},{"text":"\r\n    if high==low:\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    if arr[mid]>=arr[mid+1]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r","votes":null},{"text":"\r\n    if high>=low:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]>arr[mid+1]:\r\n            return mid\r\n        else:\r\n            if arr[low]>arr[mid]:\r\n                return find_Max(arr,low,mid-1)\r\n            else:\r\n                return find_Max(arr,mid+1,high)\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    max_index = 0\r\n    for i in range(low,high+1):\r\n        if arr[i] > arr[max_index]:\r\n            max_index = i\r\n    return arr[max_index]\r\n\r\n#Find the max element in the sorted array\r\nmax_ele = find_Max(arr,0,len(arr)-1)\r\nprint(max_ele)\r\n\r\n#Find the max element in the rotated sorted array\r\nmax_ele = find_Max(arr,0,len(arr)-1)\r\nprint(max_ele)\r\n\r\n#Find the max element in the unsorted array\r\nmax_ele = find_Max(arr,0,len(arr)-1)\r\nprint(max_ele)\r\n","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=int((low+high)\/2)\r\n    if arr[mid]>arr[mid+1]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\narr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\nprint(find_Max(arr,0,len(arr)-1))<jupyter_output>30","votes":null},{"text":"\r\n    max=arr[low]\r\n    max_ind=low\r\n    for i in range(low+1,high+1):\r\n        if arr[i]>max:\r\n            max=arr[i]\r\n            max_ind=i\r\n    return max_ind\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    if arr[mid]>arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r","votes":null},{"text":"\r\n    if low < high:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid] > arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return arr[low]\r\n\r","votes":null},{"text":"\r\n    #Find the index of the maximum element in the range low to high\r\n    max_index = low\r\n    for i in range(low+1,high+1):\r\n        if (arr[i] > arr[max_index]):\r\n            max_index = i\r\n    return max_index\r\n\r","votes":null},{"text":"\r\n    if high <= low:\r\n        return low\r\n    elif arr[low] <= arr[high]:\r\n        return low\r\n    else:\r\n        mid = (low + high)\/\/2\r\n        if arr[mid] <= arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r","votes":null},{"text":"\r\n    mid = int(low + (high - low) \/ 2)\r\n    if (arr[low] < arr[mid] and arr[mid] < arr[high]):\r\n        return max(arr[low], arr[mid])\r\n    elif (arr[low] > arr[mid] and arr[mid] > arr[high]):\r\n        return max(arr[low], arr[high])\r\n    elif (arr[low] > arr[mid]):\r\n        return find_Max(arr,low, mid - 1)\r\n    else:\r\n        return find_Max(arr,mid + 1,high)\r\n\r\n\r","votes":null},{"text":"\r\n    if(low<high):\r\n        mid = (low+high)\/\/2\r\n        if(arr[mid]==arr[mid+1]):\r\n            return find_Max(arr,low,mid-1)\r\n        elif(arr[mid]>arr[mid+1]):\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return mid\r\n    else:\r\n        return low\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(\"Maximum element found in a sorted array is: \",find_Max(arr,0,len(arr)-1))\r\narr1 = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\r\nprint(\"Maximum element found in a rotated array is: \",find_Max(arr1,0,len(arr1)-1))\r\n","votes":null},{"text":"\r\n    if high>low:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid]<arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    elif high==low:\r\n        return arr[low]\r\n    else:\r\n        return None\r\n\r","votes":null},{"text":"\r\n    \r\n    # If the array is empty or only has one element, it is the maximum element\r\n    if low==high:\r\n        return arr[low]\r\n    \r\n    mid = low+(high-low)\/\/2\r\n    \r\n    # If the mid is smaller than or equal to the left half, it is the maximum of mid and the left half.\r\n    if arr[mid] <= arr[low]:\r\n        return max(arr[mid],find_Max(arr,low,mid))\r\n    \r\n    # If the mid is larger than or equal to the right half, it is the maximum of mid and the right half.\r\n    else:\r\n        return max(arr[mid],find_Max(arr,mid+1,high))\r\n        \r\nn = int(input())\r\narr = list(map(int,input().split()))\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n","votes":null},{"text":"\r\n    return arr[high] if arr[low]==max(arr[low:high]) else arr[low]\r\n\r","votes":null},{"text":"\r\n    \r\n    if low<=high:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]==max:\r\n            return mid\r\n        if arr[mid]>max:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return low\r\n\r","votes":null},{"text":"\r\n    if low<=high:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]>arr[mid+1]:\r\n            return arr[mid+1]\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n    elif low==high:\r\n        return arr[low]\r\n    else:\r\n        return None\r\n\r","votes":null},{"text":"\r\n    if(low<high):\r\n        mid = (low+high)\/\/2\r\n        if arr[mid]<arr[mid+1]:\r\n            return mid\r\n        else:\r\n            if(arr[low]>arr[mid]):\r\n                return find_Max(arr,low,mid-1)\r\n            else:\r\n                return find_Max(arr,mid+1,high)\r\n    else:\r\n        return low\r\n\r","votes":null},{"text":"\r\n    max_ele = arr[low]\r\n    max_index = low\r\n    for i in range(low+1,high+1):\r\n        if(arr[i]>max_ele):\r\n            max_ele = arr[i]\r\n            max_index = i\r\n    return max_index\r\n\r","votes":null},{"text":"\r\n    max_val = arr[low]\r\n    max_index = low\r\n    for i in range(low+1,high+1):\r\n        if arr[i]>max_val:\r\n            max_val = arr[i]\r\n            max_index = i\r\n    return max_index\r\n\r","votes":null},{"text":"\r\n    max_element = arr[0]\r\n    max_index = 0\r\n    for i in range(1,high+1):\r\n        if arr[i] > max_element:\r\n            max_element = arr[i]\r\n            max_index = i\r\n    return max_element,max_index\r\n\r","votes":null},{"text":"\r\n    while low<=high:\r\n        mid = low+(high-low)\/\/2\r\n        if arr[mid] < arr[mid-1]:\r\n            return arr[mid]\r\n        elif arr[mid] > arr[mid+1]:\r\n            return arr[mid]\r\n        else:\r\n            if mid == 0 or arr[mid] > arr[mid-1]:\r\n                return arr[mid]\r\n            elif mid == len(arr)-1 or arr[mid] > arr[mid+1]:\r\n                return arr[mid]\r\n            elif mid == len(arr)-1 or arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\r\n                return arr[mid]\r\n            else:\r\n                if arr[mid] > arr[mid-1]:\r\n                    low = mid+1\r\n                else:\r\n                    high = mid-1\r\n    return 0\r\n\r","votes":null},{"text":"\r\n    if (low>high):\r\n        return -1\r\n    mid = low+(high-low)\/\/2\r\n    if (arr[mid]>=arr[high]):\r\n        return mid\r\n    elif (arr[mid]<arr[high]):\r\n        right = find_Max(arr,mid+1,high)\r\n        return right\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    mid = low + ((high-low)\/\/2)\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return mid\r\n\r","votes":null},{"text":"\r\n    if low>=high:\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    left=find_Max(arr,low,mid-1)\r\n    right=find_Max(arr,mid+1,high)\r\n    return max(left,right)\r\n\r","votes":null},{"text":"\r\n    max_index = low\r\n    max_value = arr[low]\r\n    for i in range(low+1, high+1):\r\n        if(arr[i] > max_value):\r\n            max_value = arr[i]\r\n            max_index = i\r\n    return max_value,max_index\r\n\r\n\r","votes":null},{"text":"\r\n    if low>=high:\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    if arr[mid]>arr[mid+1]:\r\n        return arr[mid]\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r","votes":null},{"text":"\r\n    if low<high:\r\n        mid=(low+high)\/\/2\r\n        if arr[mid]<arr[mid+1]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return arr[low]\r\n\r","votes":null},{"text":"\r\n    mid = (low+high)\/\/2\r\n    if low == high:\r\n        return arr[low]\r\n    elif arr[mid] >= arr[low]:\r\n        if arr[mid] >= arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        if arr[mid] <= arr[high]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n\r","votes":null},{"text":"\r\n    max=arr[low]\r\n    for i in range(low+1,high+1):\r\n        if arr[i]>max:\r\n            max=arr[i]\r\n    return max\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\"\"\"\r\nOutput:\r\n5\r\n\"\"\"\r\n#----------------------------------------------------------------------------------------------#\r\n#       Question 3: Write a python program to find the maximum element in a unsorted array.\r\n#----------------------------------------------------------------------------------------------#\r\narr=[1,2,3,4,5,6,7,8,9,10]\r","votes":null},{"text":"\r\n    while low<=high:\r\n        if arr[low]<arr[high]:\r\n            return arr[low]\r\n        if arr[low]>arr[high]:\r\n            return arr[high]\r\n        low+=1\r\n        high-=1\r\n    return 0\r\n\r","votes":null},{"text":"\r\n    if(low>=high):\r\n        return -1\r\n    mid=low+(high-low)\/\/2\r\n    if(arr[mid]==arr[mid+1]):\r\n        return find_Max(arr,low+1,mid-1)\r\n    else:\r\n        return mid\r\n\r\narr=[1,5,3,4,2,6,7,8,9]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n","votes":null},{"text":"\r\n    if arr[high] < arr[low]:\r\n        return max(arr[high],arr[high+1])\r\n    elif arr[low] > arr[high]:\r\n        return max(arr[low],arr[low-1])\r\n    else:\r\n        if low == 0:\r\n            return arr[high]\r\n        else:\r\n            return max(arr[low],find_Max(arr,low-1,high))\r\n\r","votes":null},{"text":"\r\n    if low<high:\r\n        mid=low+(high-low)\/\/2\r\n        if arr[mid]>arr[mid+1]:\r\n            return mid\r\n        else:\r\n            if arr[mid]>arr[high]:\r\n                return find_Max(arr,low,mid-1)\r\n            else:\r\n                return find_Max(arr,mid+1,high)\r\n    else:\r\n        return low\r\narr=[9,8,6,1,2,3,4,5,7]\r\nn=len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\"\"\"\r\nOutput:\r\n1\r\n\"\"\"\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if low<high:\r\n        mid=(low+high)\/\/2\r\n        if arr[mid]>=arr[low] and arr[mid]>=arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        elif arr[mid]<arr[low] and arr[mid]<arr[high]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return arr[low]\r\n\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=(low+high)\/\/2\r\n    if arr[mid]>=arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid = low+(high-low)\/\/2\r\n    if arr[low] < arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n# Driver code \r\narr = [1,2,3,4,5,6,7,8,9]\r\nprint(\"The maximum element is \",find_Max(arr,0,len(arr)-1))\r\n","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = low + (high - low) \/\/ 2\r\n    if arr[mid] >= arr[low]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if low>=high:\r\n        return -1\r\n    mid = (low+high)\/\/2\r\n    if arr[mid]>arr[mid+1]:\r\n        return mid\r\n    else:\r\n        if arr[low]<arr[mid]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if low<high:\r\n        mid = low+(high-low)\/\/2\r\n        if arr[mid]<arr[high]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    return arr[low]\r\n\r","votes":null},{"text":"\r\n    while low < high:\r\n        mid = (low + high)\/\/2\r\n        if arr[mid] > arr[mid+1]:\r\n            return mid\r\n        elif arr[mid] < arr[mid+1]:\r\n            low = mid + 1\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r\n\r","votes":null},{"text":"\r\n    if low > high:\r\n        return -1\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] <= arr[high]:\r\n        return find_Max(arr, low, mid - 1)\r\n    else:\r\n        return find_Max(arr, mid + 1, high)\r\n\r\n\r\n# Driver code\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(find_Max(arr, 0, len(arr) - 1))","votes":null}],"time":{"count":15.0,"avg":171375.6765333333,"std":45374.0151998096,"cov":0.264763449}}
{"id":551,"question":"def extract_column(list1, n):\r\n    \"\"\"Write a function to extract a specified column from a given nested list.\"\"\"","answers":[{"text":"\r\n\r\n    return list(map(lambda x: x[n], list1))\r\n\r\n\r","votes":95071.428},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r","votes":101540.556},{"text":"\r\n    return [x[n] for x in list1]\r\n\r","votes":106237.456},{"text":"\r\n    return [item[n] for item in list1]\r\n\r\n\r","votes":109211.772},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        list2.append(i[n])\r\n    return list2\r\n\r","votes":111540.264},{"text":"\r\n    return [row[n] for row in list1]\r\n\r","votes":111599.06},{"text":"\r\n    return [x[n] for x in list1]\r\n\r\n\r","votes":111910.072},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\n# -\r\n\r\n# ### <b>1.1.4 <a name=\"1.1.4\"> <\/a><\/b>\r\n# Write a function to extract a specified row from a given nested list.\r\n#\r\n# For example, `extract_row(list1, 2)` should return the third row of `list1`.\r\n\r\n# #### Solution:\r\n#\r\n# ```\r\n# # extract_row.py\r\n#\r\n#","votes":116194.752},{"text":"\r\n    # n: index of column to extract\r\n    return [row[n] for row in list1]\r\n\r","votes":117097.064},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n# Write a function to extract a specified column from a given nested list.\r\n# Do not use any for loops\r\n\r\n# Write a function to extract the first 3 columns from a given nested list.\r\n# Do not use any for loops\r\n\r\n# Write a function to extract a specified column from a given nested list.\r\n# Use for loops","votes":118841.196},{"text":"\r\n    # TODO: Write your code here\r\n    return [item[n] for item in list1]\r\n\r","votes":118860.816},{"text":"\r\n\r\n    return [row[n] for row in list1]\r\n\r\n\r","votes":125643.712},{"text":"\r\n    return [elem[n] for elem in list1]\r\n\r\n\r","votes":126263.656},{"text":"\r\n    return [i[n] for i in list1]\r\n\r","votes":130529.816},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\n# %%\r","votes":131398.188},{"text":"\r\n    return [list1[i][n] for i in range(len(list1))]\r\n\r\n\r","votes":132271.868},{"text":"\r\n    return [i[n] for i in list1]\r\n\r\n\r","votes":134819.06},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n# test function\r\nprint(extract_column([[1, 2], [3, 4]], 1))\r\n","votes":135198.996},{"text":"\r\n    return list(map(lambda x: x[n], list1))\r\n\r","votes":136400.812},{"text":"\r\n    return [item[n] for item in list1]\r\n\r\n\r\n# print(extract_column(data, 0))\r\n# print(extract_column(data, 1))\r\n# print(extract_column(data, 2))\r\n\r\n\r","votes":137735.812},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n# extract_column([[1, 2], [3, 4]], 1) # returns [1, 3]\r\n\r\n# Extract a multiple columns from a nested list using a list comprehension\r","votes":141146.448},{"text":"\r\n    return [item[n] for item in list1]\r\n\r","votes":144787.912},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [['a', 'b', 'c'], ['d', 'e', 'f']]\r\n    print(extract_column(list1, 1))\r\n","votes":157159.824},{"text":"\r\n    result = []\r\n    for row in list1:\r\n        result.append(row[n])\r\n    return result\r\n\r","votes":169222.852},{"text":"\r\n    if len(list1) == 0:\r\n        return []\r\n    return [i[n] for i in list1]\r\n\r","votes":177423.464},{"text":"\r\n    return [list1[i][n] for i in range(len(list1))]\r\n\r","votes":193809.572},{"text":"\r\n\r\n    return [x[n] for x in list1]\r\n\r\n\r","votes":231942.008},{"text":"\r\n    return list(map(lambda x: x[n], list1))\r\n\r\n\r","votes":235242.76},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\ntest_list = [\r\n    [1, 2, 3, 4, 5, 6, 7, 8],\r\n    [9, 10, 11, 12, 13, 14, 15, 16],\r\n    [17, 18, 19, 20, 21, 22, 23, 24],\r\n    [25, 26, 27, 28, 29, 30, 31, 32],\r\n]\r\n\r\n# print(extract_column(test_list, 0))\r\n# print(extract_column(test_list, 1))\r\n# print(extract_column(test_list, 2))\r\n# print(extract_column(test_list, 3))\r\n# print(extract_column(test_list, 4))\r\n# print(extract_column(test_list, 5))\r\n# print(extract_column(test_list, 6))\r\n# print(extract_column(test_list, 7))\r\n# print(extract_column(test_list, 8))\r\n# print(extract_column(test_list, 9))\r\n# print(extract_column(test_list, 10))\r\n# print(extract_column(test_list, 11))\r\n# print(extract_column(test_list, 12))\r\n# print(extract_column(test_list, 13))\r\n# print(extract_column(test_list, 14))\r\n# print(extract_column(test_list, 15))\r\n# print(extract_column(test_list, 16))\r\n# print(extract_column(test_list, 17))\r\n# print(extract_column(test_list, 18))\r\n# print(extract_column(test_list, 19))\r\n# print(extract_column(tes","votes":236292.288},{"text":"\r\n    col = []\r\n    for i in range(0, len(list1)):\r\n        col.append(list1[i][n])\r\n    return col\r\n\r\n\r","votes":252521.1},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\nprint(extract_column(data, 0))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(extract_column(data, 1))\r\n# [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nprint(extract_column(data, 2))\r\n# [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\r\nprint(extract_column(data, 3))\r\n# [31, 32, 33, 34, 35, 36, 37, 38, 39, 40]\r\nprint(extract_column(data, 4))\r\n# [41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\r\nprint(extract_column(data, 5))\r\n# [51, 52, 53, 54, 55, 56, 57, 58, 59, 60]\r\nprint(extract_column(data, 6))\r\n# [61, 62, 63, 64, 65, 66, 67, 68, 69, 70]\r\nprint(extract_column(data, 7))\r\n# [71, 72, 73, 74, 75, 76, 77, 78, 79, 80]\r\nprint(extract_column(data, 8))\r\n# [81, 82, 83, 84, ","votes":null},{"text":"\r\n    return list(zip(*list1))[n]\r\n\r","votes":null},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\n# %%\r\n# In this exercise, you will create a new list that contains the values of the \"bats\" column from the dataset.\r\n\r\nbats = extract_column(data, 1)\r\n\r\n# %%\r\n# You can now assign this list to the variable \"new_list\".\r\n\r\nnew_list = bats\r\n\r\n# %%\r\n# Print the result of your assignment.\r\n\r\nprint(new_list)\r\n\r\n# %%\r\n# In this exercise, you will extract the \"bats\" column from the dataset and assign it to the variable \"bats\".\r\n\r\nbats = extract_column(data, 1)\r\n\r\n# %%\r\n# In this exercise, you will extract the \"bats\" column from the dataset and assign it to the variable \"bats\".\r\n\r\nbats = extract_column(data, 1)\r\n\r\n# %%\r\n# In this exercise, you will extract the \"bats\" column from the dataset and assign it to the variable \"bats\".\r\n\r\nbats = extract_column(data, 1)\r\n\r\n# %%\r\n# In this exercise, you will extract the \"bats\" column from the dataset and assign it to the variable \"bats\".\r\n\r\nbats = extract_column(data, 1)\r\n\r\n# %%\r\n# In this exercise, you will extract the \"bats\" column from the dataset and assign it to the variable \"bats\".\r\n\r\nbats = extract_column(data, 1)\r\n\r\n# %%\r\n# In this exercise, you will extract the \"bats\" column from the dataset and assign it to the variable \"bats\".\r\n\r\nbats = extract_column(data, 1)\r\n\r\n# %%\r\n# In this exercise, you will extract the \"bats\" column from the dataset and assign it to the variable \"bats\".\r\n\r\nbats = extract_column(data, 1)\r\n\r\n# %%\r\n# In this exercise, you will extract the \"bats\" column from the dataset and assign it to the variable \"bats\".\r\n\r\nbats = extract_column(data, 1","votes":null},{"text":"\r\n    return [[row[n] for row in list1] for n in range(len(list1[0]))]\r\n\r\n\r","votes":null},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\nprint(extract_column(list1, 0))\r\nprint(extract_column(list1, 1))\r\nprint(extract_column(list1, 2))\r\nprint(extract_column(list1, 3))\r\nprint(extract_column(list1, 4))\r\nprint(extract_column(list1, 5))\r\nprint(extract_column(list1, 6))\r\nprint(extract_column(list1, 7))\r\nprint(extract_column(list1, 8))\r\nprint(extract_column(list1, 9))\r\n\r\n# 2) Extracting multiple columns\r\n\"\"\"Write a function to extract multiple columns from a given nested list.\"\"\"\r","votes":null},{"text":"\r\n    # Write your code here\r\n    if isinstance(list1, list):\r\n        return [i[n] for i in list1]\r\n\r\n\r\nprint(extract_column(data, 1))\r\nprint(extract_column(data, 0))\r\nprint(extract_column(data, 2))\r\n\r\n# -\r\n\r\n# ### 3.1.2.2.1.2\r\n#\r\n# Write a function to extract the values of the last column from the data.\r\n\r\n# +\r\n# Write your code here\r","votes":null},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\n# Test\r\nprint(extract_column([[\"a\", \"b\", \"c\"], [1, 2, 3]], 1))\r\nprint(extract_column([[1, 2, 3], [[4, 5, 6]]], 2))\r\n```\r\n\r\nThe result of the above code is:\r\n\r\n```\r\n['b', 6]\r\n[2, [5]]\r\n```\r\n\r\nThe output of the above code is what I should expect.\r\n\r\nHowever, when I run the above code in a Python file, the output of the above code is:\r\n\r\n```\r\n['b', 6]\r\n[2, 5]\r\n```\r\n\r\nThe output of the above code is not what I expected.\r\n\r\nWhat is the reason?\r\n\r\nI have tried many methods to solve the problem but I still cannot find a solution.\r\n\r\nThank you very much!\n<issue_comment>username_1: Please read [the documentation](https:\/\/docs.python.org\/3\/tutorial\/introduction.html#lists) and check if you understand how nested lists work.\r\n```python\r","votes":null},{"text":"\r\n    return [x[n] for x in list1]\r\nextract_column([[1, 2, 3], [4, 5, 6]], 2)\r\n```\r\nI would expect this to run in O(n), but the complexity is O(n^2). It is an O(n) operation, but it is not the optimal solution.\r\n\r\nI am not sure if this is an issue with the Python language or the Python interpreter. I tried asking it on Stack Overflow, but I got no answer.\r\n\r\n### Technical details:\r\n* Python Version: 2.7.13\r\n* Python Bitness: 64\r\n* Operating System: Windows 10\r\n* How did you install Spyder: pip\r\n* Python packages: numpy, pandas\n<issue_comment>username_1: Hi @username_0,\r\n\r\nThanks for reporting. I have to admit that this is a little bit weird.\r\n\r\nFor the time being, I think you should use the following function to solve your problem:\r\n\r\n```python\r","votes":null},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n# Extract the 2nd column of the list\r\nprint(extract_column(list1, 1))","votes":null},{"text":"\r\n    i = 0\r\n    for j in list1:\r\n        if i == n:\r\n            return j\r\n        i += 1\r\n    return None\r\n\r","votes":null},{"text":"\r\n    return [[row[n] for row in list1] for row in list1]\r\n\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        if type(list1[i]) is list:\r\n            new_list.append(extract_column(list1[i], n))\r\n        elif n == 1:\r\n            new_list.append(list1[i])\r\n        else:\r\n            return []\r\n    return new_list\r\n\r\n\r","votes":null},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\nextract_column(data, 3)\r\n```\r\nOutput:\r\n```\r\n['D', 'A', 'B', 'C']\r\n```\r\n**Task 2**\r\n```\r\nimport pandas as pd\r\n\r\ndata = pd.read_csv('https:\/\/raw.githubusercontent.com\/username_0\/Python-for-Everyone\/master\/data\/sample.csv')\r\n# YOUR CODE HERE\r\n```\r\nOutput:\r\n```\r\nIndex(['Id', 'Name', 'Gender', 'School'], dtype='object')\r\n```\r\n**Task 3**\r\n```\r\nimport pandas as pd\r\ndata = pd.read_csv('https:\/\/raw.githubusercontent.com\/username_0\/Python-for-Everyone\/master\/data\/sample.csv')\r\n# YOUR CODE HERE\r\n```\r\nOutput:\r\n```\r\n['2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01-01', '2020-01","votes":null},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n# Extract the first value from each row of the list and store it in a new list\r\nfirst_value = extract_column(list1, 0)\r\n# Extract the second value from each row of the list and store it in a new list\r\nsecond_value = extract_column(list1, 1)\r\n# Extract the third value from each row of the list and store it in a new list\r\nthird_value = extract_column(list1, 2)\r\n# Extract the fourth value from each row of the list and store it in a new list\r\nfourth_value = extract_column(list1, 3)\r\n# Extract the fifth value from each row of the list and store it in a new list\r\nfifth_value = extract_column(list1, 4)\r\n# Extract the sixth value from each row of the list and store it in a new list\r\nsixth_value = extract_column(list1, 5)\r\n# Extract the seventh value from each row of the list and store it in a new list\r\nseventh_value = extract_column(list1, 6)\r\n# Extract the eighth value from each row of the list and store it in a new list\r\neighth_value = extract_column(list1, 7)\r\n# Extract the ninth value from each row of the list and store it in a new list\r\nninth_value = extract_column(list1, 8)\r\n# Extract the tenth value from each row of the list and store it in a new list\r\ntenth_value = extract_column(list1, 9)\r\n# Extract the eleventh value from each row of the list and store it in a new list\r\neleventh_value = extract_column(list1, 10)\r\n# Extract the twelfth value from each row of the list and store it in a new list\r\ntwelfth_value = extract_column(list1, 11)\r\n# Extract the thirteenth value from each row of th","votes":null},{"text":"\r\n    return [[row[n] for row in list1] for row in list1]\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if n == 1:\r\n            yield list1[i]\r\n        else:\r\n            yield from extract_column(list1[i], n-1)\r\n\r","votes":null},{"text":"\r\n    return [list1[i][n] for i in range(len(list1))]\r\n\r\n\r\n# +\r\ndf = pd.read_csv(\"data.csv\")\r\n\r\ndf.head()\r\n\r\n# +\r\n# Extracting the first column as a list.\r\nfirst_column = extract_column(list(df.to_records(index=False)), 0)\r\n\r\n# Extracting the second column as a list.\r\nsecond_column = extract_column(list(df.to_records(index=False)), 1)\r\n\r\n# Extracting the third column as a list.\r\nthird_column = extract_column(list(df.to_records(index=False)), 2)\r\n\r\n# Extracting the fourth column as a list.\r\nfourth_column = extract_column(list(df.to_records(index=False)), 3)\r\n\r\n# +\r\n# Plotting the values of the first column.\r\n\r\nplt.plot(first_column)\r\nplt.show()\r\n\r\n# +\r\n# Plotting the values of the second column.\r\n\r\nplt.plot(second_column)\r\nplt.show()\r\n\r\n# +\r\n# Plotting the values of the third column.\r\n\r\nplt.plot(third_column)\r\nplt.show()\r\n\r\n# +\r\n# Plotting the values of the fourth column.\r\n\r\nplt.plot(fourth_column)\r\nplt.show()\r\n\r\n# +\r\n# Plotting the values of the first column against the values of the second column.\r\n\r\nplt.scatter(first_column, second_column)\r\nplt.show()\r\n\r\n# +\r\n# Plotting the values of the first column against the values of the third column.\r\n\r\nplt.scatter(first_column, third_column)\r\nplt.show()\r\n\r\n# +\r\n# Plotting the values of the first column against the values of the fourth column.\r\n\r\nplt.scatter(first_column, fourth_column)\r\nplt.show()\r\n\r\n# +\r\n# Plotting the values of the second column against the values of the third column.\r\n\r\nplt.scatter(second","votes":null},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\nextract_column(data, 1)\r\n\r\n#%%\r\n# The extract_column function can also handle multiple columns, or a column with a default value.\r","votes":null},{"text":"\r\n    return [x[n] for x in list1]\r\nprint(extract_column(list1, 1))\r\nprint(extract_column(list2, 1))\r\nprint(extract_column(list3, 1))\r\n\r\n# 3. Create a function to extract the value of the last item in a list.\r","votes":null},{"text":"\r\n\r\n    list1 = list(list1)\r\n    for i in range(len(list1)):\r\n        list1[i] = list1[i][n]\r\n    return list1\r\n\r\n# Extract the 2nd column from nested_list:\r\nprint(extract_column(nested_list, 1))\r\n\r\n# extract the 3rd column from nested_list:\r\nprint(extract_column(nested_list, 2))\r\n```\r\n\r\n## Extract the 3rd column from nested_list\r\n\r\n```{code-cell} python\r\n# Extract the 3rd column from nested_list:\r\nprint(extract_column(nested_list, 2))\r\n```\r\n\r\n# Extract the 2nd column from nested_list\r\n\r\n\r\n```{code-cell} python\r\n# Extract the 2nd column from nested_list:\r\nprint(extract_column(nested_list, 1))\r\n```\r\n\r\n```{code-cell} python\r\n# Extract the 1st column from nested_list:\r\nprint(extract_column(nested_list, 0))\r\n```\r\n\r\n# Extract the 1st column from nested_list\r\n\r\n```{code-cell} python\r\n# Extract the 1st column from nested_list:\r\nprint(extract_column(nested_list, 0))\r\n```\r\n\r\n# Extract the 0th column from nested_list\r\n\r\n```{code-cell} python\r\n# Extract the 0th column from nested_list:\r\nprint(extract_column(nested_list, 0))\r\n```\r\n\r\n```{code-cell} python\r\n# Extract the 2nd column from nested_list:\r\nprint(extract_column(nested_list, 1))\r\n```\r\n\r\n```{code-cell} python\r\n\r\n```\r\n","votes":null}],"time":{"count":30.0,"avg":144930.4861333333,"std":43494.029403692,"cov":0.3001026945}}
{"id":554,"question":"def Split(list):\r\n    \"\"\"Write a python function to find odd numbers from a mixed list.\"\"\"","answers":[{"text":"\r\n    odd = []\r\n    for x in list:\r\n        if x % 2!= 0:\r\n            odd.append(x)\r\n    return odd\r\n\r\n\r","votes":61171.236},{"text":"\r\n    # Finding Odd Numbers\r\n    odd_list = []\r\n    for element in list:\r\n        if element % 2 == 1:\r\n            odd_list.append(element)\r\n    return odd_list\r\n\r\n\r","votes":81189.296},{"text":"\r\n    new_list = []\r\n    for item in list:\r\n        if item % 2 == 1:\r\n            new_list.append(item)\r\n    return new_list\r\n\r\n\r","votes":83486.268},{"text":"\r\n    odd_list = []\r\n    for num in list:\r\n        if num % 2!= 0:\r\n            odd_list.append(num)\r\n    return odd_list\r\n\r","votes":85243.116},{"text":"\r\n    new_list = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            new_list.append(i)\r\n    return new_list\r\n\r","votes":90265.848},{"text":"\r\n    # your code here\r\n    odd_list = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2!= 0:\r\n            odd_list.append(list[i])\r\n    return odd_list\r\n\r","votes":91315.832},{"text":"\r\n    return [x for x in list if x%2]\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\n","votes":93364.784},{"text":"\r\n    odd = [x for x in list if x % 2!= 0]\r\n    return odd\r\n\r\n# main program\r","votes":95075.46},{"text":"\r\n    return [x for x in list if x%2!= 0]\r\n\r\nprint(Split([1,2,3,4,5,6]))","votes":95862.036},{"text":"\r\n    odd_numbers = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odd_numbers.append(i)\r\n    return odd_numbers\r\n\r","votes":100101.224},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r\n# Test function\r\nprint(Split([1, 2, 3, 4, 5]))\r\n","votes":102843.744},{"text":"\r\n    return [i for i in list if i%2!=0]\r\n\r","votes":103189.14},{"text":"\r\n    odd = [num for num in list if num % 2!= 0]\r\n    return odd\r\n\r\n# Write a python function to find squares of odd numbers from a mixed list\r","votes":110373.884},{"text":"\r\n    odd_list = []\r\n    for x in list:\r\n        if x % 2!= 0:\r\n            odd_list.append(x)\r\n    return odd_list\r\n\r\n\r","votes":112236.252},{"text":"\r\n    return [i for i in list if i%2!= 0]\r\n\r\n# TEST CASES\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\nprint(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\r\nprint(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))","votes":115677.908},{"text":"\r\n    result = []\r\n    for elem in list:\r\n        if (elem % 2)!= 0:\r\n            result.append(elem)\r\n    return result\r\n\r\n\r\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(Split(numbers))\r\n","votes":118297.86},{"text":"\r\n    odd_number = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odd_number.append(i)\r\n    return odd_number\r\n\r\n#print(Split([1,2,3,4,5,6,7,8,9]))\r\nprint(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))","votes":119059.716},{"text":"\r\n    odd_list = []\r\n    for element in list:\r\n        if element % 2!= 0:\r\n            odd_list.append(element)\r\n    return odd_list\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7]))\r\n\r\n# %%\r","votes":122165.348},{"text":"\r\n    odd_numbers = []\r\n    for num in list:\r\n        if num % 2!= 0:\r\n            odd_numbers.append(num)\r\n    return odd_numbers\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n    ","votes":122617.956},{"text":"\r\n    odd_list = []\r\n    for item in list:\r\n        if item % 2!= 0:\r\n            odd_list.append(item)\r\n    return odd_list\r\n\r\n\r\n# Write a python function to find the longest word in a string.\r","votes":124410.684},{"text":"\r\n    odd_list = [x for x in list if x % 2]\r\n    return odd_list\r\n\r","votes":125246.128},{"text":"\r\n    odd_numbers = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odd_numbers.append(i)\r\n    return odd_numbers\r\n# End of function\r\n\r\n# Calling the function\r\nprint(Split([1,3,2,4,5]))\r\n","votes":126993.08},{"text":"\r\n\r\n    odd_numbers = []\r\n\r\n    for x in list:\r\n        if x % 2!= 0:\r\n            odd_numbers.append(x)\r\n\r\n    return odd_numbers\r\n\r\n\r","votes":127312.24},{"text":"\r\n    return [x for x in list if x % 2!= 0]\r\n\r\n\r\n# write a function that adds two numbers\r","votes":128852.2},{"text":"\r\n    odd_list = []\r\n    for item in list:\r\n        if item % 2 == 1:\r\n            odd_list.append(item)\r\n    return odd_list\r\n\r\nlist = [4, 1, 8, 12, 3]\r\nprint(Split(list))\r\n","votes":129700.452},{"text":"\r\n    return [x for x in list if x % 2!= 0]\r\n\r\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8]\r\nprint(Split(my_list))\r\n","votes":130915.68},{"text":"\r\n    odd = []\r\n    for num in list:\r\n        if num%2 == 1:\r\n            odd.append(num)\r\n    return odd\r\n\r","votes":131694.132},{"text":"\r\n    result = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            result.append(i)\r\n    return result\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5]))\r\n","votes":133639.936},{"text":"\r\n    odd_num = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2!= 0:\r\n            odd_num.append(list[i])\r\n    return odd_num\r\n\r","votes":134551.808},{"text":"\r\n    # Write your code here\r\n    odd_list = []\r\n    for item in list:\r\n        if item % 2 == 1:\r\n            odd_list.append(item)\r\n    return odd_list\r\n\r","votes":136258.14},{"text":"\r\n    result = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            result.append(i)\r\n    return result\r\n\r\n\r\n# %%\r\nif __name__ == \"__main__\":\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(Split([1, 3, 5, 7, 9]))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\n","votes":139697.084},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\nprint(Split([1,2,3,4,5,6,7,8,9,10])) # Should print [1,3,5,7,9]\r\n","votes":141443.12},{"text":"\r\n    odd_numbers = []\r\n    for item in list:\r\n        if item % 2!= 0:\r\n            odd_numbers.append(item)\r\n    return odd_numbers\r\n\r\n\r","votes":141684.628},{"text":"\r\n    odd_list = []\r\n    for item in list:\r\n        if item % 2!= 0:\r\n            odd_list.append(item)\r\n    return odd_list\r\n\r\n\r","votes":149429.132},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":151458.676},{"text":"\r\n    odd = [x for x in list if x % 2!= 0]\r\n    return odd\r\n\r","votes":152691.588},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n# Function to find even numbers from a mixed list.\r","votes":152974.332},{"text":"\r\n    return [num for num in list if num % 2!= 0]\r\n\r","votes":155794.908},{"text":"\r\n    odd = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2!= 0:\r\n            odd.append(list[i])\r\n    return odd\r\n\r\n\r","votes":166034.928},{"text":"\r\n    return [x for x in list if x % 2!= 0]\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8]))\r\n","votes":170381.372},{"text":"\r\n    return [i for i in list if i % 2!= 0]\r\n\r\n# test case\r\nlist = [1, 2, 3, 4, 5, 6]\r\nprint(Split(list))","votes":170659.504},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\n\"\"\"\r\nWe can also write a function that prints the square of a number. \r\nThe square function should accept one argument and return one value. \r\n\"\"\"\r\n\r\n\r","votes":176858.728},{"text":"\r\n    list_odd = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2!= 0:\r\n            list_odd.append(list[i])\r\n        else:\r\n            continue\r\n    return list_odd\r\n\r\n\r","votes":182819.44},{"text":"\r\n    odd = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 == 1:\r\n            odd.append(list[i])\r\n    return odd\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\r\n    print(\"Even numbers are: \")\r\n    for i in Split(list):\r\n        print(i)\r\n\r\n    print(\"Odd numbers are: \")\r\n    for i in Split(list):\r\n        print(i)\r\n","votes":184834.752},{"text":"\r\n    return [item for item in list if item % 2!= 0]\r\n\r\n\r","votes":187828.576},{"text":"\r\n    odd = []\r\n    for element in list:\r\n        if type(element) is int:\r\n            if element % 2!= 0:\r\n                odd.append(element)\r\n    return odd\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\r\n    print(Split(list))\r\n","votes":194731.66},{"text":"\r\n    # Write your code here\r\n    odd_numbers = []\r\n    for i in list:\r\n        if i%2 == 1:\r\n            odd_numbers.append(i)\r\n    return odd_numbers\r\n\r\n# Call the function\r\nprint(Split([1,2,3,4,5,6]))","votes":197381.232},{"text":"\r\n    result = []\r\n    for element in list:\r\n        if element % 2!= 0:\r\n            result.append(element)\r\n    return result\r\n\r\nprint(Split([1, 2, 3, 4, 5]))\r\n\"\"\"\r\n[1, 3, 5]\r\n\"\"\"\r\n\r\n\"\"\"\r\nWrite a python function that takes a list and returns a string of all of the odd numbers from the list.\r\nIf the list contains no odd numbers, return an empty string.\r\n\"\"\"\r","votes":207432.084},{"text":"\r\n    result = []\r\n    for item in list:\r\n        if item%2==1:\r\n            result.append(item)\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_list = [1, 2, 3, 4, 5]\r\n    # test_list = [1, 2, 2, 4, 5] # test for duplicate numbers\r\n    result = Split(test_list)\r\n    print(result)\r\n    # Split([1, 2, 2, 4, 5]) # test for duplicate numbers\r\n","votes":230005.696},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odd.append(i)\r\n    return odd\r\n\r\n# Driver Code\r\nprint(\"This is the list of numbers: \", [1,2,3,4,5,6])\r\nprint(\"The odd numbers are: \", Split([1,2,3,4,5,6]))","votes":245336.956},{"text":"\r\n    return list[list.index(max(list))+1:]\r\n\r","votes":null},{"text":"\r\n    return list.count(1)\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n    count = 0\r\n    for num in list:\r\n        if num % 2 == 1:\r\n            count += 1\r\n        else:\r\n            pass\r\n    return count\r\n\r\nprint(Split([1, 3, 9, 3, 2, 6, 3, 4, 5, 2, 1])) # should return 5\r\nprint(Split([1, 3, 9, 3, 2, 6, 3, 4, 5, 2, 1, 7])) # should return 6\r\nprint(Split([1, 3, 9, 3, 2, 6, 3, 4, 5, 2])) # should return 5\r\nprint(Split([1, 3, 9, 3, 2, 6, 3, 4, 5, 2, 1, 7, 8])) # should return 6\r\nprint(Split([1, 3, 9, 3, 2, 6, 3, 4, 5, 2, 1, 7, 8, 9])) # should return 7","votes":null},{"text":"\r\n    # Initialize a new list to append odd numbers\r\n    odd = []\r\n    # Iterate through the list\r\n    for i in range(len(list)):\r\n        # If the value in the list is odd, append it to the odd list\r\n        if list[i] % 2!= 0:\r\n            odd.append(list[i])\r\n    # Return the odd list\r\n    return odd\r\n```\r\n\r\n### 9.1.3. 2-D Lists\r\nA 2-D list, or 2D array, is a list of lists. Each sub-list has the same length.\r\n\r\n```python\r\nlist = [[1, 2], [3, 4]]\r\n```\r\n\r\nIn Python, a 2D list can be created by using square brackets: `[]`.\r\n\r\nA 2-D list can be accessed by specifying the sub-list number in square brackets: `list[0]`.\r\n\r\nA 2-D list can be modified by modifying the value of the sub-list number in square brackets: `list[0][1]`.\r\n\r\nA 2-D list can be appended using the `append()` method: `list.append([5, 6])`.\r\n\r\nA 2-D list can be deleted using the `del` keyword: `del list[0]`.\r\n\r\nA 2-D list can be sliced using the `[]` operator: `list[0:2]`.\r\n\r\nA 2-D list can be iterated using the `for` loop:\r\n\r\n```python\r\nfor row in list:\r\n    print(row)\r\n```\r\n\r\n### 9.1.4. Iteration with `enumerate()`\r\nThe `enumerate()` function returns an iterator. It allows you to iterate over a sequence, but also obtain the index of the element.\r\n\r\n```python\r\nfor index, value in enumerate(list):\r\n    print(index, value)\r\n```\r\n\r\n### 9.1.5. Iteration with `zip()`\r\nThe `zip()` function returns a list of tuples.\r\n\r\n```python\r\nlist = [1, 2, 3]\r\ntuple = (4, 5, 6)\r\nzip_list = zip(list, tuple)\r\nfo","votes":null},{"text":"\r\n    new_list = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            new_list.append(i)\r\n    return new_list\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n# [1, 3, 5, 7, 9]\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n# [1, 3, 5, 7, 9, 10]\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\n# [1, 3, 5, 7, 9, 10, 11]\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n# [1, 3, 5, 7, 9, 10, 11, 12]\r\n```\r\n\r\n## Using a Tuple to Return a Slice\r\n\r\nIn the previous example, we saw that we could return a slice from a list using the syntax:\r\n\r\n```python\r\nlist[start:stop]\r\n```\r\n\r\nIn general, we can use this syntax to return a slice from any list, however, if we want to return a slice from a tuple, we can use the syntax:\r\n\r\n```python\r\ntuple[start:stop]\r\n```\r\n\r\nThe following example shows this:\r\n\r\n```python\r","votes":null},{"text":"\r\n    return [i for i in list if i%2]\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n```\r\n\r\n**Test case**\r\n```\r\n$ python odd.py\r\n[1, 3, 5, 7, 9]\r\n```\r\n\r\n**Expected Output**\r\n```\r\n$ python3 odd.py\r\n[1, 3, 5, 7, 9]\r\n```\r\n\r\n**Additional context**\r\nThis is a solution to a problem I've been having for months. It's been a great help!\n<issue_comment>username_1: Hi @username_0,\r\n\r\nThis is a great example of how to use the functions in the `itertools` module. I've updated your solution. It should work now.\r\n\r\n```python\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return(odd, even)\r\n\r\n# The function split finds odd numbers from a list of numbers that may contain\r\n# a mix of even and odd numbers. The odd numbers are then placed in the odd\r\n# list, and the even numbers are placed in even list. The function returns the\r\n# lists for odd and even numbers.\r\n\r\n# The function split takes a list of numbers as a parameter and returns two\r\n# lists, one for even numbers and one for odd numbers.\r\n\r\n# The function code below tests the Split function.\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n# The function prints the following:\r\n# (4, [1, 3, 5, 7, 9])\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n# The function prints the following:\r\n# (9, [1, 2, 3, 4, 11])\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\n# The function prints the following:\r\n# (15, [1, 2, 3, 4])\r\n\r\n# The function split takes a list of numbers as a parameter and returns two\r\n# lists, one for even numbers and one for odd numbers.\r\n","votes":null},{"text":"\r\n    odds = []\r\n    evens = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odds.append(i)\r\n        else:\r\n            evens.append(i)\r\n    return odds, evens\r\n\r","votes":null},{"text":"\r\n    # 1. Create a new list to store odd numbers.\r\n    odd = []\r\n\r\n    # 2. Iterate through the list.\r\n    for i in list:\r\n        # 3. If the number is odd, add it to the new list.\r\n        if i % 2:\r\n            odd.append(i)\r\n\r\n    # 4. Return the new list.\r\n    return odd\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n# [1, 3, 5, 7, 9]\r\n```\r\n\r\n##### 7. Write a python function to check whether a number is even or odd.\r\n\r\n```python\r","votes":null},{"text":"\r\n    # list = [1,2,3,4,5,6,7,8,9,10]\r\n    # odd_list = []\r\n    # for i in list:\r\n    #     if i % 2!= 0:\r\n    #         odd_list.append(i)\r\n    # print(odd_list)\r\n\r\n    # list = ['apple', 'banana', 'cherry']\r\n    # odd_list = []\r\n    # for i in list:\r\n    #     if isinstance(i, str):\r\n    #         odd_list.append(i)\r\n    # print(odd_list)\r\n\r\n    # list = [1,2,3,4,5,6,7,8,9,10,'apple', 'banana', 'cherry']\r\n    # odd_list = []\r\n    # for i in list:\r\n    #     if isinstance(i, str):\r\n    #         odd_list.append(i)\r\n    # print(odd_list)\r\n\r\n    # list = ['apple', 1,2,3,4,5,6,7,8,9,10]\r\n    # odd_list = []\r\n    # for i in list:\r\n    #     if isinstance(i, str):\r\n    #         odd_list.append(i)\r\n    # print(odd_list)\r\n\r\n    # list = [1,2,3,4,5,6,7,8,9,10,'apple', 11, 12, 13]\r\n    # odd_list = []\r\n    # for i in list:\r\n    #     if isinstance(i, str):\r\n    #         odd_list.append(i)\r\n    # print(odd_list)\r\n\r\n    # list = [1,2,3,4,5,6,7,8,9,10,'apple', 11, 12, 13, 'orange']\r\n    # odd_list = []\r\n    # for i in list:\r\n    #     if isinstance(i, str):\r\n    #         odd_list.append(i)\r\n    # print(odd_list)\r\n\r\n    # list = [1,2,3,4,5,6,7,8,9,10,'apple', 11, 12, 13, 'orange'","votes":null},{"text":"\r\n    odd_list = []\r\n    even_list = []\r\n    for item in list:\r\n        if item % 2:\r\n            odd_list.append(item)\r\n        else:\r\n            even_list.append(item)\r\n    return odd_list, even_list\r\n\r\n# Test the function\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\nprint(Split([1,2,3,4,5,6,7,8,11,12]))\r\nprint(Split([1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8]))\r\nprint(Split([1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8]))","votes":null},{"text":"\r\n    i = 0\r\n    for element in list:\r\n        if element % 2!= 0:\r\n            list[i] = element\r\n            i += 1\r\n    return list\r\n\r\n# Function to print list elements\r\n\r","votes":null},{"text":"\r\n    # Write your function here\r\n    return [i for i in list if i % 2!= 0]\r\n\r\n# Test your function\r\nprint(Split([1,2,3,4,5]))\r\nprint(Split([1,2,3,'a','b','c']))\r\nprint(Split([1,2,3,'a','b','c',6,7,8,9,0]))","votes":null},{"text":"\r\n    # 1. Declare a variable to hold the result\r\n    odd_list = []\r\n\r\n    # 2. Iterate through the list\r\n    for item in list:\r\n        # 3. Check if the item is odd\r\n        if item % 2 == 1:\r\n            # 4. If it is odd, add it to the list\r\n            odd_list.append(item)\r\n\r\n    # 5. Return the list\r\n    return odd_list\r\n\r\n# 6. Print the result\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\n```\r\n\r\n**Output:**\r\n\r\n```bash\r\n>>> Split([1,2,3,4,5,6,7,8,9,10])\r\n[1, 3, 5, 7, 9]\r\n```\r\n\r\n## Function Arguments\r\n\r\nIn the previous section, we learned how to declare functions, but we haven't really learned how to pass parameters to functions.\r\n\r\nTo pass parameters to a function, we need to define the parameters in the function's declaration, and then pass those parameters into the function when we call it.\r\n\r\nWe can pass parameters using keyword or positional arguments.\r\n\r\n### Keyword Arguments\r\n\r\nIt is a way of passing parameters to a function by using keyword arguments.\r\n\r\nWe use keyword arguments when we want to pass a set of parameters to a function.\r\n\r\nFor example, we might have a function that calculates the area of a circle.\r\n\r\n```python\r","votes":null},{"text":"\r\n    odd_nums = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odd_nums.append(i)\r\n    return odd_nums\r\n\r\n# test\r\nassert Split([1, 2, 3, 4, 5]) == [1, 3, 5]\r\nassert Split([1, 3, 5, 7, 9, 11]) == [1, 3, 5, 7, 9]\r\n\r\n# Part 2\r","votes":null},{"text":"\r\n    odds = []\r\n    evens = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 == 0:\r\n            evens.append(list[i])\r\n        else:\r\n            odds.append(list[i])\r\n    return evens, odds\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odd.append(i)\r\n        else:\r\n            even.append(i)\r\n    return odd, even\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(len(list)):\r\n        if list[i] % 2 == 0:\r\n            count += 1\r\n    return count\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6]))","votes":null},{"text":"\r\n    return list[::2]\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n# [1, 3, 5, 7, 9]\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n# [1, 3, 5, 7, 9]\r\n\r\n# Function to find odd numbers from a mixed list\r","votes":null},{"text":"\r\n    return [x for x in list if x % 2 == 0]\r\n\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\n# [2,4,6,8,10]\r\nprint(Split([1,2,3,4,5,6,7,8,9,10,11]))\r\n# [1,3,5,7,9,11]\r\n\r\n# 1. Write a function to find the number of sublists in a list of lists.\r\n# 2. Write a function to find the number of unique items in a list of lists.\r\n# 3. Write a function to find the longest common sublist in a list of lists.\r\n# 4. Write a function to find the longest common sublist of all sublists of a list of lists.\r\n# 5. Write a function to find the common sublists of two lists of lists.\r\n\r\n# 1. Write a function to find the number of sublists in a list of lists.\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if(i % 2 == 0):\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return odd,even\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for item in list:\r\n        if item % 2!= 0:\r\n            odd.append(item)\r\n        else:\r\n            even.append(item)\r\n    return odd, even\r\n\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\n\r\n\r\n","votes":null},{"text":"\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            print(i)\r\n\r\n\r\n\"\"\"\r\nFunction:\r\n    Reversed\r\nDescription:\r\n    Write a python function to find reversed strings.\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    odd = [x for x in list if x % 2!= 0]\r\n    return odd\r\n\r\n# Call the function\r\nprint(Split([1,3,2,5,4]))\r\n```\r\n### Output:\r\n```\r\n[1, 3, 2, 5, 4]\r\n```\r\n\r\n## Python Function in Python\r\n\r\n* Functions are defined inside the `def` keyword\r\n\r\n### Syntax\r\n```python\r","votes":null},{"text":"\r\n    oddList = []\r\n    for item in list:\r\n        if item % 2!= 0:\r\n            oddList.append(item)\r\n    return oddList\r\n\r\nprint(Split(list))\r\n```\r\n**Output:**\r\n```\r\n[2, 4, 6, 8, 10, 12]\r\n```\r\n\r\n## Task 2\r\n**Create a function to find the largest number in a list.**\r\n\r\n**Example:**\r\n```\r","votes":null},{"text":"\r\n    for x in list:\r\n        if x % 2!= 0:\r\n            print(x)\r\n\r\nSplit(list)\r\n","votes":null},{"text":"\r\n    new_list = []\r\n    for num in list:\r\n        if num % 2 == 1:\r\n            new_list.append(num)\r\n    return new_list\r\n\r\nmy_list = [2, 3, 4, 5, 7, 6, 1, 9]\r\n\r\nprint(Split(my_list))\r\n```\r\n\r\n- Using a loop to find odd numbers\r\n- Using a list comprehension to find odd numbers\r\n- Using a built-in function to find odd numbers\r\n\r\nPlease note that this will be my first time submitting a pull request. Please let me know if there is anything I need to change. Thanks!\n<issue_comment>username_1: Thanks for your contribution. Please read the contribution guidelines and make the changes that I mentioned.\n<issue_comment>username_0: @username_1 I have made the changes you suggested. Please let me know if there is anything else I need to change. Thanks!\n<issue_comment>username_1: @username_0 Thanks for the contribution!","votes":null},{"text":"\r\n    oddList = []\r\n    evenList = []\r\n    for item in list:\r\n        if item % 2!= 0:\r\n            oddList.append(item)\r\n        else:\r\n            evenList.append(item)\r\n    return oddList, evenList\r\n\r\n\r\n# This is how you call the function.\r\noddList, evenList = Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\r\nprint(oddList)\r\nprint(evenList)\r\n","votes":null},{"text":"\r\n\r\n    if len(list) == 0:\r\n        return []\r\n\r\n    middle = len(list) \/\/ 2\r\n    first = list[:middle]\r\n    second = list[middle:]\r\n\r\n    return first + [list[middle]] + second\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(Split([1, 2, 3, 4, 5]))\r\n    print(Split([1, 2, 3, 4, 5, 6]))\r\n    print(Split([1, 3, 5, 7, 9]))\r\n","votes":null},{"text":"\r\n    odd = 0\r\n    even = 0\r\n    for i in range(len(list)):\r\n        if list[i] % 2 == 1:\r\n            odd += 1\r\n        else:\r\n            even += 1\r\n    print(odd, even)\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n\r\n    for x in list:\r\n        if x % 2 == 1:\r\n            odd.append(x)\r\n        else:\r\n            even.append(x)\r\n\r\n    return odd, even\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for item in list:\r\n        if item % 2 == 0:\r\n            even.append(item)\r\n        else:\r\n            odd.append(item)\r\n    return even, odd\r\n\r\n# write a function that takes a string as input and returns the reversed string.\r","votes":null},{"text":"\r\n    for i in list:\r\n        if i % 2!= 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n# Call the function to find odd numbers\r\nodd_number = Split(list)\r\n\r\n# Print the odd numbers\r\nprint(odd_number)\r\n","votes":null},{"text":"\r\n    list_even = []\r\n    list_odd = []\r\n    for item in list:\r\n        if item % 2 == 0:\r\n            list_even.append(item)\r\n        else:\r\n            list_odd.append(item)\r\n    return list_even, list_odd\r\n\r\n\r","votes":null},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i % 2:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r\n# %%\r\nPrint(Split([2, 5, 1, 2, 3, 6]))\r\n\r\n# %%\r\n# 1. Write a python function to find the length of a list.\r\n# 2. Write a python function to reverse a list.\r\n# 3. Write a python function to sort a list.\r\n# 4. Write a python function to count the number of odd numbers in a list.\r\n# 5. Write a python function to remove duplicates from a list.\r\n# 6. Write a python function to merge two lists.\r\n# 7. Write a python function to find the length of a list.\r\n# 8. Write a python function to find the length of the longest word in a list.\r\n# 9. Write a python function to find the length of the shortest word in a list.\r\n# 10. Write a python function to find the length of the longest and shortest word in a list.\r\n# 11. Write a python function to find the length of the longest word in a list.\r\n# 12. Write a python function to find the length of the shortest word in a list.\r\n# 13. Write a python function to find the length of the longest and shortest word in a list.\r\n# 14. Write a python function to find the length of the longest word in a list.\r\n# 15. Write a python function to find the length of the shortest word in a list.\r\n# 16. Write a python function to find the length of the longest and shortest word in a list.\r\n# 17. Write a python function to find the length of the longest word in a list.\r\n# 18. Write a python function to find the length of the shortest word in a list.\r\n# 19. Write a python function to find the length of the longest and shortest word in a list.\r\n# 20. Write a python function to find the length of the longest word in a list.\r\n#","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for item in list:\r\n        if item % 2!= 0:\r\n            odd.append(item)\r\n        else:\r\n            even.append(item)\r\n    return odd, even\r\n\r\n\r\n# Write a python function to extract the middle element of a list.\r","votes":null},{"text":"\r\n    odds = []\r\n    evens = []\r\n    for item in list:\r\n        if item % 2 == 0:\r\n            evens.append(item)\r\n        else:\r\n            odds.append(item)\r\n    return odds, evens\r\n\r","votes":null},{"text":"\r\n\r\n    # your code here\r\n\r\n    return\r\n\r","votes":null},{"text":"\r\n    odds = []\r\n    evens = []\r\n\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            evens.append(i)\r\n        else:\r\n            odds.append(i)\r\n    return odds, evens\r\n\r\n# Call the function\r\nodds, evens = Split([1, 2, 3, 4, 5, 6])\r\nprint(odds)\r\nprint(evens)\r\n```\r\n\r\nOutput:\r\n```\r\n[1, 3, 5]\r\n[2, 4, 6]\r\n```\n<issue_comment>username_1: Hello @username_0,\r\n\r\nYou can create a function called `Split` that takes a list of numbers as an argument and returns two lists one containing the odd numbers and another containing the evens. You can use the `for` loop to create the two lists.\r\n\r\n```\r","votes":null},{"text":"\r\n    # YOUR CODE HERE\r\n    return list\r\n\r\n# test case\r","votes":null},{"text":"\r\n    odd_list = []\r\n    even_list = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2!= 0:\r\n            odd_list.append(list[i])\r\n        else:\r\n            even_list.append(list[i])\r\n    return odd_list, even_list\r\n\r","votes":null},{"text":"\r\n    return [x for x in list if x % 2!= 0]\r\n\r\n# Using the function\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) # [1, 3, 5, 7, 9, 11, 13, 15]\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])) # [1, 3, 5, 7, 9, 11, 13, 15, 16]\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) # [1, 3, 5, 7, 9, 11, 13]\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])) # [1, 3, 5, 7, 9, 11, 13, 15, 16, 17]\r\nprint(Split([1, 2, 3, 4, 5, 6])) # [1, 3, 5, 7, 9, 11]\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return odd, even\r\n\r\nif __name__ == \"__main__\":\r\n    main()","votes":null},{"text":"\r\n    number = 0\r\n    for element in list:\r\n        if element % 2!= 0:\r\n            number += 1\r\n    return number\r\n\r\nprint(Split([1,2,3,4,5,6,7,8,9]))\r\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\r\nprint(Split([2,4,6,8,10,12,14,16,18,20]))\r\nprint(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))","votes":null},{"text":"\r\n    for num in list:\r\n        if num % 2 == 1:\r\n            odd_list.append(num)\r\n    return odd_list\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return odd,even\r\n\r","votes":null},{"text":"\r\n\r\n    # We create a list of even and odd numbers\r\n    even = []\r\n    odd = []\r\n    for item in list:\r\n        if item % 2 == 0:\r\n            even.append(item)\r\n        else:\r\n            odd.append(item)\r\n    return even, odd\r\n\r\n\r\neven, odd = Split([1, 2, 3, 4, 5, 6])\r\nprint(even)\r\nprint(odd)\r\n","votes":null},{"text":"\r\n    odd = 0\r\n    even = 0\r\n    for i in list:\r\n        if (i % 2!= 0):\r\n            odd += 1\r\n        else:\r\n            even += 1\r\n    print(\"Odd: \", odd)\r\n    print(\"Even: \", even)\r\n\r\n# Write a python function to find sum of all the numbers in a list.\r\n\r","votes":null}],"time":{"count":50.0,"avg":136651.79568,"std":39514.970738312,"cov":0.2891653969}}
{"id":555,"question":"def difference(n) :\r\n    \"\"\"Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\"\"\"","answers":[{"text":"\r\n    return sum(map(lambda x: x**3, range(1, n+1))) - sum(range(1, n+1))\r\n\r\n\r","votes":70340.636},{"text":"\r\n    s=0\r\n    for i in range(n+1):\r\n        s+=(i**3)\r\n    return s-sum(range(n+1))\r\n\r","votes":75509.628},{"text":"\r\n    sum_cubes = 0\r\n    sum_nums = 0\r\n    for i in range(1, n+1):\r\n        sum_cubes = sum_cubes + i**3\r\n        sum_nums = sum_nums + i\r\n    return sum_cubes - sum_nums\r\n\r","votes":75643.752},{"text":"\r\n    sum1=0\r\n    for i in range(1,n+1):\r\n        sum1= sum1+i**3\r\n    sum2=0\r\n    for i in range(1,n+1):\r\n        sum2= sum2+i\r\n    return(sum1-sum2)\r\n\r","votes":79920.116},{"text":"\r\n    return sum(x**3 for x in range(1,n+1)) - sum(range(1,n+1))\r\n\r\nif __name__ == '__main__' :\r\n    print(difference(1000))\r\n","votes":83571.844},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1, n+1):\r\n        sum1 += i**3\r\n    for i in range(1, n+1):\r\n        sum2 += i\r\n    return abs(sum1 - sum2)\r\n\r","votes":85823.188},{"text":"\r\n    s = 0\r\n    for i in range(1, n+1):\r\n        s += i**3\r\n    return s - sum(range(1, n+1))\r\n\r","votes":89820.264},{"text":"\r\n    sum_of_cubes = 0\r\n    for i in range(1,n+1) :\r\n        sum_of_cubes += i**3\r\n    sum_of_natural = 0\r\n    for i in range(1,n+1) :\r\n        sum_of_natural += i\r\n    return sum_of_cubes-sum_of_natural\r\n\r\nprint(difference(10))\r\n\r\n# 13. Write a python program to find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included). The numbers obtained should be printed in a comma-separated sequence on a single line.\r","votes":89895.736},{"text":"\r\n    sum_cubes = 0\r\n    sum_natural = 0\r\n    for i in range(1,n+1):\r\n        sum_cubes += i**3\r\n        sum_natural += i\r\n    return(abs(sum_cubes-sum_natural))\r\n\r","votes":90427.704},{"text":"\r\n    return sum([i**3 for i in range(n+1)]) - sum(range(1,n+1))\r\n\r","votes":91166.288},{"text":"\r\n    sum_cubes = 0\r\n    sum_natural_numbers = 0\r\n    for i in range(1, n+1):\r\n        sum_cubes += i**3\r\n        sum_natural_numbers += i\r\n    return sum_cubes - sum_natural_numbers\r\n\r","votes":92447.564},{"text":"\r\n    sum1=sum(map(lambda x: x**3, range(1,n+1)))\r\n    sum2=sum(range(1,n+1))\r\n    return sum1-sum2\r\n\r\ndifference(10)\r","votes":97415.624},{"text":"\r\n    sum_cubes = 0\r\n    sum_natural = 0\r\n    for i in range(1,n+1):\r\n        sum_cubes += i**3\r\n        sum_natural += i\r\n    return sum_cubes-sum_natural\r\n    \r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the number:\"))\r\n    print(difference(n))\r\n    \r\n    \r\n    \r\n","votes":99455.592},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_natural = 0\r\n    for i in range(1,n+1) :\r\n        sum_of_cubes += i**3\r\n        sum_of_natural += i\r\n    return sum_of_cubes - sum_of_natural\r","votes":99913.968},{"text":"\r\n    return sum(i**3 for i in range(1,n+1)) - sum(range(1,n+1))\r\n\r","votes":102515.984},{"text":"\r\n    \r\n    sum_cubes = 0\r\n    for i in range(1,n+1):\r\n        sum_cubes += i**3\r\n    sum_natural = 0\r\n    for i in range(1,n+1):\r\n        sum_natural += i\r\n    return sum_cubes-sum_natural\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the value of n : \"))\r\n    print(\"Difference of sum of cubes of first \",n,\" natural numbers and the sum of first \",n,\" natural numbers is \",difference(n))\r\n    \r\n        ","votes":103958.996},{"text":"\r\n    n_list = list(range(1, n+1))\r\n    return sum(pow(x, 3) for x in n_list) - sum(n_list)\r\n\r\n\r","votes":104420.12},{"text":"\r\n    sum_cubes = 0\r\n    sum_num = 0\r\n    for i in range(1, n+1) :\r\n        sum_cubes += i ** 3\r\n        sum_num += i\r\n    return sum_cubes - sum_num\r\n\r\nprint('Difference between sum of cubes of first 10 natural numbers and the sum of first 10 natural numbers is : ', difference(10))\r\n","votes":104513.972},{"text":"\r\n    s = 0\r\n    s1 = 0\r\n    for i in range(1,n+1) :\r\n        s = s + i**3\r\n        s1 = s1 + i\r\n    return (s-s1)\r\n\r","votes":105485.204},{"text":"\r\n    return sum([i**3 for i in range(1, n+1)]) - sum(range(1, n+1))\r\n\r","votes":108333.96},{"text":"\r\n    sum_of_cubes = 0\r\n    for i in range(1, n + 1):\r\n        sum_of_cubes = sum_of_cubes + i**3\r\n    sum_of_natural_numbers = 0\r\n    for i in range(1, n + 1):\r\n        sum_of_natural_numbers = sum_of_natural_numbers + i\r\n    difference = sum_of_cubes - sum_of_natural_numbers\r\n    return difference\r\n\r\ndifference(10)\r\n\r\n# 3. Write a python function to find the largest number among the first n natural numbers.\r\n# You can use the if-else statement\r","votes":111821.888},{"text":"\r\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\r\n    sum_of_natural = sum(range(1, n+1))\r\n    return sum_of_cubes - sum_of_natural\r\n\r\n\r\nprint(\"The difference between the sum of cubes of first 10 natural numbers and the sum of first 10 natural numbers is :\", difference(10))","votes":113372.992},{"text":"\r\n    sum_cubes = 0\r\n    for i in range(1, n+1):\r\n        sum_cubes = sum_cubes + i**3\r\n    sum_first = 0\r\n    for i in range(1, n+1):\r\n        sum_first = sum_first + i\r\n    return sum_cubes - sum_first\r\n\r\nprint(difference(5))\r\n","votes":118585.34},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_natural = 0\r\n    for i in range(1, n+1) :\r\n        sum_of_cubes += i*i*i\r\n        sum_of_natural += i\r\n    return (sum_of_cubes - sum_of_natural)\r\n\r\nprint(difference(100))","votes":122935.048},{"text":"\r\n    \r\n    sum_cubes = 0\r\n    sum_natural = 0\r\n    for i in range(1,n+1):\r\n        sum_cubes += i**3\r\n        sum_natural += i\r\n    return sum_cubes - sum_natural\r\n\r\nprint(difference(30))\r\n\r\n# -\r\n\r\n# <h3>Exercise 14<\/h3>\r\n#\r\n# Write a python function to find the sum of the first n natural numbers where the first 2 natural numbers are 2 and the last n natural numbers are 2.\r\n\r\n# +\r","votes":123329.02},{"text":"\r\n    return sum(x**3 for x in range(1, n+1)) - sum(range(1, n+1))\r\n\r","votes":123833.576},{"text":"\r\n    return sum(x**3 for x in range(1,n+1)) - sum(x for x in range(1,n+1))\r\n\r\nprint(difference(10))","votes":123974.416},{"text":"\r\n    sum_cubes = 0\r\n    sum_natural = 0\r\n    for i in range(1,n+1):\r\n        sum_cubes += i**3\r\n        sum_natural += i\r\n    return sum_cubes-sum_natural\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter the number\\n\"))\r\n    print(\"Difference between sum of cubes of first {} natural numbers and the sum of first {} natural numbers is : {}\".format(n,n,difference(n)))","votes":124284.828},{"text":"\r\n    sum_cubes = 0\r\n    for i in range(1, n+1) :\r\n        sum_cubes += i**3\r\n    sum_numbers = 0\r\n    for i in range(1, n+1) :\r\n        sum_numbers += i\r\n    return sum_cubes - sum_numbers\r\n\r","votes":126399.776},{"text":"\r\n    return sum(i**3 for i in range(1, n+1)) - sum(range(1, n+1))\r\n\r","votes":127046.988},{"text":"\r\n    s = 0\r\n    for i in range(1, n+1):\r\n        s += i**3\r\n    return s - sum([i for i in range(1, n+1)])\r\n\r\nif __name__ == \"__main__\":\r\n    print(difference(5))","votes":128849.456},{"text":"\r\n    sum_cubes = 0\r\n    for i in range(1, n + 1) :\r\n        sum_cubes += i ** 3\r\n    sum_n = 0\r\n    for i in range(1, n + 1) :\r\n        sum_n += i\r\n    return sum_cubes - sum_n\r\n\r","votes":129395.632},{"text":"\r\n    n_sum = 0\r\n    for i in range(1,n+1):\r\n        n_sum += i**3\r\n    i = 1\r\n    while i <= n:\r\n        n_sum -= i\r\n        i += 1\r\n    return n_sum\r\n\r","votes":131371.128},{"text":"\r\n    sum_cubes = 0\r\n    sum_natural = 0\r\n    for i in range(1, n + 1) :\r\n        sum_cubes += i ** 3\r\n        sum_natural += i\r\n    return abs(sum_cubes - sum_natural)\r\n\r\nprint(difference(100))\r\n","votes":137552.292},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_numbers = 0\r\n    for i in range(1, n+1) :\r\n        sum_of_cubes += i**3\r\n        sum_of_numbers += i\r\n    return sum_of_cubes - sum_of_numbers\r\n\r\n\r\nprint(difference(10))\r\n\r\n# + [markdown] id=\"6sP-7Q7q-5bV\" colab_type=\"text\"\r\n# ### Task 2\r\n#\r\n#\r\n#\r\n# You are given an array of integers. Find all the contiguous subarrays of this array whose sum is greater than K.\r\n#\r\n# Example 1:\r\n#\r\n# Input: arr[] = {1, 2, 3, 1}, K = 3\r\n# Output:\r\n# 1, 2, 3\r\n# Example 2:\r\n#\r\n# Input: arr[] = {1, 2, 3, 4}, K = 7\r\n# Output:\r\n# 4\r\n#\r\n# Your Task:\r\n# You don't need to read input or print anything. Your task is to complete the function greaterThanK() which takes the array arr[] and the integer K as input parameters and returns the subarrays. \r\n#\r\n# Expected Time Complexity: O(n2).\r\n# Expected Auxiliary Space: O(1).\r\n# Constraints:\r\n# 1 <= N <= 104\r\n# 0 <= Ai <= 106\r\n# 1 <= K <= 106\r\n#\r\n#\r\n\r\n# + id=\"gX1r9rW8-5bW\" colab_type=\"code\" colab={}\r","votes":138450.012},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_natural_numbers = 0\r\n    for i in range(1, n + 1):\r\n        sum_of_cubes += i ** 3\r\n        sum_of_natural_numbers += i\r\n    return sum_of_cubes - sum_of_natural_numbers\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(difference(1000))\r\n","votes":140594.56},{"text":"\r\n    s = 0\r\n    for i in range(1,n+1):\r\n        s+=i**3\r\n    return s - sum([i for i in range(1,n+1)])\r\n\r\nprint(difference(10))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n\r\n# Recursive function\r","votes":140979.016},{"text":"\r\n    sum_cubes = 0\r\n    sum_natural = 0\r\n    for i in range(1,n+1):\r\n        sum_cubes += (i**3)\r\n        sum_natural += i\r\n    return sum_cubes - sum_natural\r\n\r\nprint(difference(10))\r\n# -\r\n\r\n# #### 1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.2.2.1.2.2.3.","votes":149543.508},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum = sum+i**3\r\n    sum1 = 0\r\n    for i in range(1,n+1):\r\n        sum1 = sum1+i\r\n    return(sum-sum1)\r\nprint(difference(100))\r\n","votes":166559.424},{"text":"\r\n    first_n = [i for i in range(1, n+1)]\r\n    sum_of_cubes = [a*a*a for a in first_n]\r\n    sum_of_natural_numbers = [a for a in first_n]\r\n    sum_of_cubes_sum = sum(sum_of_cubes)\r\n    sum_of_natural_numbers_sum = sum(sum_of_natural_numbers)\r\n    return sum_of_cubes_sum - sum_of_natural_numbers_sum\r\n\r\ndifference(1000)","votes":174082.78},{"text":"\r\n    sum_cubes = sum(i**3 for i in range(1,n+1))\r\n    sum_naturals = sum(range(1,n+1))\r\n    diff = abs(sum_cubes - sum_naturals)\r\n    return diff        \r\n\r\nprint(difference(100))","votes":216250.196},{"text":"\r\n    first_n_cubes = [i**3 for i in range(1, n+1)]\r\n    first_n = [i for i in range(1, n+1)]\r\n    return sum(first_n_cubes) - sum(first_n)\r\n\r\n\r\nprint(difference(10))\r\n","votes":231805.984},{"text":"\r\n    s = 0\r\n    for i in range(1, n+1) :\r\n        s += i**3\r\n    return s - sum(range(1, n+1))\r\n\r\nprint(difference(1000))\r\n\r\n# -\r\n\r\n# ### 5.6.4.2.1.2.5.4.2.1.2.6.1.1.2.1.2.1.2.1.3.1.1.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.3.1.1.2.2.1.2.1.2.1.","votes":239650.704},{"text":"\r\n    s = 0\r\n    for i in range(1, n+1):\r\n        s += i**3\r\n    return s - sum(range(1, n+1))\r\n\r\nprint(difference(1000))","votes":241918.996},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1,n+1):\r\n        sum1 += i**3\r\n        sum2 += i\r\n    return abs(sum1-sum2)\r\nprint(difference(1000))\r\n\r\n# Program to find the sum of the digits of a number.\r\n\r","votes":253464.8},{"text":"\r\n    sum_of_cubes = 0\r\n    for i in range(1,n+1):\r\n        sum_of_cubes += (i**3)\r\n    sum_of_natural_numbers = 0\r\n    for i in range(1,n+1):\r\n        sum_of_natural_numbers += i\r\n    return abs(sum_of_cubes - sum_of_natural_numbers)\r\n\r\nprint(difference(1000))\r\n\"\"\"\r\nTime Complexity of the program is O(n)\r\nSpace Complexity of the program is O(1)\r\n\"\"\"\r\n","votes":273002.96},{"text":"\r\n    total = 0\r\n    for i in range(1, n+1) :\r\n        total += i ** 3\r\n    return total - sum(range(1, n+1))\r\n\r\nprint(difference(10))\r\nprint(difference(100))\r\nprint(difference(1000))\r\nprint(difference(10000))","votes":2115033.3759999997},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        sum += i ** 3\r\n    return sum - sum(range(1, n + 1))\r\nprint(difference(100))\r\n\r\n# Program to find the sum of cubes of first 10 natural numbers\r","votes":null},{"text":"\r\n    return n * (n + 1) * (2 * n + 1) \/\/ 6\r\n\r\nprint(difference(15))","votes":null},{"text":"\r\n    return n**3 - sum(range(n+1))\r\n\r","votes":null},{"text":"\r\n    a=0\r\n    b=0\r\n    c=0\r\n    for i in range(1,n+1):\r\n        a=a+i**3\r\n    for j in range(1,n+1):\r\n        b=b+j\r\n    if(a==b):\r\n        c=a-b\r\n    else:\r\n        c=0\r\n    return c\r\n\r\nprint(difference(10))","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(n):\r\n        sum += i**3\r\n    return sum - sum_of_natural_numbers(n)\r\n\r\nprint(\"The difference between sum of cubes of first 10 natural numbers and sum of first 10 natural numbers is\", difference(10))\r\n\r\n# -\r\n\r\n# A very important feature of Python is that it is case-sensitive. This means that the variable names have to be written exactly the way they are written in the program. For example, if the variable name is written as \u201cCelsius\u201d instead of \u201ccelsius\u201d, there is no way to access the variable from the program.\r\n\r\n# +\r\n# Example of a variable name written in lowercase\r\n# The program will not work as expected\r\n# Variable name must be written in uppercase\r\n# The variable name must be written exactly the same as in the program\r\n# Variable name can contain any character\r\n\r\n# Variable names in Python can contain more than one word\r\n# It is recommended to give variable names with short names\r\n# The following variable names are used frequently in Python programs\r\n# -\r\n\r\n# | Variable Name | Variable Description |\r\n# | ------------- | ------------- |\r\n# | x | Represents a variable that holds a value |\r\n# | a | Represents a variable that holds a value |\r\n# | b | Represents a variable that holds a value |\r\n# | c | Represents a variable that holds a value |\r\n# | d | Represents a variable that holds a value |\r\n# | e | Represents a variable that holds a value |\r\n# | f | Represents a variable that holds a value |\r\n# | g | Represents a variable that holds a value |\r\n# | h | Represents a variable that holds a value |\r\n# | i | Represents a variable that holds a value |\r\n# | j | Represents a variable that holds a value |\r\n# | k | Represents a variable that holds a value |\r\n# | l | Represents a variable that holds a value |\r\n# | m | Represents a variable that holds a value |\r\n# | n | Represents a variable that holds a value |\r\n# ","votes":null},{"text":"\r\n    if n == 1 :\r\n        return 1\r\n    else :\r\n        return n*(n+1) + difference(n-1)\r\n\r\n# Driver code\r\nif __name__ == \"__main__\" :\r\n    print(difference(10))","votes":null},{"text":"\r\n    return sum(range(n))**3 - sum(range(n))\r\n\r\nprint(difference(1000))","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(n) :\r\n        total += i**3\r\n    return sum(i for i in range(n)) - total\r\n\r\nprint(difference(1000))","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(n):\r\n        sum += i**3\r\n    return sum - sum_of_natural_numbers(n)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(difference(1000))","votes":null},{"text":"\r\n    num = 1\r\n    sum1 = 0\r\n    sum2 = 0\r\n    while num <= n :\r\n        sum1 += num ** 3\r\n        sum2 += num\r\n        num += 1\r\n    return sum1 - sum2\r\n\r\nprint(difference(20))\r\nprint(difference(100))\r\nprint(difference(500))\r\nprint(difference(1000))\r\nprint(difference(2000))\r\nprint(difference(5000))\r\nprint(difference(10000))\r\nprint(difference(20000))\r\nprint(difference(50000))\r\nprint(difference(100000))\r\nprint(difference(200000))\r\nprint(difference(500000))\r\nprint(difference(1000000))\r\nprint(difference(2000000))\r\nprint(difference(5000000))\r\nprint(difference(10000000))\r\nprint(difference(20000000))\r\nprint(difference(50000000))\r\nprint(difference(100000000))\r\nprint(difference(200000000))\r\nprint(difference(500000000))\r\nprint(difference(1000000000))\r\nprint(difference(2000000000))\r\nprint(difference(5000000000))\r\nprint(difference(10000000000))\r\nprint(difference(20000000000))\r\nprint(difference(50000000000))\r\nprint(difference(100000000000))\r\nprint(difference(200000000000))\r\nprint(difference(5000000","votes":null},{"text":"\r\n    cubes = [i**3 for i in range(1,n+1)]\r\n    return sum(range(1,n+1)) - sum(cubes)\r\nprint(difference(10))\r\n```\r\nOutput:\r\n```\r\n45\r\n```\r\n#### 5. Write a python function to find the factors of a given number.\r\n```python\r","votes":null},{"text":"\r\n    sum_of_cubes = 0\r\n    for i in range(1, n+1) :\r\n        sum_of_cubes += (i**3)\r\n    sum_of_natural = 0\r\n    for i in range(1, n+1) :\r\n        sum_of_natural += i\r\n    return sum_of_natural - sum_of_cubes\r\n\r\nprint(\"Difference between sum of cubes of first 10 natural numbers and sum of first 10 natural numbers is : \", difference(10))","votes":null},{"text":"\r\n    cubes = [x**3 for x in range(n)]\r\n    return sum(cubes) - sum(range(1, n+1))\r\n\r","votes":null},{"text":"\r\n    return sum([int(i)**3 for i in range(1,n+1)]) - sum(range(1,n+1))\r\n\r\nprint(difference(2000000))","votes":null},{"text":"\r\n    sum_first_n = 0\r\n    sum_sum_of_cubes = 0\r\n    for i in range(n):\r\n        sum_first_n += i\r\n        sum_sum_of_cubes += sum_first_cubes(i)\r\n    return sum_first_n - sum_sum_of_cubes\r\n\r\nprint(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is : {}\".format(difference(100)))\r\n\r","votes":null},{"text":"\r\n    return n*(n+1)*(2*n+1)\/\/6\r\n\r\nprint(difference(10))\r\n\"\"\"The difference between the sum of cubes of first 10 natural numbers and the sum of first 10 natural numbers is 272.\"\"\"\r\n\r\n\"\"\"\r\nNow you have to write a python function to find the sum of the squares of the first N natural numbers till N = 1000.\r\n\"\"\"\r","votes":null},{"text":"\r\n\r\n    # your code here\r\n    n = int(input('Enter a number: '))\r\n    sum_of_cubes = 0\r\n    sum_of_natural = 0\r\n    for i in range(1, n + 1):\r\n        sum_of_cubes += i ** 3\r\n        sum_of_natural += i\r\n    return sum_of_cubes - sum_of_natural\r\n\r\nprint(difference(10))\r\n","votes":null},{"text":"\r\n    return sum(range(1,n+1)**3) - sum(range(1,n+1))\r\n\r","votes":null},{"text":"\r\n    return sum(i**3 for i in range(n)) - sum(range(1, n+1))\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter the number of natural numbers to generate the fibonacci series : \"))\r\n    print(sum(fib(i) for i in range(n)))\r\n    print(difference(n))\r\n```\r\n\r\nOutput :\r\n```\r\nEnter the number of natural numbers to generate the fibonacci series : 5\r\n0\r\n1\r\n1\r\n2\r\n3\r\n5\r\n```\r\nThe difference between the sum of cubes of first 5 natural numbers and the sum of first 5 natural numbers is 5.\r\n\r\n## Python - 15. Write a python function to find the sum of all prime numbers between 1 and 1000.\r\n\r\n```python\r","votes":null},{"text":"\r\n    return (sum(map(lambda x : x**3, range(n))) - sum(range(1,n+1)))\r\n\r\nprint(difference(20))\r\n```\r\n\r\n#### Output\r\n\r\n```\r\n4950\r\n```\r\n\r\n---\r\n\r\n### 3. Fibonacci Series\r\n\r\n#### Problem Statement\r\n\r\nWrite a python function to find the nth Fibonacci number.\r\n\r\n#### Example 1\r\n\r\n```\r","votes":null},{"text":"\r\n    return sum(range(1, n + 1))**3 - sum(range(1, n + 1))\r\n\r\nprint(difference(1000))\r\n\r","votes":null},{"text":"\r\n    return n*(n+1)*(2*n+1)\/\/6\r\n\r","votes":null},{"text":"\r\n    sum_cubes = 0\r\n    for i in range(1,n+1):\r\n        sum_cubes += i**3\r\n    sum_nums = 0\r\n    for j in range(1,n+1):\r\n        sum_nums += j\r\n    return sum_cubes-sum_nums\r\n\r\nprint(difference(100))<jupyter_output>142857<jupyter_text>Question 12: *Write a python function to find the sum of natural numbers which are divisible by 7 and 5 without using nested loops.*<jupyter_code","votes":null},{"text":"\r\n    return (n*n*n*(n+1)*(n+1)\/6)-(sum(range(1,n+1)))\r\n\r\nprint(difference(100))","votes":null},{"text":"\r\n    return sum(i**3 for i in range(1,n+1)) - sum(range(1,n+1))\r\n\r\nprint(difference(10))\r\n\r\n```\r\nI hope it helps.\n<issue_comment>username_0: @username_1\r\nThank you for your answer.\r\nIt did work!\r\nThank you!<issue_closed>","votes":null},{"text":"\r\n    return (n*(n+1)*(2*n+1))\/\/6\r\n\r\nprint(difference(int(input(\"Enter the value of n: \"))))\r\n","votes":null},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(n):\r\n        sum1 = sum1 + i**3\r\n    for i in range(n):\r\n        sum2 = sum2 + i\r\n    return (sum1 - sum2)\r\n\r","votes":null},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_natural = 0\r\n    for i in range(n) :\r\n        sum_of_cubes += (i**3)\r\n        sum_of_natural += i\r\n    return sum_of_cubes - sum_of_natural\r\n\r\nprint(difference(500))\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum = sum + i**3\r\n    return sum - sum(range(1,n+1))\r\n\r\nprint(difference(1000))","votes":null},{"text":"\r\n    return n**3 + sum(range(1,n+1)) - sum(map(lambda x:x**3, range(1,n+1)))\r\n\r\nprint(difference(1000))\r\n```\n<issue_comment>username_0: Nice!<issue_closed>","votes":null},{"text":"\r\n    c = 0\r\n    for i in range(1,n+1):\r\n        c+=(i**3)\r\n    s = 0\r\n    for i in range(1,n+1):\r\n        s+=i\r\n    return c-s\r\nprint(difference(100))\r\n```\r\n<br>\r\n<hr>\r\n\r\n## Fibonacci Series\r\n<br>\r\nFibonacci series is a series of numbers that are the sum of the previous two numbers. The first two numbers are 0 and 1. The third number is the sum of the two previous numbers. The fourth number is the sum of the two previous numbers. And so on.\r\n\r\n```python\r","votes":null},{"text":"\r\n    return sum(range(n))**3 - sum(range(n))\r\nprint(difference(1000))\r\n```\r\n\r\nThe output is 2100000.\r\n\r\nNow, we will learn to use recursion in python. Recursion is a process in which a function calls itself.\r\n\r\n## Recursion\r\nRecursion is a way to solve a problem by calling itself. The main advantage of recursion is that it allows the program to solve a problem without using excessive memory.\r\n\r\nThe general form of recursion is as follows:\r\n\r\n``` python\r","votes":null},{"text":"\r\n    s1 = 0\r\n    s2 = 0\r\n    for i in range(n):\r\n        s1 += i**3\r\n        s2 += i\r\n    return abs(s1 - s2)\r\n\r\nprint(difference(1000))\r\n","votes":null},{"text":"\r\n    sum_of_cubes = 0\r\n    for i in range(n) :\r\n        sum_of_cubes += i**3\r\n    sum_of_natural_numbers = 0\r\n    for i in range(1,n+1) :\r\n        sum_of_natural_numbers += i\r\n    return sum_of_cubes - sum_of_natural_numbers\r\n\r\nprint(difference(1000))","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(n):\r\n        sum += (i ** 3)\r\n    sum2 = 0\r\n    for i in range(n):\r\n        sum2 += i\r\n    return (abs(sum - sum2))\r\n\r\nprint(difference(1000))","votes":null},{"text":"\r\n    return sum(range(1,n+1))**3 - sum(range(1,n+1))\r\n\r\n\r","votes":null},{"text":"\r\n    sum_cubes = 0\r\n    for i in range(1, n+1) :\r\n        sum_cubes += i**3\r\n    sum_natural = 0\r\n    for j in range(1, n+1) :\r\n        sum_natural += j\r\n    difference = sum_cubes - sum_natural\r\n    return difference\r\n\r\ndifference(100)\r\n```\r\nThe output is: \r\n```\r\n1701411834604690\r\n```\r\n## 3.1.2.1.2. The timeit function\r\nThe `timeit` function is used to get the execution time of a code. The syntax is as follows.\r\n```\r\nfrom time import time\r\ntime()\r\n```\r\nThe output is:\r\n```\r\n1528927815.8777172\r\n```\r\nThe first argument of the `timeit` function is the code to be executed. The second argument is an optional argument that specifies the number of times to execute the given code. The default number of times is 10. The output is:\r\n```\r\n1528927815.8190308\r\n1528927815.8177919\r\n1528927815.8169532\r\n1528927815.8152177\r\n1528927815.8148376\r\n1528927815.8138853\r\n1528927815.8134545\r\n1528927815.812605\r\n1528927815.8121566\r\n```\r\n## 3.1.2.1.3. The random function\r\nThe `random` function is used to generate random numbers. The syntax is as follows.\r\n```\r\nimport random\r\nrandom.randin","votes":null},{"text":"\r\n    return(n*n*n*(n*(n+1)*(n+1)+1)\/6)\r\n\r\nprint(difference(10))\r\n","votes":null},{"text":"\r\n\r\n    s = 0\r\n    for i in range(1, n + 1):\r\n        s += i ** 3\r\n    return s - sum(range(1, n + 1))\r\n\r\nn = int(input())\r\nprint(difference(n))\r\n","votes":null},{"text":"\r\n    x = 0\r\n    for i in range(n) :\r\n        x += i**3\r\n    return x - sum(range(n))\r\n\r\nprint(difference(100))\r\n```\r\n\r\n### Output\r\n\r\n```\r\n3389506771\r\n```\r\n\r\n## 4. 2048 Game\r\n\r\n```python\r\nimport random\r\n\r\nclass Board():\r\n   ","votes":null},{"text":"\r\n    result=0\r\n    for i in range(1,n+1):\r\n        result = result + i**3\r\n    result = result + sum(range(1,n+1))\r\n    return(result)\r\n\r","votes":null},{"text":"\r\n    sum_cubes = 0\r\n    sum_natural = 0\r\n    for i in range(n) :\r\n        sum_cubes += i**3\r\n        sum_natural += i\r\n    return sum_cubes - sum_natural\r\n\r","votes":null},{"text":"\r\n    sum_cubes = 0\r\n    sum_natural = 0\r\n    for i in range(n):\r\n        sum_cubes += i**3\r\n        sum_natural += i\r\n    return sum_cubes - sum_natural\r\n\r\nprint(difference(35))\r\n","votes":null},{"text":"\r\n    return sum(range(n))**3 - sum(range(1, n+1))\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(difference(n))\r\n        \r\n","votes":null},{"text":"\r\n    t=0\r\n    for i in range(1,n+1):\r\n        t=t+i**3\r\n    return  t-sum(range(1,n+1))\r\n\r\n# Driver code\r\nn=int(input())\r\nprint(difference(n))\r\n","votes":null},{"text":"\r\n    for i in range(1, n+1):\r\n        result += i**3\r\n    return result - sum(range(1, n+1))\r\n\r\n\r\nprint(difference(10))\r\n\r\n# In[26]:\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return n * (n + 1) \/\/ 2 - sum(i**3 for i in range(1, n + 1))\r\n\r","votes":null},{"text":"\r\n    sum_cubes = 0\r\n    sum_natural = 0\r\n    for i in range(1, n+1):\r\n        sum_cubes += i**3\r\n        sum_natural += i\r\n    return str(abs(sum_cubes - sum_natural))\r\ndifference(1000)<jupyter_output><empty_output>","votes":null},{"text":"\r\n    return(0)\r\n\r","votes":null},{"text":"\r\n    return sum(range(n))**3 - sum(range(1,n+1))\r\n\r\n\r\nprint(difference(10))","votes":null},{"text":"\r\n    return (n*(n+1)*((2*n)+1))\/\/6\r\n\r\ndifference(10)\r\n\r\n# + [markdown] id=\"0402d2e7-a629-4904-8c47-95b61e7c6d73\"\r\n# ### 9. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 10. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 11. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 12. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 13. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 14. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 15. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 16. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 17. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 18. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 19. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 20. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 21. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 22. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 23. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 24. Write a python function to find the sum of digits of first n natural numbers.\r\n# ### 25. Write a python function to find the sum of digits of first n natural number","votes":null}],"time":{"count":47.0,"avg":171801.4645957447,"std":293841.7678734048,"cov":1.7103565943}}
{"id":556,"question":"def find_Odd_Pair(A,N) :\r\n    \"\"\"Write a python function to count the pairs with xor as an odd number.\"\"\"","answers":[{"text":"\r\n    Odd_Pair_Count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2!= 0 :\r\n                Odd_Pair_Count += 1\r\n    return Odd_Pair_Count\r\n\r","votes":118605.648},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2!= 0 :\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    N = int(input())\r\n    A = list(map(int,input().split()))\r\n    print(find_Odd_Pair(A,N))\r\n","votes":121666.164},{"text":"\r\n    Count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j])%2!= 0 :\r\n                Count += 1\r\n    return Count\r\n\r","votes":122042.192},{"text":"\r\n    count=0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r","votes":122201.408},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2!= 0 :\r\n                count += 1\r\n    return count\r\n\r\n# Driver Code\r\nif __name__ == '__main__' :\r\n    print(\"Enter the length of the array:\")\r\n    N = int(input())\r\n    A = list(map(int,input().strip().split()))\r\n    print(\"Total pairs are :\",find_Odd_Pair(A,N))\r\n","votes":122258.828},{"text":"\r\n    count = 0\r\n    for i in range(N-1) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2!= 0 :\r\n                count += 1\r\n    return count\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\" :\r\n    A = [8,1,2,7,3,4]\r\n    N = 6\r\n    print(find_Odd_Pair(A,N))","votes":125951.336},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if ((A[i] ^ A[j]) % 2) == 1 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__' :\r\n    N = int(input())\r\n    A = [int(x) for x in input().split()]\r\n    print(find_Odd_Pair(A,N))","votes":126301.604},{"text":"\r\n    M=0\r\n    for i in range(N):\r\n        x=A[i]\r\n        for j in range(i+1,N):\r\n            y=A[j]\r\n            if ((x^y)%2!=0):\r\n                M+= 1\r\n    return(M)\r\n\r\nif __name__=='__main__':\r\n    N = int(input())\r\n    A = list(map(int, input().split()))\r\n    print(find_Odd_Pair(A,N))\r\n","votes":129391.644},{"text":"\r\n    c = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2!= 0 :\r\n                c+=1\r\n    return c\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    T = int(input())\r\n    for test_case in range(T):\r\n        N = int(input())\r\n        A = list(map(int, input().strip().split()))\r\n        print(find_Odd_Pair(A,N))\r\n","votes":130686.22},{"text":"\r\n\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            xor = A[i]^A[j]\r\n            if xor%2 == 1:\r\n                count += 1\r\n    return count\r\n\r","votes":130976.052},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2!= 0 :\r\n                count += 1\r\n    return count\r\n\r","votes":132694.352},{"text":"\r\n    count=0\r\n    for i in range(len(A)) :\r\n        for j in range(i+1,len(A)) :\r\n            if (A[i]^A[j])%2!=0 :\r\n                count+=1\r\n    return count\r\n\r","votes":143044.428},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 :\r\n                count += 1\r\n    return count\r\n\r","votes":150833.336},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i + 1, N) :\r\n            if (A[i] ^ A[j]) % 2 :\r\n                count += 1\r\n    return count\r\n\r","votes":152504.04},{"text":"\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if(A[i] ^ A[j])%2:\r\n                count += 1\r\n    return count\r\n\r","votes":157948.268},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__' :\r\n    t = int(input())\r\n    for _ in range(t) :\r\n        n = int(input())\r\n        a = list(map(int,input().split()))\r\n        print(find_Odd_Pair(a,n))","votes":159821.296},{"text":"\r\n    count = 0\r\n    for i in range(len(A)) :\r\n        for j in range(i+1,len(A)) :\r\n            if ((A[i]^A[j])%2) == 1 :\r\n                count = count + 1\r\n    return count\r\n\r\n\"\"\"\r\nTest: \r\n\"\"\"\r\nprint(find_Odd_Pair([1,5,7,10],4))\r\nprint(find_Odd_Pair([1,5,7,10],5))\r\nprint(find_Odd_Pair([1,5,7,10],3))\r\nprint(find_Odd_Pair([1,5,7,10],2))\r\nprint(find_Odd_Pair([1,5,7,10],1))\r\nprint(find_Odd_Pair([1,5,7,10],0))\r\nprint(find_Odd_Pair([1,5,7,10],-1))\r\nprint(find_Odd_Pair([1,5,7,10],-2))\r\nprint(find_Odd_Pair([1,5,7,10],-3))\r\nprint(find_Odd_Pair([1,5,7,10],-4))\r\n","votes":171334.964},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j])%2 :\r\n                count += 1\r\n    return count\r\n\r\nA = [2,3,1,2,4,3,2]\r\nprint(find_Odd_Pair(A,len(A)))\r\n","votes":172405.28},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2!= 0 :\r\n                count += 1\r\n    return count\r\n                \r","votes":175526.408},{"text":"\r\n    count=0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2:\r\n                count+=1\r\n    return count\r\nA=[1,2,4,7,8,10,11]\r\nN=len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n## EXAMPLE 2\r","votes":179519.272},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2!= 0 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    N = int(input())\r\n    A = list(map(int, input().split()))\r\n    print(find_Odd_Pair(A,N))\r\n","votes":186432.56},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j])%2!= 0 :\r\n                count += 1\r\n    return count\r\n        \r\nif __name__ == '__main__' :\r\n    num = int(input())\r\n    A = list(map(int,input().split()))\r\n    print(find_Odd_Pair(A,num))\r\n","votes":187629.288},{"text":"\r\n    pairs = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2!= 0 :\r\n                pairs += 1\r\n    return pairs\r\n\r\nif __name__ == '__main__' :\r\n    T = int(input())\r\n    for _ in range(T) :\r\n        arr = list(map(int,input().split()))\r\n        N = len(arr)\r\n        print(find_Odd_Pair(arr,N))","votes":190629.212},{"text":"\r\n    odd_pair = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                odd_pair += 1\r\n    return odd_pair\r\n\r\nA = [1,4,4,5,5,6,6,7,9]\r\nprint(find_Odd_Pair(A,len(A)))\r\n","votes":201301.076},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r","votes":209276.184},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 == 1:\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    T = int(input())\r\n    for i in range(T):\r\n        n = int(input())\r\n        A = list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,n))","votes":210777.62},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    A = [1,2,3,4,5,6,7,8,9,11]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))","votes":243356.452},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i] ^ A[j] % 2 == 1):\r\n                count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2!=0 :\r\n                count+=1\r\n    return count\r\n        \r\n        \r\nif __name__ == \"__main__\" :\r\n    A = list(map(int, input().split()))\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(N):\r\n            if A[i] ^ A[j] % 2 :\r\n                count += 1\r\n    return count\r\n    \r\nif __name__ == \"__main__\" :\r\n    print(find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\r\n    print(find_Odd_Pair([1, 3, 2, 6, 5, 7, 8, 2, 4, 10], 10))\r\n    print(find_Odd_Pair([1, 3, 5, 7, 2, 10, 9, 8, 6, 4], 10))\r\n    print(find_Odd_Pair([5, 7, 6, 8, 9, 10, 3, 2, 1, 4], 10))\r\n    print(find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        if sum(A[i]) % 2!= 0 :\r\n            count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] % 2!= 0 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__' :\r\n    n = int(input())\r\n    A = [int(i) for i in input().split(' ')]\r\n    print(find_Odd_Pair(A,n))\r\n","votes":null},{"text":"\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 :\r\n                return(i,j)\r\n\r\narr = [1,2,3,4,5]\r\nprint(find_Odd_Pair(arr,5))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 :\r\n                count = count + 1\r\n    return count\r\nprint(find_Odd_Pair([1, 3, 4, 5, 6, 7, 8, 9, 10], 10))","votes":null},{"text":"\r\n\r\n    c=0\r\n    for i in range(N) :\r\n        a=0\r\n        for j in range(N) :\r\n            if i!=j :\r\n                if A[i]^A[j]%2==1 :\r\n                    if A[i]>A[j] :\r\n                        temp=A[i]\r\n                        A[i]=A[j]\r\n                        A[j]=temp\r\n                    c+=1\r\n                    a=1\r\n                    break\r\n        if a==0 :\r\n            return \"NO\"\r\n    if c%2==1 :\r\n        return \"YES\"\r\n    else :\r\n        return \"NO\"\r\n\r\n# Driver code\r\nif __name__ == '__main__' :\r\n    T=int(input())\r\n    for _ in range(T) :\r\n        N=int(input())\r\n        A=list(map(int,input().split()))\r\n        ans=find_Odd_Pair(A,N)\r\n        print(ans)\r\n\r\n","votes":null},{"text":"\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2 == 1 :\r\n                return \"Pair found at index : \" + str(i) + \" and \" + str(j)\r\n    return \"Pair not found\"\r\n\r\nif __name__ == \"__main__\" :\r\n    N = int(input(\"Enter number of elements : \"))\r\n    A = [int(x) for x in input(\"Enter elements : \").split()]\r\n    print(find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j] % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nn = int(input())\r\nl = [int(x) for x in input().split()]\r\nprint(find_Odd_Pair(l,n))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N-1) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2 :\r\n                count += 1\r\n    return count\r\n\r\n# Driver code\r\nif __name__ == '__main__' :\r\n    A = [1,2,3,4,5,6,7,8]\r\n    N = len(A)\r\n    print (find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(0,N):\r\n            if(A[i] ^ A[j] % 2 == 1):\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    A = [2, 4, 6, 8, 10, 6]\r\n    N = 6\r\n    print(find_Odd_Pair(A, N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        if A[i] %2 == 1:\r\n            count = count + 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    if N == 0 :\r\n        return 0\r\n    Odd_Count = 0\r\n    for i in range(len(A)\/\/2) :\r\n        if A[i] ^ A[N-1-i] :\r\n            Odd_Count += 1\r\n    return Odd_Count\r\n\r\nif __name__ == \"__main__\":\r\n    A = [int(x) for x in input(\"Enter the array: \").split()]\r\n    N = int(input(\"Enter the length of the array: \"))\r\n    print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(0,N) :\r\n        if (A[i] % 2)!= 0 :\r\n            count += 1\r\n        \r\n    return count\r\n    \r\nprint(find_Odd_Pair(A,n))\r\n# -\r\n\r\n# # Question 2\r\n# Given an array of integers, find the number of pairs that sum up to $k$.\r\n#\r\n# $n$ is the length of the array.\r\n#\r\n# $k$ is the target number.\r\n#\r\n# $A[i]$ is the ith element of the array.\r\n#\r\n# ## Solution\r\n#\r\n# **Method-1: Brute-force**\r\n#\r\n# There are $n$ pairs possible in $n$ numbers. The pair can be of the form $(i,j)$ where $i$ and $j$ are the indices of any two numbers in the array.\r\n#\r\n# We can use two loops to traverse through the array and check if the sum is equal to $k$.\r\n#\r\n# The time complexity of this algorithm is $O(n^2)$.\r\n#\r\n# **Method-2: Optimized**\r\n#\r\n# We can optimize the time complexity of the brute-force algorithm.\r\n#\r\n# We can maintain a hash map containing the cumulative sum of all the elements in the array. If the sum of the pair is $k$, then the sum of the elements up to $k$ is also $k$ and we can return 1.\r\n#\r\n# The time complexity of this algorithm is $O(n)$.\r\n#\r\n# ## Implementation\r\n#\r\n# ### Question 2.1\r\n# Write a python function that returns the number of pairs in an array that sum up to $k$.\r\n#\r\n# $n$ is the length of the array.\r\n#\r\n# $k$ is the target number.\r\n#\r\n# $A[i]$ is the ith element of the array.\r\n#\r\n# ### Solution\r\n#\r\n# **Method-1: Brute-forc","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] <0 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    A = [0, 4, 8, 15, 16, 23, 42]\r\n    n = 7\r\n    print(find_Odd_Pair(A,n))\r\n\r\n```\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] % 2!= 0 :\r\n                count += 1\r\n    return count\r\n    \r\nif __name__ == '__main__' :\r\n    A = [1, 2, 4, 6, 7, 8]\r\n    print(find_Odd_Pair(A,len(A)))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] % 2!= 0 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__' :\r\n    A = [1,2,3,4,5]\r\n    N = 5\r\n    print(find_Odd_Pair(A,N))\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] % 2!= 0 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__' :\r\n    print(find_Odd_Pair([1,2,3,4],4))\r\n    print(find_Odd_Pair([1,2,3,4,5,6],6))\r\n    print(find_Odd_Pair([1,3,5,7,9,11,13],7))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        count += A[i]%2\r\n    return count\/\/2\r\nif __name__ == \"__main__\" :\r\n    print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        if A[i]%2!= 0 :\r\n            count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    A = [1,3,4,5,6,7,8,9,10]\r\n    N = 10\r\n    print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    temp=0\r\n    for i in range(N) :\r\n        temp = temp ^ A[i]\r\n        if temp&1 :\r\n            return i+1\r\n    return -1\r\nA = [1,2,3,4,5]\r\nprint(find_Odd_Pair(A,len(A)))\r\n```\r\n\r\n## [1.11] Find the even pairs\r\n```python\r\n\"\"\"Write a python function to find the even pairs in a list.\"\"\"\r","votes":null},{"text":"\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2 :\r\n                return True\r\n    return False\r\n\r\nif __name__ == '__main__' :\r\n    A = list(map(int,input().split()))\r\n    N = len(A)\r\n    if find_Odd_Pair(A,N) :\r\n        print('Possible')\r\n    else :\r\n        print('Impossible')","votes":null},{"text":"\r\n    count_odd_pair = 0\r\n    for i in range(1,N+1) :\r\n        for j in range(1,N+1) :\r\n            if i!= j :\r\n                if A[i] ^ A[j] % 2 :\r\n                    count_odd_pair += 1\r\n    return count_odd_pair\r\n\r\nif __name__ == \"__main__\" :\r\n    A = [8, 2, 4, 1, 10, 6]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i] ^ A[j] % 2!= 0:\r\n                count+=1\r\n    return count\r\nprint(find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j])%2 == 1 :\r\n                count+=1\r\n    print(count)\r\n\r\nif __name__ == \"__main__\" :\r\n    T = int(input())\r\n    for i in range(1,T+1) :\r\n        N = int(input())\r\n        A = list(map(int,input().split()))\r\n        find_Odd_Pair(A,N)\r\n","votes":null},{"text":"\r\n    count_odd = 0\r\n    for i in range(len(A)) :\r\n        for j in range(len(A)) :\r\n            if i!= j and A[i] ^ A[j] % 2 == 1 :\r\n                count_odd += 1\r\n    return count_odd\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 4, 5, 7, 6]\r\n    print(find_Odd_Pair(A, 4))","votes":null},{"text":"\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] % 2 == 1 :\r\n                return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    for i in range(N):\r\n        for j in range(N):\r\n            if (A[i]^A[j]) % 2!= 0:\r\n                print(A[i],A[j],end = \" \")\r\n    print()\r\n\r","votes":null},{"text":"\r\n    odd_pairs = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i]^A[j]%2!= 0) :\r\n                odd_pairs +=1\r\n    return odd_pairs\r\n\r\nif __name__ == \"__main__\" :\r\n    N = int(input())\r\n    A = list(map(int,input().split()))\r\n    print(find_Odd_Pair(A, N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(N) :\r\n            if (A[i]!= A[j]) and ((A[i] ^ A[j]) % 2) :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    N = 10\r\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(find_Odd_Pair(A, N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i] ^ A[j] % 2!= 0) :\r\n                count += 1\r\n    return count\r\n\r\nprint(find_Odd_Pair([3,6,1,2,5,3],6))\r\nprint(find_Odd_Pair([4,1,2,1,2,4,2,],7))\r\nprint(find_Odd_Pair([1,2,5,6,3,4,6,4,],8))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        xor = 0\r\n        for j in range(N) :\r\n            xor += A[i] ^ A[j]\r\n        if (xor % 2)!= 0 :\r\n            count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    Count=0\r\n    for i in range(0,N) :\r\n        if A[i]%2==1 :\r\n            for j in range(i+1,N) :\r\n                if A[j]%2==1 and A[i]^A[j]==0 :\r\n                    Count+=1\r\n    return Count\r\n\r\nprint(\"The number of odd pairs is\",find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            count += int(A[i]^A[j])\r\n    \r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    N = int(input())\r\n    A = list(map(int,input().split()))\r\n    \r\n    print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2!= 0 :\r\n                count += 1\r\n    return count\r\n\r\nprint(\"The result is=\", find_Odd_Pair(A,len(A)))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(1,N+1):\r\n        if (i&(i-1))==0:\r\n            count+=1\r\n    return count\r\n\r\nprint(find_Odd_Pair([1,2,3,4,5],5))\r\nprint(find_Odd_Pair([2,4,6,8,10],5))\r\nprint(find_Odd_Pair([1,2,3,4,5],6))\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if A[i]^A[j]%2!= 0:\r\n                count+=1\r\n    return count\r\n\r\n#driver code\r\nif __name__ == \"__main__\":\r\n    arr = [1,2,3,4,3,2,1]\r\n    print(\"The odd pairs are \",find_Odd_Pair(arr,len(arr)))\r\n    arr = [1,2,4,5,6,8,11]\r\n    print(\"The odd pairs are \",find_Odd_Pair(arr,len(arr)))\r\n\r\n","votes":null},{"text":"\r\n    A = list(A)\r\n    for i in range(len(A)) :\r\n        if(A[i] % 2 == 1) :\r\n            print(A[i],end=\" \")\r\n\r\n    # Driver code\r\n    A = [1, 2, 3, 4, 5]\r\n    N = 3\r\n    print(find_Odd_Pair(A, N))\r\n\r\nif __name__ == '__main__' :\r\n\r\n    A = [1, 2, 3, 4, 5]\r\n    N = 3\r\n    print(find_Odd_Pair(A, N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(N) :\r\n            count += (A[i] ^ A[j]) % 2\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    # Driver code\r\n    t = int(input())\r\n    for _ in range(t) :\r\n        N = int(input())\r\n        A = list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] % 2 :\r\n                count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(1,N+1) :\r\n        for j in range(i+1,N+1) :\r\n            if A[i] ^ A[j] % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nprint(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] % 2!= 0 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    A = [3, 1, 6, 3, 4, 5, 5, 6]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    count = 0\r\n    for i in range(1,N+1):\r\n        if (A[i-1] ^ A[i-1+1])%2==1:\r\n            count += 1\r\n    return count\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    A = [1,2,3,4,5]\r\n    N = len(A)\r\n    print(\"No of odd pairs : \",find_Odd_Pair(A,N)) # 2","votes":null},{"text":"\r\n    count=0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i]^A[j]%2==1) :\r\n                count+=1\r\n            else :\r\n                pass\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    n=15\r\n    A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14]\r\n    print(\"Number of pairs with xor as odd number is : \",find_Odd_Pair(A,n))\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        if A[i] % 2!= 0 :\r\n            for j in range(i+1,N) :\r\n                if A[i] ^ A[j] % 2!= 0 :\r\n                    count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    T = int(input())\r\n    for i in range(T) :\r\n        N = int(input())\r\n        A = list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    # Your code goes here\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    T = int(input())\r\n    for _ in range(T) :\r\n        N = int(input())\r\n        A = list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(len(A)) :\r\n        for j in range(i+1,len(A)) :\r\n            if A[i]^A[j]%2 :\r\n                count += 1\r\n    return count\r\n\r\n# Driver Code\r\nif __name__ == '__main__' :\r\n    A = [5, 8, 1, 2, 1, 4, 6, 3]\r\n    N = 8\r\n    print(find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    print(A)\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i]^A[j] % 2 == 1:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A, N))\r\n","votes":null},{"text":"\r\n\r\n    count = 0\r\n\r\n    # Create a list to store the count of pairs with odd numbers\r\n    odd_pairs = list()\r\n\r\n    # Create a list to store the xor values\r\n    xor_values = list()\r\n\r\n    for i in range(N):\r\n\r\n        xor_values.append(A[i] ^ A[i+1])\r\n\r\n    for i in range(N-1) :\r\n        if xor_values[i] == xor_values[i+1] :\r\n            count += 1\r\n        else :\r\n            odd_pairs.append(count)\r\n            count = 0\r\n\r\n    odd_pairs.append(count)\r\n\r\n    return odd_pairs\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(0,N) :\r\n            if (A[i] ^ A[j])%2!= 0 :\r\n                count = count + 1\r\n    return count\r\n\r\nA = [1,2,3,4,5,6,7,8,9]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n```\r\n#### Output :\r\n```\r\n6\r\n```\r\n## <a name=\"9\"><\/a>Problem 9\r\nFind the sum of all the multiples of 3 or 5 below 1000.\r\n\r\n```python\r","votes":null},{"text":"\r\n    Odd_Pair = 0\r\n    for i in range(1,N+1) :\r\n        for j in range(1,N+1) :\r\n            if (A[j] ^ i) % 2 == 1 :\r\n                Odd_Pair += 1\r\n    return Odd_Pair\r\n\r\nif __name__ == '__main__' :\r\n    A = [1, 2, 3, 4, 5]\r\n    N = 5\r\n    print(find_Odd_Pair(A,N))\r\n    print(find_Odd_Pair(A,N-1))\r\n    print(find_Odd_Pair(A,N+1))","votes":null},{"text":"\r\n    count=0\r\n    for i in range(0,N,2):\r\n        if A[i] == A[i+1]:\r\n            count += 1\r\n    return count\r\n            \r\nif __name__ == '__main__':\r\n    N=int(input())\r\n    A=list(map(int,input().split()))\r\n    print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2!= 0 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    A = [1, 2, 4, 5, 6, 8, 9]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    Odd_Pair = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i] ^ A[j]%2!= 0) :\r\n                Odd_Pair += 1\r\n    return Odd_Pair\r\n\r\nif __name__ == '__main__':\r\n    N = int(input())\r\n    A = list(map(int, input().split()))\r\n    print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i]^A[j]!= 0 :\r\n                return (A[i],A[j])\r\n    return -1\r\n\r\nif __name__ == '__main__':\r\n\r\n    num = int(input())\r\n    a = list(map(int,input().strip().split()))\r\n\r\n    res = find_Odd_Pair(a,num)\r\n\r\n    if res == -1:\r\n        print(\"NO PAIR\")\r\n\r\n    else :\r\n        print(res)\r\n            ","votes":null},{"text":"\r\n\r\n    # Write your code here.\r\n    count=0\r\n    for i in range(N) :\r\n        for j in range(N) :\r\n            if i!=j and (A[i]^A[j])%2!=0 :\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    T=int(input())\r\n    for i in range(1,T+1) :\r\n        N=int(input())\r\n        A=[]\r\n        for j in range(N) :\r\n            A.append(int(input()))\r\n        print(f\"Case #{i}: {find_Odd_Pair(A,N)}\")\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    # Taking a quick look at the given input\r\n    if N == 0:\r\n        return 0\r\n    # Creating an empty list\r\n    Odd_Pair = []\r\n    # Initialising the count\r\n    count = 0\r\n    # Iterating over the array\r\n    for i in range(N):\r\n        # Checking if the array element is odd\r\n        if A[i]%2!= 0:\r\n            # Adding the element to the list\r\n            Odd_Pair.append(A[i])\r\n    # Iterating over the list\r\n    for i in range(len(Odd_Pair)):\r\n        # Checking if the element is a power of 2\r\n        if Odd_Pair[i]**2 in Odd_Pair:\r\n            # Incrementing the count\r\n            count += 1\r\n    # Returning the answer\r\n    return count\r\n\r\n# Driver code\r\n\r\nif __name__ == '__main__':\r\n    T = int(input())\r\n    for i in range(T):\r\n        N = int(input())\r\n        arr = list(map(int, input().strip().split()))\r\n        print(find_Odd_Pair(arr, N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j] % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] % 2 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    A = [int(x) for x in input().split()]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if A[i] ^ A[j] % 2 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    A = [int(x) for x in input().split()]\r\n    print(find_Odd_Pair(A,n))\r\n","votes":null},{"text":"\r\n    Count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i] ^ A[j] % 2!= 0:\r\n                Count += 1\r\n    return Count\r\n\r\nA = input().split()\r\nN = int(A[0])\r\nA = list(map(int,A[1:]))\r\nprint(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    count=0\r\n    for i in range(N) :\r\n        if A[i]%2!= 0:\r\n            count+=1\r\n    return count\r\n\r\nprint(find_Odd_Pair([3,5,7,9,11,13,15,17],10))\r\n","votes":null},{"text":"\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2==1 :\r\n                return [i,j]\r\n    return 0\r\n\r\n\r\nif __name__==\"__main__\" :\r\n    A = [1,3,5,7,9]\r\n    print(find_Odd_Pair(A,len(A)))","votes":null},{"text":"\r\n    count=0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j]%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    N = int(input())\r\n    A = [int(a) for a in input().split()]\r\n    print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    # your code goes here\r\n    count = 0\r\n    for i in range(N) :\r\n        if A[i] ^ A[i+1] % 2 == 1 :\r\n            count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    #t = int(input())\r\n    #A = [int(x) for x in input().split()]\r\n    A = [1,2,3,4,5,6,7,8,9,10]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n```\r\n\r\n### Output\r\n\r\n```\r\nInput:\r\n10\r\n1 2 3 4 5 6 7 8 9 10\r\nOutput:\r\n5\r\n```\r\n\r\n### Time complexity\r\n\r\nTime complexity of the above algorithm is $$O(n)$$.\r\n\r\n**Space complexity:**\r\n\r\nSpace complexity of the above algorithm is $$O(1)$$.\r\n\r\n### Code\r\n\r\n```python\r\n# Python3 program to check if a given array contains\r\n# Odd Pairs or not\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] == 1 :\r\n                count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    T = int(input())\r\n    for _ in range(T) :\r\n        N = int(input())\r\n        A = list(map(int, input().split()))\r\n        print(find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    counter = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j] % 2!= 0 :\r\n                counter += 1\r\n    return counter\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    N = int(input(\"Enter the number of elements : \"))\r\n    A = list(map(int, input(\"Enter the elements : \").split()))\r\n    print(\"The number of Odd pairs is : \", find_Odd_Pair(A,N))","votes":null},{"text":"\r\n    count =0\r\n    for i in range(0,N) :\r\n        for j in range(0,N) :\r\n            if i!=j and (A[i]^A[j])%2!=0 :\r\n                count = count+1\r\n    print(count)\r\n\r\nif __name__ == '__main__':\r\n    N = int(input())\r\n    A = list(map(int,input().split()))\r\n    find_Odd_Pair(A,N)\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\" :\r\n    t = int(input())\r\n    while t > 0 :\r\n        N = int(input())\r\n        A = list(map(int, input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n        t -= 1","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i] ^ A[j] == 1 :\r\n                count += 1\r\n    return count\r\nif __name__ == \"__main__\" :\r\n    print(find_Odd_Pair([3,4,5,6],5))","votes":null}],"time":{"count":27.0,"avg":158337.5974814815,"std":34238.1479686417,"cov":0.216235111}}
{"id":557,"question":"def toggle_string(string):\r\n    \"\"\"Write a function to toggle characters case in a string.\"\"\"","answers":[{"text":"\r\n    return string.swapcase()\r\n\r\n\r","votes":53586.032},{"text":"\r\n    return string.swapcase()\r\n\r","votes":62814.32},{"text":"\r\n    return string.swapcase()\r\n\r\n# Write a function to find the longest substring in a string.\r\n\r","votes":63980.64},{"text":"\r\n    return string.swapcase()\r\n\r\nprint(toggle_string(\"Hello\"))\r\n\r\n\"\"\"\r\nThe function toggle_string() takes a string as an input and returns a string where all the characters in the string are toggled case.\r\n\"\"\"\r\n\r\n\"\"\"\r\nWrite a function that takes a string as an input and returns a string where all the vowels are replaced with *'s.\r\n\"\"\"\r\n\r","votes":66929.652},{"text":"\r\n    return string.swapcase()\r\n\r\n\r\n\"\"\"\r\nWrite a function to compute the string length of a given string.\r\n\r\nThe function should return the length of the string.\r\n\"\"\"\r\n\r\n\r","votes":67386.148},{"text":"\r\n    string_toggled = str(string).swapcase()\r\n    return string_toggled\r\n\r","votes":77408.68},{"text":"\r\n    return string.swapcase()\r\n\r\n\"\"\"\r\nif __name__ == \"__main__\":\r\n    print(toggle_string(\"Hello world\"))\r\n    print(toggle_string(\"Hello world\"))\r\n\"\"\"\r\n","votes":78734.032},{"text":"\r\n    return string.swapcase()\r\n\r\nprint(toggle_string('Hello World'))","votes":79390.012},{"text":"\r\n    return ''.join(x.upper() if x.islower() else x.lower() for x in string)\r\n\r\nprint(toggle_string('hello'))\r\nprint(toggle_string('HELLO'))\r\nprint(toggle_string('Hello'))\r\n","votes":85153.024},{"text":"\r\n    return string.swapcase()\r\n\r\n# Write a function that returns the length of a string\r","votes":91013.98},{"text":"\r\n    string = list(string)\r\n    for i in range(len(string)):\r\n        if string[i].isupper():\r\n            string[i] = string[i].lower()\r\n        else:\r\n            string[i] = string[i].upper()\r\n    return \"\".join(string)\r\n\r\n\r","votes":91782.52},{"text":"\r\n    return string.swapcase()\r\n\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello world'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python is fun'))\r\n\r\n# Part 2:\r\n# Write a function to reverse a string.\r\n\r\n\r","votes":92644.552},{"text":"\r\n    return string.swapcase()\r\n\r\nif __name__ == \"__main__\":\r\n    print(toggle_string(\"Hello world!\"))\r\n","votes":93231.944},{"text":"\r\n    return string.swapcase()\r\n\r\n# Use toggle_string() to print the following strings:\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Goodbye'))\r\nprint(toggle_string('There'))\r\n","votes":93367.032},{"text":"\r\n    # write your code here.\r\n    new_string = ''\r\n    for letter in string:\r\n        if letter.isupper():\r\n            new_string += letter.lower()\r\n        else:\r\n            new_string += letter.upper()\r\n    return new_string\r\n\r","votes":94176.612},{"text":"\r\n    return string.swapcase()\r\n\r\nprint(toggle_string('Hey!'))","votes":96206.988},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char == \" \":\r\n            new_string += char\r\n        else:\r\n            new_string += char.swapcase()\r\n    return new_string\r\n\r\n\r","votes":99158.592},{"text":"\r\n    return str(string).swapcase()\r\n\r\n\r","votes":99872.856},{"text":"\r\n    # write your code here\r\n    toggled = \"\"\r\n    for c in string:\r\n        if c == c.lower():\r\n            toggled += c.upper()\r\n        else:\r\n            toggled += c.lower()\r\n    return toggled\r\n\r\n\r","votes":99887.32},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n        else:\r\n            new_string += char.upper()\r\n    return new_string\r\n\r\n\r","votes":101494.452},{"text":"\r\n    toggled_case = string.swapcase()\r\n    return toggled_case\r\n\r\n\r\nprint(toggle_string(\"HellO\"))\r\n","votes":105143.412},{"text":"\r\n    new_string = ''\r\n    for letter in string:\r\n        if letter.isupper():\r\n            new_string += letter.lower()\r\n        else:\r\n            new_string += letter.upper()\r\n    return new_string\r\n\r","votes":106467.072},{"text":"\r\n    return ''.join(x.upper() if x.islower() else x.lower() for x in string)\r\n\r\n# Test function\r\nprint(toggle_string('Hello World'))","votes":106961.064},{"text":"\r\n    string_toggled = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            string_toggled += char.lower()\r\n        elif char.islower():\r\n            string_toggled += char.upper()\r\n    return string_toggled\r\n\r\n\r","votes":107300.16},{"text":"\r\n    result = \"\"\r\n    for c in string:\r\n        if c.isupper():\r\n            result += c.lower()\r\n        else:\r\n            result += c.upper()\r\n    return result\r\n\r\nprint(toggle_string('This is a String'))","votes":110552.708},{"text":"\r\n    # return string.swapcase()\r\n\r\n    return ''.join(char.swapcase() if char.islower() else char.lower() for char in string)\r\n\r\n\r","votes":113076.572},{"text":"\r\n    return ''.join(c.upper() if c.lower() in string else c.lower() for c in string)\r\n\r\nif __name__ == '__main__':\r\n    print(toggle_string('Hello World!'))\r\n    print(toggle_string('HELLO WORLD!'))\r\n    print(toggle_string('hEllo WoRLd!'))\r\n    print(toggle_string('HellO WORLD!'))\r\n    print(toggle_string('hEllo wORLD!'))\r\n    print(toggle_string('Hello World'))\r\n    print(toggle_string('Hello World!'))\r\n    print(toggle_string('Hello World!'))\r\n    print(toggle_string('Hello World!'))\r\n    print(toggle_string('Hello World!'))\r\n    print(toggle_string('Hello World!'))\r\n","votes":114165.212},{"text":"\r\n    return string.swapcase()\r\n\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('World'))\r\nprint(toggle_string('Goodbye'))\r\nprint(toggle_string('Hello World!'))\r\nprint(toggle_string('Hi'))\r\nprint(toggle_string('Bye'))","votes":114570.236},{"text":"\r\n    result = ''\r\n    for char in string:\r\n        if char.isupper():\r\n            result += char.lower()\r\n        elif char.islower():\r\n            result += char.upper()\r\n        else:\r\n            result += char\r\n    return result\r\n\r\n\r","votes":114978.264},{"text":"\r\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\r\n\r","votes":117117.704},{"text":"\r\n    new_string = \"\"\r\n    for letter in string:\r\n        if letter.isupper():\r\n            new_letter = letter.lower()\r\n        else:\r\n            new_letter = letter.upper()\r\n        new_string += new_letter\r\n    return new_string\r\n\r\n\r","votes":117726.872},{"text":"\r\n    result = ''\r\n    for char in string:\r\n        if char.isupper():\r\n            result += char.lower()\r\n        else:\r\n            result += char.upper()\r\n    return result\r\n\r\n\r","votes":119381.652},{"text":"\r\n    toggled_string = \"\"\r\n    for letter in string:\r\n        if letter.isupper():\r\n            toggled_string += letter.lower()\r\n        elif letter.islower():\r\n            toggled_string += letter.upper()\r\n        else:\r\n            toggled_string += letter\r\n    return toggled_string\r\n\r\n\r\n# Function to find the length of the string\r","votes":120440.508},{"text":"\r\n    res = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            res += char.lower()\r\n        else:\r\n            res += char.upper()\r\n    return res\r\n\r","votes":120837.092},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char == char.lower():\r\n            new_string += char.upper()\r\n        else:\r\n            new_string += char.lower()\r\n    return new_string\r\n\r\n\r","votes":124866.76},{"text":"\r\n    str_list = list(string)\r\n    for i in range(len(str_list)):\r\n        str_list[i] = str_list[i].upper() if str_list[i].islower() else str_list[i].lower()\r\n    return \"\".join(str_list)\r\n\r","votes":125176.82},{"text":"\r\n    # convert string to list\r\n    list_string = list(string)\r\n    # loop through list\r\n    for i in range(len(list_string)):\r\n        # if character is lowercase, make it uppercase\r\n        if list_string[i].islower():\r\n            list_string[i] = list_string[i].upper()\r\n        # if character is uppercase, make it lowercase\r\n        elif list_string[i].isupper():\r\n            list_string[i] = list_string[i].lower()\r\n    # convert list to string and return\r\n    return \"\".join(list_string)\r\n\r\n\r","votes":125783.792},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n        else:\r\n            new_string += char.upper()\r\n    return new_string\r\n\r","votes":126600.32},{"text":"\r\n    return string.swapcase()\r\n\r\nprint(toggle_string(\"Hello\"))","votes":127808.672},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.islower():\r\n            char = char.upper()\r\n        else:\r\n            char = char.lower()\r\n        new_string += char\r\n    return new_string\r\n\r\n\r","votes":130716.032},{"text":"\r\n    new_string = ''\r\n    for char in string:\r\n        new_string += char.lower() if char.isupper() else char.upper()\r\n    \r\n    return new_string\r\n\r\nprint(toggle_string('Hello World'))\r\n\r\n# -\r\n\r\n\"\"\"\r\nWrite a function to find the number of occurrences of a given character in a string.\r\n\r\nExamples:\r\n- Input: 'Hello World', 'o'\r\n  Output: 1\r\n- Input: 'Hello World', 'd'\r\n  Output: 2\r\n- Input: 'Hello World', 'x'\r\n  Output: 0\r\n\"\"\"\r\n\r\n# +\r","votes":132004.684},{"text":"\r\n    new_string = ''\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n        else:\r\n            new_string += char.upper()\r\n    return new_string\r\n\r\n\r","votes":132622.356},{"text":"\r\n    new_string = []\r\n    for char in string:\r\n        if char.islower():\r\n            new_string.append(char.upper())\r\n        else:\r\n            new_string.append(char.lower())\r\n    return \"\".join(new_string)\r\n\r","votes":132803.812},{"text":"\r\n\r\n    # Initialize an empty string\r\n    toggled_string = \"\"\r\n\r\n    # Iterate through the string\r\n    for i in range(len(string)):\r\n        # Check if current character is lowercase\r\n        if string[i].islower():\r\n            # Append to new string the uppercase version of the character\r\n            toggled_string += string[i].upper()\r\n        # Check if current character is uppercase\r\n        elif string[i].isupper():\r\n            # Append to new string the lowercase version of the character\r\n            toggled_string += string[i].lower()\r\n        # Otherwise append to new string the character unchanged\r\n        else:\r\n            toggled_string += string[i]\r\n\r\n    return toggled_string\r\n\r\n\r\n# Test the function\r\nprint(toggle_string(\"This is a String\"))\r\nprint(toggle_string(\"This is a String with numbers 1, 2, 3\"))\r\nprint(toggle_string(\"This is A String\"))\r\nprint(toggle_string(\"This is a String with numbers 1, 2, 3\"))\r\n","votes":136281.212},{"text":"\r\n    new_string = ''\r\n    for char in string:\r\n        if char.islower():\r\n            new_string += char.upper()\r\n        else:\r\n            new_string += char.lower()\r\n    return new_string\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(toggle_string('Hello World'))\r\n    print(toggle_string('hello world'))\r\n","votes":143936.444},{"text":"\r\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\r\n\r\n\r","votes":148195.892},{"text":"\r\n    new_string = []\r\n    for i in range(len(string)):\r\n        if string[i] == string[i].upper():\r\n            new_string.append(string[i].lower())\r\n        else:\r\n            new_string.append(string[i].upper())\r\n    return ''.join(new_string)\r\n\r\n\r\nprint(toggle_string('String'))\r\nprint(toggle_string('String'))\r\nprint(toggle_string('STRING'))\r\n","votes":181772.12},{"text":"\r\n    cased = string.lower()\r\n    cased = cased.replace(\" \", \"\")\r\n    return cased\r\n\r\n\r","votes":null},{"text":"\r\n    if string == \"true\":\r\n        return string.upper()\r\n    else:\r\n        return string.lower()\r\n\r\n# Define the function\r","votes":null},{"text":"\r\n    if len(string) < 2:\r\n        return string\r\n    else:\r\n        return string[0] + string[1].lower() + string[2:]\r\n\r\n\r\n# Write a function to reverse a string\r","votes":null},{"text":"\r\n    return ''.join(c.upper() if c.isalpha() else c.lower() for c in string)\r\n\r","votes":null},{"text":"\r\n    string=string.upper()\r\n    string=string.replace(\"A\",\"B\")\r\n    string=string.replace(\"B\",\"A\")\r\n    return string\r\n\r","votes":null},{"text":"\r\n    return ''.join(map(lambda x: 'x' if x == '?' else '?', string))\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(string)):\r\n        if string[i].isalpha():\r\n            if string[i].isupper():\r\n                string = string.replace(string[i], string[i].lower())\r\n            elif string[i].islower():\r\n                string = string.replace(string[i], string[i].upper())\r\n    return string\r\n\r\n\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r\nprint(toggle_string(\"This is a sentence.\"))\r","votes":null},{"text":"\r\n    if string == \"False\":\r\n        return \"True\"\r\n    else:\r\n        return \"False\"\r\n\r\n\r","votes":null},{"text":"\r\n    return string.swapcase()\r\n\r\nprint(toggle_string('Hello World'))<jupyter_output><empty_output><jupyter_text>**Note**: Try to use the function wherever possible.<jupyter_code># TODO: Write the function to toggle characters case in a string.\r\n# Example:\r\n# >>> toggle_string('Hello World')\r\n# 'hELLO wORLD'\n# TODO: Write the function to reverse a string.\r\n# Example:\r\n# >>> reverse_string('Hello World')\r\n# 'dlroW olleH'\n# TODO: Write the function to reverse a string using slicing.\r\n# Example:\r\n# >>> reverse_string('Hello World')\r\n# 'dlroW olleH'\n# TODO: Write the function to reverse a string using list comprehension.\r\n# Example:\r\n# >>> reverse_string('Hello World')\r\n# 'dlroW olleH'\n# TODO: Write the function to reverse a string using string slicing.\r\n# Example:\r\n# >>> reverse_string('Hello World')\r\n# 'dlroW olleH'\n# TODO: Write the function to reverse a string using for loop.\r\n# Example:\r\n# >>> reverse_string('Hello World')\r\n# 'dlroW olleH'\n# TODO: Write the function to reverse a string using nested for loop.\r\n# Example:\r\n# >>> reverse_string('Hello World')\r\n# 'dlroW olleH'\n# TODO: Write the function to reverse a string using while loop.\r\n# Example:\r\n# >>> reverse_string('Hello World')\r\n# 'dlroW olleH'\n# TODO: Write the function to reverse a string using recursion.\r\n# Example:\r\n# >>> reverse_string('Hello World')\r\n# 'dlroW olleH'\n# TODO: Write the function to reverse a string using functions.\r\n# Example:\r\n# >>> reverse_string('Hello World')\r\n# 'dlroW olleH'\n# TODO: Write the function to get the last character of a string.\r\n# Example:\r\n# >>> get_last_character('Hello World')\r\n# 'd'\n","votes":null},{"text":"\r\n    for char in string:\r\n        if char.isupper():\r\n            print(char.lower())\r\n        else:\r\n            print(char.upper())\r\n\r\nprint(\"Original String: \")\r\ntoggle_string(string)\r\n","votes":null},{"text":"\r\n    if string.isupper():\r\n        string = string.lower()\r\n    else:\r\n        string = string.upper()\r\n    return string\r\n\r\n\r","votes":null},{"text":"\r\n    string = string.lower()\r\n    for i in string:\r\n        if i in string:\r\n            string = string.replace(i,string[i].upper())\r\n        else:\r\n            string = string.replace(i,string[i].lower())\r\n    return string\r\n\r","votes":null},{"text":"\r\n    return string.swapcase()\r\n\r\n# Test the function\r\nstring = \"Hello\"\r\nprint(toggle_string(string))\r\nprint(toggle_string(string))\r\nprint(toggle_string(string))\r\n\r\n# This is the output:\r\n# Hello\r\n# hellO\r\n# HeLlO\r\n```\r\n---\r\n**References**\r\n- [Python, toggle characters case in a string](https:\/\/stackoverflow.com\/questions\/14812381\/python-toggle-characters-case-in-a-string)","votes":null},{"text":"\r\n    return string.swapcase()\r\n\r\nprint(toggle_string(\"Hello\"))\r\n```\r\n\r\n**Output**\r\n\r\n```\r\nhello\r\n```\r\n\r\nYou may also be interested in this [article](https:\/\/realpython.com\/python-strings\/#introduction-to-string-methods).\r\n\r\n## 1.1.1.2 Iterating Over Strings\r\n\r\nIn the previous chapter, we defined a function `toggle_string(string)` that toggled the case of every character in a string.\r\n\r\nNow, let's try to write a program to print every character in a string:\r\n\r\n```python\r\nstring = \"Hello\"\r\n```\r\n\r\nWe can use the `for` loop to iterate over a string:\r\n\r\n```python\r\nfor character in string:\r\n    print(character)\r\n```\r\n\r\n```\r\nH\r\ne\r\nl\r\nl\r\no\r\n```\r\n\r\nYou can also use the `for` loop to iterate over a string's characters.\r\n\r\n```python\r\nfor character in string:\r\n    print(character)\r\n```\r\n\r\n```\r\nH\r\ne\r\nl\r\nl\r\no\r\n```\r\n\r\n## 1.1.1.3 Slicing Strings\r\n\r\nA slice is a particular way of selecting a range of characters in a string.\r\n\r\nA slice is a string that selects a range of characters from a string.\r\n\r\nSlicing is done by specifying the start and end indices of the substring to be selected.\r\n\r\nFor example, the substring `\"hello\"` is selected using the slice `string[0:5]`:\r\n\r\n```python\r\nstring = \"hello\"\r\n```\r\n\r\n```python\r\nstring[0:5]\r\n```\r\n\r\n```\r\nhello\r\n```\r\n\r\nThe substring of `\"hello\"` from the index `0` to the index `4` is selected, which is `\"hell\"`.\r\n\r\nThe substring of `\"hello\"` from the index `3` to the index `5` is selected, which is `\"llo\"`.\r\n\r\nThe substring of `\"hello\"` from the index `2` to the index `6` is selected, which is `\"llo\"`.\r\n\r\nThe substring of `\"hello\"` from the index `1` t","votes":null},{"text":"\r\n\r\n    if string.isupper():\r\n        return string.lower()\r\n    elif string.islower():\r\n        return string.upper()\r\n    else:\r\n        return string\r\n\r\n\r","votes":null},{"text":"\r\n    return string.swapcase()\r\n\r\nprint(toggle_string(\"Hello\"))\r\n```\r\n\r\n**Output:**\r\n```\r\nHello\r\n```\r\n**Explanation:**\r\n- `swapcase()` is a method of the `string` class. It is used to toggle the characters case in a string.\r\n- `swapcase()` returns a new string with the characters case swapped.\r\n- `print()` is a function that prints something to the console.\r\n\r\n**Example 2:**\r\n```py\r","votes":null},{"text":"\r\n    string = string.lower()\r\n    if string == \"no\":\r\n        return string\r\n    return string.upper()\r\n\r\n\r","votes":null},{"text":"\r\n    return string.swapcase()\r\n\r\n\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hi'))\r\nprint(toggle_string('Hi'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggle_string('Hello'))\r\nprint(toggl","votes":null},{"text":"\r\n    if len(string) == 0:\r\n        return string\r\n    else:\r\n        return string[0].upper() + string[1:].lower()\r\n\r\n#print(toggle_string('String'))\r\n#print(toggle_string('Str'))\r\n#print(toggle_string('S'))\r\n#print(toggle_string(''))\r\n\r\n#Write a function that takes a string and returns a new string with \r\n#every second character reversed.\r\n\r\n#print(reverse_string('String'))\r\n#print(reverse_string('Str'))\r\n#print(reverse_string('S'))\r\n#print(reverse_string(''))\r\n\r\n#Write a function that takes a string and returns a new string with \r\n#every character reversed.\r\n\r\n#print(reverse_string2('String'))\r\n#print(reverse_string2('Str'))\r\n#print(reverse_string2('S'))\r\n#print(reverse_string2(''))\r\n\r\n#Write a function that takes a string and returns a new string with \r\n#every other character reversed.\r\n\r\n#print(reverse_string3('String'))\r\n#print(reverse_string3('Str'))\r\n#print(reverse_string3('S'))\r\n#print(reverse_string3(''))\r\n\r\n#Write a function that takes a string and returns a new string with \r\n#every other character reversed.\r\n\r\n#print(reverse_string4('String'))\r\n#print(reverse_string4('Str'))\r\n#print(reverse_string4('S'))\r\n#print(reverse_string4(''))\r\n\r\n#Write a function that takes a string and a character, and returns a new string with \r\n#the first and last characters reversed.\r\n\r\n#print(reverse_string5('String','S'))\r\n#print(reverse_string5('Str','S'))\r\n#print(reverse_string5('S','S'))\r\n#print(reverse_string5('','S'))\r\n\r\n#Write a function that takes a string and returns a new string with the \r\n#characters in reverse order.\r\n\r\n#print(reverse_string6('String'))\r\n#print(reverse_string6('Str'))\r\n#prin","votes":null},{"text":"\r\n    new_string = ''\r\n    for letter in string:\r\n        if letter.isupper():\r\n            new_string = new_string + letter.lower()\r\n        else:\r\n            new_string = new_string + letter.upper()\r\n    return new_string\r\n\r\n# The following line is used to test your function\r\nprint(toggle_string(\"Hello world\"))\r\n```\r\n<\/details>\r\n\r\n<details>\r\n<summary>Answer<\/summary>\r\n\r\n```python\r","votes":null},{"text":"\r\n    string = string.swapcase()\r\n    print(string)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if string == \"\":\r\n        return \"\"\r\n    else:\r\n        return string.lower() if string.isupper() else string.upper()\r\n\r\n\r","votes":null},{"text":"\r\n    if string.isupper():\r\n        return string.lower()\r\n    else:\r\n        return string.upper()\r\n\r\n\r","votes":null},{"text":"\r\n    return string.swapcase()\r\n\r\n\r\ntoggle_string('Greetings')\r\n```\r\n\r\n```\r","votes":null},{"text":"\r\n    if string.isupper():\r\n        return string.lower()\r\n    else:\r\n        return string.upper()\r\n\r\n\r\nprint(toggle_string(\"hello\"))  # HELLO\r\nprint(toggle_string(\"HELLO\"))  # hello\r\nprint(toggle_string(\"HELLO WORLD\"))  # HELLO WORLD\r\nprint(toggle_string(\"Hello World\"))  # Hello World\r\nprint(toggle_string(\"Hello World!\"))  # Hello World!\r\n```\r\n\r\n- [x] [Python String Functions](https:\/\/www.w3resource.com\/python-exercises\/string\/python-string-functions-exercise-1.php)\r\n- [ ] [Python String Formatting](https:\/\/www.w3resource.com\/python-exercises\/string\/python-string-formatting-exercise-1.php)\r\n- [ ] [Python String Methods](https:\/\/www.w3resource.com\/python-exercises\/string\/python-string-methods-exercise-1.php)\r\n\r\n---\r\n\r\n## 6. [Python String Operations](https:\/\/www.w3resource.com\/python-exercises\/string\/python-string-operations-exercise-1.php)\r\n\r\n### 6.1 String Operations\r\n\r\n```python\r\n\"\"\"String Operations\"\"\"\r\n\r\n\"\"\"Concatenate Strings\"\"\"\r\nprint(\"Hello \" + \"World\")  # Hello World\r\n\r\n\"\"\"Find Strings\"\"\"\r\nprint(\"Hello\".find(\"l\"))  # 1\r\nprint(\"Hello\".find(\"w\"))  # -1\r\n\r\n\"\"\"Count Strings\"\"\"\r\nprint(\"Hello\".count(\"l\"))  # 1\r\nprint(\"Hello\".count(\"l\", 1, 3))  # 1\r\nprint(\"Hello\".count(\"l\", 0, 1))  # 0\r\nprint(\"Hello\".count(\"l\", 0, 2))  # 1\r\n\r\n\"\"\"Replace Strings\"\"\"\r\nprint(\"Hello\".replace(\"l\", \"L\"))  # HeLLo\r\nprint(\"Hello\".replace(\"l\", \"L\", 1))  # HeLLo\r\nprint(\"Hello\".replace(\"l\", \"L\", 0))  # HeLLo\r\nprint(\"Hello\".replace(\"l\"","votes":null},{"text":"\r\n    string = string.upper()\r\n    string = string.replace(\"A\", \"a\")\r\n    string = string.replace(\"B\", \"b\")\r\n    string = string.replace(\"C\", \"c\")\r\n    string = string.replace(\"D\", \"d\")\r\n    string = string.replace(\"E\", \"e\")\r\n    string = string.replace(\"F\", \"f\")\r\n    string = string.replace(\"G\", \"g\")\r\n    string = string.replace(\"H\", \"h\")\r\n    string = string.replace(\"I\", \"i\")\r\n    string = string.replace(\"J\", \"j\")\r\n    string = string.replace(\"K\", \"k\")\r\n    string = string.replace(\"L\", \"l\")\r\n    string = string.replace(\"M\", \"m\")\r\n    string = string.replace(\"N\", \"n\")\r\n    string = string.replace(\"O\", \"o\")\r\n    string = string.replace(\"P\", \"p\")\r\n    string = string.replace(\"Q\", \"q\")\r\n    string = string.replace(\"R\", \"r\")\r\n    string = string.replace(\"S\", \"s\")\r\n    string = string.replace(\"T\", \"t\")\r\n    string = string.replace(\"U\", \"u\")\r\n    string = string.replace(\"V\", \"v\")\r\n    string = string.replace(\"W\", \"w\")\r\n    string = string.replace(\"X\", \"x\")\r\n    string = string.replace(\"Y\", \"y\")\r\n    string = string.replace(\"Z\", \"z\")\r\n    return string\r\n\r\n\r","votes":null}],"time":{"count":47.0,"avg":107351.2091914894,"std":25147.3757508781,"cov":0.2342533069}}
{"id":558,"question":"def digit_distance_nums(n1, n2):\r\n    \"\"\"Write a python function to find the digit distance between two integers.\"\"\"","answers":[{"text":"\r\n    if n1 == 0 and n2 == 0:\r\n        return 0\r\n    elif n1 == 0:\r\n        return n2\r\n    elif n2 == 0:\r\n        return n1\r\n    elif n1 < 10 and n2 < 10:\r\n        return abs(n1 - n2)\r\n    elif n1 < 10:\r\n        return digit_distance_nums(n1, n2 \/\/ 10) + 1\r\n    elif n2 < 10:\r\n        return digit_distance_nums(n1 \/\/ 10, n2) + 1\r\n    else:\r\n        return digit_distance_nums(n1 \/\/ 10, n2 \/\/ 10) + digit_distance_nums(n1 % 10, n2 % 10)\r\n\r\n\r\n# 20. Rotate an Array\r\n# https:\/\/www.geeksforgeeks.org\/rotate-an-array-by-d-elements\/\r","votes":100128.98},{"text":"\r\n    if n1 < 0 or n2 < 0:\r\n        raise ValueError(\"Please input two positive integers\")\r\n    if n1 < 10 and n2 < 10:\r\n        return abs(n1 - n2)\r\n    if n1 < 10:\r\n        return digit_distance_nums(n1, n2 \/\/ 10) + 1\r\n    if n2 < 10:\r\n        return digit_distance_nums(n1 \/\/ 10, n2) + 1\r\n    return digit_distance_nums(n1 \/\/ 10, n2 \/\/ 10) + digit_distance_nums(n1 % 10, n2 % 10)\r\n\r\n\r","votes":103063.012},{"text":"\r\n    num1 = int(n1)\r\n    num2 = int(n2)\r\n    sum1 = 0\r\n    sum2 = 0\r\n    while num1 > 0:\r\n        sum1 += num1 % 10\r\n        num1 \/\/= 10\r\n    while num2 > 0:\r\n        sum2 += num2 % 10\r\n        num2 \/\/= 10\r\n    return abs(sum1 - sum2)\r\n\r\n\r","votes":124893.94},{"text":"\r\n    if n1 > n2:\r\n        n1, n2 = n2, n1\r\n    total = 0\r\n    while n1!= 0:\r\n        total += abs(n1 % 10 - n2 % 10)\r\n        n1 \/\/= 10\r\n        n2 \/\/= 10\r\n    return total\r\n\r\n\r","votes":127065.636},{"text":"\r\n    n1_list = list(str(n1))\r\n    n2_list = list(str(n2))\r\n    n1_len = len(n1_list)\r\n    n2_len = len(n2_list)\r\n    n1_digit_sum = 0\r\n    n2_digit_sum = 0\r\n    for i in range(n1_len):\r\n        n1_digit_sum += int(n1_list[i])\r\n    for i in range(n2_len):\r\n        n2_digit_sum += int(n2_list[i])\r\n    return abs(n1_digit_sum - n2_digit_sum)\r\n\r\n\r","votes":157985.196},{"text":"\r\n    number1 = str(n1)\r\n    number2 = str(n2)\r\n    num1 = [int(i) for i in number1]\r\n    num2 = [int(i) for i in number2]\r\n    num_dist = 0\r\n    for i in range(len(num1)):\r\n        num_dist += abs(num1[i] - num2[i])\r\n    return num_dist\r\n\r\n\r","votes":161421.68},{"text":"\r\n    n1_digits = [int(i) for i in str(n1)]\r\n    n2_digits = [int(i) for i in str(n2)]\r\n    d = 0\r\n    for i in range(len(n1_digits)):\r\n        d += abs(n1_digits[i] - n2_digits[i])\r\n    return d\r\n\r\n\r","votes":189652.04},{"text":"\r\n    i = 0\r\n    while n1!= n2:\r\n        if n1 > n2:\r\n            n1 = n1 \/\/ 10\r\n        else:\r\n            n2 = n2 \/\/ 10\r\n        i += 1\r\n    return i\r\n\r\n\r\nprint(digit_distance_nums(123456, 654321))\r\nprint(digit_distance_nums(123456, 123456))\r\nprint(digit_distance_nums(987654, 123456))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    count = 0\r\n    if n1 < 0:\r\n        n1 *= -1\r\n    if n2 < 0:\r\n        n2 *= -1\r\n    if n1 == n2:\r\n        return 0\r\n    else:\r\n        while n1!= n2:\r\n            if n1 < n2:\r\n                n1 *= 10\r\n                count += 1\r\n            elif n1 > n2:\r\n                n2 *= 10\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    digit_distance = 0\r\n    while n1!= 0 or n2!= 0:\r\n        n1, n2 = divmod(n1, 10)\r\n        n2, n1 = divmod(n2, 10)\r\n        digit_distance += 1\r\n    return digit_distance\r\n\r\n\r","votes":null},{"text":"\r\n    return sum([abs(n1 - n2)])\r\n\r\n\r","votes":null},{"text":"\r\n    return abs(int(math.log10(abs(n1))) - int(math.log10(abs(n2))))\r\n\r\n\r","votes":null},{"text":"\r\n    digits = []\r\n    if n1 == 0 or n2 == 0:\r\n        return 1\r\n\r\n    while n1:\r\n        digits.append(n1 % 10)\r\n        n1 \/\/= 10\r\n\r\n    while n2:\r\n        digits.append(n2 % 10)\r\n        n2 \/\/= 10\r\n\r\n    diff = 0\r\n    for i in range(len(digits)):\r\n        diff += abs(digits[i] - digits[i+1])\r\n    return diff\r\n\r\n\r","votes":null},{"text":"\r\n    return abs(n1 - n2)\r\n\r\nprint(digit_distance_nums(123456789, 987654321)) # 8\r\nprint(digit_distance_nums(123, 321)) # 2\r\n\r\n# This is the output:\r\n# 8\r\n# 2\r\n```\r\n\r\n## 1.8.2 Recursion\r\n\r\n- Recursive function is a function that calls itself\r\n\r\n```python\r","votes":null},{"text":"\r\n    if n1 < 10:\r\n        n1 = '0' + str(n1)\r\n    if n2 < 10:\r\n        n2 = '0' + str(n2)\r\n    return abs(int(n1) - int(n2))\r\n\r\n\r","votes":null},{"text":"\r\n    return len(str(abs(n1-n2)))\r\n\r\nprint(digit_distance_nums(131, 132))\r\nprint(digit_distance_nums(131, 133))\r\n","votes":null},{"text":"\r\n    # TODO\r\n    # Hint: Use the built-in function abs()\r\n    # Hint: Use the built-in function len() to find the length of the integer\r\n    # Hint: Use the built-in function str() to convert an integer to a string\r\n\r\n    return abs(int(str(n1)) - int(str(n2)))\r\n\r\n\r\n# TODO\r\n# Write a python function to find the sum of the digits of an integer.\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 == n2:\r\n        return 0\r\n    elif n1 > n2:\r\n        return len(str(n1)) - len(str(n2))\r\n    else:\r\n        return len(str(n2)) - len(str(n1))\r\n\r\n\r","votes":null},{"text":"\r\n    diff1 = []\r\n    diff2 = []\r\n\r\n    # convert the numbers to strings\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n\r\n    # calculate the difference for each digit\r\n    for i in range(len(n1)):\r\n        diff1.append(abs(int(n1[i]) - int(n2[i])))\r\n\r\n    # calculate the difference for each digit\r\n    for i in range(len(n2)):\r\n        diff2.append(abs(int(n2[i]) - int(n1[i])))\r\n\r\n    # calculate the minimum difference\r\n    min_diff = min(diff1)\r\n    for i in range(len(diff2)):\r\n        if diff2[i] < min_diff:\r\n            min_diff = diff2[i]\r\n    return min_diff\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n1 = 12412\r\n    n2 = 12312\r\n    print(digit_distance_nums(n1, n2))\r\n    assert digit_distance_nums(n1, n2) == 3\r\n","votes":null},{"text":"\r\n    if n2 < n1:\r\n        return n1 - n2\r\n    else:\r\n        return n2 - n1\r\n\r\n\r","votes":null},{"text":"\r\n    while n1!= 0 or n2!= 0:\r\n        if n1 > n2:\r\n            n1, n2 = n1 - n2, n2\r\n        else:\r\n            n1, n2 = n1 - n2, n1\r\n    return n2\r\n\r\n\r\n# Tests\r\nprint(digit_distance_nums(1234, 1234))\r\nprint(digit_distance_nums(1234, 1233))\r\nprint(digit_distance_nums(1234, 1232))\r\nprint(digit_distance_nums(1234, 1231))\r\nprint(digit_distance_nums(1234, 1230))\r\nprint(digit_distance_nums(1234, 1229))\r\nprint(digit_distance_nums(1234, 1228))\r\nprint(digit_distance_nums(1234, 1227))\r\nprint(digit_distance_nums(1234, 1226))\r\nprint(digit_distance_nums(1234, 1225))\r\nprint(digit_distance_nums(1234, 1224))\r\nprint(digit_distance_nums(1234, 1223))\r\nprint(digit_distance_nums(1234, 1222))\r\nprint(digit_distance_nums(1234, 1221))\r\nprint(digit_distance_nums(1234, 1220))\r\nprint(digit_distance_nums(1234, 1219))\r\nprint(digit_distance_nums(1234, 1218))\r\nprint(digit_distance_nums(1234, 1217))\r\nprint(digit_distance_nums(1234, 1216))\r\nprint(digit_distance_nums(1234, 1215))","votes":null},{"text":"\r\n    if n1 == n2:\r\n        return 0\r\n    else:\r\n        if n1 > n2:\r\n            n1 -= n2\r\n        else:\r\n            n2 -= n1\r\n    return n1\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 > n2:\r\n        n1, n2 = n2, n1\r\n    return len(str(n1)) - len(str(n2))\r\n\r\n\r","votes":null},{"text":"\r\n    return abs(n1 - n2)\r\n\r\n\r","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    d = 0\r\n    for i in range(len(n1)):\r\n        if n1[i]!= n2[i]:\r\n            d += 1\r\n    return d\r\n\r","votes":null},{"text":"\r\n    return (abs(n1 - n2))\r\n\r\n\r","votes":null},{"text":"\r\n    return len(str(abs(n1 - n2)))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(digit_distance_nums(123456789, 987654321))\r\n","votes":null},{"text":"\r\n    return sum(map(lambda x: x if x>0 else 0, abs(n1 - n2)))\r\n\r","votes":null},{"text":"\r\n    # use the built-in function abs() to compute the absolute value of the difference\r\n    return abs(int(str(n1)[:-1]) - int(str(n2)[:-1]))\r\n\r\n\r\n# The following code will test your digit_distance_nums function\r\nprint digit_distance_nums(100, 99) # Should print 1\r\nprint digit_distance_nums(1234, 123) # Should print 4\r\nprint digit_distance_nums(12345, 1234) # Should print 5\r\n\r\n\r\n# 3. Write a python function to find the total number of digits in an integer.\r\n\r","votes":null},{"text":"\r\n    if n1 == n2:\r\n        return 0\r\n    elif n1 >= 10:\r\n        return digit_distance_nums(n1 \/\/ 10, n2 \/\/ 10) + 1\r\n    else:\r\n        return digit_distance_nums(n1 \/\/ 10, n2 % 10) + 1\r\n\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"Print the digit distance between two integers.\"\"\"\r\n    n1 = int(input('Enter an integer: '))\r\n    n2 = int(input('Enter another integer: '))\r\n    print(digit_distance_nums(n1, n2))\r\n","votes":null},{"text":"\r\n\r\n    str_num1 = str(n1)\r\n    str_num2 = str(n2)\r\n\r\n    digit_distance = abs(int(str_num1)-int(str_num2))\r\n\r\n    return digit_distance\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n","votes":null},{"text":"\r\n    distance = 0\r\n    # Your code here.\r\n    return distance\r\n\r\n# Tests\r\nassert digit_distance_nums(123, 456) == 3\r\nassert digit_distance_nums(1234, 5678) == 4\r\nassert digit_distance_nums(123456, 789012) == 6\r\nassert digit_distance_nums(1234567, 901234) == 7\r\nassert digit_distance_nums(12345678, 012345) == 8\r\nassert digit_distance_nums(01234567, 9876543) == 7\r\nassert digit_distance_nums(98765432, 1234567) == 7\r\nassert digit_distance_nums(99999999, 00000000) == 0\r\nassert digit_distance_nums(99999999, 00000001) == 1\r\nassert digit_distance_nums(99999999, 00000010) == 2\r\nassert digit_distance_nums(99999999, 00000100) == 3\r\nassert digit_distance_nums(99999999, 00001000) == 4\r\nassert digit_distance_nums(99999999, 00010000) == 5\r\nassert digit_distance_nums(99999999, 00100000) == 6\r\nassert digit_distance_nums(99999999, 01000000) == 7\r\nassert digit_distance_nums(99999999, 10000000) ==","votes":null},{"text":"\r\n    \r\n    # Get the number of digits in the first integer\r\n    num1 = len(str(n1))\r\n    \r\n    # Get the number of digits in the second integer\r\n    num2 = len(str(n2))\r\n    \r\n    # Check if the number of digits is same\r\n    if num1 == num2:\r\n        # Get the difference between the numbers\r\n        diff = n1 - n2\r\n        \r\n        # Return the difference\r\n        return diff\r\n    else:\r\n        # Return the minimum number of digits\r\n        return min(num1, num2)\r\n\r\n# Call the function\r\ndigit_distance_nums(12, 13)\r\n\r\n# + [markdown] id=\"7U9eU19B5J0J\"\r\n# ## 2.5.2) Using reduce()\r\n#\r\n# In this exercise, you will use reduce() to find the digit distance between two integers.\r\n#\r\n# **Instructions**\r\n#\r\n# Use reduce() to find the digit distance between two integers.\r\n#\r\n# **Hints**\r\n#\r\n# Use the built-in function `reduce()` to find the digit distance between two integers.\r\n#\r\n# **Answer**\r\n#\r\n# ```python\r\n# digit_distance_nums = lambda n1, n2: reduce(\r\n#     lambda x, y: x + 1 if y > x else y,\r\n#     map(int, str(n1).zfill(len(str(n2))))\r\n# )\r\n\r\n# digit_distance_nums(12, 13)\r\n# ```\r\n# -\r\n\r\n# # 2.6) Find the First Non-Repeating Character (Non-Repeating Characters)\r\n#\r\n# **Instructions**\r\n#\r\n# In this exercise, you will find the first non-repeating character in a string of characters.\r\n#\r\n# **Example**\r\n#\r\n# For example, the first non-repeating character in the string `'abcabcbb'` is `'b'`.\r\n#\r\n# **Hints**\r\n#\r\n# Use a dictionary to store the count of each character in the string and find the firs","votes":null},{"text":"\r\n    diff = list(str(abs(n1 - n2)))\r\n    return len(diff)\r\n\r\n\r","votes":null},{"text":"\r\n    return len(str(n1)) - len(str(n2))\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(abs(num1 - num2) for num1, num2 in zip(str(n1), str(n2)))\r\n\r\n\r","votes":null},{"text":"\r\n    return str(n1).count(str(n2))\r\n\r\n\r","votes":null},{"text":"\r\n    # Find number of digits in the first number\r\n    num_digits_1 = len(str(n1))\r\n\r\n    # Find number of digits in the second number\r\n    num_digits_2 = len(str(n2))\r\n\r\n    # Find number of digits required to store the sum\r\n    num_digits_sum = max(num_digits_1, num_digits_2)\r\n\r\n    # Initialize the sum\r\n    sum_digits = 0\r\n\r\n    # Calculate the difference between the two numbers\r\n    for i in range(num_digits_sum):\r\n        # Find the difference between the first number and the second number\r\n        diff = n1 - n2\r\n\r\n        # Add the digit difference to the sum\r\n        sum_digits += diff % 10\r\n\r\n        # Divide the difference by 10 to get the next digit\r\n        diff \/\/= 10\r\n\r\n    return sum_digits\r\n\r\n\r\nif __name__ == '__main__':\r\n    digit_distance_nums(345, 321)\r\n    digit_distance_nums(100, 10)\r\n","votes":null},{"text":"\r\n\r\n    if n1 == n2:\r\n        return 0\r\n    else:\r\n        return abs(n1 - n2)\r\n\r\n\r\nprint(digit_distance_nums(12, 34))\r\n","votes":null},{"text":"\r\n    if n1 == 0:\r\n        return n2\r\n    return digit_distance_nums(n1\/\/10, n2\/\/10) + (n1%10!= n2%10)\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    for i in range(len(n1)):\r\n        if n1[i]!= n2[i]:\r\n            distance += 1\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    # Calculate the distance between two numbers\r\n    distance = 0\r\n    for i in range(len(n1_str)):\r\n        if int(n1_str[i])!= int(n2_str[i]):\r\n            distance += 1\r\n    return distance\r\n\r\n\r\n# Test case 1\r\nprint(digit_distance_nums(2221, 2222))\r\n# Expected Output: 0\r\n\r\n# Test case 2\r\nprint(digit_distance_nums(1000, 9999))\r\n# Expected Output: 1\r\n","votes":null},{"text":"\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    if len(n1_str) == len(n2_str):\r\n        return 0\r\n    elif len(n1_str) > len(n2_str):\r\n        n1_str = n1_str[:len(n2_str)]\r\n    else:\r\n        n2_str = n2_str[:len(n1_str)]\r\n    return len(list(set(n1_str))) + len(list(set(n2_str)))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(digit_distance_nums(2147483647, 2147483648))\r\n    print(digit_distance_nums(2147483647, 2147483648))\r\n    print(digit_distance_nums(2147483647, 2147483648))\r\n","votes":null},{"text":"\r\n    digits = 0\r\n    while n1 > 0:\r\n        if n1 % 10 == n2 % 10:\r\n            digits += 1\r\n        n1 = n1 \/\/ 10\r\n        n2 = n2 \/\/ 10\r\n    return digits\r\n","votes":null},{"text":"\r\n    return sum([abs(int(n1) - int(n2))])\r\n\r\n\r","votes":null},{"text":"\r\n    diff = 0\r\n    while n1!= n2:\r\n        if n1 > n2:\r\n            n1 -= n1\r\n        else:\r\n            n2 -= n2\r\n        diff += 1\r\n    return diff\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 > n2:\r\n        digits_n1 = len(str(n1))\r\n        digits_n2 = len(str(n2))\r\n    elif n1 < n2:\r\n        digits_n1 = len(str(n2))\r\n        digits_n2 = len(str(n1))\r\n    else:\r\n        return 0\r\n    return abs(digits_n1 - digits_n2)\r\n\r\n\r\nprint(digit_distance_nums(123456, 123457))\r\n","votes":null},{"text":"\r\n\r\n    difference = 0\r\n    if n1 > n2:\r\n        difference = n1 - n2\r\n    elif n1 < n2:\r\n        difference = n2 - n1\r\n    else:\r\n        difference = 0\r\n    return difference\r\n\r\n\r","votes":null},{"text":"\r\n    return(abs(n1-n2))\r\n\r","votes":null},{"text":"\r\n    if n1 == n2:\r\n        return 0\r\n    else:\r\n        count = 0\r\n        while n1 > 0:\r\n            n1, n2 = n1 \/\/ 10, n2 \/\/ 10\r\n            count += 1\r\n        return count\r\n\r\n\r\nassert digit_distance_nums(10, 10) == 0\r\nassert digit_distance_nums(111, 222) == 2\r\nassert digit_distance_nums(123, 123) == 0\r\nassert digit_distance_nums(123, 456) == 3\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Your code here\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    n1 = list(n1)\r\n    n2 = list(n2)\r\n    count = 0\r\n    for i in range(len(n1)):\r\n        if n1[i]!= n2[i]:\r\n            count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 == n2:\r\n        return 0\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    n1_len = len(n1_str)\r\n    n2_len = len(n2_str)\r\n    if n1_len > n2_len:\r\n        n1_str = n1_str + str(0).zfill(n1_len-n2_len)\r\n    elif n1_len < n2_len:\r\n        n2_str = n2_str + str(0).zfill(n2_len-n1_len)\r\n    return sum([int(n1_str[i])-int(n2_str[i]) for i in range(len(n1_str))])\r\n\r\n\r\nprint(digit_distance_nums(123456, 12346))\r\n```\r\n**Output:**\r\n```\r\n1\r\n```\r\n### Task 4 - Find the maximum of three numbers\r\n### Task 5 - Find the minimum of three numbers\r\n\r\n### Task 6 - Find the sum of two numbers\r\n### Task 7 - Find the product of two numbers\r\n### Task 8 - Find the quotient of two numbers\r\n### Task 9 - Find the remainder of two numbers\r\n### Task 10 - Find the square root of a number\r\n### Task 11 - Find the cube root of a number\r\n\r\n# Exercises\r\n\r\n**Task 1**\r\n```\r","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    n1_list = list(n1)\r\n    n2_list = list(n2)\r\n    n1_new = []\r\n    n2_new = []\r\n    for i in range(len(n1_list)):\r\n        if int(n1_list[i]) == int(n2_list[i]):\r\n            n1_new.append(int(n1_list[i]))\r\n        else:\r\n            n1_new.append(int(n1_list[i])+1)\r\n\r\n    for i in range(len(n2_list)):\r\n        if int(n1_list[i]) == int(n2_list[i]):\r\n            n2_new.append(int(n2_list[i]))\r\n        else:\r\n            n2_new.append(int(n2_list[i])+1)\r\n    n1_new = list(set(n1_new))\r\n    n2_new = list(set(n2_new))\r\n    n1_new.sort()\r\n    n2_new.sort()\r\n    digit_d = n1_new[0] - n2_new[0]\r\n    return digit_d\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(digit_distance_nums(123456, 234567))\r\n","votes":null},{"text":"\r\n    return len(str(abs(n1 - n2)))\r\n\r\n\r\nprint(digit_distance_nums(132, 444)) # 1\r\nprint(digit_distance_nums(132, 111)) # 2\r\nprint(digit_distance_nums(132, 4444)) # 3\r\nprint(digit_distance_nums(132, 132)) # 0\r\n","votes":null},{"text":"\r\n    n1 = list(str(n1))\r\n    n2 = list(str(n2))\r\n    n1 = [int(num) for num in n1]\r\n    n2 = [int(num) for num in n2]\r\n    n1_len = len(n1)\r\n    n2_len = len(n2)\r\n    diff_len = 0\r\n    res = []\r\n    for i in range(n1_len):\r\n        if n1[i]!= n2[i]:\r\n            diff_len += 1\r\n        res.append(diff_len)\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n\r\n    # Your code goes here\r\n    # Hint: Use a loop to compare the digits of the two numbers\r\n    # and calculate the distance\r\n\r\n    return distance\r\n\r\n\r\nprint(digit_distance_nums(367, 367))\r\nprint(digit_distance_nums(345, 245))\r\nprint(digit_distance_nums(345, 543))\r\nprint(digit_distance_nums(123, 321))\r\nprint(digit_distance_nums(123, 312))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 123))\r\n","votes":null},{"text":"\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    if len(n1_str) > len(n2_str):\r\n        n1_str = n1_str + '0' * (len(n2_str) - len(n1_str))\r\n    elif len(n2_str) > len(n1_str):\r\n        n2_str = n2_str + '0' * (len(n1_str) - len(n2_str))\r\n    return abs(int(n1_str) - int(n2_str))\r\n\r\n\r","votes":null},{"text":"\r\n    return abs(int(str(n1)[::-1])-int(str(n2)[::-1]))\r\n\r","votes":null},{"text":"\r\n    return sum(map(lambda x: abs(n1 - n2), map(lambda x: int(x), str(n1))))\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    while(n1!= n2):\r\n        if(n1 > n2):\r\n            n1 = n1 - 1\r\n            count += 1\r\n        else:\r\n            n2 = n2 - 1\r\n            count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    while n1 > 0 or n2 > 0:\r\n        if n1 > 0 and n2 > 0:\r\n            distance += 1\r\n            n1, n2 = n1\/\/10, n2\/\/10\r\n        elif n1 > 0 and n2 == 0:\r\n            distance += 1\r\n            n1 = n1\/\/10\r\n        elif n1 == 0 and n2 > 0:\r\n            distance += 1\r\n            n2 = n2\/\/10\r\n    return distance\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(digit_distance_nums(123, 1299))\r\n    print(digit_distance_nums(123, 123))\r\n    print(digit_distance_nums(123, 1234))\r\n    print(digit_distance_nums(1111, 1111))\r\n    print(digit_distance_nums(100, 1000))\r\n","votes":null},{"text":"\r\n\r\n    d = 0\r\n\r\n    while n1!= 0 and n2!= 0:\r\n        n1 = int(n1\/10)\r\n        n2 = int(n2\/10)\r\n        d += 1\r\n\r\n    return d\r\n\r\n\r\nprint(digit_distance_nums(12345, 67890))\r\n","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    distance = 0\r\n    for i in range(len(n1)):\r\n        if n1[i]!= n2[i]:\r\n            distance += 1\r\n    return distance\r\n\r","votes":null},{"text":"\r\n    # print(f\"The digit distance between the two numbers {n1} and {n2} is {str(abs(n1 - n2))}.\")\r\n    return abs(n1 - n2)\r\n\r","votes":null},{"text":"\r\n    n1_list = list(str(n1))\r\n    n2_list = list(str(n2))\r\n    n1_dict = {}\r\n    n2_dict = {}\r\n    for i in range(len(n1_list)):\r\n        if n1_list[i] in n1_dict:\r\n            n1_dict[n1_list[i]] += 1\r\n        else:\r\n            n1_dict[n1_list[i]] = 1\r\n    for i in range(len(n2_list)):\r\n        if n2_list[i] in n2_dict:\r\n            n2_dict[n2_list[i]] += 1\r\n        else:\r\n            n2_dict[n2_list[i]] = 1\r\n    for key, value in n1_dict.items():\r\n        if key not in n2_dict or n1_dict[key] < n2_dict[key]:\r\n            return 1\r\n    for key, value in n2_dict.items():\r\n        if key not in n1_dict or n2_dict[key] < n1_dict[key]:\r\n            return 1\r\n    return 0\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(digit_distance_nums(456, 1234))\r\n    print(digit_distance_nums(456, 456))\r\n    print(digit_distance_nums(1234, 1234))\r\n    print(digit_distance_nums(0, 0))\r\n    print(digit_distance_nums(534, 456))\r\n    print(digit_distance_nums(1234567890, 1234567890))\r\n","votes":null},{"text":"\r\n    d = 0\r\n    while n1!= 0 and n2!= 0:\r\n        if n1 > n2:\r\n            d += 1\r\n            n1 \/\/= 10\r\n        elif n1 < n2:\r\n            d -= 1\r\n            n2 \/\/= 10\r\n    return d\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 is None or n2 is None:\r\n        return None\r\n\r\n    if n1 == 0:\r\n        return n2\r\n    if n2 == 0:\r\n        return n1\r\n\r\n    return len(str(abs(n1 - n2)))\r\n\r\n\r","votes":null},{"text":"\r\n    d = 0\r\n    while n1!= n2:\r\n        if n1 > n2:\r\n            n1 = n1 \/\/ 10\r\n        elif n1 < n2:\r\n            n1 = n1 * 10\r\n        d += 1\r\n    return d\r\n\r\n\r","votes":null},{"text":"\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    length = len(n1_str)\r\n    dist = 0\r\n\r\n    for i in range(length):\r\n        if n1_str[i]!= n2_str[i]:\r\n            dist += 1\r\n\r\n    return dist\r\n\r\n\r\nprint(digit_distance_nums(22222, 11111))\r\n","votes":null},{"text":"\r\n    # Your code here!\r\n    a = str(n1)\r\n    b = str(n2)\r\n    c = 0\r\n    for i in range(0, len(a)):\r\n        if a[i]!= b[i]:\r\n            c += 1\r\n    return c\r\n\r\n\r\nprint(digit_distance_nums(1234, 4321))\r\nprint(digit_distance_nums(1234, 1234))\r\nprint(digit_distance_nums(1234, 1235))\r\nprint(digit_distance_nums(1234, 1236))\r\nprint(digit_distance_nums(1234, 1237))\r\nprint(digit_distance_nums(1234, 1238))\r\nprint(digit_distance_nums(1234, 1239))\r\nprint(digit_distance_nums(1234, 1240))\r\nprint(digit_distance_nums(1234, 1241))\r\nprint(digit_distance_nums(1234, 1242))\r\nprint(digit_distance_nums(1234, 1243))\r\nprint(digit_distance_nums(1234, 1244))\r\nprint(digit_distance_nums(1234, 1245))\r\nprint(digit_distance_nums(1234, 1246))\r\nprint(digit_distance_nums(1234, 1247))\r\nprint(digit_distance_nums(1234, 1248))\r\nprint(digit_distance_nums(1234, 1249))\r\nprint(digit_distance_nums(1234, 1250))\r\nprint(digit_distance_nums(1234, 1251))\r\nprint(digit_distance_nums(1234, 1252))\r\nprint(digit","votes":null},{"text":"\r\n    return len(str(abs(n1-n2)))\r\n\r","votes":null},{"text":"\r\n    # Convert the integers to strings\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n\r\n    # Length of the shortest string\r\n    shortest = min(len(n1_str), len(n2_str))\r\n\r\n    # Initialize the current digit distance\r\n    digit_distance = 0\r\n\r\n    # Iterating through the shortest string\r\n    for i in range(shortest):\r\n\r\n        # Compare each digit in the strings\r\n        if n1_str[i]!= n2_str[i]:\r\n            digit_distance += 1\r\n\r\n    # Return the digit distance\r\n    return digit_distance\r\n\r\n\r\n# Test case 1\r\nn1 = 12345\r\nn2 = 4321\r\nprint(digit_distance_nums(n1, n2))\r\n# Expected Output: 4\r\n\r\n# Test case 2\r\nn1 = 1000000000\r\nn2 = 1000000000\r\nprint(digit_distance_nums(n1, n2))\r\n# Expected Output: 0\r\n","votes":null},{"text":"\r\n    answer = 0\r\n    if n1 < 0 or n2 < 0:\r\n        return \"n1 and n2 must not be less than 0\"\r\n    if n1 == n2:\r\n        return 0\r\n    if n1 > n2:\r\n        n1, n2 = n2, n1\r\n    while n1 > 0:\r\n        n1, n2 = n1 \/\/ 10, n2 \/\/ 10\r\n        answer += 1\r\n    return answer\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    diff = abs(n1 - n2)\r\n    return diff\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    # n1: int\r\n    # n2: int\r\n    res = 0\r\n    while n1!= 0 or n2!= 0:\r\n        if n1 == 0:\r\n            res += n2\r\n        if n2 == 0:\r\n            res += n1\r\n        if n1 < n2:\r\n            res += 1\r\n            n1 \/\/= 10\r\n        else:\r\n            res += 1\r\n            n2 \/\/= 10\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    return abs(str(n1)[:len(str(n2))] == str(n2))\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    # loop over the digits of n1 and n2\r\n    for i in range(len(str(n1))):\r\n        for j in range(len(str(n2))):\r\n            if int(str(n1)[i]) == int(str(n2)[j]):\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    while n1!= 0 or n2!= 0:\r\n        if n1 == 0:\r\n            n1 = n2\r\n            n2 = 0\r\n        elif n2 == 0:\r\n            n2 = n1\r\n            n1 = 0\r\n        else:\r\n            if n1 < n2:\r\n                n1, n2 = n2, n1\r\n            digit_distance = 1\r\n            while n1 % 10 == n2 % 10:\r\n                digit_distance += 1\r\n                n1 \/\/= 10\r\n                n2 \/\/= 10\r\n            distance += digit_distance\r\n            n1 \/\/= 10\r\n            n2 \/\/= 10\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    result = 0\r\n    while n1!= n2:\r\n        if n1 > n2:\r\n            n1 -= 1\r\n            result += 1\r\n        else:\r\n            n2 -= 1\r\n            result += 1\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 == 0 and n2 == 0:\r\n        return 0\r\n    elif n1 == 0:\r\n        return n2 * 10\r\n    elif n2 == 0:\r\n        return n1 * 10\r\n    elif n1 > n2:\r\n        return n1 - n2\r\n    else:\r\n        return n2 - n1\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    l1 = list(str(n1))\r\n    l2 = list(str(n2))\r\n    # print(l1)\r\n    # print(l2)\r\n    # if len(l1)!= len(l2):\r\n    #     return -1\r\n    # else:\r\n    #     for x in range(0, len(l1)):\r\n    #         if l1[x]!= l2[x]:\r\n    #             return x\r\n    #     return len(l1)\r\n    # print(l1)\r\n    # print(l2)\r\n    # print(len(l1))\r\n    # if len(l1) < len(l2):\r\n    #     l1 = l1 + [0] * (len(l2) - len(l1))\r\n    # elif len(l1) > len(l2):\r\n    #     l2 = l2 + [0] * (len(l1) - len(l2))\r\n    # print(l1)\r\n    # print(l2)\r\n    # print(len(l1))\r\n    # print(len(l2))\r\n    # print(list(l1) + list(l2))\r\n    # print(list(l1) + [0] * (len(l2) - len(l1)))\r\n    # print([0] * (len(l1) - len(l2)) + list(l1))\r\n    # print([0] * (len(l2) - len(l1)) + list(l2))\r\n    # return abs(sum(int(x) for x in list(l1)) - sum(int(x) for x in list(l2)))\r\n    # print(sum(int(x) for x in list(l1)) - sum(int(x) for x in list(l2)))\r\n    # return sum(int(x) for x in list(l1)) - sum(int(x) for x in list(l2))\r\n    # return sum(int(x) for x in list(l1)) - sum(int(x) for x in list(l2))\r\n    # return abs(sum(int(x) for x in list(l1)","votes":null},{"text":"\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    dist = 0\r\n    for i in range(len(n1_str)):\r\n        if n1_str[i] == n2_str[i]:\r\n            dist += 0\r\n        else:\r\n            if int(n1_str[i]) > int(n2_str[i]):\r\n                dist += 1\r\n            else:\r\n                dist += 2\r\n    return dist\r\n\r\n\r\nprint(digit_distance_nums(123456, 789123))\r\nprint(digit_distance_nums(123456, 123456))\r\nprint(digit_distance_nums(123456, 1000000))\r\nprint(digit_distance_nums(123456, 999999))\r\nprint(digit_distance_nums(12345, 123456))\r\n","votes":null},{"text":"\r\n    if n1 == 0:\r\n        return n2\r\n    elif n2 == 0:\r\n        return n1\r\n    else:\r\n        return digit_distance_nums(n1 \/\/ 10, n2 \/\/ 10) + 1 if (n1 % 10!= n2 % 10) else digit_distance_nums(n1 \/\/ 10, n2 \/\/ 10)\r\n\r\n# 18\r\n\r","votes":null},{"text":"\r\n    num1 = str(n1)\r\n    num2 = str(n2)\r\n    # print(num1, num2)\r\n    digit_dist = 0\r\n    for i in range(len(num1)):\r\n        if num1[i]!= num2[i]:\r\n            digit_dist += 1\r\n    return digit_dist\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(digit_distance_nums(1000000, 999999)) # 9","votes":null},{"text":"\r\n    temp = abs(n1 - n2)\r\n    return temp\r\n\r\n\r","votes":null},{"text":"\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    if len(n1_str)!= len(n2_str):\r\n        return -1\r\n    if len(n1_str) == 0:\r\n        return 0\r\n    return len(set(n1_str).symmetric_difference(set(n2_str)))\r\n\r\n\r\nassert digit_distance_nums(222, 111) == 2\r\nassert digit_distance_nums(100, 100) == 0\r\nassert digit_distance_nums(111, 222) == 2\r\nassert digit_distance_nums(222, 100) == 1\r\nassert digit_distance_nums(101, 201) == 2\r\nassert digit_distance_nums(101, 101) == 0\r\nassert digit_distance_nums(100, 201) == 1\r\nassert digit_distance_nums(100, 100) == 0\r\nassert digit_distance_nums(222, 222) == 0\r\nassert digit_distance_nums(111, 111) == 0\r\nassert digit_distance_nums(222, 10000) == -1\r\n","votes":null},{"text":"\r\n    return max(abs(n1 - n2), 10)\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 > n2:\r\n        difference = n1 - n2\r\n    elif n1 < n2:\r\n        difference = n2 - n1\r\n    else:\r\n        difference = 0\r\n    return difference\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    # The function accepts two integers\r\n    # The function returns the digit distance between them\r\n    # You can use any algorithm to solve this problem\r\n    # You may use any function from the standard library\r\n    # You may use any function from the itertools module\r\n    # You may use any function from the operator module\r\n    # You may use any function from the math module\r\n    # You may use any function from the functools module\r\n    # You may use any function from the collections module\r\n    return sum(map(abs, str(n1) + str(n2)))\r\n\r\n# Tests\r\nassert digit_distance_nums(9, 1) == 1\r\nassert digit_distance_nums(123456789, 87654321) == 10\r\nassert digit_distance_nums(123456789, 987654321) == 10\r\nassert digit_distance_nums(123456789, 987654320) == 10\r\nassert digit_distance_nums(123456789, 987654319) == 11\r\nassert digit_distance_nums(123456789, 9876543210) == 10\r\nassert digit_distance_nums(999999999, 987654321) == 10\r\nassert digit_distance_nums(999999999, 9876543210) == 10\r\nassert digit_distance_nums(999999999, 9876543200) == 10\r\nassert digit_distance_nums(999999999, 9876543199) == 11\r\nassert digit_distance_nums(999999999, 98765432100) == 1","votes":null},{"text":"\r\n    diff = abs(n1 - n2)\r\n    return diff\r\n\r\n\r","votes":null},{"text":"\r\n    distance = 0\r\n    if n1 < 10:\r\n        distance += 1\r\n    if n2 < 10:\r\n        distance += 1\r\n    while n1!= 0 and n2!= 0:\r\n        if n1 < 10:\r\n            distance += 1\r\n        if n2 < 10:\r\n            distance += 1\r\n        n1 = n1 \/\/ 10\r\n        n2 = n2 \/\/ 10\r\n\r\n    return distance\r\n\r\n\r\n# Tests\r\nprint(digit_distance_nums(859, 895))\r\nprint(digit_distance_nums(123456789, 123456790))\r\nprint(digit_distance_nums(123456789, 123456780))\r\nprint(digit_distance_nums(123456789, 123456799))\r\nprint(digit_distance_nums(123456789, 123456800))\r\n","votes":null},{"text":"\r\n    return len(str(abs(n1 - n2)))\r\n\r\n\r","votes":null},{"text":"\r\n    return len(str(n1)) - len(str(n2))\r\n\r\n\r\nprint(digit_distance_nums(12, 13))\r\nprint(digit_distance_nums(123, 1234))\r\nprint(digit_distance_nums(1234, 321))\r\nprint(digit_distance_nums(1234, 1234))\r\nprint(digit_distance_nums(12345, 1234))\r\nprint(digit_distance_nums(12345, 654321))\r\nprint(digit_distance_nums(123456, 12345))\r\nprint(digit_distance_nums(123456, 654321))\r\nprint(digit_distance_nums(1234567, 123456))\r\nprint(digit_distance_nums(1234567, 654321))\r\nprint(digit_distance_nums(12345678, 1234567))\r\nprint(digit_distance_nums(12345678, 654321))\r\nprint(digit_distance_nums(12345678, 12345678))\r\nprint(digit_distance_nums(12345678, 123456789))\r\nprint(digit_distance_nums(123456789, 12345678))\r\nprint(digit_distance_nums(123456789, 123456789))\r\nprint(digit_distance_nums(123456789, 1234567890))\r\nprint(digit_distance_nums(1234567890, 123456789))\r\nprin","votes":null},{"text":"\r\n    # Write your code here\r\n    digit_distance = 0\r\n    if n1 < 10 and n2 < 10:\r\n        digit_distance = 0\r\n    elif n1 < 10 and n2 > 10:\r\n        digit_distance = 1\r\n    elif n1 > 10 and n2 < 10:\r\n        digit_distance = 2\r\n    else:\r\n        digit_distance = 3\r\n        while n1!= 0 or n2!= 0:\r\n            if n1 == 0:\r\n                digit_distance += 1\r\n            elif n2 == 0:\r\n                digit_distance += 1\r\n            elif n1 > n2:\r\n                digit_distance += 1\r\n                n1 -= 1\r\n            else:\r\n                digit_distance += 1\r\n                n2 -= 1\r\n        return digit_distance\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n1 = int(input(\"Enter first number: \"))\r\n    n2 = int(input(\"Enter second number: \"))\r\n    print(digit_distance_nums(n1, n2))\r\n","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    d1 = 0\r\n    d2 = 0\r\n    for i in range(len(n1)):\r\n        if n1[i]!= n2[i]:\r\n            d1 += 1\r\n    for i in range(len(n2)):\r\n        if n1[i]!= n2[i]:\r\n            d2 += 1\r\n    return d1, d2\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    return abs(n1 - n2)\r\n\r\n\r","votes":null}],"time":{"count":7.0,"avg":137744.3548571428,"std":33069.6117289715,"cov":0.2400796153}}
{"id":559,"question":"def max_sub_array_sum(a, size):\r\n    \"\"\"Write a function to find the largest sum of contiguous subarray in the given array.\"\"\"","answers":[{"text":"\r\n\r\n    # initialize sum\r\n    sum_of_subarray = 0\r\n    max_sum = -9999999\r\n\r\n    for i in range(size):\r\n        sum_of_subarray += a[i]\r\n\r\n        # update max sum if possible\r\n        if sum_of_subarray < 0:\r\n            sum_of_subarray = 0\r\n\r\n        if sum_of_subarray > max_sum:\r\n            max_sum = sum_of_subarray\r\n\r\n    return max_sum\r\n\r\n\r","votes":100596.612},{"text":"\r\n    sum = 0\r\n    max_sum = 0\r\n    for i in range(size):\r\n        sum = sum + a[i]\r\n        max_sum = max(sum, max_sum)\r\n        if sum < 0:\r\n            sum = 0\r\n    return max_sum\r\n\r\n\r","votes":103360.74},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":110130.908},{"text":"\r\n    window = 0\r\n    max_sum = float('-inf')\r\n    for i in range(size):\r\n        window += a[i]\r\n        if window < 0:\r\n            window = 0\r\n        max_sum = max(max_sum, window)\r\n    return max_sum\r\n\r\n\r","votes":110722.08},{"text":"\r\n    # Write your code here\r\n    # a is an array of integers\r\n    # size is the size of the array\r\n    # Write your code here\r\n    # a is the array of integers\r\n    # size is the size of the array\r\n    # Initialize the sum of the contiguous subarray\r\n    # Initialize the max sum of the contiguous subarray\r\n    # Initialize the max sum of the contiguous subarray\r\n    # Initialize the max sum of the contiguous subarray\r\n    # Initialize the max sum of the contiguous subarray\r\n    sum = curr_sum = max_sum = -float(\"inf\")\r\n    # Loop through all the elements of the array\r\n    for i in range(size):\r\n        # If the current sum of the contiguous subarray is less than 0 then\r\n        # Initialize the sum of the contiguous subarray to 0\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n        # Add the element to the sum of the contiguous subarray\r\n        curr_sum += a[i]\r\n        # If the sum of the contiguous subarray is greater than the max sum of the contiguous subarray\r\n        # Update the max sum of the contiguous subarray\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n    return max_sum\r\n\r\n\r\n# Driver code\r\narr = [1, -5, 2, -3]\r\nprint(max_sub_array_sum(arr, len(arr)))\r\n","votes":112985.432},{"text":"\r\n    max_sum = 0\r\n    current_sum = 0\r\n    for index in range(size):\r\n        current_sum += a[index]\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n    return max_sum\r\n\r","votes":113285.84},{"text":"\r\n    # TODO: Write your code here\r\n    s = 0\r\n    max_sum = 0\r\n    for i in range(size):\r\n        s += a[i]\r\n        if s < 0:\r\n            s = 0\r\n        if s > max_sum:\r\n            max_sum = s\r\n    return max_sum\r\n\r\n\r\n# print(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7))\r\n# print(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9))\r\nprint(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 8))\r\n","votes":113535.948},{"text":"\r\n    max_so_far = cur_sum = 0\r\n\r\n    for i in range(size):\r\n        cur_sum += a[i]\r\n        max_so_far = max(max_so_far, cur_sum)\r\n        if cur_sum < 0:\r\n            cur_sum = 0\r\n\r\n    return max_so_far\r\n\r\n\r","votes":114110.972},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":116875.388},{"text":"\r\n    if size == 0 or size == 1:\r\n        return a[0]\r\n    max_sum = a[0]\r\n    current_sum = a[0]\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(max_sum, current_sum)\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(max_sub_array_sum([1, 2, 3, -1, -2, 6, 7, 8, -1, -2, -3], 9))\r\n","votes":117492.876},{"text":"\r\n    max_sum = a[0]\r\n    current_sum = 0\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n        elif current_sum > max_sum:\r\n            max_sum = current_sum\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, -2, -3, 4, -1, 2, 1, -5, 4]\r\n    size = len(a)\r\n    print(max_sub_array_sum(a, size))\r\n","votes":118565.676},{"text":"\r\n    array_sum = 0\r\n    max_sum = 0\r\n    for i in range(size):\r\n        array_sum += a[i]\r\n        if array_sum < 0:\r\n            array_sum = 0\r\n        max_sum = max(max_sum, array_sum)\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n","votes":120470.836},{"text":"\r\n    sum_ = 0\r\n    max_sum = 0\r\n    for i in range(size):\r\n        sum_ += a[i]\r\n        if sum_ < 0:\r\n            sum_ = 0\r\n        if sum_ > max_sum:\r\n            max_sum = sum_\r\n    return max_sum\r\n\r\n\r","votes":121121.416},{"text":"\r\n\r\n    dp = [0 for _ in range(size)]\r\n    max_sum = a[0]\r\n    for i in range(1, size):\r\n        dp[i] = max(a[i], dp[i-1] + a[i])\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r","votes":124243.332},{"text":"\r\n\r\n    if not a:\r\n        return a\r\n\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n\r\n    return max_so_far\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, 2, 3, -1, -2]\r\n    print(max_sub_array_sum(a, len(a)))\r\n","votes":125522.516},{"text":"\r\n    s = 0\r\n    max_so_far = -1000\r\n    for i in range(size):\r\n        s += a[i]\r\n        max_so_far = max(max_so_far, s)\r\n        if s < 0:\r\n            s = 0\r\n    return max_so_far\r\n\r\nif __name__ == \"__main__\":\r\n    print(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 6))\r\n","votes":132083.944},{"text":"\r\n    if size == 1:\r\n        return a[0]\r\n    a_sum = 0\r\n    max_sum = 0\r\n    for i in range(size):\r\n        a_sum += a[i]\r\n        if a_sum < 0:\r\n            a_sum = 0\r\n        if max_sum < a_sum:\r\n            max_sum = a_sum\r\n    return max_sum\r\n\r\n\r","votes":132801.252},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(1, size):\r\n        max_ending_here = max(max_ending_here + a[i], a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, -2, 3, 10, -4, 7, 2, -5]\r\n    print(max_sub_array_sum(a, len(a)))\r\n","votes":134808.552},{"text":"\r\n    global max_sum\r\n    max_sum = 0\r\n    for i in range(size):\r\n        local_sum = 0\r\n        for j in range(i, size):\r\n            local_sum += a[j]\r\n            if local_sum > max_sum:\r\n                max_sum = local_sum\r\n    return max_sum\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, -4, 5, 6, -7]\r\n    size = len(arr)\r\n    max_sub_array_sum(arr, size)\r\n    print(max_sum)\r\n","votes":134956.852},{"text":"\r\n    if size < 1:\r\n        return 0\r\n    max_sum, current_sum = 0, 0\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n        max_sum = max(max_sum, current_sum)\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(max_sub_array_sum(test_array, len(test_array)))\r\n","votes":135744.128},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    if size == 1:\r\n        return a[0]\r\n    dp = [-1] * size\r\n    dp[0] = a[0]\r\n    max_sum = dp[0]\r\n    for i in range(1, size):\r\n        dp[i] = max(a[i], dp[i - 1] + a[i])\r\n        max_sum = max(dp[i], max_sum)\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, -2, 8, 9, -3, -4]\r\n    print(max_sub_array_sum(arr, len(arr)))\r\n","votes":140243.744},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_ending_here, max_so_far)\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [1, -2, 3, 10, -4, 7, 2, -5]\r\n    print(max_sub_array_sum(a, 7))\r\n","votes":140452.68},{"text":"\r\n    max_sum = 0\r\n    current_sum = 0\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    size = len(a)\r\n    print(max_sub_array_sum(a, size))\r\n","votes":141088.364},{"text":"\r\n    sum = 0\r\n    max_sum = 0\r\n    for i in range(size):\r\n        sum += a[i]\r\n        if sum < 0:\r\n            sum = 0\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [3, -1, 2, -6, 10, -10, 1, -2, -4, -2, -3, -1, -2, 0, -7, 3, 1, 2, 0]\r\n    print(max_sub_array_sum(a, len(a)))\r\n","votes":141822.304},{"text":"\r\n    if len(a) == 1:\r\n        return a[0]\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":145623.48},{"text":"\r\n    max_sum = a[0]\r\n    curr_sum = 0\r\n    for i in range(size):\r\n        curr_sum = max(curr_sum + a[i], a[i])\r\n        max_sum = max(max_sum, curr_sum)\r\n    return max_sum\r\n\r\n\r\narr = [1, 2, 3, -2, -1, 2, 3, 1]\r\nprint(max_sub_array_sum(arr, len(arr)))\r\n","votes":146517.068},{"text":"\r\n    max_sum = -99999999999999999999\r\n    cur_sum = 0\r\n    for i in range(size):\r\n        cur_sum = max(cur_sum + a[i], a[i])\r\n        max_sum = max(max_sum, cur_sum)\r\n    return max_sum\r\n\r\n\r","votes":151966.744},{"text":"\r\n    max_sum = float(\"-inf\")\r\n    for i in range(size):\r\n        cur_sum = 0\r\n        for j in range(i, size):\r\n            cur_sum += a[j]\r\n            max_sum = max(max_sum, cur_sum)\r\n    return max_sum\r\n\r\nif __name__ == '__main__':\r\n    print(max_sub_array_sum([1, -2, 3, -4, 5, -6], 6))\r\n    print(max_sub_array_sum([3, 2, -4], 3))\r\n    print(max_sub_array_sum([-1, 1, 0], 3))\r\n    print(max_sub_array_sum([1, 2, -2, 3], 4))\r\n","votes":152082.872},{"text":"\r\n    max_sum = -float(\"inf\")\r\n    sum_ = 0\r\n\r\n    for i in range(size):\r\n        sum_ += a[i]\r\n        if sum_ < 0:\r\n            sum_ = 0\r\n        max_sum = max(max_sum, sum_)\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(max_sub_array_sum([1, -2, 3, -4], 4))\r\n    print(max_sub_array_sum([4, -2, 3, -4], 4))\r\n    print(max_sub_array_sum([1, -2, 3, -4, 5, 6, 7, 8], 8))\r\n\r\n    print(max_sub_array_sum([1, 22, -9, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 17))\r\n","votes":157257.212},{"text":"\r\n    # Your code here\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here += a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        if max_ending_here > max_so_far:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    size = int(input(\"Enter the size of the array: \"))\r\n    arr = [int(x) for x in input(\"Enter the array: \").split()]\r\n    print(max_sub_array_sum(arr, size))\r\n","votes":157695.08},{"text":"\r\n    array_sum = 0\r\n    largest_sum = 0\r\n    for i in range(size):\r\n        array_sum += a[i]\r\n        if array_sum < 0:\r\n            array_sum = 0\r\n        largest_sum = max(array_sum, largest_sum)\r\n    return largest_sum\r\n\r","votes":158133.952},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(1, size):\r\n        max_ending_here = max(max_ending_here + a[i], a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r\n# Test cases\r\na = [1, -2, 3, 10, -4, 7, 2, -5]\r\nprint(max_sub_array_sum(a, len(a)))\r\na = [1, 2, 3, -1, 4, 5, 6]\r\nprint(max_sub_array_sum(a, len(a)))\r\na = [0, -1, -2, -3, -4]\r\nprint(max_sub_array_sum(a, len(a)))\r\na = [1, 2]\r\nprint(max_sub_array_sum(a, len(a)))\r\na = [1, 2, 3, 4, 5, 6, 7, 8]\r\nprint(max_sub_array_sum(a, len(a)))\r\n","votes":167089.84},{"text":"\r\n    # Write your code here.\r\n    sum = 0\r\n    max_sum = a[0]\r\n    for i in range(1, size):\r\n        sum += a[i]\r\n        if sum < 0:\r\n            sum = 0\r\n        max_sum = max(max_sum, sum)\r\n    return max_sum\r\n\r\n\r","votes":169807.088},{"text":"\r\n    if size <= 1:\r\n        return a[0]\r\n    if size == 2:\r\n        return max(a[0], a[1])\r\n    if size == 3:\r\n        return max(a[0], a[1], a[2])\r\n\r\n    sum = a[0]\r\n    max_sum = a[0]\r\n    arr = []\r\n\r\n    for i in range(size):\r\n        arr.append(a[i])\r\n        sum += a[i]\r\n        if sum < 0:\r\n            sum = 0\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n\r\n    sum = a[size - 1]\r\n\r\n    for i in range(size - 2, -1, -1):\r\n        arr.append(a[i])\r\n        sum += a[i]\r\n        if sum < 0:\r\n            sum = 0\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n\r\n    return max_sum\r\n\r\n\r","votes":170860.348},{"text":"\r\n    max_sum = a[0]\r\n    max_ending_here = 0\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_sum = max(max_sum, max_ending_here)\r\n    return max_sum\r\n\r\n\r","votes":170918.108},{"text":"\r\n    sum = 0\r\n    max_sum = 0\r\n\r\n    for i in range(size):\r\n        sum += a[i]\r\n        if sum < 0:\r\n            sum = 0\r\n\r\n        max_sum = max(max_sum, sum)\r\n\r\n    return max_sum\r\n\r\n\r","votes":172336.272},{"text":"\r\n    maximum = a[0]\r\n    current_sum = a[0]\r\n    for i in range(size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        maximum = max(maximum, current_sum)\r\n    return maximum\r\n\r\n\r","votes":175082.96},{"text":"\r\n    max_sum = float(\"-inf\")\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_sum = max(max_sum, max_ending_here)\r\n    return max_sum\r\n\r\nprint(max_sub_array_sum([1, 2, 3, -2, -1, 2, 4, 3, 2, 1], 7))\r\n# 10\r\nprint(max_sub_array_sum([1, -2, 3, -4, -5, 6, -7, 8, -9, -10], 10))\r\n# 34\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\r\n# 55\r\nprint(max_sub_array_sum([1, -2, -3, -4, -5, 6, -7, 8, -9, -10], 10))\r\n# -30\r\nprint(max_sub_array_sum([1, -2, -3, -4, -5, 6, -7, 8, -9, -10, -11], 10))\r\n# -29\r\n","votes":187064.432},{"text":"\r\n    max_sum = float(\"-inf\")\r\n    summation = 0\r\n    for i in range(size):\r\n        summation += a[i]\r\n        if summation < 0:\r\n            summation = 0\r\n        elif summation > max_sum:\r\n            max_sum = summation\r\n    return max_sum\r\n\r\n\r","votes":189525.564},{"text":"\r\n    current_max = 0\r\n    current_sum = 0\r\n    max_sum = 0\r\n    for i in range(0, size):\r\n        current_sum += a[i]\r\n        if (current_sum < 0):\r\n            current_sum = 0\r\n        if (current_sum > current_max):\r\n            current_max = current_sum\r\n        if (current_max > max_sum):\r\n            max_sum = current_max\r\n    return max_sum\r\n\r\n\r\nprint(max_sub_array_sum([1, 2, 3, -1, 4, -2, 1, 2, 3], 9))\r\n","votes":201087.932},{"text":"\r\n    running_sum = 0\r\n    max_sum = 0\r\n    for i in range(size):\r\n        running_sum = max(0, running_sum + a[i])\r\n        max_sum = max(running_sum, max_sum)\r\n    return max_sum\r\n\r","votes":216026.332},{"text":"\r\n    sum_list = []\r\n    for i in range(size):\r\n        sum_list.append(0)\r\n    sum_list[0] = a[0]\r\n    max_sum = a[0]\r\n    for i in range(1, size):\r\n        tmp_sum = sum_list[i - 1] + a[i]\r\n        sum_list[i] = max(tmp_sum, sum_list[i])\r\n        max_sum = max(max_sum, sum_list[i])\r\n    return max_sum\r\n\r\n\r","votes":216587.764},{"text":"\r\n    # Write your code here.\r\n    if size < 1:\r\n        return 0\r\n    max_sum, sum_of_elements = 0, 0\r\n    for i in range(size):\r\n        sum_of_elements += a[i]\r\n        if sum_of_elements < 0:\r\n            sum_of_elements = 0\r\n        max_sum = max(max_sum, sum_of_elements)\r\n    return max_sum\r\n\r\n\r","votes":228003.188},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [1, -2, 3, -4, 5, -6]\r\n    print(max_sub_array_sum(a, len(a)))\r\n","votes":229448.512},{"text":"\r\n    sum_ = 0\r\n    max_sum = -9999999\r\n    for i in range(size):\r\n        sum_ = sum_ + a[i]\r\n        if sum_ < 0:\r\n            sum_ = 0\r\n        if sum_ > max_sum:\r\n            max_sum = sum_\r\n    return max_sum\r\n\r\nif __name__ == '__main__':\r\n    print(max_sub_array_sum([-2, -3, 1, -2, 5, -1, 3], 6))\r\n    print(max_sub_array_sum([-2, -3, 1, -2, 5, -1, 3], 7))\r\n    print(max_sub_array_sum([-2, -3, 1, -2, 5, -1, 3], 8))\r\n","votes":231294.952},{"text":"\r\n    # Initialise the max sum\r\n    max_so_far = float('-inf')\r\n    # Initialise the current and previous sum\r\n    current_sum = 0\r\n    prev_sum = 0\r\n    # Traverse through the array\r\n    for i in range(size):\r\n        # Calculate the sum of the current and previous elements\r\n        current_sum = current_sum + a[i]\r\n        prev_sum = prev_sum + a[i]\r\n        # If the sum of the current and previous elements is greater than max so far and the current element\r\n        # is greater than 0, then update the max sum\r\n        if current_sum > max_so_far and current_sum > 0:\r\n            max_so_far = current_sum\r\n        # If the sum of the current element is less than 0, then update the current sum\r\n        elif current_sum < 0:\r\n            current_sum = 0\r\n        # If the sum of the previous element is greater than 0, then update the previous sum\r\n        elif prev_sum > 0:\r\n            prev_sum = 0\r\n    return max_so_far\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, -2, 3, 10, -4, 7, 2, -5, 11, 3, -6, 12, 1, 13, 8]\r\n    print(max_sub_array_sum(a, len(a)))\r\n","votes":236977.284},{"text":"\r\n    s = []\r\n    max_sum = float('-inf')\r\n    for i in range(size):\r\n        s.append(0)\r\n    for i in range(size):\r\n        for j in range(i, size):\r\n            s[i] += a[j]\r\n            if s[i] > max_sum:\r\n                max_sum = s[i]\r\n    return max_sum\r\n\r\n\r\na = [1, -2, 3, 10, -4, 7, 2, -5]\r\nprint(max_sub_array_sum(a, len(a)))\r\n","votes":239516.836},{"text":"\r\n    max_sum = 0\r\n    for i in range(size):\r\n        temp = 0\r\n        for j in range(i, size):\r\n            temp += a[j]\r\n            if (max_sum < temp):\r\n                max_sum = temp\r\n    return max_sum\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, -3, 4, -5, 6, -7, 8, -9, 10]\r\n    size = len(arr)\r\n    print(\"Maximum contiguous sum is \",\r\n          max_sub_array_sum(arr, size))\r\n","votes":257713.776},{"text":"\r\n    max_sum = -2147483648\r\n    for i in range(size):\r\n        max_sum = max(max_sum, a[i])\r\n        if max_sum < 0:\r\n            max_sum = 0\r\n    return max_sum\r\n\r\nif __name__ == '__main__':\r\n    a = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    print(max_sub_array_sum(a, 6))\r\n    a = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    print(max_sub_array_sum(a, 8))\r\n","votes":null},{"text":"\r\n    max_sum = -float('inf')\r\n    start_idx = 0\r\n    end_idx = 0\r\n    for i in range(size):\r\n        cur_sum = 0\r\n        for j in range(i, size):\r\n            cur_sum += a[j]\r\n            if (cur_sum > max_sum):\r\n                max_sum = cur_sum\r\n                start_idx = i\r\n                end_idx = j\r\n    return max_sum, start_idx, end_idx\r\n\r\nif __name__ == '__main__':\r\n    a = [1, -2, 3, -4, 1, -2, 3, -4, 1, -2, 3, -4, 1, -2, 3, -4]\r\n    print(max_sub_array_sum(a, len(a)))\r\n","votes":null},{"text":"\r\n    if size == 1:\r\n        return a[0]\r\n    else:\r\n        return max(a[0]+max_sub_array_sum(a[1:], size-1), max_sub_array_sum(a[1:], size))\r\n\r\nprint(max_sub_array_sum([1,-2,3,4,-5,6], 3))\r\n# -\r\n\r\n# ### 4.2.1.1.2.2.1.1.2.3.1.1.2.4.1.1.2.5.2.2.2.6.2.2.2.7.2.2.2.8.2.2.2.9.2.2.2.10.2.2.2.11.2.2.2.12.2.2.13.2.2.2.14.2.2.2.15.2.2.2.16.2.2.2.17.2.2.2.18.2.2.2.19.2.2.2.20.2.2.2.21.2.2.2.22.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.","votes":null},{"text":"\r\n    if size == 1:\r\n        return a[0]\r\n    if size == 2:\r\n        return max(a[0], a[1])\r\n    # a[size] = max(a[size - 1], a[size - 2] + a[size])\r\n    a[size] = max(a[size - 1], a[size - 2] + a[size])\r\n    return max(a[size], max_sub_array_sum(a, size - 1))\r\n\r\n\r","votes":null},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    max_sum = a[0]\r\n    for i in range(1, size):\r\n        if max_sum < a[i]:\r\n            max_sum = a[i]\r\n        elif max_sum - a[i] >= 0:\r\n            max_sum -= a[i]\r\n        else:\r\n            max_sum += a[i]\r\n    return max_sum\r\n\r\n# Driver Code\r\na = [1, -2, 3, -4, 5, 6]\r\nsize = len(a)\r\nprint(\"Max contiguous subarray sum is \", max_sub_array_sum(a, size))\r\n","votes":null},{"text":"\r\n    max_sum = -sys.maxsize - 1\r\n    max_sum_ending_here = 0\r\n    for i in range(size):\r\n        max_sum_ending_here = max(max_sum_ending_here + a[i], a[i])\r\n        max_sum = max(max_sum_ending_here, max_sum)\r\n        print(max_sum_ending_here)\r\n        print(max_sum)\r\n    return max_sum\r\n\r\n\r\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 6))\r\nprint(max_sub_array_sum([1, -1, 5, -2, 3], 5))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    if len(a) == 0:\r\n        return 0\r\n    elif len(a) == 1:\r\n        return a[0]\r\n    elif len(a) == 2:\r\n        return max(a)\r\n    else:\r\n        sum_list = []\r\n        sub_array = []\r\n        for i in range(len(a)):\r\n            sum_list.append(a[i] + sum_list[i] if i > 0 else a[i])\r\n        for i in range(len(a)):\r\n            sub_array.append(a[i] + sub_array[i] if i > 0 else a[i])\r\n        max_sum = max(sum_list[-1])\r\n        for i in range(len(a), size):\r\n            sum_list.append(sum_list[i - 1] - sum_list[i - 2])\r\n            sub_array.append(sub_array[i - 1] - sum_list[i - 1])\r\n            max_sum = max(max_sum, sum_list[i] + sub_array[i])\r\n        return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n    size = 7\r\n    print(max_sub_array_sum(a, size))\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    return max(a[i:i+size] for i in range(len(a)) for i in range(len(a)) if i+size < len(a))\r\n\r\nif __name__ == \"__main__\":\r\n    print(max_sub_array_sum([1,2,3,4,5], 2))\r\n    print(max_sub_array_sum([1,2,3,4,5], 3))","votes":null},{"text":"\r\n    if size == 1:\r\n        return a[0]\r\n    else:\r\n        return max(max_sub_array_sum(a, size-1), a[size-1] + max_sub_array_sum(a, size-2))\r\n","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    n = len(a)\r\n    if n <= 1:\r\n        return a[0]\r\n\r\n   ","votes":null},{"text":"\r\n    if size <= 0:\r\n        return 0\r\n    dp = [0] * size\r\n    dp[0] = a[0]\r\n    sum_ = max(a[0])\r\n    for i in range(1, size):\r\n        dp[i] = max(a[i], dp[i - 1] + a[i])\r\n        sum_ = max(dp[i], sum_)\r\n    return sum_\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n\r\n    # a[0] is the first element of the array\r\n    # a[size-1] is the last element of the array\r\n\r\n    # First we calculate the sum of all the elements in the array\r\n    sum_of_elements = 0\r\n    for i in range(size):\r\n        sum_of_elements += a[i]\r\n\r\n    # We initialize the maximum sum of contiguous subarray as 0\r\n    max_sum_of_contiguous_subarray = 0\r\n\r\n    # We start comparing every element in the array and updating the max_sum_of_contiguous_subarray\r\n    # if the sum of all the elements in the array and the current element is greater than the\r\n    # maximum sum of contiguous subarray\r\n    for i in range(size):\r\n        for j in range(i, size):\r\n            current_sum_of_elements = 0\r\n            for k in range(i, j + 1):\r\n                current_sum_of_elements += a[k]\r\n\r\n            if current_sum_of_elements > max_sum_of_contiguous_subarray:\r\n                max_sum_of_contiguous_subarray = current_sum_of_elements\r\n\r\n    return max_sum_of_contiguous_subarray\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(raw_input())\r\n    a = map(int, raw_input().split())\r\n    print max_sub_array_sum(a, n)\r\n","votes":null},{"text":"\r\n    max = 0\r\n    cur_sum = 0\r\n    for i in range(size):\r\n        cur_sum += a[i]\r\n        max = max if cur_sum > max else cur_sum\r\n    return max\r\n\r\nprint(max_sub_array_sum([1, 2, 2, 1], 4))\r\n# 6\r\n```\r\n\r\n### 2.2.2.3.3.1.2.2.3.1.2.3.1.1\r\n\r\n```python\r","votes":null},{"text":"\r\n    max_sum = -999999999999999999999\r\n    sub_array = []\r\n    for i in range(size):\r\n        cur_sum = 0\r\n        for j in range(size):\r\n            cur_sum += a[j]\r\n            if cur_sum > max_sum:\r\n                max_sum = cur_sum\r\n                sub_array = []\r\n            elif cur_sum == max_sum:\r\n                sub_array.append(a[j])\r\n    return max_sum, sub_array\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = -sys.maxsize - 1\r\n    cur_sum = 0\r\n    for i in range(size):\r\n        cur_sum += a[i]\r\n        if cur_sum < 0:\r\n            cur_sum = 0\r\n        max_sum = max(max_sum, cur_sum)\r\n    return max_sum\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here.\r\n    max_sum = 0\r\n    curr_sum = 0\r\n    for i in range(size):\r\n        curr_sum += a[i]\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n        elif curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    assert max_sub_array_sum([6, -3, 7, 10, -2, 2, 11, 2, -3, 4, -3, 3, -4, 9, 3, 2, -2, 1, -1, 7, -7, -1, -3, -1, 3, 3, -4, -3, 4, 2, 11, 4, 2, -1, 5, 2, 6, 10, 3, 1, 3, 1, 2, 10, 4, 2, 10, 7, 10, 8, -1, -5, -1, -5, 2, -3, -1, 2, -3, 5, 3, 9, 3, 5, 2, -5, -1, -4, -5, 8, -1, 1, 4, 6, 2, 2, 7, 10, -3, 1, 3, 1, 5, -4, -3, -3, 1, 1, 9, 1, 4, 10, -4, 3, -1, 1, 1, 5, -1, -3, 8, 3, 2, 1], 12) == 111\r\n    assert max_sub_array_sum([1, -2, -3, 4, -1, 5, 2], 6) == 7\r\n    assert max_sub_array_sum([1, 2, 3","votes":null},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    elif size == 1:\r\n        return a[0]\r\n    elif size == 2:\r\n        if a[0] > a[1]:\r\n            return a[0]\r\n        else:\r\n            return a[1]\r\n    elif size == 3:\r\n        if a[0] > a[1] and a[0] > a[2]:\r\n            return a[0]\r\n        elif a[1] > a[2]:\r\n            return a[1]\r\n        else:\r\n            return a[2]\r\n    elif size == 4:\r\n        max_sum = max(a[0], a[1])\r\n        if max_sum < a[2]:\r\n            max_sum = max(max_sum, a[2])\r\n        if max_sum < a[3]:\r\n            max_sum = max(max_sum, a[3])\r\n        return max_sum\r\n    elif size == 5:\r\n        max_sum = max(a[0], a[1])\r\n        if max_sum < a[2]:\r\n            max_sum = max(max_sum, a[2])\r\n        if max_sum < a[3]:\r\n            max_sum = max(max_sum, a[3])\r\n        if max_sum < a[4]:\r\n            max_sum = max(max_sum, a[4])\r\n        return max_sum\r\n    elif size == 6:\r\n        max_sum = max(a[0], a[1])\r\n        if max_sum < a[2]:\r\n            max_sum = max(max_sum, a[2])\r\n        if max_sum < a[3]:\r\n            max_sum = max(max_sum, a[3])\r\n        if max_sum < a[4]:\r\n            max_sum = max(max_sum, a[4])\r\n        if max_sum < a[5]:\r\n            max_sum = max(max_sum, a[5])\r\n        return max_sum\r\n    elif size == 7:\r\n        max_sum = max(a[0], a[1])\r\n        if max_sum < a[2]:\r\n            max_sum = max(max_sum, a[2])\r\n        if max_sum < a[3]","votes":null},{"text":"\r\n    a_sum = 0\r\n    max_sum = 0\r\n    for i in range(size):\r\n        a_sum += a[i]\r\n        max_sum = max(max_sum, a_sum)\r\n        if a_sum < 0:\r\n            a_sum = 0\r\n    return max_sum\r\n\r\nif __name__ == \"__main__\":\r\n    size = int(raw_input())\r\n    a = list(map(int, raw_input().split()))\r\n    print max_sub_array_sum(a, size)\r\n","votes":null},{"text":"\r\n    # a is the array\r\n    # size is the size of the array\r\n    # assume the array is not empty\r\n    # assume the array contains only positive values\r\n    # assume the array doesn't contain negative values\r\n    # assume the array doesn't contain duplicate numbers\r\n    # assume the array size is valid\r\n    # assume the array contains only non-negative integers\r\n    # assume the array contains only unique elements\r\n    # assume the array is a valid array\r\n    # assume the array size is valid\r\n\r\n    # write your code here\r\n    # use two pointers\r\n\r\n    # initialize the max_sum and the max_ending_here\r\n    # since the array is not empty, max_sum will be initialized to the first element in the array\r\n    max_sum = a[0]\r\n    max_ending_here = a[0]\r\n\r\n    # loop through the array\r\n    for i in range(1, size):\r\n        # compare the current element with the previous one\r\n        # if the current element is greater than the previous one, subtract the previous one from the current one\r\n        # else, add the current element to max_ending_here\r\n        # if the current element is greater than max_ending_here, update max_ending_here\r\n        # if the current element is greater than max_sum, update max_sum\r\n        if a[i] > a[i - 1]:\r\n            max_ending_here = max(max_ending_here - a[i - 1], a[i])\r\n        else:\r\n            max_ending_here += a[i]\r\n        max_sum = max(max_sum, max_ending_here)\r\n\r\n    return max_sum\r\n\r\n\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 5))\r\nprint(max_sub_array_sum([1, -2, 3, 4, 5], 5))\r\nprint(max_sub_array_sum([-1, -2, 3, -4, 5], 5))\r\nprint(max_sub_array_sum([1, -2, -3, 4, 5], 5))\r\nprint(max_sub_array_sum([1, 2, 3, -4], ","votes":null},{"text":"\r\n    sum_arr = [0] * size\r\n    sum_max = -float(\"inf\")\r\n    for i in range(size):\r\n        sum_arr[i] = a[i]\r\n        for j in range(i):\r\n            sum_arr[i] = max(sum_arr[i], sum_arr[j] + a[i])\r\n        if sum_arr[i] > sum_max:\r\n            sum_max = sum_arr[i]\r\n    return sum_max\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7))\r\n","votes":null},{"text":"\r\n    if size == 1:\r\n        return a[0]\r\n    elif size == 2:\r\n        return max(a[0], a[1])\r\n    else:\r\n        return max(a[0], a[1]) + max_sub_array_sum(a[1:], size - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    max_sum = a[0]\r\n    sum_ = 0\r\n    for i in range(size):\r\n        sum_ += a[i]\r\n        if sum_ < 0:\r\n            sum_ = 0\r\n        max_sum = max(max_sum, sum_)\r\n    return max_sum\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, -2, 3, -4, 1, -2, -3]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n```\r\n\r\n# 2.12.14.5. Largest sum contiguous subarray\r\n> Given an array of integers, find the contiguous subarray within an array (containing at least one number) which has the largest sum.\r\n>\r\n> For example, given the array [\u22122,1,\u22123,4,\u22121,2,1,\u22125,4],\r\n> the contiguous subarray [4,\u22121,2,1] has the largest sum = 6.\r\n>\r\n> **Note:** The solution must run in O(n) time.\r\n\r\n**\u89e3\u9898\u601d\u8def**\r\n\r\n\u8fd9\u4e2a\u9898\u76ee\u6709\u70b9\u7c7b\u4f3c\u4e8e12.13\u7684\u6700\u5927\u5b50\u5e8f\u548c\uff0c\u4f46\u662f\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u52a8\u6001\u89c4\u5212\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u5927\u5c0f\u4e3anums.length+1\uff0c\u5176\u4e2d\u7b2c0\u4e2a\u4f4d\u7f6e\u5b58\u7684\u662fnums[0]\uff0c\u7b2c1\u4e2a\u4f4d\u7f6e\u5b58\u7684\u662fnums[0]+nums[1]\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\r\n\r\n**\u4ee3\u7801**\r\n\r\n```python\r","votes":null},{"text":"\r\n    # Write your code here\r\n    if a is None:\r\n        return 0\r\n\r\n    if size == 1:\r\n        return a[0]\r\n\r\n    max_sum = a[0]\r\n    total_sum = a[0]\r\n\r\n    for i in range(1, size):\r\n        total_sum += a[i]\r\n        if total_sum < 0:\r\n            total_sum = a[i]\r\n        else:\r\n            max_sum = max(max_sum, total_sum)\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    assert max_sub_array_sum([1, -2, -3, 4], 4) == 6\r\n    assert max_sub_array_sum([1, -4, -3, 4], 4) == 4\r\n    assert max_sub_array_sum([1, -4, -3, 4], 3) == 4\r\n    assert max_sub_array_sum([1, -4, -3, 4], 2) == 1\r\n    assert max_sub_array_sum([1, -4, -3, 4], 1) == -4\r\n","votes":null},{"text":"\r\n    max_sum, max_end = 0, 0\r\n    for i in range(size):\r\n        max_sum = max(max_sum + a[i], a[i])\r\n        if max_sum < 0:\r\n            max_sum = 0\r\n        if max_sum > max_sum + a[max_end]:\r\n            max_sum = max_sum + a[max_end]\r\n        max_end = i\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    max_so_far = -sys.maxsize\r\n    max_ending_here = 0\r\n    \r\n    for i in range(size):\r\n        max_ending_here += a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        if max_ending_here > max_so_far:\r\n            max_so_far = max_ending_here\r\n    \r\n    return max_so_far\r\n\r\n\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 5))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 3))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 1))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 6))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 10))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 11))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 11))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 11))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 11))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 11))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 11))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 11))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 11))","votes":null},{"text":"\r\n\r\n    current_sum = 0\r\n    max_sum = 0\r\n    start = 0\r\n\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n        elif current_sum > max_sum:\r\n            max_sum = current_sum\r\n            start = i\r\n\r\n    return max_sum, start\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    if size == 0:\r\n        return 0\r\n    if size == 1:\r\n        return a[0]\r\n\r\n    if a[0] > a[1]:\r\n        return max(a[0] + max_sub_array_sum(a[1:], size-1), max_sub_array_sum(a[2:], size-1))\r\n    else:\r\n        return max(a[0] + max_sub_array_sum(a[1:], size-1), max_sub_array_sum(a[1:], size-1))\r\n\r\nprint (max_sub_array_sum([1, -2, -3, -4, -5], 5))\r\n# -\r\n\r\n# # 4. Minimum Sum Subarray\r\n# Find the minimum sum subarray in an array of integers.\r\n#\r\n# **Input:** \r\n#\r\n#     [1, 2, 3, -1, 4, -2, 5, 2, 3, -4, -5]\r\n#\r\n# **Output:** \r\n#\r\n#     3\r\n#     \r\n# **Explanation:** \r\n#\r\n#     Start with the subarray [1, 2, 3, -1, 4]\r\n#     Sum of the subarray is 4\r\n#     Now, start with the subarray [4, -2, 5]\r\n#     Sum of the subarray is 5\r\n#     Now, start with the subarray [-2, 5]\r\n#     Sum of the subarray is 5\r\n#     Now, start with the subarray [5]\r\n#     Sum of the subarray is 5\r\n#     Now, start with the subarray []\r\n#     Sum of the subarray is 0\r\n#     Hence, the output is 3\r\n#     \r\n# **Time complexity:** O(n).\r\n#\r\n# **Space complexity:** O(1).\r\n#\r\n# **Note:** Try to solve the problem without using any extra space.\r\n#\r\n\r\n# +\r","votes":null},{"text":"\r\n    max_sum = float('-inf')\r\n    summation = 0\r\n    for i in range(size):\r\n        summation += a[i]\r\n        if summation > max_sum:\r\n            max_sum = summation\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if size < 1:\r\n        return 0\r\n\r\n    partial_sum = 0\r\n    max_sum = float('-inf')\r\n\r\n    for i in range(size):\r\n        partial_sum += a[i]\r\n        if partial_sum < 0:\r\n            partial_sum = 0\r\n        max_sum = max(max_sum, partial_sum)\r\n\r\n    return max_sum\r\n\r\n\r\nmax_sub_array_sum_naive(a, len(a))\r\n\r\nmax_sub_array_sum(a, len(a))\r\n","votes":null},{"text":"\r\n    start = 0\r\n    max_sum = a[0]\r\n    for i in range(1, size):\r\n        max_sum = max(max_sum + a[i], a[i])\r\n        if max_sum < 0:\r\n            max_sum = 0\r\n        if max_sum > max_sum_so_far:\r\n            max_sum_so_far = max_sum\r\n    return max_sum_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 10))\r\n    print(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 11))\r\n    print(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 12))\r\n    print(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 13))\r\n","votes":null},{"text":"\r\n    if len(a) <= 1:\r\n        return a[0]\r\n\r\n    result = float(\"-inf\")\r\n    for i in range(size):\r\n        result = max(result, a[i])\r\n        result = max(result, sum(a[i:]))\r\n\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, -2, 5, 3, -1, 2, 1, -1, 2, 5, 2, 3, 4, -1, 2, -1, -2]\r\n    print(max_sub_array_sum(a, 3))\r\n","votes":null},{"text":"\r\n    return max(a[i] for i in range(size) if a)\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [1, 3, 5, 7, -2, -4, -6, -8, -10, 10, 12]\r\n    print(max_sub_array_sum(a, len(a)))\r\n","votes":null},{"text":"\r\n    start = 0\r\n    max_sum = float('-inf')\r\n    for end in range(size):\r\n        max_sum = max(max_sum, a[end])\r\n        a[start] = 0\r\n        start += 1\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(max_sub_array_sum([1, -2, -3, -4, 3, 2, 1, -5, -4], 10))\r\n    print(max_sub_array_sum([1, -2, -3, -4, 3, 2, -1, -5, -4], 10))\r\n    print(max_sub_array_sum([1, 2, 3, 4, 5], 5))\r\n    print(max_sub_array_sum([1, 2, 3, 4, 5], 4))\r\n","votes":null},{"text":"\r\n\r\n    # Sum of all the elements\r\n    sum_arr = sum(a)\r\n\r\n    # Initialize the maximum sum\r\n    max_sum = -float(\"inf\")\r\n\r\n    # Initialize the starting index\r\n    start = 0\r\n\r\n    # Initialize the ending index\r\n    end = 0\r\n\r\n    # Loop over the entire array\r\n    for i in range(size):\r\n\r\n        # Initialize the current sum\r\n        curr_sum = a[i]\r\n\r\n        # Check if the current sum is greater than the maximum sum\r\n        if curr_sum > max_sum:\r\n\r\n            # Set the maximum sum to the current sum\r\n            max_sum = curr_sum\r\n\r\n            # If the current sum is greater than the sum of the elements\r\n            if max_sum > sum_arr:\r\n\r\n                # Set the starting index to the current index\r\n                start = i\r\n\r\n                # Set the ending index to the current index\r\n                end = i\r\n\r\n        # Else, the current sum is less than the maximum sum\r\n        else:\r\n\r\n            # If the current sum is greater than the sum of the elements\r\n            if curr_sum > sum_arr - max_sum:\r\n\r\n                # Set the ending index to the current index\r\n                end = i\r\n\r\n    # Return the result\r\n    return max_sum, start, end\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = float(\"-inf\")\r\n    cur_sum = 0\r\n    max_end = 0\r\n    for i in range(size):\r\n        cur_sum += a[i]\r\n        if i == size - 1:\r\n            max_sum = max(max_sum, cur_sum)\r\n        elif cur_sum < 0:\r\n            cur_sum = 0\r\n        elif cur_sum > max_sum:\r\n            max_sum = cur_sum\r\n            max_end = i + 1\r\n    return a[max_end - 1] - a[max_end]\r\n\r\n# Example\r\nprint(max_sub_array_sum([1,2,3,4,5,6,7,8,9,10], 5))\r\n","votes":null},{"text":"\r\n    if not a:\r\n        return 0\r\n    sums = [0]\r\n    cur_sum = 0\r\n    for i in range(1, size + 1):\r\n        cur_sum += a[i - 1]\r\n        if cur_sum > sums[len(sums) - 1]:\r\n            sums.append(cur_sum)\r\n    return max(sums)\r\n\r\n\r","votes":null},{"text":"\r\n    if size == 0:\r\n        return -1\r\n    max_sum = a[0]\r\n    for i in range(1, size):\r\n        max_sum = max(max_sum + a[i], a[i])\r\n        max_sum = max(max_sum, a[i])\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7))\r\n","votes":null},{"text":"\r\n    max_sum = float('-inf')\r\n    cur_sum = 0\r\n    for i in range(size):\r\n        cur_sum += a[i]\r\n        max_sum = max(max_sum, cur_sum)\r\n        if cur_sum < 0:\r\n            cur_sum = 0\r\n    return max_sum\r\n\r\n\r\nprint(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 10))\r\n# 6\r\nprint(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9))\r\n# 6\r\nprint(max_sub_array_sum([1], 1))\r\n# 1\r\n\r\n# 1. \u6570\u7ec4\u7684\u6700\u5927\u5b50\u6570\u7ec4\u7684\u548c\r\n# 2. \u6570\u7ec4\u7684\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\r\n# 3. \u6570\u7ec4\u7684\u6700\u5927\u5b50\u5e8f\u548c\r\n# 4. \u6570\u7ec4\u7684\u6700\u5927\u5b50\u5e8f\u548cII\r\n# 5. \u6570\u7ec4\u7684\u6700\u5927\u5b50\u5e8f\u548cIII\r\n# 6. \u6570\u7ec4\u7684\u6700\u5927\u5b50\u5e8f\u548cIV\r\n# 7. \u6570\u7ec4\u7684\u6700\u5927\u5b50\u5e8f\u548cV\r\n# 8. \u6570\u7ec4\u7684\u6700\u5927\u5b50\u5e8f\u548cVI\r\n# 9. \u6570\u7ec4\u7684\u6700\u5927\u5b50\u5e8f\u548cVII\r\n# 10. \u6570\u7ec4\u7684\u6700\u5927\u5b50\u5e8f\u548cVIII\r\n# 11. \u6570\u7ec4\u7684\u6700\u5927\u5b50\u5e8f\u548cIX\r\n","votes":null},{"text":"\r\n    max_so_far = 0\r\n    start = 0\r\n    for i in range(size):\r\n        max_so_far = max(max_so_far + a[i], a[i])\r\n        if max_so_far < 0:\r\n            max_so_far = 0\r\n        if max_so_far > max_so_far:\r\n            max_so_far = 0\r\n        if max_so_far > max_so_far:\r\n            max_so_far = 0\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    size = len(a)\r\n    print max_sub_array_sum(a, size)\r\n","votes":null},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    if size == 1:\r\n        return a[0]\r\n    dp = [0] * size\r\n    dp[0] = a[0]\r\n    dp[1] = max(a[0], a[1])\r\n    for i in range(2, size):\r\n        dp[i] = max(dp[i - 1] + a[i], a[i])\r\n    return max(dp[size - 1])\r\n\r\n\r","votes":null},{"text":"\r\n    #Write your code here\r\n    #if a is None or size < 1:\r\n    #    return -1\r\n    a.sort()\r\n    res = 0\r\n    start = 0\r\n    end = 0\r\n    sub = 0\r\n    for i in range(size):\r\n        sub += a[i]\r\n        if sub < 0:\r\n            sub = 0\r\n            start = i + 1\r\n        if sub > res:\r\n            res = sub\r\n            end = i\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    sub = 0\r\n    for i in range(size):\r\n        sub = max(sub + a[i], a[i])\r\n    return sub\r\n\r\n\r","votes":null},{"text":"\r\n    if size == 1:\r\n        return a[0]\r\n    sum, max_sum, previous_sum = 0, 0, 0\r\n    for i in range(size):\r\n        previous_sum = max(a[i], previous_sum + a[i])\r\n        sum += previous_sum\r\n        max_sum = max(sum, max_sum)\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = -float(\"inf\")\r\n    max_sum_ending_index = 0\r\n\r\n    for i in range(size):\r\n        for j in range(i, size):\r\n            sub_array_sum = 0\r\n            for k in range(i, j + 1):\r\n                sub_array_sum += a[k]\r\n\r\n            if sub_array_sum > max_sum:\r\n                max_sum = sub_array_sum\r\n                max_sum_ending_index = j\r\n\r\n    return max_sum, max_sum_ending_index\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Initialize the result\r\n    # Sum of all elements is the largest sum\r\n    max_sum = 0\r\n\r\n    # Initialize the left and right pointers\r\n    left = 0\r\n    right = 0\r\n\r\n    # Traverse through the whole array\r\n    while right < size:\r\n        # Add the current element to the sum\r\n        sum = a[right]\r\n\r\n        # Move the right pointer to the next element\r\n        right += 1\r\n\r\n        # Update the result if sum is greater than the previously found max sum\r\n        max_sum = max(sum, max_sum + sum)\r\n\r\n        # Calculate the sum of the remaining elements by removing the elements from the left\r\n        sum -= a[left]\r\n\r\n        # Move the left pointer to the next element\r\n        left += 1\r\n\r\n        # Update the result if sum is greater than the previously found max sum\r\n        max_sum = max(sum, max_sum + sum)\r\n\r\n    # Return the result\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, -2, 3, 10, -4, 7, 2, -5]\r\n    print(max_sub_array_sum(arr, len(arr)))  # 17\r\n","votes":null},{"text":"\r\n    if size > 0:\r\n        max_sum = a[0]\r\n        for i in range(1, size):\r\n            max_sum = max(max_sum, a[i] + a[i-1])\r\n        return max_sum\r\n    else:\r\n        return 0\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize = 3\r\nprint(max_sub_array_sum(a, size))\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize = 1\r\nprint(max_sub_array_sum(a, size))","votes":null},{"text":"\r\n    max_sum = -sys.maxsize - 1\r\n    sum_ = 0\r\n    for i in range(size):\r\n        sum_ += a[i]\r\n        if sum_ < 0:\r\n            sum_ = 0\r\n        if sum_ > max_sum:\r\n            max_sum = sum_\r\n    return max_sum\r\n\r\n\r\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], len(arr)))\r\n","votes":null},{"text":"\r\n    max_sum = float('-inf')\r\n    cur_sum = 0\r\n\r\n    for i in range(size):\r\n        cur_sum += a[i]\r\n        max_sum = max(max_sum, cur_sum)\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [1, 2, 3, 5, 10, -1]\r\n    print(max_sub_array_sum(a, len(a)))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    sum = 0\r\n    max_sum = -sys.maxsize - 1\r\n    for x in range(size):\r\n        sum += a[x]\r\n        max_sum = max(max_sum, sum)\r\n        if sum < 0:\r\n            sum = 0\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    assert max_sub_array_sum([3, -1, 2, -1, 4], 4) == 12\r\n    assert max_sub_array_sum([3, -1, 2, -1, 4], 3) == 6\r\n    assert max_sub_array_sum([3, -1, 2, -1, 4], 2) == 3\r\n    assert max_sub_array_sum([3, -1, 2, -1, 4], 1) == 3\r\n    assert max_sub_array_sum([3, -1, 2, -1, 4], 0) == 3\r\n    assert max_sub_array_sum([3, -1, 2, -1, 4], -1) == 3\r\n    assert max_sub_array_sum([3, -1, 2, -1, 4], -2) == 3\r\n    assert max_sub_array_sum([3, -1, 2, -1, 4], -3) == 3\r\n    assert max_sub_array_sum([3, -1, 2, -1, 4], -4) == 3\r\n","votes":null},{"text":"\r\n    maximum = 0\r\n    temp = []\r\n    for i in a:\r\n        sum = 0\r\n        for j in temp:\r\n            sum += j\r\n        if sum < i:\r\n            temp.append(i)\r\n        if sum > maximum:\r\n            maximum = sum\r\n    return maximum\r\n\r\n\r","votes":null},{"text":"\r\n    if not a:\r\n        return 0\r\n    max_sum = 0\r\n    for i in range(size):\r\n        max_sum += a[i]\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = float(\"-inf\")\r\n    cur_sum = 0\r\n    for i in range(size):\r\n        cur_sum += a[i]\r\n        max_sum = max(cur_sum, max_sum)\r\n    return max_sum\r\n\r","votes":null}],"time":{"count":48.0,"avg":155950.8330833333,"std":41904.7779893705,"cov":0.2687050602}}
{"id":560,"question":"def union_elements(test_tup1, test_tup2):\r\n    \"\"\"Write a function to find the union of elements of the given tuples.\"\"\"","answers":[{"text":"\r\n    return tuple(set(test_tup1 + test_tup2))\r\n\r\n\r","votes":108953.432},{"text":"\r\n    return tuple(set(test_tup1) | set(test_tup2))\r\n\r","votes":114280.34},{"text":"\r\n    # TODO: Your code here\r\n    return tuple(set(test_tup1).union(set(test_tup2)))\r\n\r\n\r","votes":115654.96},{"text":"\r\n    union_list = []\r\n    for each_tup in [test_tup1, test_tup2]:\r\n        for each_elem in each_tup:\r\n            if each_elem not in union_list:\r\n                union_list.append(each_elem)\r\n\r\n    return tuple(union_list)\r\n\r\n\r","votes":134330.152},{"text":"\r\n    union_elements = []\r\n    test_list = list(test_tup1)\r\n    test_list.extend(test_tup2)\r\n    for element in test_list:\r\n        if element not in union_elements:\r\n            union_elements.append(element)\r\n    return tuple(union_elements)\r\n\r\n\r","votes":141344.576},{"text":"\r\n    # your code here\r\n    return tuple(set(test_tup1).union(set(test_tup2)))\r\n\r\n\r","votes":163832.82},{"text":"\r\n    if len(test_tup1) < len(test_tup2):\r\n        test_tup1, test_tup2 = test_tup2, test_tup1\r\n    return tuple(set(test_tup1) | set(test_tup2))\r\n\r\n\r","votes":163984.392},{"text":"\r\n    result = ()\r\n    for element in test_tup1:\r\n        if element not in result:\r\n            result = result + (element,)\r\n    for element in test_tup2:\r\n        if element not in result:\r\n            result = result + (element,)\r\n    return result\r\n\r","votes":169780.36},{"text":"\r\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize an empty list\r\n    union = []\r\n    for i in range(len(test_tup1)):\r\n        # If element is not in union, then append to list\r\n        if test_tup1[i] not in union:\r\n            union.append(test_tup1[i])\r\n        # If element is in union, then append to list\r\n        if test_tup1[i] in test_tup2:\r\n            union.append(test_tup1[i])\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    return test_tup1 + test_tup2\r\n\r\n# Test your function\r\nprint(union_elements((1,2,3), (4,5,6)))\r\nprint(union_elements((1,2,3), (4,5,6,7)))\r\n\r\n# +\r\n# Exercise 4\r\n# Write a function called `is_subset()` that takes two sets and returns True\r\n# if the first set is a subset of the second.\r\n#\r\n# For example:\r\n# is_subset({1,2,3}, {3,2,1}) # Should print True\r\n# is_subset({1,2,3}, {3,2,1,6}) # Should print False\r\n\r","votes":null},{"text":"\r\n    return(test_tup1, test_tup2)\r\n\r\n\r\n# function to find the length of a tuple\r","votes":null},{"text":"\r\n    return (test_tup1[0], test_tup1[1], test_tup2[2], test_tup2[3])\r\n\r","votes":null},{"text":"\r\n    # if the first tuple is empty then return the second\r\n    if len(test_tup1) == 0:\r\n        return test_tup2\r\n    # if the second tuple is empty then return the first\r\n    if len(test_tup2) == 0:\r\n        return test_tup1\r\n    # if the first tuple has more elements then return the first\r\n    # and if the second tuple has more elements then return the second\r\n    if len(test_tup1) > len(test_tup2):\r\n        return test_tup1 + (test_tup2[:len(test_tup1)],)\r\n    return test_tup2 + (test_tup1[:len(test_tup2)],)\r\n\r\ntest_tup1 = (1,2)\r\ntest_tup2 = (3,4)\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    return test_tup1[0] + test_tup2[1] \r\n\r\n\r\nunion_elements((1, 2), (3, 4)) # 12\r\nunion_elements((1, 2, 3), (3, 4, 5)) # 12345\r\nunion_elements((1, 2, 3, 4), (3, 4, 5, 6)) # 123456\r\n```\r\n\r\n**Task 2**\r\n\r\nWrite a function with the signature `is_sorted(tup)` to determine whether the elements of the given tuple are sorted. The function should return `True` if the given tuple is sorted and `False` otherwise.\r\n\r\n```python\r","votes":null},{"text":"\r\n    if len(test_tup1)!= len(test_tup2):\r\n        raise Exception(\"The two tuples have different lengths.\")\r\n    union = []\r\n    for element in test_tup1:\r\n        if element in test_tup2:\r\n            union.append(element)\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\r\n\r\n# test function\r\nprint(union_elements((1, 2), (3, 4)))","votes":null},{"text":"\r\n    union = set()\r\n    for elem in test_tup1:\r\n        union.add(elem)\r\n    for elem in test_tup2:\r\n        union.add(elem)\r\n    return list(union)\r\n\r\n\r","votes":null},{"text":"\r\n    union_tup = []\r\n    for element1, element2 in zip(test_tup1, test_tup2):\r\n        if element1 not in union_tup and element2 not in union_tup:\r\n            union_tup.append(element1)\r\n            union_tup.append(element2)\r\n    return union_tup\r\n\r\n\r","votes":null},{"text":"\r\n    new_tup = []\r\n    for i in test_tup1:\r\n        new_tup.append(i)\r\n    for j in test_tup2:\r\n        if j not in new_tup:\r\n            new_tup.append(j)\r\n    return new_tup\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0] + test_tup2[0],  # tuple 1 element\r\n            test_tup1[1] + test_tup2[1],  # tuple 2 element\r\n            test_tup1[2] + test_tup2[2])  # tuple 3 element\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0] + test_tup2[0])\r\n\r","votes":null},{"text":"\r\n    return list(set(test_tup1) | set(test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0] + test_tup2[0],\r\n            test_tup1[1] + test_tup2[1])\r\n\r\n\r","votes":null},{"text":"\r\n    if not test_tup1:\r\n        return test_tup2\r\n    if not test_tup2:\r\n        return test_tup1\r\n    if test_tup1[0] < test_tup2[0]:\r\n        return (test_tup1[0],) + union_elements(test_tup1[1:], test_tup2)\r\n    if test_tup1[0] > test_tup2[0]:\r\n        return (test_tup2[0],) + union_elements(test_tup1, test_tup2[1:])\r\n    return (test_tup1[0],) + union_elements(test_tup1[1:], test_tup2[1:])\r\n\r\n\r","votes":null},{"text":"\r\n    return list(set(test_tup1 + test_tup2))\r\n\r\n# test union_elements\r\nunion_elements([1,2,3,4], [1,2,5])\r\n\r\n# test union_elements\r\nunion_elements([1,5,6], [1,2,3])\r\n","votes":null},{"text":"\r\n    test_tup1_set = set(test_tup1)\r\n    test_tup2_set = set(test_tup2)\r\n    test_tup3 = test_tup1_set.union(test_tup2_set)\r\n    return test_tup3\r\n\r\n\r","votes":null},{"text":"\r\n    if test_tup1 and test_tup2:\r\n        if test_tup1[1] > test_tup2[1]:\r\n            return test_tup1\r\n        else:\r\n            return test_tup2\r\n    else:\r\n        if test_tup1 is None:\r\n            return test_tup2\r\n        else:\r\n            return test_tup1\r\n\r\n\r","votes":null},{"text":"\r\n    union = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] not in union:\r\n            union.append(test_tup1[i])\r\n        if test_tup2[i] not in union:\r\n            union.append(test_tup2[i])\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0], test_tup2[1])\r\n\r","votes":null},{"text":"\r\n    if len(test_tup1) < len(test_tup2):\r\n        return(test_tup1 + test_tup2)\r\n    else:\r\n        return(test_tup2 + test_tup1)\r\n\r","votes":null},{"text":"\r\n    test_tup_union = ()\r\n    for tup1_elem in test_tup1:\r\n        for tup2_elem in test_tup2:\r\n            if tup1_elem not in test_tup_union:\r\n                test_tup_union += (tup1_elem,)\r\n    return test_tup_union\r\n\r","votes":null},{"text":"\r\n    # The union of two sets is a set that contains all the elements\r\n    # in the first set or the second set, but not in both.\r\n    return (set(test_tup1) | set(test_tup2)) - (set(test_tup1) & set(test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    return test_tup1 + test_tup2\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for elem in test_tup1:\r\n        if not elem in test_tup2:\r\n            result.append(elem)\r\n    for elem in test_tup2:\r\n        if not elem in test_tup1:\r\n            result.append(elem)\r\n    return result\r\n\r","votes":null},{"text":"\r\n    test_union = []\r\n    test_union.extend(test_tup1)\r\n    test_union.extend(test_tup2)\r\n    return test_union\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO: Write code here\r\n    new_tup = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            new_tup.append(i)\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            new_tup.append(i)\r\n    return new_tup\r\n\r","votes":null},{"text":"\r\n    return test_tup1 if test_tup2 not in test_tup1 else union_elements(test_tup1, test_tup2[1:])\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    return test_tup1, test_tup2\r\n    \r","votes":null},{"text":"\r\n    return (test_tup1[0] | test_tup2[0], test_tup1[1] | test_tup2[1])\r\n\r","votes":null},{"text":"\r\n    union_list = []\r\n    for i in test_tup1:\r\n        union_list.append(i)\r\n    for i in test_tup2:\r\n        union_list.append(i)\r\n    return set(union_list)\r\n\r","votes":null},{"text":"\r\n    assert isinstance(test_tup1, tuple)\r\n    assert isinstance(test_tup2, tuple)\r\n    union_tup = ()\r\n    for item in test_tup1:\r\n        if item not in test_tup2:\r\n            union_tup += (item,)\r\n    for item in test_tup2:\r\n        if item not in test_tup1:\r\n            union_tup += (item,)\r\n    return union_tup\r\n\r\n# Test the union function\r\nassert union_elements((2, 3), (1, 3)) == (2, 3, 1)\r\n\r\nassert union_elements((2, 3), (1, 3, 4, 5)) == (2, 3, 1, 4, 5)\r\n```\r\n\r\n## Task 3\r\n\r\n```python\r","votes":null},{"text":"\r\n    # Your code here\r\n    return set(test_tup1).union(set(test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0] or test_tup2[0]) and (test_tup1[1] or test_tup2[1])\r\n\r\n# Tests\r\n# Test 1\r\nprint(union_elements((True, True, True), (True, False, True)))\r\n\r\n# Test 2\r\nprint(union_elements((True, True, True), (False, False, True)))\r\n\r\n# Test 3\r\nprint(union_elements((True, True, True), (False, True, False)))","votes":null},{"text":"\r\n    return test_tup1 + test_tup2\r\n\r","votes":null},{"text":"\r\n    return test_tup1 + test_tup2\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    return(test_tup1[0] + test_tup2[0])\r\n\r\n\r","votes":null},{"text":"\r\n    return test_tup1 + test_tup2\r\n\r\nif __name__ == '__main__':\r\n    print(union_elements((1, 2), (3, 4)))\r\n    print(union_elements((1, 2, 3), (4, 5)))\r\n    print(union_elements((1, 2, 3, 4, 5), (6, 7)))\r\n    print(union_elements((1, 2), (3, 4, 5)))\r\n","votes":null},{"text":"\r\n\r\n    tup1 = test_tup1\r\n    tup2 = test_tup2\r\n    final_tup = ()\r\n    for i in range(len(tup1)):\r\n        if tup1[i] not in tup2:\r\n            final_tup += (tup1[i],)\r\n    return final_tup\r\n\r","votes":null},{"text":"\r\n    return (test_tup1 + test_tup2)\r\n\r","votes":null},{"text":"\r\n    union_elements = []\r\n    for i in range(len(test_tup1)):\r\n        for j in range(len(test_tup2)):\r\n            if test_tup1[i] == test_tup2[j]:\r\n                union_elements.append(test_tup1[i])\r\n                test_tup1.remove(test_tup1[i])\r\n    return union_elements\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\r\n\r","votes":null},{"text":"\r\n    new_tup = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            new_tup.append(i)\r\n    for j in test_tup2:\r\n        if j not in test_tup1:\r\n            new_tup.append(j)\r\n    return new_tup\r\n\r\n\r","votes":null},{"text":"\r\n    union = set()\r\n    try:\r\n        for item in test_tup1:\r\n            union.add(item)\r\n    except TypeError:\r\n        return test_tup2\r\n    else:\r\n        for item in test_tup2:\r\n            union.add(item)\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Return the union of the two tuples by using set() function.\r\n    return set(test_tup1) | set(test_tup2)\r\n\r\n# Use the function to find the union of the two tuples.\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n# + [markdown] id=\"eM6p9o7V5O5O\"\r\n# # 3.2. Using Lambda Expressions to Reduce Code Redundancy and Improve Readability\r\n#\r\n# A lambda expression is a useful tool to reduce code redundancy and improve readability.\r\n#\r\n# Lambda expressions are very useful in Python because they allow you to write small expressions that are easy to read and to understand. However, this does not mean that lambda expressions are the only way to write small and simple functions. There are other ways to write functions in Python.\r\n#\r\n# We can also use a lambda expression to create anonymous functions.\r\n#\r\n# For example, if we wanted to create a function to multiply all of the numbers in a list, we could have written a function like this:\r\n#\r\n# ```python\r\n# # Multiply all of the numbers in a list.\r\n#","votes":null},{"text":"\r\n    return tuple(set(test_tup1)+set(test_tup2))\r\n\r\n\r\nprint(union_elements((1,2,3), (1,2,4)))\r\n\r\n\r\n# + [markdown] id=\"oY77g26s4Y-0\"\r\n# # 1.2 Dictionaries\r\n#\r\n# Dictionaries are unordered collections of key-value pairs. Dictionaries are defined with curly brackets and key-value pairs are separated by commas.\r\n#\n# In the following example, the keys are numbers and the values are squares of the keys.\n#\n# ```python\n# squares = {\n#     1 : 1,\n#     2 : 4,\n#     3 : 9,\n#     4 : 16,\n#     5 : 25,\n#     6 : 36,\n#     7 : 49,\n#     8 : 64\n# }\n# ```\n#\n# Dictionaries are mutable, meaning that you can add or remove elements from the dictionary. However, you cannot change the keys of the dictionary.\n#\n# To update a dictionary, you must create a copy of it and then update the copy.\n#\n# ```python\n# squares = {\n#     1 : 1,\n#     2 : 4,\n#     3 : 9,\n#     4 : 16,\n#     5 : 25,\n#     6 : 36,\n#     7 : 49,\n#     8 : 64\n# }\n#\n# squares_copy = squares\n# squares_copy[10] = 100\n# ```\n#\n# As you can see, the new element is added to the dictionary, but the key 10 is still stored in the dictionary. This is because the dictionary is mutable.\n#\n# You can also remove elements from the dictionary by using the `del` operator.\n#\n# ```python\n# squares = {\n#     1 : 1,\n#     2 : 4,\n#     3 : 9,\n#     4 : 16,\n","votes":null},{"text":"\r\n    # write your code here\r\n    return test_tup1[0] + test_tup2[0]\r\n\r\n# testing\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (2, 4, 6)\r\nprint(union_elements(test_tup1, test_tup2))\r\n","votes":null},{"text":"\r\n    union_elems = []\r\n    for elem in test_tup1:\r\n        if elem not in union_elems:\r\n            union_elems.append(elem)\r\n    for elem in test_tup2:\r\n        if elem not in union_elems:\r\n            union_elems.append(elem)\r\n    return union_elems\r\n\r\n# Call the functions we wrote to test our functions:\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (4, 5, 7, 11, 13)\r\nprint(union_elems(test_tup1, test_tup2))\r\nprint(is_unique(test_tup1))\r\nprint(is_unique(test_tup2))\r\nprint(is_even(test_tup1))\r\nprint(is_even(test_tup2))","votes":null},{"text":"\r\n    # Create an empty set\r\n    test_set = set()\r\n    # Union of two sets\r\n    test_set.update(test_tup1)\r\n    test_set.update(test_tup2)\r\n    # Return the union set\r\n    return test_set\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0] if test_tup1[0] in test_tup2[1] else test_tup1[0],\r\n            test_tup1[1] if test_tup1[1] in test_tup2[1] else test_tup1[1],\r\n            test_tup1[2] if test_tup1[2] in test_tup2[1] else test_tup1[2])\r\n\r\n\r","votes":null},{"text":"\r\n    # Create an empty set\r\n    my_set = set()\r\n    # Loop through the two tuples\r\n    for x in test_tup1:\r\n        my_set.add(x)\r\n    for x in test_tup2:\r\n        my_set.add(x)\r\n    return my_set\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for elem in test_tup1:\r\n        result.append(elem)\r\n    for elem in test_tup2:\r\n        if elem not in test_tup1:\r\n            result.append(elem)\r\n    return result\r\n\r\n\r\n# + id=\"992X0qE94Y4_\" colab_type=\"code\" colab={}\r","votes":null},{"text":"\r\n    test_set1 = set(test_tup1)\r\n    test_set2 = set(test_tup2)\r\n    return test_set1 | test_set2\r\n\r","votes":null},{"text":"\r\n    test_tup3 = test_tup1 + test_tup2\r\n    return test_tup3\r\n\r\n\r\nprint(union_elements((1, 2, 3), (4, 5, 6)))\r\n\r\n# 2. Write a function to find the intersection of elements of the given tuples.\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n    return(test_tup1 | test_tup2)\r\n\r","votes":null},{"text":"\r\n    # TODO:\r\n    pass\r\n\r","votes":null},{"text":"\r\n\r\n    if not test_tup1 or not test_tup2:\r\n        return None\r\n\r\n    if len(test_tup1) > len(test_tup2):\r\n        test_tup = test_tup1\r\n    else:\r\n        test_tup = test_tup2\r\n\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] not in test_tup2:\r\n            test_tup.append(test_tup1[i])\r\n\r\n    return test_tup\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    union_list = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i]!= test_tup2[i]:\r\n            union_list.append(test_tup1[i])\r\n    return tuple(union_list)\r\n\r","votes":null},{"text":"\r\n    union_lst = []\r\n    for element in test_tup1:\r\n        if element not in test_tup2:\r\n            union_lst.append(element)\r\n    for element in test_tup2:\r\n        if element not in test_tup1:\r\n            union_lst.append(element)\r\n    return tuple(union_lst)\r\n    \r\n    \r\ntest_tup1 = (10, 20, 30, 40, 50)\r\ntest_tup2 = (10, 20, 30, 40, 50)\r\ntest_tup3 = (10, 20, 30, 30, 40, 50)\r\n\r\nprint(test_tup1)\r\nprint(test_tup2)\r\nprint(test_tup3)\r\n\r\nprint(union_elements(test_tup1, test_tup2))\r\nprint(union_elements(test_tup1, test_tup3))\r\nprint(union_elements(test_tup2, test_tup3))\r\n","votes":null},{"text":"\r\n    return (test_tup1[0], test_tup2[0])\r\n\r","votes":null},{"text":"\r\n    union_set = set()\r\n    for x in test_tup1:\r\n        union_set.add(x)\r\n    for x in test_tup2:\r\n        union_set.add(x)\r\n    return union_set\r\n\r\n\r\n# write a function to find the intersection of elements of the given tuples\r","votes":null},{"text":"\r\n    # Your code here\r\n    return (test_tup1[0], test_tup1[1], test_tup2[2])\r\n\r\n\r\nprint(union_elements((1, 2), (3, 4)))\r\nprint(union_elements((1, 2, 3), (4, 5)))\r\nprint(union_elements((1, 2), (3, 4, 5)))\r\n\r\n","votes":null},{"text":"\r\n    return(test_tup1 + test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    return set(test_tup1.keys()) | set(test_tup2.keys())\r\n\r","votes":null},{"text":"\r\n    union_set = set()\r\n    for i in test_tup1:\r\n        union_set.add(i)\r\n    for j in test_tup2:\r\n        union_set.add(j)\r\n    return union_set\r\n\r","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    union = []\r\n    for i in range(len(test_tup1)):\r\n        union.append(test_tup1[i])\r\n    for i in range(len(test_tup2)):\r\n        union.append(test_tup2[i])\r\n    return tuple(union)\r\n\r\n\r","votes":null},{"text":"\r\n    if test_tup1[0] == test_tup2[0]:\r\n        return (test_tup1[0], test_tup1[1] + test_tup2[1])\r\n    else:\r\n        return (test_tup1[0], test_tup1[1])\r\n\r\n\r","votes":null},{"text":"\r\n    elements = set(test_tup1) | set(test_tup2)\r\n    return elements\r\n\r\n\r","votes":null},{"text":"\r\n    union_tup = test_tup1\r\n    for item in test_tup2:\r\n        if item not in union_tup:\r\n            union_tup.append(item)\r\n    return union_tup\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0], test_tup2[0])\r\n\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4)))\r\nprint(union_elements((1,2),(3,4))","votes":null},{"text":"\r\n    test_tup1, test_tup2 = list(test_tup1), list(test_tup2)\r\n    for j in test_tup2:\r\n        if j not in test_tup1:\r\n            test_tup1.append(j)\r\n    return test_tup1\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0][0], test_tup1[1][0], test_tup2[0][0], test_tup2[1][0])\r\n\r\n# test function\r\n# test_tup1 = ((4, 5, 6), (1, 2, 3))\r\n# test_tup2 = ((4, 5, 6), (1, 2, 3))\r\n# print(union_elements(test_tup1, test_tup2))\r\n\r\n# 3.5.3\r\n# Write a function to find the intersection of elements of the given tuples.\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    # do not change the code below\r\n    if len(test_tup1)+len(test_tup2)<=2:\r\n        return test_tup1+test_tup2\r\n    elif len(test_tup1)>len(test_tup2):\r\n        return union_elements(test_tup1,test_tup2[len(test_tup2)-len(test_tup1):])\r\n    else:\r\n        return union_elements(test_tup1[len(test_tup1)-len(test_tup2):],test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    # create an empty list for the output\r\n    union_tup = []\r\n    # iterate over each element in each tuple\r\n    for i in range(len(test_tup1)):\r\n        for j in range(len(test_tup2)):\r\n            if i == j:\r\n                # if the elements are the same, append it to the union list\r\n                union_tup.append(test_tup1[i])\r\n            # if the elements are not the same, check if the current element is in the second tuple\r\n            elif test_tup1[i] in test_tup2[j]:\r\n                # if it is in the second tuple, append it to the union list\r\n                union_tup.append(test_tup1[i])\r\n    return union_tup\r\n\r\n\r\n# function to find the intersection of two elements\r","votes":null},{"text":"\r\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1], test_tup1[2] + test_tup2[2])\r\n\r\n\r","votes":null},{"text":"\r\n    test_set1 = set(test_tup1)\r\n    test_set2 = set(test_tup2)\r\n    # test_set1 = set(test_tup1)\r\n    # test_set2 = set(test_tup2)\r\n    # test_set1 = set(test_tup1)\r\n    # test_set2 = set(test_tup2)\r\n    # return test_set1.union(test_set2)\r\n    return test_set1.union(test_set2)\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0], test_tup2[0])\r\n\r\n","votes":null},{"text":"\r\n    # Your code here\r\n    test_tup1_set = set(test_tup1)\r\n    test_tup2_set = set(test_tup2)\r\n    return test_tup1_set.union(test_tup2_set)\r\n\r\n\r\n# Tests\r\nassert union_elements((1, 2, 3), (4, 5)) == {1, 2, 3, 4, 5}\r\nassert union_elements((1, 2, 3), (3, 4)) == {1, 2, 3, 4}\r\nassert union_elements((1, 2), (3, 4)) == {1, 2, 3, 4}\r\nassert union_elements((1, 2), (2, 3)) == {1, 2, 3}\r\nassert union_elements((1, 2), (1, 3)) == {1, 2, 3}\r\nassert union_elements((1,), (2, 3)) == {1, 2, 3}\r\nassert union_elements((1,), (1, 3)) == {1, 2, 3}\r\nassert union_elements((1,), (1,)) == {1}\r\nassert union_elements((1, 2, 3), (4,)) == {1, 2, 3, 4}\r\nassert union_elements((1, 2, 3), ()) == {1, 2, 3}\r\nassert union_elements((1, 2, 3), (3,)) == {1, 2, 3}\r\nassert union_elements((1, 2, 3), (2,)) == {1, 2, 3}\r\nassert union_elements((1, 2, 3), (1,)) == {1, 2, 3}\r\nassert union_elements((1, 2, 3), (4, 5, 6)) == {1, 2, 3, 4, 5, 6}\r\nassert union_elements((1, 2, 3), ","votes":null},{"text":"\r\n    return (test_tup1[0], test_tup1[1], test_tup2[2], test_tup2[3])\r\n\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n# Exercises\r\n# 1. Write a function which takes a list of lists as input and returns a list of tuples containing the elements of the nested list.\r\n\r\n#1.1\r\nprint(get_nested_elements([[1, 2, 3], [4, 5, 6]]))\r\n\r\n#1.2\r\nprint(get_nested_elements([[1, 2, 3], [4, 5, 6], [7], [8, 9]]))\r\n\r\n# 2. Write a function which takes a list of tuples as input and returns a tuple containing the sum of the elements of the list.\r\n\r\n#2.1\r\nprint(get_sum(test_list_tup))\r\n\r\n# 3. Write a function which takes a list of tuples as input and returns the tuple containing the maximum value of the 3 elements in the list.\r\n\r\n#3.1\r\nprint(get_max(test_list_tup))\r\n\r\n# 4. Write a function which takes a list of tuples as input and returns the tuple containing the minimum value of the 3 elements in the list.\r\n\r\n#4.1\r\nprint(get_min(test_list_tup))\r\n\r\n# 5. Write a function which takes two tuples as input and returns a boolean value 'True' if the first tuple is a subset of the second tuple.\r\n\r\n#5.1\r\nprint(is_subset(test_tup1, test_tup2))\r\n\r\n# 6. Write a function which takes two tuples as input and returns a boolean value 'True' if the second tuple is a subset of the first tuple.\r\n\r\n#6.1\r\nprint(is_subset(test_tup2, test_tup1))\r\n\r\n\r\n# 7. Write a function which takes two tuples as input and returns a boolean value 'True' if the two tuples have the same elements.\r\n\r\n#7.1\r\nprint(is","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    return test_tup1 + test_tup2\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # your code here\r\n    union = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] not in union:\r\n            union.append(test_tup1[i])\r\n    for i in range(len(test_tup2)):\r\n        if test_tup2[i] not in union:\r\n            union.append(test_tup2[i])\r\n    return union\r\n\r\n\r\nassert union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\r\nassert union_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\r\nassert union_elements((1, 2, 3), (4, 4, 5)) == (1, 2, 3, 4, 5)\r\n","votes":null},{"text":"\r\n    union_list = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] not in test_tup2:\r\n            union_list.append(test_tup1[i])\r\n    return union_list\r\n\r\n\r","votes":null},{"text":"\r\n    union = []\r\n    for element in test_tup1:\r\n        if element not in test_tup2:\r\n            union.append(element)\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0] or test_tup2[0], test_tup1[1] or test_tup2[1])\r\n\r\n\r","votes":null},{"text":"\r\n    return_tup = []\r\n    for el1 in test_tup1:\r\n        for el2 in test_tup2:\r\n            if el1 == el2:\r\n                return_tup.append(el1)\r\n    return return_tup\r\n\r\n\r","votes":null},{"text":"\r\n    union_tup = ()\r\n    for test in test_tup1:\r\n        if test not in test_tup2:\r\n            union_tup += (test,)\r\n    for test in test_tup2:\r\n        if test not in test_tup1:\r\n            union_tup += (test,)\r\n    return union_tup\r\n\r\n\r\ntest_tup1 = ('a', 'b')\r\ntest_tup2 = ('a', 'c', 'f')\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n\r\n# 2.\r","votes":null}],"time":{"count":8.0,"avg":139020.129,"std":24711.1003447475,"cov":0.1777519595}}
{"id":562,"question":"def Find_Max_Length(lst):\r\n    \"\"\"Write a python function to find the maximum length of sublist.\"\"\"","answers":[{"text":"\r\n    return max(len(sublist) for sublist in lst)\r\n\r","votes":86793.84},{"text":"\r\n    max_length = 0\r\n    for item in lst:\r\n        if len(item) > max_length:\r\n            max_length = len(item)\r\n    return max_length\r\n\r\n\r","votes":90634.764},{"text":"\r\n    maxlen = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > maxlen:\r\n            maxlen = len(lst[i])\r\n    return maxlen\r\n\r","votes":92122.252},{"text":"\r\n    max_len = 0\r\n    for s in lst:\r\n        if len(s) > max_len:\r\n            max_len = len(s)\r\n    return max_len\r\n\r","votes":101683.968},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\n\r","votes":102478.936},{"text":"\r\n    return max(map(len, lst))\r\n\r\nif __name__ == '__main__':\r\n    print(Find_Max_Length(['apple', 'banana', 'cherry']))\r\n    print(Find_Max_Length(['apple', 'banana']))","votes":102895.036},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        length = len(i)\r\n        if length > max_length:\r\n            max_length = length\r\n    return max_length\r\n\r\n\r","votes":104926.756},{"text":"\r\n    if len(lst) == 0:\r\n        return 0\r\n    else:\r\n        max_len = 1\r\n        for i in range(1, len(lst)):\r\n            if len(lst[i]) > max_len:\r\n                max_len = len(lst[i])\r\n        return max_len\r\n\r\n\r\n# Write a python function to merge two sorted lists into one sorted list.\r","votes":106452.06},{"text":"\r\n    length = 0\r\n    for item in lst:\r\n        if len(item) > length:\r\n            length = len(item)\r\n    return length\r\n\r\n\r","votes":107309.54},{"text":"\r\n    # Write your code here\r\n    if len(lst) == 0:\r\n        return 0\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_length:\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r\n\r","votes":110491.604},{"text":"\r\n    max_length = 0\r\n    # Find the length of the longest sublist\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r","votes":110664.9},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_length:\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r\n\r","votes":111028.356},{"text":"\r\n    if len(lst) == 0:\r\n        return 0\r\n    max_length = 1\r\n    for i in range(len(lst)):\r\n        if i == 0:\r\n            max_length = 1\r\n        if len(lst[i]) > max_length:\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r","votes":111827.924},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_len:\r\n            max_len = len(lst[i])\r\n    return max_len\r\n\r","votes":112334.724},{"text":"\r\n    if len(lst) <= 0:\r\n        return 0\r\n    i = 0\r\n    temp = 0\r\n    while i < len(lst):\r\n        if len(lst[i]) > temp:\r\n            temp = len(lst[i])\r\n        i += 1\r\n    return temp\r\n\r\n\r","votes":114758.212},{"text":"\r\n    max_len = 0\r\n    for i in lst:\r\n        if len(i) > max_len:\r\n            max_len = len(i)\r\n    return max_len\r\n\r\n\r","votes":115428.256},{"text":"\r\n    return max(len(sublist) for sublist in lst)\r\n\r\n\r","votes":116625.444},{"text":"\r\n    return max(map(len, lst))\r\n\r\n\r","votes":118840.024},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_len:\r\n            max_len = len(lst[i])\r\n    return max_len\r\n\r\n\r","votes":119849.264},{"text":"\r\n    max = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max:\r\n            max = len(lst[i])\r\n    return max\r\n\r\n\r","votes":120697.032},{"text":"\r\n    max_sublist = -1\r\n    for i in range(0,len(lst)):\r\n        if len(lst[i]) > max_sublist:\r\n            max_sublist = len(lst[i])\r\n    return max_sublist\r\n\r","votes":120884.352},{"text":"\r\n    max = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max:\r\n            max = len(lst[i])\r\n    return max\r\n\r","votes":122242.268},{"text":"\r\n    # if lst is empty, return 0\r\n    if len(lst) == 0:\r\n        return 0\r\n    # initialize the result\r\n    result = 0\r\n    # loop for each element\r\n    for i in lst:\r\n        # if sublist is empty\r\n        if len(i) == 0:\r\n            # result is updated\r\n            result = max(result, 0)\r\n        # get the length of current sublist\r\n        else:\r\n            result = max(result, len(i))\r\n    return result\r\n\r\n\r","votes":122976.968},{"text":"\r\n\r\n    # if the list is empty, return 0\r\n    if not lst:\r\n        return 0\r\n\r\n    # initialize max_len to the length of the first element\r\n    max_len = len(lst[0])\r\n\r\n    # loop over all elements of the list\r\n    for i in range(1, len(lst)):\r\n        # if the length of the current element is greater\r\n        # than max_len, update max_len\r\n        if len(lst[i]) > max_len:\r\n            max_len = len(lst[i])\r\n\r\n    return max_len\r\n\r\nif __name__ == '__main__':\r\n    # Write some test code below\r\n    test_list = [['abc', 'def'], ['xyz', 'pqr']]\r\n    print(Find_Max_Length(test_list))\r\n\r\n","votes":123511.72},{"text":"\r\n    return max(len(s) for s in lst)\r\n\r\n\r","votes":129667.628},{"text":"\r\n    # Initialize max_length\r\n    max_length = -1\r\n    # Iterate over lst\r\n    for i in range(len(lst)):\r\n        # If the length of the sublist is greater than max_length\r\n        # then update max_length\r\n        if len(lst[i]) > max_length:\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r\n\r","votes":131531.648},{"text":"\r\n    max_length = 0\r\n    for sublist in lst:\r\n        if len(sublist) > max_length:\r\n            max_length = len(sublist)\r\n    return max_length\r\n\r\n\r","votes":131769.964},{"text":"\r\n    max_length = -1\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_length:\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r\n\r","votes":132349.14},{"text":"\r\n    max_length = 0\r\n    for sublist in lst:\r\n        if len(sublist) > max_length:\r\n            max_length = len(sublist)\r\n    return max_length\r\n\"\"\"\r\nFunction to convert a list of lists to a list of tuples.\r\n\"\"\"\r","votes":134265.724},{"text":"\r\n    if not lst:\r\n        return 0\r\n    max_len = 0\r\n    for word in lst:\r\n        if len(word) > max_len:\r\n            max_len = len(word)\r\n    return max_len\r\n\r","votes":136543.304},{"text":"\r\n    max=len(lst[0])\r\n    for i in lst:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max\r\n\r","votes":140424.004},{"text":"\r\n    return max(len(s) for s in lst)\r\n\r","votes":145005.94},{"text":"\r\n    max = 0\r\n    for i in lst:\r\n        if len(i) > max:\r\n            max = len(i)\r\n    return max\r\n\r\n\r","votes":145085.364},{"text":"\r\n    if len(lst) < 1:\r\n        return 0\r\n    else:\r\n        max_length = 0\r\n        for i in range(1, len(lst)):\r\n            if len(lst[i]) > max_length:\r\n                max_length = len(lst[i])\r\n        return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    # lst = ['a', 'ab', 'abc', 'abcd']\r\n    lst = ['a', 'ab', 'abc', 'abcd', 'abcde']\r\n    print(Find_Max_Length(lst))\r\n","votes":146237.804},{"text":"\r\n    maxlen = 0\r\n    for elem in lst:\r\n        if len(elem) > maxlen:\r\n            maxlen = len(elem)\r\n    return maxlen\r\n\r","votes":147240.808},{"text":"\r\n    max_length=0\r\n    for i in lst:\r\n        if len(i)>max_length:\r\n            max_length=len(i)\r\n    return max_length\r\n\r","votes":152052.752},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r","votes":152422.664},{"text":"\r\n    length = 0\r\n    for i in lst:\r\n        if (length < len(i)):\r\n            length = len(i)\r\n    return length\r\n\r","votes":152801.664},{"text":"\r\n    Max_Length = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > Max_Length:\r\n            Max_Length = len(lst[i])\r\n    return Max_Length\r","votes":154281.364},{"text":"\r\n    max_len = len(lst)\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_len:\r\n            max_len = len(lst[i])\r\n    return max_len\r\n\r\n# 4.5.5.1: Print the maximum length of all sublists\r","votes":155699.58},{"text":"\r\n    return max(map(len, lst))\r\n    \r","votes":157200.132},{"text":"\r\n    max_len=0\r\n    for i in lst:\r\n        if len(i)>max_len:\r\n            max_len=len(i)\r\n    return max_len\r\n\r","votes":157272.212},{"text":"\r\n    lst_len = len(lst)\r\n    max_len = 0\r\n    for i in range(lst_len):\r\n        if len(lst[i]) > max_len:\r\n            max_len = len(lst[i])\r\n    return max_len\r\n\r\n\r","votes":157633.76},{"text":"\r\n    max_length = 0\r\n    if len(lst) == 0:\r\n        return 0\r\n    for i in range(len(lst)):\r\n        if max_length < len(lst[i]):\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r\n\r","votes":159223.416},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\n# Your function should return a list.\r","votes":159306.616},{"text":"\r\n    max_length = 0\r\n    for item in lst:\r\n        if len(item) > max_length:\r\n            max_length = len(item)\r\n    return max_length\r\n\r","votes":164705.348},{"text":"\r\n    if len(lst) == 0:\r\n        return 0\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_length:\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r\n\r","votes":164728.176},{"text":"\r\n    max_Len = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_Len:\r\n            max_Len = len(lst[i])\r\n    return max_Len\r\n\r","votes":167585.876},{"text":"\r\n    if not lst:\r\n        return 0\r\n    max_length = 1\r\n    for i in range(1,len(lst)):\r\n        if len(lst[i]) > max_length:\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r\n\r","votes":170268.02},{"text":"\r\n    if not lst:\r\n        return 0\r\n    max_length = 1\r\n    for i in range(1,len(lst)):\r\n        if len(lst[i]) > max_length:\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r","votes":170729.516},{"text":"\r\n    max = 0\r\n    for i in lst:\r\n        if len(i) > max:\r\n            max = len(i)\r\n    return max\r\n\r","votes":177534.36},{"text":"\r\n    return max(len(sublst) for sublst in lst)\r\n\r\n# Create a list of lists\r\nlst = []\r\n\r\n# Add sublists to the list\r\nlst.append([1, 2, 3])\r\nlst.append([4, 5, 6])\r\nlst.append([8, 9, 10])\r\nlst.append([11, 12, 13])\r\nlst.append([14, 15, 16])\r\n\r\n# Find the maximum length of the sublists\r\nprint(Find_Max_Length(lst))\r\n# Output: 3\r\n\r\n# Create a list of lists\r\nlst = []\r\n\r\n# Add sublists to the list\r\nlst.append([1, 2, 3])\r\nlst.append([4, 5, 6, 7])\r\nlst.append([8, 9, 10, 11])\r\n\r\n# Find the maximum length of the sublists\r\nprint(Find_Max_Length(lst))\r\n# Output: 4\r\n\r\n# Create a list of lists\r\nlst = []\r\n\r\n# Add sublists to the list\r\nlst.append([1, 2, 3])\r\nlst.append([4, 5, 6, 7])\r\nlst.append([8, 9, 10])\r\nlst.append([11, 12, 13])\r\nlst.append([14, 15, 16])\r\nlst.append([17, 18, 19])\r\n\r\n# Find the maximum length of the sublists\r\nprint(Find_Max_Length(lst))\r\n# Output: 4\r\n\r\n# Create a list of lists\r\nlst = []\r\n\r\n# Add sublists to the list\r\nlst.append([1, 2, 3])\r\nlst.append([4, 5, 6, 7])\r\n\r\n# Find the maximum length of the sublists\r\nprint(Find_Max_Length(lst))\r\n# Output: 3\r\n\r\n# Create a list of lists\r","votes":186496.54},{"text":"\r\n    max_length = 0\r\n    for elem in lst:\r\n        if len(elem) > max_length:\r\n            max_length = len(elem)\r\n    return max_length\r\n\r\n# Tests\r\ntest_lst = [[\"hello\", \"world\"], [\"this\", \"is\", \"a\", \"test\", \"for\", \"maximum\"]]\r\nprint(f\"The maximum length of the sublist in the list {test_lst} is {Find_Max_Length(test_lst)}\")\r\n\r\ntest_lst = [[\"hello\", \"world\"], [\"this\", \"is\", \"a\", \"test\", \"for\", \"maximum\"]]\r\nprint(f\"The maximum length of the sublist in the list {test_lst} is {Find_Max_Length(test_lst)}\")\r\n\r\ntest_lst = [[\"hello\", \"world\"], [\"this\", \"is\", \"a\", \"test\", \"for\", \"maximum\"]]\r\nprint(f\"The maximum length of the sublist in the list {test_lst} is {Find_Max_Length(test_lst)}\")\r\n\r\ntest_lst = [[\"hello\", \"world\"], [\"this\", \"is\", \"a\", \"test\", \"for\", \"maximum\"]]\r\nprint(f\"The maximum length of the sublist in the list {test_lst} is {Find_Max_Length(test_lst)}\")\r\n\r\ntest_lst = [[\"hello\", \"world\"], [\"this\", \"is\", \"a\", \"test\", \"for\", \"maximum\"]]\r\nprint(f\"The maximum length of the sublist in the list {test_lst} is {Find_Max_Length(test_lst)}\")\r\n\r\n","votes":190347.472},{"text":"\r\n    length_of_list = len(lst)\r\n    length_of_longest = 0\r\n    for i in range(length_of_list):\r\n        if len(lst[i]) > length_of_longest:\r\n            length_of_longest = len(lst[i])\r\n    return length_of_longest\r\n\r\n\r","votes":198271.588},{"text":"\r\n    length = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > length:\r\n            length = len(lst[i])\r\n    return length\r\n\r\n\r","votes":204495.008},{"text":"\r\n    return max(len(sub) for sub in lst)\r\n\r\n\r","votes":204798.352},{"text":"\r\n    length = 0\r\n    for i in range(len(lst)):\r\n        if i == 0:\r\n            length = len(lst[i])\r\n        elif len(lst[i]) > length:\r\n            length = len(lst[i])\r\n    return length\r\n\r","votes":223200.408},{"text":"\r\n    max_len = 0\r\n    for i in lst:\r\n        if len(i) > max_len:\r\n            max_len = len(i)\r\n    return max_len\r\n\r","votes":227999.944},{"text":"\r\n    length = 0\r\n    for i in lst:\r\n        if len(i) > length:\r\n            length = len(i)\r\n    return length\r\n\r\n\r","votes":235375.772},{"text":"\r\n    max_sublist = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_sublist:\r\n            max_sublist = len(lst[i])\r\n    return max_sublist\r\n\r","votes":247697.244},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_length:\r\n            max_length = len(lst[i])\r\n\r\nif __name__ == '__main__':\r\n    lst = ['1234567890','aabcbda','abcde','abcc']\r\n    print(Find_Max_Length(lst))","votes":null},{"text":"\r\n    max_length = 0\r\n    for element in lst:\r\n        if len(element) > max_length:\r\n            max_length = len(element)\r\n    return max_length\r\n\r\n\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6]))\r\nprint(Find_Max_Length([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]))\r\nprint(Find_Max_Length([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]))\r\nprint(Find_Max_Length([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\"","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(len(lst[i])):\r\n            if len(lst[i][j]) > max_len:\r\n                max_len = len(lst[i][j])\r\n    return max_len\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\nprint(Find_Max_Length(lst))\r\n","votes":null},{"text":"\r\n    max_length = 0\r\n    while len(lst)!= 0:\r\n        if len(lst) > max_length:\r\n            max_length = len(lst)\r\n        lst = lst[1:]\r\n    return max_length\r\n\r","votes":null},{"text":"\r\n    lst = list(lst)\r\n    max_length = 1\r\n    for i in range(len(lst)):\r\n        if len(lst[i:]) > max_length:\r\n            max_length = len(lst[i:])\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for elem in lst:\r\n        if len(elem) > max_len:\r\n            max_len = len(elem)\r\n    return max_len\r\n\r\nprint(Find_Max_Length(lst1))","votes":null},{"text":"\r\n    return max(len(lst), *map(lambda x: len(x), lst))\r\n\r\nprint(Find_Max_Length([[1,2,3],[5,6,7]])) # 3\r\nprint(Find_Max_Length([[1,2,3],[5,6]])) # 3\r\nprint(Find_Max_Length([1,2,3])) # 3\r\nprint(Find_Max_Length([1,2])) # 2\r\nprint(Find_Max_Length([[]])) # 0\r\nprint(Find_Max_Length([[],[]])) # 0\r\nprint(Find_Max_Length([[],[]][0])) # 0\r\nprint(Find_Max_Length([[],[]][1])) # 0\r\nprint(Find_Max_Length([[]][0])) # 0\r\nprint(Find_Max_Length([[]][1])) # 0\r\nprint(Find_Max_Length([[],[]])) # 0\r\nprint(Find_Max_Length([[],[]][0])) # 0\r\nprint(Find_Max_Length([[],[]][1])) # 0\r\nprint(Find_Max_Length([[]][0])) # 0\r\nprint(Find_Max_Length([[]][1])) # 0\r\nprint(Find_Max_Length([[]])) # 0\r\nprint(Find_Max_Length([[]][0])) # 0\r\nprint(Find_Max_Length([[]][1])) # 0\r\nprint(Find_Max_Length([[],[]][0])) # 0\r\nprint(Find_Max_Length([[],[]][1])) # 0\r\nprint(Find_Max_Length([[]][0])) # 0\r\nprint(Find_Max_Length([[]][1])) # 0\r\nprint(Find_Max_Length([1,2,3])) # 3","votes":null},{"text":"\r\n    for i in lst:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    if len(lst) == 0:\r\n        return 0\r\n    else:\r\n        return 1 + max(Find_Max_Length(lst[1:]), Find_Max_Length(lst[:-1]))\r\n\r","votes":null},{"text":"\r\n    max_l = 0\r\n    for i in lst:\r\n        if len(i) > max_l:\r\n            max_l = len(i)\r\n    return max_l\r\n\r\n# Input Data\r\nlst = [\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', 'International'],\r\n    ['I', 'am', 'a','student', 'of', 'computer','science', 'at', 'Daffodil', ","votes":null},{"text":"\r\n    if len(lst)==0:\r\n        return 0\r\n    elif len(lst)==1:\r\n        return 1\r\n    else:\r\n        max_length=0\r\n        for i in range(len(lst)):\r\n            sub_list=lst[i:i+2]\r\n            max_len=max(max_length,len(sub_list))\r\n        return max_len\r\n\r\n\r\nif __name__=='__main__':\r\n    print('This program finds the length of the longest sublist')\r\n    lst=[3,12,23,44,55,66,77,88]\r\n    print('The length of the longest sublist is',Find_Max_Length(lst))","votes":null},{"text":"\r\n    if len(lst) == 0:\r\n        return 0\r\n    else:\r\n        return 1 + max(Find_Max_Length(lst[:i]) for i in range(len(lst)))\r\n\r","votes":null},{"text":"\r\n    max_ = 0\r\n    for i in lst:\r\n        if len(i) > max_:\r\n            max_ = len(i)\r\n    return max_\r\nprint(Find_Max_Length(['A', 'B', 'C', 'D']))\r\nprint(Find_Max_Length(['A', 'B', 'C', 'D', 'E', 'F']))\r\nprint(Find_Max_Length(['A', 'B', 'C', 'D', 'E', 'F', 'G']))\r\n```\r\n\r\n- ### Find the maximum value of a list.\r\n\r\n```python\r","votes":null},{"text":"\r\n    # create an empty list to store the length of the list\r\n    length_lst = []\r\n    # create an empty list to store the count of the length of the list\r\n    count_lst = []\r\n    # create a for-loop to iterate through the list\r\n    for i in range(len(lst)):\r\n        # add the length of the list to the length_lst list\r\n        length_lst.append(len(lst[i]))\r\n        # add 1 to the count_lst list\r\n        count_lst.append(1)\r\n        # iterate through the list\r\n        for j in range(1, len(lst[i])):\r\n            # check if the length of the element in the i-th sublist is\r\n            # greater than the length of the element in the i-th sublist\r\n            # in the previous sublist\r\n            if length_lst[i] > length_lst[i - 1]:\r\n                # subtract 1 from the count_lst list\r\n                count_lst[i] -= 1\r\n                # add the length of the element in the i-th sublist to the\r\n                # length_lst list\r\n                length_lst[i] = length_lst[i - 1]\r\n                # iterate through the list\r\n                for k in range(i + 1, len(lst)):\r\n                    # if the length of the element in the k-th sublist is\r\n                    # greater than the length of the element in the\r\n                    # i-th sublist in the previous sublist\r\n                    if length_lst[k] > length_lst[i - 1]:\r\n                        # subtract 1 from the count_lst list\r\n                        count_lst[k] -= 1\r\n                        # add the length of the element in the k-th sublist\r\n                        # to the length_lst list\r\n                        length_lst[k] = length_lst[i - 1]\r\n    # create an empty list to store the maximum length\r\n    max_len = 0\r\n    # iterate through the length_lst list\r\n    for i in range(len(length_lst)):\r\n        # if the length of the element in the i-th sublist is greater than\r\n        # the maximum length\r\n        if length_lst[i] > max_len:\r\n            # set the maximum length to the length of the element in the\r\n            # i-th sublist\r\n            max","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        if len(lst[i]) > max_length:\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r\n\r\nprint(Find_Max_Length(lst))\r\n","votes":null},{"text":"\r\n\r\n    max_len = 0\r\n    for i in range(len(lst)-1):\r\n        if len(lst[i]) > max_len:\r\n            max_len = len(lst[i])\r\n    return max_len\r\n\r","votes":null},{"text":"\r\n    if len(lst) == 0:\r\n        return 0\r\n    if len(lst) == 1:\r\n        return 1\r\n    max_sublist_length = 0\r\n    for i in range(len(lst)):\r\n        sublist = lst[i:len(lst)]\r\n        sublist_length = len(sublist)\r\n        if max_sublist_length < sublist_length:\r\n            max_sublist_length = sublist_length\r\n    return max_sublist_length\r\n\r\n\r","votes":null},{"text":"\r\n    if len(lst) == 0:\r\n        return 0\r\n    elif len(lst) == 1:\r\n        return 1\r\n    else:\r\n        return max(Find_Max_Length(lst[:i]),Find_Max_Length(lst[i+1:]))+1\r\n\r","votes":null},{"text":"\r\n    if len(lst) < 1:\r\n        return 0\r\n    if len(lst) == 1:\r\n        return 1\r\n    if len(lst) == 2:\r\n        return 2\r\n    if len(lst) == 3:\r\n        return 3\r\n    if len(lst) == 4:\r\n        return 4\r\n    if len(lst) == 5:\r\n        return 5\r\n    if len(lst) == 6:\r\n        return 6\r\n    if len(lst) == 7:\r\n        return 7\r\n    if len(lst) == 8:\r\n        return 8\r\n    if len(lst) == 9:\r\n        return 9\r\n    if len(lst) == 10:\r\n        return 10\r\n    if len(lst) == 11:\r\n        return 11\r\n    if len(lst) == 12:\r\n        return 12\r\n    if len(lst) == 13:\r\n        return 13\r\n    if len(lst) == 14:\r\n        return 14\r\n    if len(lst) == 15:\r\n        return 15\r\n    if len(lst) == 16:\r\n        return 16\r\n    if len(lst) == 17:\r\n        return 17\r\n    if len(lst) == 18:\r\n        return 18\r\n    if len(lst) == 19:\r\n        return 19\r\n    if len(lst) == 20:\r\n        return 20\r\n    if len(lst) == 21:\r\n        return 21\r\n    if len(lst) == 22:\r\n        return 22\r\n    if len(lst) == 23:\r\n        return 23\r\n    if len(lst) == 24:\r\n        return 24\r\n    if len(lst) == 25:\r\n        return 25\r\n    if len(lst) == 26:\r\n        return 26\r\n    if len(lst) == 27:\r\n        return 27\r\n    if len(lst) == 28:\r\n        return 28\r\n    if len(lst) == 29:\r\n        return 29\r\n    if len(lst) == 30:\r\n        return 30\r\n    if len(lst) == 31:\r\n      ","votes":null},{"text":"\r\n    lst_len = len(lst)\r\n    # check if list is empty\r\n    if len(lst) == 0:\r\n        return 0\r\n    # initialize a variable to hold the length of largest sublist\r\n    max_len = 0\r\n    # iterate over each element of the list\r\n    for i in range(lst_len):\r\n        # initialize a variable to hold the length of the current sublist\r\n        curr_len = 1\r\n        # iterate over each element of the sublist\r\n        for j in range(lst_len):\r\n            # check if current element is same as the previous element\r\n            if lst[i] == lst[j]:\r\n                # increment the length of the current sublist\r\n                curr_len += 1\r\n            else:\r\n                # check if the current sublist is greater than the maximum\r\n                # sublist\r\n                if curr_len > max_len:\r\n                    max_len = curr_len\r\n                # reinitialize the current sublist to 1\r\n                curr_len = 1\r\n    # return the largest sublist\r\n    return max_len\r\n\r\n\r","votes":null}],"time":{"count":60.0,"avg":144328.4552,"std":37420.3089001355,"cov":0.259271873}}
{"id":564,"question":"def count_Pairs(arr,n):\r\n    \"\"\"Write a python function to count unequal element pairs from the given array.\"\"\"","answers":[{"text":"\r\n    #Your code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!= arr[j]:\r\n                count = count +1\r\n    return count\r\n\r\narr = [1, 2, 1, 3, 2, 4, 2, 5]\r\nprint(count_Pairs(arr,len(arr)))\r\n","votes":108585.036},{"text":"\r\n    res = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                res += 1\r\n    return res\r\n\r\nprint(count_Pairs([2,4,1,3,5,6],6))","votes":109767.932},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr=[4,2,3,2,2]\r\nprint(count_Pairs(arr,len(arr)))\r\n\r\n# # 3. Write a python function to find the longest common subsequence of two strings.\r\n\r\n#","votes":111626.58},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                continue\r\n            else:\r\n                count=count+1\r\n    return count\r\n\r\n\r\n# Driver Code\r\narr = [1, 2, 3, 4, 5, 6, 7]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))\r\n\r\n","votes":112338.612},{"text":"\r\n    # your code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                continue\r\n            else:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,2,3,3,3,3]\r\n    n = len(arr)\r\n    print(count_Pairs(arr,n)) ","votes":115087.392},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr=[1,2,1,2,3]\r\n    n=len(arr)\r\n    print(count_Pairs(arr,n))\r\n","votes":117591.036},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            a = arr[i]\r\n            b = arr[j]\r\n            if(a!= b):\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int,input().rstrip().split()))\r\n    result = count_Pairs(arr,n)\r\n    print(result)\r\n","votes":119598.44},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nif __name__=='__main__':\r\n    arr=[1,2,2,3,4,6,7,9]\r\n    n=len(arr)\r\n    print(\"Number of unequal pairs in the given array are:\",count_Pairs(arr,n))","votes":124966.896},{"text":"\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr = [1,1,1,2,2,2]\r\nprint(count_Pairs(arr,6))\r\nprint(count_Pairs(arr,3))\r\n","votes":126255.908},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                continue\r\n            else:\r\n                count+=1\r\n    return count\r\narr = [1,2,3,4,5,6,7,8,9,10]\r\nprint(count_Pairs(arr,10))","votes":126449.192},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[j]!= arr[i]:\r\n                count+=1\r\n    return count\r\n\r","votes":127165.848},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!= arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter the number of elements in list: '))\r\n    arr = list(map(int,input('Enter the elements in list: ').split()))\r\n    print(\"Number of unequal pairs is\",count_Pairs(arr,n))\r\n","votes":132395.972},{"text":"\r\n    count=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count=count+1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,1,1,2,2,2]\r\n    n = len(arr)\r\n    print(count_Pairs(arr,n))\r\n","votes":136929.888},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!= arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\"\"\"\r\nTime complexity : O(n^2)\r\nAuxiliary Space : O(1)\r\n\"\"\"\r\n","votes":147658.964},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr=[1,2,2,3,5,6,7,8,8,9]\r\n    print(count_Pairs(arr,len(arr)))","votes":164498.856},{"text":"\r\n    count = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!= arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n# Driver Code\r\narr = [1,2,3,3,4,5]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))","votes":165618.884},{"text":"\r\n    pairs=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                pairs+=1\r\n    return pairs\r\n\r\nif __name__ == \"__main__\":\r\n    arr=[8,7,6,4,5]\r\n    n=len(arr)\r\n    pairs=count_Pairs(arr,n)\r\n    print(pairs)","votes":173718.892},{"text":"\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__==\"__main__\":\r\n    arr=[1,1,2,2,3,3,4,4,5,6,7]\r\n    ans=count_Pairs(arr,len(arr))\r\n    print(ans)","votes":176708.02},{"text":"\r\n    #Write your code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!= arr[j]:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr = [5, 2, 4, 3, 4]\r\n    n = len(arr)\r\n    print(count_Pairs(arr, n))\r\n","votes":177658.828},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nif __name__==\"__main__\":\r\n    arr = [1,2,2,4,2,2,4]\r\n    n = len(arr)\r\n    print(count_Pairs(arr,n))\r\n","votes":178945.032},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n#Driver code\r\narr=[1,1,2,3,4,5,6,7,8,9,10]\r\nn=len(arr)\r\nprint(count_Pairs(arr,n))\r\n","votes":184494.036},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!= arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))","votes":190624.104},{"text":"\r\n    # Create a set of unique elements\r\n    unique_elements = set(arr)\r\n    # Initialize count\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i] == arr[j]:\r\n                continue\r\n            else:\r\n                # Count only pairs of elements that are not identical\r\n                if unique_elements.issuperset({arr[i], arr[j]}):\r\n                    count += 1\r\n    return count\r\nprint(count_Pairs([1,1,2,3,3,4,5], 6))","votes":200320.312},{"text":"\r\n    c=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                c+=1\r\n    return c\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 1, 2, 2, 3, 4]\r\n    print(count_Pairs(arr, len(arr)))\r\n\r\n","votes":223369.812},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    # code here\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [5,1,3,4,2,6]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n```\r\n\r\n## Time Complexity\r\nO(N)\r\n\r\n## Space Complexity\r\nO(1)\r\n\r\n## Solution\r\n```python\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if (arr[i]>arr[j]):\r\n                count+=1\r\n    print(count)\r\n\r","votes":null},{"text":"\r\n\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nprint(count_Pairs(arr,n))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]==arr[j]):\r\n                count+=1\r\n    return count\r\n\r\narr = [1,1,2,2,2,2,3,4,4]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!= arr[j]:\r\n                count += 1\r\n    print(count)\r\n\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]<arr[j]):\r\n                count = count + 1\r\n    return count\r\n\r\nif __name__=='__main__':\r\n    n = int(input(\"Enter the number of elements: \"))\r\n    arr = [int(x) for x in input().split()]\r\n    print(\"Number of unequal element pairs are:\",count_Pairs(arr,n))","votes":null},{"text":"\r\n    # Your code goes here\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\nprint(count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    arr=list(set(arr))\r\n    if n%2==0:\r\n        i=0\r\n        for x in arr:\r\n            for y in arr:\r\n                if x!=y:\r\n                    print(x,y)\r\n                    i+=1\r\n    else:\r\n        for x in arr:\r\n            for y in arr:\r\n                if x!=y:\r\n                    print(x,y)\r\n\r\n\r\nif __name__=='__main__':\r\n    n=int(input())\r\n    arr=list(map(int,input().split()))\r\n    count_Pairs(arr,n)\r\n","votes":null},{"text":"\r\n    arr.sort()\r\n    count=0\r\n    for i in range(n):\r\n        if arr[i]==arr[i+1]:\r\n            count+=1\r\n    return count\r\n            \r\nif __name__ == '__main__':\r\n    n=int(input())\r\n    arr=list(map(int,input().split()))\r\n    print(count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]>arr[j]):\r\n                count+=1\r\n    return count\r\n\r\narr=[12,4,1,12,2,13,2,2,2,2,3]\r\nprint(count_Pairs(arr,len(arr)))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if (arr[i] == arr[j]):\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 2","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[j]!= arr[i]:\r\n                count += 1\r\n    return count\r\n            \r\narr = [1,1,1,2,2,3,3,3,4,4,4]\r\nprint(count_Pairs(arr,len(arr)))\r\n```\r\n\r\n**Output:**\r\n```\r\n10\r\n```\r\n\r\n**Explanation:**\r\n\r\n- We can see that there are 10 unequal element pairs in the given array.\r\n\r\n### **3. 1D Array and 2D Array**\r\n\r\n**Question:** Write a python function to find the maximum sum of a 2D array.\r\n\r\n**Input:**\r\n\r\n- **arr:** 2D array\r\n- **n:** number of rows in the 2D array\r\n- **m:** number of columns in the 2D array\r\n\r\n**Output:**\r\n\r\n- **max_sum:** maximum sum of the given 2D array\r\n\r\n**Example:**\r\n\r\n```python\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if(arr[i]!= arr[j]):\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int,input().strip().split()))\r\n    print(count_Pairs(arr,n))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1, 2, 2, 2, 2, 3]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n# Output: 3\r\n","votes":null},{"text":"\r\n    count=0\r\n    for i in range(0,n-2):\r\n        for j in range(i+1,n-1):\r\n            if(arr[i]==arr[j]):\r\n                continue\r\n            else:\r\n                count+=1\r\n    return count\r\n\r\n\r\n# Driver code\r\nif __name__=='__main__':\r\n    arr = [1,2,3,4,5,6,7,8,9]\r\n    n = len(arr)\r\n    print(count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    #Your code here\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if (arr[i]==arr[j]):\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    \r\n    n = int(input())\r\n    arr = list(map(int,input().split()))\r\n    print(count_Pairs(arr, n))","votes":null},{"text":"\r\n    # your code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    l=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                l+=1\r\n    return l\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,3,4,5,6,6]\r\n    n = len(arr)\r\n    print(count_Pairs(arr,n))","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i!=j and arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr= [5,6,7,8,9,10]\r\nn=len(arr)\r\nprint(count_Pairs(arr,n))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr = [1,1,1,2,2,3,3,4,4]\r\nprint(count_Pairs(arr,len(arr)))\r\n","votes":null},{"text":"\r\n    unequal_pair_count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                unequal_pair_count+=1\r\n    return unequal_pair_count\r\nn=int(input())\r\narr=list(map(int,input().split()))\r\nprint(count_Pairs(arr,n))","votes":null},{"text":"\r\n    s = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i] == arr[j]):\r\n                s+=1\r\n    return s\r\n\r\narr = [1,2,2,3,2,3,4,5,6]\r\nprint(count_Pairs(arr,len(arr)))\r\n\r\n\r\n# 2. Write a python function to print the longest substring with no repeating characters.\r\n\r\n\r","votes":null},{"text":"\r\n    #Your code goes here\r\n    arr.sort()\r\n    count=0\r\n    for i in range(len(arr)-1):\r\n        if(arr[i]==arr[i+1]):\r\n            count+=1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    print(count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    l=[]\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            l.append((arr[i],arr[j]))\r\n    return len(l)\r\n\r\nif __name__ == '__main__':\r\n    n=int(input())\r\n    arr = list(map(int,input().split()))\r\n    print(count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]==arr[j]):\r\n                count=count+1\r\n    return count\r\n\r\nprint(\"Count of unequal pairs is\",count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    arr.sort()\r\n    s = 0\r\n    for i in range(n-1):\r\n        if arr[i]==arr[i+1]:\r\n            s+=1\r\n    return s\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i] == arr[j]):\r\n                count += 1\r\n    return count\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    arr = [2, 1, 2, 2, 3, 5, 6, 7, 8, 10, 11, 12]\r\n    n = len(arr)\r\n    print(count_Pairs(arr,n))\r\n\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                print(\"Pair at indices\",i,j,\"are\",arr[i],arr[j])\r\n    print(\"Total\",n,\"pairs counted\")\r\n    return\r","votes":null},{"text":"\r\n    even = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                even+=1\r\n    return even\r\n\r\nprint(count_Pairs([1, 3, 5, 5, 1, 3], 6))\r\nprint(count_Pairs([1, 2, 3, 4, 5, 6], 6))\r\nprint(count_Pairs([1, 2, 3, 4, 5, 6, 7, 8], 8))\r\nprint(count_Pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\r\nprint(count_Pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 12))","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\ncount_Pairs(arr,n)<jupyter_output><empty_output><jupyter_text>6. Write a python program to find the largest and smallest element in the array.<jupyter_code","votes":null},{"text":"\r\n    count = 0;\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if (arr[i]==arr[j]):\r\n                count+=1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    for i in range(0,n-1):\r\n        if arr[i]!= arr[i+1]:\r\n            return False\r\n    return True\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,2,3,4,5,6,7,8,9]\r\n    n = len(arr)\r\n    print(count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    s=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]>arr[j]):\r\n                s+=1\r\n    return s\r\n\r\narr=input().split()\r\nn=int(arr[0])\r\narr=list(map(int,arr[1].split()))\r\nprint(count_Pairs(arr,n))","votes":null},{"text":"\r\n    # Create a new empty array\r\n    arr1 = []\r\n    # Traverse every element from left to right\r\n    for i in range(0,n):\r\n        # Traverse every element from right to left\r\n        for j in range(i+1,n):\r\n            # If the element at the current index is not equal to its adjacent index\r\n            if arr[i]!= arr[j]:\r\n                # Add element at the current index to empty array\r\n                arr1.append(arr[i])\r\n                # Add element at the adjacent index to empty array\r\n                arr1.append(arr[j])\r\n    # Return the length of the empty array\r\n    return len(arr1)\r\n\r\n# Driver Code\r\narr = [5, 2, 4, 1, 3]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))\r\n\"\"\"\r\nTime Complexity : O(n^2)\r\nSpace Complexity : O(n)\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count+=1\r\n    return count\r\n\r\nprint(count_Pairs(arr,n))","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]==arr[j]):\r\n                count+=1\r\n    return count\r\n\r\n\"\"\"\r\nFunction to implement 2D matrix multiplication\r\n\"\"\"\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\narr=[2,1,2,2,2,2,2,4,1,1,4]\r\nprint(count_Pairs(arr,len(arr)))","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]>arr[j]):\r\n                count=count+1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nn = int(input())\r\narr = list(map(int,input().split()))\r\nprint(count_Pairs(arr,n))","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\nprint(count_Pairs(arr,n))\r\n\"\"\"\r\nTime complexity: O(n^2)\r\nSpace complexity: O(1)\r\n\"\"\"\r\n\r\n\"\"\"\r\nAnother way to solve the same problem is to write a python function to find the sum of the elements of the array and subtract the minimum value from it.\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    count_ = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] == arr[j]:\r\n                count_ += 1\r\n    return count_\r\n\r\n\r\n# Driver Code\r\nn = int(input())\r\narr = list(map(int, input().strip().split()))\r\nprint(count_Pairs(arr, n))\r\n","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nif __name__==\"__main__\":\r\n    t=int(input())\r\n    for i in range(t):\r\n        n=int(input())\r\n        arr=list(map(int,input().split()))\r\n        print(count_Pairs(arr,n))","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i] == arr[j]):\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\r\n    n = len(arr)\r\n    print(count_Pairs(arr, n))","votes":null},{"text":"\r\n    #Write your code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i] == arr[j]):\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 3, 4, 5]\r\n    print(count_Pairs(arr, len(arr)))\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [2, 5, 6, 2, 3, 8, 4, 0]\r\nprint(count_Pairs(arr, 8))","votes":null},{"text":"\r\n    # Your code goes here\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n# Driver code\r\narr=[1,2,3,4,5,6,7,8,9,10]\r\nn=len(arr)\r\n\r\nprint(\"Number of unequal element pairs in given array are:\",count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\nif __name__=='__main__':\r\n    print(count_Pairs([1,1,1,1],4))\r\n    print(count_Pairs([1,1,1,2],4))\r\n    print(count_Pairs([1,1,2,3],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,2,3,4],4))\r\n    print(count_Pairs([1,","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\n                \r\n# Driver code\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\nprint(count_Pairs([2,2,2,2,2,2,2,2,2,2],10))\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return(count)\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nprint(count_Pairs(arr,n))\r\n```\r\n\r\n### Output:\r\n\r\n```\r\n5\r\n```\r\n\r\n\r\n## **Python Program to find the longest increasing subsequence in an array**\r\n\r\n```\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    pairs = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i] == arr[j]):\r\n                pairs += 1\r\n    return pairs\r\n\r\nn = int(input(\"Enter the size of the array: \"))\r\narr = list(map(int,input(\"Enter the elements of the array: \").split()))\r\nprint(count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int,input().split()))\r\n    print(count_Pairs(arr,n))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]+arr[j]==0:\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter the number of elements: '))\r\n    arr = list(map(int,input('Enter the elements of array: ').split()))\r\n    print(count_Pairs(arr,n))","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nif __name__==\"__main__\":\r\n    print(count_Pairs([1,2,2,2,2,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,","votes":null},{"text":"\r\n    count=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]>arr[j]):\r\n                count+=1\r\n    return count\r\narr=[5,12,4,3]\r\nprint(count_Pairs(arr,4))","votes":null},{"text":"\r\n    count=0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1,len(arr)):\r\n            count+=1\r\n    return count\r\n\r\ncount_Pairs([1,2,3,1,2,3],6)\r\n","votes":null},{"text":"\r\n    arr =  list(set(arr))\r\n    #arr = set(arr)\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i]!= arr[j]:\r\n                count += 1\r\n    print(count)\r\n\r\n# Driver Code\r\narr = [1,2,3,4,5,6,7,8,9]\r\nn = len(arr)\r\ncount_Pairs(arr, n)\r\n\r\n# Output\r\n# 4\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i==j:\r\n                continue\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\n```\r\n\r\nThe function will return the count of pairs of elements which are not equal.\r\n\r\n**Time Complexity**: O(n^2)\r\n\r\n**Space Complexity**: O(1)\r\n\r\n**Note**: Please don't raise an issue or send a Pull Request if you find any mistake in the above code or any part of it. I'll be happy to fix it.\r\n\r\nThank you for reading this blog post.\r\nHappy Coding!\r\n<br\/>\r\n\r\n## **References**\r\n\r\n- [GeeksForGeeks - Count unequal element pairs from the given array](https:\/\/www.geeksforgeeks.org\/count-unequal-element-pairs-from-the-given-array\/)\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\nprint(count_Pairs([1,2,3,2,5,2,3,4],7))\r\n```\r\n**Output:**\r\n```\r\n3\r\n```\r\n## **2.4.1. Using Counting Sort**\r\nThe counting sort is an in-place sorting algorithm. It works by counting the number of elements in each bucket and using the counts to place the elements into their correct bucket.\r\nThe algorithm runs in O(n+k) time where n is the number of elements in the array and k is the maximum value in the array.\r\n```\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count = count + 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1,2,2,2,3,3,3,4,4,4,4]\r\n    n = len(arr)\r\n    count = count_Pairs(arr,n)\r\n    print(count)","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                count += 1\r\n    return count\r\nprint(count_Pairs([1, 2, 2, 3, 4, 6], 6))\r\n","votes":null},{"text":"\r\n    pairs=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]<arr[j]):\r\n                pairs+=1\r\n    return pairs\r\n\r\nprint(count_Pairs([1,2,3,4,5],5))","votes":null},{"text":"\r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i] == arr[j]):\r\n                pairs += 1\r\n    print(pairs)\r\n\r\ncount_Pairs([1, 2, 1, 2, 4, 5], 6)\r\n# 2","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i] == arr[j]):\r\n                count += 1\r\n    return count\r\n    \r","votes":null},{"text":"\r\n    #Write your code here\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]==arr[j]):\r\n                count+=1\r\n    return count\r\nprint(count_Pairs(arr, 5))\r\n\"\"\"\r\nTime complexity : O(n^2)\r\nSpace Complexity : O(1)\r\n\"\"\"\r\n##################################\r\n\"\"\"\r\nQues 6:\r\nWrite a python function to check whether an array is sorted.\r\n\"\"\"\r","votes":null}],"time":{"count":24.0,"avg":148015.603,"std":33728.2613127757,"cov":0.2278696342}}
{"id":565,"question":"def split(word):\r\n    \"\"\"Write a python function to split a string into characters.\"\"\"","answers":[{"text":"\r\n    return list(word)\r\n\r\n\r","votes":60456.416},{"text":"\r\n    return list(word)\r\n\r","votes":68365.844},{"text":"\r\n    letters = list(word)\r\n    return letters\r\n\r","votes":78890.428},{"text":"\r\n    return [c for c in word]\r\n\r","votes":79365.756},{"text":"\r\n    return [letter for letter in word]\r\n\r\n# write a function to reverse a sequence of characters\r\n\r","votes":82452.596},{"text":"\r\n    return [char for char in word]\r\n\r","votes":84802.424},{"text":"\r\n    return list(word)\r\n\"\"\"\r\nSplit('The quick brown fox jumps over the lazy dog')\r\n['T', 'h', 'e','', 'q', 'u', 'i', 'c', 'k','', 'b', 'r', 'o', 'n', 'w', 'o', 'n','', 'f', 'o', 'x','', 'j', 'u','m', 'p','s','', 'o', 'v', 'e', 'r','', 't', 'h', 'e','', 'l', 'a', 'z', 'y','', 'd', 'o', 'g']\r\n\"\"\"\r\n\r","votes":86129.572},{"text":"\r\n    return [letter for letter in word]\r\n\r\n\r","votes":91978.388},{"text":"\r\n    return list(word)\r\n\r\n\r\nprint(split(\"This is a sample string\"))\r\n","votes":94952.332},{"text":"\r\n    return [char for char in word]\r\n    \r\nprint(split(\"hello\"))\r\nprint(split(\"world\"))\r\nprint(split(\"how are you\"))\r\nprint(split(\"goodbye\"))\r\n\r\n# split a string into words\r","votes":95728.0},{"text":"\r\n    return [char for char in word]\r\n\r\n\r","votes":97335.312},{"text":"\r\n    return list(word)\r\n\r\n# print(split(\"hello\"))\r\n# print(split(\"world\"))\r\n\r","votes":102595.644},{"text":"\r\n    split_word = []\r\n    for letter in word:\r\n        split_word.append(letter)\r\n    return split_word\r\n\r","votes":103397.732},{"text":"\r\n    return list(word)\r\n\r\n\r\n# print(split(\"Hello\"))\r\n# print(split(\"Hello, World\"))\r\n\r\n\r","votes":104038.316},{"text":"\r\n    # Write your code here\r\n    return list(word)\r\n\r\n\r","votes":105131.98},{"text":"\r\n    # YOUR CODE HERE\r\n    return [c for c in word]\r\n    \r","votes":106275.868},{"text":"\r\n    return list(word)\r\n    \r\nprint(split('hello world'))","votes":107255.952},{"text":"\r\n    return [c for c in word if c.isalpha()]\r\n\r","votes":109376.164},{"text":"\r\n    return list(word)\r\n\r\n# Create a function that returns the reverse of a string\r","votes":111023.664},{"text":"\r\n    return list(word)\r\n\r\nif __name__ == \"__main__\":\r\n    print(split(\"hello world\"))","votes":112113.632},{"text":"\r\n    return [s for s in word]\r\n\r\n\r","votes":113504.316},{"text":"\r\n    characters = []\r\n    for char in word:\r\n        characters.append(char)\r\n    return characters\r\n\r","votes":117524.88},{"text":"\r\n    return list(word)\r\n\r\n# Splitting a string into characters\r\n# This function takes a string and returns the list of characters\r\n# It is a recursive function that will call itself until it reaches the base case\r","votes":120194.888},{"text":"\r\n    return list(word)\r\n\r\n# Write a function that takes two strings as parameters and returns a\r\n# dictionary of the counts of the characters in the two strings.\r","votes":120767.848},{"text":"\r\n    res = []\r\n    for char in word:\r\n        res.append(char)\r\n    return res\r\n\r\n\r","votes":148500.644},{"text":"\r\n    return list(word)\r\n\r\nprint(split(\"python\"))\r\n\r\n# Challenge 2:\r\n# Write a python function to create a list of the digits of a given integer.\r","votes":165151.58},{"text":"\r\n    return word.split()\r\n\r","votes":null},{"text":"\r\n    return word.split()\r\n\r\nprint(split(\"Hello world\"))\r\n\r\n# 1. split a string into words\r","votes":null},{"text":"\r\n    return word.split()\r\n\r\n\r","votes":null},{"text":"\r\n    return word[0] + word[1:]\r\n\r\n# print(split('Hello'))\r\nprint(split('Hello World'))","votes":null},{"text":"\r\n    word = word.replace(' ', '')\r\n    return word\r\n\r","votes":null},{"text":"\r\n    return word\r\n\r\n\r","votes":null},{"text":"\r\n    return [char for char in word]\r\n\r\nprint(split(\"Hello\"))\r\n```\r\n\r\nIf you have any questions, feel free to ask me.\n<issue_comment>username_1: @username_0, you can also use the following to split a string into characters:\r\n```python\r","votes":null},{"text":"\r\n    return word\r\n\r\nif __name__ == \"__main__\":\r\n    print(split(\"Hello World\"))\r\n","votes":null},{"text":"\r\n    return \"\".join(word)\r\n\r","votes":null},{"text":"\r\n    # Split the string into characters\r\n    return word.split()\r\n\r","votes":null},{"text":"\r\n    return word.split()\r\n\r\nword = \"The quick brown fox jumps over the lazy dog.\"\r\nprint(split(word))","votes":null},{"text":"\r\n    return word\r\n\r","votes":null},{"text":"\r\n    return word.split(\" \")\r\n\r","votes":null},{"text":"\r\n    for letter in word:\r\n        print(letter)\r\n\r\nsplit(\"Hello, World!\")\r\n```\r\n\r\n#### Output:\r\n```\r\nHello\r\n,\r\nWorld\r\n!\r\n```","votes":null},{"text":"\r\n    return sorted(word)\r\n\r\n\r","votes":null},{"text":"\r\n    return word.split(\"\")\r\n\r\n\r","votes":null},{"text":"\r\n    return word.split()\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Hi, welcome to the classroom.\")\r\n    print(\"Please enter a word:\")\r\n    word = input()\r\n    print(\"Your word is: \" + word)\r\n    print()\r\n    print(\"The word is divided into:\")\r\n    print(split(word))\r\n    print()\r\n    print(\"In the function split, the string is split into a list of characters.\")\r\n    print()\r\n    print(\"You can also use the split function in the string class:\")\r\n    print(f\"word.split()\")\r\n    print()\r\n    print(\"This will be a list of strings, each of which is a character of the word.\")\r\n    print()\r\n    print(\"You can also split a word into strings, each of which is a character of the word:\")\r\n    print(f\"word.split(' ')\")\r\n    print()\r\n    print(\"This returns a list of strings, each of which is a word.\")\r\n    print()\r\n    print(\"You can also split a word into multiple strings, each of which is a character of the word:\")\r\n    print(f\"word.split('a')\")\r\n    print()\r\n    print(\"This returns a list of strings, each of which is a word.\")\r\n    print()\r\n    print(\"You can also split a word into multiple strings, each of which is a character of the word:\")\r\n    print(f\"word.split('ab')\")\r\n    print()\r\n    print(\"This returns a list of strings, each of which is a word.\")\r\n    print()\r\n    print(\"You can also split a word into multiple strings, each of which is a character of the word:\")\r\n    print(f\"word.split('abc')\")\r\n    print()\r\n    print(\"This returns a list of strings, each of which is a word.\")\r\n    print()\r\n    print(\"You can also split a word into multiple strings, each of which is a character of the word:\")\r\n    print(f\"word.split('abcd')\")\r\n    print()\r\n    print(\"This returns a list of strings, each of which is a word.\")\r\n    print()\r\n    print(\"You can also split a word into multiple strings, each of which is a character of the word:\")\r\n    print(f\"word.split('abcde')\")\r\n    print()\r\n    print(\"This returns a list of strings, each of which is a word.\")\r\n    print()\r\n  ","votes":null},{"text":"\r\n\r\n    return word.split()\r\n\r","votes":null},{"text":"\r\n    return word.split(\" \")\r\n\r\n\r","votes":null},{"text":"\r\n    pass\r\n```\r\n\r\n## Conclusion\r\n\r\n- Importing functions and modules is a process that is very important in python\r\n- A function is a block of code that performs a specific task (think of it as a function in a maths class)\r\n- A module is a collection of functions that you can use in your code\r\n\r\n### Next up\r\n\r\nLet's get back to the main topic of today. I'll talk about how to write a function and why you would want to write a function in python. Next, we will talk about how you can write a function that takes an input and returns an output. We will then talk about how you can write a function that takes multiple inputs and returns an output. Finally, we will talk about how you can write a function that takes multiple inputs and returns multiple outputs.\r\n\r\n## Resources\r\n\r\n- [Python Functions](https:\/\/realpython.com\/python-functions\/)\r\n- [Function Documentation](https:\/\/realpython.com\/documenting-python-code\/)\r\n- [Python Functions with Multiple Arguments](https:\/\/realpython.com\/python-functions-multiple-arguments\/)\r\n","votes":null},{"text":"\r\n    return [char.lower() for char in word]\r\n\r\n\r","votes":null},{"text":"\r\n    return list(word)\r\n\r\n# Tests\r\ntest_cases = [\r\n    ('', []),\r\n    ('a', ['a']),\r\n    ('abc', ['a', 'b', 'c']),\r\n    ('abcde', ['a', 'b', 'c', 'd', 'e']),\r\n    ('abcdefghijklmnopqrstuvwxyz',\r\n     ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\r\n]\r\n\r\nfor test_case in test_cases:\r\n    print(split(test_case[0]) == test_case[1])\r\n```\r\n\r\n* The Python documentation for `split` is available [here](https:\/\/docs.python.org\/3\/library\/stdtypes.html#str.split) and discusses the different ways that you can split a string.  The `test_split` function should be used to test your solution.  It is recommended that you use the `test_cases` list to test your solution.\r\n\r\n* Your function should be called `split`.\r\n\r\n## Test Your Solution\r\n\r\nFollow the instructions in the [README](README.md) to download the test cases for this exercise.  You can run the tests using the command `python3 -m pytest tests.py`.\r\n\r\n## Submitting Exercises\r\n\r\nNote that, when trying to submit an exercise, make sure the solution is in the `exercism\/python\/<exerciseName>` directory.\r\n\r\nFor example, if you're submitting `ubob` for the Python track, the submit command would be something like `exercism submit <path_to_exercism_dir>\/python\/ubob\/ubob.py`.\r\nFor more detailed information about running tests, code style and linting,\r\nplease see the [help page](http:\/\/exercism.io\/languages\/python).\r\n\r\n## Source\r\n\r\nInspired by the Extreme Startup game. [http:\/\/en.wikipedia.org\/wiki\/Extreme_startup](http:\/\/en.wikipedia.org\/wik","votes":null},{"text":"\r\n    word = word.lower()\r\n    return list(word)\r\n\r","votes":null},{"text":"\r\n    return word.split(\"\")\r\n\r\nword = \"Hello, World!\"\r\nprint split(word)\r\nprint split(word)[::-1]\r\n","votes":null},{"text":"\r\n\r\n    # Write your code here.\r\n    return list(word)\r\n\r\n# A word is a string.\r\nword = input(\"Enter a word: \")\r\nprint(f\"The word '{word}' is split into the following letters: {split(word)}\")\r\n\r\n# Another letter is a string.\r\nletter = input(\"Enter a letter: \")\r\nprint(f\"The letter '{letter}' is split into the following characters: {split(letter)}\")\r\n```\r\nThe `split()` function is a built-in function in Python. It splits a string into a list of characters.\r\n\r\n## 11.3.2.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.2.2.1.1.3.3.1.2.2.1.1.3.3.1.2.2.1.1.3.3.1.3.3.1.1.3.3.1.2.2.1.1.3.3.1.2.2.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.3.3.1.1.","votes":null},{"text":"\r\n\r\n    pass\r\n\r\n\r","votes":null},{"text":"\r\n    word = word.upper()\r\n    return word\r\n\r\nword = input(\"Enter a string: \")\r\nprint(split(word))\r\n","votes":null},{"text":"\r\n    word = word.lower()\r\n    word = word.replace(' ', '')\r\n    word = word.split(',')\r\n    return word\r\n\r\n\r","votes":null},{"text":"\r\n    return [char for char in str(word) if char not in string.punctuation]\r\n\r\n\r","votes":null}],"time":{"count":26.0,"avg":102588.8529230769,"std":22398.9187727415,"cov":0.2183367699}}
{"id":566,"question":"def sum_digits(n):\r\n    \"\"\"Write a function to get the sum of a non-negative integer.\"\"\"","answers":[{"text":"\r\n    s = 0\r\n    while n:\r\n        s += n % 10\r\n        n = n \/\/ 10\r\n    return s\r\n\r","votes":52656.94},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r","votes":59794.16},{"text":"\r\n    return sum(map(int, str(n)))\r\n\r","votes":59991.288},{"text":"\r\n    s = 0\r\n    while n:\r\n        s += n % 10\r\n        n \/\/= 10\r\n    return s\r\n\r\n\r","votes":62622.6},{"text":"\r\n    return sum(int(d) for d in str(n))\r\n\r\n\r","votes":68782.624},{"text":"\r\n    # Write your code below this line\r\n    digits = []\r\n    while n > 0:\r\n        digits.append(n % 10)\r\n        n \/\/= 10\r\n    return sum(digits)\r\n\r\n\r","votes":69123.348},{"text":"\r\n    n = str(n)\r\n    sum = 0\r\n    for i in n:\r\n        sum += int(i)\r\n    return sum\r\n\r\n\r","votes":70361.996},{"text":"\r\n\r\n    return sum(map(int, list(str(n))))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_digits(12345))\r\n","votes":70394.872},{"text":"\r\n    return sum(map(int, str(n)))\r\n\r\n\r","votes":70619.464},{"text":"\r\n    s = 0\r\n    while n > 0:\r\n        s += n % 10\r\n        n \/\/= 10\r\n    return s\r\n\r\n\r","votes":72136.316},{"text":"\r\n    return sum(int(d) for d in str(n))\r\n\r\nprint(sum_digits(1331))\r\n","votes":72738.124},{"text":"\r\n    return sum(int(j) for j in str(n))\r\n\r","votes":75668.268},{"text":"\r\n    return sum(list(map(int, str(n))))\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"The entry point of the program.\"\"\"\r\n    print(sum_digits(13579))\r\n","votes":77668.34},{"text":"\r\n    count = 0\r\n    while n:\r\n        count += n % 10\r\n        n \/\/= 10\r\n    return count\r\n\r\n\r","votes":78231.74},{"text":"\r\n    total = 0\r\n    while n > 0:\r\n        total += n % 10\r\n        n \/\/= 10\r\n    return total\r\n\r\n\r","votes":78912.028},{"text":"\r\n    return sum(int(d) for d in str(n))\r\n\r\nprint(sum_digits(123456789012345678901234567890))","votes":79794.404},{"text":"\r\n    return sum([int(d) for d in str(n)])\r\n\r","votes":80121.98},{"text":"\r\n    # your code here\r\n    s = 0\r\n    while n > 0:\r\n        s += n % 10\r\n        n = n \/\/ 10\r\n    return s\r\n\r\n\r","votes":80146.18},{"text":"\r\n    return sum(int(d) for d in str(n))\r\n\r","votes":82033.14},{"text":"\r\n    return sum(map(int, str(n)))\r\n    \r\n\r","votes":83768.908},{"text":"\r\n    return sum(int(i) for i in str(n))\r\n\r\n\r","votes":86144.532},{"text":"\r\n    sum_of_digits = 0\r\n    while n:\r\n        sum_of_digits += n % 10\r\n        n \/\/= 10\r\n    return sum_of_digits\r\n\r\n\r","votes":88251.248},{"text":"\r\n    if n < 0:\r\n        raise ValueError('n must be non-negative')\r\n    if n == 0:\r\n        return 0\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":93939.28},{"text":"\r\n    return sum(int(d) for d in str(n))\r\n\r\nif __name__ == '__main__':\r\n    print(sum_digits(1234))","votes":95847.384},{"text":"\r\n    return sum(list(map(int, str(n))))\r\n\r\n\r","votes":96949.856},{"text":"\r\n\r\n    return sum(list(map(int, str(n))))\r\n\r\n\r","votes":98616.04},{"text":"\r\n    # your code here\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n%10 + sum_digits(n\/\/10)\r\n\r","votes":99191.788},{"text":"\r\n    num = n\r\n    sum = 0\r\n    while num!= 0:\r\n        sum += num % 10\r\n        num \/\/= 10\r\n    return sum\r\n\r\n\r","votes":99477.824},{"text":"\r\n    if n < 0:\r\n        return None\r\n    elif n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":99906.824},{"text":"\r\n    return sum(int(x) for x in str(n))\r\n\r\nif __name__ == \"__main__\":\r\n    \"\"\"Call the function for testing.\"\"\"\r\n    print(sum_digits(1234))\r\n    print(sum_digits(-1234))\r\n    print(sum_digits(1234567890))\r\n    print(sum_digits(0))\r\n    print(sum_digits(2020))\r\n    print(sum_digits(2021))\r\n    print(sum_digits(999999999999999999999999999999999999999999999999999))\r\n","votes":100303.096},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    if n < 0:\r\n        return -sum_digits(-n)\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":101077.188},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return int(n % 10) + sum_digits(n\/\/10)\r\n\r\nprint(sum_digits(375283255))","votes":101676.412},{"text":"\r\n    if not isinstance(n, int):\r\n        raise TypeError(\"n must be an integer\")\r\n    else:\r\n        digits = []\r\n        while n >= 10:\r\n            digits.append(n % 10)\r\n            n = n \/\/ 10\r\n        digits.append(n)\r\n        return sum(digits)\r\n\r\n\r","votes":102479.012},{"text":"\r\n    # sum_digits = 0\r\n    # while n:\r\n    #     sum_digits += n % 10\r\n    #     n \/\/= 10\r\n    # return sum_digits\r\n\r\n    return sum(map(int, str(n)))\r\n\r\n\r","votes":105160.048},{"text":"\r\n    return sum(int(d) for d in list(str(n)))\r\n\r\n\r","votes":105395.148},{"text":"\r\n    digits = []\r\n    while n:\r\n        digits.append(n % 10)\r\n        n = n \/\/ 10\r\n    return sum(digits)\r\n\r\n\r","votes":107371.744},{"text":"\r\n    digits = []\r\n    while n!= 0:\r\n        digits.append(n % 10)\r\n        n = n \/\/ 10\r\n    return sum(digits)\r\n\r\n\r","votes":107511.336},{"text":"\r\n    # write your code here\r\n    return sum(int(c) for c in str(n))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_digits(234))\r\n    print(sum_digits(10))\r\n    print(sum_digits(0))\r\n    print(sum_digits(-1))\r\n    print(sum_digits(123123123123123))\r\n    print(sum_digits(123123123123123.0))\r\n","votes":108927.236},{"text":"\r\n    return sum(int(c) for c in str(n))\r\n\r","votes":110168.184},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n\r","votes":111025.336},{"text":"\r\n    return sum(int(k) for k in str(n))\r\n\r","votes":111069.544},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":111936.308},{"text":"\r\n    return sum(int(d) for d in str(n))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_digits(int(input('Enter a number: '))))\r\n","votes":113513.912},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return (n % 10) + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":115696.656},{"text":"\r\n    digits = []\r\n    while n >= 10:\r\n        digits.append(n % 10)\r\n        n \/\/= 10\r\n    digits.append(n)\r\n    return sum(digits)\r\n\r","votes":117333.62},{"text":"\r\n    return sum(list(map(int, str(n))))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_digits(12345))\r\n    print(sum_digits(-12345))\r\n","votes":118855.872},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return int(str(n)[-1]) + sum_digits(int(str(n)[:-1]))\r\n\r\nprint(sum_digits(1234))\r\n\r\n\"\"\"\r\nWrite a function that takes a list of positive integers and returns the sum of the squares of the integers.\r\n\"\"\"\r\n\r","votes":120085.524},{"text":"\r\n    digits = [int(digit) for digit in str(n)]\r\n    return sum(digits)\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_cases = [\r\n        (123, 6),\r\n        (456, 15),\r\n        (789, 35),\r\n        (-123, 6),\r\n    ]\r\n    for test_case in test_cases:\r\n        assert sum_digits(*test_case) == test_case[1]\r\n","votes":120175.08},{"text":"\r\n    sum_digits = 0\r\n    while n!= 0:\r\n        sum_digits += n % 10\r\n        n = n \/\/ 10\r\n    return sum_digits\r\n\r\n\r","votes":122551.724},{"text":"\r\n    return sum(int(x) for x in str(n))\r\n\r\n\r","votes":126114.46},{"text":"\r\n    digits = []\r\n    while n:\r\n        digits.append(n % 10)\r\n        n \/\/= 10\r\n    digits.sort(reverse=True)\r\n    return sum(digits)\r\n\r\n\r\nif __name__ == '__main__':\r\n    for i in range(1, 1000000):\r\n        if sum_digits(i) == i:\r\n            print(i)\r\n","votes":129539.544},{"text":"\r\n\r\n    return sum(map(int, str(n)))\r\n\r\n\r","votes":130753.324},{"text":"\r\n    summ = 0\r\n    while n > 0:\r\n        summ += n % 10\r\n        n = n \/\/ 10\r\n    return summ\r\n\r\n\r\nprint(sum_digits(987654321))\r\nprint(sum_digits(-123456789))\r\nprint(sum_digits(123456789))","votes":132120.692},{"text":"\r\n    return sum(int(c) for c in str(n))\r\n\r\n\r","votes":134710.268},{"text":"\r\n    return sum(int(digit) for digit in str(n))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_digits(10))\r\n","votes":138475.952},{"text":"\r\n\r\n    # Write your code here.\r\n    return sum(int(d) for d in str(n))\r\n\r\n\r\n# Tests\r\nprint(sum_digits(123))\r\n# Should print 6\r\nprint(sum_digits(1234))\r\n# Should print 10\r\nprint(sum_digits(12345))\r\n# Should print 15\r\n","votes":138543.7},{"text":"\r\n    return sum(list(map(int, str(n))))\r\n\r\nif __name__ == '__main__':\r\n    print(sum_digits(123))\r\n    print(sum_digits(12345))\r\n    print(sum_digits(-123))\r\n    print(sum_digits(9999999999999999999999999999999999))\r\n","votes":149763.48},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nprint(sum_digits(123))\r\nprint(sum_digits(1234))\r\nprint(sum_digits(12345))\r\nprint(sum_digits(123456))\r\nprint(sum_digits(1234567))\r\nprint(sum_digits(12345678))\r\nprint(sum_digits(123456789))\r\nprint(sum_digits(1234567891))","votes":169709.768},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    return sum_digits(n \/\/ 10) + n % 10\r\n\r\nprint(sum_digits(10))\r\nprint(sum_digits(100))\r\nprint(sum_digits(1000))\r\nprint(sum_digits(10000))\r\nprint(sum_digits(100000))\r\n\r\n\"\"\"\r\n    Recursive function\r\n\"\"\"\r","votes":173466.692},{"text":"\r\n    if n < 10:\r\n        return n\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nassert sum_digits(1) == 1\r\nassert sum_digits(10) == 1\r\nassert sum_digits(100) == 1\r\nassert sum_digits(1000) == 1\r\nassert sum_digits(10000) == 1\r\nassert sum_digits(100000) == 1\r\nassert sum_digits(1000000) == 1\r\nassert sum_digits(10000000) == 1\r\nassert sum_digits(100000000) == 1\r\nassert sum_digits(1000000000) == 1\r\nassert sum_digits(10000000000) == 1\r\nassert sum_digits(100000000000) == 1\r\nassert sum_digits(1000000000000) == 1\r\nassert sum_digits(10000000000000) == 1\r\nassert sum_digits(100000000000000) == 1\r\nassert sum_digits(1000000000000000) == 1\r\nassert sum_digits(10000000000000000) == 1\r\nassert sum_digits(100000000000000000) == 1\r\nassert sum_digits(1000000000000000000) == 1\r\nassert sum_digits(10000000000000000000) == 1\r\nassert sum_digits(100000000000000000000) =","votes":null},{"text":"\r\n    return sum(n)\r\n\r\n\r","votes":null},{"text":"\r\n    return n \/\/ 9 + n % 9\r\n\r","votes":null},{"text":"\r\n    return str(sum(int(d) for d in str(n)))\r\n\r\nprint(sum_digits(123))\r\n","votes":null},{"text":"\r\n    # Sum of the digits\r\n    digit_sum = 0\r\n    # Get the digits of the number\r\n    digits = list(map(int, str(n)))\r\n    # Loop through the digits\r\n    for i in range(len(digits)):\r\n        # Add the digit to the sum\r\n        digit_sum += digits[i]\r\n    # Return the sum of the digits\r\n    return digit_sum\r\n\r\n\r\nassert sum_digits(15) == 1, \"15 is not 1\"\r\nassert sum_digits(1234) == 10, \"1234 is not 10\"\r\nprint(\"All tests passed!\")","votes":null},{"text":"\r\n    return n \/\/ 10 + n % 10\r\n\r\nsum_digits(1234)\r\nsum_digits(0)\r\nsum_digits(10)\r\nsum_digits(-10)\r\nsum_digits(10000000000000000000)\r\nsum_digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    if n < 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":null},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\nprint(sum_digits(921))\r\nprint(sum_digits(129))\r\nprint(sum_digits(111))\r\n```\r\n\r\nThe output is:\r\n```\r\n21\r\nTraceback (most recent call last):\r\n  File \"sum_digits.py\", line 11, in <module>\r\n    print(sum_digits(921))\r\nTypeError: 'float' object cannot be interpreted as an integer\r\n```\r\n\r\nSo the result of `sum_digits(921)` is `21.0`. The sum of 9 and 21 is 21. We can check that `921 \/\/ 10` is `9` and `9 \/\/ 10` is `0`.\r\n\r\nThe problem is that when the input is a float, the output is a float. This is because we get the result of `9 \/\/ 10` as a float.\r\n\r\nThe correct solution is to convert the input to an integer before doing the division. Since the input is an integer, the result will be an integer.\r\n\r\n```python\r","votes":null},{"text":"\r\n    return n + int(str(n)[-1])\r\n\r\nprint(sum_digits(13))\r\nprint(sum_digits(-1))\r\nprint(sum_digits(0))\r\nprint(sum_digits(10))\r\n```\r\n\r\nThe output is:\r\n\r\n```\r\n14\r\n0\r\n1\r\n11\r\n```\r\n\r\n---\r\n\r\n### Exercise 2:\r\n\r\nWrite a function that takes a string and returns the string reversed.\r\n\r\nFor example, if the input is\r\n\r\n```\r\n'Hello'\r\n```\r\n\r\nThen the output should be:\r\n\r\n```\r\n'olleH'\r\n```\r\n\r\n---\r\n\r\n### Exercise 3:\r\n\r\nWrite a function that takes two numbers as input and returns the sum of their digits.\r\n\r\nFor example, if the inputs are:\r\n\r\n```\r\n1, 3\r\n2, 4\r\n```\r\n\r\nThen the output should be:\r\n\r\n```\r\n7\r\n1\r\n```\r\n\r\n---\r\n\r\n### Exercise 4:\r\n\r\nWrite a function that takes one or more numbers and returns the sum of all numbers.\r\n\r\nFor example, if the inputs are:\r\n\r\n```\r\n1, 3\r\n2, 4\r\n```\r\n\r\nThen the output should be:\r\n\r\n```\r\n7\r\n11\r\n```\r\n\r\n---\r\n\r\n### Exercise 5:\r\n\r\nWrite a function that takes a string and returns a list containing all the vowels in the string.\r\n\r\nFor example, if the input is:\r\n\r\n```\r\n'Hello'\r\n```\r\n\r\nThen the output should be:\r\n\r\n```\r\n['e', 'h', 'l', 'o']\r\n```\r\n\r\n---\r\n\r\n### Exercise 6:\r\n\r\nWrite a function that takes a string and returns a list containing all the consonants in the string.\r\n\r\nFor example, if the input is:\r\n\r\n```\r\n'Hello'\r\n```\r\n\r\nThen the output should be:\r\n\r\n```\r\n['H', 'e', 'l', 'l', 'o']\r\n```\r\n\r\n---\r\n\r\n### Exercise 7:\r\n\r\nWrite a function that takes a string and returns a list containing all the letters in th","votes":null},{"text":"\r\n    return sum(int(d) for d in str(n))\r\n\r\n\r\nassert sum_digits(0) == 0\r\nassert sum_digits(1) == 1\r\nassert sum_digits(10) == 1\r\nassert sum_digits(100) == 1\r\nassert sum_digits(1000) == 1\r\nassert sum_digits(10000) == 2\r\nassert sum_digits(100000) == 6\r\nassert sum_digits(1000000) == 6\r\nassert sum_digits(10000000) == 20\r\nassert sum_digits(100000000) == 60\r\nassert sum_digits(1000000000) == 60\r\nassert sum_digits(10000000000) == 200\r\nassert sum_digits(100000000000) == 600\r\nassert sum_digits(1000000000000) == 600\r\nassert sum_digits(10000000000000) == 2000\r\nassert sum_digits(100000000000000) == 6000\r\nassert sum_digits(1000000000000000) == 6000\r\nassert sum_digits(10000000000000000) == 20000\r\nassert sum_digits(100000000000000000) == 60000\r\nassert sum_digits(1000000000000000000) == 60000\r\nassert sum_digits(10000000000000000000) == 20","votes":null},{"text":"\r\n    if n < 10:\r\n        return n\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n```\r\n\r\n### 4. \u9898\u76ee\r\n\r\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8ba1\u7b97\u8f93\u5165\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u4f8b\u5982\uff1a\u8f93\u51653\uff0c\u8f93\u51fa1\u3002\r\n\r\n### 5. \u9898\u76ee\r\n\r\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff08\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09\uff0c\u8f93\u51fa\u8be5\u6570\u5404\u4f4d\u6570\u5b57\u4e4b\u548c\uff0c\u4f8b\u5982\uff1a\u8f93\u51653\uff0c\u8f93\u51fa1\u3002\r\n\r\n### 6. \u9898\u76ee\r\n\r\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff08\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09\uff0c\u8f93\u51fa\u8be5\u6570\u5404\u4f4d\u6570\u5b57\u4e4b\u79ef\uff0c\u4f8b\u5982\uff1a\u8f93\u51653\uff0c\u8f93\u51fa3\u3002\r\n\r\n### 7. \u9898\u76ee\r\n\r\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165 n\uff0c\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\uff08Fibonacci\uff09\u6570\u5217\u7684\u7b2cn\u9879\u3002\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\r\n\r\n- F(0) = 0\uff0cF(1) = 1\r\n- F(N) = F(N-1) + F(N-2)\uff08N>1\uff09\r\n\r\n### 8. \u9898\u76ee\r\n\r\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002\u4f8b\u5982\uff0c\u5f53\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a \"abaccdeff\" \u65f6\uff0c\u51fd\u6570\u8fd4\u56de \"a\"\u3002\r\n\r\n### 9. \u9898\u76ee\r\n\r\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8f93\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u3002\u4f8b\u5982\uff1a\u8f93\u5165 \"abaccdeff\"\uff0c\u8f93\u51fa 5\u3002\r\n\r\n### 10. \u9898\u76ee\r\n\r\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff08\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09\uff0c\u8f93\u51fa\u8be5\u6570\u7684\u5341\u516d\u8fdb\u5236\u8868\u793a\u3002\u4f8b\u5982\uff1a\u8f93\u5165 3\uff0c\u8f93\u51fa \"0x3\"\u3002\r\n\r\n### 11. \u9898\u76ee\r\n\r\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8f93\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u3002\u4f8b\u5982\uff1a\u8f93\u5165 \"abaccdeff\"\uff0c\u8f93\u51fa 5\u3002\r\n\r\n### 12. \u9898\u76ee\r\n\r\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff08\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09\uff0c\u8f93\u51fa\u8be5\u6570\u7684\u5341\u516d\u8fdb\u5236\u8868\u793a\u3002\u4f8b\u5982\uff1a\u8f93\u5165 3\uff0c\u8f93\u51fa \"0x3\"\u3002\r\n\r\n### 13. \u9898\u76ee\r\n\r\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff08\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09\uff0c\u8f93\u51fa\u8be5\u6570","votes":null},{"text":"\r\n    return sum(map(lambda x: x, str(n)))\r\n\r\n\r","votes":null},{"text":"\r\n    return (n \/\/ 10) + n % 10\r\n\r\n\r","votes":null},{"text":"\r\n    return 1 if n < 10 else n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":null},{"text":"\r\n    if n < 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n\/\/10)\r\n\r\n\r","votes":null},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n# tests\r\nprint(sum_digits(0))\r\nprint(sum_digits(123))\r\nprint(sum_digits(4567890))\r\n```\r\n\r\nI'm not sure if this is the best way to do it, but it works. If I had more time, I'd try this: https:\/\/stackoverflow.com\/questions\/17178118\/how-to-add-digits-in-python\r\n\r\nI'm also not sure if we should add this to the library. I think it would be nice to have a function like this, so I'm not sure how many people would use it.\n<issue_comment>username_0: I found an even better way to do this!\r\n\r\n```python\r","votes":null},{"text":"\r\n    return sum(int(x) for x in str(n))\r\n\r\n# test\r\nprint(sum_digits(456))\r\n```","votes":null},{"text":"\r\n    return n + sum(int(d) for d in str(n))\r\n\r\nprint(sum_digits(13))\r\nprint(sum_digits(-1))\r\n","votes":null},{"text":"\r\n    return sum(int(d) for d in str(n))\r\n\r\nprint(sum_digits(123456))\r\nprint(sum_digits(-123456))\r\nprint(sum_digits(123))\r\nprint(sum_digits(0))\r\nprint(sum_digits(12345678901234567890))","votes":null},{"text":"\r\n    return sum(str(n))\r\n\r","votes":null},{"text":"\r\n    if n < 0:\r\n        return 0\r\n    return n % 9 + sum_digits(n \/\/ 9)\r\n\r\n\r","votes":null},{"text":"\r\n    if n < 0:\r\n        raise ValueError\r\n    return int(str(n)[-1]) + sum_digits(int(str(n)[:-1]))\r\n\r\n\r","votes":null},{"text":"\r\n    return n if n >= 10 else n + sum_digits(n)\r\n\r\n\r","votes":null},{"text":"\r\n    if n < 0:\r\n        return\r\n    return sum_digits(n\/\/10) + n%10\r\n\r\nassert sum_digits(0) == 0\r\nassert sum_digits(1) == 1\r\nassert sum_digits(123) == 6\r\nassert sum_digits(1234) == 15\r\nassert sum_digits(12345) == 15\r\nassert sum_digits(123456) == 27\r\nassert sum_digits(1234567) == 27\r\nassert sum_digits(12345678) == 32\r\nassert sum_digits(123456789) == 32\r\nassert sum_digits(1234567890) == 40\r\nassert sum_digits(12345678901) == 40\r\nassert sum_digits(123456789012) == 57\r\nassert sum_digits(1234567890123) == 57\r\nassert sum_digits(12345678901234) == 89\r\nassert sum_digits(123456789012345) == 89\r\nassert sum_digits(1234567890123456) == 145\r\nassert sum_digits(12345678901234567) == 145\r\nassert sum_digits(123456789012345678) == 234\r\nassert sum_digits(1234567890123456789) == 234\r\nassert sum_digits(12345678901234567890) == 357\r\n","votes":null},{"text":"\r\n    return 0 if n < 0 else int(str(n).replace('-', '').replace('0', '').replace('1', ''))\r\n\r\n\r\nprint(sum_digits(123))\r\nprint(sum_digits(12345))\r\nprint(sum_digits(-123))\r\nprint(sum_digits(0))\r\n```\r\n\r\n### Expected output:\r\n```\r\n6\r\n15\r\n4\r\n0\r\n```\r\n\r\n### Actual output:\r\n```\r\n1\r\n1\r\n4\r\n0\r\n```\r\n\r\n### Detailed explanation:\r\n```python\r","votes":null},{"text":"\r\n    return sum(int(d) for d in str(n))\r\n\r\nprint(sum_digits(1234567890))\r\n```\r\nThis is the error I get:\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\user\\Desktop\\Python\\sum_digits.py\", line 13, in <module>\r\n    print(sum_digits(1234567890))\r\n  File \"C:\\Users\\user\\Desktop\\Python\\sum_digits.py\", line 8, in sum_digits\r\n    return sum(int(d) for d in str(n))\r\nValueError: invalid literal for int() with base 10: '1'\r\n```\r\nI'm not sure why the int needs to be converted to a string or why it would be able to run the code if I didn't convert the input to a string.\n<issue_comment>username_1: The error is because the function `sum_digits` is not taking a single argument. The function `sum_digits` expects `n` to be passed in as an argument. \r\n\r\nTry this:\r\n```python\r","votes":null}],"time":{"count":59.0,"avg":100667.8365423729,"std":26480.5286043882,"cov":0.2630485517}}
{"id":567,"question":"def issort_list(list1):\r\n    \"\"\"Write a function to check whether a specified list is sorted or not.\"\"\"","answers":[{"text":"\r\n    for idx in range(len(list1) - 1):\r\n        if list1[idx] > list1[idx + 1]:\r\n            return False\r\n    return True\r\n\r","votes":88242.36},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n\r\n    return True\r\n\r","votes":92391.584},{"text":"\r\n    if len(list1) <= 1:\r\n        return True\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i-1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":92428.928},{"text":"\r\n    i = 0\r\n    while i < len(list1) - 1:\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n        i += 1\r\n    return True\r\n\r\n\r","votes":93182.392},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i-1] > list1[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":95038.012},{"text":"\r\n    if list1 == sorted(list1):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":97564.484},{"text":"\r\n    if len(list1) <= 1:\r\n        return True\r\n    if list1[0] <= list1[1]:\r\n        return issort_list(list1[1:])\r\n    else:\r\n        return False\r\n\r\n\r","votes":97883.228},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":101239.852},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i - 1] > list1[i]:\r\n            return False\r\n    return True\r\n\r","votes":101864.516},{"text":"\r\n    flag = 1\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            flag = 0\r\n            break\r\n    return flag\r\n\r\n\r","votes":102841.756},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":103882.42},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":104248.996},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r","votes":104351.132},{"text":"\r\n    for i in range(1,len(list1)):\r\n        if list1[i] < list1[i-1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":111660.14},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":111848.416},{"text":"\r\n    if len(list1) <= 1:\r\n        return True\r\n    else:\r\n        for i in range(0, len(list1) - 1):\r\n            if list1[i] > list1[i + 1]:\r\n                return False\r\n        return True\r\n\r\n\r","votes":112148.316},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n# \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\r","votes":112262.096},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":113009.092},{"text":"\r\n    flag = True\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i - 1]:\r\n            flag = False\r\n            break\r\n    return flag\r\n\r\n\r","votes":114121.748},{"text":"\r\n    if len(list1) > 1:\r\n        if list1[0] <= list1[1]:\r\n            issorted = True\r\n            for i in range(1, len(list1)):\r\n                if list1[i] < list1[i - 1]:\r\n                    issorted = False\r\n                    break\r\n        elif list1[0] > list1[1]:\r\n            issorted = False\r\n    else:\r\n        issorted = True\r\n    return issorted\r\n\r\n\r","votes":117114.292},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i-1] > list1[i]:\r\n            return False\r\n    return True\r\n\r","votes":118555.356},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i]<list1[i-1]:\r\n            return False\r\n    return True\r\n\r","votes":119400.904},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(issort_list(list1))\r\n\r\nlist2 = [1, 2, 3]\r\nprint(issort_list(list2))\r\n\r\nlist3 = [1, 2, 3, 4, 5, 6, 7]\r\nprint(issort_list(list3))\r\n","votes":119467.476},{"text":"\r\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\r\n\r\n\r","votes":120017.612},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i - 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":120308.608},{"text":"\r\n    for i in range(1,len(list1)):\r\n        if list1[i-1]>list1[i]:\r\n            return False\r\n    return True\r\n\r","votes":122007.976},{"text":"\r\n    if list1 == sorted(list1):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":122377.528},{"text":"\r\n    list_copy = list1.copy()\r\n    for i in range(len(list_copy)):\r\n        if i > 0 and list_copy[i] < list_copy[i-1]:\r\n            return False\r\n    return True\r\n\r","votes":122463.456},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i-1]:\r\n            return False\r\n    return True\r\n\r\nif __name__ == \"__main__\":\r\n    main()","votes":122858.236},{"text":"\r\n    for index in range(1, len(list1)):\r\n        if list1[index - 1] > list1[index]:\r\n            return False\r\n    return True\r\n\r","votes":124396.208},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i - 1] > list1[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":128636.292},{"text":"\r\n    temp = list1\r\n    for i in range(1, len(temp)):\r\n        if temp[i] < temp[i-1]:\r\n            return False\r\n    return True\r\n\r\nl = []\r\nfor i in range(1, 100):\r\n    if i % 3 == 0:\r\n        l.append(i)\r\nprint(issort_list(l))","votes":130140.684},{"text":"\r\n    if len(list1) == 0 or len(list1) == 1:\r\n        return True\r\n    else:\r\n        return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\r\n\r\n\r","votes":131795.676},{"text":"\r\n    # Write your code here\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":134857.58},{"text":"\r\n    if list1:\r\n        for i in range(len(list1) - 1):\r\n            if list1[i] > list1[i + 1]:\r\n                return False\r\n    return True\r\n\r\n\r","votes":139022.432},{"text":"\r\n    if len(list1) <= 1:\r\n        return True\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":139547.888},{"text":"\r\n    is_sorted = True\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            is_sorted = False\r\n            break\r\n    return is_sorted\r\n\r\n\r","votes":141213.748},{"text":"\r\n    issorted = True\r\n    for i in range(1, len(list1)):\r\n        if (list1[i-1] > list1[i]):\r\n            issorted = False\r\n            break\r\n    return issorted\r\n\r","votes":141734.516},{"text":"\r\n    if len(list1) == 1:\r\n        return True\r\n    else:\r\n        return sorted(list1) == list1\r\n\r\n\r","votes":141962.376},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(issort_list(list1))\r\n    list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\r\n    print(issort_list(list2))\r\n    list3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(issort_list(list3))\r\n    list4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\r\n    print(issort_list(list4))\r\n","votes":144138.328},{"text":"\r\n    for index in range(1, len(list1)):\r\n        if list1[index - 1] > list1[index]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":144825.78},{"text":"\r\n\r\n    if not list1:\r\n        return True\r\n\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i - 1]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":149032.024},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]: return False\r\n    return True\r\n\r","votes":149183.28},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":150584.888},{"text":"\r\n    for i in range(1,len(list1)):\r\n        if list1[i] < list1[i-1]:\r\n            return False\r\n    return True\r","votes":151045.132},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i+1] < list1[i]:\r\n            return False\r\n    return True\r","votes":152448.688},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if(list1[i] > list1[i+1]):\r\n            return False\r\n    return True\r\n\r\n\r","votes":152950.632},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    list1 = [1, 2, 3, 4, 5]\r\n    print(issort_list(list1))\r\n","votes":154345.448},{"text":"\r\n    if list1 == sorted(list1):\r\n        return True\r\n    else:\r\n        return False","votes":160521.588},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if (list1[i] > list1[i+1]):\r\n            return False\r\n    return True\r\n\r\n# write your code here\r\nlist1 = [1,2,3,4,5]\r\nprint(issort_list(list1))\r\nlist2 = [4,5,3,2,1]\r\nprint(issort_list(list2))\r\nlist3 = [1,2,3,4,5,4,5,3,2,1]\r\nprint(issort_list(list3))\r\nlist4 = [2,3,4,5,4,5,3,2,1]\r\nprint(issort_list(list4))\r\nlist5 = [1,2,3,4,5,4,5,3,2,1,6]\r\nprint(issort_list(list5))\r\nlist6 = [1,2,3,4,5,4,5,3,2,1,6,4]\r\nprint(issort_list(list6))\r\nlist7 = [1,2,3,4,5,4,5,3,2,1,6,4,5]\r\nprint(issort_list(list7))","votes":176708.556},{"text":"\r\n    for index in range(len(list1)-1):\r\n        if list1[index] > list1[index+1]:\r\n            return False\r\n    return True\r\n\r","votes":178535.832},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if (list1[i] > list1[i+1]):\r\n            return False\r\n    return True\r\n\r","votes":180062.544},{"text":"\r\n    return list1 == sorted(list1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # test 1\r\n    list1 = [2, 7, 3, 9, 10]\r\n    print(\"Test 1: \")\r\n    print(issort_list(list1))\r\n\r\n    # test 2\r\n    list2 = [0, 1, 2, 3, 4, 5]\r\n    print(\"Test 2: \")\r\n    print(issort_list(list2))\r\n\r\n    # test 3\r\n    list3 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(\"Test 3: \")\r\n    print(issort_list(list3))\r\n\r\n    # test 4\r\n    list4 = [1, 10, 3, 1, 10, 3, 1, 10, 3, 1]\r\n    print(\"Test 4: \")\r\n    print(issort_list(list4))\r\n\r\n    # test 5\r\n    list5 = [1, 10, 3, 1, 10, 3, 1, 10, 3, 1, 10]\r\n    print(\"Test 5: \")\r\n    print(issort_list(list5))\r\n\r\n    # test 6\r\n    list6 = [1, 10, 3, 1, 10, 3, 1, 10, 3, 1, 10, 3]\r\n    print(\"Test 6: \")\r\n    print(issort_list(list6))\r\n\r\n    # test 7\r\n    list7 = [1]\r\n    print(\"Test 7: \")\r\n    print(issort_list(list7))\r\n\r\n    # test 8\r\n    list8 = [1, 10, 3, 1, 10, 3, 1, 10, 3, 1, 10, 3, 1]\r\n    print(\"Test 8: \")\r\n    print(issort_list(list8))\r\n","votes":184932.128},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n# write a function to check whether the list is a palindrome or not\r","votes":186011.836},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i-1]:\r\n            return False\r\n    return True\r\n\r","votes":197569.796},{"text":"\r\n    flag = True\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i - 1]:\r\n            flag = False\r\n            break\r\n    return flag\r\n\r\n\r\nif __name__ == '__main__':\r\n    # This is an example of how to create a list of lists and how to sort each list separately\r\n    # List of lists\r\n    list1 = [['name1', 'name2', 'name3'], ['name4', 'name5', 'name6'], ['name7', 'name8', 'name9']]\r\n    print(issort_list(list1[0]))\r\n\r\n    # Sort each list separately\r\n    list2 = [issort_list(list1[0]), issort_list(list1[1]), issort_list(list1[2])]\r\n    print(list2)\r\n\r\n    # Sort whole list of lists\r\n    list3 = issort_list(list1)\r\n    print(list3)\r\n","votes":311938.408},{"text":"\r\n    if list1 == sorted(list1):\r\n        print(\"Is sorted.\")\r\n    else:\r\n        print(\"Is not sorted.\")\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort()\r\n    if list1 == list(range(len(list1))):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    for index, value in enumerate(list1):\r\n        if value < list1[index-1]:\r\n            return False\r\n    return True\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n# Driver code\r\nlist1 = [2, 3, 4, 1, 5]\r\n# print(issorted(list1))\r\nif issorted(list1):\r\n    print(\"List is sorted\")\r\nelse:\r\n    print(\"List is not sorted\")\r\n\r\nlist2 = [1, 2, 3, 4, 5]\r\nif issorted(list2):\r\n    print(\"List is sorted\")\r\nelse:\r\n    print(\"List is not sorted\")\r\n# This code is contributed by <NAME>\r\n","votes":null},{"text":"\r\n    if list1 == sorted(list1):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Test cases\r\nif __name__ == '__main__':\r\n    # test_print('aaa')\r\n    # test_print(123)\r\n    # test_print(123.4)\r\n    # test_print(True)\r\n    # test_print(False)\r\n    # test_print(None)\r\n    # test_print(None)\r\n    # test_print({'a': 1})\r\n    # test_print([1, 2, 3])\r\n    # test_print(list(range(1, 10)))\r\n    # test_print(list(range(1, 100)))\r\n    # test_print(list(range(1, 1000)))\r\n    # test_print(list(range(1, 10000)))\r\n    # test_print(list(range(1, 100000)))\r\n    # test_print(list(range(1, 1000000)))\r\n    # test_print(list(range(1, 10000000)))\r\n    # test_print(list(range(1, 100000000)))\r\n    # test_print(list(range(1, 1000000000)))\r\n    # test_print(list(range(1, 10000000000)))\r\n    # test_print(list(range(1, 100000000000)))\r\n    # test_print(list(range(1, 1000000000000)))\r\n    # test_print(list(range(1, 10000000000000)))\r\n    # test_print(list(range(1, 100000000000000)))\r\n    # test_print(list(range(1, 1000000000000000)))\r\n    # test_print(list(range(1, 1000000","votes":null},{"text":"\r\n    if len(list1) == 0:\r\n        return True\r\n    if list1[0] <= list1[1] and issort_list(list1[1:]):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i-1] > list1[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(1,len(list1)):\r\n        if list1[i-1]>list1[i]:\r\n            return False\r\n    return True\r\nprint(issort_list([1,2,3,4]))\r\nprint(issort_list([1,2,3]))\r\nprint(issort_list([1,2,1]))\r\nprint(issort_list([1,2,3,4,5]))\r\nprint(issort_list([1,2]))\r\nprint(issort_list([1,2,3,4,5,6]))\r\nprint(issort_list([1,2,3,4,5,6,7]))\r\nprint(issort_list([1,2,3,4,5,6,7,8]))\r\nprint(issort_list([1,2,3,4,5,6,7,8,9]))\r\nprint(issort_list([1,2,3,4,5,6,7,8,9,10]))\r\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11]))\r\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12]))\r\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13]))\r\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\r\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\r\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\r\nprint(issor","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1) == 1:\r\n        return True\r\n    if list1[1] > list1[0]:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null}],"time":{"count":56.0,"avg":132730.7714285714,"std":36189.6629408739,"cov":0.2726546569}}
{"id":568,"question":"def empty_list(length):\r\n    \"\"\"Write a function to create a list of empty dictionaries.\"\"\"","answers":[{"text":"\r\n    return [{} for _ in range(length)]\r\n\r","votes":68073.712},{"text":"\r\n    return [dict() for i in range(length)]\r\n\r\n\r","votes":74126.488},{"text":"\r\n    return [{} for _ in range(length)]\r\n\r\n\r","votes":78422.86},{"text":"\r\n    return [{} for _ in range(length)]\r\n\r\n# write a function to create a list of dictionaries\r","votes":81758.1},{"text":"\r\n    return [{} for x in range(length)]\r\n\r\n\r","votes":86187.456},{"text":"\r\n    return [{} for _ in range(length)]\r\n\r\n\r\n# -\r\n\r\n# ### 2.2 \u5408\u5e76\u6570\u636e\r\n#\r\n# 1. \u5408\u5e76\u4e24\u4e2a\u5217\u8868\r\n# 2. \u5408\u5e76\u4e24\u4e2a\u5b57\u5178\r\n# 3. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\r\n# 4. \u5408\u5e76\u4e24\u4e2a\u5217\u8868\u6216\u5b57\u5178\r\n# 5. \u5408\u5e76\u4e24\u4e2a\u5217\u8868\u6216\u5b57\u5178\uff08\u4e8c\uff09\r\n# 6. \u5408\u5e76\u5b57\u5178\r\n# 7. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e8c\uff09\r\n# 8. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e09\uff09\r\n# 9. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u56db\uff09\r\n# 10. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e94\uff09\r\n# 11. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u516d\uff09\r\n# 12. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e03\uff09\r\n# 13. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u516b\uff09\r\n# 14. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e5d\uff09\r\n# 15. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u5341\uff09\r\n# 16. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u5341\u4e00\uff09\r\n# 17. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u5341\u4e8c\uff09\r\n# 18. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u5341\u4e09\uff09\r\n# 19. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u5341\u56db\uff09\r\n# 20. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u5341\u4e94\uff09\r\n# 21. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u5341\u516d\uff09\r\n# 22. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u5341\u4e03\uff09\r\n# 23. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u5341\u516b\uff09\r\n# 24. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u5341\u4e5d\uff09\r\n# 25. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e8c\u5341\uff09\r\n# 26. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e8c\u5341\u4e00\uff09\r\n# 27. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e8c\u5341\u4e8c\uff09\r\n# 28. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e8c\u5341\u4e09\uff09\r\n# 29. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e8c\u5341\u56db\uff09\r\n# 30. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e8c\u5341\u4e94\uff09\r\n# 31. \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u5178\uff08\u4e8c\u5341\u516d\uff09\r\n# 32. \u5c06\u5217","votes":89708.556},{"text":"\r\n    return [{} for i in range(length)]\r\n\r","votes":89779.64},{"text":"\r\n\r\n    # Initialize an empty list of dictionaries\r\n    my_list = []\r\n\r\n    # Create a dictionary using the key-value pairs\r\n    #   my_dict = {key1: value1, key2: value2,...}\r\n    for i in range(length):\r\n        my_list.append({})\r\n\r\n    return my_list\r\n\r\n\r","votes":90493.012},{"text":"\r\n    return([{} for _ in range(length)])\r\n\r","votes":98230.772},{"text":"\r\n    return [{} for i in range(length)]\r\n\r\n\r\nclass ListManager:\r\n    \"\"\"ListManager class for managing lists of items.\r\n\r\n    This class is used to create a list of items. It allows for easy\r\n    manipulation of the items in the list.\r\n    \"\"\"\r\n\r\n   ","votes":98875.268},{"text":"\r\n    return [{} for i in range(length)]\r\n\r\n\r","votes":100652.66},{"text":"\r\n    result = []\r\n    for i in range(length):\r\n        result.append({})\r\n    return result\r\n\r\n\r","votes":104560.6},{"text":"\r\n    list_of_dicts = []\r\n    for i in range(length):\r\n        list_of_dicts.append({})\r\n    return list_of_dicts\r\n\r\n\r","votes":109103.172},{"text":"\r\n    return [dict() for _ in range(length)]\r\n\r\n\r","votes":111013.936},{"text":"\r\n    # Fill in this function to return list of empty dictionaries\r\n    # with the given length.\r\n    #\r\n    # >>> empty_list(2)\r\n    # [{'value': 'None'}, {'value': 'None'}]\r\n    #\r\n    # >>> empty_list(3)\r\n    # [{'value': 'None'}, {'value': 'None'}, {'value': 'None'}]\r\n    return [{} for _ in range(length)]\r\n\r\n\r","votes":113551.512},{"text":"\r\n    list = [{}] * length\r\n    return list\r\n\r\n\r","votes":114869.904},{"text":"\r\n    list_of_dicts = []\r\n    for _ in range(length):\r\n        list_of_dicts.append({})\r\n    return list_of_dicts\r\n\r","votes":115138.536},{"text":"\r\n    new_list = []\r\n    for i in range(length):\r\n        new_list.append({})\r\n    return new_list\r\n\r","votes":115447.016},{"text":"\r\n    return [{}] * length\r\n\r\n\r","votes":116357.736},{"text":"\r\n    empty_list = []\r\n    for _ in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n\r","votes":116594.96},{"text":"\r\n    new_list = []\r\n    for i in range(length):\r\n        new_list.append({})\r\n    return new_list\r\n\r\n\r","votes":118390.748},{"text":"\r\n    return [{} for i in range(length)]\r\n\r\n\r\n# Write a function to create a list of lists of tuples\r","votes":118948.208},{"text":"\r\n    lst = []\r\n    for i in range(length):\r\n        lst.append({})\r\n    return lst\r\n\r\n\r","votes":140541.208},{"text":"\r\n    return [{}] * length\r\n\r","votes":142451.984},{"text":"\r\n    return [{} for x in range(length)]\r\n\r","votes":151949.376},{"text":"\r\n    results = []\r\n    for _ in range(length):\r\n        results += [{}]\r\n    return results\r\n\r\n\r","votes":158780.28},{"text":"\r\n    \"\"\"It should return an empty list.\"\"\"\r\n    return [{} for i in range(length)]\r\n\r\n\r","votes":192325.432},{"text":"\r\n    return [{\r\n        'id': id,\r\n        'name': 'empty',\r\n        'url': 'empty',\r\n        'title': 'empty',\r\n        'description': 'empty',\r\n        'keywords': 'empty',\r\n        'thumbnail': 'empty',\r\n        'author': 'empty',\r\n        'author_url': 'empty',\r\n        'license': 'empty',\r\n        'license_url': 'empty',\r\n        'date_published': 'empty',\r\n        'date_modified': 'empty',\r\n        'content_size': 'empty',\r\n        'is_open_access': 'empty',\r\n        'is_indexed': 'empty',\r\n        'is_in_top_list': 'empty',\r\n    } for id in range(length)]\r\n\r\n\r","votes":null},{"text":"\r\n    return [{} for _ in range(length)]\r\n```\r\n\r\nI've seen this pattern in other languages before, but I'm not sure how to apply it here.\n<issue_comment>username_1: This is a great idea. I've implemented it in the new `main` branch.\r\n\r\n```python\r\nfrom typing import List\r\n\r","votes":null},{"text":"\r\n    return [{} for _ in range(length)]\r\n\r\n# Create empty list of dictionaries\r\nd = empty_list(10)\r\n\r\n# Access the first element in the list\r\nprint(d[0])\r\n# {'a': 1, 'b': 2}\r\n```\r\n\r\n```python\r\n# Write a function that takes a list of numbers and returns the average of the numbers in the list.\r","votes":null},{"text":"\r\n    return [{} for _ in range(length)]\r\n```\r\n\r\nThe test will run, but the output will be empty. I'm guessing it's because I'm not returning anything from the function, but I'm not sure how to fix it.\n<issue_comment>username_1: Your function is returning `[]`, which is a list of empty dictionaries. You want the empty dictionary. Try this:\r\n\r\n```python\r","votes":null}],"time":{"count":27.0,"avg":110975.3011851852,"std":27868.1130952704,"cov":0.2511199591}}
{"id":569,"question":"def sort_sublists(list1):\r\n    \"\"\"Write a function to sort each sublist of strings in a given list of lists.\"\"\"","answers":[{"text":"\r\n    for i in list1:\r\n        i.sort()\r\n    return list1\r\n\r\n\r","votes":97286.656},{"text":"\r\n    new_list = []\r\n    for sublist in list1:\r\n        new_list.append(sorted(sublist))\r\n    return new_list\r\n\r\n\r","votes":101514.74},{"text":"\r\n    new_list = []\r\n    for sublist in list1:\r\n        sublist.sort()\r\n        new_list.append(sublist)\r\n    return new_list\r\n\r\n\r","votes":105064.64},{"text":"\r\n    # your code here\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r","votes":106299.812},{"text":"\r\n    # Sort each sublist of strings in a given list of lists.\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r","votes":109416.348},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r","votes":110993.156},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r","votes":112719.18},{"text":"\r\n    list2 = []\r\n    for sublist in list1:\r\n        list2.append(sorted(sublist))\r\n    return list2\r\n\r\n\r","votes":114121.22},{"text":"\r\n    for i in range(len(list1)):\r\n        for j in range(len(list1[i])):\r\n            list1[i].sort()\r\n    return list1\r\n\r","votes":116458.084},{"text":"\r\n    result = []\r\n    for value in list1:\r\n        result.append( sorted(value) )\r\n    return result\r\n\r","votes":117605.46},{"text":"\r\n    result = []\r\n    for i in list1:\r\n        result.append(sorted(i))\r\n    return result\r\n\r\n\r","votes":119278.544},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\nlist_of_lists = [['apple', 'bat', 'cat'], ['bat', 'apple', 'cat'], ['cat', 'bat', 'apple']]\r\nprint(sort_sublists(list_of_lists))\r\n\r\n\r\n# + id=\"hY_pQ1J_o704\"\r","votes":119757.84},{"text":"\r\n    # your code goes here\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r","votes":121156.452},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1","votes":121631.236},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r","votes":123342.452},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return(list1)\r\n\r","votes":124488.144},{"text":"\r\n    # YOUR CODE HERE\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r","votes":128407.296},{"text":"\r\n\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n    return list1\r\n\r\n\r","votes":129240.872},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r","votes":129277.476},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i] = sorted(list1[i])\r\n    return list1\r\n\r","votes":130204.52},{"text":"\r\n    # list1 = [['a', 'b', 'c'], ['d', 'e', 'f', 'g'], ['h', 'i']]\r\n    list2 = []\r\n    for sublist in list1:\r\n        list2.append(sorted(sublist))\r\n    return list2\r\n\r\n\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['h', 'i']]))\r\n","votes":135477.692},{"text":"\r\n    sorted_list = []\r\n    for sublist in list1:\r\n        sorted_list.append(sorted(sublist))\r\n    return sorted_list\r\n\r\n\r\n# Test cases\r\nprint(sort_sublists([[1, 3, 5, 7, 9, 2], [1, 3, 5, 7, 9, 2]]))\r\nprint(sort_sublists([[1, 3, 5, 7, 9, 2], [2, 3, 5, 7, 9, 1]]))\r\n","votes":137271.048},{"text":"\r\n\r\n    new_list = []\r\n    for sublist in list1:\r\n        temp = sorted(sublist)\r\n        new_list.append(temp)\r\n    return new_list\r\n\r\n# TEST CASES\r\nprint(sort_sublists([[1, 2, 3], [1, 3, 2], [1, 2]]))\r\n# Output: [[1, 2, 3], [1, 3, 2], [1, 2]]\r\n","votes":138383.972},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n# Write a function to sort the given list of lists of tuples in increasing order of the first element of each tuple\r\n# and in decreasing order of the second element of each tuple, i.e., list1 = [ [ (2, 1), (1, 2), (3, 4) ], [ (2, 1), (1, 2) ], [ (1, 2) ] ]\r\n# Your function should return the list1 sorted in ascending order of the first element and in descending order of the second element.\r\n\r","votes":140480.632},{"text":"\r\n    \r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r","votes":150823.996},{"text":"\r\n    list2 = []\r\n    for sublist in list1:\r\n        list2.append(sorted(sublist))\r\n    return list2\r\n\r\n\r\n# test case\r\ntest_case = [['apple', 'banana', 'carrot', 'orange'], ['apple', 'banana', 'carrot'], ['banana', 'carrot', 'orange']]\r\nprint(sort_sublists(test_case))\r\n","votes":157868.868},{"text":"\r\n    \"\"\"Hint: use a nested loop\"\"\"\r\n    list2 = []\r\n    for x in list1:\r\n        list2.append(sorted(x))\r\n    return list2\r\n\r\n\r\nprint(sort_sublists(\r\n    [['a'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['h'], ['i'], ['j'], ['k'], ['l'], ['m'], ['n'], ['o'], ['p'],\r\n     ['q'], ['r'], ['s'], ['t'], ['u'], ['v'], ['w'], ['x'], ['y'], ['z']]))\r\n","votes":158561.104},{"text":"\r\n    for item in list1:\r\n        item.sort()\r\n    return list1\r\n\r","votes":161323.172},{"text":"\r\n    for i, sublist in enumerate(list1):\r\n        list1[i] = sorted(sublist)\r\n    return list1\r\n\r","votes":168104.52},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n    \r","votes":171028.536},{"text":"\r\n    output = []\r\n    for i in range(len(list1)):\r\n        output.append(sorted(list1[i]))\r\n    return output\r\n\r\n\r","votes":171278.632},{"text":"\r\n    for i in list1:\r\n        # i.sort()\r\n        i.sort(key = lambda x : x.lower())\r\n    return list1\r\n\r\n\r","votes":174373.624},{"text":"\r\n\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n\r\n    return list1\r\n\r\n\r","votes":186464.784},{"text":"\r\n    return [sorted(sublist) for sublist in list1]\r\n\r","votes":186798.928},{"text":"\r\n    # your code here\r\n    return [list(sorted(sublist)) for sublist in list1]\r\n\r","votes":191350.176},{"text":"\r\n    # your code here\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\nprint(sort_sublists([['a', 'a', 'a', 'a', 'a', 'a'],['b', 'b', 'b', 'b'],['c', 'c', 'c']]))\r\n# >> [['a', 'a', 'a', 'a', 'a', 'a'], ['b', 'b', 'b', 'b'], ['c', 'c', 'c']]\r\n\r","votes":219837.364},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        temp = []\r\n        for j in list1[i]:\r\n            temp.append(j)\r\n        list2.append(list(sorted(temp)))\r\n    return list2\r\n\r","votes":227572.656},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n# Tests\r\nprint(sort_sublists([['a', 'c', 'b'], ['d', 'b', 'c'], ['a', 'b', 'c']])) # [['a', 'a', 'b'], ['b', 'b', 'c'], ['c', 'c', 'c']]\r\nprint(sort_sublists([['a', 'c', 'b'], ['d', 'b', 'c']])) # [['a', 'a', 'b'], ['b', 'b', 'c']]\r\nprint(sort_sublists([[1, 3, 2], [4, 5, 6]])) # [[1, 2, 3], [4, 5, 6]]\r\nprint(sort_sublists([[1, 2, 3], [4, 5, 6]])) # [[1, 2, 3], [4, 5, 6]]\r\nprint(sort_sublists([[1, 2, 3]])) # [[1, 2, 3]]\r\nprint(sort_sublists([['a', 'b', 'c']])) # [['a', 'a', 'b']]\r\nprint(sort_sublists([['a']])) # [['a']]\r\nprint(sort_sublists([['a', 'b', 'c']])) # [['a', 'a', 'b']]\r\nprint(sort_sublists([['a']])) # [['a']]\r\nprint(sort_sublists([['a', 'b', 'c']])) # [['a', 'a', 'b']]\r\nprint(sort_sublists([['a']])) # [['a']]\r\nprint(sort_sublists([['a', 'b', 'c']])) # [['a', 'a', 'b']]\r\nprint(sort_sublists([['a']])) # [['a']]\r\nprint(sort_sublists([['a', 'b', 'c']])) # [['a', 'a', 'b']]\r\nprint(sort_sublists([['a']])) # [[","votes":229898.184},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n# test\r\nlist1 = [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\"]]\r\nsort_sublists(list1)\r\nprint(list1)\r\n\r\n# + [markdown] id=\"c8651397\"\r\n# ## 3.5 List Comprehensions\r\n#\r\n# A list comprehension is a way to create a new list from an existing one by applying a given function to each element of an existing list. A list comprehension has the following general structure:\r\n#\r\n# ```python\r\n# [expression for item in iterable if condition]\r\n# ```\r\n#\r\n# where\r\n#\r\n# - *expression* is an arbitrary expression that can use any of the variables defined inside the list comprehension\r\n# - *item* is the current element of the iterable\r\n# - *iterable* is the list or another iterable object\r\n# - *condition* is an arbitrary expression that can use any of the variables defined inside the list comprehension\r\n#\r\n# A list comprehension can be used to simplify a common type of problem: creating a new list where each element is the result of applying a function to each element of an existing list. For example, suppose you have a list of strings, and you want to create a new list where each element is the upper case version of the corresponding element of the original list. To do this, you can use a list comprehension:\r\n#\r\n# ```python\r\n# upper_case = [x.upper() for x in list1]\r\n# ```\r\n#\r\n# The variable *upper_case* is now a list containing the upper case versions of the elements of *list1*.\r\n#\r\n# In general, a list comprehension consists of a list of one or more expressions followed by a for loop and an optional if statement. The if statement, if present, is used to filter the items in the loop. The loop variable must be a valid identifier.\r\n#\r\n# The following example shows how a list comprehension can be used to create a list of al","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f']]\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f']]\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]))\r\n# [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n\r\nIn your code above, `sort_sublists` is a method of the `list` type. Thus, it is a method of the list objects. The `sort_sublists` method is not a method of the `list` type.\r\n\r\n```python\r\nprint(sort_sublists)\r\n# <function sort_sublists at 0x000002017723A6E0>\r\nprint(type(sort_sublists))\r\n# <class 'function'>\r\nprint(type(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]])))\r\n# <class 'list'>\r\nprint(type(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]])))\r\n# <class 'list'>\r\nprint(type(sort_sublists([['a', 'b', 'c'], ['d', 'e'","votes":null},{"text":"\r\n    list2 = []\r\n    for element in list1:\r\n        list2.append(element)\r\n    list2.sort()\r\n    return (list2)\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\nlst = [['A', 'B', 'C', 'D', 'E', 'F', 'G'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']]\r\nprint(sort_sublists(lst))\r\n```\r\nOutput:\r\n```\r\n[['A', 'B', 'C', 'D', 'E', 'F', 'G'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']]\r\n```\r\n\r\n## Question 3\r\n```\r\nimport math\r","votes":null},{"text":"\r\n    # sort the list of lists alphabetically\r\n\r\n    # sort the sublists alphabetically\r\n    # sort the sublists numerically\r\n    # sort the sublists alphabetically by length\r\n    # sort the sublists numerically by length\r\n\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        for j in range(i+1,len(list1)):\r\n            if list1[i] > list1[j]:\r\n                list1[i], list1[j] = list1[j], list1[i]\r\n    return list1\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        for j in range(i+1, len(list1)):\r\n            if list1[i].endswith(list1[j]):\r\n                list1[i], list1[j] = list1[j], list1[i]\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    newlist = []\r\n    for i in list1:\r\n        newlist.append(sorted(i))\r\n    return newlist\r\n```\r\n\r\n### Input\r\n```\r\nlist1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n\r\n### Output\r\n```\r\n[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n### Output\r\n```\r\n[['a', 'c', 'b'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n### Output\r\n```\r\n[['a', 'c', 'b'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n\r\n### Output\r\n```\r\n[['a', 'c', 'b'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n### Output\r\n```\r\n[['a', 'c', 'b'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n### Output\r\n```\r\n[['a', 'c', 'b'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n\r\n### Output\r\n```\r\n[['a', 'c', 'b'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n### Output\r\n```\r\n[['a', 'c', 'b'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n### Output\r\n```\r\n[['a', 'c', 'b'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n\r\n### Output\r\n```\r\n[['a', 'c', 'b'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\n```\r\n### Output\r\n```\r\n[['a', 'c', 'b'], ['d', '","votes":null},{"text":"\r\n    new_list = []\r\n    for sublist in list1:\r\n        new_list.append(sublist.sort())\r\n    return new_list\r\n\r\n\r\nprint(sort_sublists(test_list))\r\n","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i] = sorted(list1[i])\r\n    return list1\r\n\r\nsort_sublists(list_of_lists)\r\n\r\n# Another way to do it with a for loop\r\nsublist_lengths = [len(sublist) for sublist in list_of_lists]\r\nmax_sublist = max(sublist_lengths)\r\nsublist_index = sublist_lengths.index(max_sublist)\r\nlist_of_lists[sublist_index] = sorted(list_of_lists[sublist_index])\r\n```\r\n\r\n**Note:** if you have a list of strings, you can sort each sublist of that list in a similar fashion.\r\n\r\n### Exercise 6\r\nUsing the `sorted()` function, sort the list of lists according to the length of the innermost sublists.\r\n\r\n```python\r\nlist_of_lists = [\r\n    ['a', 'b', 'c'],\r\n    ['d', 'e'],\r\n    ['f'],\r\n    ['g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\r\n    ['a', 'b', 'c', 'd'],\r\n    ['e', 'f', 'g', 'h'],\r\n    ['i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\r\n]\r\n\r\n# Create a copy of the list of lists\r\nsorted_list_of_lists = list_of_lists.copy(","votes":null},{"text":"\r\n    \r\n    # Loop through each sublist in list1\r\n    for sublist in list1:\r\n        \r\n        # Sort sublist\r\n        sublist.sort()\r\n    \r\n# Example\r\nlist1 = [['red', 'yellow'], ['blue'], ['green','red'], ['red']]\r\nsort_sublists(list1)\r\nprint(list1)\r\n","votes":null},{"text":"\r\n    sublists = []\r\n    for sublist in list1:\r\n        sublists.append(sublist)\r\n    sublists.sort()\r\n    for i in range(len(sublists)):\r\n        for j in range(len(sublists[i])):\r\n            list1[i][j] = sublists[i][j]\r\n    return list1\r\nprint(sort_sublists(list1))\r\n```\r\n\r\n# What I have learned\r\n\r\nI have learned the following things:\r\n- [ ] Python if statement syntax\r\n- [ ] Importing modules\r\n- [ ] Basic Python list operations\r\n- [ ] Python functions\r\n- [ ] Python data structures\r\n- [ ] How to print to the terminal\r\n- [ ] How to use the sort() function\r\n- [ ] How to write a function\r\n- [ ] How to write a function to sort each sublist of strings in a given list of lists.\r\n\r\n# Homework\r\n\r\n## Problem 1\r\n\r\n**Problem**: Write a function `is_palindrome(input_string)` to check if the given string is a palindrome.\r\n\r\n**Example**: `is_palindrome(\"racecar\")` should return `True`, while `is_palindrome(\"radar\")` should return `False`.\r\n\r\n## Problem 2\r\n\r\n**Problem**: Write a function `is_palindrome_permutation(input_string)` to check if the given string is a palindrome permutation.\r\n\r\n**Example**: `is_palindrome_permutation(\"taco cat\")` should return `True`, while `is_palindrome_permutation(\"taco cat taco\")` should return `False`.\r\n\r\n## Problem 3\r\n\r\n**Problem**: Write a function `get_most_common(input_list)` that returns the most common element in the given list.\r\n\r\n**Example**: `get_most_common([10, 20, 30, 20, 10, 30, 10, 20])` should return `20`.\r\n\r\n## Problem 4\r\n\r\n**Problem**: Write a function `get_most_common_indices(input_list)` that returns the indices of the most common element in the give","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i] = sorted(list1[i])\r\n    return list1\r\n\r\n\r\n# + [markdown] id=\"Qd--h65X0-4T\"\r\n# ### 2.1.2 Testing your function on a list of lists of strings\n\n# + id=\"0gC_vK6j0-4U\" colab={\"base_uri\": \"https:\/\/localhost:8080\/\"} outputId=\"7b850e54-0821-41e2-8c74-e2002a560724\"\nprint(sort_sublists(list1))\n\n\n# + [markdown] id=\"r8jW496a0-4X\"\n# ## 2.2 Write a function to sort a list of lists of strings\n#\n# Write a function `sort_sublists` that accepts a list of lists of strings as input. The function should return the input list of lists of strings, but with the sublists of strings sorted.\n#\n# ### Example\n#\n# For the input list of lists of strings:\n#\n# ```\n# [['apple', 'banana', 'carrot'],\n#  ['cabbage', 'apple','mango'],\n#  ['banana','mango', 'carrot']]\n# ```\n#\n# Your function should return:\n#\n# ```\n# [['apple', 'apple', 'banana', 'carrot'],\n#  ['banana', 'cabbage','mango','mango'],\n#  ['carrot','mango','mango','mango']]\n# ```\n#\n# ### Hint\n#\n# * Use the `sort` function to sort each sublist in the input list.\n# * To sort a list of strings, you can use the `sorted` function.\n\n# + id=\"w0bZf0-e0-4Y\"","votes":null},{"text":"\r\n\r\n    # sort each sublist of the list of lists\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n    # sort the list of lists\r\n    list1.sort()\r\n\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    # YOUR CODE HERE\r\n    list1.sort(key=len)\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\nprint(sort_sublists([['a', 'bb', 'ccc'], ['d', 'ee', 'fff'], ['g', 'hh']]))\r\nprint(sort_sublists([['bb', 'ccc'], ['ee', 'fff'], ['g', 'hh']]))\r\nprint(sort_sublists([['ccc'], ['ee', 'fff'], ['g', 'hh']]))\r\nprint(sort_sublists([['ccc', 'aa', 'bb', 'ccc'], ['ee', 'fff'], ['g', 'hh']]))\r\nprint(sort_sublists([['ccc', 'bb', 'ccc'], ['ee', 'fff'], ['g', 'hh']]))\r\nprint(sort_sublists([['ccc', 'ee', 'fff', 'g'], ['ccc', 'ee', 'fff', 'g'], ['ccc', 'ee', 'fff', 'g']]))","votes":null},{"text":"\r\n    # write your code here\r\n\r\n    # sort the list of lists\r\n    # for each sublist, sort it\r\n    # return the sorted list of lists\r\n\r\n    # each sublist is a list of strings\r\n\r\n    # sort the sublists\r\n    # return the sorted list\r\n    # https:\/\/www.codewars.com\/kata\/559a906a314f00b00b000004\/solutions\/python\r\n\r\n    sorted_sublists = list(map(sorted, list1))\r\n    return sorted_sublists\r\n\r\n\r\nprint(sort_sublists([[1, 4, 5, 6], [2], [6]]))\r\nprint(sort_sublists([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']]))\r\nprint(sort_sublists([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c']]))\r\nprint(sort_sublists([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c']]))\r\nprint(sort_sublists([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c']]))\r\nprint(sort_sublists([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c']]))\r\nprint(sort_sublists([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c']]))\r\nprint(sort_sublists([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c']]))\r\nprint(sort_sublists([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', '","votes":null},{"text":"\r\n    return sorted(list(chain.from_iterable(list1)))\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        for j in range(i + 1, len(list1)):\r\n            if list1[i] > list1[j]:\r\n                list1[i], list1[j] = list1[j], list1[i]\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        for j in range(len(list1[i])):\r\n            list1[i][j] = list(filter(lambda x: x.isalpha(), list1[i][j]))\r\n    return list1\r\n\r","votes":null},{"text":"\r\n    return sorted(sublist for sublist in list1)\r\n\r\n\r\n# +\r\n#Write a function to sort each sublist of strings in a given list of lists.\r","votes":null},{"text":"\r\n    return sorted(list(map(sorted, list1)))\r\n\r\n\r","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n# Run the test\r\nprint(sort_sublists([[1, 2], [4, 5]]))\r\n# [[1, 2], [4, 5]]\r\n\r\nprint(sort_sublists([[1, 2, 3], [4, 5]]))\r\n# [[1, 2, 3], [4, 5]]\r\n\r\nprint(sort_sublists([[1, 2, 3], [4]]))\r\n# [[1, 2, 3], [4]]\r\n\r\nprint(sort_sublists([[1, 2, 3], [4, 5, 6]]))\r\n# [[1, 2, 3], [4, 5, 6]]\r\n```\r\n\r\n## 3.7.2. \u5217\u8868\u63a8\u5bfc\u5f0f\uff1a\u5d4c\u5957\u5217\u8868\r\n\r\n\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5d4c\u5957\u5217\u8868\u975e\u5e38\u5f3a\u5927\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u5d4c\u5957\u5217\u8868\u5408\u5e76\u6210\u4e00\u4e2a\u5217\u8868\u3002\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u4e86\u5d4c\u5957\u5217\u8868\u7684\u4f7f\u7528\uff1a\r\n\r\n```python\r\n# \u5d4c\u5957\u5217\u8868\r\nlist1 = [[1, 2], [4, 5], [1, 3, 5]]\r\n# [1, 2, 4, 5, 1, 3, 5]\r\nlist2 = [[1, 2], [4, 5]]\r\n# [1, 2, 4, 5, 1, 3, 5]\r\nlist3 = [1, 2, 3, 4, 5, 6]\r\n# [1, 2, 3, 4, 5, 6]\r\nlist4 = [1, 2, 3]\r\n# [1, 2, 3, 4, 5, 6]\r\nlist5 = [1]\r\n# [1, 2, 3, 4, 5, 6]\r\nlist6 = []\r\n# []\r\nlist7 = [[1, 2], [3, 4], [5","votes":null},{"text":"\r\n    sorted(list1, key=lambda x: len(x))\r\n    return(list1)\r\n\r\nsort_sublists(list_of_lists)\r\n\r\n\"\"\"\r\nWrite a function to sort a list of lists of numbers.\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    # initialize the result\r\n    result = []\r\n    # loop over the input list\r\n    for i, item in enumerate(list1):\r\n        # loop over the sublists\r\n        for subitem in item:\r\n            # append the sublist to result\r\n            result.append(subitem)\r\n    # return the result\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(sorted(list1[i]))\r\n    return list2\r\n\r\n\r\n# Tests\r\nprint(sort_sublists(['A', 'B']))\r\nprint(sort_sublists(['A', ['B', 'C']]))\r\nprint(sort_sublists(['A', ['B', ['C', 'D']]]))\r\nprint(sort_sublists(['A', ['B', ['C', 'D', 'E'], 'F', ['G', 'H']]]))\r\n","votes":null},{"text":"\r\n    for i in list1:\r\n        i.sort()\r\n\r","votes":null},{"text":"\r\n\r\n    # get the length of the longest list\r\n    longest_list = max(len(lst) for lst in list1)\r\n\r\n    # create an empty list for the sorted list\r\n    sorted_list = []\r\n\r\n    # create a for loop that iterates over the longest list\r\n    for i in range(longest_list):\r\n\r\n        # create an empty list for each sublist\r\n        sublist = []\r\n\r\n        # create a for loop that iterates over each sublist in the list\r\n        for sublist_i in range(len(list1)):\r\n\r\n            # if there is a sublist, add the item to the list\r\n            if sublist_i in range(len(list1)):\r\n                sublist.append(list1[sublist_i][i])\r\n\r\n        # sort the sublist\r\n        sublist = sorted(sublist)\r\n\r\n        # add the sorted sublist to the sorted list\r\n        sorted_list.append(sublist)\r\n\r\n    # return the sorted list\r\n    return sorted_list\r\n\r\n\r\n# sort the sublists of lists\r\nsorted_list = sort_sublists(list1)\r\n\r\n# print the sorted list\r\nprint(sorted_list)\r\n\r\n```\r\n\r\n### 2-2.2.4. Sorting sublists by using the sorted function\r\n\r\n```python\r\n\"\"\"\r\nWrite a function to sort each sublist of strings in a given list of lists.\r\n\"\"\"\r\n\r\n# create a list of sublists\r\nlist1 = [\r\n    ['apple', 'banana', 'cherry'],\r\n    ['orange', 'banana', 'apple', 'cherry'],\r\n    ['apple', 'banana', 'cherry', 'orange'],\r\n    ['apple', 'banana', 'cherry', 'orange','strawberry']\r\n]\r\n\r\n# sort the sublists of lists\r\nsorted_list = sorted(list1, key=lambda x: x[0])\r\n\r\n# print the sorted list\r\nprint(sorted_list)\r\n\r\n```\r\n\r\n### 2-2.2.5. Sorting sublists by using the sorted function\r\n\r\n```python\r\n\r\n\"\"\"\r\nWrite a function to sort each sublist of strings in a given list of lists.\r\n\"\"\"\r\n\r\n# create a list of sublists\r\nlist1 ","votes":null},{"text":"\r\n    sorted_list = []\r\n    for sublist in list1:\r\n        if sublist == []:\r\n            sorted_list.append(sublist)\r\n        else:\r\n            for i in range(len(sublist)):\r\n                sublist[i] = int(sublist[i])\r\n            sorted_list.append(sorted(sublist))\r\n    return sorted_list\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n\r","votes":null},{"text":"\r\n    return [(x + y).split() for x in list1 for y in list1]\r\n\r\n\r\nprint(sort_sublists([['dog', 'cat'], ['cat', 'dog']])) # [['cat', 'dog'], ['dog', 'cat']]\r\nprint(sort_sublists([['dog', 'cat'], ['cat', 'dog'], ['dog', 'cat']])) # [['cat', 'dog'], ['cat', 'dog'], ['dog', 'cat']]\r\nprint(sort_sublists([['dog', 'cat'], ['cat']])) # [['cat'], ['dog']]\r\nprint(sort_sublists([['dog', 'cat'], []])) # [['dog', 'cat'], []]\r\nprint(sort_sublists([['dog', 'cat', 'dog']])) # [['cat', 'dog'], ['dog', 'cat']]\r\nprint(sort_sublists([['dog', 'cat', 'dog'], ['cat', 'dog']])) # [['cat', 'dog'], ['dog', 'cat']]\r\nprint(sort_sublists([['dog', 'cat', 'dog'], ['cat', 'dog'], ['dog']])) # [['cat', 'dog'], ['cat', 'dog'], ['dog']]\r\nprint(sort_sublists([['dog', 'cat', 'dog', 'cat']])) # [['cat', 'dog'], ['cat', 'dog'], ['dog', 'cat']]\r\nprint(sort_sublists([[1, 2, 3], [1, 2, 3]])) # [[1, 2, 3], [1, 2, 3]]\r\nprint(sort_sublists([[1, 2, 3], [1, 2]])) # [[1, 2], [1, 2, 3]]\r\nprint(sort_sublists([[1, 2, 3], [1, 2, 3, 4]])) # [[1, 2, 3, 4], [1, 2, 3]]\r\nprint(sort_sublists([[1, 2, 3, 4], [1, 2, 3]])) # [[1, 2, 3], ","votes":null},{"text":"\r\n    # Write your code here.\r\n    return sorted(list1, key=lambda x: len(x))\r\n\r\n\r\n# Test cases\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\"], []]))\r\n# ['d', 'e']\r\nprint(sort_sublists([[\"a\", \"b\"], []]))\r\n# ['a', 'b']\r\nprint(sort_sublists([[], [\"a\"], [\"b\"]]))\r\n# ['a', 'b']\r\n","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1) == 1:\r\n        return list1\r\n    else:\r\n        return sorted(list1, key=lambda x: x[0]) + sort_sublists([list2 for (val, list2) in list1 if list2!= x[1]])\r\n\r","votes":null},{"text":"\r\n    # sort_by_length = lambda x: len(x)\r\n    #\r\n    # for sublist in list1:\r\n    #     sublist.sort(key=sort_by_length)\r\n    #\r\n    # return list1\r\n\r\n    list1 = [ [ '1', '2', '3' ],\r\n              [ '4', '5', '6' ],\r\n              [ '7', '8', '9' ] ]\r\n\r\n    for i in list1:\r\n        i.sort()\r\n    return list1\r\n\r","votes":null},{"text":"\r\n    sorted_list = [[] for i in range(len(list1))]\r\n    for i in range(len(list1)):\r\n        for x in list1[i]:\r\n            sorted_list[i].append(x)\r\n    return sorted_list\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO: Write a function to sort each sublist of strings in a given list of lists.\r\n    return sorted(list1, key=lambda sublist: sublist[0])\r\n\r","votes":null},{"text":"\r\n    return sorted([sorted(sublist) for sublist in list1])\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1) == 0 or type(list1[0])!= list:\r\n        return list1\r\n\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append([])\r\n\r\n    for i in range(len(list1)):\r\n        list2[i].append(list1[i][0])\r\n        for j in range(1, len(list1[i])):\r\n            if list1[i][j] in list1[i][i-1]:\r\n                list2[i].append(list1[i][j])\r\n\r\n    del list1\r\n\r\n    for i in range(len(list2)):\r\n        list2[i] = list(set(list2[i]))\r\n\r\n    list3 = []\r\n    for i in range(len(list2)):\r\n        list3.append(list2[i])\r\n\r\n    for i in range(len(list3)):\r\n        list3[i] = sorted(list3[i])\r\n\r\n    return list3\r\n\r\n\r","votes":null},{"text":"\r\n    return sorted(list1, key=lambda x: len(x))\r\n\r\nsort_sublists(words)\r\n\r\n# Solution 3\r","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n# Test your code\r\ntest_list1 = [['1', '2', '3'], ['2', '3', '1'], ['1', '1', '1'], ['2', '1', '2']]\r\nprint(sort_sublists(test_list1))\r\n```\r\n\r\n## 1.5.3 Sorting in place (with copy)\r\nTo sort in place, we can make a copy of the list to be sorted and then sort it.\r\n```python\r\nimport copy\r\n\r","votes":null},{"text":"\r\n    # TODO: Your code here\r\n    #return [sorted(sublist) for sublist in list1]\r\n    return [sorted(sublist) for sublist in list1]\r\n\r\nprint(sort_sublists(test_list2))\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[['a', 'b', 'c'], ['a', 'b'], ['b', 'c']]\r\n```\r\n\r\n#### Task 2\r\n\r\n- Write a function to remove all duplicates in a list.\r\n- (Hint: use set() to remove duplicates)\r\n\r\nInput:\r\n\r\n```python\r\ntest_list3 = [['a', 'b', 'c'], ['a', 'b'], ['b', 'c']]\r\n```\r\n\r\nOutput:\r\n\r\n```python\r\n['a', 'b', 'c']\r\n```\r\n\r\n#### Task 3\r\n\r\n- Write a function to flatten a list of lists.\r\n- (Hint: use list(chain.from_iterable()) to flatten a list of lists)\r\n\r\nInput:\r\n\r\n```python\r\ntest_list4 = [['a', 'b', 'c'], ['a', 'b'], ['b', 'c']]\r\n```\r\n\r\nOutput:\r\n\r\n```python\r\n['a', 'b', 'c', 'a', 'b', 'c', 'b', 'c']\r\n```\r\n\r\n#### Task 4\r\n\r\n- Write a function to sort a list of dictionaries by values of a dictionary.\r\n- (Hint: use sorted() and sorted() with key= to sort the list of dictionaries by values of a dictionary)\r\n\r\nInput:\r\n\r\n```python\r\ntest_list5 = [{'a': 1, 'b': 2}, {'a': 1, 'b': 3}, {'a': 2, 'b': 1}]\r\n```\r\n\r\nOutput:\r\n\r\n```python\r\n[{'a': 1, 'b': 2}, {'a': 1, 'b': 3}, {'a': 2, 'b': 1}]\r\n```\r\n\r\n#### Task 5\r\n\r\n- Write a function to sort a list of dictionaries by keys of a dictionary.\r\n- (Hint","votes":null},{"text":"\r\n\r\n    # Write your code here.\r\n    return sorted(list1, key=len)\r\n\r\n\r\nlst = [['apple', 'banana', 'cherry'],\r\n       ['a', 'b', 'c'],\r\n       ['orange', 'grape', 'kiwi']]\r\nprint(sort_sublists(lst))\r\n","votes":null},{"text":"\r\n\r\n    # Write your code below:\r\n    # list1 = [['a', 'b'], ['c', 'd', 'e'], ['f', 'g', 'h']]\r\n    # print(list1)\r\n    # print(list1[0])\r\n    # print(list1[1])\r\n    # print(list1[2])\r\n    # print(list1[0][0])\r\n    # print(list1[0][1])\r\n    # print(list1[1][0])\r\n    # print(list1[1][1])\r\n    # print(list1[1][2])\r\n    # print(list1[2][0])\r\n    # print(list1[2][1])\r\n    # print(list1[2][2])\r\n    # print(list1[2][1][1])\r\n    # print(list1[2][1][2])\r\n\r\n    for i in range(len(list1)):\r\n        for j in range(len(list1[i])):\r\n            # print(list1[i][j])\r\n            if list1[i][j] not in list1[i][j+1:]:\r\n                list1[i].remove(list1[i][j])\r\n    # print(list1)\r\n    # print(list1[0])\r\n    # print(list1[1])\r\n    # print(list1[2])\r\n    # print(list1[0][0])\r\n    # print(list1[0][1])\r\n    # print(list1[1][0])\r\n    # print(list1[1][1])\r\n    # print(list1[1][2])\r\n    # print(list1[2][0])\r\n    # print(list1[2][1])\r\n    # print(list1[2][2])\r\n    # print(list1[2][1][1])\r\n    # print(list1[2][1][2])\r\n    return list1\r\n\r\n\r\nprint(sort_sublists([['a', 'b'], ['c', 'd', 'e'], ['f', 'g', 'h']]))\r\nprint(sort_sublists([['a', 'b'], ['c', 'd', 'e'], ['f', 'g', 'h']]))\r\nprint(sort_sublist","votes":null}],"time":{"count":38.0,"avg":143293.7372631579,"std":35373.0086933119,"cov":0.2468566273}}
{"id":572,"question":"def two_unique_nums(nums):\r\n    \"\"\"Write a python function to remove two duplicate numbers from a given number of lists.\"\"\"","answers":[{"text":"\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n        else:\r\n            unique_nums.remove(num)\r\n    return unique_nums\r\n\r\n\r","votes":78374.388},{"text":"\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num in unique_nums:\r\n            unique_nums.remove(num)\r\n        else:\r\n            unique_nums.append(num)\r\n    return unique_nums\r\n\r\n\r","votes":113499.144},{"text":"\r\n    hash_table = {}\r\n    for num in nums:\r\n        if num in hash_table:\r\n            del hash_table[num]\r\n        else:\r\n            hash_table[num] = num\r\n    return list(hash_table.values())\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [[1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [2, 2]]\r\n    print(two_unique_nums(nums))\r\n","votes":116261.364},{"text":"\r\n    # TODO: Complete this function\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n        else:\r\n            unique_nums.remove(num)\r\n    return unique_nums\r\n\r","votes":124988.504},{"text":"\r\n    unique_num = {}\r\n    for num in nums:\r\n        if num in unique_num:\r\n            unique_num[num] += 1\r\n        else:\r\n            unique_num[num] = 1\r\n    unique_num_list = []\r\n    for key, value in unique_num.items():\r\n        if value == 1:\r\n            unique_num_list.append(key)\r\n    return unique_num_list\r\n\r\nif __name__ == '__main__':\r\n    print(two_unique_nums([1, 2, 3, 2, 3, 4, 3]))\r\n    print(two_unique_nums([1, 2, 3, 4, 3, 2, 1]))","votes":138436.716},{"text":"\r\n    new_list = []\r\n    for i in range(len(nums)):\r\n        if nums[i] not in new_list:\r\n            new_list.append(nums[i])\r\n        else:\r\n            new_list.remove(nums[i])\r\n    return new_list\r\n\r","votes":153986.036},{"text":"\r\n    # Initialize a dictionary to store the unique elements\r\n    unique_elements = {}\r\n    # Iterate through the list\r\n    for num in nums:\r\n        # Check if the element is already present in the dictionary\r\n        if num in unique_elements:\r\n            # If it is, remove it from the dictionary\r\n            unique_elements.pop(num)\r\n        # If it is not present, add it to the dictionary\r\n        else:\r\n            unique_elements[num] = 1\r\n    # Return the unique elements in the dictionary\r\n    return list(unique_elements)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(two_unique_nums([2, 2, 1, 3, 4, 5, 5, 5, 5, 5, 5]))\r\n","votes":166625.844},{"text":"\r\n    unique_nums = set()\r\n    for i in nums:\r\n        if i not in unique_nums:\r\n            unique_nums.add(i)\r\n        else:\r\n            unique_nums.remove(i)\r\n    return list(unique_nums)\r\n\r","votes":175811.464},{"text":"\r\n    # write code here\r\n    return [x for x in nums if nums.count(x) == 1]\r\n\r\n\r","votes":179434.368},{"text":"\r\n    unique = []\r\n    for item in nums:\r\n        if item not in unique:\r\n            unique.append(item)\r\n        else:\r\n            unique.remove(item)\r\n    return unique\r\n\r\n\r","votes":190611.872},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[j])\r\n                break\r\n    return nums\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(two_unique_nums(nums))","votes":null},{"text":"\r\n    list_set = set(nums)\r\n    nums.remove(max(list_set))\r\n    nums.remove(min(list_set))\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for num in nums:\r\n        if num not in new_list:\r\n            new_list.append(num)\r\n    return new_list\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    nums_set = set(nums)\r\n    return list(nums_set)\r\n\r","votes":null},{"text":"\r\n\r\n    # Create a set of numbers\r\n    set_nums = set(nums)\r\n\r\n    # Create a list of unique numbers\r\n    list_unique_nums = list(set_nums)\r\n\r\n    # Remove the two duplicate numbers\r\n    for duplicate_num in list_unique_nums:\r\n        nums.remove(duplicate_num)\r\n\r\n    # Return the number of unique numbers after removing duplicates\r\n    return len(list_unique_nums)\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        if nums[i] in nums[i+1:]:\r\n            nums.remove(nums[i])\r\n    return nums\r\n\r\n# test\r\nprint(two_unique_nums([1,2,3,4,5,6,7,8,9,0]))\r\nprint(two_unique_nums([1,1,2,3,4,5,6,7,8,9,0]))\r\nprint(two_unique_nums([1,1,2,3,4,5,6,7,8,9,0,1,1,2,3,4,5,6,7,8,9,0]))\r\n","votes":null},{"text":"\r\n    nums = list(nums)\r\n    for i in range(len(nums)):\r\n        for j in range(i + 1, len(nums)):\r\n            if nums[j] == nums[i]:\r\n                del nums[j]\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    pass\r\n","votes":null},{"text":"\r\n    nums = list(set(nums))\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize two list\r\n    unique_num_list1 = []\r\n    unique_num_list2 = []\r\n\r\n    # Iterate through the given list\r\n    for num in nums:\r\n        # If the number is not in the list unique_num_list1\r\n        if num not in unique_num_list1:\r\n            # Add the number to the list unique_num_list1\r\n            unique_num_list1.append(num)\r\n\r\n        # If the number is not in the list unique_num_list2\r\n        elif num not in unique_num_list2:\r\n            # Add the number to the list unique_num_list2\r\n            unique_num_list2.append(num)\r\n    return unique_num_list1, unique_num_list2\r\n\r\n\r","votes":null},{"text":"\r\n    nums_set = set(nums)\r\n    if len(nums_set) == len(nums):\r\n        return nums\r\n    nums_set.remove(nums[0])\r\n    nums_set.remove(nums[1])\r\n    return list(nums_set)\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return unique_nums(nums)\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    if len(nums) == 1: return nums\r\n    else:\r\n        for i in range(len(nums)):\r\n            if nums[i] in nums:\r\n                nums.remove(nums[i])\r\n        return nums\r\n\r","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(i+1,len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[j])\r\n    return nums\r\n\r\n\r\nprint(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\r\n","votes":null},{"text":"\r\n\r\n    # Creating an empty list to store the unique numbers\r\n    unique_nums = []\r\n\r\n    # Iterating through the elements of the list\r\n    for i in range(len(nums)):\r\n        # If the element is not in the list, then it is going to be added\r\n        # to the list\r\n        if nums[i] not in unique_nums:\r\n            unique_nums.append(nums[i])\r\n\r\n    # Creating a new list to store the unique numbers\r\n    unique_nums2 = []\r\n\r\n    # Iterating through the list and appending the unique numbers\r\n    for j in range(len(unique_nums)):\r\n        unique_nums2.append(unique_nums[j])\r\n\r\n    return unique_nums2\r\n\r\n\r","votes":null},{"text":"\r\n    if not nums:\r\n        return nums\r\n    nums = sorted(nums)\r\n    for i in range(len(nums)):\r\n        if nums[i] == nums[i + 1]:\r\n            nums.pop(i)\r\n            nums.pop(i)\r\n            i -= 1\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO: Your code here\r\n    l = []\r\n    for n in nums:\r\n        if n not in l:\r\n            l.append(n)\r\n    print(l)\r\n\r\n\r","votes":null},{"text":"\r\n    num_dict = {}\r\n    for num in nums:\r\n        if num in num_dict:\r\n            num_dict[num] += 1\r\n        else:\r\n            num_dict[num] = 1\r\n\r\n    for key in num_dict:\r\n        if num_dict[key] == 1:\r\n            return key\r\n\r","votes":null},{"text":"\r\n    if len(nums) == 2:\r\n        return nums[0]\r\n    elif len(nums) == 1:\r\n        return nums[0]\r\n    else:\r\n        return nums[0] + two_unique_nums(nums[1:])\r\n\r\n\r","votes":null},{"text":"\r\n    nums = set(nums)\r\n    return list(nums)\r\n\r\n\r","votes":null},{"text":"\r\n    # 1. Use set() to remove duplicate elements\r\n    # 2. Convert the set to a list\r\n    return list(set(nums))\r\n\r\n# Test 1\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\r\nresult = two_unique_nums(nums)\r\nprint(result)\r\n\r\n# Test 2\r\nnums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\nresult = two_unique_nums(nums)\r\nprint(result)\r\n","votes":null},{"text":"\r\n    nums_set = set()\r\n    for num in nums:\r\n        if num not in nums_set:\r\n            nums_set.add(num)\r\n        else:\r\n            nums_set.remove(num)\r\n    return nums_set\r\n\r\n\r","votes":null},{"text":"\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n    if len(unique_nums)==2:\r\n        return [unique_nums[0], unique_nums[1]]\r\n    else:\r\n        return unique_nums\r\n\r\nif __name__ == '__main__':\r\n    nums = [1,2,3,4,5,5,6,7,8,9]\r\n    print(two_unique_nums(nums))","votes":null},{"text":"\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    \r\ntwo_unique_nums(nums)\r\n# -\r\n\r\n# # 3.9.2\r\n#\r\n# Python has the `zip` function. It is a general function to combine multiple lists into a single list of tuples.\r\n\r\n# +\r\n# Example\r\nx = [1,2,3,4]\r\ny = ['a','b','c','d']\r\n\r\nlist(zip(x,y))\r\n\r\n# +\r\n# Example:\r\nx = [1,2,3,4]\r\ny = ['a','b','c','d']\r\nz = [10,20,30,40]\r\n\r\nlist(zip(x,y,z))\r\n\r\n# +\r\n# Example:\r\nx = [1,2,3,4]\r\ny = ['a','b','c','d']\r\nz = [10,20,30,40]\r\n\r\nlist(zip(x,y,z))\r\n\r\n# +\r\n# Example:\r\nx = [1,2,3,4]\r\ny = ['a','b','c','d']\r\n\r\nlist(zip(x,y))\r\n\r\n# +\r\n# Example:\r\nx = [1,2,3,4]\r\ny = ['a','b','c','d']\r\nz = [10,20,30,40]\r\n\r\nlist(zip(x,y,z))\r\n\r\n# +\r\n# Example:\r\nx = [1,2,3,4]\r\ny = ['a','b','c','d']\r\n\r\nlist(zip(x,y))\r\n\r\n# +\r\n# Example:\r\nx = [1,2,3,4]\r\ny = ['a','b','c','d']\r\n\r\nlist(zip(x,y))\r\n\r\n# +\r\n# Example:\r\nx = [1,2,3,4]\r\ny = ['a','b','c','d']\r\n\r\nlist(zi","votes":null},{"text":"\r\n\r\n    # Write your logic here.\r\n    new_list = []\r\n    for i in nums:\r\n        if i not in new_list:\r\n            new_list.append(i)\r\n    return new_list\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums) == 0:\r\n        return nums\r\n    if len(nums) == 1:\r\n        return []\r\n    if len(nums) == 2:\r\n        return [nums[0]]\r\n    if len(nums) == 3:\r\n        return [nums[0]]\r\n    if len(nums) == 4:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 5:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 6:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 7:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 8:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 9:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 10:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 11:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 12:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 13:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 14:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 15:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 16:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 17:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 18:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 19:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 20:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 21:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 22:\r\n        return [nums[0], nums[1]]\r\n    if len(nums) == 23:\r\n        retur","votes":null},{"text":"\r\n\r\n    if nums == []:\r\n        return nums\r\n\r\n    # sort the list\r\n    nums.sort()\r\n\r\n    # remove the first number from the list\r\n    first_num = nums[0]\r\n\r\n    # remove the second number from the list\r\n    second_num = nums[1]\r\n\r\n    # remove the first number from the list\r\n    nums.remove(first_num)\r\n\r\n    # remove the second number from the list\r\n    nums.remove(second_num)\r\n\r\n    # return the list without the duplicate numbers\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    nums_set = set(nums)\r\n    return list(nums_set)[1:]\r\n\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for i in range(len(nums)):\r\n        if nums[i] not in new_list:\r\n            new_list.append(nums[i])\r\n    return new_list\r\n\r\n# test the function\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(two_unique_nums(nums))","votes":null},{"text":"\r\n\r\n    # The unique numbers\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n        else:\r\n            unique_nums.remove(num)\r\n    print(unique_nums)\r\n\r\n\r","votes":null},{"text":"\r\n    new_nums = [None] * len(nums)\r\n    for i in nums:\r\n        if new_nums[i] is None:\r\n            new_nums[i] = i\r\n        else:\r\n            new_nums[i] = None\r\n    return new_nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Find the maximum number in the list\r\n    max_num = max(nums)\r\n    # Create a new list to store the unique values and the two numbers that repeats\r\n    unique_num_list = []\r\n    repeated_num_list = []\r\n    # Find the index of the maximum number in the list\r\n    max_num_index = nums.index(max_num)\r\n    # Sort the list\r\n    nums.sort()\r\n    # Loop through the list\r\n    for i in range(len(nums)):\r\n        # If the current number is the maximum number, then continue to the next iteration\r\n        if nums[i] == max_num:\r\n            continue\r\n        # If the current number is not the maximum number, then add the current number to the unique list\r\n        else:\r\n            unique_num_list.append(nums[i])\r\n    # Loop through the unique list to find the two numbers that repeats\r\n    for i in range(len(unique_num_list)):\r\n        # If the current number is not the maximum number, then continue to the next iteration\r\n        if unique_num_list[i] == max_num:\r\n            continue\r\n        # If the current number is the maximum number, then then add the current number to the list\r\n        else:\r\n            repeated_num_list.append(unique_num_list[i])\r\n        # If the current number is the maximum number and the next number is the maximum number, then\r\n        # add the current number to the list and break the loop\r\n        if i < len(unique_num_list) - 1 and unique_num_list[i + 1] == max_num:\r\n            repeated_num_list.append(max_num)\r\n            break\r\n    # If the first number is not in the repeated number list, then add the first number to the repeated number list\r\n    if repeated_num_list[0]!= max_num:\r\n        repeated_num_list.insert(0, max_num)\r\n    # If the second number is not in the repeated number list, then add the second number to the repeated number list\r\n    if repeated_num_list[1]!= max_num:\r\n        repeated_num_list.insert(1, max_num)\r\n    # Return the repeated number list\r\n    return repeated_num_list\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(0, len(nums)-1):\r\n        if nums[i] in nums[i+1:]:\r\n            nums.remove(nums[i])\r\n    return nums\r\n\r\n\r\nprint(two_unique_nums([1,2,3,4,5,6,7,8,9,1,2]))","votes":null},{"text":"\r\n    nums_set = set(nums)\r\n    return [num for num in nums if num not in nums_set]\r\n\r\n\r\nif __name__ == '__main__':\r\n    # test cases\r\n    assert two_unique_nums([1, 3, 4, 5, 3, 2, 4]) == [1, 3, 5, 2, 4]\r\n    assert two_unique_nums([1, 1, 2, 2, 3]) == [1, 2, 3]\r\n    assert two_unique_nums([1, 4, 4, 4]) == [1]\r\n    assert two_unique_nums([1, 2, 3]) == [1, 2, 3]\r\n    assert two_unique_nums([1]) == [1]\r\n    assert two_unique_nums([]) == []\r\n    assert two_unique_nums([1, 3, 4, 5, 3, 2, 4]) == [1, 3, 5, 2, 4]\r\n    assert two_unique_nums([1, 1, 2, 2, 3]) == [1, 2, 3]\r\n    assert two_unique_nums([1, 4, 4, 4]) == [1]\r\n    assert two_unique_nums([1, 2, 3]) == [1, 2, 3]\r\n    assert two_unique_nums([1]) == [1]\r\n    assert two_unique_nums([]) == []\r\n    assert two_unique_nums([1, 3, 4, 5, 3, 2, 4]) == [1, 3, 5, 2, 4]\r\n    assert two_unique_nums([1, 1, 2, 2, 3]) == [1, 2, 3]\r\n    assert two_unique_nums([1, 4, 4, 4]) == [1]\r\n    assert two_unique_nums([1, 2, 3]) == [1, 2, 3]\r\n    assert two_unique_nums([1]) == [1]\r\n    assert two_unique_nums([]) =","votes":null},{"text":"\r\n    new_list = list(set(nums))\r\n    return new_list\r\n\r\nprint(two_unique_nums([1,2,3,3,4,3,2,2,1,1,3,3]))","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[j] == nums[i]:\r\n                nums.remove(nums[j])\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[j])\r\n    return nums\r\n\r\n\r\nmy_nums = [1, 2, 3, 1, 2, 3, 1, 4, 5]\r\nprint(two_unique_nums(my_nums))\r\n","votes":null},{"text":"\r\n    uniq_nums = list()\r\n    for num in nums:\r\n        if num not in uniq_nums:\r\n            uniq_nums.append(num)\r\n    return uniq_nums\r\n\r\n\r","votes":null},{"text":"\r\n    # create a new list without duplicate numbers\r\n    new_nums = []\r\n    # create a new list to store the indexes of the duplicate numbers\r\n    duplicate_nums = []\r\n    # create a new list to store the unique numbers\r\n    unique_nums = []\r\n\r\n    for i in range(len(nums)):\r\n        # check if the number is in the list already\r\n        if nums[i] in nums[duplicate_nums]:\r\n            duplicate_nums.append(nums.index(nums[i]))\r\n            # if the number is not in the list already, append it to the new list\r\n            new_nums.append(nums[i])\r\n        # if the number is not in the list already, append it to the new list\r\n        else:\r\n            new_nums.append(nums[i])\r\n\r\n    # after removing duplicate numbers, store the unique numbers in a new list\r\n    unique_nums = new_nums\r\n\r\n    return unique_nums\r\n\r\n\r","votes":null},{"text":"\r\n    for i in nums:\r\n        if nums.count(i) > 1:\r\n            nums.remove(i)\r\n\r\n\r","votes":null},{"text":"\r\n    nums_set = set()\r\n    for num in nums:\r\n        if num not in nums_set:\r\n            nums_set.add(num)\r\n    return list(nums_set)\r\n\r\n\r\n# This is the main function.\r\nif __name__ == '__main__':\r\n    print(two_unique_nums([1, 1, 2, 2, 3, 3]))\r\n","votes":null},{"text":"\r\n    unique_nums = set()\r\n    for num in nums:\r\n        if num in unique_nums:\r\n            unique_nums.remove(num)\r\n        else:\r\n            unique_nums.add(num)\r\n    return unique_nums\r\n\r\n\r","votes":null},{"text":"\r\n    set_nums = set(nums)\r\n    if len(nums) > 2:\r\n        return list(set_nums)\r\n    else:\r\n        return nums\r\n\r\n\r\n# Driver code\r\nnums = [1, 2, 3, 4, 2, 4, 5, 6, 7, 8, 9]\r\nunique_nums = two_unique_nums(nums)\r\nprint(unique_nums)\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    return list(set(nums))\r\n\r\nprint(two_unique_nums([1, 2, 3, 3, 4, 5, 5, 5]))\r\n\r","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        nums[i] = nums[i].sort()\r\n        print(nums[i])\r\n    unique_nums = []\r\n    for i in range(len(nums)):\r\n        if nums[i][0] not in unique_nums:\r\n            unique_nums.append(nums[i][0])\r\n            unique_nums.append(nums[i][1])\r\n    print(unique_nums)\r\n    return unique_nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [2, 7, 11, 13, 14, 12, 10, 15, 16, 17, 18, 19, 13, 14, 9, 5, 10, 18, 16, 17, 17, 15, 20]\r\n    two_unique_nums(nums)\r\n","votes":null},{"text":"\r\n    nums_dict = dict()\r\n    for num in nums:\r\n        if num in nums_dict:\r\n            nums_dict[num] += 1\r\n        else:\r\n            nums_dict[num] = 1\r\n    return list(filter(lambda x: x[1] == 1, nums_dict.items()))\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    for i in range(len(nums)):\r\n        for j in range(i+1,len(nums)):\r\n            if nums[i]==nums[j]:\r\n                nums.remove(nums[j])\r\n    return nums\r\n\r\n# tests\r\nprint(two_unique_nums([[1,2],[1,3],[1,2]]))\r\nprint(two_unique_nums([[1,2],[1,3],[2,2]]))\r\nprint(two_unique_nums([[1,2],[2,3],[1,2]]))","votes":null},{"text":"\r\n    unique_nums = set()\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.add(num)\r\n        else:\r\n            unique_nums.remove(num)\r\n    return unique_nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(two_unique_nums([1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 9]))\r\n    print(two_unique_nums([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6]))\r\n","votes":null},{"text":"\r\n    unique_nums = list(set(nums))\r\n    for i in range(len(unique_nums)):\r\n        if unique_nums.count(unique_nums[i]) > 1:\r\n            unique_nums.remove(unique_nums[i])\r\n    return unique_nums\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return list(set(nums))\r\n\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(two_unique_nums([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(two_unique_nums([0, 1, ","votes":null},{"text":"\r\n    # write your code here\r\n    if len(nums) == 1:\r\n        return nums\r\n    elif len(nums) == 2:\r\n        if nums[0] == nums[1]:\r\n            return nums[1:]\r\n        else:\r\n            return nums\r\n    elif len(nums) == 3:\r\n        if nums[0] == nums[1] or nums[0] == nums[2] or nums[1] == nums[2]:\r\n            return two_unique_nums(nums[1:])\r\n        else:\r\n            return nums\r\n    else:\r\n        nums_unique = set(nums)\r\n        return nums_unique\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    num_set = set()\r\n    for i in nums:\r\n        if i in num_set:\r\n            num_set.remove(i)\r\n        else:\r\n            num_set.add(i)\r\n    return num_set\r\n\r","votes":null},{"text":"\r\n    if len(nums) < 2:\r\n        return nums\r\n    else:\r\n        for i in range(len(nums)):\r\n            if nums[i] in nums[i+1:]:\r\n                nums.remove(nums[i])\r\n                nums.remove(nums[i+1])\r\n        return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n    return unique_nums\r\n```\r\n\r\n## Question 2:\r\n```python\r","votes":null},{"text":"\r\n    for num in nums:\r\n        if nums.count(num) == 1:\r\n            nums.remove(num)\r\n    return nums\r\n        \r","votes":null},{"text":"\r\n    # Code here\r\n    return_list = {}\r\n    for l in nums:\r\n        if l not in return_list:\r\n            return_list.update({l:True})\r\n        else:\r\n            return_list.update({l:False})\r\n\r\n    return list(return_list.keys())\r\n\r","votes":null},{"text":"\r\n    unique_nums = list(set(nums))\r\n    return unique_nums\r\n\r","votes":null},{"text":"\r\n    for i in range(0, len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[j])\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    return list(set(nums))\r\n\r\nprint(two_unique_nums([1,2,3,4,4,5,6,7,8,8,9])) \r\n\r\n# Output\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\"\"\"\r\nTime complexity: O(n)\r\nSpace complexity: O(n)\r\n\"\"\"","votes":null},{"text":"\r\n    nums = sorted(nums)\r\n    if len(nums) > 2:\r\n        for i in range(len(nums)):\r\n            if nums.count(nums[i]) > 1:\r\n                nums.remove(nums[i])\r\n                break\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10]\r\n    print(two_unique_nums(nums))","votes":null},{"text":"\r\n    return list(set(nums))\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums) == 0:\r\n        return\r\n    \r\n    unique_nums = []\r\n    \r\n    for item in nums:\r\n        if item not in unique_nums:\r\n            unique_nums.append(item)\r\n    \r\n    return unique_nums\r\n\r","votes":null},{"text":"\r\n    seen = set()\r\n    for n in nums:\r\n        if n not in seen:\r\n            seen.add(n)\r\n            yield n\r\n        else:\r\n            continue\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for num in nums:\r\n        if num not in result:\r\n            result.append(num)\r\n            result.append(num)\r\n    return result\r\n\r","votes":null},{"text":"\r\n    res = []\r\n    for i in range(len(nums)):\r\n        if nums[i] not in res:\r\n            res.append(nums[i])\r\n    return res\r\n\r","votes":null},{"text":"\r\n    if not nums:\r\n        return []\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n    return unique_nums\r\n\r\n\r","votes":null},{"text":"\r\n    x = set(nums)\r\n    return list(x)\r\n\r\nprint(two_unique_nums([1,2,3,4,3,2,1]))\r\n","votes":null},{"text":"\r\n    for num in nums:\r\n        if num not in nums[:] and num not in nums[:]:\r\n            return nums[:]\r\n    return nums[:]\r\n","votes":null},{"text":"\r\n    # set of unique numbers\r\n    unique_set = set(nums)\r\n    # remove two duplicates\r\n    unique_set.remove(nums[0])\r\n    unique_set.remove(nums[1])\r\n    return list(unique_set)\r\n\r\n\r\n# Tests\r\nprint(two_unique_nums([1, 2, 3, 4, 4, 5, 6]))\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6]))\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 6]))\r\nprint(two_unique_nums([1, 1, 3, 4, 5, 6, 6]))\r\nprint(two_unique_nums([1, 1, 1, 3, 4, 5, 6, 6]))\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 6, 6, 6]))\r\n\r\n\r\n# Solution\r\n#","votes":null},{"text":"\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n    return unique_nums\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    nums.sort()\r\n\r\n    for i in range(len(nums)-1):\r\n        if nums[i] == nums[i+1]:\r\n            nums.remove(nums[i])\r\n            nums.remove(nums[i])\r\n            nums.append(nums[i])\r\n            nums.append(nums[i])\r\n    return nums\r\n\r\nprint(two_unique_nums([1,2,3,4,5,3,4,5,6,7,8,9]))\r\nprint(two_unique_nums([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\r\nprint(two_unique_nums([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\r\nprint(two_unique_nums([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\r\nprint(two_unique_nums([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\r\nprint(two_unique_nums([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\r\nprint(two_unique_nums([1,1,1,1,1,1,1,1,1,1","votes":null},{"text":"\r\n    # get unique numbers\r\n    unique_nums = list(set(nums))\r\n\r\n    # remove two duplicate numbers\r\n    unique_nums.sort()\r\n    if len(unique_nums) > 2:\r\n        unique_nums = unique_nums[:2]\r\n\r\n    # return the unique numbers\r\n    return unique_nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_list = [1, 1, 2, 3, 3, 3, 4, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7]\r\n    print(two_unique_nums(test_list))\r\n","votes":null},{"text":"\r\n    res = []\r\n    for n in nums:\r\n        if n not in res:\r\n            res.append(n)\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums) == 0:\r\n        return []\r\n    else:\r\n        # use set() to convert the list to set\r\n        nums = set(nums)\r\n        return list(nums)\r\n\r","votes":null},{"text":"\r\n    if nums == []:\r\n        return []\r\n    unique_nums = []\r\n    num_set = set()\r\n    for num in nums:\r\n        if num not in num_set:\r\n            unique_nums.append(num)\r\n            num_set.add(num)\r\n\r\n    if len(unique_nums) > 2:\r\n        raise ValueError(\"There are more than two unique numbers.\")\r\n    else:\r\n        return unique_nums\r\n\r\n\r","votes":null},{"text":"\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n    return unique_nums\r\n\r","votes":null},{"text":"\r\n    # nums = [1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6]\r\n    # nums_set = set(nums)\r\n    # unique_nums = list(nums_set)\r\n\r\n    # return unique_nums\r\n\r\n    # nums1 = [1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6]\r\n    # nums2 = [1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6]\r\n    # for i in range(len(nums1)):\r\n    #     if nums1[i] in nums2:\r\n    #         nums2.remove(nums1[i])\r\n    #         print(nums2)\r\n\r\n    # nums1 = [1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6]\r\n    # nums2 = [1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6]\r\n    # for i in range(len(nums1)):\r\n    #     nums2.remove(nums1[i])\r\n    #     print(nums2)\r\n\r\n    # nums = [1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6]\r\n    # nums.sort()\r\n    # for i in range(len(nums)):\r\n    #     if nums[i] == nums[i+1]:\r\n    #         del nums[i]\r\n    #         print(nums)\r\n\r\n    # nums = [1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6]\r\n    # nums_set = set(nums)\r\n    # unique_nums = list(nums_set)\r\n    # unique_nums.sort()\r\n\r\n    # # nums_set = set([1, 2, 3, 4, 5, 6])\r\n    # # unique_nums = list(nums_se","votes":null},{"text":"\r\n    nums = [x for x in nums if x not in nums[:2]]\r\n    return nums\r\n\r\n\r\nnums = [1, 2, 2, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9]\r\nnums = two_unique_nums(nums)\r\nprint(nums)\r\n\r\n# 4. Remove two duplicate numbers from a given number of lists\r\n# Given a list of numbers, remove two duplicate numbers from it.\r\n# The function should not modify the original list.\r\n# Example :\r\n# remove_dup([1, 2, 2, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9])\r\n# Output :\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n# Hint :\r\n# Use a dictionary to store the unique numbers and remove the duplicate numbers.\r\n# You can use a list as a dictionary.\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums) < 2:\r\n        return nums\r\n    else:\r\n        nums.sort()\r\n\r\n    for i in range(len(nums)-1):\r\n        if nums[i] == nums[i+1]:\r\n            nums.remove(nums[i])\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n\r\n    return unique_nums\r\n\r\nif __name__ == '__main__':\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3]))\r\n","votes":null},{"text":"\r\n    nums = set(nums)\r\n    return list(nums)\r\n\r","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(len(nums)):\r\n            if i!= j:\r\n                if nums[i] == nums[j]:\r\n                    nums.remove(nums[j])\r\n    return nums\r\n\r","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(i+1,len(nums)):\r\n            if nums[i] == nums[j]:\r\n                del nums[j]\r\n    return nums\r\n\r\nprint(two_unique_nums([[1,1,2,2,3,3,4,4], [1,1,2,2,3,3,4,4]]))","votes":null},{"text":"\r\n    # Your code here\r\n    # nums = [2, 4, 2, 3, 5, 2, 4, 5, 5, 4, 3, 2]\r\n    # nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]\r\n    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\r\n\r\n    # remove duplicates from each item in the list\r\n    # then remove duplicates from the list itself\r\n    result = []\r\n    for item in nums:\r\n        if item not in result:\r\n            result.append(item)\r\n    return result\r\n\r\n\r\n# print(two_unique_nums(nums))\r\n# print(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\n\r\n# remove all duplicates from a list in place\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    return list(set(nums))\r\n\r\nif __name__ == '__main__':\r\n    # Driver Code\r\n    nums = [1, 2, 1, 3, 3, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,","votes":null},{"text":"\r\n    result = []\r\n    for num in nums:\r\n        if num not in result:\r\n            result.append(num)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    # Create a set of unique numbers.\r\n    unique_nums = set(nums)\r\n    # If the length is even, return the two unique numbers.\r\n    if len(unique_nums) % 2 == 0:\r\n        return list(unique_nums)\r\n    # If the length is odd, remove the middle number and return the two unique numbers.\r\n    else:\r\n        return list(unique_nums)[1:-1]\r\n\r\n\r","votes":null},{"text":"\r\n    nums_dict = {}\r\n    for num in nums:\r\n        if num in nums_dict:\r\n            nums_dict.pop(num)\r\n        else:\r\n            nums_dict.update({num:1})\r\n\r","votes":null}],"time":{"count":10.0,"avg":143802.97,"std":35668.744511896,"cov":0.2480389975}}
{"id":573,"question":"def unique_product(list_data):\r\n    \"\"\"Write a python function to calculate the product of the unique numbers of a given list.\"\"\"","answers":[{"text":"\r\n    # TODO: Write your function here\r\n    unique_list = list(set(list_data))\r\n    unique_product = 1\r\n    for item in unique_list:\r\n        unique_product = unique_product * item\r\n    return unique_product\r\n\r\n\r","votes":84065.852},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for element in unique_list:\r\n        product = product * element\r\n    return product\r\n\r\n\r","votes":87403.82},{"text":"\r\n    list_data.sort()\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\nprint(unique_product([1, 10, 100, 1000, 10000]))","votes":92462.616},{"text":"\r\n    # your code here\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([1, 1, 2, 2]))\r\n    print(unique_product([1, 1, 2, 2, 3]))\r\n    print(unique_product([1, 2, 3, 4, 5]))","votes":94206.14},{"text":"\r\n    unique = set(list_data)\r\n    product = 1\r\n    for i in unique:\r\n        product *= i\r\n    return product\r\n\r\n\r","votes":99681.756},{"text":"\r\n    unique_data = list(dict.fromkeys(list_data))\r\n    unique_product = 1\r\n    for item in unique_data:\r\n        unique_product = unique_product * item\r\n    return unique_product\r\n\r\n\r","votes":100059.116},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for item in unique_list:\r\n        product = product * item\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    result = unique_product([1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10])\r\n    print(result)\r\n","votes":104233.732},{"text":"\r\n    unique_data = []\r\n    for item in list_data:\r\n        if item not in unique_data:\r\n            unique_data.append(item)\r\n    unique_data.sort()\r\n    product = 1\r\n    for item in unique_data:\r\n        product *= item\r\n    return product\r\n\r\n\r","votes":104490.892},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n","votes":107245.172},{"text":"\r\n    unique_list = []\r\n    for each in list_data:\r\n        if each not in unique_list:\r\n            unique_list.append(each)\r\n    product = 1\r\n    for each in unique_list:\r\n        product *= each\r\n    return product\r\n\r\n\r","votes":109125.924},{"text":"\r\n    unique_numbers = list(set(list_data))\r\n    product = 1\r\n    for number in unique_numbers:\r\n        product = product * number\r\n    return product\r\n\r\n\r","votes":109938.18},{"text":"\r\n\r\n    unique_data = set(list_data)\r\n    unique_product = 1\r\n\r\n    for data in unique_data:\r\n        unique_product = unique_product * data\r\n\r\n    return unique_product\r\n\r\n\r","votes":109949.476},{"text":"\r\n    # Create a set of the unique numbers in the list\r\n    unique_numbers = set(list_data)\r\n\r\n    # Calculate the product of the unique numbers in the list\r\n    product = 1\r\n    for number in unique_numbers:\r\n        product *= number\r\n    \r\n    return product\r\n\r\n# Test case 1:\r\nlist_data = [1,2,3,4,5,6]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 2:\r\nlist_data = [1,2,3,4,5]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 3:\r\nlist_data = [1,2,3,4]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 4:\r\nlist_data = [1]\r\nprint(unique_product(list_data))\r\n\r\n# Test case 5:\r\nlist_data = []\r\nprint(unique_product(list_data))\r\n","votes":111007.024},{"text":"\r\n    list_data = list(set(list_data))\r\n    if len(list_data) == 0:\r\n        return 0\r\n    else:\r\n        product = 1\r\n        for i in list_data:\r\n            product = product * i\r\n        return product\r\n\r\n\r\nprint('The unique product of the numbers in a list is: ', unique_product([1, -2, 4, 4, 6, 8, -10, 2, 2]))\r\n","votes":113998.744},{"text":"\r\n    unique = list(set(list_data))\r\n    product = 1\r\n    for num in unique:\r\n        product = product * num\r\n    return product\r\n\r\n\r","votes":116147.892},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product = product * i\r\n    return product\r\n\r\n\r\n\"\"\"Exercise 2: Write a python function that takes a list of lists of lists of integers as an input and returns a list of integers with the maximum value in each sublist.\"\"\"\r","votes":116518.2},{"text":"\r\n    unique_num = list(set(list_data))\r\n    prod = 1\r\n    for i in unique_num:\r\n        prod *= i\r\n    return prod\r\n\r\n# Write a python function to calculate the sum of the integers in the given list.\r","votes":118761.796},{"text":"\r\n    unique_numbers = set(list_data)\r\n    product = 1\r\n    for i in unique_numbers:\r\n        product *= i\r\n    return product\r\n\r\n\r","votes":120829.152},{"text":"\r\n    unique_nums = list(set(list_data))\r\n    product = 1\r\n    for num in unique_nums:\r\n        product *= num\r\n    return product\r\n\r\n\r","votes":122564.688},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for item in unique_list:\r\n        product *= item\r\n    return product\r\n\r","votes":122896.184},{"text":"\r\n    data_unique = list(set(list_data))\r\n    product = 1\r\n    for d in data_unique:\r\n        product = product * d\r\n    return product\r\n\r\n\r","votes":123735.464},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r","votes":124746.868},{"text":"\r\n    list_data = list(set(list_data))\r\n    product = 1\r\n    for item in list_data:\r\n        product *= item\r\n    return product\r\n\r\n\r","votes":126787.864},{"text":"\r\n    # your code here\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 1, 2, 3, 4, 5, 6, 6, 5]))\r\nprint(unique_product([1, 1, 2, 3, 4, 5, 6, 6, 5, 3]))\r\nprint(unique_product([1, 1, 2, 3, 4, 5, 6, 6, 5, 3, 2]))\r\n","votes":127608.344},{"text":"\r\n    unique_data = list(set(list_data))\r\n    unique_product = 1\r\n    for i in unique_data:\r\n        index = list_data.index(i)\r\n        unique_product *= list_data[index]\r\n    return unique_product\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list_data = [2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(unique_product(list_data))\r\n","votes":128051.004},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1 \r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r","votes":131735.056},{"text":"\r\n    list_data = list(set(list_data))\r\n    product = 1\r\n    for number in list_data:\r\n        product *= number\r\n    return product\r\n\r\n\r","votes":135607.408},{"text":"\r\n    list_data.sort()\r\n    list_data = list(set(list_data))\r\n    unique_num = 1\r\n    for i in list_data:\r\n        unique_num = unique_num * i\r\n    return unique_num\r\n\r\n\r","votes":135952.808},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for num in unique_list:\r\n        product *= num\r\n    return product\r\n\r\n\r","votes":138379.508},{"text":"\r\n    # Write your code here\r\n    unique_list = list(set(list_data))\r\n    result = 1\r\n    for each in unique_list:\r\n        result *= each\r\n    return result\r\n\r\n\r\n# print(unique_product(list_data=list_data))\r\n\r","votes":139147.316},{"text":"\r\n    unique_numbers = list(set(list_data))\r\n    product = 1\r\n    for number in unique_numbers:\r\n        product *= number\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 12]))\r\n","votes":142420.132},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r","votes":142528.576},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for number in unique_list:\r\n        product *= number\r\n    return product\r\n\r\n\r","votes":147060.916},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    unique_list = sorted(unique_list)\r\n    unique_list_length = len(unique_list)\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n    # End your code here.\r\n\r\n\r","votes":147182.856},{"text":"\r\n    unique_list = list(set(list_data))\r\n    unique_list.sort()\r\n    unique_product = 1\r\n    for i in unique_list:\r\n        unique_product = unique_product * i\r\n    return unique_product\r\n\r\n\r","votes":149813.472},{"text":"\r\n    unique_list = list(set(list_data))\r\n    prod = 1\r\n    for num in unique_list:\r\n        prod *= num\r\n    return prod\r\n\r\n\r","votes":149871.324},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for value in unique_list:\r\n        product *= value\r\n    return product\r\n\r\n\r\n# Tests\r\nassert unique_product([1, 2, 3, 4, 5]) == 120, \"The value returned does not match the expected one.\"\r\nassert unique_product([1, 2, 3, 4, 5, 6]) == 720, \"The value returned does not match the expected one.\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7]) == 5040, \"The value returned does not match the expected one.\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8]) == 40320, \"The value returned does not match the expected one.\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 362880, \"The value returned does not match the expected one.\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800, \"The value returned does not match the expected one.\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 39916800, \"The value returned does not match the expected one.\"\r\n","votes":149939.92},{"text":"\r\n    list_unique = list(set(list_data))\r\n    product = 1\r\n    for i in list_unique:\r\n        product *= i\r\n    return product\r\n\r\n\r","votes":151804.708},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for item in unique_list:\r\n        product *= item\r\n    return product\r\n\r\n\r\nprint(unique_product([2, 3, 4]))\r\n","votes":153326.644},{"text":"\r\n    set_data = set(list_data)\r\n    prod = 1\r\n    for i in set_data:\r\n        prod = prod * i\r\n    return prod\r\n\r\n\r","votes":153403.464},{"text":"\r\n    unique_number = list(set(list_data))\r\n    product = 1\r\n    for num in unique_number:\r\n        product = product * num\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    print('Enter the numbers separated by space')\r\n    list_data = input().split()\r\n    print('The product of unique numbers is', unique_product(list_data))\r\n","votes":154472.208},{"text":"\r\n    unique = list(set(list_data))\r\n    product = 1\r\n    for i, j in enumerate(unique):\r\n        product *= j\r\n    return product\r\n\r\n\r","votes":167838.608},{"text":"\r\n    list_data = list(set(list_data))\r\n    prod = 1\r\n    for i in list_data:\r\n        prod *= i\r\n    return prod\r\n\r\nprint(unique_product([1, 1, 1, 2, 2, 3, 3, 4, 4]))\r\n","votes":191662.444},{"text":"\r\n    list_unique = []\r\n    list_product = 1\r\n    for i in range(len(list_data)):\r\n        if list_data[i] not in list_unique:\r\n            list_unique.append(list_data[i])\r\n    for i in range(len(list_unique)):\r\n        list_product *= list_unique[i]\r\n    return list_product\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Write your tests here.\r\n    product_of_unique_numbers = unique_product([1, 2, 5, 3, 2, 1, 1, 2, 1])\r\n    print(product_of_unique_numbers)\r\n","votes":197851.42},{"text":"\r\n    return reduce(lambda x,y: x*y, list(set(list_data)))\r\n\r\n\r\n#Test\r\nassert unique_product([1,2,3]) == 6\r\nassert unique_product([1,2,3,4]) == 24\r\n","votes":null},{"text":"\r\n    unique_list = []\r\n    if list_data == []:\r\n        return 1\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    return 1 * reduce(mul, unique_list)\r\n\r\n\r","votes":null},{"text":"\r\n    unique_list = set(list_data)\r\n    unique_list = list(unique_list)\r\n    unique_list.sort(reverse=True)\r\n    unique_list.sort()\r\n    unique_list = list(map(lambda x: x[0] * x[1], unique_list))\r\n    return unique_list[0]\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    list_data_unique = []\r\n    for i in list_data:\r\n        if i not in list_data_unique:\r\n            list_data_unique.append(i)\r\n    product = 1\r\n    for i in list_data_unique:\r\n        product = product * i\r\n    return product\r\n\r\nprint(unique_product([1,2,3,4,5,6,7,8,9]))\r\n```\r\n\r\n## 2.3.4.2.2.2.1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.","votes":null},{"text":"\r\n    # list_data = [3, 4, 2, 5, 5, 1, 4, 6, 7, 8]\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r\nprint(\"The product of the unique numbers is: {}\".format(unique_product(list_data)))\r\n\r\n\r\n# # 16. Write a python function to calculate the average of the numbers of a given list.\r\n# # 17. Write a python function to calculate the standard deviation of the numbers of a given list.\r\n\r\n\r\n# # 18. Write a python function to calculate the max of the numbers of a given list.\r\n# # 19. Write a python function to calculate the min of the numbers of a given list.\r\n\r\n\r\n# # 20. Write a python function to calculate the mode of the numbers of a given list.\r\n\r\n\r\n# # 21. Write a python function to calculate the median of the numbers of a given list.\r\n\r\n\r\n# # 22. Write a python function to calculate the mode of the numbers of a given list.\r\n\r\n\r\n# # 23. Write a python function to add two given lists.\r\n# # 24. Write a python function to subtract two given lists.\r\n# # 25. Write a python function to multiply two given lists.\r\n# # 26. Write a python function to divide two given lists.\r\n# # 27. Write a python function to return the intersection of two given lists.\r\n\r\n\r\n# # 28. Write a python function to return the union of two given lists.\r\n\r\n\r\n# # 29. Write a python function to return the difference between two given lists.\r\n\r\n\r\n# # 30. Write a python function to return the symmetric difference between two given lists.\r\n\r\n\r\n# # 31. Write a python function to check if a given list is empty.\r\n# # 32. Write a python function to check if a given list is not empty.\r\n# # 33. Write a python function to check if the given list is a permutation of th","votes":null},{"text":"\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    list_data = list(set(list_data))\r\n    return reduce(lambda x, y: x * y, list_data)\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\r\n","votes":null},{"text":"\r\n    list_data = list_data.copy()\r\n    for i in range(len(list_data)):\r\n        list_data[i] = list_data[i].replace(',', '')\r\n    list_data = list_data[:]\r\n    list_data = sorted(list_data)\r\n    list_data = list(set(list_data))\r\n    list_data = [int(i) for i in list_data]\r\n    return reduce(lambda x, y: x * y, list_data)\r\n\r\n\r","votes":null},{"text":"\r\n    unique_data = [item for item, count in collections.Counter(list_data).items() if count == 1]\r\n    return reduce(lambda x, y: x * y, unique_data)\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r","votes":null},{"text":"\r\n    return list(set([x for x in list_data if isinstance(x, int)]))\r\n\r\n\r","votes":null},{"text":"\r\n    list_data = sorted(list_data)\r\n    unique_data = []\r\n    for i in range(len(list_data)):\r\n        if i == 0:\r\n            unique_data.append(list_data[i])\r\n        elif list_data[i]!= list_data[i - 1]:\r\n            unique_data.append(list_data[i])\r\n    return reduce(lambda x, y: x * y, unique_data)\r\n\r\n\r","votes":null},{"text":"\r\n    list_data = list(map(int, list_data))\r\n    unique_data = list(set(list_data))\r\n    return reduce(lambda x, y: x*y, unique_data)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([1, 2, 3, 4, 5]))\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    unique_numbers = list(set(list_data))\r\n    unique_product = 1\r\n    for number in unique_numbers:\r\n        unique_product *= number\r\n    return unique_product\r\n\r\n# Do not change the code below\r\nassert unique_product([1, 2, 3, 4, 5]) == 120, \"Test 1 failed\"\r\nassert unique_product([1, 2, 3, 4, 5, 6]) == 720, \"Test 2 failed\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7]) == 5040, \"Test 3 failed\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8]) == 40320, \"Test 4 failed\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 362880, \"Test 5 failed\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800, \"Test 6 failed\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 39916800, \"Test 7 failed\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 479001600, \"Test 8 failed\"\r\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 622","votes":null},{"text":"\r\n    list_data = list(set(list_data))\r\n    return list_data[0] * list_data[1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([1, 2, 3, 4, 5]))\r\n    print(unique_product([1, 2, 3, 4, 5, 5]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 7]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 7, 8]))\r\n","votes":null},{"text":"\r\n    unique_data = list(set(list_data))\r\n    return reduce(lambda x, y: x * y, unique_data)\r\n\r\n\r\n# print(unique_product([2, 5, 8, 1, 2, 3, 4, 5]))\r\n\r\n\r","votes":null},{"text":"\r\n    unique_list = list(set(list_data))\r\n    return reduce(lambda x, y: x * y, unique_list)\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x*y, list(set(list_data)))\r\n\r","votes":null},{"text":"\r\n    unique_num = set(list_data)\r\n    return reduce(lambda x, y: x * y, unique_num)\r\n","votes":null},{"text":"\r\n    unique_nums = list(set(list_data))\r\n    return reduce(lambda a,b: a*b, unique_nums)\r\n\r","votes":null},{"text":"\r\n    list_unique = list(set(list_data))\r\n    list_unique_product = 1\r\n    for i in list_unique:\r\n        list_unique_product = list_unique_product * i\r\n    print(list_unique_product)\r\n\r\n\r\nunique_product([1, 2, 3, 4, 5, 6, 7, 8, 9])\r\nunique_product([1, 2, 3, 4, 5, 6, 7, 8])\r\nunique_product([3, 4, 5, 6, 7, 8, 9])\r\nunique_product([2, 3, 4, 5, 6, 7, 8, 9])\r\nunique_product([1, 2, 3, 4, 5, 6, 7])\r\nunique_product([1, 2, 3, 4, 5, 6])\r\nunique_product([1, 2, 3, 4, 5])\r\nunique_product([1, 2, 3, 4])\r\nunique_product([1, 2, 3])\r\nunique_product([1, 2])\r\nunique_product([1])\r\n","votes":null},{"text":"\r\n    i = 0\r\n    unique_list = []\r\n    while i < len(list_data):\r\n        if list_data[i] not in unique_list:\r\n            unique_list.append(list_data[i])\r\n        i += 1\r\n    return len(unique_list) * reduce(mul, unique_list)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list_data) == 0:\r\n        return 1\r\n    else:\r\n        return list_data[0] * unique_product(list_data[1:])\r\n\r\n\r","votes":null},{"text":"\r\n    unique_list = list(set(list_data))\r\n    unique_list = list(map(int, unique_list))\r\n    if len(unique_list) > 0:\r\n        return reduce(lambda x, y: x * y, unique_list)\r\n    else:\r\n        return 0\r\n\r\n\r\nprint(unique_product(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    unique_list = list(set(list_data))\r\n    if len(unique_list) == 1:\r\n        return 1\r\n    else:\r\n        product = product_list(unique_list)\r\n        return product\r\n\r\n\r","votes":null},{"text":"\r\n    # list_data = [1,1,2,3,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,","votes":null},{"text":"\r\n    list_data = list(map(int, list_data))\r\n    dict_count = {}\r\n    for i in list_data:\r\n        if i in dict_count:\r\n            dict_count[i] += 1\r\n        else:\r\n            dict_count[i] = 1\r\n    return list(map(lambda x: x*list_data.count(x), dict_count.keys()))\r\n\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n","votes":null},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    print(product)\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(unique_product(list_data))\r\n    unique_product(list_data)\r\n","votes":null},{"text":"\r\n    \r\n    unique_list = []\r\n    unique_tuple = ()\r\n    result_tuple = ()\r\n    \r\n    for x in list_data:\r\n        if x not in unique_list:\r\n            unique_list.append(x)\r\n            unique_tuple = tuple(unique_list)\r\n    unique_tuple = tuple(unique_list)\r\n    result_tuple = tuple(map(lambda x: x[0] * x[1], unique_tuple))\r\n    \r\n    return result_tuple\r\n\r\nprint(unique_product([1, 2, 3, 4, 5, 3]))\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x * y, list(set(list_data)))\r\n\r\n\r","votes":null},{"text":"\r\n    list_unique = list_data.copy()\r\n    list_unique.sort()\r\n    list_unique = list(set(list_unique))\r\n    return list_unique[0] * list_unique[-1]\r\n\r\n\r","votes":null},{"text":"\r\n    unique_product = 1\r\n    for item in list_data:\r\n        if item in list_data[1:]:\r\n            unique_product *= item\r\n    return unique_product\r\n\r\n\r\n# Write a function to calculate the product of the unique positive numbers of a given list\r","votes":null},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n        else:\r\n            unique_list.remove(i)\r\n    return reduce(lambda x, y: x * y, unique_list)\r\n\r\n\r\nunique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\n","votes":null},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    return reduce(lambda x, y: x * y, unique_list)\r\n\r\n\r\nprint(unique_product(list_data))","votes":null},{"text":"\r\n    unique_list = []\r\n    for i in range(len(list_data)):\r\n        unique_list.append(list_data.count(list_data[i]))\r\n    return(reduce(lambda x, y: x * y, unique_list))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([1, 1, 2, 3, 4, 5, 6]))\r\n    print(unique_product([1, 1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8]))\r\n    print(unique_product([1, 1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9]))\r\n\r\n","votes":null},{"text":"\r\n    unique_list = list(set(list_data))\r\n    return (unique_list[0] * unique_list[1] * unique_list[2])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    list_data_unique = list(set(list_data))\r\n    print(list_data_unique)\r\n    if len(list_data_unique) == 1:\r\n        product = list_data[0]\r\n    else:\r\n        product = 1\r\n        for i in list_data_unique:\r\n            product = product * i\r\n    print(product)\r\n\r\n\r\nunique_product([2, 3, 3, 4, 5])\r\n","votes":null},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    return 1 * (unique_list[0])\r\n\r","votes":null},{"text":"\r\n\r\n    list_data.sort()\r\n\r\n    list_unique = list(set(list_data))\r\n\r\n    return list_unique[0] * list_unique[-1]\r\n\r\n\r\nprint(unique_product([2, 1, 3, 10]))\r\nprint(unique_product([2, 2, 3, 3, 10]))\r\n","votes":null},{"text":"\r\n    result = 1\r\n    for i in list_data:\r\n        result *= i\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([1, 3, 3, 5, 2, 2, 1, 1, 1]))\r\n    print(unique_product([1, 3, 3, 5, 2, 2, 1, 1, 1, 1]))\r\n","votes":null},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    return (1) * sum(unique_list)\r\n\r\n\r","votes":null},{"text":"\r\n    unique_number = list(set(list_data))\r\n    return reduce(lambda x, y: x * y, unique_number)\r\n\r\n\r","votes":null},{"text":"\r\n    unique_list = list(set(list_data))\r\n    new_list = []\r\n    for i in unique_list:\r\n        new_list.append(list_data.count(i))\r\n    product = 1\r\n    for i in new_list:\r\n        product = product*i\r\n    return product\r\n\r\n\r\nprint(unique_product(data1))\r\n","votes":null},{"text":"\r\n    return reduce(lambda x, y: x*y, list(set(list_data)))\r\n\r\n\r\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\"} id=\"uV-b8c600gF6\" outputId=\"3084b324-99e8-4b9b-9007-0f02571782f6\"\r\nunique_product([1, 1, 2, 2, 3, 4, 5])\r\n\r\n# + [markdown] id=\"B48655u-445C\"\r\n# ### Challenge Question 2 - Write a python function to check if a given string is palindrome or not.\r\n#\r\n# **Hint:** Use a built-in function or a string method.\r\n\r\n# + id=\"b4b_f37544-c\"\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x*y, list(set(list_data)))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Your code here.\r\n    return(reduce(lambda x, y: x * y, set(list_data)))\r\n\r\n\r\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\"} id=\"6n_8lQ472-5i\" outputId=\"c0940c7a-7751-4599-945f-93b06688a768\"\r\n#Test your function\r\nassert unique_product([1, 2, 3, 4, 5]) == 120\r\n\r\n# + [markdown] id=\"C42g21dK3C97\"\r\n# # Problem 2 - Product of the last 3 digits of a number\r\n#\r\n# Write a python function to return the product of the last 3 digits of a number. For example, the product of the last 3 digits of 123456789 is 9660.\r\n#\r\n# Note: The number will always be a 10-digit number.\r\n#\r\n# Example:\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 123456789\r\n# 1234","votes":null},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    return reduce(lambda x, y: x * y, unique_list)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([4, 6, 2, 3, 7, 8, 1, 9, 5]))\r\n","votes":null},{"text":"\r\n\r\n    list_unique = []\r\n    for i in list_data:\r\n        if i not in list_unique:\r\n            list_unique.append(i)\r\n    return reduce(lambda a, b: a * b, list_unique)\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6]))\r\n","votes":null},{"text":"\r\n\r\n    list_data = list(set(list_data))\r\n    product = 1\r\n    for num in list_data:\r\n        product *= num\r\n    return product\r\n\r\n\r\nprint(unique_product(1))\r\nprint(unique_product(1, 1, 1, 1))\r\nprint(unique_product(1, 1, 2, 1))\r\nprint(unique_product(1, 1, 2, 3))\r\nprint(unique_product(1, 1, 2, 3, 3, 3))","votes":null},{"text":"\r\n    unique_list = []\r\n    for n in list_data:\r\n        if n not in unique_list:\r\n            unique_list.append(n)\r\n    return reduce(lambda x, y: x * y, unique_list)\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r","votes":null},{"text":"\r\n\r\n    unique_list = list(set(list_data))\r\n    unique_list.sort()\r\n    return reduce(lambda x, y: x * y, unique_list)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([3, 4, 5, 1, 2]))\r\n    print(unique_product([3, 4, 5, 1, 2, 5, 1, 2, 5, 1, 2]))\r\n    print(unique_product([3, 4, 5, 1, 2, 5, 1, 2, 5, 1, 2, 1, 1, 1]))\r\n","votes":null}],"time":{"count":44.0,"avg":128557.152,"std":25111.3550439619,"cov":0.1953322289}}
{"id":576,"question":"def is_Sub_Array(A,B,n,m):\r\n    \"\"\"Write a python function to check whether an array is subarray of another or not.\"\"\"","answers":[{"text":"\r\n    for i in range(n):\r\n        if A[i] not in B:\r\n            return False\r\n    return True\r\n\r","votes":92780.792},{"text":"\r\n    if n==0 and m==0:\r\n        return True\r\n    elif n==0 or m==0:\r\n        return False\r\n    else:\r\n        if A[n-1]==B[m-1]:\r\n            return is_Sub_Array(A,B,n-1,m-1)\r\n        else:\r\n            return is_Sub_Array(A,B,n-1,m)\r\n\r","votes":110439.524},{"text":"\r\n    if n==0 and m==0:\r\n        return True\r\n    elif n==0 or m==0:\r\n        return False\r\n    elif A[n-1] == B[m-1]:\r\n        return is_Sub_Array(A,B,n-1,m-1)\r\n    else:\r\n        return is_Sub_Array(A,B,n-1,m)\r\n\r","votes":110785.028},{"text":"\r\n    for i in range(len(A)):\r\n        if A[i] not in B:\r\n            return False\r\n    return True\r\n\"\"\"\r\nTime complexity: O(nm)\r\nSpace complexity: O(nm)\r\n\"\"\"\r\n\"\"\"\r\nInput:\r\nA = [1,4,6,8,11]\r\nB = [4,6,8]\r\nOutput: True\r\n\"\"\"\r\n","votes":112569.012},{"text":"\r\n    if m > n:\r\n        return False\r\n    for i in range(m):\r\n        if A[i] not in B:\r\n            return False\r\n    return True\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [2, 3, 4, 5]\r\n    m = len(B)\r\n    n = len(A)\r\n    if is_Sub_Array(A, B, n, m):\r\n        print(\"Given array is a subarray of another array\")\r\n    else:\r\n        print(\"Given array is not a subarray of another array\")\r\n","votes":113728.628},{"text":"\r\n    if A[0:m] == B:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":118095.576},{"text":"\r\n    if n>m:\r\n        return False\r\n    else:\r\n        for i in range(n):\r\n            if A[i] in B:\r\n                return True\r\n            else:\r\n                pass\r\n    return False\r\n\r","votes":120934.012},{"text":"\r\n    if len(B)>len(A):\r\n        return False\r\n    is_sub=True\r\n    for i in range(len(B)):\r\n        if A[i]!=B[i]:\r\n            is_sub=False\r\n            break\r\n    return is_sub\r\n\r\nif __name__ == '__main__':\r\n    A=[1,2,3,4,5]\r\n    B=[4,5,6]\r\n    m=len(B)\r\n    n=len(A)\r\n    print(is_Sub_Array(A,B,n,m))","votes":122541.248},{"text":"\r\n    sum1=0\r\n    for i in range(n):\r\n        sum1=sum1+A[i]\r\n    sum2=0\r\n    for j in range(m):\r\n        sum2=sum2+B[j]\r\n    if sum1==sum2:\r\n        return True\r\n    else:\r\n        return False\r","votes":134220.876},{"text":"\r\n    for i in range(len(A)):\r\n        if A[i] not in B:\r\n            return False\r\n    return True\r\n\r","votes":134886.9},{"text":"\r\n    for i in range(n):\r\n        if A[i] not in B:\r\n            return False\r\n    return True\r","votes":143184.6},{"text":"\r\n    for i in range(0,n):\r\n        if A[i] in B:\r\n            continue\r\n        else:\r\n            return False\r\n    return True\r\n\r\nif __name__ == '__main__':\r\n    t=int(input())\r\n    for _ in range(t):\r\n        n, m = map(int, input().split())\r\n        A = list(map(int, input().split()))\r\n        B = list(map(int, input().split()))\r\n        if is_Sub_Array(A,B,n,m):\r\n            print(\"Yes\")\r\n        else:\r\n            print(\"No\")\r\n","votes":144981.108},{"text":"\r\n    if n>m:\r\n        return False\r\n    for i in range(n):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n    \r","votes":145110.604},{"text":"\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r","votes":146320.872},{"text":"\r\n    if(n>m):\r\n        return False\r\n    for i in range(n):\r\n        if(A[i]!=B[i]):\r\n            return False\r\n    return True\r\n\r","votes":146779.932},{"text":"\r\n    if(A[0:m] == B[0:m]):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":150518.688},{"text":"\r\n    check=0\r\n    j=0\r\n    for i in range(n):\r\n        if A[i]==B[j]:\r\n            check=1\r\n            j+=1\r\n        elif A[i]!=B[j]:\r\n            check=0\r\n            j=0\r\n    if j==len(B):\r\n        return 1\r\n    else:\r\n        return 0\r\nif __name__==\"__main__\":\r\n    A=[int(x) for x in input().split()]\r\n    B=[int(x) for x in input().split()]\r\n    n=len(A)\r\n    m=len(B)\r\n    print(is_Sub_Array(A,B,n,m))\r\n","votes":151835.7},{"text":"\r\n    for i in range(m):\r\n        if A[i] not in B:\r\n            return False\r\n    return True\r\n\r\nif __name__ == '__main__':\r\n    A = [1,2,3]\r\n    B = [1,2]\r\n    if is_Sub_Array(A,B,3,2):\r\n        print(\"A is a subarray of B\")\r\n    else:\r\n        print(\"A is not a subarray of B\")\r\n","votes":157967.988},{"text":"\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if A[i] == B[j]:\r\n                break\r\n        else:\r\n            return False\r\n    if m == len(B):\r\n        return True\r\n    else:\r\n        return False\r\n\r\nif __name__ == \"__main__\":\r\n    A = [1,2,3,4]\r\n    B = [1,2,3]\r\n    print(is_Sub_Array(A,B,4,3))\r\n    A = [1,2,3,4]\r\n    B = [1,2,3,4,5]\r\n    print(is_Sub_Array(A,B,5,4))\r\n    A = [1,2,3,4]\r\n    B = [1,2,3,4]\r\n    print(is_Sub_Array(A,B,4,4))\r\n    A = [1,2,3,4]\r\n    B = [1,2,3,4,5]\r\n    print(is_Sub_Array(A,B,5,5))\r\n","votes":161848.652},{"text":"\r\n    for x in range(n):\r\n        if A[x] not in B:\r\n            return False\r\n    return True\r\n\r","votes":163363.964},{"text":"\r\n    for i in range(m):\r\n        if A[i] not in B:\r\n            return False\r\n    return True\r\n\r","votes":165928.676},{"text":"\r\n    if n < m:\r\n        return False\r\n    for i in range(m):\r\n        if A[n-m+i]!= B[i]:\r\n            return False\r\n    return True\r\n\r","votes":167765.172},{"text":"\r\n    for i in range(n):\r\n        if A[i] not in B:\r\n            return False\r\n    for i in range(m):\r\n        if A[i] not in B:\r\n            return False\r\n    return True\r\n\r","votes":170861.812},{"text":"\r\n    for i in range(0,n):\r\n        if A[i] not in B:\r\n            return False\r\n    return True\r\n\r","votes":175992.648},{"text":"\r\n    if len(A)>=len(B) and len(B)>=n and len(A)>=m:\r\n        for i in range(n):\r\n            if A[i] not in B:\r\n                return False\r\n        for i in range(m):\r\n            if B[i] not in A:\r\n                return False\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":181553.332},{"text":"\r\n    if A[0:m] == B[0:m]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    A = list(map(int, input().split()))\r\n    m = int(input())\r\n    B = list(map(int, input().split()))\r\n    if is_Sub_Array(A,B,n,m):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")","votes":189612.976},{"text":"\r\n    if n>m:\r\n        return False\r\n    elif n==m:\r\n        if A==B:\r\n            return True\r\n        else:\r\n            return False\r\n    else:\r\n        if A[n]==B[n]:\r\n            return is_Sub_Array(A,B,n+1,m)\r\n        else:\r\n            return is_Sub_Array(A,B,n+1,m)\r\n\r","votes":203284.772},{"text":"\r\n    if len(A) >= len(B):\r\n        for i in range(len(A)):\r\n            if A[i] not in B:\r\n                return False\r\n        return True\r\n    return False\r\n\r","votes":204868.64},{"text":"\r\n    i=0\r\n    j=0\r\n    while j<n:\r\n        if A[j]==B[i]:\r\n            i+=1\r\n        j+=1\r\n    if i==len(B):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Driver code\r\nif __name__=='__main__':\r\n    A = input(\"Enter the first array: \")\r\n    B = input(\"Enter the second array: \")\r\n    n = len(A)\r\n    m = len(B)\r\n    if is_Sub_Array(A,B,n,m):\r\n        print(\"The given array is subarray of another array\")\r\n    else:\r\n        print(\"The given array is not a subarray of another array\")","votes":207443.912},{"text":"\r\n    if(len(A)>=len(B)):\r\n        if(len(A)%len(B)==0):\r\n            for i in range(0,len(A)-len(B)+1):\r\n                if(A[i:i+len(B)]==B):\r\n                    return True\r\n    return False\r\n\r\nif __name__=='__main__':\r\n    n,m=map(int,input().split())\r\n    A=list(map(int,input().split()))\r\n    B=list(map(int,input().split()))\r\n    print(is_Sub_Array(A,B,n,m))\r\n","votes":228973.792},{"text":"\r\n    if A[0:n]==B[0:n]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\narr1 = [1, 2, 3, 4, 5, 6]\r\narr2 = [6, 7, 8, 9]\r\n\r\nif is_Sub_Array(arr, arr1, 5, 4):\r\n    print(\"array is a subarray of another\")\r\nelse:\r\n    print(\"array is not a subarray of another\")\r\nif is_Sub_Array(arr, arr2, 5, 4):\r\n    print(\"array is a subarray of another\")\r\nelse:\r\n    print(\"array is not a subarray of another\")","votes":230467.156},{"text":"\r\n    if (len(A) < len(B)):\r\n        return False\r\n    for i in range(len(B)):\r\n        if (A[i] not in B[i:i+len(B)]):\r\n            return False\r\n    return True\r\n\r","votes":239103.864},{"text":"\r\n    if len(A) < len(B):\r\n        return False\r\n    for i in range(len(A)):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r\nA = input(\"Enter the first array: \")\r\nB = input(\"Enter the second array: \")\r\nn = len(A)\r\nm = len(B)\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"The first array is a subarray of the second array.\")\r\nelse:\r\n    print(\"The first array is not a subarray of the second array.\")\r\n","votes":null},{"text":"\r\n    for i in range(len(A)):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n","votes":null},{"text":"\r\n    if n>m:\r\n        return False\r\n    for i in range(m):\r\n        if A[i]==B[0]:\r\n            for j in range(i+1,n):\r\n                if A[j]!=B[0]:\r\n                    break\r\n            else:\r\n                return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    n = int(raw_input())\r\n    A = map(int,raw_input().split())\r\n    B = map(int,raw_input().split())\r\n    m = len(B)\r\n    if is_Sub_Array(A,B,n,m):\r\n        print 'Yes'\r\n    else:\r\n        print 'No'\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    if(len(A) >= len(B)):\r\n        if(A == B[:len(A)]):\r\n            return True\r\n    else:\r\n        return False\r\nprint(is_Sub_Array(A,B,n,m))\r\n# -\r\n\r\n# ### Question 2.\r\n#\r\n# Write a python function to check whether an array is subarray of another or not.\r\n#\r\n# ### Input Format:\r\n#\r\n# The first line of input contains an integer T denoting the number of test cases. The first line of each test case contains an integer n denoting the length of array A. The second line of each test case contains an integer m denoting the length of array B. The next line contains n space separated integers denoting the elements of array A. The next line contains m space separated integers denoting the elements of array B.\r\n#\r\n# ### Output Format:\r\n#\r\n# For each test case, in a new line print \"Yes\" if the given array is a subarray of the other array, else print \"No\".\r\n#\r\n# ### Constraints:\r\n#\r\n# 1 <= T <= 100\r\n#\r\n# 1 <= n,m <= 10000\r\n#\r\n# ### Example:\r\n#\r\n# Input:\r\n# 2\r\n# 5\r\n# 1\r\n# 2 3 4 5 6\r\n# 4\r\n# 1 2 3 4\r\n# Output:\r\n# Yes\r\n# No\r\n#\r\n# ### Explanation:\r\n#\r\n# ### Test Case 1:\r\n#\r\n# The given array is a subarray of the other array.\r\n#\r\n# ### Test Case 2:\r\n#\r\n# The given array is not a subarray of the other array.\r\n#\r\n# ### Note:\r\n#\r\n# You don't have to read input or print anything. Your task is to complete the function is_Sub_Array() which takes the array A and array B, their lengths n and m a","votes":null},{"text":"\r\n    if A[0] in B:\r\n        return True\r\n    else:\r\n        for i in range(n):\r\n            if A[i] in B:\r\n                return True\r\n        return False\r\n\r","votes":null},{"text":"\r\n    if(A[0]<=B[0] and A[n-1]>=B[n-1]):\r\n        return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    if m==0:\r\n        return True\r\n    elif m>n:\r\n        return False\r\n    else:\r\n        if A[m]==B[m]:\r\n            return is_Sub_Array(A,B,n,m-1)\r\n        else:\r\n            return is_Sub_Array(A,B,n,m-1) or is_Sub_Array(A,B,n,m-1)\r\n    return True\r","votes":null},{"text":"\r\n#Write your code here\r\nif(A==B[0:n]):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n```\n<issue_comment>username_1: I would like to work on this issue. I have already solved the problem in C language. Please assign it to me.\n<issue_comment>username_0: @username_1 you can take it","votes":null},{"text":"\r\n    if(len(A)>=len(B)):\r\n        for i in range(len(A)):\r\n            if(A[i]!=B[i]):\r\n                break\r\n            else:\r\n                continue\r\n        else:\r\n            return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if A[i][j] == B[i][j]:\r\n                continue\r\n            else:\r\n                return False\r\n    return True\r\n\r","votes":null},{"text":"\r\n    if(len(A)==len(B)):\r\n        if(n==0):\r\n            return True\r\n        elif(A[n-1]==B[n-1]):\r\n            return is_Sub_Array(A,B,n-1,m)\r\n    return False\r\n\r\nprint(is_Sub_Array(A,B,n,m))","votes":null},{"text":"\r\n    if A == B:\r\n        return True\r\n    else:\r\n        if A[n] not in B:\r\n            return False\r\n        else:\r\n            return is_Sub_Array(A,B,n+1,m) or is_Sub_Array(A,B,n,m)\r\n\r\nif __name__ == '__main__':\r\n    #A = [1,2,3,4,5]\r\n    #B = [3,4,5,6,7]\r\n    #print(is_Sub_Array(A,B,0,len(A)))\r\n    #print(is_Sub_Array(A,B,1,len(A)))\r\n    #print(is_Sub_Array(A,B,2,len(A)))\r\n    #print(is_Sub_Array(A,B,3,len(A)))\r\n    #print(is_Sub_Array(A,B,4,len(A)))\r\n    A = [1,2,3,4,5]\r\n    B = [3,4,5,6,7]\r\n    print(is_Sub_Array_v2(A,B))\r\n","votes":null},{"text":"\r\n    for i in range(m):\r\n        if A[B[i]] == A[B[i]+1]:\r\n            return 'Yes'\r\n    return 'No'\r\n```\r\n\r\n```\r\nA = [1, 2, 3, 5, 7, 8, 9, 10]\r\nB = [0, 2, 3, 5, 6, 7, 8, 9]\r\nn = 10\r\nm = 7\r\nprint(is_Sub_Array(A,B,n,m))\r\n```\r\nOutput:\r\n```\r\nYes\r\n```\r\n\r\n## 10. Reversing a string\r\n\r\nGiven a string s, reverse it, and return the reversed string.\r\n\r\nExample 1:\r\n```\r\nInput: s = \"hello\"\r\nOutput: \"olleh\"\r\n```\r\n\r\nExample 2:\r\n```\r\nInput: s = \"A man, a plan, a canal: Panama\"\r\nOutput: \"amanaP :lanac a,nalp a,nam A\"\r\n```\r\n\r\nConstraints:\r\n```\r\n1 <= s.length <= 105\r\ns consist of printable ASCII characters.\r\n```\r\n\r\nSolution:\r\n```python\r","votes":null},{"text":"\r\n    if(m==1):\r\n        for i in range(n):\r\n            if(A[i]==B[0]):\r\n                return True\r\n        return False\r\n    elif(m>1):\r\n        for i in range(n):\r\n            if(A[i]==B[0]):\r\n                if(is_Sub_Array(A,B[1:],n-1,m-1)):\r\n                    return True\r\n        return False\r\nA=[1,2,3,4]\r\nB=[1,2]\r\nprint(is_subarray(A,B,len(A),len(B)))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if A[i][j]!=B[i][j]:\r\n                return False\r\n    return True\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    n, m = map(int, input().strip().split())\r\n    A = [[int(x) for x in input().strip().split()] for _ in range(n)]\r\n    B = [[int(x) for x in input().strip().split()] for _ in range(m)]\r\n    print(is_Sub_Array(A,B,n,m))\r\n","votes":null},{"text":"\r\n    if n>m:\r\n        return False\r\n    if n==0:\r\n        return True\r\n    return A[n-1]==B[0] and is_Sub_Array(A,B,n-1,m)\r\n\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7], 7,8))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8], 7,9))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], 7,9))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8], 7,9))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8], 7,9))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8], 7,9))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8], 7,9))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8], 7,9))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [1","votes":null},{"text":"\r\n    if n>=m:\r\n        return False\r\n    for i in range(n,m):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    if n==0:\r\n        return True\r\n    if B[n-1] in A:\r\n        return is_Sub_Array(A,B,n-1,m)\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    if n>m:\r\n        return False\r\n    for i in range(n):\r\n        if A[i]!=B[n-i-1]:\r\n            return False\r\n    return True\r\n\r\n# Driver code\r\nn=int(input())\r\nA=list(map(int,input().split()))\r\nm=int(input())\r\nB=list(map(int,input().split()))\r\n\r\nif(count(A,n,m)==count(B,m,n)):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n","votes":null},{"text":"\r\n    if(A[0]==B[0] and A[n-1]==B[n-1]):\r\n        for i in range(1,n-1):\r\n            if(A[i]!=B[i]):\r\n                return False\r\n        return True\r\n    else:\r\n        return False\r\n    \r","votes":null},{"text":"\r\n    if(A[0]>B[0] or A[0]>=B[0] and A[0]<=B[1] or A[0]>=B[1]):\r\n        return False\r\n    for i in range(1,n):\r\n        if(A[i]>B[0] and A[i]<B[1]):\r\n            return False\r\n    return True\r\n\r","votes":null},{"text":"\r\n    i=0\r\n    j=0\r\n    while(i<n and j<m):\r\n        if A[i]==B[j]:\r\n            j+=1\r\n        else:\r\n            i+=1\r\n    if j==m:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(is_Sub_Array(A,B,m,n))","votes":null},{"text":"\r\n    if(len(B)>=len(A)):\r\n        return False\r\n    for i in range(len(B)):\r\n        if(B[i] not in A[n-len(B) +i:n]):\r\n            return False\r\n    return True\r\nprint(is_Sub_Array(A,B,n,m))\r\n```\r\n\r\n### Expected Output:\r\n```\r\nTrue\r\n```\r\n### Explanation:\r\nThe first line of code is to create an array A with length 10.\r\nThe second line of code is to create an array B with length 5.\r\nThe third line of code is to check whether the array A is a subarray of B or not.\r\n\r\n## Task 2:\r\n### Script:\r\n```py\r\nn,m=map(int,input().split())\r\nA=list(map(int,input().split()))\r\nB=list(map(int,input().split()))\r","votes":null},{"text":"\r\n    return B in A[n-len(B)+1:n]\r\n\r\nprint(is_Sub_Array(A,B,9,6)) #should return True\r\nprint(is_Sub_Array(A,C,9,6)) #should return True\r\nprint(is_Sub_Array(A,D,9,6)) #should return False\r\nprint(is_Sub_Array(A,E,9,6)) #should return False\r\nprint(is_Sub_Array(A,F,9,6)) #should return False\r\nprint(is_Sub_Array(A,G,9,6)) #should return True\r\nprint(is_Sub_Array(A,H,9,6)) #should return False\r\nprint(is_Sub_Array(A,I,9,6)) #should return False\r\nprint(is_Sub_Array(A,J,9,6)) #should return True\r\nprint(is_Sub_Array(A,K,9,6)) #should return False\r\nprint(is_Sub_Array(A,L,9,6)) #should return False\r\nprint(is_Sub_Array(A,M,9,6)) #should return True\r\nprint(is_Sub_Array(A,N,9,6)) #should return False\r\nprint(is_Sub_Array(A,O,9,6)) #should return False\r\nprint(is_Sub_Array(A,P,9,6)) #should return True\r\nprint(is_Sub_Array(A,Q,9,6)) #should return False\r\nprint(is_Sub_Array(A,R,9,6)) #should return False\r\nprint(is_Sub_Array(A,S,9,6)) #should return True\r\nprint(is_Sub_Array(A,T,9,6)) #should return False\r\nprint(is_Sub_Array(A,U,9,6)) #should return False\r\nprint(is_Sub_Array(A,V,9,6)) #should return Tru","votes":null},{"text":"\r\n    c=0\r\n    for i in range(len(A)):\r\n        if A[i] in B:\r\n            if c==0:\r\n                c+=1\r\n            else:\r\n                return False\r\n    return True\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    #Taking the array\r\n    A=[1,2,3,4,5,6,7,8]\r\n    #Taking the array\r\n    B=[1,2,3,4]\r\n    n=len(A)\r\n    m=len(B)\r\n    #Calling the function\r\n    if is_Sub_Array(A,B,n,m) == True:\r\n        print('Yes')\r\n    else:\r\n        print('No')\r\n","votes":null},{"text":"\r\n    if n <= m:\r\n        for i in range(n):\r\n            if A[i] in B:\r\n                return True\r\n    else:\r\n        for i in range(m,n):\r\n            if A[i] in B:\r\n                return True\r\n    return False\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    n,m = map(int,input().split())\r\n    A = list(map(int,input().split()))\r\n    B = list(map(int,input().split()))\r\n    print(is_Sub_Array(A,B,n,m))","votes":null},{"text":"\r\n    if (n==0 or m==0):\r\n        return False\r\n    if (B[0] == A[0] and is_Sub_Array(A,B[1:],n-1,m-1)):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    for i in range(m,n):\r\n        if A[i]==B[0]:\r\n            break\r\n    else:\r\n        return False\r\n    for i in range(m,n):\r\n        if A[i]!=B[0]:\r\n            return False\r\n    return True\r\n\r","votes":null},{"text":"\r\n    return all(A[i] in B for i in range(n) if A[i] in B) or all(B[i] in A for i in range(m) if B[i] in A)\r\n\r","votes":null},{"text":"\r\n    if (n==0 and m==0):\r\n        return True\r\n    elif (n==0 or m==0):\r\n        return False\r\n    else:\r\n        if A[n-1] == B[m-1]:\r\n            return is_Sub_Array(A,B,n-1,m-1)\r\n        else:\r\n            return is_Sub_Array(A,B,n,m-1) or is_Sub_Array(A,B,n-1,m)\r\n\r","votes":null},{"text":"\r\n    if n>m:\r\n        return 0\r\n    for i in range(m,n):\r\n        if A[i] in B:\r\n            return 1\r\n    return 0\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [4, 5]\r\n    print(is_Sub_Array(A, B, len(A), len(B)))","votes":null},{"text":"\r\n    for i in range(n):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r","votes":null},{"text":"\r\n    if m <= n:\r\n        for i in range(n,0,-1):\r\n            if A[i] in B:\r\n                return True\r\n        return False\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    i=0\r\n    j=0\r\n    while i<len(A):\r\n        while j<len(B):\r\n            if A[i]==B[j]:\r\n                return True\r\n            j+=1\r\n        i+=1\r\n        j=0\r\n    return False\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n# The above code is written by <NAME>. ","votes":null},{"text":"\r\n    if (n > m):\r\n        return False\r\n    for i in range(n):\r\n        if (A[i]!= B[i]):\r\n            return False\r\n    return True\r\nprint(is_Sub_Array(A,B,5,4))\r\n","votes":null},{"text":"\r\n    for i in range(m):\r\n        if (A[i] not in B) and (B[i] not in A):\r\n            return False\r\n    return True\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if A[i+j]!=B[i]:\r\n                return False\r\n    return True\r\nif __name__ == '__main__':\r\n    A = [1, 1, 5, 2]\r\n    B = [1, 4, 2]\r\n    n = len(A)\r\n    m = len(B)\r\n    if is_Sub_Array(A,B,n,m):\r\n        print(\"A is a subarray of B\")\r\n    else:\r\n        print(\"A is not a subarray of B\")\r\n","votes":null},{"text":"\r\n    if A[0] in B:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nis_Sub_Array(A,[1,2,3],3,3)\r\n```\r\n\r\n```\r\ninput:\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2,3]\r\n[1,2","votes":null},{"text":"\r\n    for i in range(n-m+1):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\nA = input(\"Enter the array: \").split()\r\nB = input(\"Enter the array: \").split()\r\nprint(\"The array is subarray of the given array: \",is_Sub_Array(A,B,len(A),len(B)))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        if A[i]==B[0]:\r\n            flag=True\r\n            for j in range(m):\r\n                if A[i+j+1]!=B[j+1]:\r\n                    flag=False\r\n                    break\r\n            if flag:\r\n                return(i)\r\n    return(-1)\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    t=int(input())\r\n    for _ in range(t):\r\n        n,m=map(int,input().split())\r\n        A=list(map(int,input().split()))\r\n        B=list(map(int,input().split()))\r\n        if is_Sub_Array(A,B,n,m) == -1:\r\n            print(\"Not a subarray\")\r\n        else:\r\n            print(\"Yes\")","votes":null},{"text":"\r\n    if(n==0):\r\n        return True\r\n    if(A[n] in B):\r\n        return is_Sub_Array(A,B,n-1,m)\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if(A[i] == B[j]):\r\n                return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    A = list(map(int, input().split()))\r\n    m = int(input())\r\n    B = list(map(int, input().split()))\r\n    print(is_Sub_Array(A,B,n,m))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [3, 4]\r\n    m = len(B)\r\n    n = len(A)\r\n    print(is_Sub_Array(A,B,n,m))\r\n    # Output: True\r\n","votes":null},{"text":"\r\n    #Your code here\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if A[i] == B[j]:\r\n                return (True,i,j)\r\n    return (False,-1,-1)\r\n\r\nif __name__ == \"__main__\":\r\n    n, m = map(int, input().split())\r\n    A, B = map(list, input().split())\r\n    print(is_Sub_Array(A,B,n,m))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [1, 2, 3, 4]\r\n    n = len(A)\r\n    m = len(B)\r\n    print(is_Sub_Array(A, B, n, m))\r\n","votes":null},{"text":"\r\n    for i in range(len(A)):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\"\"\"\r\nSample Input :-\r\nEnter the size of the array:-\r\n4\r\nEnter the array elements:\r\n[1, 2, 3, 4]\r\nEnter the size of the second array:-\r\n3\r\nEnter the array elements:\r\n[2, 3, 4]\r\nOutput:-\r\nTrue\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    if len(A) <= n:\r\n        return False\r\n    for i in range(n):\r\n        if A[i]!= B[i]:\r\n            return False\r\n    return True\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if A[i] == B[j] and A[i]!= B[j]:\r\n                return False\r\n    return True\r\n\r\nif __name__ == '__main__':\r\n    n,m = map(int, input().split())\r\n    A = input().split()\r\n    B = input().split()\r\n    print(is_Sub_Array(A,B,n,m))","votes":null},{"text":"\r\n    if n==0:\r\n        return 0\r\n    if m==0:\r\n        return 1\r\n    if A[n-1]>B[m-1]:\r\n        return is_Sub_Array(A,B,n-1,m)\r\n    else:\r\n        return is_Sub_Array(A,B,n,m-1)\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    T = int(input())\r\n    for t in range(T):\r\n        n,m = map(int,input().split())\r\n        A = list(map(int,input().split()))\r\n        B = list(map(int,input().split()))\r\n        if is_Sub_Array(A,B,n,m):\r\n            print(\"Yes\")\r\n        else:\r\n            print(\"No\")\r\n\r\n","votes":null},{"text":"\r\n    if A==[]:\r\n        return 1\r\n    else:\r\n        if A[0]==B[0]:\r\n            if is_Sub_Array(A[1:],B[1:],n,m+1):\r\n                return 1\r\n        if m==n:\r\n            return 0\r\n        else:\r\n            return 0\r\n\r\n'''\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nprint(is_Sub_Array(l,l,n,0))\r\n'''\r\n'''\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nprint(is_Sub_Array(l,l,n,0))\r\n'''\r\n'''\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nprint(is_Sub_Array(l,l,n,0))\r\n'''\r\n'''\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nprint(is_Sub_Array(l,l,n,0))\r\n'''\r\n'''\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nprint(is_Sub_Array(l,l,n,0))\r\n'''\r\n'''\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nprint(is_Sub_Array(l,l,n,0))\r\n'''\r\n'''\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nprint(is_Sub_Array(l,l,n,0))\r\n'''\r\n'''\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nprint(is_Sub_Array(l,l,n,0))\r\n'''\r\n'''\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nprint(is_Sub_Array(l,l,n,0))","votes":null},{"text":"\r\n    if (B in A) and (B in A[B:n]):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    n=int(input())\r\n    A = list(map(int,input().split()))\r\n    m=int(input())\r\n    B = list(map(int,input().split()))\r\n    print(is_Sub_Array(A,B,n,m))\r\n","votes":null},{"text":"\r\n    for i in range(n):\r\n        if A[i]==B[m]:\r\n            if i==0:\r\n                return True\r\n            else:\r\n                continue\r\n        else:\r\n            return False\r\n\r","votes":null},{"text":"\r\n    if n>m:\r\n        return False\r\n    elif n==m:\r\n        if A[n]==B[0]:\r\n            return True\r\n        else:\r\n            return False\r\n    else:\r\n        for i in range(n,m):\r\n            if A[i]==B[n-1]:\r\n                return is_Sub_Array(A,B,n+1,m)\r\n            else:\r\n                return False\r\n\r","votes":null},{"text":"\r\n    for i in range(0,n):\r\n        for j in range(0,m):\r\n            if A[i] == B[j]:\r\n                return True\r\n    return False\r\n\r\n\r\nclass Test_1(unittest.TestCase):\r\n    \"\"\"Test case for Subarray_sum_of_two_arrays\"\"\"\r\n   ","votes":null},{"text":"\r\n    if A is None or B is None:\r\n        return False\r\n    k=0\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if A[i][j]!=B[k]:\r\n                break\r\n            else:\r\n                k+=1\r\n        if k==m:\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    for i in range(0,m):\r\n        if A[i] == B[0]:\r\n            break\r\n    if i == m:\r\n        return True\r\n    for j in range(1,n):\r\n        if A[i+j]!= B[j]:\r\n            return False\r\n    return True\r\n\r","votes":null},{"text":"\r\n    #A and B are subarrays of each other if they have atleast one common element\r\n    #if A is subarray of B, then A is also subarray of A[::-1]\r\n    #if A is not subarray of B, then A is not subarray of A[::-1]\r\n    #if A is not subarray of B, then B is not subarray of A[::-1]\r\n    \r\n    #check for common element\r\n    for i in range(n):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r\n\r\n# +\r","votes":null},{"text":"\r\n    for i in range(m):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    for i in range(0,len(A)):\r\n        for j in range(0,len(B)):\r\n            if A[i]==B[j]:\r\n                if (A[i:i+m] == B[j:j+n]).all():\r\n                    return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n\r\n    if (n == 0):\r\n        return True\r\n    elif(A[n-1] > B[0] or A[n-1] < B[1]):\r\n        return False\r\n    else:\r\n        return is_Sub_Array(A,B,n-1,m)\r\n\r","votes":null},{"text":"\r\n    if m>n:\r\n        return False\r\n    for i in range(m):\r\n        if A[i]==B[i]:\r\n            break\r\n    if i==m:\r\n        return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    if len(B) > len(A):\r\n        return False\r\n    for i in range(len(B)):\r\n        if A[i] in B:\r\n            return True\r\n    return False\r\n\r\nif __name__ == \"__main__\":\r\n    A = [1,2,3,4]\r\n    B = [1,2,3]\r\n    print(is_Sub_Array(A,B,4,3))","votes":null}],"time":{"count":32.0,"avg":157773.45175,"std":38017.6099994747,"cov":0.2409632899}}
{"id":577,"question":"def last_Digit_Factorial(n):\r\n    \"\"\"Write a python function to find the last digit in factorial of a given number.\"\"\"","answers":[{"text":"\r\n    factorial = 1\r\n    while n > 0:\r\n        factorial *= n\r\n        n -= 1\r\n    return factorial % 10\r\n\r\n\r","votes":52048.792},{"text":"\r\n    factorial = 1\r\n    while n!= 0:\r\n        factorial *= n\r\n        n -= 1\r\n    return factorial % 10\r\n\r\n\r","votes":76380.056},{"text":"\r\n    factorial=1\r\n    while n>0:\r\n        factorial*=n\r\n        n-=1\r\n    return factorial%10\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(last_Digit_Factorial(123456))\r\n    print(last_Digit_Factorial(123456789))\r\n","votes":129371.244},{"text":"\r\n    a = 1\r\n    for i in range(1, n + 1):\r\n        a = a * i\r\n    return a % 10\r\n\r\n# Driver Code\r\nprint(last_Digit_Factorial(5)) \r\n# Output : 5\r\nprint(last_Digit_Factorial(10)) \r\n# Output : 2\r\nprint(last_Digit_Factorial(50)) \r\n# Output : 0\r\nprint(last_Digit_Factorial(100)) \r\n# Output : 1\r\nprint(last_Digit_Factorial(1000)) \r\n# Output : 0","votes":227299.124},{"text":"\r\n    n = str(n)\r\n    return int(n[-1])\r\n\r\n\r\nprint(last_Digit_Factorial(5))\r\nprint(last_Digit_Factorial(100))","votes":null},{"text":"\r\n    print(\"The last digit of the factorial of\",n,\"is\",n%10)\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1)\r\n\r\n\r\n# -\r\n\r\n# ## Factorial of a number using recursion\r\n#\r\n# 1. Find the factorial of a number\r\n# 2. Find the factorial of a number using recursion\r\n# 3. Find the factorial of a number using recursion with a break statement\r\n# 4. Find the factorial of a number using recursion with a continue statement\r\n# 5. Find the factorial of a number using recursion with a return statement\r\n# 6. Find the factorial of a number using recursion with a try\/except statement\r\n# 7. Find the factorial of a number using recursion with a try\/except statement and a break statement\r\n# 8. Find the factorial of a number using recursion with a try\/except statement and a continue statement\r\n# 9. Find the factorial of a number using recursion with a try\/except statement and a return statement\r\n# 10. Find the factorial of a number using recursion with a try\/finally statement\r\n# 11. Find the factorial of a number using recursion with a try\/finally statement and a break statement\r\n# 12. Find the factorial of a number using recursion with a try\/finally statement and a continue statement\r\n# 13. Find the factorial of a number using recursion with a try\/finally statement and a return statement\r\n# 14. Find the factorial of a number using recursion with a try\/except\/finally statement\r\n# 15. Find the factorial of a number using recursion with a try\/except\/finally statement and a break statement\r\n# 16. Find the factorial of a number using recursion with a try\/except\/finally statement and a continue statement\r\n# 17. Find the factorial of a number using recursion with a try\/except\/finally statement and a return statement\r\n# 18. Find the factorial of a number using recursion with a while loop\r\n# 19. Find the factorial of a number using recursion with a while loop and a break statement\r\n","votes":null},{"text":"\r\n    if n < 10:\r\n        return 1\r\n    else:\r\n        return n%10 * last_Digit_Factorial(n\/\/10)\r\nprint(last_Digit_Factorial(25))\r\nprint(last_Digit_Factorial(123456789))","votes":null},{"text":"\r\n    return n%9\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(last_Digit_Factorial(n))","votes":null},{"text":"\r\n    n = str(n)\r\n    return int(n[-1])\r\n\r\n\r","votes":null},{"text":"\r\n    n = int(n)\r\n    if n > 0:\r\n        return n % 10\r\n    else:\r\n        return 0\r\n\r","votes":null},{"text":"\r\n    if n < 1:\r\n        return 0\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n - 1)\r\n\r\nprint(last_Digit_Factorial(5))\r\nprint(last_Digit_Factorial(6))\r\n\r\n","votes":null},{"text":"\r\n    return int(str(n)[-1])\r\n\r\n\r","votes":null},{"text":"\r\n    return n%10\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1)\r\n\r","votes":null},{"text":"\r\n    return int(str(n)[-1])\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    num = 1\r\n    while (n > 1):\r\n        num *= n\r\n        n -= 1\r\n    print(last_Digit_Factorial(num))\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10\r\n\r\nprint(last_Digit_Factorial(456))\r\n\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n - 1)\r\n\r\nif __name__ == '__main__':\r\n    print(last_Digit_Factorial(123456789))\r\n    print(last_Digit_Factorial(0))\r\n    # print(last_Digit_Factorial(100))\r\n    # print(last_Digit_Factorial(1000))\r\n    # print(last_Digit_Factorial(10000))\r\n    # print(last_Digit_Factorial(100000))\r\n    # print(last_Digit_Factorial(1000000))\r\n    # print(last_Digit_Factorial(10000000))\r\n    # print(last_Digit_Factorial(100000000))\r\n    # print(last_Digit_Factorial(1000000000))\r\n    # print(last_Digit_Factorial(10000000000))\r\n    # print(last_Digit_Factorial(100000000000))\r\n    # print(last_Digit_Factorial(1000000000000))\r\n    # print(last_Digit_Factorial(10000000000000))\r\n    # print(last_Digit_Factorial(100000000000000))\r\n    # print(last_Digit_Factorial(1000000000000000))\r\n    # print(last_Digit_Factorial(10000000000000000))\r\n    # print(last_Digit_Factorial(100000000000000000))\r\n    # print(last_Digit_Factorial(1000000000000000000))\r\n    # print(last_Digit_Factorial(10000000","votes":null},{"text":"\r\n    if n < 0:\r\n        print(\"Sorry, Factorial does not exist for negative numbers\")\r\n    elif n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n%10\r\n\r","votes":null},{"text":"\r\n    return 0 if n == 0 else n % 9\r\n\r\n\r","votes":null},{"text":"\r\n    return int(_factorial(n)[-1])\r\n\r\n\r","votes":null},{"text":"\r\n    return n%10\r\n\r\n\r\nprint(last_Digit_Factorial(123456789))\r\n```\r\nThe code is taken from the following [website](https:\/\/www.geeksforgeeks.org\/python-program-find-last-digit-factorial\/).\r\n\r\n### Expected Behavior\r\nThe output should be `9`.\r\n\r\n### Actual Behavior\r\nThe output is `None`.\r\n\r\n### Environment\r\n* Operating System: Windows 10\r\n* Python Version: 3.8.2\r\n* How did you install Trixi: pip install git+https:\/\/github.com\/trixi-framework\/trixi\r\n* Python packages: trixi, numpy, scipy, sklearn, pytest, pytest-cov\n<issue_comment>username_1: Thanks for reporting this. I think it is a bug in our code. I will look into it.","votes":null},{"text":"\r\n    try:\r\n        return n%10\r\n    except Exception as e:\r\n        return 0\r\n\r\n\r\nif __name__=='__main__':\r\n    print(\"Enter the number\")\r\n    n=int(input())\r\n    print(\"The last digit of factorial of number\",n,\"is\",last_Digit_Factorial(n))\r\n    \r\n    \r\n","votes":null},{"text":"\r\n    if(n==0):\r\n        return 1\r\n    else:\r\n        return n*last_Digit_Factorial(n-1)\r\n\r\nn= int(input(\"Enter a number: \"))\r\nprint(\"The last digit in factorial of given number is: \",last_Digit_Factorial(n))\r\n","votes":null},{"text":"\r\n    if n < 0:\r\n        return \"Not a Number\"\r\n    elif n == 0:\r\n        return 1\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1)\r\n\r\n\r\n# Test Cases\r\nprint(last_Digit_Factorial(0))\r\nprint(last_Digit_Factorial(1))\r\nprint(last_Digit_Factorial(2))\r\nprint(last_Digit_Factorial(3))\r\nprint(last_Digit_Factorial(4))\r\nprint(last_Digit_Factorial(5))\r\nprint(last_Digit_Factorial(6))\r\nprint(last_Digit_Factorial(7))\r\nprint(last_Digit_Factorial(8))\r\nprint(last_Digit_Factorial(9))\r\nprint(last_Digit_Factorial(10))\r\n","votes":null},{"text":"\r\n    return n % 9\r\n\r\n#Driver Program\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter a number: \"))\r\n    print(\"Factorial of\", n, \"is\", Factorial(n))\r\n    print(\"Last digit in Factorial of\", n, \"is\", last_Digit_Factorial(n))","votes":null},{"text":"\r\n    if n >= 10:\r\n        return last_Digit_Factorial(n \/\/ 10) + (n % 10)\r\n    else:\r\n        return n\r\n\r","votes":null},{"text":"\r\n    return (n % 9) + 1\r\n\r\n\r","votes":null},{"text":"\r\n    return n%9\r\n\r","votes":null},{"text":"\r\n    if n <= 0:\r\n        return 0\r\n    else:\r\n        return int(n\/10) + last_Digit_Factorial(n\/\/10)\r\n\r\n\r\nprint(last_Digit_Factorial(25))\r\nprint(last_Digit_Factorial(56))\r\nprint(last_Digit_Factorial(5))\r\n","votes":null},{"text":"\r\n    return int(str(factorial(n))[len(str(factorial(n))) - 1])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n - 1)\r\n\r\nprint(last_Digit_Factorial(13))\r\n```\r\n## Output:\r\n```\r\n3628800\r\n```\r\n\r\n## Time complexity: `O(n)`\r\n## Space Complexity: `O(n)`\r\n\r\n## References:\r\n1. [Python](https:\/\/www.programiz.com\/python-programming\/recursion)\r\n2. [GeeksforGeeks](https:\/\/www.geeksforgeeks.org\/factorial-last-digit-recursion\/)\r\n","votes":null},{"text":"\r\n    n_factorial = 1\r\n    for num in range(1, n+1):\r\n        n_factorial *= num\r\n    return n_factorial%10\r\n\r\nprint(last_Digit_Factorial(120))\r\n```\r\nOutput:\r\n```\r\n4\r\n```\r\nThis is the output of the function. The function will find the last digit in factorial of a given number.\r\n\r\n## 2. Find the largest number\r\n\r\n```\r","votes":null},{"text":"\r\n    if n <= 0:\r\n        return 1\r\n    else:\r\n        return n*last_Digit_Factorial(n-1)\r\n\r\n#Test Cases\r\n\r\nprint(last_Digit_Factorial(0))\r\nprint(last_Digit_Factorial(1))\r\nprint(last_Digit_Factorial(2))\r\nprint(last_Digit_Factorial(3))\r\nprint(last_Digit_Factorial(4))\r\nprint(last_Digit_Factorial(5))\r\nprint(last_Digit_Factorial(6))\r\nprint(last_Digit_Factorial(7))\r\nprint(last_Digit_Factorial(8))\r\nprint(last_Digit_Factorial(9))\r\nprint(last_Digit_Factorial(10))\r\nprint(last_Digit_Factorial(11))\r\nprint(last_Digit_Factorial(12))\r\nprint(last_Digit_Factorial(13))\r\nprint(last_Digit_Factorial(14))\r\nprint(last_Digit_Factorial(15))\r\nprint(last_Digit_Factorial(16))\r\nprint(last_Digit_Factorial(17))\r\nprint(last_Digit_Factorial(18))\r\nprint(last_Digit_Factorial(19))\r\nprint(last_Digit_Factorial(20))\r\nprint(last_Digit_Factorial(21))\r\nprint(last_Digit_Factorial(22))\r\nprint(last_Digit_Factorial(23))\r\nprint(last_Digit_Factorial(24))\r\nprint(last_Digit_Factorial(25))\r\nprint(last_Digit_Factorial(26))\r\nprint(last_Digit_Factorial(27))\r\nprint(last_Digit_Factorial(28))\r\nprint(last_Digit_Factorial(29))\r\nprint(last_Digit_Factorial(30))\r\nprint(last_Digit_Factorial(31))\r\nprint(last_Digit_Factoria","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return (n % 10) * Factorial(n \/\/ 10)\r\n\r\n\r","votes":null},{"text":"\r\n    if n < 0:\r\n        return -1\r\n    if n == 0:\r\n        return 0\r\n    last_digit = n % 10\r\n    return last_digit * Factorial(n \/\/ 10)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter a number: '))\r\n    print(last_Digit_Factorial(n))\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return int(str(n)[-1])\r\n\r\nprint(last_Digit_Factorial(123456))\r\n# Output: 6\r\nprint(last_Digit_Factorial(1234567))\r\n# Output: 7\r\nprint(last_Digit_Factorial(12345678))\r\n# Output: 8\r\n\r\n# Write a function to find the factorial of a given number using recursion.\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n%9\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1)\r\n\r\nif __name__ == \"__main__\":\r\n    print(last_Digit_Factorial(1234))\r\n","votes":null},{"text":"\r\n    i=0\r\n    while n>0:\r\n        n=n\/\/10\r\n        i=i+1\r\n    return i\r\n\r\nprint(last_Digit_Factorial(5452))\r\nprint(last_Digit_Factorial(1234))\r\nprint(last_Digit_Factorial(1))\r\nprint(last_Digit_Factorial(0))","votes":null},{"text":"\r\n    if n < 0:\r\n        raise ValueError\r\n    elif n == 0:\r\n        return 1\r\n    else:\r\n        return n % 10 * last_Digit_Factorial(n \/\/ 10)\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return (n % 10) * last_Digit_Factorial(n \/\/ 10)\r\n\r\n\r","votes":null},{"text":"\r\n    a = 1\r\n    while n!= 0:\r\n        a *= n % 10\r\n        n = n \/\/ 10\r\n    return a\r\n\r","votes":null},{"text":"\r\n    if n<=0:\r\n        return 0\r\n    else:\r\n        return n%10\r\n\r","votes":null},{"text":"\r\n    return int(str(n)[-1])\r\n\r\n\r\nprint(last_Digit_Factorial(12345))\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n \/\/ 10)\r\n\r\n\r\nprint(last_Digit_Factorial(12))\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1)\r\n\r\nprint(last_Digit_Factorial(3))\r\nprint(last_Digit_Factorial(10))\r\n```\r\n**Output**\r\n```\r\n3\r\n3628800\r\n```\r\n<hr>\r\n\r\n### 2. Write a python program to get the factorial of a given number using recursion.\r\n\r\n**Code**\r\n```python\r","votes":null},{"text":"\r\n    return n\/\/9 if n%9==0 else (n\/\/9)+(last_Digit_Factorial(n\/\/9))\r\n\r","votes":null},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return int(n\/10)*last_Digit_Factorial(n%10)\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1)\r\n\r\nprint(last_Digit_Factorial(7))\r\n\r\n# -\r\n\r\n# ### 5.1.3.1.1.2.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return (n-1) + factorial(n-1)\r\n\r\nprint(last_Digit_Factorial(5))\r\n\r\n# + [markdown] id=\"67b61e85\"\r\n# ## **9.2 - 10.10 - 100.100 Factorials**\r\n#\r\n# **Note:** \r\n#\r\n# *   The factorial of a number is equal to the product of all positive integers from 1 to the number. \r\n#\r\n# *   For example, the factorial of 5 is 5*4*3*2*1 = 120.\r\n#\r\n# *   Write a python function to find all the factorials of a given number.\r\n# *   Write a python function to find the factorial of a given number.\r\n\r\n# + id=\"1711255f\"\r","votes":null},{"text":"\r\n    return n\/\/9*n%9\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    for n in range(1, 10):\r\n        print(last_Digit_Factorial(n))\r\n","votes":null},{"text":"\r\n    if n < 0:\r\n        return 'Please enter a positive number'\r\n    else:\r\n        return n % 10\r\n\r\n# Write a python function to find the last digit in factorial of a given number.\r","votes":null},{"text":"\r\n    # Your code goes here.\r\n    n=n\r\n    if n<0:\r\n        return -1\r\n    elif n==0:\r\n        return 0\r\n    else:\r\n        return int(n % 10)\r\n\r","votes":null},{"text":"\r\n    return int(str(n)[-1])\r\n\r\nprint(last_Digit_Factorial(1234567890))\r\n\r\n# + [markdown] colab_type=\"text\" id=\"zD9w_J00202m\"\r\n# ### 10. Write a python program to find the factorial of given number recursively.\r\n#\r\n# *Hint: Use conditional statement.*\r\n#\r\n# *Hint: Use recursion.*\r\n#\r\n# ### Example 1:\r\n#\r\n# Input: 5\r\n#\r\n# Output: 120\r\n#\r\n# ### Example 2:\r\n#\r\n# Input: 0\r\n#\r\n# Output: 1\r\n#\r\n# ### Example 3:\r\n#\r\n# Input: -1\r\n#\r\n# Output: -1\r\n#\r\n# ### Example 4:\r\n#\r\n# Input: 10\r\n#\r\n# Output: 3628800\r\n#\r\n# ### Example 5:\r\n#\r\n# Input: 100\r\n#\r\n# Output: 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    # Write your code here\r\n    factorial=1\r\n    for i in range(n):\r\n        factorial=factorial*i\r\n    return factorial%10\r\n\r\nprint(last_Digit_Factorial(100))","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return (n % 10) * last_Digit_Factorial(n\/\/10)\r\n\r","votes":null},{"text":"\r\n    n = int(n)\r\n    fact = 1\r\n    while n>0:\r\n        fact = fact * n % 10\r\n        n = n\/\/10\r\n    return fact\r\n\r\nprint(last_Digit_Factorial(10))\r\nprint(last_Digit_Factorial(123456789))\r\n\r\n# Task 11\r\n# Write a python function to find length of a string.\r","votes":null},{"text":"\r\n    return int(n%10)\r\n\r\nif __name__ == \"__main__\":\r\n    if len(sys.argv) < 2:\r\n        print \"usage: Factorial.py n\"\r\n    else:\r\n        n = int(sys.argv[1])\r\n        print \"The last digit in the factorial of %d is %d\" % (n, last_Digit_Factorial(n))\r\n","votes":null},{"text":"\r\n    return n % 10\r\n\r\n\r","votes":null},{"text":"\r\n    if n <= 0:\r\n        return 0\r\n    else:\r\n        return n % 10\r\n\r\n\r","votes":null},{"text":"\r\n    if n==0:\r\n        return 0\r\n    return 1 if n%10==0 else n%10\r\n\r\nn = int(input(\"Enter the number: \"))\r\nlast_digit = last_Digit_Factorial(n)\r\nprint(f\"Last digit in factorial of {n} is {last_digit}\")","votes":null},{"text":"\r\n    return int(str(n)[-1])\r\n\r","votes":null},{"text":"\r\n    return n % 9\r\n\r\n\r","votes":null},{"text":"\r\n \r\n    if n % 10 == 0:\r\n        return 1\r\n    else:\r\n        return n % 10 * last_Digit_Factorial(n \/\/ 10)\r\n\r\n\r\nprint(last_Digit_Factorial(243))\r\nprint(last_Digit_Factorial(255))\r\nprint(last_Digit_Factorial(89))\r\nprint(last_Digit_Factorial(3))","votes":null},{"text":"\r\n    return n%9\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(last_Digit_Factorial(5))\r\n    print(last_Digit_Factorial(100))\r\n    print(last_Digit_Factorial(1000))\r\n    print(last_Digit_Factorial(10000))\r\n    print(last_Digit_Factorial(100000))\r\n","votes":null},{"text":"\r\n    return n % 9\r\n\r","votes":null},{"text":"\r\n    return n%9\r\n\r\nprint(last_Digit_Factorial(9))\r\nprint(last_Digit_Factorial(10))\r\nprint(last_Digit_Factorial(11))\r\nprint(last_Digit_Factorial(12))\r\nprint(last_Digit_Factorial(13))\r\nprint(last_Digit_Factorial(14))\r\nprint(last_Digit_Factorial(15))\r\nprint(last_Digit_Factorial(16))\r\nprint(last_Digit_Factorial(17))\r\nprint(last_Digit_Factorial(18))\r\nprint(last_Digit_Factorial(19))\r\nprint(last_Digit_Factorial(20))\r\nprint(last_Digit_Factorial(21))\r\nprint(last_Digit_Factorial(22))\r\nprint(last_Digit_Factorial(23))\r\nprint(last_Digit_Factorial(24))\r\nprint(last_Digit_Factorial(25))\r\nprint(last_Digit_Factorial(26))\r\nprint(last_Digit_Factorial(27))\r\nprint(last_Digit_Factorial(28))\r\nprint(last_Digit_Factorial(29))\r\nprint(last_Digit_Factorial(30))\r\nprint(last_Digit_Factorial(31))\r\nprint(last_Digit_Factorial(32))\r\nprint(last_Digit_Factorial(33))\r\nprint(last_Digit_Factorial(34))\r\nprint(last_Digit_Factorial(35))\r\nprint(last_Digit_Factorial(36))\r\nprint(last_Digit_Factorial(37))\r\nprint(last_Digit_Factorial(38))\r\nprint(last_Digit_Factorial(39))\r\nprint(last_Digit_Factorial(40))\r\nprint(last_Digit_Factorial(41))\r\nprint(last_Digit_Factorial(42))\r\nprin","votes":null},{"text":"\r\n    return n % 10\r\n\r","votes":null},{"text":"\r\n    if int(n) == 0:\r\n        return 0\r\n    else:\r\n        return int(str(math.factorial(int(n)))[-1])\r\n\r\n\r\nprint(last_Digit_Factorial(234))\r\nprint(last_Digit_Factorial(123456789))\r\nprint(last_Digit_Factorial(0))\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return 10 * last_Digit_Factorial(n \/\/ 10) + (n % 10)\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    elif n < 0:\r\n        return -1\r\n    else:\r\n        return n % 10\r\n\r","votes":null},{"text":"\r\n    return 1 if n < 0 else n % 10 if n < 10 else n % 10 * last_Digit_Factorial(n \/\/ 10)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(last_Digit_Factorial(1245))\r\n","votes":null},{"text":"\r\n\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return ((n % 10) % (n % 100)) \/\/ 9\r\n\r\n\r","votes":null},{"text":"\r\n    return (n % 9)\r\n\r\n\r","votes":null},{"text":"\r\n    return n%10\r\n\r\n# Driver Code\r\nn = 5\r\nprint(last_Digit_Factorial(n))\r\n","votes":null},{"text":"\r\n    factorial = 1\r\n    while n > 0:\r\n        n, r = divmod(n, 10)\r\n        factorial = factorial * r\r\n    return factorial%10\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    for i in range(10):\r\n        print(f\"Factorial {i+1} is {Factorial(i+1)}\")\r\n        print(f\"Last Digit of Factorial {i+1} is {last_Digit_Factorial(i+1)}\")\r\n        print(f\"Last Digit of Factorial {i+1} is {last_Digit_Factorial(Factorial(i+1))} \")\r\n        print(f\"Last Digit of Factorial {i+1} is {last_Digit_Factorial(Factorial(i+1))}\")\r\n        print(f\"Last Digit of Factorial {i+1} is {last_Digit_Factorial(Factorial(i+1)+100)}\")\r\n","votes":null},{"text":"\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return 1\r\n    elif n>1:\r\n        return n*last_Digit_Factorial(n-1)\r\n\r\n\r","votes":null},{"text":"\r\n    return int(str(factorial(n)).split()[-1])\r\n\r\n\r","votes":null},{"text":"\r\n    return 0\r\n\r\nprint(last_Digit_Factorial(7))\r\n```\r\n\r\n## Task 5: 1000-digit Fibonacci Series\r\n\r\nNow you are given a task to find the 1000-digit fibonacci series.\r\n\r\n### Instructions:\r\n\r\nWrite a Python function to find the 1000-digit fibonacci series.\r\n\r\n### Example:\r\n\r\n```python\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1)\r\n\r\nn = int(input('Enter a number to find the last digit in factorial: '))\r\nprint(f'Last digit in factorial of {n} is: {last_Digit_Factorial(n)}')\r\n","votes":null},{"text":"\r\n    if n in range(1,10):\r\n        return n\r\n    else:\r\n        return last_Digit_Factorial(n\/\/10) + n%10\r\n\r\nif __name__ == '__main__':\r\n    print(last_Digit_Factorial(123456789012345678901234567890))\r\n","votes":null},{"text":"\r\n    if n < 0:\r\n        return -1\r\n    f = 1\r\n    while n > 0:\r\n        f *= n % 10\r\n        n = n \/\/ 10\r\n    return f % 10\r\n\r\n\r\nclass Solution:\r\n   ","votes":null},{"text":"\r\n    return n\/\/10\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return (n % 10) * Factorial(n\/\/10)\r\n\r\n\r\nprint(last_Digit_Factorial(4321))\r\nprint(last_Digit_Factorial(5678))\r\nprint(last_Digit_Factorial(9999))\r\nprint(last_Digit_Factorial(123456789))\r\n","votes":null},{"text":"\r\n    return n%10\r\nprint(last_Digit_Factorial(500))\r\n# 13\r","votes":null},{"text":"\r\n    if (n == 0):\r\n        return 1\r\n    else:\r\n        return (n%10)*(last_Digit_Factorial(n\/\/10))\r\n\r\nif __name__ == '__main__':\r\n    print(\"The last digit of factorial of 12345 is: \",last_Digit_Factorial(12345))\r\n","votes":null},{"text":"\r\n    n = int(n)\r\n    if n > 0:\r\n        return n % 10\r\n    elif n == 0:\r\n        return 1\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    if n <= 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    factorial = 1\r\n    while n>0:\r\n        factorial = factorial * (n%10)\r\n        n = n\/\/10\r\n    return factorial%10\r\n\r\nn = input()\r\nprint(last_Digit_Factorial(int(n)))","votes":null},{"text":"\r\n    num = n\r\n    digit = 0\r\n    while num > 0:\r\n        digit += 1\r\n        num \/\/= 10\r\n    return digit\r\n\r\n\r","votes":null},{"text":"\r\n    factorial = 1\r\n    while n >= 10:\r\n        n = n\/\/10\r\n        factorial = factorial*n\r\n    print(factorial%10)\r\n\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter a number: \"))\r\n    last_Digit_Factorial(number)","votes":null}],"time":{"count":4.0,"avg":121274.804,"std":77705.6152143967,"cov":0.6407399777}}
{"id":578,"question":"def interleave_lists(list1,list2,list3):\r\n    \"\"\"Write a function to interleave lists of the same length.\"\"\"","answers":[{"text":"\r\n    interleaved_lists = []\r\n    for i in range(len(list1)):\r\n        interleaved_lists.append(list1[i])\r\n        interleaved_lists.append(list2[i])\r\n        interleaved_lists.append(list3[i])\r\n    return interleaved_lists\r\n\r","votes":121206.112},{"text":"\r\n    interleaved = []\r\n    for i in range(len(list1)):\r\n        interleaved.append(list1[i])\r\n        interleaved.append(list2[i])\r\n        interleaved.append(list3[i])\r\n    return interleaved\r\n\r","votes":124047.076},{"text":"\r\n    interleaved_list = []\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\n\r","votes":126836.24},{"text":"\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r\n\r","votes":126901.724},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return new_list\r\n\r","votes":127568.904},{"text":"\r\n    interleave = []\r\n    for i in range(len(list1)):\r\n        interleave.append(list1[i])\r\n        interleave.append(list2[i])\r\n        interleave.append(list3[i])\r\n    return interleave\r\n\r","votes":128235.236},{"text":"\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r","votes":130026.42},{"text":"\r\n    print(list1,list2,list3)\r\n    if len(list1)!=len(list2)!=len(list3):\r\n        raise ValueError(\"Lists must have equal length.\")\r\n    return [x for y in zip(list1,list2,list3) for x in y]\r\n\r","votes":131893.92},{"text":"\r\n    inter = []\r\n    for i in range(len(list1)):\r\n        inter.append(list1[i])\r\n        inter.append(list2[i])\r\n        inter.append(list3[i])\r\n    return inter\r\n\r\n\r","votes":133410.752},{"text":"\r\n    list_interleave = []\r\n    for i in range(len(list1)):\r\n        list_interleave.append(list1[i])\r\n        list_interleave.append(list2[i])\r\n        list_interleave.append(list3[i])\r\n    return list_interleave\r\n\r","votes":137313.812},{"text":"\r\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\r\n        return False\r\n    output = []\r\n    for i in range(len(list1)):\r\n        output.append(list1[i])\r\n        output.append(list2[i])\r\n        output.append(list3[i])\r\n    return output","votes":138099.508},{"text":"\r\n    interleaved_list = []\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r","votes":139790.156},{"text":"\r\n    interleaved_list = []\r\n    for i in range(max(len(list1),len(list2),len(list3))):\r\n        if i < len(list1):\r\n            interleaved_list.append(list1[i])\r\n        if i < len(list2):\r\n            interleaved_list.append(list2[i])\r\n        if i < len(list3):\r\n            interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r","votes":141062.252},{"text":"\r\n    output = []\r\n    for i in range(len(list1)):\r\n        output.append(list1[i])\r\n        output.append(list2[i])\r\n        output.append(list3[i])\r\n    return output\r\n\r","votes":141960.988},{"text":"\r\n    result = []\r\n    while len(list1)!= 0 and len(list2)!= 0 and len(list3)!= 0:\r\n        result.append(list1.pop(0))\r\n        result.append(list2.pop(0))\r\n        result.append(list3.pop(0))\r\n    return(result)\r\n\r","votes":146308.008},{"text":"\r\n    interleaved_list = []\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\nlist1 = [1,2,3,4]\r\nlist2 = [5,6,7,8]\r\nlist3 = [9,10,11,12]\r\nresult = interleave_lists(list1,list2,list3)\r\nprint(result)","votes":148788.528},{"text":"\r\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\r\n        raise TypeError(\"lists must be same length\")\r\n    interleaved_list = []\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r","votes":152797.732},{"text":"\r\n    list4 = []\r\n    i=0\r\n    while i<len(list1):\r\n        list4.append(list1[i])\r\n        list4.append(list2[i])\r\n        list4.append(list3[i])\r\n        i+=1\r\n    return list4\r\n\r","votes":153259.156},{"text":"\r\n    # Initialize the result list\r\n    result = []\r\n    # Compare the length of both lists\r\n    if len(list1)!= len(list2):\r\n        return []\r\n    # Compare the length of both lists\r\n    elif len(list1)!= len(list3):\r\n        return []\r\n    # Compare each element of both lists\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    # Return the result list\r\n    return result\r\n\r\n# Print the result\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))","votes":156892.94},{"text":"\r\n    list_interleaved=[]\r\n    for i in range(0,len(list1)):\r\n        list_interleaved.append(list1[i])\r\n        list_interleaved.append(list2[i])\r\n        list_interleaved.append(list3[i])\r\n    return list_interleaved\r\n\r","votes":157197.604},{"text":"\r\n    assert len(list1)==len(list2)==len(list3)\r\n    new_list = []\r\n    i = 0\r\n    while i<len(list1):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n        i+=1\r\n    return new_list\r\n\r","votes":159141.344},{"text":"\r\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\r\n        return \"Lists must be of the same length.\"\r\n    else:\r\n        result = []\r\n        for i in range(len(list1)):\r\n            result += [list1[i],list2[i],list3[i]]\r\n        return result\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n","votes":161322.456},{"text":"\r\n    output = []\r\n    for i in range(len(list1)):\r\n        output.append(list1[i])\r\n        output.append(list2[i])\r\n        output.append(list3[i])\r\n    return output","votes":271315.424},{"text":"\r\n    assert len(list1) == len(list2) == len(list3), \"Lists must be the same length\"\r\n    return [list1[i] for i in range(0,len(list1),3)] + [list2[i] for i in range(1,len(list2),3)] + [list3[i] for i in range(2,len(list3),3)]\r\n\r","votes":null},{"text":"\r\n    #return [item1, item2, item3]\r\n    return list1 + list2 + list3\r\n\r","votes":null},{"text":"\r\n    #return [list1[i] for i in range(len(list1))]+[list2[i] for i in range(len(list2))]+[list3[i] for i in range(len(list3))]\r\n    return [i for i in list1]+[i for i in list2]+[i for i in list3]\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    return list(zip(list1,list2,list3))\r\n\r","votes":null},{"text":"\r\n    return(list1+list2+list3)\r\n\r\n# Create a list called 'list1' with the names of 3 people:\r\nlist1 = ['Amy','Billy','Cindy']\r\n\r\n# Create a list called 'list2' with the ages of 3 people:\r\nlist2 = [21,11,24]\r\n\r\n# Create a list called 'list3' with the ages of 3 people:\r\nlist3 = [25,12,17]\r\n\r\n# Create a list called 'interleaved' that is the result of interleaving the \r\n# lists 'list1' and 'list2':\r\ninterleaved = interleave_lists(list1,list2)\r\n\r\n# Create a list called 'interleaved2' that is the result of interleaving the \r\n# lists 'list1' and 'list3':\r\ninterleaved2 = interleave_lists(list1,list3)\r\n\r\n# Print the value of the variable 'interleaved':\r\nprint(interleaved)\r\n\r\n# Print the value of the variable 'interleaved2':\r\nprint(interleaved2)\r\n\r\n# Challenge: Use the 'interleave_lists' function to interleave the lists \r\n# 'list1' and 'list2' together into a single list. Store the result in a \r\n# variable called 'interleaved3'.\r\n\r\n# Solution:\r\ninterleaved3 = interleave_lists(list1,list2)\r\n\r\n# Print the value of the variable 'interleaved3':\r\nprint(interleaved3)\r\n","votes":null},{"text":"\r\n    list1_len = len(list1)\r\n    list2_len = len(list2)\r\n    list3_len = len(list3)\r\n    if list1_len!=list2_len or list2_len!=list3_len:\r\n        raise ValueError(\"Lists must be the same length.\")\r\n    return list1+list2+list3\r\n\r","votes":null},{"text":"\r\n    if not isinstance(list1,list):\r\n        list1=[list1]\r\n    if not isinstance(list2,list):\r\n        list2=[list2]\r\n    if not isinstance(list3,list):\r\n        list3=[list3]\r\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\r\n        return None\r\n    return list1+list2+list3\r\n        \r","votes":null},{"text":"\r\n    # create two empty lists to be filled in later\r\n    output_list = []\r\n    # loop through the lists, starting from the end of the lists\r\n    for i in list3:\r\n        # add the end of the list to the front of the output list\r\n        output_list.append(i)\r\n    for i in list2:\r\n        # add the end of the list to the front of the output list\r\n        output_list.append(i)\r\n    for i in list1:\r\n        # add the end of the list to the front of the output list\r\n        output_list.append(i)\r\n    return output_list\r\n\r","votes":null},{"text":"\r\n    output = []\r\n    for i in range(len(list1)):\r\n        output.append([list1[i],list2[i],list3[i]])\r\n    return output\r\n\r","votes":null},{"text":"\r\n    assert len(list1) == len(list2) and len(list2) == len(list3), 'The three lists must be of the same length'\r\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\r\n\r","votes":null},{"text":"\r\n    list1 = list(list1)\r\n    list2 = list(list2)\r\n    list3 = list(list3)\r\n    i = 0\r\n    j = 0\r\n    k = 0\r\n    while i < len(list1) and j < len(list2) and k < len(list3):\r\n        if i < len(list1) and j < len(list2):\r\n            list1[i], list2[j] = list2[j], list1[i]\r\n            i += 1\r\n            j += 1\r\n        if i < len(list1) and k < len(list3):\r\n            list1[i], list3[k] = list3[k], list1[i]\r\n            i += 1\r\n            k += 1\r\n        if j < len(list2) and k < len(list3):\r\n            list2[j], list3[k] = list3[k], list2[j]\r\n            j += 1\r\n            k += 1\r\n    return list1 + list2 + list3\r\n\r","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    return [x for x in list1] + list2 + list3\r\n\r","votes":null},{"text":"\r\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\r\n\r\n# Test interleave_lists function:\r\nprint(interleave_lists([1,2,3,4], [5,6,7,8], [9,10,11,12]))","votes":null},{"text":"\r\n    return list1+list2+list3\r\n\r\n\r","votes":null},{"text":"\r\n    interleaved_list = [list1[0]]\r\n    for i in range(1,len(list1)):\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r","votes":null},{"text":"\r\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\r\n        raise ValueError(\"Lists should be of the same length\")\r\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\r\n\r","votes":null},{"text":"\r\n    new_list = list1\r\n    new_list.extend(list2)\r\n    new_list.extend(list3)\r\n    return new_list\r\n\r\n# This function is a part of the solution.\r","votes":null},{"text":"\r\n    interleaved_list = []\r\n    for i in range(len(list1)+len(list2)+len(list3)-1):\r\n        if i%3==0:\r\n            interleaved_list.append(list1[int(i\/3)])\r\n        elif i%3==1:\r\n            interleaved_list.append(list2[int(i\/3)-1])\r\n        elif i%3==2:\r\n            interleaved_list.append(list3[int(i\/3)-2])\r\n    return interleaved_list\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        yield list1[i],list2[i],list3[i]\r\n\r","votes":null},{"text":"\r\n    result_list = list1 + list3\r\n    while len(list2) > 0:\r\n        result_list.append(list2.pop())\r\n    return result_list\r\n\r","votes":null},{"text":"\r\n    return list1 + list2 + list3\r\n\r","votes":null},{"text":"\r\n    interleaved_list=[]\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n# -\r\n\r\n# <a id='ex2'><\/a>\r\n# ## 2. Exercises \r\n#\r\n# ### 2.1.  List Comprehensions \r\n#\r\n# 1. Write a list comprehension that creates a list of integers from 1 to 100 (including). Store the result in a new variable. For example, the list comprehension `[i * 2 for i in range(100)]` should produce the list `[0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98]`. \r\n#\r\n# 2. Write a list comprehension that creates a list that contains the square of each number in the list `list1`. For example, the list comprehension `[i * i for i in list1]` should produce the list `[0,1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,","votes":null},{"text":"\r\n    # TODO: Write your function here\r\n    list=list1+list2+list3\r\n    return list\r\n\r","votes":null},{"text":"\r\n    #TODO: Write your code here\r\n    return [list1[i] for i in range(len(list1))]+[list2[i] for i in range(len(list2))]+[list3[i] for i in range(len(list3))]\r\n\r","votes":null},{"text":"\r\n    length1 = len(list1)\r\n    length2 = len(list2)\r\n    length3 = len(list3)\r\n    new_list = []\r\n    # if length of lists don't match interleave them\r\n    if length1!= length2 or length1!= length3:\r\n        return new_list\r\n    else:\r\n        for i in range(length1):\r\n            new_list.append(list1[i])\r\n            new_list.append(list2[i])\r\n            new_list.append(list3[i])\r\n    return new_list\r\n\r\n\r\n# test interleave_lists\r\nprint(interleave_lists(list1,list2,list3))\r\n","votes":null},{"text":"\r\n    #if len(list1)==len(list2)==len(list3):\r\n    #    return list1+list2+list3\r\n    #else:\r\n    #    print \"List lengths are not the same\"\r\n    #    return []\r\n    #print \"Length of list1 is %d\"%len(list1)\r\n    #print \"Length of list2 is %d\"%len(list2)\r\n    #print \"Length of list3 is %d\"%len(list3)\r\n    if len(list1)==0:\r\n        return list2+list3\r\n    elif len(list2)==0:\r\n        return list1+list3\r\n    elif len(list3)==0:\r\n        return list1+list2\r\n    else:\r\n        return [list1[0]]+interleave_lists(list1[1:],list2,list3)\r\n\r","votes":null},{"text":"\r\n    assert len(list1)==len(list2)==len(list3), \"lists must be same length\"\r\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\r\n\r","votes":null},{"text":"\r\n    list_interleave = []\r\n    for i in range(len(list1)):\r\n        x = list1[i]\r\n        y = list2[i]\r\n        z = list3[i]\r\n        list_interleave.append([x,y,z])\r\n    return list_interleave\r\n\r","votes":null},{"text":"\r\n    return list(zip(list1, list2, list3))\r\n\r","votes":null},{"text":"\r\n    interleaved_list = []\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n    for i in range(len(list3)):\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\n\r\n# 3.2.2\r","votes":null},{"text":"\r\n    return [list1[i] if i%3==0 else list2[i] if i%3==1 else list3[i] for i in range(len(list1))]\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9])) # [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\nprint(interleave_lists([1,2,3],[4,5,6],[])) # [1, 4, 2, 5, 3, 6]\r\nprint(interleave_lists([1,2,3],[],[4,5,6])) # [1, 2, 4, 5, 3, 6]\r\nprint(interleave_lists([],[],[])) # []\r\n\r\n# 6. Write a function called interleave that takes any number of lists as arguments and returns a single list.\r\n# Use the * operator to unpack a list into arguments.\r\n# Use the + operator to append elements to a list.\r\n# The function should return a list of the elements of all the lists passed in.\r\n\r","votes":null},{"text":"\r\n    return list1+list2+list3\r","votes":null},{"text":"\r\n    output=[0]*(len(list1)+len(list2)+len(list3))\r\n    i=0\r\n    while i < len(list1):\r\n        output[i]=list1[i]\r\n        i+=1\r\n    j=0\r\n    while j < len(list2):\r\n        output[i+j]=list2[j]\r\n        i+=1\r\n        j+=1\r\n    k=0\r\n    while k < len(list3):\r\n        output[i+j+k]=list3[k]\r\n        i+=1\r\n        j+=1\r\n        k+=1\r\n    return output\r\n\r\n#%%\r","votes":null},{"text":"\r\n    #\r\n    # >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\r\n    # [1,4,7,2,5,8,3,6,9]\r\n    #\r\n    # >>> interleave_lists([1,2,3], [4,5], [7,8])\r\n    # [1,4,7,2,5,8,3,2,3]\r\n    #\r\n    # >>> interleave_lists([1,2], [4,5,6,7], [8,9])\r\n    # [1,4,8,2,5,9,3,6,7]\r\n    #\r\n    # >>> interleave_lists([1,2,3], [4,5,6], [7,8,9,10])\r\n    # [1,4,7,2,5,8,3,6,9,10]\r\n    #\r\n    # >>> interleave_lists([1,2], [], [7,8,9])\r\n    # [1,2,7,8,9]\r\n    #\r\n    # >>> interleave_lists([], [4,5,6], [7,8,9])\r\n    # [4,5,6,7,8,9]\r\n    #\r\n    # >>> interleave_lists([], [], [])\r\n    # []\r\n    #\r\n    # >>> interleave_lists([], [], [7,8,9])\r\n    # [7,8,9]\r\n    #\r\n    # >>> interleave_lists([], [], [])\r\n    # []\r\n    #\r\n    # >>> interleave_lists([1,2,3], [4,5,6], [7,8,9,10], 2)\r\n    # [1,4,7,2,5,8,3,6,9,10]\r\n    #\r\n    # >>> interleave_lists([1,2,3], [4,5,6], [7,8,9,10], 3)\r\n    # [1,4,7,2,5,8,3,6,9,10]\r\n    #\r\n    # >>> interleave_lists([1,2,3], [4,5,6], [7,8","votes":null},{"text":"\r\n    if len(list1)!= len(list2):\r\n        raise ValueError\r\n    if len(list1)!= len(list3):\r\n        raise ValueError\r\n    return list1+list2+list3\r\n\r","votes":null},{"text":"\r\n    return [list1[idx] for idx in range(len(list1))]+list2+list3\r\n\r\n\r","votes":null},{"text":"\r\n    l1 = list(list1)\r\n    l2 = list(list2)\r\n    l3 = list(list3)\r\n    #print (l1,l2,l3)\r\n    for i in range(len(l1)):\r\n        if (l1[i] is not None) and (l2[i] is None):\r\n            l2.append(l1.pop(i))\r\n        elif (l1[i] is None) and (l2[i] is not None):\r\n            l1.append(l2.pop(i))\r\n        else:\r\n            l1[i],l2[i] = l2[i],l1[i]\r\n    #print (l1,l2,l3)\r\n    return (l1,l2,l3)\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    pass\r\n\r","votes":null},{"text":"\r\n    if len(list1) == len(list2) == len(list3):\r\n        return ([list1[i], list2[i], list3[i]] for i in range(len(list1)))\r\n    else:\r\n        raise ValueError('Lists must be of equal length.')\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n# +\r\n# Exercise 13\r\nimport math\r\n\r","votes":null},{"text":"\r\n    return list1[:]+list2[:]+list3[:]\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        yield list1[i], list2[i], list3[i]\r\n\r\nprint(list(interleave_lists([1,2,3], [4,5,6], [7,8,9])))\r\nprint(list(interleave_lists([1,2,3,4,5,6], [4,5,6,7,8,9], [7,8,9,10,11,12])))\r\n","votes":null},{"text":"\r\n    interleaved = list1\r\n    for i in range(len(list2)):\r\n        interleaved.append(list2[i])\r\n    for i in range(len(list3)):\r\n        interleaved.append(list3[i])\r\n    return interleaved\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1)==len(list2)==len(list3):\r\n        return list(itertools.chain(itertools.zip_longest(list1,list2,list3)))","votes":null},{"text":"\r\n    l1 = list1\r\n    l2 = list2\r\n    l3 = list3\r\n    result = []\r\n    while len(l1)!= 0:\r\n        result.append(l1.pop(0))\r\n    while len(l2)!= 0:\r\n        result.append(l2.pop(0))\r\n    while len(l3)!= 0:\r\n        result.append(l3.pop(0))\r\n    return result\r\n\r","votes":null},{"text":"\r\n    assert len(list1) == len(list2)\r\n    assert len(list1) == len(list3)\r\n    return list(zip(list1,list2,list3))\r\n\r","votes":null},{"text":"\r\n    if len(list1)!= len(list2)!= len(list3):\r\n        raise ValueError(\"Lists must be of the same length!\")\r\n    return (list1[i] for i in range(len(list1))) + (list2[i] for i in range(len(list2))) + (list3[i] for i in range(len(list3)))\r\n\r","votes":null},{"text":"\r\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\r\n        raise ValueError\r\n    else:\r\n        return list1+list2+list3\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        yield list1[i], list2[i], list3[i]\r\n\r\n# %%\r","votes":null},{"text":"\r\n    new_list = list1 + list2 + list3\r\n    return new_list\r\n\r\n\r","votes":null},{"text":"\r\n    interleaved_list = list1 + list2 + list3\r\n    return interleaved_list\r\n\r","votes":null},{"text":"\r\n    list1, list2, list3 = [int(i) for i in list1.split(',')]\r\n    return list(chain(list1,list2,list3))\r\n\r","votes":null},{"text":"\r\n    return list1+list2+list3\r\n\r","votes":null},{"text":"\r\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\r\n        raise ValueError(\"The length of all lists must be the same\")\r\n    result = [list1[i] for i in range(len(list1))]\r\n    for pair in zip(list2,list3):\r\n        result[pair[0]] = pair[1]\r\n    return result\r\n\r","votes":null},{"text":"\r\n    assert len(list1) == len(list2) == len(list3)\r\n    return list(itertools.chain(list1,list2,list3))\r\n\r","votes":null},{"text":"\r\n    return list(itertools.chain(list1,list2,list3))\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        yield (list1[i],list2[i],list3[i])\r\n\r","votes":null},{"text":"\r\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\r\n\r\n\r\n# + id=\"76b3807c\"\r","votes":null},{"text":"\r\n    i = 0\r\n    while i < len(list1):\r\n        yield list1[i], list2[i], list3[i]\r\n        i += 1\r\n\r","votes":null},{"text":"\r\n    #TODO: write your code here\r\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\r\n    \r\nlist1 = [2, 4, 6, 8]\r\nlist2 = [1, 3, 5, 7]\r\nlist3 = [9, 11, 13, 15]\r\nprint(interleave_lists(list1,list2,list3))","votes":null},{"text":"\r\n    for x in list1:\r\n        yield x\r\n    for x in list2:\r\n        yield x\r\n    for x in list3:\r\n        yield x\r\n\r","votes":null},{"text":"\r\n    return list(itertools.chain(*[itertools.repeat(item,len(list1)) for item in (list1,list2,list3)]))\r\n\r","votes":null},{"text":"\r\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\r\n        raise ValueError('Lists must be the same length!')\r\n    return list1 + list2 + list3\r\n\r","votes":null},{"text":"\r\n    return list(list1)+list(list2)+list(list3)\r\n\r\ninterleave_lists(list1,list2,list3)\r\n","votes":null},{"text":"\r\n    if len(list1)!=len(list2):\r\n        raise ValueError(\"List 1 and 2 must have the same length.\")\r\n    elif len(list1)!=len(list3):\r\n        raise ValueError(\"List 1 and 3 must have the same length.\")\r\n    else:\r\n        return list1+list2+list3\r\n\r","votes":null},{"text":"\r\n    return list1 + list2 + list3\r\n\r\ninterleave_lists([1,2], [3,4], [5])","votes":null},{"text":"\r\n    # your code here\r\n    return [list1[i] for i in range(len(list1))]+[list2[i] for i in range(len(list2))]+[list3[i] for i in range(len(list3))]\r\n\r\nprint(interleave_lists([1,2,3], [4,5,6], [7,8,9]))\r\n\r\n\"\"\"\r\nWrite a function called is_palindrome that takes a string as input and returns True if the string is a palindrome, False otherwise.\r\n\r\nExamples:\r\nis_palindrome(\"tacocat\") \u279e True\r\nNotes:\r\nThe function must compare the characters in the string to the right and left.\r\nA palindrome is a string that is the same forwards and backwards.\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    # TODO: implement\r\n    return list1+list2+list3\r\n\r\n# print(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n# print(interleave_lists([1,2,3],[],[4,5,6]))\r\n# print(interleave_lists([],[1,2,3],[4,5,6]))\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1)!= len(list2)!= len(list3):\r\n        raise ValueError(\"All lists must be same length.\")\r\n    return list(itertools.chain(list1,list2,list3))\r\n\r","votes":null},{"text":"\r\n    return [list1[i] for i in range(len(list1))] + list2 + list3\r\n\r","votes":null}],"time":{"count":23.0,"avg":145885.9257391304,"std":29981.5480684289,"cov":0.2055136431}}
{"id":582,"question":"def my_dict(dict1):\r\n    \"\"\"Write a function to check if a dictionary is empty or not.\"\"\"","answers":[{"text":"\r\n    if not dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":48547.708},{"text":"\r\n    if not dict1:\r\n        return True\r\n    return False\r\n\r\n\r","votes":51773.044},{"text":"\r\n    if not dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":58038.508},{"text":"\r\n    return not bool(dict1)\r\n\r\n\r","votes":80627.448},{"text":"\r\n    return len(dict1) == 0\r\n\r\n\r","votes":82506.688},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":85218.948},{"text":"\r\n    return dict1 == {}\r\n\r","votes":87594.844},{"text":"\r\n    return not bool(dict1)\r\n\r","votes":89279.424},{"text":"\r\n    if dict1:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":90827.812},{"text":"\r\n    if len(dict1) > 0:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":95641.276},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":108781.736},{"text":"\r\n    return True if len(dict1) == 0 else False\r\n\r","votes":111579.692},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":111999.38},{"text":"\r\n    return not dict1\r\nprint(my_dict({}))\r\nprint(my_dict({'key': 1}))\r\n\r\n#\r\n# 5. Write a function to check if a given number is even or not.\r\n#\r","votes":115349.268},{"text":"\r\n    return len(dict1) == 0\r\n\r\n\r\n# 1. Write a function to check if a dictionary is empty or not.\r\n# 2. Write a function to check if a dictionary is empty or not.\r\n# 3. Write a function to check if a dictionary is empty or not.\r\n# 4. Write a function to check if a dictionary is empty or not.\r\n# 5. Write a function to check if a dictionary is empty or not.\r\n# 6. Write a function to check if a dictionary is empty or not.\r\n# 7. Write a function to check if a dictionary is empty or not.\r\n# 8. Write a function to check if a dictionary is empty or not.\r\n# 9. Write a function to check if a dictionary is empty or not.\r\n# 10. Write a function to check if a dictionary is empty or not.\r\n# 11. Write a function to check if a dictionary is empty or not.\r\n# 12. Write a function to check if a dictionary is empty or not.\r\n# 13. Write a function to check if a dictionary is empty or not.\r\n# 14. Write a function to check if a dictionary is empty or not.\r\n# 15. Write a function to check if a dictionary is empty or not.\r\n# 16. Write a function to check if a dictionary is empty or not.\r\n# 17. Write a function to check if a dictionary is empty or not.\r\n# 18. Write a function to check if a dictionary is empty or not.\r\n# 19. Write a function to check if a dictionary is empty or not.\r\n# 20. Write a function to check if a dictionary is empty or not.\r\n# 21. Write a function to check if a dictionary is empty or not.\r\n# 22. Write a function to check if a dictionary is empty or not.\r\n# 23. Write a function to check if a dictionary is empty or not.\r\n# 24. Write a function to check if a dictionary is empty or not.\r\n# 25. Writ","votes":125880.656},{"text":"\r\n    if dict1 == {}:\r\n        print('Your dictionary is empty.')\r\n    else:\r\n        print('Your dictionary is not empty.')\r\n\r\n\r\n# write your code here\r\nmy_dict({'name': 'John', 'age': 23})\r\nmy_dict({})\r\n\r\n# +\r\n# 13. Write a function that takes a list of numbers as an argument and returns the sum of all the numbers in the list.\r\n# If the list is empty, return 0.\r\n\r","votes":null},{"text":"\r\n    if not dict1:\r\n        return False\r\n    else:\r\n        return True\r\n\r","votes":null},{"text":"\r\n    return not any(dict1.values())\r\n\r","votes":null},{"text":"\r\n    if len(dict1) > 0:\r\n        print(\"The dictionary is not empty.\")\r\n    else:\r\n        print(\"The dictionary is empty.\")\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1.keys() == []:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Check if dictionary is empty or not\r\ndict1 = {}\r\n\r\nif my_dict(dict1):\r\n    print('Dictionary is empty')\r\nelse:\r\n    print('Dictionary is not empty')\r\n","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    if dict1.keys() == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if not dict1:\r\n        return \"The dictionary is empty\"\r\n    return \"The dictionary is not empty\"\r\n\r\n\r\nmy_dict({})\r\nmy_dict({'one': 1, 'two': 2})\r\n```\r\n\r\n## Output\r\n\r\n```\r\nThe dictionary is empty\r\nThe dictionary is not empty\r\n```\r\n\r\n## Explanation\r\n\r\n-   `dict1` is an empty dictionary. So, the return statement from the `my_dict` function is `\"The dictionary is empty\"`.\r\n-   If `dict1` is not empty, the return statement from the `my_dict` function is `\"The dictionary is not empty\"`.\r\n-   If `dict1` is empty, the return statement from the `my_dict` function is `\"The dictionary is not empty\"`.\r\n\r\n```python\r","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        return False\r\n    else:\r\n        return True\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    while True:\r\n        number = int(input(\"Enter a number to check if it's a prime number or not: \"))\r\n        if number == 0 or number == 1:\r\n            print(\"Number is not prime\")\r\n        else:\r\n            for i in range(2,number):\r\n                if number % i == 0:\r\n                    print(\"Number is not prime\")\r\n                    break\r\n            else:\r\n                print(\"Number is prime\")\r\n        if my_dict(dict1):\r\n            break  \r\n    print(\"You have pressed the exit key.\")\r\n","votes":null},{"text":"\r\n\r\n    if dict1.get('name') and dict1.get('age') and dict1.get('hobbies'):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nmy_dict(dict)\r\n```\r\n\r\nThis is a solution to the problem. However, I don't like this solution because I'm not sure if there are other situations where it will not work. The solution can be improved by using the `get()` method of the dictionary.\r\n\r\n```python\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"Your dictionary is empty.\")\r\n    else:\r\n        print(\"Your dictionary is not empty.\")\r\n\r","votes":null},{"text":"\r\n    if dict1.get() == {}:\r\n        print(\"It is an empty dictionary\")\r\n    else:\r\n        print(\"It is not an empty dictionary\")\r\n\r\n\r","votes":null},{"text":"\r\n    return bool(dict1)\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The dictionary is empty\")\r\n    else:\r\n        print(\"The dictionary is not empty\")\r\n\r\n\r\nmy_dict({})\r\nmy_dict({'a':1, 'b':2, 'c':3})\r\nmy_dict({'a':1, 'b':2})\r\n```\r\n**OUTPUT:**\r\n```\r\nThe dictionary is empty\r\nThe dictionary is not empty\r\nThe dictionary is not empty\r\n```\r\n\r\n## 2. Write a function to check if a number is even or not.\r\n\r\n**CODE:**\r\n```python\r","votes":null},{"text":"\r\n    for key in dict1:\r\n        return True\r\n    return False\r\n```\r\n\r\n## 3. Functions to check if a string is palindrome\r\n* Palindromes are words, phrases, sentences, and short phrases that are the same forward as well as backward.\r\n* A string is a palindrome if it is read the same backward as forward.\r\n* A function to check if a string is a palindrome is given below:\r\n\r\n```python\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"Your dictionary is empty.\")\r\n    else:\r\n        print(\"Your dictionary has keys: \", dict1.keys())\r\n\r\nprint(\"Original dictionary: \")\r\nmy_dict(my_dict1)\r\n\r\nprint(\"\\nModified dictionary: \")\r\nmy_dict(my_dict2)","votes":null},{"text":"\r\n    if not dict1:\r\n        print(\"The dictionary is empty\")\r\n    else:\r\n        print(\"The dictionary is not empty\")\r\n\r\n\r\nmy_dict(dict1)\r\nmy_dict(dict2)\r\nmy_dict(dict_empty)\r\n```\r\nOutput:\r\n\r\n```\r\nThe dictionary is not empty\r\nThe dictionary is not empty\r\nThe dictionary is empty\r\n```\r\n\r\n## Task 2.2 - Dictionary Operations\r\n\r\n```python\r\ndict1 = {'name': 'Rahul', 'age': 25, 'country': 'India'}\r\ndict2 = {'name': 'Rahul', 'age': 25, 'country': 'India'}\r\ndict_empty = {}\r\n\r\ndict_copy = dict1.copy()\r\nmy_dict(dict1)\r\nprint(dict1)\r\nprint(dict_copy)\r\n\r\ndict1['age'] = 26\r\nmy_dict(dict1)\r\nprint(dict1)\r\nprint(dict_copy)\r\n\r\ndict1.update({'age': 27})\r\nmy_dict(dict1)\r\nprint(dict1)\r\nprint(dict_copy)\r\n\r\ndict1.update(dict2)\r\nmy_dict(dict1)\r\nprint(dict1)\r\nprint(dict_copy)\r\n\r\ndict1.update(dict_empty)\r\nmy_dict(dict1)\r\nprint(dict1)\r\nprint(dict_copy)\r\n\r\ndict1.update({'age': 27, 'country': 'Pakistan'})\r\nmy_dict(dict1)\r\nprint(dict1)\r\nprint(dict_copy)\r\n\r\ndict1.pop('country')\r\nmy_dict(dict1)\r\nprint(dict1)\r\nprint(dict_copy)\r\n\r\ndict1.popitem()\r\nmy_dict(dict1)\r\nprint(dict1)\r\nprint(dict_copy)\r\n```\r\nOutput:\r\n\r\n```\r\nThe dictionary is not empty\r\n{'name': 'Rahul', 'age': 25, 'country': 'Indi","votes":null},{"text":"\r\n    if dict1.get('name', None) and dict1.get('age', None):\r\n        print('User exists.')\r\n    else:\r\n        print('User does not exist.')\r\n\r\n\r","votes":null},{"text":"\r\n    return all(dict1.values())\r\n\r\nif __name__ == '__main__':\r\n    # TODO: write the tests\r\n    print('test')\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({'a': 1, 'b': 2}))\r\n    print(my_dict({'a': 1}))\r\n    print(my_dict({'b': 2}))\r\n    print(my_dict({'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))\r\n    print(my_dict({'a': 1, 'b': 2, 'd': 4, 'e': 5}))\r\n","votes":null},{"text":"\r\n    if not dict1:\r\n        print(\"Your dictionary is empty\")\r\n    else:\r\n        print(\"Your dictionary is not empty\")\r\n\r\n\r","votes":null},{"text":"\r\n    # for key in dict1:\r\n    #     print(key)\r\n    #     print(dict1[key])\r\n    # if dict1:\r\n    #     print(\"Dictionary is not empty\")\r\n    # else:\r\n    #     print(\"Dictionary is empty\")\r\n    return dict1.get(\"name\")\r\nprint(my_dict({\"name\":\"<NAME>\"}))\r\nprint(my_dict({\"name\":\"<NAME>\"}))\r\nprint(my_dict({\"name\":\"<NAME>\"}))\r\n\r","votes":null},{"text":"\r\n    if dict1.items() == {}:\r\n        return True\r\n    else:\r\n        return False\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1}))\r\n\r\n# 1.13\r","votes":null},{"text":"\r\n    if dict1.keys():\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r\nmy_dict(my_dict1)\r\n```\r\n\r\n## Output:\r\n```\r\nTrue\r\n```\r\n\r\n## Explanation\r\n- `my_dict1` is empty, so the `dict1.keys()` returns an empty iterable.\r\n- We can make use of the built-in function `bool()` to check if the `dict1.keys()` is empty or not.\r\n\r\n## Solution\r\n```python\r","votes":null},{"text":"\r\n    if dict1.keys() == []:\r\n        print(\"The dictionary is empty\")\r\n    else:\r\n        print(\"The dictionary is not empty\")\r\n\r\nmy_dict({'a': 1, 'b':2, 'c':3})\r\nmy_dict({})\r\n```\r\n\r\nWe have two functions `my_dict` and `my_dict2`, but their implementations are exactly the same. We can rewrite this function as follows:\r\n\r\n```python\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1.keys() == []:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n```\r\n\r\n```\r\nmy_dict({})\r\n# True\r\n```\r\n\r\n```\r\nmy_dict({\"a\": 1})\r\n# True\r\n```\r\n\r\n```\r\nmy_dict({})\r\n# False\r\n```\r\n\r\n```\r\nmy_dict({\"a\": 1})\r\n# False\r\n```","votes":null},{"text":"\r\n    print(dict1)\r\n\r\nmy_dict({})\r\nmy_dict({\"a\":1})\r\nmy_dict({\"a\":1, \"b\":2})\r\nmy_dict({\"a\":1, \"b\":2, \"c\":3})\r\nmy_dict({\"a\":1, \"b\":2, \"c\":3, \"d\":4})\r\nmy_dict({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5})\r\nmy_dict({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6})\r\nmy_dict({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6, \"g\":7})\r\nmy_dict({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8})\r\nmy_dict({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9})\r\n```\r\n\r\nThe output is:\r\n```\r\n{}\r\n{'a': 1}\r\n{'a': 1, 'b': 2}\r\n{'a': 1, 'b': 2, 'c': 3}\r\n{'a': 1, 'b': 2, 'c': 3, 'd': 4}\r\n{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\r\n{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\r\n{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\r\n{'a': 1, '","votes":null},{"text":"\r\n    for _ in dict1:\r\n        return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    if dict1 is None:\r\n        return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    return False\r\n```\r\n\r\n**Task 2:** Write a function to calculate the sum of two numbers.\r\n\r\n```python\r","votes":null},{"text":"\r\n    if dict1.keys() == {}:\r\n        print(\"Empty.\")\r\n    else:\r\n        print(\"Not empty.\")\r\n\r\n\r","votes":null},{"text":"\r\n    for key in dict1:\r\n        pass\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Test Code \r\nprint(my_dict({\"A\": \"B\", \"C\": \"D\"}))<jupyter_output><empty_output><jupyter_text>**Question 10:** Write a Python function to find the largest number in the list.<jupyter_code","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"The given dictionary is not empty.\")\r\n    else:\r\n        print(\"The given dictionary is empty.\")\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1!= {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n\r\n    # Write your code here.\r\n    if len(dict1) == 0:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n\r\n    return None\r\n\r\n\r\n# In[ ]:\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print('The dictionary is not empty.')\r\n    else:\r\n        print('The dictionary is empty.')\r\n\r\n\r","votes":null},{"text":"\r\n    for i in dict1.values():\r\n        if i:\r\n            return False\r\n        else:\r\n            return True\r\n\r\n\r\nmy_dict({'name': 'Mike', 'age': 34, 'gender':'male'})\r\n# True\r\nmy_dict({})\r\n# False\r\n```\r\n\r\n## 2. Write a Python function to find the smallest element from a list.\r\n```python\r","votes":null},{"text":"\r\n    return dict1.keys() == []\r\n\r\n\r\n# Check if the dictionary is empty or not\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1, 'b': 2}))\r\n```\r\n\r\nOutput:\r\n```\r\nTrue\r\nFalse\r\n```\r\n<hr>\r\n\r\n**5.** A function `my_dict` checks if a dictionary is empty or not.\r\n\r\n```python\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n    return\r\n\r\nmy_dict({})<jupyter_output>The dictionary is not empty.<jupyter_text>Question 1:Write a function to check if two lists are equal or not.<jupyter_code","votes":null},{"text":"\r\n    if dict1.keys():\r\n        return dict1\r\n    else:\r\n        return \"I am empty\"\r\n```\r\n\r\nAs you can see, I firstly checked if the dictionary was empty or not.\r\nI will be adding other functions to the dictionary and other data types.\r\nI will be adding this dictionary to the list of functions in the project.\r\n\r\nAlso, I have added the __repr__() function to the dictionary.\r\n```\r\nclass MyDict(dict):\r\n   ","votes":null},{"text":"\r\n    if dict1.get()=={}:\r\n        print(\"The dictionary is empty\")\r\n    else:\r\n        print(\"The dictionary is not empty\")\r\n\r\nmy_dict({})\r\nmy_dict({'name': 'Rahul'})\r\nmy_dict({'name': 'Rahul','age': 20})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({})\r\nmy_dict({'name': 'Rahul'})\r\nmy_dict({'name': 'Rahul','age': 20})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({})\r\nmy_dict({'name': 'Rahul'})\r\nmy_dict({'name': 'Rahul','age': 20})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({})\r\nmy_dict({'name': 'Rahul'})\r\nmy_dict({'name': 'Rahul','age': 20})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({'name': 'Rahul','age': 20,'skills': ['HTML','CSS']})\r\nmy_dict({'name': 'Ra","votes":null},{"text":"\r\n    if dict1.keys():\r\n        return False\r\n    else:\r\n        return True\r\n\r\n# check if the dictionary is empty\r\nif my_dict(dict1):\r\n    print('The dictionary is empty')\r\nelse:\r\n    print('The dictionary is not empty')\r\n```\r\n\r\n```python\r\n>>> d = {'a': 1, 'b': 2, 'c': 3}\r\n\r\n>>> my_dict(d)\r\nThe dictionary is not empty\r\n\r\n>>> d = {}\r\n\r\n>>> my_dict(d)\r\nThe dictionary is empty\r\n```\r\n\r\n```python\r\n>>> d = {'a': 1, 'b': 2, 'c': 3}\r\n\r\n>>> my_dict(d)\r\nThe dictionary is not empty\r\n\r\n>>> my_dict({})\r\nThe dictionary is empty\r\n```\r\n\r\n```python\r\n>>> my_dict([])\r\nThe dictionary is not empty\r\n\r\n>>> my_dict({})\r\nThe dictionary is empty\r\n```\r\n\r\n```python\r\nmy_list = [1, 2, 3, 4, 5, 6, 7]\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"Dictionary is empty\")\r\n    else:\r\n        print(\"Dictionary is not empty\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    my_dict({})\r\n    my_dict({'a': 100})\r\n    my_dict({'a': 100, 4: 5})\r\n    my_dict({'a': 100, 4: 5, 'c': 6})\r\n    my_dict({'a': 100, 4: 5, 'c': 6, 'd': 7})\r\n","votes":null},{"text":"\r\n    if len(dict1) > 0:\r\n        print(\"The dictionary is not empty\")\r\n    else:\r\n        print(\"The dictionary is empty\")\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1}))","votes":null},{"text":"\r\n    if not dict1:\r\n        print(\"Empty\")\r\n    else:\r\n        print(\"Not Empty\")\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print('This is an empty dictionary.')\r\n    else:\r\n        print('This is not an empty dictionary.')\r\n\r\nmy_dict({})\r\nmy_dict({'a': 'b'})\r\nmy_dict({'a': 'b', 'c': 'd'})\r\nmy_dict({'a': 'b', 'c': [1, 2, 3, 4]})\r\nmy_dict({'a': 'b', 'c': {1: 2, 2: 3, 3: 4}})\r\nmy_dict({'a': 'b', 'c': {'d': 1, 'e': 2}})\r\n```\r\nBut when I run this code, I get the error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"my_dict.py\", line 13, in <module>\r\n    my_dict({'a': 'b', 'c': [1, 2, 3, 4]})\r\n  File \"my_dict.py\", line 3, in my_dict\r\n    if dict1 == {}:\r\nUnboundLocalError: local variable 'dict1' referenced before assignment\r\n```\r\nThe error is raised when I run `my_dict({'a': 'b', 'c': [1, 2, 3, 4]})`.\r\n\r\nI also tried to run the code in the following way, but it gives the same error:\r\n```\r\nmy_dict({'a': 'b', 'c': [1, 2, 3, 4]})\r\n```\r\n\r\n**What is the expected output? What do you see instead?**\r\nI expect the code to run without errors, and my dictionary to be printed to the console.\r\n\r\n**Please provide any additional information below.**\r\nI was able to fix the error by adding the line `dict1 = {}` before the conditional statement.\r\n\r\nI tried to understand what the problem is and I think I found the answer.\r\nThe problem doesn't occur if the dictionary is empty.\r\nWhen the dictionary is not empty the code raises an error.\r\nIf the dictionary is empty the code is executed normally and the dictionary is printed to the console.\r\n\r\n","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        print(\"The dictionary is empty!\")\r\n    else:\r\n        for i in dict1:\r\n            print(i, \":\", dict1[i])\r\n\r","votes":null},{"text":"\r\n    if dict1.keys():\r\n        return True\r\n    return False\r\n\r\n\r\nclass Test(unittest.TestCase):\r\n   ","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        return \"The dictionary is empty.\"\r\n    else:\r\n        return \"The dictionary is not empty.\"\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        for keys in dict1.keys():\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1.get(\"a\") is None:\r\n        return True\r\n    else:\r\n        return False\r\n```\r\nIn the above example, the dictionary `dict1` is empty.\r\nI would like to write a function to check if the dictionary is empty or not. I can easily check if the dictionary is empty by using `if dict1.get(\"a\") is None:` but this is not efficient.\r\nI would like to write a function to check if the dictionary `dict1` is empty or not.\n<issue_comment>username_1: ```python\r\nIn [1]: dict1 = {}\r\n\r\nIn [2]: if dict1.get(\"a\") is None:\r\n...:     print(\"yes\")\r\n...:\r\n\r\nIn [3]: dict1 = {1: 2}\r\n\r\nIn [4]: if dict1.get(\"a\") is None:\r\n...:     print(\"yes\")\r\n...:\r\nyes\r\n```\n<issue_comment>username_0: Thank you.\r\nCan you please give me an example to check if a dictionary is empty or not in Python?\n<issue_comment>username_1: ```python\r\nIn [1]: dict1 = {}\r\n\r\nIn [2]: if dict1.get(\"a\") is None:\r\n...:     print(\"yes\")\r\n...:\r\n\r\nIn [3]: dict1 = {1: 2}\r\n\r\nIn [4]: if dict1.get(\"a\") is None:\r\n...:     print(\"yes\")\r\n...:\r\nyes\r\n```\n<issue_comment>username_0: Thank you.\r\nCan you give me an example to check if a dictionary is empty or not in Python?\n<issue_comment>username_0: Thank you.\r\nCan you give me an example to check if a dictionary is empty or not in Python?\n<issue_comment>username_0: Thank you.\r\nCan you give me an example to check if a dictionary is empty or not in Python?\n<issue_comment>username_0: Thank you.\r\nCan you give me an example to check if a dictionary is empty or not in Python?\n<issue_comment>username_0: Thank you.\r\nCan you give me an example to check if a dictionary is empty or not in Python?\n<issue_comment>username_","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"This dictionary is not empty.\")\r\n    else:\r\n        print(\"This dictionary is empty.\")\r\n\r\n\r\nmy_dict(my_dict)\r\nmy_dict({})\r\nmy_dict(None)\r\n","votes":null},{"text":"\r\n    return dict1 and not dict1.items()\r\n\r\nmy_dict({}) # False\r\nmy_dict({'a': 1, 'b': 2}) # True\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print('This dictionary is empty.')\r\n    else:\r\n        for key, value in dict1.items():\r\n            print(key, value)\r\n\r\n\r","votes":null},{"text":"\r\n    for key, value in dict1.items():\r\n        if value:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The empty dictionary\")\r\n    else:\r\n        print(\"The non-empty dictionary\")\r\nmy_dict({})\r\nmy_dict({\"a\":1,\"b\":2})\r\nmy_dict({\"a\":1,\"b\":2,\"c\":3})\r\n```<issue_closed>","votes":null},{"text":"\r\n    if not dict1:\r\n        return True\r\n    else:\r\n        return False\r\n```\r\nI will add a test for this.\n<issue_comment>username_0: @username_1 \r\nYes, it is working now. I had to add a line to the function to make it work.\r\n```\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Write a function to check if a list is empty or not.\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# print(my_dict({1:2, 3:4}))\r\n# print(my_dict({}))\r\n\r","votes":null},{"text":"\r\n    if dict1.keys():\r\n        print('This is not empty')\r\n    else:\r\n        print('This is empty')\r\n\r\n\r","votes":null},{"text":"\r\n    for key in dict1:\r\n        return True\r\n    return False\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return not dict1\r\n```\n<issue_comment>username_1: This is a great idea. I think it would be nice to be able to do something like:\r\n```python\r","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    return False\r\n\r\n\r\n# -\r\n\r\n# ### 2.2.2. Example 1\r\n\r\n# +\r\n# Define a dictionary\r\n\r\nmy_dict = {'a':1, 'b':2, 'c':3}\r\n\r\n# Print the dictionary\r\n\r\nprint(my_dict)\r\n\r\n# Check if the dictionary is empty or not\r\n\r\nif my_dict == {}:\r\n    print('The dictionary is empty')\r\nelse:\r\n    print('The dictionary is not empty')\r\n\r\n# Print the key of the dictionary\r\n\r\nprint(my_dict.keys())\r\n\r\n# Print the value of the dictionary\r\n\r\nprint(my_dict.values())\r\n\r\n# Print the keys and values of the dictionary\r\n\r\nprint(my_dict.items())\r\n\r\n# Print the size of the dictionary\r\n\r\nprint(len(my_dict))\r\n\r\n# +\r\n# Define a dictionary\r\n\r\nmy_dict = {'a':1, 'b':2, 'c':3}\r\n\r\n# Delete the key 'c' from the dictionary\r\n\r\ndel my_dict['c']\r\n\r\n# Print the dictionary\r\n\r\nprint(my_dict)\r\n\r\n# Check if the dictionary is empty or not\r\n\r\nif my_dict == {}:\r\n    print('The dictionary is empty')\r\nelse:\r\n    print('The dictionary is not empty')\r\n\r\n# Print the key of the dictionary\r\n\r\nprint(my_dict.keys())\r\n\r\n# Print the value of the dictionary\r\n\r\nprint(my_dict.values())\r\n\r\n# Print the keys and values of the dictionary\r\n\r\nprint(my_dict.items())\r\n\r\n# Print the size of the dictionary\r\n\r\nprint(len(my_dict))\r\n\r\n# +\r\n# Define a dictionary\r\n\r\nmy_dict = {'a':1, 'b':2, 'c':3}\r\n\r\n# Update the value of key 'b'\r\n\r\nmy_dict['b'] = 5\r\n\r\n# Print the dictionary\r\n\r\nprint(my_dict)\r\n\r\n# Check if the dictionary is empty or not\r\n\r\nif my_dict == {}:\r\n    print('The dictionary is empty')\r\nelse:\r\n    print('The dictionary i","votes":null},{"text":"\r\n    return dict1 == {}\r\n\r\n#test\r\nprint(my_dict({}))\r\nprint(my_dict({0:1}))\r\nprint(my_dict({'a':1}))\r\nprint(my_dict({'a':1,'b':2}))\r\nprint(my_dict({'a':1,'b':2,'c':3}))\r\nprint(my_dict({'a':1,'b':2,'c':3,'d':4}))\r\nprint(my_dict({'a':1,'b':2,'c':3,'d':4,'e':5}))\r\nprint(my_dict({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}))\r\nprint(my_dict({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7}))\r\nprint(my_dict({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8}))\r\nprint(my_dict({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9}))\r\nprint(my_dict({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10}))\r\nprint(my_dict({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11}))\r\nprint(my_dict({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12}))\r\nprint(my_dict({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,","votes":null},{"text":"\r\n    return not any(dict1.values())\r\n\r\nif __name__ == '__main__':\r\n    # Test your function here\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1}))\r\n    print(my_dict({'a': 1, 'b': 2}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j':","votes":null},{"text":"\r\n    # Write your code here\r\n    if dict1 == {}:\r\n        print(\"The Dictionary is Empty\")\r\n    else:\r\n        print(\"The Dictionary is not Empty\")\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    my_dict({})\r\n    my_dict({\"a\": \"apple\"})\r\n    my_dict({\"a\": \"apple\", \"b\": \"banana\"})\r\n    my_dict({\"a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\"})\r\n    my_dict({\"a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\", \"d\": \"delicious\"})\r\n\r\n\r\n# ---------------------------------------------------\r\n# Write a function to check if a list is empty or not.\r\n# ---------------------------------------------------\r","votes":null},{"text":"\r\n    if dict1:\r\n        return\r\n    else:\r\n        return \"The dictionary is empty.\"\r\n\r\n\r","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        print(\"Your dictionary is empty.\")\r\n    else:\r\n        print(\"Your dictionary is not empty.\")\r\n\r\n\r\nmy_dict({})\r\nmy_dict({\"name\":\"<NAME>\", \"age\":30})","votes":null},{"text":"\r\n    for key, value in dict1.items():\r\n        if value:\r\n            print('key value is not empty')\r\n            break\r\n        else:\r\n            print('key value is empty')\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        return \"The dictionary is empty.\"\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n\r\n\r","votes":null},{"text":"\r\n    for key in dict1:\r\n        if key:\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    if not dict1:\r\n        print('empty')\r\n    else:\r\n        print('not empty')\r\n\r\n\r\nif __name__ == '__main__':\r\n    my_dict({'a': 1})\r\n    my_dict({'a': 1, 'b': 2})\r\n","votes":null}],"time":{"count":15.0,"avg":89576.4288,"std":23355.2088771629,"cov":0.2607294038}}
{"id":583,"question":"def catalan_number(num):\r\n    \"\"\"Write a function for nth catalan number.\"\"\"","answers":[{"text":"\r\n    # The Catalan numbers can be computed using the formula:\r\n    # C(n,k) = C(n-1,k-1) + C(n-1,k)\r\n    # C(n,0) = 1\r\n    # C(n,1) = 1\r\n    if num <= 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n\r\n    catalan = [0] * (num + 1)\r\n    catalan[0] = 1\r\n    catalan[1] = 1\r\n    catalan[2] = 2\r\n\r\n    for i in range(3, num + 1):\r\n        for j in range(1, i + 1):\r\n            catalan[i] += catalan[j - 1] * catalan[i - j]\r\n\r\n    return catalan[num]\r\n\r\n\r","votes":114805.832},{"text":"\r\n    catalan_num = [0] * (num + 1)\r\n    catalan_num[0] = 1\r\n    catalan_num[1] = 1\r\n    for i in range(2, num + 1):\r\n        for j in range(i):\r\n            catalan_num[i] += catalan_num[j] * catalan_num[i - j - 1]\r\n    return catalan_num[num]\r\n\r","votes":117497.768},{"text":"\r\n    if num <= 1:\r\n        return num\r\n    else:\r\n        return num * catalan_number(num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 2\r\n    else:\r\n        return (num * catalan_number(num - 1)) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return (2 * num - 1) * catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) + catalan_number(num-2)\r\n```\r\n\r\n**Output:** 2\r\n\r\n**Explanation:**\r\n\r\nThe catalan_number(0) = 1\r\nThe catalan_number(1) = 1\r\nThe catalan_number(2) = 2\r\nThe catalan_number(3) = 5\r\nThe catalan_number(4) = 14\r\nThe catalan_number(5) = 42\r\nThe catalan_number(6) = 132\r\nThe catalan_number(7) = 429\r\nThe catalan_number(8) = 1430\r\n\r\n**Your Task:**\r\n\r\nYou are required to complete the function `catalan_number(n)` which takes a single integer as input and returns the nth catalan number.\r\n\r\n**Expected Time Complexity:** O(n)\r\n\r\n**Expected Auxiliary Space:** O(1)\r\n\r\n**Constraints:**\r\n\r\n1 <= n <= 105\r\n\r\n**Input Format:**\r\n\r\nFirst and only line contains the integer `n`.\r\n\r\n**Output Format:**\r\n\r\nPrint the nth catalan number.\r\n\r\n### Example 1:\r\n\r\n**Input:**\r\n\r\n```\r\n6\r\n```\r\n\r\n**Output:**\r\n\r\n```\r\n720\r\n```\r\n\r\n### Example 2:\r\n\r\n**Input:**\r\n\r\n```\r\n0\r\n```\r\n\r\n**Output:**\r\n\r\n```\r\n1\r\n```\r\n\r\n### Example 3:\r\n\r\n**Input:**\r\n\r\n```\r\n1\r\n```\r\n\r\n**Output:**\r\n\r\n```\r\n1\r\n```\r\n\r\n### Example 4:\r\n\r\n**Input:**\r\n\r\n```\r\n2\r\n```\r\n\r\n**Output:**\r\n\r\n```\r\n2\r\n```\r\n\r\n### Example 5:\r\n\r\n**Input:**\r\n\r\n```\r\n10\r\n```\r\n\r\n**Output:**\r\n\r\n```\r\n1440\r\n```\r\n\r\n### Example 6:\r\n\r\n*","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) + catalan_number(num-2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        print(\"Error: non-positive argument\")\r\n        return\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) + catalan_number(num-2)*num\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    # Initialize the result to be 0\r\n    result = 0\r\n    # Initialize i to 0\r\n    i = 1\r\n    # Initialize j to 0\r\n    j = 1\r\n    # Initialize k to 0\r\n    k = 0\r\n    # Initialize l to 0\r\n    l = 0\r\n    # Initialize m to 0\r\n    m = 1\r\n\r\n    # First calculate the sum of the first n odd numbers\r\n    # This will be the number of even numbers\r\n    # in the first n terms of the series\r\n    # This will be the number of even elements\r\n    # in the first n terms of the series\r\n    # The number of even elements is n\r\n    # The number of odd elements is n\r\n    # Multiply the number of even numbers by 2\r\n    # to get the number of elements in the first n terms\r\n    # of the series\r\n    # Add the number of elements in the first n terms\r\n    # of the series to the result\r\n    # Add the number of elements in the first n terms\r\n    # of the series to the result\r\n    # Add the number of elements in the first n terms\r\n    # of the series to the result\r\n    # Return the result\r\n    return result\r\n\r","votes":null},{"text":"\r\n    if num <= 0:\r\n        raise ValueError('Number must be positive.')\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return num * catalan_number(num - 1) \/ (num + 1)\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return num * catalan_number(num - 1) \/ (num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + 2 * catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    num_list = list(range(1, num + 1))\r\n    return sum(num_list) \/\/ len(num_list)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if num <= 0:\r\n        return 1\r\n    return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r\nprint(catalan_number(5))\r\n# 120\r\n\r\nprint(catalan_number(3))\r\n# 6\r\n\r\nprint(catalan_number(4))\r\n# 20\r\n","votes":null},{"text":"\r\n\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(catalan_number(3))\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    else:\r\n        return (num - 1) \/ num + catalan_number(num - 1)\r\n\r\n\r\n@timer\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return num * catalan_number(num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return catalan_number(num - 1) + catalan_number(num)\r\n\r\n\r","votes":null},{"text":"\r\n    return math.factorial(2 * num) \/ math.factorial(num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    return math.factorial(num) \/ (math.factorial(num - 1) * math.factorial(num - 2))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(catalan_number(5))\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return num * catalan_number(num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return (2 ** num) * (catalan_number(num - 1) \/\/ (2 * num))\r\n\r\n\r","votes":null},{"text":"\r\n    return math.factorial(2 * num) \/ (math.factorial(num) * math.factorial(2 * num - 1))\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1 or num == 2:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r\nprint(catalan_number(5))\r\n# 24\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n24\r\n```\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return (2 * catalan_number(num - 1) - catalan_number(num - 2)) \/\/ num\r\n\r\n\r","votes":null},{"text":"\r\n    result = 1\r\n    for n in range(1, num + 1):\r\n        result = result * (n - 1) \/ n\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (2 * num - 1) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    assert num >= 0, 'Number must be non-negative'\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r\nclass TestCatalanNumber(unittest.TestCase):\r\n    \"\"\"Define tests for catalan_number function\"\"\"\r\n\r\n   ","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        return num * catalan_number(num - 1)\r\n\r","votes":null},{"text":"\r\n    return 1 if num == 0 else (num * catalan_number(num - 1) + catalan_number(num - 2))\r\n\r\n\r\nprint(catalan_number(0))\r\nprint(catalan_number(1))\r\nprint(catalan_number(2))\r\nprint(catalan_number(3))\r\nprint(catalan_number(4))\r\nprint(catalan_number(5))\r\nprint(catalan_number(6))\r\nprint(catalan_number(7))\r\nprint(catalan_number(8))\r\nprint(catalan_number(9))\r\nprint(catalan_number(10))\r\nprint(catalan_number(11))\r\nprint(catalan_number(12))\r\nprint(catalan_number(13))\r\nprint(catalan_number(14))\r\nprint(catalan_number(15))\r\nprint(catalan_number(16))\r\nprint(catalan_number(17))\r\nprint(catalan_number(18))\r\nprint(catalan_number(19))\r\nprint(catalan_number(20))\r\nprint(catalan_number(21))\r\nprint(catalan_number(22))\r\nprint(catalan_number(23))\r\nprint(catalan_number(24))\r\nprint(catalan_number(25))\r\nprint(catalan_number(26))\r\nprint(catalan_number(27))\r\nprint(catalan_number(28))\r\nprint(catalan_number(29))\r\nprint(catalan_number(30))\r\nprint(catalan_number(31))\r\nprint(catalan_number(32))\r\nprint(catalan_number(33))\r\nprint(catalan_number(34))\r\nprint(catalan_number(35))\r\nprint(catalan_number(36))\r\nprint(catalan_number(37))\r\nprint(catalan_number","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(num) == 1:\r\n        return 1\r\n    elif len(num) == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num[1:]) + catalan_number(num[:-1]) + num[0] * catalan_number(num[:-2])\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return (2*num-1)\/\/2*c(num-1)\r\n    \r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return num * catalan_number(num - 1)\r\n\r\n\r\nprint(catalan_number(5))\r\n\r\n# 4. 10.05.2018\r\n\r\n# 1.\r\n# i = 5\r\n# j = 1\r\n# print(i)\r\n# print(j)\r\n# print(i, j)\r\n# print(i, j, i+j)\r\n# print(i, j, i-j)\r\n\r\n\r\n# 2.\r\n# i = 5\r\n# j = 1\r\n# i = 5\r\n# print(i)\r\n# print(j)\r\n# print(i, j)\r\n# print(i, j, i+j)\r\n# print(i, j, i-j)\r\n\r\n\r\n# 3.\r\n# i = 5\r\n# j = 1\r\n# print(i)\r\n# print(j)\r\n# print(i, j)\r\n# print(i, j, i+j)\r\n# print(i, j, i-j)\r\n\r\n\r\n# 4.\r\n# i = 5\r\n# j = 1\r\n# print(i)\r\n# print(j)\r\n# print(i, j)\r\n# print(i, j, i+j)\r\n# print(i, j, i-j)\r\n\r\n\r\n# 5.\r\n# i = 5\r\n# j = 1\r\n# print(i)\r\n# print(j)\r\n# print(i, j)\r\n# print(i, j, i+j)\r\n# print(i, j, i-j)\r\n\r\n\r\n# 6.\r\n# i = 5\r\n# j = 1\r\n# print(i)\r\n# print(j)\r\n# print(i, j)\r\n# print(i, j, i+j)\r\n# print(i, j, i-j)\r\n\r\n\r\n# 7.\r\n# i = ","votes":null},{"text":"\r\n    return num * (num - 1) \/\/ math.factorial(num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    return num \/\/ 2 * (num - 1) \/\/ 2\r\n\r\n\r","votes":null},{"text":"\r\n    if num <= 1:\r\n        return num\r\n    return catalan_number(num-1) + catalan_number(num-2)\r\n\r\n\r\nprint(catalan_number(10))\r\n# 479001600\r\n","votes":null},{"text":"\r\n    return num * (num - 1) \/\/ 2\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return int(factorial(num) \/ factorial(num - 1))\r\n\r\n\r","votes":null},{"text":"\r\n    return math.factorial(2*num)\/\/(math.factorial(num)*math.factorial(2*num-num))\r\n\r\n\r","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        return num * catalan_number(num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    return binom(2 * num, num + 1)\r\n\r","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        return (num * catalan_number(num-2)) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return (num * catalan_number(num - 1)) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    # check the input\r\n    if num < 0:\r\n        print('The number should be a non-negative integer')\r\n    elif num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 2\r\n    if num == 2:\r\n        return 5\r\n    if num == 3:\r\n        return 14\r\n    if num == 4:\r\n        return 42\r\n    if num == 5:\r\n        return 130\r\n    if num == 6:\r\n        return 429\r\n    if num == 7:\r\n        return 1430\r\n    if num == 8:\r\n        return 4862\r\n    if num == 9:\r\n        return 16796\r\n    if num == 10:\r\n        return 58786\r\n    if num == 11:\r\n        return 208012\r\n    if num == 12:\r\n        return 742900\r\n    if num == 13:\r\n        return 2779720\r\n    if num == 14:\r\n        return 9694845\r\n    if num == 15:\r\n        return 37741184\r\n    if num == 16:\r\n        return 119780160\r\n    if num == 17:\r\n        return 508016700\r\n    if num == 18:\r\n        return 1964382910\r\n    if num == 19:\r\n        return 7629348800\r\n    if num == 20:\r\n        return 32459876500\r\n    if num == 21:\r\n        return 129644790500\r\n    if num == 22:\r\n        return 543210937500\r\n    if num == 23:\r\n        return 2039788205000\r\n    if num == 24:\r\n        return 8159152832000\r\n    if num == 25:\r\n        return 35568742809600\r\n    if num == 26:\r\n        return 140500611776000\r\n  ","votes":null},{"text":"\r\n    catalan = 0\r\n    for i in range(1, num + 1):\r\n        catalan += (i * catalan) \/\/ (i - 1)\r\n    return catalan\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(catalan_number(int(input())))\r\n","votes":null},{"text":"\r\n    if num < 0:\r\n        print(\"Please enter a positive integer.\")\r\n        return\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) + catalan_number(num-2)\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        raise ValueError(\"Catalan numbers can't be negative\")\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        return sum(catalan_number(num - r) for r in range(1, num + 1))\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return (num - 1) * catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    return math.factorial(num+1) \/\/ math.factorial(num)\r\n\r\n\r","votes":null},{"text":"\r\n    return pow(num, 2) * pow((2 * num + 1), num - 1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"Test\"\"\"\r\n    print(catalan_number(4))\r\n    print(catalan_number(5))\r\n    print(catalan_number(6))\r\n    print(catalan_number(7))\r\n    print(catalan_number(8))\r\n    print(catalan_number(9))\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Catalan Numbers:\")\r\n    for num in range(1, 10):\r\n        print(f\"{num}: {catalan_number(num)}\")\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 0\r\n    return (2 * catalan_number(num - 1) - catalan_number(num - 2)) \/ num\r\n\r","votes":null},{"text":"\r\n    if num <= 0:\r\n        return 0\r\n    if num == 1:\r\n        return 1\r\n    return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    return (4 * catalan_number(num - 1) - catalan_number(num - 2)) \/\/ 2\r\n\r\n\r","votes":null},{"text":"\r\n    return (1 \/ factorial(2 * num + 1)) * factorial(num + 1) * factorial(2 * num)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2) * (2 * num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        raise ValueError('Catalan number does not exist for negative numbers.')\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input('Enter number: '))\r\n    print(f'Catalan number for {num} is {catalan_number(num)}')\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return (2 * num + 1) * catalan_number(num - 1) \/ num\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return (num - 1) * catalan_number(num - 1) + num * catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num-1) + catalan_number(num-2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return (num * catalan_number(num - 1)) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 2\r\n    return catalan_number(num - 2) + catalan_number(num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    return math.factorial(2 * num) \/ math.factorial(num) \/ math.factorial(num + 1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    catalan_number(4)\r\n","votes":null},{"text":"\r\n    return 1 if num == 0 else num * catalan_number(num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return catalan_number(num - 1) * (2 * num - 1) \/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2) * catalan_number(num - 1)\r\n\r\n\r\nclass Solution:\r\n    \"\"\"Solution for Catalan Numbers.\"\"\"\r\n\r\n   ","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    catalan = [1]\r\n    for i in range(1, num + 1):\r\n        catalan.append(catalan[i - 1] + catalan[i - 2])\r\n    return catalan[num]\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (num + 1) \/\/ 2\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return int(c_n(num - 1, num - 2))\r\n\r\n\r","votes":null},{"text":"\r\n    return num * (2*num-1)\/2\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input())\r\n    print(catalan_number(num))\r\n","votes":null},{"text":"\r\n    if num < 0:\r\n        return -1\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    catalan_numbers = [\r\n        1,\r\n        1,\r\n        2,\r\n        5,\r\n        14,\r\n        42,\r\n        132,\r\n        429,\r\n        1430,\r\n        4862,\r\n        16796,\r\n        58786,\r\n        208012,\r\n        742900,\r\n        2674440,\r\n        9694845,\r\n        35357670,\r\n        129644790,\r\n        477638700,\r\n        1814306300,\r\n        6564192000,\r\n        25325927000,\r\n        103079215000,\r\n        429899996200,\r\n        1572463762400,\r\n        6765765062200,\r\n        28433885924000,\r\n        119730562589000,\r\n        497871024394000,\r\n        1797693134862300,\r\n        7326744177631600,\r\n        32582064137067200,\r\n        138647808921518400,\r\n        560282524561161200,\r\n        2167510765214348000,\r\n        8452813742789824000,\r\n        36279705305473940480,\r\n        153236068713949122400,\r\n        6399877940642593798400,\r\n        25768007","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return (num * (num + 1)) \/\/ 2\r\n\r\n\r\n# 1.10\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) + catalan_number(num - 2) * num\r\n\r\n\r\n# Tests\r\nassert catalan_number(0) == 1\r\nassert catalan_number(1) == 1\r\nassert catalan_number(2) == 2\r\nassert catalan_number(3) == 5\r\nassert catalan_number(4) == 14\r\nassert catalan_number(5) == 42\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return int(math.factorial(2 * num - 1) \/ math.factorial(num + 1) \/\r\n                   math.factorial(num + 2))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(catalan_number(int(input(\"Please enter a number: \"))))\r\n","votes":null},{"text":"\r\n\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return (2 * catalan_number(num - 1)) - catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    return num * catalan_number(num - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n\r\n    return catalan_number(num - 1) + catalan_number(num - 2)\r\n\r\n\r","votes":null}],"time":{"count":2.0,"avg":116151.8,"std":1903.4862001202,"cov":0.0163879182}}
{"id":586,"question":"def split_Arr(a,n,k):\r\n    \"\"\"Write a python function to split the array and add the first part to the end.\"\"\"","answers":[{"text":"\r\n    return a[k:] + a[:k]\r\n\r","votes":95288.02},{"text":"\r\n    for i in range(k):\r\n        a.append(a.pop(0))\r\n    return a\r\n\r\n# Driver code\r\narr = [1, 2, 3, 4, 5]\r\n\r\nprint(\"Original Array: \" + str(arr))\r\narr = split_Arr(arr,5,2)\r\nprint(\"After Splitting: \" + str(arr))","votes":109609.068},{"text":"\r\n    x=a[k:n+k]\r\n    a[k:n+k]=a[0:k]\r\n    a[0:k]=x\r\n    return a\r\n\r","votes":114363.576},{"text":"\r\n    a1 = a[0:k]\r\n    a2 = a[k:]\r\n    return a2 + a1\r\n\r\nprint(split_Arr([1,2,3,4,5,6,7],3,3))\r\nprint(split_Arr([1,2,3,4,5,6,7],3,4))\r\n","votes":125059.924},{"text":"\r\n    return a[k:n] + a[:k]\r\n\r\n# Driver code\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nk = 4\r\nprint(split_Arr(arr,n,k))\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n","votes":130606.996},{"text":"\r\n    a = list(a)\r\n    for i in range(k):\r\n        a.append(a.pop(0))\r\n    return a\r\n\r\n\r","votes":147112.94},{"text":"\r\n    part = a[:k]\r\n    a = a[k:]\r\n    return a+part\r\n\r","votes":162403.58},{"text":"\r\n    if k==0:\r\n        return a\r\n    else:\r\n        a.append(a.pop(0))\r\n        return split_Arr(a,n,k-1)\r\n\r","votes":191568.292},{"text":"\r\n    new = []\r\n    new.extend(a[k:])\r\n    new.extend(a[0:k])\r\n    return new\r\n\r","votes":253259.692},{"text":"\r\n    if k==1:\r\n        return n\r\n    else:\r\n        n.append(a[0])\r\n        return split_Arr(a[1:],n,k-1)\r\n# Function to insert a node at the beginning of the array.\r","votes":null},{"text":"\r\n    if k==0:\r\n        return a\r\n    else:\r\n        return a+[a[k]]+split_Arr(a,n,k-1)\r\n\r","votes":null},{"text":"\r\n    a = a.copy()\r\n    for i in range(n):\r\n        a.append(a[i])\r\n    a.pop(0)\r\n    return a\r\n\r","votes":null},{"text":"\r\n    if n == 1:\r\n        return [a[k]]\r\n    else:\r\n        return a[k] + split_Arr(a,n-1,k+1)\r\n\r\n\r\na = [1,2,3,4,5,6,7,8,9]\r\nprint(split_Arr(a,9,0))\r\n","votes":null},{"text":"\r\n    return a[n:k+1] + a[:n]\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    return a[n:k+n]\r\n\r\n# test case\r\na = [1,2,3,4,5,6,7,8,9,10]\r\nn,k = 3,4\r\nprint(split_Arr(a,n,k))\r\n# [1,2,3]\r\n# [4,5,6]\r\n# [7,8,9]","votes":null},{"text":"\r\n    split_list=[]\r\n    for i in range(k):\r\n        split_list.append(a[i])\r\n    split_list.extend(a[k:])\r\n    return split_list\r\n\r","votes":null},{"text":"\r\n    return a[n:] + a[:n]\r\n\r","votes":null},{"text":"\r\n    part1 = a[:n]\r\n    part2 = a[n:]\r\n    return part1 + part2\r\n\r","votes":null},{"text":"\r\n    if n==1:\r\n        return (a[0:k],a[k:])\r\n    else:\r\n        return (a[n-1],a[0:k]+a[n-1])\r\n    \r\n    \r","votes":null},{"text":"\r\n    b = []\r\n    for i in range(len(a)):\r\n        if i%n == k:\r\n            b.append(a[i])\r\n    return b\r\n\r","votes":null},{"text":"\r\n    return a[n*k:n*(k+1)]\r\n\r","votes":null},{"text":"\r\n    # Create an empty array and add the first n elements to the array\r\n    b = []\r\n    for i in range(n):\r\n        b.append(a[i])\r\n    # Add the last k elements to the end of the array\r\n    for i in range(n, len(a)):\r\n        b.append(a[i])\r\n    # Print the array\r\n    print (\"Array after splitting: \",b)\r\n# Driver Code\r\narr = [5, 10, 15, 20, 25, 30, 35, 40]\r\nn = 3\r\nk = 2\r\nsplit_Arr(arr, n, k)\r\n\"\"\"\r\nSample Input:\r\narr = [5, 10, 15, 20, 25, 30, 35, 40]\r\nn = 3\r\nk = 2\r\n\r\nSample Output:\r\nArray after splitting:  [10, 15, 20, 25, 30, 35, 40]\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    a.sort()\r\n    return a[:n]+a[k:]+a[n:k]\r\n\r\nn,k = map(int,input().split())\r\narr = list(map(int,input().split()))\r\n# print(split_Arr(arr,n,k))\r\n\r\n# Using a queue\r\nimport queue\r\nq = queue.Queue()\r\nq.put(0)\r\nfor i in range(1,n+1):\r\n    while len(q.queue) and q.queue[0]>arr[i]:\r\n        q.get()\r\n    q.put(arr[i])\r\nprint(q.queue[0])","votes":null},{"text":"\r\n    if(k==0):\r\n        return [a[i] for i in range(len(a)) if i not in range(k*n,k*n+n)]\r\n    else:\r\n        return [a[i] for i in range(len(a)) if i not in range(k*n,k*n+n)] + split_Arr(a,n,k-1)\r\n\r\n#split_Arr(a,n,k)\r\n#print(split_Arr(a,n,k))\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 5, 2))","votes":null},{"text":"\r\n    if(n-k<0):\r\n        return(a,[])\r\n    elif(n-k==0):\r\n        return (a[k:],[])\r\n    else:\r\n        first = a[:k]\r\n        second = a[k:]\r\n        return(first, second)\r\n\r","votes":null},{"text":"\r\n    b = a[:k]\r\n    a = a[k:]\r\n    a = b + a\r\n    return a\r\n\r","votes":null},{"text":"\r\n    return ([a[:n],a[n:]])\r\n\r","votes":null},{"text":"\r\n    return [a[k:] + a[:k]]\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().rstrip().split()))\r\n    k = int(input())\r\n    x = int(input())\r\n    final = []\r\n    if n == 1:\r\n        print(1)\r\n    else:\r\n        for i in range(n):\r\n            if arr[i] >= x:\r\n                final.append(arr[i])\r\n        print(len(final))\r\n        for i, j in enumerate(split_Arr(final, n, k)):\r\n            print(' '.join(map(str, j)))","votes":null},{"text":"\r\n    if(len(a)!= n):\r\n        print(\"Length of array is not equal to n\")\r\n    else:\r\n        for i in range(n):\r\n            if(i < k):\r\n                a.append(a[i])\r\n            else:\r\n                a.insert(i,a[i])\r\n        print(a)\r\n\r\n# Driver Code\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nk = 3\r\nsplit_Arr(arr,n,k)\r\n","votes":null},{"text":"\r\n    a=a[n:k]\r\n    a.reverse()\r\n    return a\r\n\r","votes":null},{"text":"\r\n    b = list(a)\r\n    for i in range(n):\r\n        b.append(b.pop(0))\r\n    return b[:k]\r\n\r","votes":null},{"text":"\r\n    if n == 1:\r\n        return [a[k]]\r\n    if n > 1:\r\n        return [a[k]] + split_Arr(a,n-1,k+1)\r\n\r\n#print(split_Arr(list_of_numbers,5,1))\r\n#print(split_Arr(list_of_numbers,5,1))\r\n\r","votes":null},{"text":"\r\n    for i in range(k):\r\n        a.append(a[i])\r\n    return a\r\n\r","votes":null},{"text":"\r\n    a = list(a)\r\n    count = 0\r\n    for i in range(len(a)):\r\n        if count == k:\r\n            a.append(a[i])\r\n            count = 0\r\n        else:\r\n            count += 1\r\n    return a\r\n\r\n\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 3)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 4)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 5)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 6)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 7)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 8)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 9)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 10)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 11)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 12)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 13)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 14)\r\n# -\r\n\r\nprint(arr)\r\n\r\n# +\r\n# %%time\r\n\r\nsplit_Arr(arr, 8, 15)\r\n# ","votes":null},{"text":"\r\n    b=[]\r\n    count=0\r\n    for i in range(len(a)):\r\n        count=count+1\r\n        b.append(a[i])\r\n        if count==k:\r\n            b.reverse()\r\n            return b\r\n\r\nprint(split_Arr(arr,n,k))\r\n\r\n# + [markdown] id=\"2p13l6b2-c4z\" colab_type=\"text\"\r\n# # 10. Write a python program to reverse array in groups of 4?\n\n# + id=\"886xU6f8-c4y\" colab_type=\"code\" colab={}\r\narr=[1,2,3,4,5,6,7,8,9]\r\nn=len(arr)\r\n\r","votes":null},{"text":"\r\n    if n>1:\r\n        b=a[0:n\/\/2]\r\n        c=a[n\/\/2:n]\r\n        d=split_Arr(b,n\/\/2,k)\r\n        e=split_Arr(c,n\/\/2,k)\r\n        return d+e\r\n    else:\r\n        return a[0:n]\r\n\r","votes":null},{"text":"\r\n    a1=a[:n\/\/2]\r\n    a2=a[n\/\/2:]\r\n    for i in range(k):\r\n        a.append(a1[i])\r\n    for i in range(k):\r\n        a.append(a2[i])\r\n    return a\r","votes":null},{"text":"\r\n    return a[:k] + a[k:k+n]\r\n\r\narr = [1,2,3,4,5,6,7,8,9,10]\r\nn = 3\r\nk = 3\r\nprint(split_Arr(arr,n,k))","votes":null},{"text":"\r\n    # Your code here\r\n    if k==0:\r\n        return a\r\n    else:\r\n        a = a[k:]\r\n        a = split_Arr(a,n,k-1)\r\n        a = a[k:]\r\n        return a + a[:n-k]\r\n\r\nprint(split_Arr(arr,10,2))\r\n","votes":null},{"text":"\r\n    if n<k:\r\n        return a\r\n    else:\r\n        b = a[:k]\r\n        a = a[k:]\r\n        return b+split_Arr(a,n,k)\r\n\r","votes":null},{"text":"\r\n    new_arr = a[:n]\r\n    new_arr.extend(a[n:])\r\n    return new_arr[:k]\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        a[i]=a[n-1-i]\r\n    a.reverse()\r\n    a[n+k:]=a[:n-k]\r\n    a.reverse()\r\n    return a\r\n\r","votes":null},{"text":"\r\n    first=a[:n]\r\n    second=a[n:]\r\n    return first+second\r\n\r","votes":null},{"text":"\r\n    b = [a[0]]\r\n    for i in range(1,n):\r\n        if (i-k)%n == 0:\r\n            b.append(a[i])\r\n    return b\r\n\r","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r","votes":null},{"text":"\r\n    b = []\r\n    for i in range(n):\r\n        b.append(a[i])\r\n    for i in range(k):\r\n        b.append(0)\r\n    return b\r\n\r","votes":null},{"text":"\r\n    if k==1:\r\n        return [a[0:n]]\r\n    elif k==n:\r\n        return [a[n:2*n]]\r\n    else:\r\n        return [a[n:2*n],a[0:n]]\r\n\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,3))\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,1))\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,9))\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,5))\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,7))\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,10))\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,2))\r\n\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,1))\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,2))\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,3))\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,4))\r\n#print(split_Arr([1,2,3,4,5,6,7,8,9,10],10,5))\r\n#print(split_Arr(","votes":null},{"text":"\r\n    a = a[:k]\r\n    a.extend(a[:n-k])\r\n    return a\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    n, k = map(int, input().split())\r\n    arr = list(map(int, input().strip().split()))\r\n    print(split_Arr(arr, n, k))","votes":null},{"text":"\r\n    # If n is even, split n\/2\r\n    if n%2 == 0:\r\n        # Split the array into two parts\r\n        left = a[:n\/\/2]\r\n        right = a[n\/\/2:]\r\n        # Set the first part as the last part\r\n        a = right\r\n        # Set the last part as the first part\r\n        a = left + a\r\n    # If n is odd, split n-1\/2\r\n    else:\r\n        # Split the array into two parts\r\n        left = a[:n\/\/2+1]\r\n        right = a[n\/\/2+1:]\r\n        # Set the first part as the last part\r\n        a = right\r\n        # Set the last part as the first part\r\n        a = left + a\r\n        # Add the first part to the end\r\n    a = a + a[:k]\r\n    return a\r\n\r\n\r","votes":null},{"text":"\r\n    if len(a) >= n:\r\n        return a[n-1:]+split_Arr(a[:n-1],n,k)\r\n    else:\r\n        return a\r\n\r","votes":null},{"text":"\r\n    b=[]\r\n    for i in range(0,n,k):\r\n        b.append(a[i:i+k])\r\n    b.append(a[n:])\r\n    return b\r\n\r","votes":null},{"text":"\r\n    return a[k:]+a[:k]\r\n\r\na = [1,2,3,4,5]\r\nn = 3\r\nk = 1\r\nprint(split_Arr(a,n,k))\r\n```\r\n\r\n**Output:**\r\n```\r\n[2, 3, 4, 5]\r\n```\r\n\r\n**Explanation:**\r\n```\r\nThe function should return the array [2, 3, 4, 5] after splitting the array a after 1st index 1 and adding the remaining elements of the array to the end of the array.\r\n```","votes":null},{"text":"\r\n    a1 = a[:k]\r\n    a2 = a[k:]\r\n    return a1 + a2\r\n\r\n\r","votes":null},{"text":"\r\n    if(k==0):\r\n        return [a[0:n]]\r\n    else:\r\n        return a[n:]+split_Arr(a,n,k-1)\r\n\r","votes":null},{"text":"\r\n    #if k is 0, then the array has been split into equal parts\r\n    if k==0:\r\n        return a\r\n    #if k is not 0, then the array is split into 2 parts and the first part will be added to the end\r\n    else:\r\n        #split the array into 2 parts\r\n        a1=a[:int(n\/2)]\r\n        a2=a[int(n\/2):]\r\n        #split the array into k parts\r\n        a12=split_Arr(a1,n,k-1)\r\n        a22=split_Arr(a2,n,k-1)\r\n        #combine the 2 parts\r\n        a12.extend(a22)\r\n        return a12\r\n\r","votes":null},{"text":"\r\n    if k==0:\r\n        return [a[n:k+n]]\r\n    else:\r\n        return [a[n:k+n]]+split_Arr(a,n,k-1)\r\n\r","votes":null},{"text":"\r\n    b=[]\r\n    for i in range(n,0,-1):\r\n        if k-i<0:\r\n            b.append(a[i])\r\n        else:\r\n            break\r\n    return(b)\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        a[k] = a[i]\r\n        k += 1\r\n\r\n    return a\r\n\r","votes":null},{"text":"\r\n    a = list(a)\r\n    a.reverse()\r\n    for i in range(n,n+k):\r\n        a.append(0)\r\n    a.reverse()\r\n    return a\r\n\r","votes":null},{"text":"\r\n    b=a[k:]\r\n    a=a[:k]\r\n    return a,b\r\n\r","votes":null},{"text":"\r\n    return a[:k] + a[k:]\r\n\r","votes":null},{"text":"\r\n    a1 = a[:k]\r\n    a2 = a[k:]\r\n    return a1 + a2\r\n\r\n\r\nprint(split_Arr([1,2,3,4,5,6,7,8,9],3,3))\r\n\"\"\"\r\nOutput:\r\n[1, 2, 3]\r\n\"\"\"\r\n\r\n\"\"\"\r\nTask 2: Write a Python function to merge the two sorted arrays.\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    a[:n],a[n:k],a[k:] = a[n:k],a[:n],a[n:k]\r\n    return a\r\n    \r","votes":null},{"text":"\r\n    return a[:n]+a[n+k:]\r\n\r","votes":null},{"text":"\r\n    return a[:k] + a[k+n:]\r\n","votes":null},{"text":"\r\n    if(n<=k):\r\n        return(a)\r\n    else:\r\n        return(a+split_Arr(a,n-k,k))\r\n\r","votes":null},{"text":"\r\n    if n==1:\r\n        return (a[0:k],a[k:])\r\n    else:\r\n        return (a[0:k],a[k:]) + split_Arr(a,n-1,k)\r\n\r","votes":null},{"text":"\r\n    a=list(a)\r\n    split_a=a[n:k]\r\n    a.append(split_a)\r\n    return a\r\n\r","votes":null},{"text":"\r\n    b = copy.deepcopy(a)\r\n    a = a[:n]\r\n    b.extend(a)\r\n    b = b[k:]\r\n    return b\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return a\r\n    else:\r\n        return split_Arr(a+[a[n]],n-1,k)\r","votes":null},{"text":"\r\n    return a[n:k+n]\r\n\r","votes":null},{"text":"\r\n    b = a[n:k]\r\n    a = a[:n]\r\n    a.extend(b)\r\n    return a\r\n\r","votes":null},{"text":"\r\n    if n==0:\r\n        return [k]\r\n    else:\r\n        return a[:n] + [k] + split_Arr(a[n:],n,k)\r\n\r","votes":null},{"text":"\r\n    if n>k:\r\n        return [a[0:k]] + split_Arr(a[k:],n,k)\r\n    else:\r\n        return [a[0:n]]\r\n\r","votes":null},{"text":"\r\n    return a[n:n+k] + a[0:n]\r\n\r","votes":null},{"text":"\r\n    #split the array\r\n    a1=a[:n]\r\n    a2=a[n:]\r\n    #add the first part to the end\r\n    return a2+a1\r\n\r\nprint(split_Arr(a,n,k))\r\n```\r\n## OUTPUT:\r\n\r\n```\r\n[1, 4, 2, 3]\r\n```\r\n\r\n## RESULT:\r\nThus the python program to split the array and add the first part to the end is written and verified using python programming.\r\n","votes":null},{"text":"\r\n    a.append(a.pop(0))\r\n    a = a[k:]\r\n    return a\r\n\r","votes":null},{"text":"\r\n    return a[k:],a[:k]\r\n\r","votes":null},{"text":"\r\n    x=a.split()\r\n    x.reverse()\r\n    x=x[:n]\r\n    x.reverse()\r\n    x.append(k)\r\n    print(x)\r\nsplit_Arr(arr,3,5)\r\n","votes":null},{"text":"\r\n    return a[n:k+n] + a[:n]\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        a.append(a.pop(0))\r\n    return a\r\n\r","votes":null},{"text":"\r\n    for i in range(k):\r\n        a.append(a.pop(0))\r\n\r","votes":null},{"text":"\r\n    a1 = a[:k]\r\n    a2 = a[k:]\r\n    return a1 + a2\r\n\r","votes":null},{"text":"\r\n    a_new = []\r\n    for i in range(0,n,k):\r\n        a_new.append(a[i:i+k])\r\n    return a_new\r\n\r","votes":null},{"text":"\r\n    a2 = [0]*n\r\n    for i in range(n):\r\n        a2[i] = a[n-i-1]\r\n    a1 = a2[n-k:]\r\n    a2 = a2[:n-k]\r\n    return a1,a2\r\n\r","votes":null},{"text":"\r\n    a.append(a.pop(0))\r\n    return a[n:n+k]\r\n\r","votes":null},{"text":"\r\n    if k==1:\r\n        return a\r\n    else:\r\n        return split_Arr(a[n:],n,k-1)+[a[0]]\r\n\r","votes":null},{"text":"\r\n    a1=a[:n]\r\n    a2=a[n:n+k]\r\n    a3=a[n+k:]\r\n    return a1+a2+a3\r\n\r\nsplit_Arr(arr,n,k)","votes":null},{"text":"\r\n    s=a[n:k]\r\n    return a[:n]+s+a[k:]\r\n\r","votes":null},{"text":"\r\n    a1 = a[:n]\r\n    a2 = a[n:]\r\n    a = a1\r\n    a.extend(a2)\r\n    return a\r\n\r","votes":null},{"text":"\r\n    for i in range(n):\r\n        if i<k:\r\n            a.append(a[i])\r\n        else:\r\n            a.append(a[i-k])\r\n    return a\r\na=split_Arr(a,n,k)\r\nprint(a)\r\n\"\"\"\r\nOutput:\r\n[1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15]\r\n","votes":null},{"text":"\r\n    return a[n:k],a[0:n]\r\n    \r","votes":null},{"text":"\r\n    a1=[]\r\n    a2=[]\r\n    for i in range(len(a)):\r\n        if i%n==0:\r\n            a1.append(a[i])\r\n        else:\r\n            a2.append(a[i])\r\n    return a1+a2\r\n\r","votes":null},{"text":"\r\n    s1 = []\r\n    s2 = []\r\n    for i in range(n-k):\r\n        s1.append(a[i])\r\n    for i in range(k,n):\r\n        s2.append(a[i])\r\n    return s1,s2\r\n\r","votes":null},{"text":"\r\n    if n==1:\r\n        return a[:k]\r\n    else:\r\n        return a[:k]+split_Arr(a,n-1,k)\r\n\r","votes":null},{"text":"\r\n    x=a[n:]\r\n    a[n:]= []\r\n    return a+x\r\n\r","votes":null},{"text":"\r\n    # Complete your function\r\n    if len(a)<=1:\r\n        return a\r\n    else:\r\n        return a[:n]+[a[n]]+split_Arr(a[n+1:],n,k)\r\n\r\n\r\n\r\n# +\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        a = list(map(int,input().split()))\r\n        print(*split_Arr(a,n,k),sep=' ')\r\n\r\n# -\r\n\r\n\r\n","votes":null}],"time":{"count":9.0,"avg":147696.8986666667,"std":49241.5109131949,"cov":0.3333957}}
{"id":587,"question":"def list_tuple(listx):\r\n    \"\"\"Write a function to convert a list to a tuple.\"\"\"","answers":[{"text":"\r\n    return tuple(listx)\r\n\r","votes":75715.192},{"text":"\r\n    return tuple(listx)\r\n\r\n\r","votes":84245.456},{"text":"\r\n    return tuple(listx)\r\n\r\nlistx = [1, 2, 3, 4]\r\ntuple1 = list_tuple(listx)\r\nprint(tuple1)\r\n","votes":98359.2},{"text":"\r\n    return (tuple(listx))\r\n\r\n# %%\r","votes":99335.652},{"text":"\r\n    return tuple(listx)\r\n\r\n\r\nprint(list_tuple([1, 2, 3, 4, 5]))\r\n","votes":100529.624},{"text":"\r\n    listx = list(listx)\r\n    return tuple(listx)\r\n\r","votes":102937.3},{"text":"\r\n    return tuple(listx)\r","votes":109024.876},{"text":"\r\n    return tuple(listx)\r\n\r\n# Write your solution here\r","votes":111875.856},{"text":"\r\n    new_list = []\r\n    for i in listx:\r\n        new_list.append(i)\r\n    return tuple(new_list)\r\n\r\n\r","votes":119817.156},{"text":"\r\n    return tuple(listx)\r\n\r\n# Question 3\r","votes":121296.472},{"text":"\r\n    tuple_list = tuple(listx)\r\n    return tuple_list\r\n\r\n\r","votes":127168.676},{"text":"\r\n    new_list = tuple(listx)\r\n    return new_list\r\n    \r\n\r","votes":133561.376},{"text":"\r\n    return tuple(listx)\r\n\r\n# 5.2.2  The zip() Function\r\n#\r\n# The zip() function takes two or more sequences and returns a zip object.\r\n# The zip object can then be used to iterate over the values of the tuples.\r\n#\r\n# >>> zip('abc', 'def')\r\n# [('a', 'd'), ('b', 'e'), ('c', 'f')]\r\n\r\n# 5.2.3  The filter() Function\r\n#\r\n# The filter() function creates a filter object from an iterable object.\r\n# The filter object is then used to iterate over the filtered values.\r\n#\r\n# >>> list(filter(lambda x: x % 2, [1, 2, 3, 4]))\r\n# [1, 3]\r\n\r\n# 5.2.4  The map() Function\r\n#\r\n# The map() function is used to build a new list from applying a function\r\n# to each of the items in a sequence.\r\n#\r\n# >>> list(map(lambda x: x * x, [1, 2, 3, 4, 5]))\r\n# [1, 4, 9, 16, 25]\r\n\r\n# 5.2.5  The reduce() Function\r\n#\r\n# The reduce() function is used to combine multiple items into a single item.\r\n# The reduce() function is similar to the sum() function, but it\u2019s much more\r\n# accurate and efficient.\r\n#\r\n# See the examples in the section \u201cCombining Sequences: reduce()\u201d for more\r\n# details.\r\n\r\n# 5.2.6  The reversed() Function\r\n#\r\n# The reversed() function returns a reverse iterator for the list.\r\n#\r\n# >>> reversed('abc')\r\n# <list_reverseiterator object at 0x010681488>\r\n\r\n# 5.2.7  The sorted() Function\r\n#\r\n# The sorted() function is used to sort a list. The sorted() function takes\r\n# a sequence and a comparison function as arguments. Th","votes":136451.46},{"text":"\r\n    return tuple(listx)\r\n\r\n\r\n# + [markdown] id=\"lBq2_C-0780Z\"\r\n# ### 2.1.1.1.2.2.2.2.3.4.4.1.3.5.5.1.3.6.7.2.2.3.1.2.3.3.4.2.3.1.1.3.4.4.3.2.4.4.5.2.2.2.2.1.1.2.2.3.4.2.2.2.1.2.3.3.3.3.4.3.2.3.4.4.3.2.1.3.2.1.3.2.1.2.3.2.4.2.2.3.3.3.2.1.1.4.4.1.3.1.1.2.2.2.4.2.3.1.3.2.2.2.4.2.2.3.3.2.3.2.3.3.3.3.4.2.3.3.2.2.4.3.3.2.4.1.2.3.4.2.2.4.3.2.1.4.3.1.2.3.3.2.3.2.3.3.2.4.3.3.2.3.2.3.3.2.3.3.2.3.4.2.1.2.2.1.1.1.2.3.3.1.2.2.2.1.3.4.2.2.2.1.1.3.1.2.2.3.3.2.2.2.2.2.3.3.4.1.3.4.3.2.3.3.1.2.2.2.3.3.2.2.3.2.2.3.3.2.3.4.3.3.3.2.1.3.4.3.","votes":138542.296},{"text":"\r\n    \r\n    #return tuple(listx)\r\n    return tuple(listx)\r\n\r\n\r","votes":143368.752},{"text":"\r\n    new_list = ()\r\n    for x in listx:\r\n        new_list += (x,)\r\n\r\n    return new_list\r\n\r","votes":143954.86},{"text":"\r\n\r\n    return tuple(listx)\r\n\r","votes":144989.148},{"text":"\r\n    \r\n    return tuple(listx)\r\n\r\n\r\n# +\r\n# Create a list\r\nlist1 = [1, 2, 3, 4]\r\n\r\n# Convert the list to a tuple\r\ntuple1 = list_tuple(list1)\r\nprint(tuple1)\r\n\r\n# +\r\n# Create a list\r\nlist1 = [1, 2, 3]\r\n\r\n# Convert the list to a tuple\r\ntuple1 = list_tuple(list1)\r\nprint(tuple1)\r\n\r\n# +\r\n# Create a list\r\nlist1 = [1, 2, 'three']\r\n\r\n# Convert the list to a tuple\r\ntuple1 = list_tuple(list1)\r\nprint(tuple1)\r\n\r\n# +\r\n# Create a list\r\nlist1 = [1, 2, 3]\r\n\r\n# Convert the list to a tuple\r\ntuple1 = tuple(list1)\r\nprint(tuple1)\r\n\r\n\r\n# +\r\n# Create a list\r\nlist1 = [1, 2, 3]\r\n\r\n# Convert the list to a tuple\r\ntuple1 = tuple(list1)\r\nprint(tuple1)\r\n\r\n# +\r\n# Create a list\r\nlist1 = [1, 2, 3]\r\n\r\n# Convert the list to a tuple\r\ntuple1 = tuple(list1)\r\nprint(tuple1)\r\n\r\n# +\r\n# Create a list\r\nlist1 = [1, 2, 3]\r\n\r\n# Convert the list to a tuple\r\ntuple1 = tuple(list1)\r\nprint(tuple1)\r\n\r\n# +\r\n# Create a list\r\nlist1 = [1, 2, 3]\r\n\r\n# Convert the list to a tuple\r\ntuple1 = tuple(list1)\r\nprint(tuple1)\r\n# -\r\n\r\n# ## 4.4 The zip() function\r\n#\r\n# The zip() function is used to combine multiple iterables into a single iterable of tuples. The zip() function returns an iterator object.\r\n#\r\n# The zip() function is defined as follows:\r\n#\r\n# ```python\r\n","votes":153677.972},{"text":"\r\n    tuplex = ()\r\n    for i in listx:\r\n        tuplex += (i,)\r\n    return tuplex\r\n\r\n\r\n# test function\r\ntest_list = [1, 2, 3]\r\ntest_tuple = list_tuple(test_list)\r\nprint(test_tuple)","votes":155021.312},{"text":"\r\n    if listx:\r\n        return tuple(listx)\r\n    else:\r\n        return ()\r\n\r","votes":172031.512},{"text":"\r\n    for i in listx:\r\n        print(i, end=\" \")\r\n    print()\r\n\r","votes":null},{"text":"\r\n    return tuple(listx)\r\n```\r\n```\r\n>>> list_tuple([1,2,3])\r\n(1, 2, 3)\r\n```\r\n```\r\n>>> list_tuple([1,2,3,4])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: 'tuple' object is not iterable\r\n```\r\n```\r\n>>> list_tuple('abc')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: 'tuple' object is not iterable\r\n```\r\n\r\n## 2. list to set\r\n```\r\n>>> list_to_set = lambda x: set(x)\r\n>>> list_to_set([1,2,3])\r\n{1, 2, 3}\r\n```\r\n```\r\n>>> list_to_set([1,1,2,2,3,3,3])\r\n{1, 2, 3}\r\n```\r\n\r\n## 3. list to dict\r\n```\r\n>>> list_to_dict = lambda x: dict(zip(x, range(len(x))))\r\n>>> list_to_dict([1,2,3])\r\n{0: 1, 1: 2, 2: 3}\r\n```\r\n```\r\n>>> list_to_dict([1,1,2,2,3,3,3])\r\n{0: 1, 1: 2, 2: 3}\r\n```\r\n\r\n## 4. list to string\r\n```\r\n>>> list_to_string = lambda x: ''.join(str(i) for i in x)\r\n>>> list_to_string([1,2,3])\r\n'123'\r\n```\r\n```\r\n>>> list_to_string([1,1,2,2,3,3,3])\r\n'123'\r\n```\r\n\r\n## 5. list to array\r\n```\r\n>>> list_to_array = lambda x: [int(i) for i i","votes":null},{"text":"\r\n    return (x for x in listx)\r\n\r\n\r","votes":null},{"text":"\r\n    print(listx)\r\n    print(tuple(listx))\r\n\r\n","votes":null},{"text":"\r\n    return (i for i in listx)\r\n\r\nlist1 = [1, 2, 3, 4]\r\nlist2 = [5, 6, 7, 8]\r\nlist3 = [9, 10, 11, 12]\r\n\r\nlist_tuple(list1)\r\n\r\n# Print the first element of list_tuple.\r\n# The function returns an iterator object.\r\nfor i in list_tuple(list1):\r\n    print(i)\r\n\r\n# Print the first 3 elements of list_tuple.\r\n# The function returns an iterator object.\r\nfor i in list_tuple(list1)[:3]:\r\n    print(i)\r\n\r\n# Print the first 2 elements of list_tuple.\r\n# The function returns an iterator object.\r\nfor i in list_tuple(list1)[:2]:\r\n    print(i)\r\n\r\n# Print the elements of list_tuple.\r\n# The function returns an iterator object.\r\nfor i in list_tuple(list1):\r\n    print(i)\r\n\r\n# Print the elements of list_tuple.\r\n# The function returns an iterator object.\r\nfor i in list_tuple(list1):\r\n    print(i)\r\n\r\n# Print the elements of list_tuple.\r\n# The function returns an iterator object.\r\nfor i in list_tuple(list1):\r\n    print(i)\r\n\r\n# Print the elements of list_tuple.\r\n# The function returns an iterator object.\r\nfor i in list_tuple(list1):\r\n    print(i)\r\n\r\n# Print the elements of list_tuple.\r\n# The function returns an iterator object.\r\nfor i in list_tuple(list1):\r\n    print(i)\r\n\r\n# Print the elements of list_tuple.\r\n# The function returns an iterator object.\r\nfor i in list_tuple(list1):\r\n    print(i)\r\n\r\n# Print the elements of list_tuple.\r\n# The function returns an iterator object.\r\nfor i in list_tuple(list1):\r\n    print(i)\r\n\r\n# Print the elements of list_tuple.\r\n# The function returns an iterator object.\r\nfor ","votes":null},{"text":"\r\n    ret = ()\r\n    for i in listx:\r\n        ret = ret + (i,)\r\n    print(ret)\r\n\r\n\r","votes":null},{"text":"\r\n    return (x for x in listx)\r\n\r","votes":null},{"text":"\r\n    return tuple(listx)\r\nprint(list_tuple(list1))\r\n\r","votes":null},{"text":"\r\n    return (x for x in listx)\r\n\r\n# print(list_tuple([1, 2, 3, 4, 5]))\r\n\r","votes":null},{"text":"\r\n    return list(zip(*listx))\r\nx = [1, 2, 3, 4, 5]\r\ny = list_tuple(x)\r\nprint(y)\r\n\r","votes":null},{"text":"\r\n    return tuple(listx)\r\n\r\n# Create the list.\r\nlist1 = [1, 2, 3]\r\n\r\n# Print the list.\r\nprint(list1)\r\n\r\n# Convert the list to a tuple.\r\ntuple1 = list_tuple(list1)\r\n\r\n# Print the tuple.\r\nprint(tuple1)\r\n\r\n# Create the list.\r\nlist2 = [1, 2, 3, 4, 5, 6]\r\n\r\n# Print the list.\r\nprint(list2)\r\n\r\n# Convert the list to a tuple.\r\ntuple2 = list_tuple(list2)\r\n\r\n# Print the tuple.\r\nprint(tuple2)\r\n```\r\n\r\n```\r\n$ python3 examples\/list_tuple.py\r\n[1, 2, 3]\r\n(1, 2, 3)\r\n[1, 2, 3, 4, 5, 6]\r\n(1, 2, 3, 4, 5, 6)\r\n```\r\n\r\n## 2.7.5. Iterating over a list\r\n```python\r\n# Create the list.\r\nlist1 = [1, 2, 3]\r\n\r\n# Print the list.\r\nprint(list1)\r\n\r\n# Iterate over the list.\r\nfor value in list1:\r\n    # Print the value.\r\n    print(value)\r\n\r\n# Create the list.\r\nlist2 = [1, 2, 3, 4, 5, 6]\r\n\r\n# Print the list.\r\nprint(list2)\r\n\r\n# Iterate over the list.\r\nfor value in list2:\r\n    # Print the value.\r\n    print(value)\r\n```\r\n\r\n```\r\n$ python3 examples\/list_iterate.py\r\n[1, 2, 3]\r\n1\r\n2\r\n3\r\n[1, 2, 3, 4, 5, 6]\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n```\r\n\r\n## 2.7.6. List Comprehensions\r\n```python\r\n# Create the list.\r\nlis","votes":null}],"time":{"count":20.0,"avg":123595.2074,"std":25543.4586038826,"cov":0.2066703001}}
{"id":588,"question":"def big_diff(nums):\r\n    \"\"\"Write a python function to find the difference between largest and smallest value in a given array.\"\"\"","answers":[{"text":"\r\n    num_big = max(nums)\r\n    num_smallest = min(nums)\r\n    return num_big - num_smallest\r\n\r","votes":54680.28},{"text":"\r\n    if len(nums) < 2:\r\n        return False\r\n    nums.sort()\r\n    return nums[-1] - nums[0]\r\n\r\n\r","votes":56110.332},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":69005.684},{"text":"\r\n    max_val = max(nums)\r\n    min_val = min(nums)\r\n    return max_val - min_val\r\n\r\n\r\nif __name__ == '__main__':\r\n    print('The biggest difference between largest and smallest value in a given array is:', big_diff([6, 10, 12, 9, 5]))","votes":70341.836},{"text":"\r\n    if nums:\r\n        return max(nums) - min(nums)\r\n    else:\r\n        return 0\r\n\r\n\r","votes":72769.048},{"text":"\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    return max_num - min_num\r\n\r","votes":75264.44},{"text":"\r\n    return max(nums)-min(nums)\r\n\r\nif __name__=='__main__':\r\n    nums=[1,2,3,4,5,6,7,8,9,10]\r\n    print(big_diff(nums))","votes":78247.4},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nprint(big_diff([2, 3, 4, 1]))","votes":79944.468},{"text":"\r\n    if not nums:\r\n        return 0\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n\r","votes":80889.752},{"text":"\r\n    max_val = max(nums)\r\n    min_val = min(nums)\r\n    return max_val - min_val\r\n\r\n\r\nprint(big_diff([1, 2, 3, 4]))\r\n","votes":81885.124},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\n# + id=\"f-jC1w-g_DqK\" colab_type=\"code\" colab={}\r","votes":83381.044},{"text":"\r\n    # create a copy of the list\r\n    nums_copy = nums[:]\r\n    # sort the values\r\n    nums_copy.sort()\r\n    # return the difference\r\n    return nums_copy[-1] - nums_copy[0]\r\n\r\n\r","votes":84064.328},{"text":"\r\n    max_ = max(nums)\r\n    min_ = min(nums)\r\n    diff = max_ - min_\r\n    return diff\r\n\r\n\r","votes":85037.992},{"text":"\r\n    if len(nums) == 0:\r\n        return None\r\n    return sorted(nums)[-1] - sorted(nums)[0]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [1, 3, -2, 4, 6, -1, 2, -3]\r\n    print(big_diff(nums))\r\n","votes":85415.412},{"text":"\r\n    return max(nums)-min(nums)\r\n\r","votes":86708.012},{"text":"\r\n    return max(nums) - min(nums)\r\n\r","votes":87193.452},{"text":"\r\n    a = max(nums)\r\n    b = min(nums)\r\n    diff = a - b\r\n    return diff\r\n\r\n\r","votes":87949.992},{"text":"\r\n    if nums:\r\n        return max(nums) - min(nums)\r\n    return 0\r\n\r\n\r","votes":90460.524},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nprint(big_diff([10, -10, 20, 30, 40, 50]))","votes":91276.704},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(big_diff([5, 4, 3, 2, 1]))\r\n","votes":91674.068},{"text":"\r\n    if not nums:\r\n        return 0\r\n    min_val = min(nums)\r\n    max_val = max(nums)\r\n    return abs(min_val - max_val)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([1, 3, 5, 2, 3]))\r\n","votes":92056.612},{"text":"\r\n    if len(nums) == 0:\r\n        return\r\n    min_val = max_val = nums[0]\r\n    for i in range(len(nums)):\r\n        if nums[i] < min_val:\r\n            min_val = nums[i]\r\n        else:\r\n            max_val = max_val if max_val > nums[i] else nums[i]\r\n    return max_val - min_val\r\n\r\n\r\n\"\"\"\r\nExample 1:\r\n\r\nInput: [1, 3, 6, 10, 15]\r\n\r\nOutput: 15 - 1 = 14\r\n\r\nExample 2:\r\n\r\nInput: [10, 9, 2, 5, 3, 7, 101, 18]\r\n\r\nOutput: 101 - 3 = 98\r\n\r\nNote:\r\n\r\nThe length of the array will not exceed 10,000.\r\n\r\nAll the integers in the input array are in the range of 32-bit signed integer.\r\nThe answer is guaranteed to fit in a 32-bit signed integer.\r\n\"\"\"\r\n","votes":92164.256},{"text":"\r\n    max_value = max(nums)\r\n    min_value = min(nums)\r\n    return (max_value - min_value)\r\n\r\n\r","votes":94809.4},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nprint(big_diff([2, 5, 4, 1, 3]))\r\nprint(big_diff([1, 2, 3, 4, 5]))","votes":94993.54},{"text":"\r\n    max_val = max(nums)\r\n    min_val = min(nums)\r\n    diff = max_val - min_val\r\n    return diff\r\n\r\n\r","votes":95565.512},{"text":"\r\n\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":95869.844},{"text":"\r\n    biggest = max(nums)\r\n    smallest = min(nums)\r\n    return biggest - smallest\r\n\r\n\r","votes":96580.128},{"text":"\r\n    if nums == []:\r\n        return 0\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([1, 2, 3, 4, 5]))\r\n    print(big_diff([5, 4, 3, 2, 1]))\r\n    print(big_diff([5, 4, 3, 2]))\r\n    print(big_diff([5, 4, 3]))\r\n    print(big_diff([5, 4]))\r\n    print(big_diff([5]))\r\n","votes":98371.228},{"text":"\r\n    max_val = max(nums)\r\n    min_val = min(nums)\r\n    return max_val - min_val\r\n\r\n\r","votes":98532.756},{"text":"\r\n    n = len(nums)\r\n    s = sorted(nums)\r\n    return s[n-1] - s[0]\r\n\r","votes":99698.18},{"text":"\r\n    min_val = min(nums)\r\n    max_val = max(nums)\r\n    return max_val - min_val\r\n\r\n\r\n#","votes":101662.9},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([1, 2, 3, 4, 5]))\r\n    print(big_diff([1, 5, 7, 12, 23]))\r\n    print(big_diff([-1, -2, -3, -4, -5]))\r\n    print(big_diff([10, 30, 40, 50]))\r\n    print(big_diff([1, 100, 10, 1000]))","votes":101913.456},{"text":"\r\n    if nums == []:\r\n        return None\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(big_diff([10, 15, 12]))\r\n    print(big_diff([5, 3, 1]))\r\n    print(big_diff([1, 1]))\r\n","votes":102179.42},{"text":"\r\n    max_ = max(nums)\r\n    min_ = min(nums)\r\n    return max_ - min_\r\n\r\n\r","votes":102560.2},{"text":"\r\n    res = max(nums) - min(nums)\r\n    return res\r\n\r\n\r\n# %%\r\n# %%\r\n# %%\r\n\r","votes":102935.444},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nif __name__ == \"__main__\":\r\n    print(big_diff([1, 2, 3, 4, 5]))\r\n    print(big_diff([]))\r\n    print(big_diff([1, 2, 3, 4, 5, 10, -10]))\r\n","votes":105596.724},{"text":"\r\n    max = min = nums[0]\r\n    for n in nums:\r\n        if n > max:\r\n            max = n\r\n        if n < min:\r\n            min = n\r\n    return max - min\r\n\r\n\r","votes":105790.004},{"text":"\r\n    biggest = max(nums)\r\n    smallest = min(nums)\r\n    diff = biggest - smallest\r\n    return diff\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n","votes":108635.696},{"text":"\r\n    largest = max(nums)\r\n    smallest = min(nums)\r\n    diff = largest - smallest\r\n    return diff\r\n\r\n\r","votes":110398.468},{"text":"\r\n    largest = max(nums)\r\n    smallest = min(nums)\r\n    return largest - smallest\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([1, 2, 3, 4]))\r\n    print(big_diff([1, 2, 3]))\r\n","votes":113359.324},{"text":"\r\n    nums = sorted(nums)\r\n    return nums[len(nums)-1]-nums[0]\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    nums = list(map(int, input().split()))\r\n    print(big_diff(nums))","votes":115472.612},{"text":"\r\n    max = nums[0]\r\n    min = nums[0]\r\n    for i in range(1, len(nums)):\r\n        if nums[i] > max:\r\n            max = nums[i]\r\n        if nums[i] < min:\r\n            min = nums[i]\r\n    return max - min\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(big_diff([2, 3, 4, 5]))\r\n","votes":119430.536},{"text":"\r\n    if len(nums) == 0:\r\n        return 0\r\n    elif len(nums) == 1:\r\n        return abs(nums[0])\r\n    else:\r\n        min_val = min(nums)\r\n        max_val = max(nums)\r\n        return abs(max_val - min_val)\r\n\r\nprint(big_diff([10, 20, 30, 40, 50]))\r\nprint(big_diff([1, 2, 3, 4, 5]))\r\nprint(big_diff([]))\r\n","votes":119795.568},{"text":"\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    return max_num - min_num\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([5, 7, 9, 11, 13, 15]))\r\n    # The output should be 2.\r\n    print(big_diff([3, 4, 6, 8, 10]))\r\n    # The output should be 10.\r\n    print(big_diff([1, 2, 3, 4, 5]))\r\n    # The output should be 5.\r\n    print(big_diff([2, 2, 2]))\r\n    # The output should be 0.\r\n    print(big_diff([100, 2, 3, 4, 5]))\r\n    # The output should be 99.\r\n    print(big_diff([100, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    # The output should be 99.","votes":120092.204},{"text":"\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":120163.6},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(big_diff([1, 2, 3, 4, 5, 6]))\r\n    print(big_diff([1, 2, 3, 4, 5]))\r\n    print(big_diff([1, 2, 3, 4]))\r\n    print(big_diff([1, 2, 3]))\r\n    print(big_diff([1, 2]))\r\n    print(big_diff([1]))\r\n    print(big_diff([]))\r\n","votes":120991.56},{"text":"\r\n    if len(nums) == 0:\r\n        return\r\n    min_val = nums[0]\r\n    max_val = nums[0]\r\n    for i in range(1, len(nums)):\r\n        if nums[i] > max_val:\r\n            max_val = nums[i]\r\n        elif nums[i] < min_val:\r\n            min_val = nums[i]\r\n    return max_val - min_val\r\n\r\n\r\n\"\"\"\r\nWrite a python function to find the intersection of two given arrays.\r\nThe arrays may contain duplicate elements.\r\n\r\nFor example, given the following two arrays:\r\n\r\n[1, 2, 2, 1]\r\n[2, 2]\r\n\r\nYour function should return the following list:\r\n\r\n[2, 2]\r\n\"\"\"\r\n\r\n\r","votes":121623.764},{"text":"\r\n    min_value = min(nums)\r\n    max_value = max(nums)\r\n    return max_value - min_value\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n","votes":121639.252},{"text":"\r\n    if len(nums) == 0:\r\n        return None\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([1, 2, 3]))\r\n\r\nprint(big_diff([]))\r\n","votes":122359.528},{"text":"\r\n    nums.sort()\r\n    return nums[-1] - nums[0]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([1, 2, 3, 4, 5, -1, 2, 3, 4, 2]))\r\n","votes":126282.3},{"text":"\r\n    if len(nums) == 1:\r\n        return 0\r\n    elif len(nums) == 2:\r\n        return abs(nums[0] - nums[1])\r\n    elif len(nums) > 2:\r\n        return max(nums) - min(nums)\r\n\r\n\r\n# -\r\n\r\nprint(big_diff([1, 2, 3, 4, 5, 6]))\r\nprint(big_diff([1, 2, 3, 4, 5]))\r\nprint(big_diff([1, 2, 3, 4]))\r\nprint(big_diff([1, 2, 3]))\r\nprint(big_diff([1, 2]))\r\nprint(big_diff([1]))\r\nprint(big_diff([]))\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n\r\n# # 2. Check if a given number is prime or not\r\n# Write a python function to check if a given number is prime or not.\r\n#\r\n# A prime number is a number greater than 1 which is not divisible by any number other than 1 and itself.\r\n#\r\n# For example, 1 is not a prime number, 2 is a prime number, 7 is not a prime number, 37 is a prime number.\r\n\r","votes":127212.108},{"text":"\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    return max_num - min_num\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([2, 3, 9, 1]))\r\n","votes":128114.812},{"text":"\r\n    # Your code here\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":128567.448},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([1, 2, 3, 4, 5]))\r\nprint(big_diff([99, 5, 4, 3, 2, 1]))\r\n","votes":128632.624},{"text":"\r\n    if not nums:\r\n        return None\r\n    elif len(nums) == 1:\r\n        return 0\r\n    elif len(nums) == 2:\r\n        return nums[1] - nums[0]\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\nprint(big_diff([1, 4, 3, 2]))\r\n# Output:\r\n# 3\r\nprint(big_diff([1, 4, 3, 2, 1]))\r\n# Output:\r\n# 1\r\nprint(big_diff([1, 4, 3, 2, 1, 1]))\r\n# Output:\r\n# 0\r\nprint(big_diff([1, 4, 3, 2, 1, 1, 1]))\r\n# Output:\r\n# 1\r\nprint(big_diff([1, 4, 3, 2, 1, 1, 1, 1]))\r\n# Output:\r\n# 1\r\nprint(big_diff([1, 4, 3, 2, 1, 1, 1, 1, 1]))\r\n# Output:\r\n# 2\r\nprint(big_diff([1, 4, 3, 2, 1, 1, 1, 1, 1, 1]))\r\n# Output:\r\n# 3","votes":129311.588},{"text":"\r\n    a = max(nums)\r\n    b = min(nums)\r\n    return a - b\r\n\r\n\r","votes":131305.904},{"text":"\r\n    if not nums:\r\n        return None\r\n    max_val = max(nums)\r\n    min_val = min(nums)\r\n    return max_val - min_val\r\n\r\n\r","votes":131858.912},{"text":"\r\n    largest = max(nums)\r\n    smallest = min(nums)\r\n    return largest - smallest\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(big_diff(a))\r\n","votes":134483.48},{"text":"\r\n\r\n    # If array is empty\r\n    if len(nums) == 0:\r\n        return 0\r\n    # If array contains only one element\r\n    if len(nums) == 1:\r\n        return 0\r\n    # Find the largest element\r\n    largest = max(nums)\r\n    # Find the smallest element\r\n    smallest = min(nums)\r\n\r\n    # If largest element is greater than smallest element\r\n    if largest > smallest:\r\n        # Return the difference between largest and smallest element\r\n        return largest - smallest\r\n    else:\r\n        # Return the difference between smallest and largest element\r\n        return smallest - largest\r\n\r\n\r","votes":134742.364},{"text":"\r\n    if len(nums) <= 1:\r\n        return 0\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":137663.764},{"text":"\r\n    sorted_nums = sorted(nums)\r\n    return sorted_nums[-1] - sorted_nums[0]\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [5, 4, 3, 2, 1]\r\n    print(big_diff(nums))\r\n","votes":137824.648},{"text":"\r\n    assert len(nums) > 0\r\n    return max(nums) - min(nums)\r\n\r\nprint(big_diff([-1, -2, -3]))\r\nprint(big_diff([0, 1, 2, 3, 4]))\r\nprint(big_diff([1, 2, 3]))\r\nprint(big_diff([5, 6, 7]))\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7]))\r\n","votes":137912.952},{"text":"\r\n    largest = max(nums)\r\n    smallest = min(nums)\r\n    return largest - smallest\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([2, 4, 3, 7, 5, 1, 10]))\r\n    print(big_diff([10, 2, 3, 4, 5, 6, 1]))\r\n","votes":138043.908},{"text":"\r\n    return max(nums)-min(nums)\r\n\r\nprint(big_diff([1,2,3,4,5,6,7,8,9,10]))\r\n","votes":138251.08},{"text":"\r\n    if nums == []:\r\n        return 0\r\n    return max(nums) - min(nums)\r\n\r\n\r\n# + colab={\"base_uri\": \"https:\/\/localhost:8080\/\"} id=\"Yv8sY976vI1x\" outputId=\"2a801486-2d1d-4759-8807-70b58d14223a\"\r\nbig_diff([5, 10, 20, 7, 9, 1, 3, 2])\n\n# + id=\"9-V-3Q42vR0f\"\n\n","votes":138617.94},{"text":"\r\n    smallest = min(nums)\r\n    largest = max(nums)\r\n    return largest - smallest\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    x = [1, 2, 3, 4, 5, 6, 7]\r\n    print(big_diff(x))\r\n","votes":142066.608},{"text":"\r\n    max_value = max(nums)\r\n    min_value = min(nums)\r\n    return max_value - min_value\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    test_case = int(input())\r\n    arr = []\r\n    for i in range(test_case):\r\n        arr.append(int(input()))\r\n    print(big_diff(arr))\r\n","votes":144853.156},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([10, 3, 1, 9, 10, 2, 4, 5, 6, 8]))\r\n\r\n# %%\r\n# Finding the 2nd largest element\r\n\"\"\"Write a python function to find 2nd largest element in a given array.\"\"\"\r\nfrom functools import reduce\r\n\r","votes":145226.832},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nprint(big_diff([1,3,2,5,4,6,7,8]))\r\nprint(big_diff([9,2,1,3,10,7,13,11,6,14,5,15,12,8,16,17]))","votes":145752.592},{"text":"\r\n    # Write your code here\r\n    if len(nums) == 0:\r\n        return None\r\n    if len(nums) == 1:\r\n        return 0\r\n\r\n    min_val = nums[0]\r\n    max_val = nums[0]\r\n    for num in nums:\r\n        if num > max_val:\r\n            max_val = num\r\n        elif num < min_val:\r\n            min_val = num\r\n\r\n    return max_val - min_val\r\n\r\n\r\n# %%\r\ntest_data = [1, 5, 6, 10, 12, 15]\r\nprint(big_diff(test_data))\r\n# %%\r\ntest_data2 = [1, 5, 6, 10, 12, 15, 20]\r\nprint(big_diff(test_data2))\r\n# %%\r\ntest_data3 = [1, 5, 6, 10, 12, 15, 20, 30]\r\nprint(big_diff(test_data3))\r\n# %%\r\ntest_data4 = [1, 5, 6, 9, 12, 15, 20, 30]\r\nprint(big_diff(test_data4))\r\n","votes":145771.688},{"text":"\r\n    nums.sort()\r\n    return nums[-1] - nums[0]\r\n\r\n\r\nprint(big_diff([10, 5, 2, 3, 1]))\r\nprint(big_diff([10, 5, 2, 3, 1, 100, 50, 20, 30, 1000]))\r\n","votes":149700.212},{"text":"\r\n    smallest = float('inf')\r\n    largest = float('-inf')\r\n    for i in range(len(nums)):\r\n        if nums[i] < smallest:\r\n            smallest = nums[i]\r\n        if nums[i] > largest:\r\n            largest = nums[i]\r\n    return largest - smallest\r\n\r\n\r","votes":181662.508},{"text":"\r\n    if len(nums) > 1:\r\n        min_val = min(nums)\r\n        max_val = max(nums)\r\n        return max_val - min_val\r\n    else:\r\n        return 0\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = [2, 3, 5, 9]\r\n    print(big_diff(num))\r\n","votes":195230.728},{"text":"\r\n    min = nums[0]\r\n    max = nums[0]\r\n    for i in range(len(nums)):\r\n        if nums[i] < min:\r\n            min = nums[i]\r\n        if nums[i] > max:\r\n            max = nums[i]\r\n    return max - min\r\n\r\n\r","votes":228181.58},{"text":"\r\n    max = max(nums)\r\n    min = min(nums)\r\n    return max - min\r\n\r","votes":null},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nprint(big_diff([1, 3, 5, 7, 9, 11, 13, 15, 17]))\r\n\r\n```\r\n\r\n# 2. **Write a python function to find the sum of all elements of a list.**\r\n\r\n```\r\n\r","votes":null},{"text":"\r\n    max_value = max(nums)\r\n    min_value = min(nums)\r\n    return max_value - min_value\r\n\r\n\r\nprint(big_diff(nums))\r\n\r\n\r\n# A better way\r","votes":null},{"text":"\r\n    temp = max(nums)\r\n    print(\"temp: \", temp)\r\n    index = nums.index(temp)\r\n    print(\"index: \", index)\r\n    temp = min(nums)\r\n    print(\"temp: \", temp)\r\n    index = nums.index(temp)\r\n    print(\"index: \", index)\r\n    print(\"big_diff: \", index - index)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    big_diff([1, 3, 5, 7, 10])\r\n    big_diff([5, 4, 3, 1, 2, 1, 1, 1, 1])\r\n","votes":null},{"text":"\r\n    max = -999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999","votes":null},{"text":"\r\n    # Write your code here.\r\n    max = max(nums)\r\n    min = min(nums)\r\n    return max - min\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([1, 2, 1, 4, 3]))\r\n    print(big_diff([1, 2, 3, 4, 5]))\r\n","votes":null},{"text":"\r\n    nums = sorted(nums)\r\n    return nums[-1] - nums[0]\r\n\r\nprint(big_diff([1,9,10,11,4,3,2,5,8,7,6])) # 10\r\nprint(big_diff([-1,2,3,7,9])) # 10\r\nprint(big_diff([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,","votes":null},{"text":"\r\n    if len(nums) == 1:\r\n        return 0\r\n    min_val = min(nums)\r\n    max_val = max(nums)\r\n    return max_val - min_val\r\n\r\n\r\nprint(big_diff([2, 5]))\r\nprint(big_diff([1, 1, 1, 1, 1]))\r\nprint(big_diff([]))\r\n","votes":null},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nresult = big_diff([1, 2, 3, 4, 5, 6])\r\nprint(result)\r\n```\r\n\r\n# 3. Find the difference between largest and smallest value in a given array using max and min functions\r\n\r\n```python\r","votes":null},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nprint(big_diff(my_list))","votes":null},{"text":"\r\n    if len(nums) == 0:\r\n        return None\r\n    elif len(nums) == 1:\r\n        return nums[0]\r\n    elif len(nums) == 2:\r\n        return max(nums[0] - nums[1], nums[1] - nums[0])\r\n    else:\r\n        return max(big_diff(nums[1:]), nums[0] - min(big_diff(nums[1:])))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([2, 1, 2]))\r\n    print(big_diff([2, 1, 2, 3, 4]))\r\n    print(big_diff([2, 1, 2, 3, 4, 5]))\r\n    print(big_diff([2, 2, 2, 2, 2]))\r\n","votes":null},{"text":"\r\n    result = 0\r\n    for num in nums:\r\n        if num < 0:\r\n            result += num\r\n    return result\r\n\r\n\r","votes":null}],"time":{"count":74.0,"avg":112092.0722162162,"std":30168.2737341678,"cov":0.2691383355}}
{"id":591,"question":"def swap_List(newList):\r\n    \"\"\"Write a python function to interchange the first and last elements in a list.\"\"\"","answers":[{"text":"\r\n    # This is the first element of the list\r\n    first = newList[0]\r\n    # This is the last element of the list\r\n    last = newList[-1]\r\n    # Swap the first and last elements\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\n\r","votes":86151.56},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n## Test Code \r\n## You can use this code to test your function. You can also test your function with other lists.\r\n## You can also write your own test cases.\r\n\r\ntest_list = [1,2,3]\r\nprint(swap_List(test_list))\r\ntest_list2 = [0,1,2,3,4]\r\nprint(swap_List(test_list2))\r\n","votes":88561.288},{"text":"\r\n    x=newList[0]\r\n    newList[0]=newList[-1]\r\n    newList[-1]=x\r\n    return newList\r\n\r","votes":95208.38},{"text":"\r\n    first, last = newList[0], newList[-1]\r\n    newList[0], newList[-1] = last, first\r\n    return newList\r\n\r","votes":99926.536},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n# Function to reverse the elements of the list\r","votes":100444.996},{"text":"\r\n\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r\n\r","votes":100850.22},{"text":"\r\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\r\n    return newList\r\n\r","votes":101285.344},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r","votes":103858.236},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r","votes":103955.912},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8]))\r\n","votes":105826.792},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\n# 5. Write a python program to reverse the order of the elements in a list.\r","votes":106292.628},{"text":"\r\n    first, last = newList[0], newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\nprint(swap_List([1, 2, 3, 4]))\r\n","votes":106874.54},{"text":"\r\n    if (len(newList) >= 1):\r\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":107736.888},{"text":"\r\n\r\n    if len(newList) > 1:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":108194.96},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\n\r","votes":111046.484},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\nif __name__ == \"__main__\":\r\n    newList = [1, 2, 3, 4, 5]\r\n    swap_List(newList)\r\n    print(newList)","votes":112637.504},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":116046.976},{"text":"\r\n    first_element = newList[0]\r\n    last_element = newList[-1]\r\n    newList[0] = last_element\r\n    newList[-1] = first_element\r\n    return newList\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test = [10, 2, 3]\r\n    print(swap_List(test))\r\n","votes":120003.288},{"text":"\r\n    first = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = first\r\n    return newList\r\n\r\n\r","votes":120970.476},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r","votes":122574.948},{"text":"\r\n    newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0]\r\n    return newList\r\n\r\n\r","votes":124865.964},{"text":"\r\n    # write your code here\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":125376.972},{"text":"\r\n    first, last = newList[0], newList[-1]\r\n    newList[0], newList[-1] = last, first\r\n    return newList\r\n\r\n\r","votes":129196.872},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\nnewList = [1,2,3,4,5]\r\nnewList = swap_List(newList)\r\nprint(newList)\r\n","votes":133232.544},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r\n\r","votes":133727.876},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\n# Write a python function to find the median of a list.\r","votes":139111.9},{"text":"\r\n    a = newList[0]\r\n    newList[0] = newList[len(newList) - 1]\r\n    newList[len(newList) - 1] = a\r\n    return newList\r\n\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\r\nprint(swap_List(['a','b','c','d','e','f','g','h','i','j']))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\r\nprint(swap_List(['a','b','c','d','e','f','g','h','i','j','k','l','m']))\r\n\r\n","votes":144007.888},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n# print(swap_List(list1))\r\n\r\n\r","votes":149794.844},{"text":"\r\n    head = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = head\r\n    return newList\r\n\r","votes":152109.032},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[len(newList)-1]\r\n    newList[len(newList)-1] = temp\r\n    return newList\r\n\r\nprint(swap_List([1,2,3,4]))\r\nprint(swap_List([1,2,3,4,5]))\r\nprint(swap_List([1,2,3,4,5,6]))\r\nprint(swap_List([1,2,3]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9]))\r\n\r\n# Challenge 13:\r\n\r\n# Write a python function to swap the two strings without using the swap() function.\r\n\r","votes":153003.704},{"text":"\r\n    # write your code here\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nprint(swap_List([2, 3, 4, 5]))\r\nprint(swap_List([1, 2, 3, 4]))\r\nprint(swap_List([1, 2]))","votes":162349.172},{"text":"\r\n    # write code here\r\n    first = newList[0]\r\n    last = newList[len(newList) - 1]\r\n    newList[0] = last\r\n    newList[len(newList) - 1] = first\r\n    return newList\r\n\r\n\"\"\"\r\nWrite a python function to reverse a list.\r\nInput:\r\na list\r\nOutput:\r\nreversed list\r\n\"\"\"\r","votes":163768.684},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n    \r\n# Write a function to swap the first and last elements of a given list\r","votes":171132.436},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r\n\r\nprint(swap_List([2, 3, 5, 7, 11]))\r\n\r\n\"\"\"\r\nWrite a python function to reverse the order of the first two elements in a list.\r\n\"\"\"\r","votes":174344.196},{"text":"\r\n\r\n    if newList == []:\r\n        return []\r\n\r\n    else:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n        return newList\r\n\r","votes":181779.484},{"text":"\r\n    first, last = newList[0], newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r","votes":181862.24},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\nprint(swap_List([1, 2, 3]))\r\n\r\n# 1. Swap the first and last elements in a list\r\n# 2. Print the list after swapping the first and last elements\r\n\r\n\r\n# 2. Write a python function to swap the first and last elements in a list\r\n# 3. Print the list after swapping the first and last elements\r\n\r\n\r\n# 3. Write a python function to swap the first and last elements in a list\r\n# 4. Print the list after swapping the first and last elements\r\n\r\n\r\n# 4. Write a python function to swap the first and last elements in a list\r\n# 5. Print the list after swapping the first and last elements\r\n\r\n\r\n# 5. Write a python function to swap the first and last elements in a list\r\n# 6. Print the list after swapping the first and last elements\r\n\r\n\r\n# 6. Write a python function to swap the first and last elements in a list\r\n# 7. Print the list after swapping the first and last elements\r\n\r\n\r\n# 7. Write a python function to swap the first and last elements in a list\r\n# 8. Print the list after swapping the first and last elements\r\n\r\n\r\n# 8. Write a python function to swap the first and last elements in a list\r\n# 9. Print the list after swapping the first and last elements\r\n\r\n\r\n# 9. Write a python function to swap the first and last elements in a list\r\n# 10. Print the list after swapping the first and last elements\r\n\r\n\r\n# 10. Write a python function to swap the first and last elements in a list\r\n# 11. Print the list after swapping the first and last elements\r\n\r\n\r\n# 11. Write a python function to swap the first and last elements in a list\r\n# 12. Print the list after swapping the first and last elements\r\n\r\n\r\n# 12. Write a python function to swap the first and last elements in a list\r\n# 13. Print the list after swapping the first an","votes":194895.964},{"text":"\r\n    # Write your code here\r\n    newList[0],newList[-1] = newList[-1],newList[0]\r\n    return newList\r\n    \r\nprint(swap_List([1,2,3]))\r\nprint(swap_List([4,5,6]))\r\nprint(swap_List([7,8,9]))\r\nprint(swap_List([10,11,12]))\r\nprint(swap_List([13,14,15]))\r\nprint(swap_List([16,17,18]))\r\nprint(swap_List([19,20,21]))\r\nprint(swap_List([22,23,24]))\r\nprint(swap_List([25,26,27]))\r\nprint(swap_List([28,29,30]))\r\nprint(swap_List([31,32,33]))\r\nprint(swap_List([34,35,36]))\r\nprint(swap_List([37,38,39]))\r\nprint(swap_List([40,41,42]))\r\nprint(swap_List([43,44,45]))\r\nprint(swap_List([46,47,48]))\r\nprint(swap_List([49,50,51]))\r\nprint(swap_List([52,53,54]))\r\nprint(swap_List([55,56,57]))\r\nprint(swap_List([58,59,60]))\r\nprint(swap_List([61,62,63]))\r\nprint(swap_List([64,65,66]))\r\nprint(swap_List([67,68,69]))\r\nprint(swap_List([70,71,72]))\r\nprint(swap_List([73,74,75]))\r\nprint(swap_List([76,77,78]))\r\nprint(swap_List([79,80,81]))\r\nprint","votes":216506.508},{"text":"\r\n    firstElement = newList[0]\r\n    lastElement = newList[-1]\r\n    newList[0] = lastElement\r\n    newList[-1] = firstElement\r\n    return newList\r\nprint(swap_List([1,2,3,4]))\r\nprint(swap_List([1,2,3,4,5,6]))\r\nprint(swap_List([1,2,3,4,5]))\r\nprint(swap_List([1,2,3,4,5,6,7]))\r\nprint(swap_List([1,2,3,4,5,6,7,8]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\r\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\r\nprint","votes":231307.264},{"text":"\r\n    first = newList[0]\r\n    last = newList[len(newList)-1]\r\n    newList.remove(last)\r\n    newList.insert(0,last)\r\n    newList.remove(first)\r\n    newList.insert(len(newList)-1,first)\r\n    return newList\r\n\r","votes":null},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n\r\n# TEST CASES\r\nassert swap_List([1, 2]) == [2, 1]\r\nassert swap_List([1, 2, 3]) == [2, 1, 3]\r\nassert swap_List([1]) == [1]\r\nassert swap_List([]) == []\r\nprint('Success!')\r\n","votes":null},{"text":"\r\n    return newList[::-1]\r\n\r","votes":null},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\n\r\n# testing\r\nprint(swap_List([1, 2, 3, 4, 5]))\r\nprint(swap_List([1, 2, 3, 4]))\r\nprint(swap_List([1, 2, 3]))\r\nprint(swap_List([1, 2]))\r\nprint(swap_List([1]))\r\nprint(swap_List([]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n","votes":null},{"text":"\r\n    newList.reverse()\r\n    print(newList)\r\n    newList.reverse()\r\n\r","votes":null},{"text":"\r\n    return newList[1:]+[newList[0]]\r\n\r","votes":null},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList.remove(last)\r\n    newList.append(first)\r\n    return newList\r\n\r","votes":null},{"text":"\r\n    newList.reverse()\r\n    return newList\r\nnewList = [1,2,3,4]\r\nprint(swap_List(newList))\r\nprint(newList)\r\n#\r\n\"\"\"Write a python function to remove the odd elements from a list.\"\"\"\r","votes":null},{"text":"\r\n    return newList[::-1]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    \r\n    return newList\r\n\r\n\r\n# +\r\n# Test function\r\n\r\nprint(\"Original List: \", list1)\r\nprint(\"After swapping List: \", swap_List(list1))\r\n# -\r\n\r\n# ### Exercise 3\r\n\r\n# Write a python function to swap the first and last elements of a list if the condition is met.\r\n#\r\n# Hint: The condition for swapping is to check if the first element is greater than the last one.\r\n\r\n# +\r\n# Write your function here\r","votes":null},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r\n# Run the function on the list\r\nmyList = swap_List(myList)\r\n\r\n# Print the list\r\nprint(myList)\r\n","votes":null},{"text":"\r\n    first, last = newList[0], newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\nprint(swap_List(newList))\r\n","votes":null},{"text":"\r\n    newList[-1], newList[0] = newList[0], newList[-1]\r\n    return newList\r\n\r\nprint(swap_List(list1))\r\n\r\nlist1 = [1, 2, 3]\r\n\r","votes":null},{"text":"\r\n    # Use the swap_values function to swap\r\n    # the first and last elements in the list\r\n    # newList = [1,2,3,4,5]\r\n    # swap_List(newList)\r\n    # print(newList)\r\n\r\n    # Use the first and last elements in the list\r\n    # as the first and last elements of two separate variables\r\n    # newList = [1,2,3,4,5]\r\n    # first = newList[0]\r\n    # last = newList[-1]\r\n    # newList = [newList[-1], newList[0]]\r\n    # newList = [last, first]\r\n    # print(newList)\r\n\r\n    # Use the first and last elements in the list\r\n    # as the second and second-to-last elements of two separate variables\r\n    # newList = [1,2,3,4,5]\r\n    # first = newList[0]\r\n    # last = newList[-1]\r\n    # newList = [newList[-2], newList[-1]]\r\n    # newList = [first, newList[-1]]\r\n    # print(newList)\r\n\r\n    # Use the first and last elements in the list\r\n    # as the third and second-to-last elements of two separate variables\r\n    # newList = [1,2,3,4,5]\r\n    # first = newList[0]\r\n    # last = newList[-1]\r\n    # newList = [newList[-3], newList[-2]]\r\n    # newList = [first, newList[-2]]\r\n    # print(newList)\r\n\r\n    # Use the first and last elements in the list\r\n    # as the third and second-to-last elements of two separate variables\r\n    # newList = [1,2,3,4,5]\r\n    # first = newList[0]\r\n    # last = newList[-1]\r\n    # newList = [newList[-4], newList[-3]]\r\n    # newList = [first, newList[-3]]\r\n    # print(newList)\r\n\r\n    # Use the first and last elements in the list\r\n    # as the third and second-to-last elements of two separate variables\r\n    # newList = [1,2,3,4,5]\r\n    # first = newList[0]\r\n  ","votes":null},{"text":"\r\n    # swap the first and last element\r\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\r\n    return newList\r\n\r\nswapList = [1, 2, 3, 4]\r\nprint swap_List(swapList)\r\n","votes":null},{"text":"\r\n\r\n    return newList[::-1]\r\n\r\n\r\n# print(swap_List([1, 2, 3]))\r\n# print(swap_List([1, 2, 3, 4]))\r\n\r\n\r","votes":null},{"text":"\r\n    first = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = first\r\n\r\n\r","votes":null},{"text":"\r\n    firstElement = newList.pop(0)\r\n    newList.append(firstElement)\r\n    return newList\r\n\r\nprint(swap_List([1,2,3]))\r\nprint(swap_List([3,4,5,6,7]))\r\n","votes":null},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\nprint(swap_List(list_1))\r\n","votes":null},{"text":"\r\n    first = newList[0]\r\n    last = newList[len(newList)-1]\r\n    newList[0] = last\r\n    newList[len(newList)-1] = first\r\n\r","votes":null},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    print(newList)\r\n\r\n\r\n# ----------------------------------------------- #\r\n# 1.7.2.7 - Functions as Arguments\r\n# ----------------------------------------------- #\r","votes":null},{"text":"\r\n    #newList = [1,2,3,4,5,6]\r\n    #Write your code below this line.\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nprint(swap_List([1,2,3,4,5,6]))\r\n```\r\n<\/details>\r\n\r\n<details>\r\n<summary>Answer 2<\/summary>\r\n```py\r","votes":null},{"text":"\r\n    newList=np.swapaxes(newList,0,1)\r\n    return newList\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n    return newList[::-1]\r\n\r\n# Test\r\nprint(swap_List([1,2,3,4,5])) # [5,4,3,2,1]\r\nprint(swap_List([1,2,3,4])) # [4,3,2,1]\r\nprint(swap_List([1,2])) # [2,1]\r\nprint(swap_List([1])) # [1]\r\nprint(swap_List([])) # []","votes":null},{"text":"\r\n    return newList[1], newList[0]\r\n\r\nlist_1 = [1, 2, 3, 4, 5]\r\n\r\nprint(\"The original list is:\", list_1)\r\nprint(\"The swapped list is:\", swap_List(list_1))\r\n","votes":null},{"text":"\r\n    # write your code here\r\n    newList.insert(0, newList.pop())\r\n    return newList\r\n\r","votes":null},{"text":"\r\n    if len(newList) == 0:\r\n        return newList\r\n    else:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n        return swap_List(newList)\r\n\r\n\r\nprint(swap_List(range(10)))\r\nprint()\r\n\r\n# 3. Write a python function to find all the prime numbers less than 2500.\r","votes":null},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n\r","votes":null},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n\r\n\r","votes":null},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n\r\nprint(f'Before swap: {newList}')\r\nswap_List(newList)\r\nprint(f'After swap: {newList}')\r\n","votes":null},{"text":"\r\n    first, second = newList[0], newList[-1]\r\n    newList[0] = second\r\n    newList[-1] = first\r\n\r\n# Calling swap_List\r\nnewList = [1, 2, 3, 4]\r\nswap_List(newList)\r\nprint(newList)\r\n```\r\n\r\nOutput:\r\n```\r\n[4, 2, 3, 1]\r\n```\r\n\r\n### 1.2.3.2. Lists and Tuples\r\n\r\nPython has two types of lists\/tuples:\r\n- List: Ordered collection of elements of any type.\r\n- Tuple: Immutable ordered collection of elements of any type.\r\n\r\n```python\r\n# List Example\r\nmyList = [1, 2, 3, 4, 5, 6]\r\nprint(myList)\r\n\r\n# Tuple Example\r\nmyTuple = (1, 2, 3, 4, 5, 6)\r\nprint(myTuple)\r\n```\r\n\r\nOutput:\r\n```\r\n[1, 2, 3, 4, 5, 6]\r\n(1, 2, 3, 4, 5, 6)\r\n```\r\n\r\n#### 1.2.3.2.1. List operations\r\n\r\n- len() : Returns the length of a list.\r\n- list.append() : Adds an element to the end of a list.\r\n- list.extend() : Adds all elements of a list to the end of another list.\r\n- list.insert() : Inserts an element at the specified position in a list.\r\n- list.remove() : Removes the first occurrence of the specified value from a list.\r\n- list.pop() : Removes and returns the last element of a list.\r\n\r\n```python\r\n# List operations\r\nmyList = [1, 2, 3, 4, 5, 6]\r\n\r\nprint(myList)\r\n\r\nprint(len(myList))\r\nprint(myList.append(7))\r\nprint(myList)\r\n\r\nprint(myList.extend([7, 8]))","votes":null},{"text":"\r\n    first, last = newList[0], newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n\r\n# Print the newList\r\nprint(\"After interchanging the first and last elements in the list:\")\r\nprint(newList)\r\n","votes":null},{"text":"\r\n    if len(newList) >= 2:\r\n        return newList[:-1] + newList[-1] + newList[:-1][:1]\r\n    return newList\r\n\r\n#print(swap_List(list1))\r\n#print(swap_List(list2))\r\n#print(swap_List(list3))\r\n\r\n#Write a python function to find the largest among the three integers.\r","votes":null},{"text":"\r\n    # your code here\r\n    return newList[::-1]\r\n\r","votes":null},{"text":"\r\n    return newList[-1], newList[0]\r\n\r","votes":null},{"text":"\r\n    tmp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = tmp\r\n    print(newList)\r\n    \r\n#Write a python function to find the length of a list\r","votes":null},{"text":"\r\n    # Your code here\r\n    newList.pop(0)\r\n    newList.append(newList.pop(-1))\r\n    return newList\r\n\r\n# Test Cases\r\nprint(swap_List([1, 2, 3, 4]))\r\nprint(swap_List([1, 2, 3]))\r\nprint(swap_List([1, 2]))\r\nprint(swap_List([]))\r\nprint(swap_List([1]))\r\nprint(swap_List())\r\n","votes":null},{"text":"\r\n    if len(newList) > 1:\r\n        return newList[-1], newList[0]\r\n    else:\r\n        return newList[0]\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n    # Your code here\r\n  ","votes":null},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n\r","votes":null},{"text":"\r\n    if len(newList) == 0:\r\n        return newList\r\n    return [newList[-1]] + newList[:-1]\r\n\r\n\r\n# Write a function to swap the first and last element in a list.\r","votes":null},{"text":"\r\n    first, last = newList[0], newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n    \r\n# test function\r\nnewList = [1,2,3,4,5]\r\nprint(newList)\r\nswap_List(newList)\r\nprint(newList)\r\n\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n[1, 2, 3, 4, 5]\r\n[5, 2, 3, 4, 1]\r\n```\r\n\r\n---\r\n\r\n## 7. Reverse a list\r\n\r\n```python\r","votes":null},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nprint(swap_List(myList))\r\n\r\n# + [markdown] id=\"i52_t069l17J\" colab_type=\"text\"\r\n# ### 2.15.2 Nested List Comprehension\r\n#\r\n# Python 3 has a new syntax for creating nested list comprehensions. The syntax is more elegant and readable than the nested loops.\r\n#\r\n# It is also much shorter than nested loops.\r\n#\r\n# In Python 3, you can create a nested list comprehension by using square brackets and the in operator.\r\n#\r\n# The following example creates a nested list that contains the square values in a list.\r\n#\r\n# ```\r\n# [x**2 for x in range(10)]\r\n# ```\r\n#\r\n# The following example shows the same thing, but in a different way.\r\n#\r\n# ```\r\n# [[x**2 for x in range(10)] for x in range(10)]\r\n# ```\r\n#\r\n# The following example shows how to create a list of lists.\r\n#\r\n# ```\r\n# [[x, x**2] for x in range(10)]\r\n# ```\r\n#\r\n# The following example shows how to create a list of tuples.\r\n#\r\n# ```\r\n# [(x, x**2) for x in range(10)]\r\n# ```\r\n#\r\n# The following example shows how to create a dictionary.\r\n#\r\n# ```\r\n# {x: x**2 for x in range(10)}\r\n# ```\r\n#\r\n# The following example shows how to create a dictionary with the corresponding keys and values.\r\n#\r\n# ```\r\n# {x: x**2 for x in range(10)}\r\n# ```\r\n#\r\n# The following example shows how to create a dictionary with the corresponding keys and values.\r\n#\r\n# ```\r\n# {x: x**2 fo","votes":null},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    print(newList)\r\n\r\n\r","votes":null},{"text":"\r\n    return newList[::-1]\r\n\r\n\r\n# 2.3.2.1.7: Reverse a list using recursion\r","votes":null},{"text":"\r\n    newList[::] = newList[::-1]\r\n    return newList\r\n\r","votes":null}],"time":{"count":39.0,"avg":132841.5769230769,"std":35551.7368314591,"cov":0.2676250738}}
{"id":593,"question":"def removezero_ip(ip):\r\n    \"\"\"Write a function to remove leading zeroes from an ip address.\"\"\"","answers":[{"text":"\r\n    return ''.join(filter(lambda x: x!= '0', ip))\r\n\r\n\r","votes":81017.172},{"text":"\r\n    ip=ip.replace('0.0.0.0', '')\r\n    ip=ip.replace('0.0.0', '')\r\n    ip=ip.replace('0.0', '')\r\n    ip=ip.replace('0', '')\r\n    return ip\r\n\r","votes":88368.288},{"text":"\r\n    newip = \"\"\r\n    for c in ip:\r\n        if c!= \"0\":\r\n            newip = newip + c\r\n    return newip\r\n\r\n\r","votes":91654.052},{"text":"\r\n    new_ip = \"\"\r\n    for i in ip:\r\n        if i!= '0':\r\n            new_ip += i\r\n    return new_ip\r\n\r","votes":94491.252},{"text":"\r\n    ip = ip.strip().split(\".\")\r\n    ip = [int(i) for i in ip]\r\n    return \".\".join(map(str, ip))\r\n\r\n\r","votes":98708.944},{"text":"\r\n    ip_list = ip.split(\".\")\r\n    ip_list = [int(i) for i in ip_list]\r\n    for i in range(len(ip_list)):\r\n        if ip_list[i] == 0:\r\n            ip_list.pop(i)\r\n            if len(ip_list) == 3:\r\n                break\r\n    return \".\".join(str(i) for i in ip_list)\r\n\r\n\r","votes":104078.648},{"text":"\r\n    ip = ip.split(\".\")\r\n    for i in range(len(ip)):\r\n        ip[i] = ip[i].lstrip('0')\r\n    return \".\".join(ip)\r\n\r\n\r","votes":111937.508},{"text":"\r\n    ip = ip.split('.')\r\n    ip = [int(i) for i in ip]\r\n    ip = [str(i) for i in ip]\r\n    ip = [i for i in ip if i!= '0']\r\n    return '.'.join(ip)\r\n\r\n\r","votes":135050.344},{"text":"\r\n    ip = ip.strip()\r\n    ip = ip.split('.')\r\n    for i in range(len(ip)):\r\n        ip[i] = ip[i].strip()\r\n        ip[i] = ip[i].strip('0')\r\n    return '.'.join(ip)\r\n\r\n\r","votes":158501.144},{"text":"\r\n    ip = ip.split('.')\r\n    ip = [int(i) for i in ip]\r\n    while ip[0] == 0:\r\n        ip.pop(0)\r\n    return '.'.join(str(i) for i in ip)\r\n\r\n\r","votes":166389.724},{"text":"\r\n    if ip.startswith('0.0.0.0'):\r\n        return ip[4:]\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    newip = ip.split('.')\r\n    for i in range(len(newip)):\r\n        if newip[i] == '0':\r\n            del newip[i]\r\n    return '.'.join(newip)\r\n\r\n\r","votes":null},{"text":"\r\n    return ip.lstrip('0.')\r\n\r","votes":null},{"text":"\r\n    return ip.split(\".\")[1:]\r\n\r\n\r","votes":null},{"text":"\r\n    return ip.lstrip('0')\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'^\\d+\\.?\\d*\\.\\d+\\.?\\d*$', ip, re.MULTILINE)\r\n\r\n\r","votes":null},{"text":"\r\n    if ip.startswith('0.0.0.0'):\r\n        return ip[7:]\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    return ip.split('.')[1:]\r\n\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    for i in range(len(ip)):\r\n        if ip[i] == \"0\":\r\n            ip = ip.replace(ip[i], \"\")\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    ip = ip.split('.')\r\n    while ip[0] == '0':\r\n        ip.pop(0)\r\n    return '.'.join(ip)\r\n\r","votes":null},{"text":"\r\n    if ip.startswith('0'):\r\n        return ip[1:]\r\n    else:\r\n        return ip\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if ip.startswith('0.0.0.0'):\r\n        ip = ip[7:]\r\n\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.lstrip('0')\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    if ip.startswith('0.0.0.0'):\r\n        return ip[4:]\r\n    else:\r\n        return ip\r\n\r","votes":null},{"text":"\r\n    if ip.startswith('0.'):\r\n        ip = ip[1:]\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    ip = ip.lstrip('0')\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    iplist = ip.split(\".\")\r\n    iplist = [str(x) for x in iplist]\r\n    for i in range(len(iplist)):\r\n        if iplist[i] == \"0\":\r\n            del iplist[i]\r\n    return \".\".join(iplist)\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"^0+(?=\\d)\", \"\", ip)\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.strip()\r\n    if ip.startswith('0.0.0.0') or ip.startswith('0.0.0'):\r\n        ip = ip[4:]\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    return '.'.join(ip.split('.')[1:])\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.strip()\r\n    return re.sub(r\"^0*\", \"\", ip)\r\n\r\n\r","votes":null},{"text":"\r\n    if ip.startswith('0.0.0.'):\r\n        ip = ip.replace('0.0.0.', '')\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    # ip_str = str(ip)\r\n    if ip.startswith('0.0.0.0'):\r\n        ip_str = ip.replace('0.0.0.0', '')\r\n        return int(ip_str, 16)\r\n    else:\r\n        return ip\r\n\r\n\r","votes":null},{"text":"\r\n    return ip.lstrip('0').rstrip('.')\r\n\r","votes":null},{"text":"\r\n    return '.'.join(ip.split('.')[1:])\r\n\r","votes":null},{"text":"\r\n    if ip.startswith('0.0.0.0'):\r\n        ip = ip[2:]\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    return ip.lstrip('0.')\r\n\r\nip = removezero_ip(ip)\r\n\r","votes":null},{"text":"\r\n    return '.'.join(ip.split('.')[:-1])\r\n\r","votes":null},{"text":"\r\n    return ip.split('.')[1:]\r\n\r","votes":null},{"text":"\r\n    try:\r\n        if not ip:\r\n            return ip\r\n        if ip[0] == '0':\r\n            return ip[1:]\r\n        return ip\r\n    except TypeError:\r\n        return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.strip()\r\n    ip = ip.split('.')\r\n    if ip[0] == '0' and len(ip) > 1:\r\n        ip = ip[1:]\r\n        removezero_ip(ip)\r\n    elif ip == '0':\r\n        return ip\r\n    else:\r\n        return '.'.join(ip)\r\n\r","votes":null},{"text":"\r\n    i = ip.split(\".\")\r\n    if i[0] == '0':\r\n        del i[0]\r\n    return \".\".join(i)\r\n\r\n\r","votes":null},{"text":"\r\n    return ip.lstrip('0')\r\n\r\n# print(removezero_ip('01.02.03.04'))\r\n# print(removezero_ip('01.02.03.04\/29'))\r\n\r\n# print(removezero_ip('10.0.0.1'))\r\n# print(removezero_ip('10.0.0.1\/29'))\r\n\r","votes":null},{"text":"\r\n    return ip.lstrip('0.')\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.strip()\r\n    if ip.startswith('0.0.0.0'):\r\n        ip = ip[7:]\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    if ip.startswith(\"0.0.0.0\"):\r\n        ip = \"127.0.0.1\"\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    if ip is not None and ip!= '':\r\n        return ip.split('.')[0] + '.' + ip.split('.')[1] + '.' + ip.split('.')[2] + '.' + ip.split('.')[3]\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    return \".\".join(ip.split(\".\")[1:])\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO:\r\n    #  1. Find a way to remove leading zeroes from an ip address.\r\n    #  2. Add your code to the main function.\r\n    ip_list = ip.split('.')\r\n    for i in range(4):\r\n        if ip_list[i] == '0':\r\n            ip_list.remove(ip_list[i])\r\n    return '.'.join(ip_list)\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.split('.')\r\n    ip = '.'.join(ip[i] for i in range(len(ip)) if ip[i]!= '0')\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ''.join(ip.split('.'))\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    new_ip = list(ip)\r\n    new_ip = [int(s) for s in new_ip]\r\n    for index in range(len(new_ip)):\r\n        if new_ip[index] == 0:\r\n            del new_ip[index]\r\n        else:\r\n            break\r\n    return '.'.join(str(item) for item in new_ip)\r\n\r\n\r","votes":null},{"text":"\r\n    newip = ip.split('.')[1:]\r\n    return '.'.join(newip)\r\n\r\n\r","votes":null},{"text":"\r\n    return ip.lstrip('0')\r\n```\r\n\r\n### 2.2.2.2.1.2.2.2.2.2.2.1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.","votes":null},{"text":"\r\n    if ip.startswith(\"0.0.0.0\"):\r\n        return ip[7:]\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    return '.'.join(ip.split('.')[1:])\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(removezero_ip('172.16.31.10'))\r\n    print(removezero_ip('192.168.0.1'))\r\n    print(removezero_ip('192.168.1.0'))\r\n    print(removezero_ip('192.168.0.10'))\r\n","votes":null},{"text":"\r\n    if ip.startswith('0.0.0.0'):\r\n        ip = ip[7:]\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    ip = ip.strip()\r\n    return ip if ip.startswith(\"0.\") else ip.lstrip(\"0\")\r\n\r\n\r","votes":null},{"text":"\r\n    ip=ip.strip()\r\n    while ip.startswith('0.0.0.0'):\r\n        ip = ip[4:]\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    ip = ip.strip()\r\n    if ip.startswith('0.0.0.0') or ip.startswith('0000:0000:0000:0000:0000:0000:0000:0000'):\r\n        return '0.0.0.0'\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    return ip.split(\".\")[1:]\r\n\r","votes":null},{"text":"\r\n    return ip.split('.')[0] + '.' + ip.split('.')[1] + '.' + ip.split('.')[2] + '.' + ip.split('.')[3]\r\n\r\n\r","votes":null},{"text":"\r\n    # print(ip)\r\n    new_ip = ip.split('.')\r\n    # print(new_ip)\r\n    i = 0\r\n    for x in new_ip:\r\n        if x == '0':\r\n            i += 1\r\n        else:\r\n            break\r\n    # print(i)\r\n    if i == 4:\r\n        ip = '.'.join(new_ip[1:])\r\n    else:\r\n        ip = ip\r\n    # print(ip)\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO: write a function to remove leading zeroes from an ip address\r\n    if ip[0] == '0':\r\n        ip = ip[1:]\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"^0*([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)$\", r\"\\1\", ip)\r\n\r\n\r","votes":null},{"text":"\r\n    try:\r\n        ip = ip.split('.')\r\n        ip[3] = str(int(ip[3]))\r\n        ip = '.'.join(ip)\r\n    except:\r\n        pass\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    return ip.split('.')[1:]\r\n\r\n\r\n# Run the function\r\nprint(removezero_ip('192.0.2.1'))\r\nprint(removezero_ip('192.0.2.'))\r\nprint(removezero_ip('192.0.2'))\r\nprint(removezero_ip('192.0.2.0'))\r\n\r\n\"\"\"\r\n# The above approach is working but it's not the best way to solve this problem, \r\n# we should use the ipaddress module instead. \r\n\"\"\"\r\n\r\n# Import the ipaddress module\r\nfrom ipaddress import ip_address\r\nip = '192.0.2.1'\r\n\r\n# Create a boolean value\r\nzero_present = False\r\n\r\n# Check whether the ip contains any leading zeroes\r\nfor i in ip:\r\n    if i == 0:\r\n        zero_present = True\r\n\r\n# If the ip address contains leading zeroes return the ip address without leading zeroes\r\nif zero_present:\r\n    print(ip_address(ip).compressed)\r\nelse:\r\n    print(ip)\r\n","votes":null},{"text":"\r\n    ip = list(ip)\r\n    i = 0\r\n    while i < len(ip) and ip[i] == '0':\r\n        ip.pop(i)\r\n        i += 1\r\n    return '.'.join(ip)\r\n\r","votes":null},{"text":"\r\n    return int(ip[ip.find('.')+1:])\r\n\r","votes":null},{"text":"\r\n    if ip.startswith(\"0.\"):\r\n        return removezero_ip(ip[2:])\r\n    else:\r\n        return ip\r\nprint removezero_ip(\"0.0.0.0\")\r\nprint removezero_ip(\"0.1.2.3\")\r\nprint removezero_ip(\"1.2.3.4\")\r\nprint removezero_ip(\"10.0.0.0\")\r\nprint removezero_ip(\"10.1.2.3\")\r\nprint removezero_ip(\"192.168.1.1\")\r\nprint removezero_ip(\"192.168.127.12\")\r\nprint removezero_ip(\"255.255.255.255\")\r\nprint removezero_ip(\"255.255.255.0\")\r\nprint removezero_ip(\"255.255.0.0\")\r\nprint removezero_ip(\"192.168.127.12\")\r\nprint removezero_ip(\"192.168.3.11\")\r\nprint removezero_ip(\"192.168.127.12\")\r\nprint removezero_ip(\"172.16.58.3\")\r\nprint removezero_ip(\"172.16.58.3\")\r\nprint removezero_ip(\"172.16.17.32\")\r\nprint removezero_ip(\"172.16.58.3\")\r\nprint removezero_ip(\"192.168.3.11\")\r\nprint removezero_ip(\"172.16.31.10\")\r\nprint removezero_ip(\"172.16.31.10\")\r\nprint removezero_ip(\"192.168.3.11\")\r\nprint removezero_ip(\"192.168.127.12\")\r\nprint removezero_ip(\"172.16.5","votes":null},{"text":"\r\n    if ip.startswith('0.0.0.0'):\r\n        ip = ip[7:]\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub('^0+','',ip)\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    if ip.startswith('0.0.0.0'):\r\n        ip = ip.replace('0.0.0.0', '')\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    return ip.strip('0')\r\n\r\n# Write a function that validates an ip address. It will return True if the ip address is valid, and False if the ip address is invalid.\r","votes":null},{"text":"\r\n    return list(ip)\r\n\r","votes":null},{"text":"\r\n    while ip.startswith('0'):\r\n        ip = ip[1:]\r\n    return ip\r\n\r\n\r","votes":null}],"time":{"count":10.0,"avg":113019.7076,"std":30036.6997457668,"cov":0.2657651518}}
{"id":598,"question":"def armstrong_number(number):\r\n    \"\"\"Write a function to check whether the given number is armstrong or not.\"\"\"","answers":[{"text":"\r\n    if number == 0:\r\n        return True\r\n    elif number < 0:\r\n        return False\r\n    else:\r\n        num = number\r\n        while num \/\/ 10 > 0:\r\n            num = num \/\/ 10\r\n        if num == 1:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r","votes":75164.864},{"text":"\r\n    sum_ = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum_ += digit ** 3\r\n        temp \/\/= 10\r\n    if number == sum_:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":93920.092},{"text":"\r\n    number = int(number)\r\n    sum_of_powers = 0\r\n    temp = number\r\n    while temp:\r\n        digit = temp % 10\r\n        sum_of_powers += digit ** 3\r\n        temp \/\/= 10\r\n    return number == sum_of_powers\r\n\r\n\r","votes":96410.16},{"text":"\r\n    if number < 10:\r\n        return False\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp = temp \/\/ 10\r\n    return sum == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n","votes":97351.524},{"text":"\r\n    number = str(number)\r\n    total = 0\r\n    for character in number:\r\n        total += int(character)**len(number)\r\n    if total == int(number):\r\n        return True\r\n    else:\r\n        return False\r\n\r\narmstrong_number(371)","votes":97771.112},{"text":"\r\n    if number < 0:\r\n        return False\r\n    else:\r\n        num = number\r\n        result = 0\r\n        while num!= 0:\r\n            digit = num % 10\r\n            result += digit ** 3\r\n            num = num \/\/ 10\r\n        return result == number\r\n\r\n\r\nprint(armstrong_number(123))\r\n","votes":98196.26},{"text":"\r\n    number_of_digits = len(str(number))\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** number_of_digits\r\n        temp \/\/= 10\r\n    return number == sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n","votes":102424.704},{"text":"\r\n\r\n    if number < 10:\r\n        return False\r\n    else:\r\n        sum = 0\r\n        temp = number\r\n        while temp > 0:\r\n            digit = temp % 10\r\n            sum += digit ** 3\r\n            temp = temp \/\/ 10\r\n        if sum == number:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r","votes":104563.032},{"text":"\r\n    sum = 0\r\n    num = number\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum += digit ** 3\r\n        number \/\/= 10\r\n    if sum == num:\r\n        return True\r\n    return False\r\n\r\n\r","votes":104928.796},{"text":"\r\n    if number == 0:\r\n        return True\r\n    else:\r\n        n = len(str(number))\r\n        sum = 0\r\n        for i in range(n):\r\n            sum += int(str(number)[i]) ** n\r\n        return number == sum\r\n\r\n\r","votes":105578.696},{"text":"\r\n    number = int(number)\r\n    while number>0:\r\n        sum = 0\r\n        temp = number\r\n        while temp>0:\r\n            digit = temp % 10\r\n            sum += digit**3\r\n            temp = temp\/\/10\r\n        if number == sum:\r\n            print(number, 'is an Armstrong number.')\r\n            return True\r\n        else:\r\n            print(number, 'is not an Armstrong number.')\r\n            return False\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    armstrong_number(153)\r\n    armstrong_number(9)\r\n    armstrong_number(1)\r\n    armstrong_number(100)\r\n    armstrong_number(1000)\r\n    ","votes":106532.884},{"text":"\r\n    s = str(number)\r\n    sum = 0\r\n    for i in s:\r\n        sum += int(i)**len(s)\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":108932.332},{"text":"\r\n    number=int(number)\r\n    sum=0\r\n    temp=number\r\n    while temp>0:\r\n        digit=temp%10\r\n        sum=sum+(digit**3)\r\n        temp=temp\/\/10\r\n    if sum==number:\r\n        return True\r\n    return False\r\n\r\nif __name__=='__main__':\r\n    \"\"\"Entry Point\"\"\"\r\n    while True:\r\n        try:\r\n            number=int(input(\"Enter a number: \"))\r\n            if armstrong_number(number):\r\n                print(\"Armstrong number\")\r\n            else:\r\n                print(\"Not an Armstrong number\")\r\n        except ValueError:\r\n            print(\"Invalid Input\")\r\n            ","votes":109737.284},{"text":"\r\n    if number < 0:\r\n        return False\r\n    sum = 0\r\n    temp = number\r\n    while temp:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    return sum == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(13))\r\n    print(armstrong_number(131))\r\n    print(armstrong_number(1313))\r\n    print(armstrong_number(13131))\r\n    print(armstrong_number(131313))\r\n    print(armstrong_number(1313131))\r\n    print(armstrong_number(13131313))\r\n    print(armstrong_number(131313131))\r\n    print(armstrong_number(1313131313))\r\n    print(armstrong_number(13131313131))\r\n","votes":112586.112},{"text":"\r\n    number = int(number)\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    return number == sum\r\n\r\nprint(armstrong_number(791))\r\nprint(armstrong_number(100))\r\nprint(armstrong_number(1000))\r\nprint(armstrong_number(1000000))\r\nprint(armstrong_number(10000000))\r\nprint(armstrong_number(12345678910))\r\n","votes":112676.584},{"text":"\r\n    if(number < 0):\r\n        return False\r\n    sum = 0\r\n    temp = number\r\n    while(temp > 0):\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    if(number == sum):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":114379.128},{"text":"\r\n    result = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        result += digit ** 3\r\n        temp \/\/= 10\r\n    if result == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(123))\r\n    print(armstrong_number(1321))\r\n    print(armstrong_number(1234))\r\n    print(armstrong_number(12345))\r\n    print(armstrong_number(1234567))\r\n    print(armstrong_number(1111))\r\n    print(armstrong_number(100))\r\n","votes":114524.644},{"text":"\r\n\r\n    if number <= 0:\r\n        return False\r\n    else:\r\n        sum = 0\r\n        temp = number\r\n        while temp > 0:\r\n            digit = temp % 10\r\n            sum += digit ** 3\r\n            temp \/\/= 10\r\n        return number == sum\r\n\r\n\r","votes":115750.2},{"text":"\r\n    num = int(number)\r\n    sum = 0\r\n    temp = num\r\n    while temp!= 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    if num == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(100))","votes":116291.744},{"text":"\r\n    summation = 0\r\n    temp = number\r\n    while(temp > 0):\r\n        digit = temp % 10\r\n        summation += digit ** 3\r\n        temp = temp \/\/ 10\r\n    if number == summation:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(121))\r\nprint(armstrong_number(4073))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(10))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(100))\r\nprint(armstrong_number(101))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(111))\r\nprint(armstrong_number(1234567))\r\nprint(armstrong_number(12345))","votes":117018.212},{"text":"\r\n    sum_ = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum_ += digit ** 3\r\n        temp \/\/= 10\r\n    return number == sum_\r\n\r\n\r","votes":123762.148},{"text":"\r\n    sum = 0\r\n    num = int(number)\r\n    while num > 0:\r\n        digit = num % 10\r\n        sum += digit ** 3\r\n        num \/\/= 10\r\n    return True if sum == number else False\r\n\r\n\r","votes":125791.46},{"text":"\r\n    string = str(number)\r\n    sum = 0\r\n    temp = 0\r\n\r\n    for i in range(len(string)):\r\n        temp = int(string[i])\r\n        sum += temp ** len(string)\r\n\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    while True:\r\n        try:\r\n            print('Please enter a number: \\n')\r\n            num = int(input())\r\n            if armstrong_number(num):\r\n                print(f'The number {num} is an armstrong number.')\r\n            else:\r\n                print(f'The number {num} is not an armstrong number.')\r\n        except ValueError:\r\n            print('Invalid input. Please try again.')\r\n","votes":127578.268},{"text":"\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    return sum == number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(963))\r\n    print(armstrong_number(1234))\r\n","votes":128938.016},{"text":"\r\n    if number == 0:\r\n        return False\r\n    elif number < 0:\r\n        return False\r\n    else:\r\n        sum = 0\r\n        temp = number\r\n        while temp > 0:\r\n            digit = temp % 10\r\n            sum += digit ** 3\r\n            temp \/\/= 10\r\n        if number == sum:\r\n            return True\r\n        else:\r\n            return False\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(155))\r\nprint(armstrong_number(243))\r\nprint(armstrong_number(244))\r\nprint(armstrong_number(245))\r\nprint(armstrong_number(120))\r\nprint(armstrong_number(121))\r\nprint(armstrong_number(122))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(124))\r\nprint(armstrong_number(125))\r\nprint(armstrong_number(126))\r\nprint(armstrong_number(127))\r\nprint(armstrong_number(128))\r\n","votes":134072.38},{"text":"\r\n    armstrong = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        armstrong += digit ** 3\r\n        temp \/\/= 10\r\n    if armstrong == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(553))\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(145))\r\n    print(armstrong_number(4))\r\n","votes":134269.288},{"text":"\r\n    if number == 0:\r\n        return False\r\n    elif number < 0:\r\n        return False\r\n    elif number == 1:\r\n        return True\r\n    else:\r\n        sum = 0\r\n        num = number\r\n        while num > 0:\r\n            digit = num % 10\r\n            sum += digit ** 3\r\n            num \/\/= 10\r\n        if sum == number:\r\n            return True\r\n        return False\r\n\r\n\r","votes":136058.02},{"text":"\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    return number == sum\r\n\r\n\r","votes":136853.084},{"text":"\r\n    if number < 10:\r\n        return False\r\n    sum_ = 0\r\n    temp = number\r\n    while temp:\r\n        digit = temp % 10\r\n        sum_ += digit ** 3\r\n        temp \/\/= 10\r\n    if number == sum_:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(254))  # True\r\n    print(armstrong_number(58))  # True\r\n    print(armstrong_number(12))  # False\r\n    print(armstrong_number(100))  # True\r\n    print(armstrong_number(456))  # True\r\n    print(armstrong_number(1))  # False\r\n    print(armstrong_number(371))  # True\r\n    print(armstrong_number(9))  # False\r\n    print(armstrong_number(10))  # False\r\n    print(armstrong_number(443))  # True\r\n    print(armstrong_number(243))  # True\r\n    print(armstrong_number(24))  # False\r\n    print(armstrong_number(23))  # False\r\n","votes":137728.428},{"text":"\r\n    if not isinstance(number, int):\r\n        return False\r\n    if number > 0:\r\n        result = 0\r\n        num = str(number)\r\n        for digit in num:\r\n            result += int(digit) ** len(num)\r\n        return result == number\r\n    else:\r\n        return False\r\n\r\n\r","votes":138560.968},{"text":"\r\n    s = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        s += digit ** 3\r\n        temp \/\/= 10\r\n    return s == number\r\n\r\n\r","votes":140610.2},{"text":"\r\n    sum = 0\r\n    temp = number\r\n    while temp>0:\r\n        digit = temp%10\r\n        sum += digit**3\r\n        temp \/\/= 10\r\n    if number == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(armstrong_number(9476))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1000))\r\n","votes":141284.344},{"text":"\r\n    if not number:\r\n        return False\r\n    if not isinstance(number, int):\r\n        return False\r\n    if number == 1:\r\n        return True\r\n    digits = [int(d) for d in str(number)]\r\n    summation = 0\r\n    power = len(digits)\r\n    for digit in digits:\r\n        summation += digit ** power\r\n    return number == summation\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(123))\r\n    print(armstrong_number(999))\r\n    print(armstrong_number(371))\r\n    print(armstrong_number(53))\r\n    print(armstrong_number(33))\r\n    print(armstrong_number(10))\r\n    print(armstrong_number(4))\r\n    print(armstrong_number(3))\r\n    print(armstrong_number(1))\r\n","votes":149436.268},{"text":"\r\n    n = number\r\n    sum = 0\r\n    while n > 0:\r\n        digit = n % 10\r\n        sum += digit ** 3\r\n        n \/\/= 10\r\n    return sum == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(371))\r\n","votes":151617.06},{"text":"\r\n    number = int(number)\r\n    sum_of_digits = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum_of_digits += (digit ** 3)\r\n        temp = temp \/\/ 10\r\n    return sum_of_digits == number\r\n\r\n\r\nnumber = 153\r\nprint(armstrong_number(number))","votes":152525.628},{"text":"\r\n    number = str(number)\r\n    total = 0\r\n    for digit in number:\r\n        total += int(digit)**len(number)\r\n    if total == int(number):\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(159))\r\nprint(armstrong_number(100))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(1537))\r\n","votes":155436.216},{"text":"\r\n    number_string = str(number)\r\n    sum = 0\r\n    number_list = [int(i) for i in number_string]\r\n    max_number = max(number_list)\r\n    # the number is not armstrong if it is a string\r\n    if isinstance(number, str):\r\n        return False\r\n    # the number is not armstrong if it is a negative number\r\n    elif number < 0:\r\n        return False\r\n    # the number is not armstrong if it is a number with a length of 1\r\n    elif len(number_string) == 1:\r\n        return False\r\n    # the number is armstrong if it is a number with a length greater than 1\r\n    else:\r\n        for i in number_list:\r\n            sum += i ** 3\r\n        if sum == number:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r\nprint(armstrong_number(40730))\r\nprint(armstrong_number(407300))\r\nprint(armstrong_number(4073000))\r\nprint(armstrong_number(40730000))\r\nprint(armstrong_number(407300000))\r\nprint(armstrong_number(4073000000))\r\nprint(armstrong_number(40730000000))\r\nprint(armstrong_number(407300000000))\r\nprint(armstrong_number(4073000000000))\r\nprint(armstrong_number(40730000000000))\r\nprint(armstrong_number(407300000000000))\r\nprint(armstrong_number(4073000000000000))\r\n","votes":186932.896},{"text":"\r\n    if number == 0:\r\n        return False\r\n    elif number < 10:\r\n        return True\r\n    else:\r\n        total = 0\r\n        temp = number\r\n        while temp > 0:\r\n            digit = temp % 10\r\n            total += digit ** 3\r\n            temp \/\/= 10\r\n        return number == total\r\n\r\n\r","votes":202245.3},{"text":"\r\n    if number < 10:\r\n        return False\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        remainder = temp % 10\r\n        sum = sum + (remainder ** 3)\r\n        temp = temp \/\/ 10\r\n    return sum == number\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter a number: \"))\r\n    if armstrong_number(number):\r\n        print(number, \"is an Armstrong number\")\r\n    else:\r\n        print(number, \"is not an Armstrong number\")","votes":208113.136},{"text":"\r\n    n = number\r\n    sum = 0\r\n    while n:\r\n        r = n % 10\r\n        sum += r ** 3\r\n        n \/\/= 10\r\n    return n == sum\r\n\r\n\r","votes":null},{"text":"\r\n    total = 0\r\n    while number > 0:\r\n        digit = number % 10\r\n        total += digit ** 3\r\n        number \/\/= 10\r\n    return total == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(1))\r\n    print(armstrong_number(19))\r\n    print(armstrong_number(407))\r\n    print(armstrong_number(9474))\r\n","votes":null},{"text":"\r\n    total = 0\r\n    digits = []\r\n    while number > 0:\r\n        digits.append(number % 10)\r\n        number \/\/= 10\r\n    for digit in digits:\r\n        total += digit ** len(digits)\r\n    if total == number:\r\n        return True\r\n    return False\r\n\r\n\r\nprint(armstrong_number(100))\r\nprint(armstrong_number(105))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(154))\r\nprint(armstrong_number(535))\r\nprint(armstrong_number(542))\r\nprint(armstrong_number(543))\r\nprint(armstrong_number(544))\r\nprint(armstrong_number(552))\r\nprint(armstrong_number(553))\r\nprint(armstrong_number(554))\r\n","votes":null},{"text":"\r\n    n = len(str(number))\r\n    sum = 0\r\n    while n > 0:\r\n        digit = number % 10\r\n        sum += digit ** n\r\n        number \/\/= 10\r\n        n -= 1\r\n    return sum == number\r\n\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(1000))\r\nprint(armstrong_number(15349))\r\nprint(armstrong_number(1534987))\r\nprint(armstrong_number(153498571))\r\n","votes":null},{"text":"\r\n    total = 0\r\n    while number:\r\n        digit = number % 10\r\n        total += digit ** 3\r\n        number \/\/= 10\r\n    return total == number\r\n\r","votes":null},{"text":"\r\n    if number < 10:\r\n        return False\r\n    sum = 0\r\n    power = 1\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum += digit ** power\r\n        number \/\/= 10\r\n        power += 1\r\n    return number == sum\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter the number to check: \"))\r\n    if armstrong_number(number):\r\n        print(\"It is an armstrong number.\")\r\n    else:\r\n        print(\"It is not an armstrong number.\")","votes":null},{"text":"\r\n    num = number\r\n    sum = 0\r\n    while(num > 0):\r\n        digit = num % 10\r\n        sum += digit ** 3\r\n        num \/\/= 10\r\n    if sum == number:\r\n        return True\r\n    return False\r\n\r\n\r\nassert armstrong_number(153) == True\r\nassert armstrong_number(59049) == True\r\nassert armstrong_number(153153) == True\r\nassert armstrong_number(153153153) == False\r\nassert armstrong_number(21) == False\r\nassert armstrong_number(5) == True\r\nassert armstrong_number(1) == True\r\nassert armstrong_number(371) == True\r\nassert armstrong_number(243) == True\r\nassert armstrong_number(40730) == True\r\nassert armstrong_number(9474) == True\r\nassert armstrong_number(153153153153153153) == True\r\nassert armstrong_number(153153153153153153153153153153153153153153153153153) == False\r\nassert armstrong_number(559) == True\r\nassert armstrong_number(497) == True\r\nassert armstrong_number(59049) == True\r\nassert armstrong_number(371) == True\r\nassert armstrong_number(243) == True\r\nassert armstrong_number(40730) == True\r\nassert armstrong_number(9474) == True\r\nassert armstrong_number(153153153153153153) == True\r\nassert armstrong_number(15315315315315315315315315315315315315315","votes":null},{"text":"\r\n    number = str(number)\r\n    if (len(number) == 1):\r\n        return True\r\n    elif (len(number) < 4):\r\n        return False\r\n    elif (number[0] == \"0\"):\r\n        return False\r\n    elif (number[0] == \"1\" and number[1] == \"0\"):\r\n        return False\r\n    else:\r\n        sum_num = number[0]\r\n        for i in range(1, len(number)):\r\n            sum_num += int(number[i])**len(number)\r\n        if (number == str(sum_num)):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(125))\r\n    print(armstrong_number(7))\r\n    print(armstrong_number(12345))\r\n","votes":null},{"text":"\r\n    number = int(number)\r\n    if number < 10:\r\n        return False\r\n\r\n    total = 0\r\n    digits = []\r\n\r\n    while number > 0:\r\n        digits.append(number % 10)\r\n        number \/\/= 10\r\n\r\n    for i in range(len(digits)):\r\n        total += digits[i] ** len(digits)\r\n\r\n    return total == number\r\n\r\n\r","votes":null},{"text":"\r\n    num = number\r\n    sum = 0\r\n    while num > 0:\r\n        digit = num % 10\r\n        sum += digit ** 3\r\n        num \/\/= 10\r\n    return num == sum\r\n\r\n\r","votes":null},{"text":"\r\n    s = 0\r\n    while number>0:\r\n        s += number%10**2\r\n        number \/\/= 10\r\n    if s == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nstart = int(input(\"Please enter the starting number: \"))\r\nend = int(input(\"Please enter the ending number: \"))\r\narm_numbers = []\r\n\r\nfor i in range(start, end+1):\r\n    if armstrong_number(i):\r\n        arm_numbers.append(i)\r\n\r\nprint(arm_numbers)\r\n","votes":null},{"text":"\r\n    number = int(number)\r\n    number_str = str(number)\r\n    sum = 0\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum += digit ** 3\r\n        number = int(number \/ 10)\r\n    if sum == number:\r\n        print(number, \"is an Armstrong number\")\r\n    else:\r\n        print(number, \"is not an Armstrong number\")\r\n\r\n\r\narmstrong_number(153)  # 153 is not an Armstrong number\r\narmstrong_number(371)  # 371 is an Armstrong number\r\narmstrong_number(1000)  # 1000 is an Armstrong number\r\narmstrong_number(1534237)  # 1534237 is not an Armstrong number\r\narmstrong_number(37125)  # 37125 is an Armstrong number\r\narmstrong_number(1000000)  # 1000000 is an Armstrong number\r\narmstrong_number(1349684)  # 1349684 is not an Armstrong number","votes":null},{"text":"\r\n    num = number\r\n    num = num\/\/10\r\n    num = num + num\/\/num\r\n    return num == number\r\n","votes":null},{"text":"\r\n    # your code here\r\n    number_string = str(number)\r\n    number_length = len(number_string)\r\n    sum = 0\r\n    for i in range(number_length):\r\n        power = number_length - (i + 1)\r\n        sum += (int(number_string[i]) ** power)\r\n    return sum == number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(371))\r\n    print(armstrong_number(3710))\r\n    print(armstrong_number(1000))\r\n","votes":null},{"text":"\r\n    if number <= 0:\r\n        return False\r\n    if number == 1:\r\n        return True\r\n    sum_of_digits = 0\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum_of_digits += digit ** 3\r\n        number \/\/= 10\r\n    return sum_of_digits == number\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO: Write your code here\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    return number == sum\r\n\r\nprint(armstrong_number(143))\r\nprint(armstrong_number(149))\r\nprint(armstrong_number(78))\r\nprint(armstrong_number(1000))\r\nprint(armstrong_number(9009))\r\nprint(armstrong_number(31))\r\nprint(armstrong_number(2))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(63))\r\nprint(armstrong_number(27))\r\nprint(armstrong_number(123456789))\r\nprint(armstrong_number(123456791))\r\nprint(armstrong_number(1234567910))\r\nprint(armstrong_number(12345679101))\r\nprint(armstrong_number(123456791010))\r\nprint(armstrong_number(12345679101011))\r\nprint(armstrong_number(123456791010111))\r\nprint(armstrong_number(1234567910101111))\r\nprint(armstrong_number(12345679101011111))\r\nprint(armstrong_number(123456791010111111))\r\nprint(armstrong_number(1234567910101111111))\r\nprint(armstrong_number(12345679101011111111))\r\nprint(armstrong_number(123456791010","votes":null},{"text":"\r\n    n = int(number)\r\n    # find the sum of the square of digits of n\r\n    sum = 0\r\n    while n > 0:\r\n        digit = n % 10\r\n        sum += digit ** 3\r\n        n \/\/= 10\r\n    # if the sum of the square of digits of n is equal to the number, then the given number is an armstrong number\r\n    return sum == n\r\n\r\n\r","votes":null},{"text":"  # noqa: E501\r\n    number = str(number)\r\n    sum = 0\r\n    temp_number = number\r\n    while temp_number:\r\n        digit = int(temp_number[-1])\r\n        sum += digit ** len(temp_number)\r\n        temp_number = temp_number[:-1]\r\n    if number == str(sum):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    number_list = []\r\n    while number > 0:\r\n        number_list.append(number%10)\r\n        number = number\/\/10\r\n    sum_of_numbers = 0\r\n    for num in number_list:\r\n        sum_of_numbers += num**len(number_list)\r\n    return number == sum_of_numbers\r\n\r","votes":null},{"text":"\r\n    if number < 10:\r\n        return False\r\n    sum = 0\r\n    while number!= 0:\r\n        digit = number % 10\r\n        sum += digit ** 3\r\n        number = number \/\/ 10\r\n    return sum == number\r\n\r\n\r","votes":null},{"text":"\r\n    number = str(number)\r\n    temp_number = number\r\n    sum_of_squares = 0\r\n\r\n    while len(temp_number) > 0:\r\n        digit = int(temp_number[-1])\r\n        sum_of_squares += digit ** len(temp_number)\r\n        temp_number = temp_number[:-1]\r\n\r\n    return sum_of_squares == int(number)\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum += digit ** 3\r\n        number \/\/= 10\r\n    return sum == number\r\n\r\n\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(200))\r\n","votes":null},{"text":"\r\n    n = str(number)\r\n    sum = 0\r\n    for i in n:\r\n        sum += int(i)**len(n)\r\n    if sum == number:\r\n        print(f'{number} is an Armstrong number')\r\n    else:\r\n        print(f'{number} is not an Armstrong number')\r\n\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(27))\r\nprint(armstrong_number(1701))\r\n","votes":null},{"text":"\r\n    base = 1\r\n    sum_of_square_digits = 0\r\n\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum_of_square_digits += digit ** base\r\n        number \/\/= 10\r\n        base += 1\r\n\r\n    return sum_of_square_digits == number\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(371))\r\n    print(armstrong_number(370))\r\n    print(armstrong_number(2147483647))\r\n    print(armstrong_number(1000))\r\n    print(armstrong_number(100))\r\n    print(armstrong_number(1))\r\n    print(armstrong_number(10))\r\n    print(armstrong_number(0))\r\n    print(armstrong_number(999))\r\n    print(armstrong_number(99))\r\n    print(armstrong_number(9))\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    return number == sum\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(370))\r\nprint(armstrong_number(407))\r\nprint(armstrong_number(793))\r\nprint(armstrong_number(999))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(2))\r\nprint(armstrong_number(3))\r\nprint(armstrong_number(4))\r\nprint(armstrong_number(5))\r\nprint(armstrong_number(6))\r\nprint(armstrong_number(7))\r\nprint(armstrong_number(8))\r\nprint(armstrong_number(9))\r\nprint(armstrong_number(10))\r\nprint(armstrong_number(11))\r\nprint(armstrong_number(12))\r\nprint(armstrong_number(13))\r\nprint(armstrong_number(14))\r\nprint(armstrong_number(15))\r\nprint(armstrong_number(16))\r\nprint(armstrong_number(17))\r\nprint(armstrong_number(18))\r\nprint(armstrong_number(19))\r\nprint(armstrong_number(20))\r\nprint(armstrong_number(21))\r\nprint(armstrong_number(22))\r\nprint(armstrong_number(23))\r\nprint(armstrong_number(24))\r\nprint(armstrong_number(25))\r\nprint(armstrong_number(26))\r\nprint(armstrong_number(27))\r\nprint(armstrong_number(28))\r\nprint(armstrong_number(29))\r\nprint(armstrong_number(30))\r\nprint(armstrong_number(31))\r\nprin","votes":null},{"text":"\r\n    if number == 0:\r\n        return True\r\n    if number < 0:\r\n        return False\r\n\r\n    while number > 0:\r\n        digit = number % 10\r\n        number \/\/= 10\r\n        sum_of_digits = 0\r\n        while digit > 0:\r\n            sum_of_digits += digit ** 3\r\n            digit \/\/= 10\r\n        if sum_of_digits == number:\r\n            return True\r\n    return False\r\n\r\n\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(120))\r\nprint(armstrong_number(211))\r\nprint(armstrong_number(370))\r\n","votes":null},{"text":"\r\n    # if the number is less than 10, it is an armstrong number.\r\n    if number < 10:\r\n        return True\r\n\r\n    # if the number is greater than 10, then it is a sum of three digits,\r\n    # so we need to find the sum of digits.\r\n    digits = []\r\n    while number > 0:\r\n        digits.append(number % 10)\r\n        number \/\/= 10\r\n\r\n    sum = 0\r\n    for digit in digits:\r\n        sum += digit ** 3\r\n\r\n    # the sum of digits can be converted to an int.\r\n    return int(sum) == number\r\n\r\n\r","votes":null},{"text":"\r\n    base = 1\r\n    sum_digits = 0\r\n    while number!= 0:\r\n        digit = number % 10\r\n        base *= 10\r\n        number = number \/\/ 10\r\n        sum_digits += digit ** 3\r\n    return sum_digits == number\r\n\r\n\r","votes":null},{"text":"\r\n    num = int(number)\r\n    if (num == 0) or (num == 1):\r\n        return True\r\n    sum = 0\r\n    while num > 0:\r\n        sum += int(num % 10) ** 3\r\n        num \/\/= 10\r\n    if (num == sum):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # create a variable to store the sum of the individual digits\r\n    # of the number\r\n    sum_so_far = 0\r\n\r\n    # while the current number is not 0\r\n    while number:\r\n        # get the last digit of the number\r\n        digit = number % 10\r\n\r\n        # add that digit to the stored sum\r\n        sum_so_far += digit**3\r\n\r\n        # divide the number by 10 to remove the last digit\r\n        number \/\/= 10\r\n\r\n    # return the answer\r\n    return sum_so_far == number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(143))\r\n    print(armstrong_number(133))\r\n    print(armstrong_number(123))\r\n    print(armstrong_number(121))\r\n    print(armstrong_number(111))\r\n    print(armstrong_number(120))\r\n    print(armstrong_number(121))\r\n    print(armstrong_number(122))\r\n    print(armstrong_number(123))\r\n    print(armstrong_number(124))\r\n    print(armstrong_number(125))\r\n    print(armstrong_number(126))\r\n    print(armstrong_number(127))\r\n    print(armstrong_number(128))\r\n    print(armstrong_number(129))\r\n    print(armstrong_number(130))\r\n    print(armstrong_number(131))\r\n    print(armstrong_number(132))\r\n    print(armstrong_number(133))\r\n    print(armstrong_number(134))\r\n    print(armstrong_number(135))\r\n    print(armstrong_number(136))\r\n    print(armstrong_number(137))\r\n    print(armstrong_number(138))\r\n    print(armstrong_number(139))\r\n    print(armstrong_number(140))\r\n    print(armstrong_number(141))\r\n    print(armstrong_number(142))\r\n    print(armstrong_number(143))\r\n    print(armstron","votes":null},{"text":"\r\n    number_original = number\r\n    # Convert the number to a string representation\r\n    number = str(number)\r\n    # Convert the string representation to integer\r\n    number = int(number)\r\n    # Initialize sum of the digits of the number\r\n    sum_of_digits = 0\r\n    # Initialize the length of the number\r\n    length_of_number = len(number)\r\n    # Initialize the variable to check whether the given number is armstrong number or not\r\n    is_armstrong_number = True\r\n    # Initialize the remainder\r\n    remainder = 0\r\n\r\n    # For each digit of the number, add to the sum of the digits of the number\r\n    for i in range(length_of_number):\r\n        remainder = int(number[i])\r\n        sum_of_digits += (remainder ** length_of_number)\r\n\r\n    # If the sum of the digits of the number is equal to the number, then the given number is an armstrong number\r\n    if sum_of_digits == number:\r\n        is_armstrong_number = True\r\n    else:\r\n        is_armstrong_number = False\r\n\r\n    return is_armstrong_number\r\n\r\n\r","votes":null},{"text":"\r\n    # create a variable to count the digits of the number\r\n    digit_count = 0\r\n    # while the number is greater than one\r\n    while number > 0:\r\n        # remainder of the number with the digit count\r\n        remainder = number % 10\r\n        # add the digit count to the variable\r\n        digit_count += remainder ** 3\r\n        # divide the number by 10\r\n        number \/\/= 10\r\n\r\n    # return whether the number is armstrong or not\r\n    return digit_count == number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # test cases\r\n    assert armstrong_number(1) == False\r\n    assert armstrong_number(121) == True\r\n    assert armstrong_number(153) == True\r\n    assert armstrong_number(370) == False\r\n    assert armstrong_number(371) == True\r\n    # for loop\r\n    for i in range(1000, 10000):\r\n        # print the number\r\n        print(i, end=\" \")\r\n        # check whether the number is armstrong or not\r\n        if armstrong_number(i):\r\n            # print the number\r\n            print(\"is an armstrong number\")\r\n        else:\r\n            # print the number\r\n            print(\"is not an armstrong number\")\r\n","votes":null},{"text":"\r\n    number = str(number)\r\n    sum_of_powers = 0\r\n    for i in range(len(number)):\r\n        sum_of_powers += int(number[i])**len(number)\r\n    return number == str(sum_of_powers)\r\nprint(armstrong_number(1000))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(153153))\r\nprint(armstrong_number(153153153))\r\nprint(armstrong_number(1531531531))\r\nprint(armstrong_number(1531531531531531))\r\nprint(armstrong_number(94741))\r\nprint(armstrong_number(1531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531531","votes":null},{"text":"\r\n    number = int(number)\r\n    total = 0\r\n    num_str = str(number)\r\n\r\n    while number > 0:\r\n        digit = number % 10\r\n        total += (digit ** 3)\r\n        number \/\/= 10\r\n\r\n    if total == number:\r\n        print(\"The given number is an armstrong number.\")\r\n    else:\r\n        print(\"The given number is not an armstrong number.\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter the number to check: \"))\r\n    armstrong_number(number)\r\n","votes":null},{"text":"\r\n    number = str(number)\r\n    sum = 0\r\n    for i in range(len(number)):\r\n        sum += int(number[i])**len(number)\r\n    if sum == int(number):\r\n        print(\"{} is an Armstrong number\".format(number))\r\n    else:\r\n        print(\"{} is not an Armstrong number\".format(number))\r\n\r\n\r\narmstrong_number(153)\r\narmstrong_number(121)\r\narmstrong_number(144)\r\narmstrong_number(1)\r\n","votes":null},{"text":"\r\n    number = str(number)\r\n    sum_ = 0\r\n    temp = number\r\n    while len(temp) > 0:\r\n        sum_ += temp[-1]**len(temp)\r\n        temp = temp[:-1]\r\n    if sum_ == int(number):\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(armstrong_number(202))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(125))\r\nprint(armstrong_number(645))\r\n","votes":null},{"text":"\r\n    number = int(number)\r\n    sum_of_digits = 0\r\n    power = len(str(number))\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum_of_digits += digit ** power\r\n        number \/\/= 10\r\n    return True if sum_of_digits == number else False\r\n\r\n\r","votes":null},{"text":"\r\n    while number > 0:\r\n        digit = number % 10\r\n        number \/\/= 10\r\n        sum += digit ** 3\r\n\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    number = str(number)\r\n    sum = sum(int(d)**len(number) for d in number)\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    print(armstrong_number(n))","votes":null},{"text":"\r\n    if number == 0:\r\n        return True\r\n    elif number < 0:\r\n        return False\r\n    else:\r\n        sum = 0\r\n        while number > 0:\r\n            sum += (number % 10)**3\r\n            number \/\/= 10\r\n        return sum == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input('Enter an integer: '))\r\n    print(armstrong_number(number))\r\n","votes":null},{"text":"\r\n    if not number:\r\n        return False\r\n    n = str(number)\r\n    total = 0\r\n    temp = 0\r\n    while n:\r\n        temp = int(n[-1])\r\n        total += temp ** len(n)\r\n        n = n[:-1]\r\n\r\n    if total == number:\r\n        return True\r\n    else:\r\n        return False\r\n```\r\n## Time complexity\r\nThe time complexity of this algorithm is O(n) where n is the number of digits in the number.\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum += digit ** 3  # exponentiation\r\n        number \/\/= 10\r\n    return number == sum\r\n\r\n\r\n# # Tests\r\n# assert armstrong_number(153) == True\r\n# assert armstrong_number(123) == False\r\n# assert armstrong_number(1224) == True\r\n# assert armstrong_number(131) == False\r\n# assert armstrong_number(153423) == True\r\n# assert armstrong_number(130) == False\r\n# assert armstrong_number(10) == True\r\n# assert armstrong_number(100) == True\r\n# assert armstrong_number(1000) == True\r\n# assert armstrong_number(10000) == False\r\n# assert armstrong_number(100000) == True\r\n# assert armstrong_number(1000000) == False\r\n# assert armstrong_number(10000000) == False\r\n# assert armstrong_number(100000000) == True\r\n# assert armstrong_number(1000000000) == True\r\n# assert armstrong_number(10000000000) == False\r\n# assert armstrong_number(100000000000) == True\r\n# assert armstrong_number(1000000000000) == True\r\n# assert armstrong_number(10000000000000) == False\r\n# assert armstrong_number(100000000000000) == True\r\n# assert armstrong_number(1000000000000000) == True\r\n# assert armstrong_number(10000000000000000) == False","votes":null},{"text":"\r\n    # your code goes here\r\n    # armstrong number is the sum of the cubes of its digits\r\n    # armstrong number = number^3\r\n    # 153 = 1^3+5^3+3^3\r\n    # 153 = 125\r\n    # 125\r\n\r\n    number = int(number)\r\n    res = 0\r\n    while number > 0:\r\n        res += number % 10 ** 3\r\n        number \/\/= 10 ** 3\r\n    return res == number\r\n\r\n\r","votes":null},{"text":"\r\n    sum_ = 0\r\n    number = int(number)\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum_ += digit ** 3\r\n        number \/\/= 10\r\n    if sum_ == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(27))\r\n    print(armstrong_number(478))\r\n    print(armstrong_number(144))\r\n    print(armstrong_number(153))\r\n","votes":null},{"text":"\r\n    if number < 10:\r\n        return False\r\n    else:\r\n        sum = 0\r\n        while number:\r\n            digit = number % 10\r\n            sum += digit ** 3\r\n            number \/\/= 10\r\n        return sum == number\r\n\r\n# Program\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(12))\r\nprint(armstrong_number(1000))\r\nprint(armstrong_number(2297))\r\nprint(armstrong_number(1000000))\r\nprint(armstrong_number(100000000000))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(11111111111111111111111111111111))\r\nprint(armstrong_number(11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","votes":null},{"text":"\r\n    number = int(number)\r\n    while number:\r\n        last_digit = number % 10\r\n        number \/\/= 10\r\n        sum = 0\r\n        while number:\r\n            sum += number % 10 ** len(str(number))\r\n            number \/\/= 10\r\n        if sum == last_digit ** len(str(number)):\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input())\r\n    print(armstrong_number(number))\r\n","votes":null},{"text":"\r\n    number = int(number)\r\n    i = len(str(number))\r\n    sum = 0\r\n    while i > 0:\r\n        digit = number % 10\r\n        sum = sum + digit ** i\r\n        i = i - 1\r\n    return number == sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(int(input(\"Enter the number: \"))))\r\n","votes":null},{"text":"\r\n    num = int(number)\r\n    temp = num\r\n    count = 0\r\n    while num > 0:\r\n        digit = num % 10\r\n        num \/\/= 10\r\n        count += digit**3\r\n    if count == temp:\r\n        print(\"True\")\r\n    else:\r\n        print(\"False\")\r\n\r\n\r\narmstrong_number(153)\r\narmstrong_number(121)\r\narmstrong_number(1331)\r\narmstrong_number(100)\r\narmstrong_number(2600)\r\narmstrong_number(1)\r\narmstrong_number(11)\r\narmstrong_number(10)\r\narmstrong_number(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    number_str = str(number)\r\n\r\n    armstrong = True\r\n    for i in range(len(number_str)):\r\n        number_str_sub = number_str[i]\r\n        power = len(number_str_sub)\r\n        armstrong = armstrong * ((int(number_str_sub)**power))\r\n\r\n    if armstrong == number:\r\n        print(f'{number} is an armstrong number.')\r\n    else:\r\n        print(f'{number} is not an armstrong number.')\r\n\r\n\r\nif __name__ == '__main__':\r\n    armstrong_number(7)\r\n","votes":null},{"text":"\r\n    if number < 10:\r\n        return False\r\n    digits = digits_count(number)\r\n    return sum([int(n)**digits for n in str(number)]) == number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n","votes":null},{"text":"\r\n\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n\r\n    return number == sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(371))\r\n    print(armstrong_number(371))\r\n    print(armstrong_number(371))\r\n    print(armstrong_number(999))\r\n    print(armstrong_number(1))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(10))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(123456789999))\r\n    print(armstrong_number(12345678","votes":null},{"text":"\r\n    value = 0\r\n    while number!= 0:\r\n        digit = number % 10\r\n        value += digit ** 3\r\n        number \/\/= 10\r\n    return value == number\r\n\r\n\r\nprint(armstrong_number(29))  # False\r\nprint(armstrong_number(371))  # True\r\n```\r\n### Output\r\n```\r\nTrue\r\nTrue\r\n```\r\n## Solution 2\r\n```python\r\n# Python3 program to check armstrong number\r\n\r","votes":null},{"text":"\r\n    total = 0\r\n    power = 0\r\n    number = int(number)\r\n    while number > 0:\r\n        digit = number % 10\r\n        total += digit ** power\r\n        power += 1\r\n        number \/\/= 10\r\n    if total == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input('Enter a number: '))\r\n    print(armstrong_number(number))\r\n","votes":null},{"text":"\r\n    num = int(number)\r\n    sum = 0\r\n    while num > 0:\r\n        last_digit = num % 10\r\n        sum += last_digit ** 3\r\n        num \/\/= 10\r\n    if num == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    num = int(number)\r\n    if num == 0:\r\n        return False\r\n    total = 0\r\n    while num > 0:\r\n        digit = num % 10\r\n        total += digit ** 3\r\n        num \/\/= 10\r\n    return total == num\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(27))\r\n    print(armstrong_number(123))\r\n    print(armstrong_number(1234))\r\n    print(armstrong_number(12345))\r\n    print(armstrong_number(123456))\r\n    print(armstrong_number(1234567))\r\n    print(armstrong_number(12345678))\r\n    print(armstrong_number(123456789))\r\n","votes":null},{"text":"\r\n    sum_of_digits = 0\r\n    digits = []\r\n    while number > 0:\r\n        digits.append(number % 10)\r\n        sum_of_digits += number % 10\r\n        number \/\/= 10\r\n    if sum_of_digits == sum(digits) ** len(digits):\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    number = int(number)\r\n    if number < 0:\r\n        return False\r\n    sum = 0\r\n    while number > 0:\r\n        digit = number % 10\r\n        sum += digit ** 3\r\n        number \/\/= 10\r\n    if sum == number:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if number == 0:\r\n        return False\r\n    elif number < 0:\r\n        return False\r\n    elif number < 10:\r\n        return True\r\n    else:\r\n        sum = 0\r\n        while number!= 0:\r\n            digit = number % 10\r\n            sum += digit ** 3\r\n            number \/\/= 10\r\n        return number == sum\r\n\r\nprint(armstrong_number(678))\r\nprint(armstrong_number(124))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(27))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(1234567890))\r\nprint(armstrong_number(-123))\r\nprint(armstrong_number(10 ** 5))\r\nprint(armstrong_number(10 ** 10))\r\nprint(armstrong_number(10 ** 100))","votes":null},{"text":"\r\n    number_digits = len(str(number))\r\n    sum = 0\r\n    while number_digits:\r\n        digit = number % 10\r\n        number \/\/= 10\r\n        sum += (digit ** number_digits)\r\n    return number == sum\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    while number:\r\n        last_digit = number % 10\r\n        sum += last_digit ** 3\r\n        number \/\/= 10\r\n    if number == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(1234))\r\nprint(armstrong_number(240))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(12345))\r\n","votes":null},{"text":"\r\n    if number < 10:\r\n        return False\r\n    else:\r\n        total = 0\r\n        while number > 0:\r\n            digit = number % 10\r\n            total += digit ** 3\r\n            number \/\/= 10\r\n        return total == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(371))\r\n    print(armstrong_number(4073))\r\n    print(armstrong_number(27))\r\n    print(armstrong_number(999))\r\n    print(armstrong_number(9))\r\n    print(armstrong_number(111))\r\n    print(armstrong_number(11111))\r\n    print(armstrong_number(111111111))\r\n    print(armstrong_number(111111111111111111111111111111111))\r\n","votes":null}],"time":{"count":39.0,"avg":126065.4223589744,"std":28446.6458707835,"cov":0.2256498677}}
{"id":599,"question":"def sum_average(number):\r\n    \"\"\"Write a function to find sum and average of first n natural numbers.\"\"\"","answers":[{"text":"\r\n    sum = 0\r\n    average = 0\r\n\r\n    for i in range(number):\r\n        sum += i + 1\r\n\r\n    average = sum \/ number\r\n\r\n    return sum, average\r\n\r\n\r\nclass Average:\r\n    \"\"\"Write a class to find sum and average of first n natural numbers.\"\"\"\r\n\r\n   ","votes":84212.832},{"text":"\r\n    sum_ = 0\r\n    average = 0\r\n\r\n    for i in range(1, number + 1):\r\n        sum_ += i\r\n\r\n    average = sum_ \/ number\r\n\r\n    return sum_, average\r\n\r\n\r","votes":90167.14},{"text":"\r\n    total = 0\r\n    for i in range(1, number+1):\r\n        total += i\r\n    average = total\/number\r\n    return total, average\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(5))\r\n","votes":94225.888},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i + 1\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input('Enter a number: '))\r\n    print(sum_average(number))\r\n","votes":94610.904},{"text":"\r\n    sum_number = 0\r\n    for i in range(1,number+1):\r\n        sum_number += i\r\n    return sum_number, sum_number\/number\r\n\r\n\r","votes":101018.888},{"text":"\r\n    sum_ = 0\r\n    average_ = 0\r\n    for i in range(1, number+1):\r\n        sum_ += i\r\n    average_ = sum_\/number\r\n    return sum_, average_\r\n\r","votes":106031.144},{"text":"\r\n    sum_ = 0\r\n    for num in range(1, number+1):\r\n        sum_ += num\r\n    average = sum_ \/ number\r\n    return sum_, average\r\n\r\n\r","votes":109949.16},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":110497.992},{"text":"\r\n\r\n    sum=0\r\n    avg=0\r\n\r\n    for i in range(1,number+1):\r\n        sum=sum+i\r\n\r\n    avg=sum\/number\r\n\r\n    return sum,avg\r\n\r\n\r\nprint(sum_average(5))\r\nprint(sum_average(7))","votes":116787.36},{"text":"\r\n    sum_num = 0\r\n    i = 1\r\n    while i <= number:\r\n        sum_num += i\r\n        i += 1\r\n    average_num = sum_num \/ number\r\n    return sum_num, average_num\r\n\r\n\r","votes":119451.824},{"text":"\r\n    sum_n = 0\r\n    for i in range(1, number + 1):\r\n        sum_n += i\r\n    average_n = sum_n \/ number\r\n    return sum_n, average_n\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(10))\r\n    print(sum_average(5))\r\n","votes":122446.112},{"text":"\r\n    n = 0\r\n    if number < 0:\r\n        return \"ERROR\"\r\n    for i in range(number):\r\n        n += i + 1\r\n    return (n, n\/number)\r\n\r","votes":124747.004},{"text":"\r\n    sum_of_num = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_num += i\r\n    average_of_num = sum_of_num\/number\r\n    return sum_of_num, average_of_num\r\n\r","votes":129015.696},{"text":"\r\n    total = 0\r\n    for i in range(1, number + 1):\r\n        total += i\r\n    return total, total \/ number\r\n\r\n\r","votes":129710.156},{"text":"\r\n    sum = 0\r\n    average = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r\nprint(sum_average(5))\r\nprint(sum_average(10))\r\nprint(sum_average(20))\r\nprint(sum_average(30))\r\nprint(sum_average(40))\r\n","votes":130027.712},{"text":"\r\n    sum_of_first_n_natural_numbers = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_first_n_natural_numbers += i\r\n    average_of_first_n_natural_numbers = sum_of_first_n_natural_numbers \/ number\r\n    return sum_of_first_n_natural_numbers, average_of_first_n_natural_numbers\r\n\r\n\r","votes":131562.516},{"text":"\r\n    sum_value = 0\r\n    sum_of_number = 0\r\n    for i in range(1, number + 1):\r\n        sum_value += i\r\n        sum_of_number += i\r\n    return sum_value, sum_of_number \/ number\r\n\r\n\r","votes":134933.052},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, (sum \/ number)\r\n\r\n\r","votes":135173.556},{"text":"\r\n    sum_of_first_n = 0\r\n    number_of_numbers = 0\r\n    for i in range(1, number+1):\r\n        sum_of_first_n += i\r\n        number_of_numbers += 1\r\n    average = sum_of_first_n \/ number_of_numbers\r\n    return sum_of_first_n, average\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(1000000))\r\n","votes":136851.312},{"text":"\r\n    sum_of_numbers = 0\r\n    sum_count = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_numbers += i\r\n        sum_count += 1\r\n    average_of_numbers = sum_of_numbers \/ sum_count\r\n    return (sum_of_numbers, average_of_numbers)\r\n\r","votes":140916.324},{"text":"\r\n    sum_list = []\r\n    for i in range(number):\r\n        sum_list.append(i+1)\r\n    return sum(sum_list), sum(sum_list)\/number\r\n\r\n\r","votes":145821.764},{"text":"\r\n    sum = 0\r\n    for i in range(1,number+1):\r\n        sum += i\r\n    average = sum\/number\r\n    return sum, average\r\n\r\n#Call the function\r\nprint(\"The sum of first 10 natural numbers is: \", sum_average(10))\r\nprint(\"The average of first 10 natural numbers is: \", sum_average(10))\r\nprint(\"The sum of first 20 natural numbers is: \", sum_average(20))\r\nprint(\"The average of first 20 natural numbers is: \", sum_average(20))\r\n\r\n# -\r\n\r\n# ## The function\r\n#\r\n# The functions are a way to divide the code into smaller pieces.\r\n#\r\n# The function can be used to perform certain tasks.\r\n#\r\n# The function is also used to avoid copying and pasting code.\r\n#\r\n# The function is also used to write code that can be used for many different problems.\r\n#\r\n# The function is also used to make code more readable and less error prone.\r\n#\r\n# The function is also used to make code more flexible.\r\n#\r\n# The function is also used to make code more maintainable.\r\n#\r\n# The function is also used to make code more reusable.\r\n#\r\n# The function is also used to make code more efficient.\r\n#\r\n# The function is also used to make code more robust.\r\n#\r\n# The function is also used to make code more readable.\r\n#\r\n# The function is also used to make code more secure.\r\n#\r\n# The function is also used to make code more understandable.\r\n#\r\n# The function is also used to make code more user friendly.\r\n#\r\n# The function is also used to make code more user friendly.\r\n#\r\n# The function is also used to make code more user friendly.\r\n#\r\n# The function is also used to make code more user friendly.\r\n#\r\n# The function is also used to make code more user friendly.\r\n#\r\n# The function is also used to make code more user friendly.\r\n","votes":148115.228},{"text":"\r\n    sum = 0\r\n    n = 0\r\n    while n <= number:\r\n        sum = sum + n\r\n        n = n + 1\r\n    return sum, sum\/number\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter the number of natural numbers: \"))\r\n    print(\"\\nSum of first {} natural numbers is: {}\".format(number, sum_average(number)[0]))\r\n    print(\"Average of first {} natural numbers is: {}\".format(number, sum_average(number)[1]))\r\n","votes":154906.004},{"text":"\r\n    sum = 0\r\n    \r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    \r\n    average = sum \/ number\r\n    \r\n    return sum, average\r\n\r\nprint(sum_average(10))\r\n# -\r\n\r\n# ### 2.2.3.2.2.3.2.1.4.4.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3.1.4.4.3","votes":161048.544},{"text":"\r\n    sum_ = 0\r\n    for i in range(1, number + 1):\r\n        sum_ += i\r\n    average = sum_ \/ number\r\n    return sum_, average\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input('Please, enter a number to calculate sum and average: '))\r\n    print(sum_average(number))\r\n","votes":165955.628},{"text":"\r\n    if number == 0:\r\n        return 0\r\n    else:\r\n        sum = 0\r\n        for i in range(1, number+1):\r\n            sum += i\r\n        return sum, sum\/number\r\n\r\nprint(sum_average(5))\r\n\r\n# Use of enumerate()\r","votes":186382.656},{"text":"\r\n    sum_of_numbers = 0\r\n    for i in range(number):\r\n        number = int(input(\"Enter a number: \"))\r\n        sum_of_numbers += number\r\n    average = sum_of_numbers \/ number\r\n    return sum_of_numbers, average\r\n\r\n\r","votes":null},{"text":"\r\n    if number == 0:\r\n        return 0\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    average = sum\/number\r\n    return average\r\n\r","votes":null},{"text":"\r\n    s = 0\r\n    for i in range(1, number):\r\n        s += i\r\n    average = s\/number\r\n    return (s, average)\r\n    \r\n\r","votes":null},{"text":"\r\n    return sum(range(number)) \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum = sum + i\r\n    sum = sum \/ number\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    if number == 1:\r\n        return 1\r\n    else:\r\n        return number + sum_average(number - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in xrange(number):\r\n        sum += i + 1\r\n    return sum, sum \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    sum_number = 0\r\n    for i in range(number):\r\n        sum_number += i\r\n    return sum_number \/ number\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(10))\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    average = 0\r\n\r\n    for i in range(number):\r\n        number = int(input())\r\n        sum += number\r\n\r\n    average = sum \/ number\r\n    print(f'Sum: {sum}')\r\n    print(f'Average: {average:.2f}')\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r","votes":null},{"text":"\r\n    return sum(number) \/ len(number)\r\n\r\n\r","votes":null},{"text":"\r\n    # sum = 0\r\n    # for i in range(number):\r\n    #     sum += i\r\n    # return sum \/ number\r\n    # write a function to find sum and average of first n natural numbers\r\n    # sum = 0\r\n    # for i in range(number):\r\n    #     sum += i\r\n    # return sum, sum \/ number\r\n    # write a function to find sum and average of first n natural numbers\r\n    # sum = 0\r\n    # for i in range(number):\r\n    #     sum += i\r\n    # return sum, sum \/ number\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    i = 1\r\n    sum = 0\r\n    while i <= number:\r\n        sum += i\r\n        i += 1\r\n    return sum\/number\r\n\r\nif __name__ == \"__main__\":\r\n    print(sum_average(10))\r\n","votes":null},{"text":"\r\n    sum_ = 0\r\n    count = 0\r\n    for x in range(0, number + 1):\r\n        sum_ += x\r\n        count += 1\r\n    return [sum_, count]\r\n\r\n\r","votes":null},{"text":"\r\n    total = 0\r\n    sum_of_n = 0\r\n    for i in range(number):\r\n        total += i\r\n        sum_of_n += i\r\n        print(i)\r\n    print(sum_of_n)\r\n    print(total)\r\n    print(sum_of_n\/number)\r\n\r\n\r\nsum_average(100)\r\n","votes":null},{"text":"\r\n    # TODO: write your code here\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    average = sum\/number\r\n    return sum, average\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(10))\r\n","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(number):\r\n        total += i\r\n    average = total \/ number\r\n    return sum(range(number)), average\r\n\r\nprint(sum_average(10))\r\n```\r\n\r\n```\r\n$ python sum_average.py\r\n45 4.5\r\n```\r\n\r\n### 2.7.2 \u9012\u5f52\r\n\r\n#### 2.7.2.1 \u9012\u5f52\u7684\u5b9a\u4e49\r\n\r\n\u9012\u5f52\u662f\u4e00\u79cd\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u9012\u5f52\u662f\u6307\u4e00\u79cd\u89c4\u5f8b\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u65b9\u6cd5\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u9012\u5f52\u662f\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u3002\r\n\r\n\u9012\u5f52\u6709\u65f6\u4e5f\u88ab\u79f0\u4e3a\u9012\u5f52\u51fd\u6570\uff0c\u9012\u5f52\u7684\u610f\u601d\u662f\u6307\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u9012\u5f52\u51fd\u6570\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u65b9\u6cd5\u3002\r\n\r\n\u9012\u5f52\u662f\u4e00\u79cd\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u65b9\u6cd5\u3002\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u89c4\u5f8b\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u3002\r\n\r\n\u9012\u5f52\u662f\u4e00\u79cd\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u65b9\u6cd5\u3002\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u89c4\u5f8b\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u3002\r\n\r\n\u9012\u5f52\u662f\u4e00\u79cd\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u65b9\u6cd5\u3002\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u89c4\u5f8b\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u3002\r\n\r\n\u9012\u5f52\u662f\u4e00\u79cd\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u65b9\u6cd5\u3002\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u89c4\u5f8b\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u3002\r\n\r\n\u9012\u5f52\u662f\u4e00\u79cd\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u65b9\u6cd5\u3002\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u89c4\u5f8b\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u3002\r\n\r\n\u9012\u5f52\u662f\u4e00\u79cd\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u65b9\u6cd5\u3002\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u89c4\u5f8b\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u3002\r\n\r\n\u9012\u5f52\u662f\u4e00\u79cd\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u65b9\u6cd5\u3002\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u89c4\u5f8b\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u3002\r\n\r\n\u9012\u5f52\u662f\u4e00\u79cd\u9012\u5f52\u65b9\u6cd5\uff0c\u9012\u5f52\u65b9\u6cd5\u662f\u4e00\u79cd\u7279\u6b8a","votes":null},{"text":"\r\n    total = sum(range(1,number+1))\r\n    average = total\/number\r\n    return average\r\n\r\nprint(sum_average(10))\r\n\r\n# 15. Write a Python program to print the following table of 10 rows. \r\n# Number\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\r\n# 2\t4\t6\t8\t10\t12\t14\t16\t18\t20\t22\r\n# 3\t7\t11\t15\t20\t25\t30\t35\t40\t45\t50\r\n# 4\t11\t16\t21\t26\t32\t38\t44\t50\t56\t62\r\n# 5\t15\t21\t27\t33\t40\t47\t54\t61\t68\t75\r\n# 6\t19\t26\t33\t40\t48\t56\t64\t72\t80\t88\r\n# 7\t23\t31\t39\t47\t56\t65\t74\t83\t92\t101\r\n# 8\t27\t36\t45\t54\t64\t74\t85\t96\t107\t118\r\n# 9\t31\t41\t51\t61\t72\t83\t95\t107\t119\t131\r\n# 10\t35\t46\t57\t68\t80\t92\t105\t118\t131\t144\r\n\r\n# 16. Write a Python program to find the length of the shortest word in a given string. \r\n# Example: \r\n# Input: \"Hello World\" \r\n# Output: 5\r\n\r\n# 17. Write a Python program to check whether a given string is palindrome or not. \r\n# Example: \r\n# Input: \"radar\" \r\n# Output: Tru","votes":null},{"text":"\r\n    sum_list = 0\r\n    for i in range(1, number + 1):\r\n        sum_list += i\r\n    return sum_list \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    average = sum \/ number\r\n    print(f'Sum is {sum} and average is {average}')\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    sum_average(5)\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    count = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n        count += 1\r\n    return sum \/ count\r\n\r\n\r\nprint(sum_average(10))\r\n","votes":null},{"text":"\r\n    return sum(number)\/len(number)\r\n\r\nprint(sum_average([1,2,3,4,5,6,7,8,9,10]))\r\n","votes":null},{"text":"\r\n    sum_of_numbers = 0\r\n    count = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_numbers += i\r\n        count += 1\r\n    return sum_of_numbers \/ count\r\n\r\nprint(sum_average(10))\r\n```\r\n\r\nThe function has the following output:\r\n```\r\nSum of numbers is: 55\r\nAverage is: 5.5\r\n```\r\n\r\nYou can also write this function recursively.\r\n\r\n```python\r","votes":null},{"text":"\r\n\r\n    sum = 0\r\n    # sum_of_average = 0\r\n    for i in range(number):\r\n        sum += i + 1\r\n        # sum_of_average += sum \/ i\r\n        # print(sum_of_average)\r\n    # print(sum)\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    return number\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(100))\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    average = 0\r\n\r\n    for i in range(number):\r\n        sum += i\r\n        average = sum \/ i\r\n\r\n    return print(f'Sum: {sum}\\nAverage: {average}')\r\n\r\n\r\nsum_average(10)\r\n","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(number):\r\n        total += i\r\n    return total, total\/number\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(100))","votes":null},{"text":"\r\n    for i in range(1, number+1):\r\n        sum = sum + i\r\n    average = sum\/number\r\n    print(sum)\r\n    print(average)\r\n\r\n\r\nif __name__ == '__main__':\r\n    sum_average(int(input(\"Enter a value to find sum and average of first n natural numbers: \")))","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    print(sum)\r\n    print(sum\/number)\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(range(1, number)) \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    sum_ = 0\r\n    for i in range(number):\r\n        sum_ += i\r\n    average = float(sum_ \/ number)\r\n    return sum_, average\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Please enter a number:\"))\r\n    print(\"Sum of first {} natural numbers is {}\".format(\r\n                n, sum(range(n))))\r\n    print(\"Average of first {} natural numbers is {}\".format(\r\n                n, sum_average(n)[1]))\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    average = sum \/ number\r\n    return str(sum), str(average)\r\n\r\n\r\nsum_average(1000000)\r\n```\r\n\r\n### 2. Find the number of prime numbers less than a non-negative number, n.\r\n\r\n```python\r\n\"\"\"\r\nWrite a Python program to find the number of prime numbers less than a non-negative number, n.\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n\r\n    # Initialize sum and count\r\n    sum = 0\r\n    count = 0\r\n\r\n    # Iterate the number until the number is greater than n\r\n    while number > count:\r\n\r\n        # Add the number to sum\r\n        sum += number\r\n\r\n        # Update the count\r\n        count += 1\r\n\r\n    # Return the sum and average of the sum and count\r\n    return sum, sum \/ count\r\n\r\n\r","votes":null},{"text":"\r\n    sum_ = 0\r\n    for i in range(number):\r\n        sum_ += i\r\n    average = float(sum_) \/ number\r\n    return sum_, average\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    count = 0\r\n    for i in range(number):\r\n        num = int(input(\"Input number: \"))\r\n        sum += num\r\n        count += 1\r\n    return sum \/ count\r\n\r\n\r","votes":null},{"text":"\r\n    summ = 0\r\n    for i in range(number):\r\n        summ += i+1\r\n    average = summ \/ number\r\n    print('Sum of first {} natural numbers is: {}'.format(number, summ))\r\n    print('Average of first {} natural numbers is: {}'.format(number, average))\r\n\r\nsum_average(100)\r\n\r\n# -\r\n\r\n# ### Write a function to find the sum of first n natural numbers.\r\n\r\n# +\r\n\"\"\"Write a function to find sum of first n natural numbers.\"\"\"\r\n\r","votes":null},{"text":"\r\n    sum_num = 0\r\n    sum_num = sum(number)\r\n    average = sum_num\/len(number)\r\n    return sum_num, average\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    return sum\/number\r\n\r\nprint(sum_average(10))\r\nprint(sum_average(1000))\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    return sum, sum\/number\r\n\r\n\r\nprint(sum_average(10))\r\n\r\n\"\"\"\r\nWrite a function to return the sum of first n natural numbers.\r\n\"\"\"\r","votes":null},{"text":"\r\n\r\n    # Write your code below\r\n    sum_of_n = 0\r\n    for i in range(number):\r\n        sum_of_n += i\r\n    avg_of_n = sum_of_n \/ number\r\n    return print(f\"Sum: {sum_of_n} Average: {avg_of_n}\")\r\n\r\n\r\nsum_average(20)\r\n","votes":null},{"text":"\r\n    sum_of_number = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_number += i\r\n    average = sum_of_number \/ number\r\n    print(sum_of_number)\r\n    print(average)\r\n\r\n\r\nsum_average(10)\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    length = len(number)\r\n    for i in range(1, length+1):\r\n        sum += number[i-1]\r\n    sum = sum \/ length\r\n    return sum\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    sum = 0\r\n    average = 0\r\n    for i in range(1,number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum,average\r\n\r\n# This function prints out the sum and average of 10 natural numbers.\r\nprint(sum_average(10))\r\n\r\n# These next lines of code will test your function.\r\nassert sum_average(10) == (55, 5.0)\r\nassert sum_average(20) == (110, 10.0)\r\nassert sum_average(30) == (170, 15.0)\r\n\r\nprint(\"Nice work!\")\r\n\r\n# + [markdown] id=\"J1-f-e6aQ49q\"\r\n# # Task 3: Write a function to find the sum of first n integers that are divisible by 3 and 5.\r\n#\r\n# You should use a for loop to solve this problem.\r\n#\r\n# Hint: Don't forget to include the `assert` statements at the end of your function to check if your function is working properly.\r\n#\r\n# The function should return a tuple containing the sum and the number of integers that were divisible by 3 and 5.\r\n#\r\n# ```\r\n# sum_divisible_by_three_and_five(10) == (60, 3)\r\n# assert sum_divisible_by_three_and_five(10) == (60, 3)\r\n# ```\r\n#\r\n# *Note: For this task, you can assume that the input will always be a positive integer.*\r\n#\r\n# *Note: If the number is not divisible by 3 or 5, it will not be included in the sum.*\r\n#\r\n# *Note: You can assume that the input will always be a positive integer.*\r\n#\r\n# *Note: You can assume that the input will always be a positive integer.*\r\n#\r\n# *Note: You can assume that the input will always be a positive integer.*\r\n#\r\n# ","votes":null},{"text":"\r\n    sum_ = 0\r\n    for i in range(number):\r\n        sum_ += i + 1\r\n    return sum_\/number, sum_\r\n\r","votes":null},{"text":"\r\n    sum_ = 0\r\n    average = 0\r\n    for i in range(number):\r\n        sum_ += i\r\n    average = sum_ \/ number\r\n    return sum_, average\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(10))\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    average = 0\r\n    for i in range(number):\r\n        num = int(input())\r\n        sum += num\r\n    average = sum \/ number\r\n    print(f\"Sum: {sum}, average: {average}\")\r\n\r\n\r\nsum_average(int(input()))\r\n","votes":null},{"text":"\r\n    sum_of_numbers = 0\r\n    for i in range(number):\r\n        sum_of_numbers += i\r\n    average_of_numbers = sum_of_numbers \/ number\r\n    return sum_of_numbers, average_of_numbers\r\n\r","votes":null},{"text":"\r\n    average = 0\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n        average = sum \/ number\r\n    return sum, average\r\n\r\n\r\n# Tests\r\nsum_average(10)\r\nsum_average(1000000)\r\nsum_average(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    sum = 0\r\n    count = 0\r\n    for i in range(number + 1):\r\n        sum += i\r\n        count += 1\r\n    return sum, sum\/count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sum_average(5))\r\n    print(sum_average(10))\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(number):\r\n        total += i\r\n    return total \/ number\r\n\r\n\r\nfor i in range(1, 11):\r\n    print(i, sum_average(i))\r\n","votes":null},{"text":"\r\n    sum_value = 0\r\n    for i in range(1, number):\r\n        sum_value += i\r\n    return sum_value, sum_value \/ number\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # sum = 0\r\n    # for i in range(number):\r\n    #     sum += i\r\n    # print(sum)\r\n\r\n    # average = sum \/ number\r\n    # print(average)\r\n\r\n    # for i in range(number):\r\n    #     sum += i\r\n    # print(sum)\r\n\r\n    number_list = [1, 2, 3]\r\n    sum = 0\r\n    for i in number_list:\r\n        sum += i\r\n    print(sum)\r\n\r\n    average = sum \/ len(number_list)\r\n    print(average)\r\n\r\n\r\nsum_average(5)\r\n","votes":null},{"text":"\r\n    s = sum(range(number))\r\n    n = number * (number + 1) \/ 2\r\n    return s, n\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    s, n = sum_average(n)\r\n    print(s)\r\n    print(n)\r\n","votes":null},{"text":"\r\n    sum_of_numbers = 0\r\n    for i in range(number):\r\n        sum_of_numbers += i\r\n    return sum_of_numbers \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(number):\r\n        total += i\r\n    return total, total \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    average = 0\r\n    for i in range(number):\r\n        sum += i\r\n        average += (i+1)\/2\r\n    print(sum)\r\n    print(average)\r\n    return sum, average\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n\r\n    average = sum\/number\r\n\r\n    print(f\"Sum: {sum}\")\r\n    print(f\"Average: {average}\")\r\n\r\n\r\nsum_average(10)\r\n","votes":null},{"text":"\r\n    summation = 0\r\n    average = 0\r\n    for i in range(number):\r\n        summation += i\r\n    average = summation\/number\r\n    return summation, average\r\n\r\nprint(sum_average(100))\r\n","votes":null},{"text":"\r\n    sum_of_number = 0\r\n    average = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_number += i\r\n        average = sum_of_number \/ number\r\n    print(f\"Sum of first {number} natural numbers is {sum_of_number}.\")\r\n    print(f\"Average of first {number} natural numbers is {average}.\")\r\n\r\n\r\nsum_average(10)\r\nsum_average(100)\r\nsum_average(100000000000)\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r\n\r\n# \u6d4b\u8bd5\r\nprint(sum_average(10))\r\n","votes":null},{"text":"\r\n    if number == 1:\r\n        return number\r\n    else:\r\n        return sum_average(number - 1) + number \/\/ 2\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_average(10))","votes":null},{"text":"\r\n    sum = 0\r\n    total = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n        total += 1\r\n    average = sum \/ total\r\n    print(f\"Sum is {sum}, average is {average}\")\r\n\r\n\r\n@pytest.mark.parametrize(\r\n    \"number\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\r\n)\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    average = sum\/number\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    sum_of_numbers = 0\r\n    sum_of_numbers_squared = 0\r\n    count = 0\r\n    while count < number:\r\n        sum_of_numbers += count\r\n        sum_of_numbers_squared += count * count\r\n        count += 1\r\n    return sum_of_numbers, sum_of_numbers_squared, sum(range(1, number + 1))\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input('How many natural numbers do you want to find sum and average of? '))\r\n    print(f'Sum of first {number} natural numbers: {sum_average(number)[0]}')\r\n    print(f'Sum of first {number} natural numbers squared: {sum_average(number)[1]}')\r\n    print(f'Sum of first {number} natural numbers: {sum_average(number)[2]}')\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    return sum\/number\r\n\r\n\r","votes":null},{"text":"\r\n    sum_ = 0\r\n    for i in range(1, number+1):\r\n        sum_ += i\r\n    return sum_\r\n\r\nprint(sum_average(100))\r\n```\r\n#### Output\r\n```\r\n5050\r\n```\r\n\r\n## Sum of first n natural numbers\r\n```\r\n\"\"\"Write a function to find sum of first n natural numbers.\"\"\"\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    average = sum\/number\r\n    return sum, average\r\n\r","votes":null},{"text":"\r\n    print(sum_average(number))\r\n    if number == 0:\r\n        return 0, 0\r\n    else:\r\n        return number + sum_average(number - 1)\r\n\r\n\r\n# Program to illustrate the sum_average function\r\nnumber = 5\r\nsum, average = sum_average(number)\r\nprint('Sum of first {} natural numbers is {}'.format(number, sum))\r\nprint('Average of first {} natural numbers is {}'.format(number, average))\r\n","votes":null},{"text":"\r\n    sum_list = 0\r\n    for i in range(number):\r\n        print(i)\r\n        sum_list += i\r\n    print(\"Sum is\", sum_list)\r\n    average = sum_list \/ number\r\n    print(\"Average is\", average)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    n = int(input(\"Enter a number: \"))\r\n    total = 0\r\n    sum_number = []\r\n    for i in range(n):\r\n        number = int(input(\"Enter a number: \"))\r\n        sum_number.append(number)\r\n        total += number\r\n    print(sum_number)\r\n    print(f\"The sum is {total}.\")\r\n    print(f\"The average is {total \/ n}.\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    sum_average()\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    count = 0\r\n    while count < number:\r\n        sum += count\r\n        count += 1\r\n    return sum \/ number\r\n\r","votes":null},{"text":"\r\n    result = 0\r\n    for i in range(1, number + 1):\r\n        result += i\r\n    return result \/ number\r\n\r\n\r","votes":null}],"time":{"count":26.0,"avg":127098.7075384615,"std":24834.6809958769,"cov":0.195396802}}
{"id":600,"question":"def is_Even(n) :\r\n    \"\"\"Write a python function to check whether the given number is even or not using bitwise operator.\"\"\"","answers":[{"text":"\r\n    if n%2==0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":45164.844},{"text":"\r\n    return (n & 1) == 0\r\n\r\n\r","votes":48326.66},{"text":"\r\n    return n & 1 == 0\r\n\r","votes":51470.788},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n    \r","votes":56122.66},{"text":"\r\n    return n&0x1 == 0\r\n\r","votes":56553.368},{"text":"\r\n    if n % 2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n\r\nif __name__ == '__main__' :\r\n    print(\"Even or not: \", is_Even(12))\r\n","votes":57068.228},{"text":"\r\n    if n & 1:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":64114.42},{"text":"\r\n    if n & 1:\r\n        return False\r\n    else:\r\n        return True\r\n\r\nprint(is_Even(5))\r\nprint(is_Even(6))\r\n","votes":64319.212},{"text":"\r\n    if n%2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":70167.036},{"text":"\r\n\r\n    n = n & 0x5555555555555555 # 0x5555555555555555 is 0b1010101010101010101010101010101010101010101010101010101010\r\n    return n == 0 # 0x0000000000000000 is 0b00000000000000000000000000000000000000000000000000000000000000000\r\n\r","votes":71239.844},{"text":"\r\n    if n :\r\n        return n & 1 == 0\r\n    else :\r\n        return True\r\n\r","votes":72618.624},{"text":"\r\n    if n & 1 :\r\n        return (0)\r\n    else :\r\n        return (1)\r\n\r","votes":73002.956},{"text":"\r\n    return (n & 1) == 0\r\n\r","votes":77557.332},{"text":"\r\n    if n == 0:\r\n        return True\r\n    if n%2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":78101.056},{"text":"\r\n\r\n    if n%2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":78116.04},{"text":"\r\n    if n%2==0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":78641.26},{"text":"\r\n    if n & 1 :\r\n        return False\r\n    else :\r\n        return True","votes":78914.52},{"text":"\r\n    return n % 2 == 0\r\n\r","votes":80512.584},{"text":"\r\n    if n%2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":80629.476},{"text":"\r\n    return n&1==0\r\n\r","votes":82377.384},{"text":"\r\n    if n % 2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":83038.608},{"text":"\r\n    if n % 2 == 0:\r\n        return True\r\n    return False\r\n\r","votes":84749.948},{"text":"\r\n    return n%2==0\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter a number: \"))\r\n    print(is_Even(n))","votes":85895.232},{"text":"\r\n    if n == 0 :\r\n        return True\r\n    else :\r\n        return n%2 == 0\r\n\r","votes":86329.868},{"text":"\r\n    if n % 2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(is_Even(10))\r\nprint(is_Even(11))\r\nprint(is_Even(12))\r\n\r","votes":87311.768},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":87388.544},{"text":"\r\n    if n % 2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":92720.7},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n\r","votes":94773.52},{"text":"\r\n    if n%2 == 0 :\r\n        return True\r\n    else :\r\n        return False \r\n\r","votes":97735.984},{"text":"\r\n    if n & 1 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nif __name__ == '__main__':\r\n    x = int(input())\r\n    print(is_Even(x))","votes":97849.852},{"text":"\r\n    if n % 2 == 0:\r\n        return True\r\n    else:\r\n        return False","votes":99811.512},{"text":"\r\n    \r\n    return n & 1 == 0\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(is_Even(n))\r\n\r\n","votes":100237.904},{"text":"\r\n    return (n&1)==0 # returns 1 if the bitwise AND of the number and 1 is 0, else it is 1.\r\n\r\n\r\n\r","votes":100300.232},{"text":"\r\n    return n & 1 == 0\r\n\r\n\r\nprint(is_Even(5))\r\nprint(is_Even(6))\r\nprint(is_Even(7))\r\nprint(is_Even(0))\r\n\r\n","votes":105310.484},{"text":"\r\n    if n == 0 :\r\n        return True\r\n    if n%2==0 :\r\n        return True\r\n    else :\r\n        return False\r","votes":106712.012},{"text":"\r\n    if n & 1 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Driver program to test above function\r\nif __name__ == \"__main__\":\r\n    print(is_Even(10))\r\n    print(is_Even(11))","votes":106786.416},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\nprint(is_Even(5))\r\nprint(is_Even(6))\r\nprint(is_Even(-5))\r\nprint(is_Even(-6))\r\nprint(is_Even(0))\r\n\r","votes":109134.092},{"text":"\r\n    if n % 2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\" :\r\n    n = int(input(\"Enter the number : \"))\r\n    print(is_Even(n))\r\n","votes":109908.128},{"text":"\r\n    return n%2==0\r\n\r\nprint(is_Even(12))\r\n\r\n# Example 2\r","votes":112859.964},{"text":"\r\n    if n%2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n\r\nif __name__ == '__main__' :\r\n    print(\"Enter the element to check whether it is even or not : \")\r\n    n = int(input())\r\n    print(is_Even(n))\r\n\r\n'''\r\nTime complexity : O(logn)\r\nSpace Complexity : O(1)\r\n'''\r\n","votes":114141.464},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\nprint(is_Even(10))\r\nprint(is_Even(15))\r\nprint(is_Even(16))\r\nprint(is_Even(17))\r\n","votes":119053.372},{"text":"\r\n    if n%2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":119628.448},{"text":"\r\n    if n%2==0:\r\n        return True\r\n    else:\r\n        return False\r\nprint(is_Even(4))\r\nprint(is_Even(5))\r\nprint(is_Even(6))\r\n\r\n\r\n# + [markdown] id=\"h5m3cS2Lh-6Y\"\r\n# ### Bitwise Operators\r\n# Bitwise operators are used to extract particular bits of a number. They are useful in computer programming to manipulate numbers.\r\n#\r\n# #### Bitwise AND\r\n#\r\n# The bitwise AND operator (also known as the bitwise AND operator or the bitwise and operator) performs a logical AND operation on two binary numbers. Bitwise AND is commonly used in computer programming to determine whether two numbers are equal (`a == b`) or not (`a!= b`).\r\n#\r\n# The expression `a & b` is evaluated as follows:\r\n#\r\n# ```\r\n# a = 00010101\r\n# b = 00011001\r\n# a = 00010101\r\n# b = 00011001\r\n# a & b = 00000001\r\n# ```\r\n#\r\n#\r\n# #### Bitwise OR\r\n#\r\n# The bitwise OR operator (also known as the bitwise OR operator or the bitwise or operator) performs a logical OR operation on two binary numbers. Bitwise OR is commonly used in computer programming to determine whether two numbers are equal (`a == b`) or not (`a!= b`).\r\n#\r\n# The expression `a | b` is evaluated as follows:\r\n#\r\n# ```\r\n# a = 00010101\r\n# b = 00011001\r\n# a = 00010101\r\n# b = 00011001\r\n# a | b = 00011001\r\n# ```\r\n#\r\n#\r\n# #### Bitwise XOR\r\n#\r\n# The bitwise XOR operator (als","votes":123205.712},{"text":"\r\n    return n%2==0\r\n\r\n# Driver program to test above function\r\nif __name__ == \"__main__\" :\r\n    n = 9\r\n    if is_Even(n) :\r\n        print(n, \"is Even\")\r\n    else :\r\n        print(n, \"is Odd\")\r\n","votes":126898.488},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\nprint(is_Even(5))\r\nprint(is_Even(4))\r\nprint(is_Even(3))\r\nprint(is_Even(2))\r\nprint(is_Even(1))\r\nprint(is_Even(0))\r\n","votes":129771.244},{"text":"\r\n    return n & 1 == 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter the number: \"))\r\n    print(\"Even number: \" + str(is_Even(n)))\r\n\r\n","votes":137175.868},{"text":"\r\n    if n & 1 == 0:\r\n        return True\r\n    else:\r\n        return False\r\nprint(is_Even(49))\r\nprint(is_Even(48))\r\nprint(is_Even(47))\r\nprint(is_Even(46))\r\nprint(is_Even(45))\r\nprint(is_Even(44))\r\nprint(is_Even(43))\r\nprint(is_Even(42))\r\nprint(is_Even(41))\r\nprint(is_Even(40))\r\nprint(is_Even(39))\r\nprint(is_Even(38))\r\nprint(is_Even(37))\r\nprint(is_Even(36))\r\nprint(is_Even(35))\r\nprint(is_Even(34))\r\nprint(is_Even(33))\r\nprint(is_Even(32))\r\nprint(is_Even(31))\r\nprint(is_Even(30))\r\nprint(is_Even(29))\r\nprint(is_Even(28))\r\nprint(is_Even(27))\r\nprint(is_Even(26))\r\nprint(is_Even(25))\r\nprint(is_Even(24))\r\nprint(is_Even(23))\r\nprint(is_Even(22))\r\nprint(is_Even(21))\r\nprint(is_Even(20))\r\nprint(is_Even(19))\r\nprint(is_Even(18))\r\nprint(is_Even(17))\r\nprint(is_Even(16))\r\nprint(is_Even(15))\r\nprint(is_Even(14))\r\nprint(is_Even(13))\r\nprint(is_Even(12))\r\nprint(is_Even(11))\r\nprint(is_Even(10))\r\nprint(is_Even(9))\r\nprint(is_Even(8))\r\nprint","votes":176106.1},{"text":"\r\n    return n & 1 == 0\r\n\r\nprint(is_Even(10))\r\nprint(is_Even(12))\r\nprint(is_Even(13))\r\nprint(is_Even(14))\r\nprint(is_Even(15))\r\nprint(is_Even(16))\r\nprint(is_Even(17))\r\nprint(is_Even(18))\r\nprint(is_Even(19))\r\nprint(is_Even(20))\r\nprint(is_Even(21))\r\nprint(is_Even(22))\r\nprint(is_Even(23))\r\nprint(is_Even(24))\r\nprint(is_Even(25))\r\nprint(is_Even(26))\r\nprint(is_Even(27))\r\nprint(is_Even(28))\r\nprint(is_Even(29))\r\nprint(is_Even(30))\r\nprint(is_Even(31))\r\nprint(is_Even(32))\r\nprint(is_Even(33))\r\nprint(is_Even(34))\r\nprint(is_Even(35))\r\nprint(is_Even(36))\r\nprint(is_Even(37))\r\nprint(is_Even(38))\r\nprint(is_Even(39))\r\nprint(is_Even(40))\r\nprint(is_Even(41))\r\nprint(is_Even(42))\r\nprint(is_Even(43))\r\nprint(is_Even(44))\r\nprint(is_Even(45))\r\nprint(is_Even(46))\r\nprint(is_Even(47))\r\nprint(is_Even(48))\r\nprint(is_Even(49))\r\nprint(is_Even(50))\r\nprint(is_Even(51))\r\nprint(is_Even(52))\r\nprint(is_Even(53))","votes":176848.256},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return 1 if n%2==0 else 0\r\n\r\n# Print the result\r\nprint(\"The given number is even or not: \", is_Even(3))\r\nprint(\"The given number is even or not: \", is_Even(0))\r\nprint(\"The given number is even or not: \", is_Even(10))\r\nprint(\"The given number is even or not: \", is_Even(1))\r\nprint(\"The given number is even or not: \", is_Even(2))\r\nprint(\"The given number is even or not: \", is_Even(11))\r\nprint(\"The given number is even or not: \", is_Even(5))\r\nprint(\"The given number is even or not: \", is_Even(-3))\r\nprint(\"The given number is even or not: \", is_Even(-1))\r\nprint(\"The given number is even or not: \", is_Even(-2))\r\nprint(\"The given number is even or not: \", is_Even(-11))\r\nprint(\"The given number is even or not: \", is_Even(-5))","votes":178623.82},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\nif __name__ == \"__main__\" :\r\n    print(is_Even(1))\r\n    print(is_Even(2))\r\n    print(is_Even(3))\r\n    print(is_Even(4))\r\n    print(is_Even(5))\r\n    print(is_Even(6))\r\n    print(is_Even(7))\r\n    print(is_Even(8))\r\n    print(is_Even(9))\r\n    print(is_Even(10))\r\n    print(is_Even(11))\r\n    print(is_Even(12))\r\n    print(is_Even(13))\r\n    print(is_Even(14))\r\n    print(is_Even(15))\r\n    print(is_Even(16))\r\n    print(is_Even(17))\r\n    print(is_Even(18))\r\n    print(is_Even(19))\r\n    print(is_Even(20))\r\n    print(is_Even(21))\r\n    print(is_Even(22))\r\n    print(is_Even(23))\r\n    print(is_Even(24))\r\n    print(is_Even(25))\r\n    print(is_Even(26))\r\n    print(is_Even(27))\r\n    print(is_Even(28))\r\n    print(is_Even(29))\r\n    print(is_Even(30))\r\n    print(is_Even(31))\r\n    print(is_Even(32))\r\n    print(is_Even(33))\r\n    print(is_Even(34))\r\n    print(is_Even(35))\r\n    print(is_Even(36))\r\n    print(is_Even(37))\r\n    print(is_Even(38))\r\n    print(is_Even(39))\r\n    print(is_Even(40))\r\n    print(is_Even(41))\r\n    print(is_Even(42))\r\n    print(is_Even(43))\r\n    print(is_Even(44))\r\n    print(is_Even(45))\r\n    print(is_Even(46))\r\n  ","votes":187093.148},{"text":"\r\n    if n and n%2==0:\r\n        return True\r\n    return False\r\n\r\nprint(is_Even(100))\r\nprint(is_Even(101))\r\nprint(is_Even(102))\r\nprint(is_Even(103))\r\nprint(is_Even(104))\r\nprint(is_Even(105))\r\nprint(is_Even(106))\r\nprint(is_Even(107))\r\nprint(is_Even(108))\r\nprint(is_Even(109))\r\nprint(is_Even(110))\r\nprint(is_Even(111))\r\nprint(is_Even(112))\r\nprint(is_Even(113))\r\nprint(is_Even(114))\r\nprint(is_Even(115))\r\nprint(is_Even(116))\r\nprint(is_Even(117))\r\nprint(is_Even(118))\r\nprint(is_Even(119))\r\nprint(is_Even(120))\r\n\r","votes":198915.016},{"text":"\r\n    if n == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n```\r\n<br>\r\n\r\n### 2.3 &nbsp; Bitwise Operators\r\nThe bitwise operator in Python uses the bitwise operators for bitwise operations. There are 8 bitwise operators in Python which are as follows:\r\n\r\n| Operator | Description |\r\n| -------- | ----------- |\r\n| `&`      | Bitwise AND |\r\n| `|`      | Bitwise OR  |\r\n| `^`      | Bitwise XOR |\r\n| `~`      | Bitwise NOT |\r\n| `<<`     | Left Shift |\r\n| `>>`     | Right Shift |\r\n| `>>>`    | Signed Right Shift |\r\n\r\n<br>\r\n\r\n### 2.4 &nbsp; Bitwise Operators Example\r\nThe following is an example of bitwise operators:\r\n```python\r\n>>> a = 60 # binary 0011 1100\r\n>>> b = 13 # binary 0000 1101\r\n>>> a & b    # binary 0000 1100\r\n>>> a | b    # binary 0011 1101\r\n>>> a ^ b    # binary 0011 0001\r\n>>> ~a      # binary 1100 0011\r\n>>> a << 2   # binary 1100 0011 (0011 0011)\r\n>>> a >> 2   # binary 0011 0011 (0000 1101)\r\n>>> a >>> 2  # binary 0000 1101 (0000 1101)\r\n```\r\n<br>\r\n\r\n### 2.5 &nbsp; Bitwise Operators Summary\r\nThe table below summarizes the bitwise operators that are used in Python.\r\n\r\n| Operator | Description |\r\n| -------- | ----------- |\r\n| `&`      | Bitwise AND |\r\n| `|`      | Bitwise OR  ","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(is_Even(4))\r\nprint(is_Even(3))\r\nprint(is_Even(7))\r\nprint(is_Even(0))\r\nprint(is_Even(10))\r\n\r\nprint(\"\\n\")\r\n\r","votes":null},{"text":"\r\n    return (n & 0b1111111111111111111111111110000) == 0b00000000000000000000000000000000\r\n\r\n\r","votes":null},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\nprint(is_Even(15))\r\n```\r\n**Output**\r\n```\r\nTrue\r\n```\r\n\r\n**Explanation**\r\n```\r\nThe input number is 15.\r\nThe binary representation of 15 is 1111.\r\nThe rightmost digit is 1.\r\nThe binary representation of 1 is 1. \r\nSo, the number is even.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput:\r\nn = 14\r\n\r\nOutput:\r\nTrue\r\n\r\nExplanation:\r\nThe input number is 14.\r\nThe binary representation of 14 is 1110.\r\nThe rightmost digit is 1.\r\nThe binary representation of 1 is 1. \r\nSo, the number is even.\r\n```\r\n\r\n**Your Task:**\r\nYou don't need to read input or print anything. Your task is to complete the function is_Even() which takes an integer n as input parameter and returns True if the number is even else False.\r\n\r\n**Expected Time Complexity:** O(1).\r\n**Expected Auxiliary Space:** O(1).\r\n\r\n**Constraints:**\r\n1 \u2264 n \u2264 10^6\r\n\r\n## Python Program to Check if Number is Odd or Even\r\n\r\n```\r\n# Python program to check if number is odd or even\r","votes":null},{"text":"\r\n    if n%2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nif __name__ == \"__main__\":\r\n    print(is_Even(6))\r\n    print(is_Even(7))\r\n    print(is_Even(8))\r\n    print(is_Even(9))\r\n    print(is_Even(10))\r\n    print(is_Even(11))\r\n    print(is_Even(12))\r\n    print(is_Even(13))\r\n    print(is_Even(14))\r\n    print(is_Even(15))\r\n    print(is_Even(16))\r\n    print(is_Even(17))\r\n    print(is_Even(18))\r\n    print(is_Even(19))\r\n    print(is_Even(20))\r\n    print(is_Even(21))\r\n    print(is_Even(22))\r\n    print(is_Even(23))\r\n    print(is_Even(24))\r\n    print(is_Even(25))\r\n    print(is_Even(26))\r\n    print(is_Even(27))\r\n    print(is_Even(28))\r\n    print(is_Even(29))\r\n    print(is_Even(30))\r\n    print(is_Even(31))\r\n    print(is_Even(32))\r\n    print(is_Even(33))\r\n    print(is_Even(34))\r\n    print(is_Even(35))\r\n    print(is_Even(36))\r\n    print(is_Even(37))\r\n    print(is_Even(38))\r\n    print(is_Even(39))\r\n    print(is_Even(40))\r\n    print(is_Even(41))\r\n    print(is_Even(42))\r\n    print(is_Even(43))\r\n    print(is_Even(44))\r\n    print(is_Even(45))\r\n    print(is_Even(46))\r\n    print(is_Even(47))\r\n    print(is_Even(48))\r\n    print(is_Even(49))\r\n    print(is_Even(50))\r\n    print(is_Even(5","votes":null},{"text":"\r\n    if n%2 == 0 :\r\n        print(\"Even\")\r\n    else :\r\n        print(\"Odd\")\r\n\r\nis_Even(15)\r\n```\r\n- [ ] Write a python code to find the sum of two numbers without using addition operator.\r\n```\r","votes":null},{"text":"\r\n    if n == 0 :\r\n        return True\r\n    if n & 1 == 0 :\r\n        return is_Even(n >> 1)\r\n    else :\r\n        return False\r\n\r\nif __name__ == \"__main__\" :\r\n    print(is_Even(24))\r\n    print(is_Even(16))\r\n    print(is_Even(3))","votes":null},{"text":"\r\n    n = n&1\r\n    if n :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":null},{"text":"\r\n    if n%2==0 :\r\n        print(f\"The number {n} is Even\")\r\n    else :\r\n        print(f\"The number {n} is Odd\")\r\n\r\nis_Even(3)\r\nis_Even(4)\r\n```\r\n","votes":null},{"text":"\r\n    return n!= 0 and ((n & (n - 1)) == 0)\r\n\r\n\r","votes":null},{"text":"\r\n    if n==0:\r\n        return True\r\n    else:\r\n        if n%2==0:\r\n            return True\r\n        else:\r\n            return False\r\nn=int(input(\"Enter the number: \"))\r\nprint(\"The number is Even or not: \",is_Even(n))\r\n","votes":null},{"text":"\r\n    if n % 2 == 0 :\r\n        print(\"The number is Even\")\r\n    else :\r\n        print(\"The number is Odd\")\r\n\r","votes":null},{"text":"\r\n    if (n & 1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(is_Even(10))\r\nprint(is_Even(11))\r\n```\r\n\r\nThis is the output:\r\n```\r\nTrue\r\nFalse\r\n```\r\n\r\n**Explanation:** This is because we are using bitwise operator to check whether the given number is even or not. The `n & 1` gives the remainder of the division of the given number by 2. 0 is the remainder of 5\/2=2.\r\n\r\n**Example 4:**\r\n```python\r","votes":null},{"text":"\r\n    n = n ^ (n >> 1)\r\n    return n == 0\r\n\r","votes":null},{"text":"\r\n    if n%2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n    \r\n\r\n# Driver Code\r\nn = int(input())\r\nprint(is_Even(n))\r\n","votes":null},{"text":"\r\n    if n == 0 :\r\n        return True\r\n    elif n & 1 == 0 :\r\n        return is_Even(n\/\/2)\r\n    else :\r\n        return False\r\n\r\nif __name__ == \"__main__\" :\r\n    print(is_Even(10))\r\n    print(is_Even(11))\r\n    print(is_Even(12))\r\n    print(is_Even(13))\r\n    print(is_Even(14))\r\n    print(is_Even(15))\r\n    print(is_Even(16))\r\n    print(is_Even(17))\r\n    print(is_Even(18))\r\n    print(is_Even(19))\r\n    print(is_Even(20))\r\n    print(is_Even(21))\r\n    print(is_Even(22))\r\n    print(is_Even(23))\r\n    print(is_Even(24))\r\n    print(is_Even(25))\r\n    print(is_Even(26))\r\n    print(is_Even(27))\r\n    print(is_Even(28))\r\n    print(is_Even(29))\r\n    print(is_Even(30))\r\n    print(is_Even(31))\r\n    print(is_Even(32))\r\n    print(is_Even(33))\r\n    print(is_Even(34))\r\n    print(is_Even(35))\r\n    print(is_Even(36))\r\n    print(is_Even(37))\r\n    print(is_Even(38))\r\n    print(is_Even(39))\r\n    print(is_Even(41))\r\n    print(is_Even(42))\r\n    print(is_Even(43))\r\n    print(is_Even(44))\r\n    print(is_Even(45))\r\n    print(is_Even(46))\r\n    print(is_Even(47))\r\n    print(is_Even(48))\r\n    print(is_Even(49))\r\n    print(is_Even(51))\r\n    print(is_Even(52))\r\n    print(is_Even(53))\r\n    print(is_Even(54))\r\n    print(is","votes":null},{"text":"\r\n    if n & 1 == 0 :\r\n        return \"The number is Even\"\r\n    else :\r\n        return \"The number is Odd\"\r\n\r\nif __name__ == \"__main__\" :\r\n    print(is_Even(13))\r\n    print(is_Even(14))\r\n    print(is_Even(15))\r\n    print(is_Even(16))\r\n    print(is_Even(17))\r\n    print(is_Even(18))\r\n    print(is_Even(19))\r\n    print(is_Even(20))\r\n    print(is_Even(21))\r\n    print(is_Even(22))\r\n    print(is_Even(23))\r\n    print(is_Even(24))\r\n    print(is_Even(25))\r\n    print(is_Even(26))\r\n    print(is_Even(27))\r\n    print(is_Even(28))\r\n    print(is_Even(29))\r\n    print(is_Even(30))\r\n    print(is_Even(31))\r\n    print(is_Even(32))\r\n    print(is_Even(33))\r\n    print(is_Even(34))\r\n    print(is_Even(35))\r\n    print(is_Even(36))\r\n    print(is_Even(37))\r\n    print(is_Even(38))\r\n    print(is_Even(39))\r\n    print(is_Even(40))\r\n    print(is_Even(41))\r\n    print(is_Even(42))\r\n    print(is_Even(43))\r\n    print(is_Even(44))\r\n    print(is_Even(45))\r\n    print(is_Even(46))\r\n    print(is_Even(47))\r\n    print(is_Even(48))\r\n    print(is_Even(49))\r\n    print(is_Even(50))\r\n    print(is_Even(51))\r\n    print(is_Even(52))\r\n    print(is_Even(53))\r\n    print(is_Even(54))\r\n    print(is_Even(55))\r\n    print(is_Even(56))\r\n  ","votes":null},{"text":"\r\n    if n%2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(is_Even(2))\r\nprint(is_Even(3))\r\nprint(is_Even(5))\r\nprint(is_Even(12))\r\nprint(is_Even(13))\r\nprint(is_Even(18))\r\nprint(is_Even(546))\r\nprint(is_Even(547))\r\nprint(is_Even(548))\r\nprint(is_Even(549))\r\nprint(is_Even(550))\r\nprint(is_Even(600))\r\nprint(is_Even(601))\r\nprint(is_Even(602))\r\nprint(is_Even(603))\r\nprint(is_Even(604))\r\nprint(is_Even(605))\r\nprint(is_Even(606))\r\nprint(is_Even(607))\r\nprint(is_Even(608))\r\nprint(is_Even(609))\r\nprint(is_Even(610))\r\nprint(is_Even(611))\r\nprint(is_Even(612))\r\nprint(is_Even(613))\r\nprint(is_Even(614))\r\nprint(is_Even(615))\r\nprint(is_Even(616))\r\nprint(is_Even(617))\r\nprint(is_Even(618))\r\nprint(is_Even(619))\r\nprint(is_Even(620))\r\nprint(is_Even(621))\r\nprint(is_Even(622))\r\nprint(is_Even(623))\r\nprint(is_Even(624))\r\nprint(is_Even(625))\r\nprint(is_Even(626))\r\nprint(is_Even(627))\r\nprint(is","votes":null},{"text":"\r\n    n = n ^ (n >> 1)\r\n    return bool(n & 1)\r\n\r\n# Driver Code\r\nprint(is_Even(12))\r\nprint(is_Even(13))\r\nprint(is_Even(20))\r\n```\r\n\r\n**Output:**\r\n```\r\n0\r\n1\r\n0\r\n```\r\n**Explanation:**\r\nThe value of n after applying bitwise operator is 0110110000. The last two bits are 00 and thus it is even.\r\n\r\n## Bit Manipulation\r\n\r\nBitwise operators are used to manipulate bits in binary numbers. Python has a built-in data type called `int` and it is used to store numerical values.\r\n\r\nThere are two types of bitwise operators in Python:\r\n\r\n- Arithmetic Bitwise Operators\r\n- Bitwise Shift Operators\r\n\r\n### Arithmetic Bitwise Operators\r\n\r\nArithmetic bitwise operators are used to perform certain arithmetic operations on bits of a binary number. These operators are generally used to perform mathematical calculations on binary numbers.\r\n\r\n|Operator | Description |\r\n|---------|-------------|\r\n|`+`      | Addition     |\r\n|`-`      | Subtraction  |\r\n|`*`      | Multiplication|\r\n|`\/`      | Division     |\r\n|`%`      | Modulus      |\r\n\r\n### Bitwise Shift Operators\r\n\r\nBitwise shift operators are used to shift bits in a binary number to the left or right. These operators are generally used to perform operations on binary numbers.\r\n\r\n|Operator | Description |\r\n|---------|-------------|\r\n|`<<`     | Left Shift   |\r\n|`>>`     | Right Shift  |\r\n\r\n### Bitwise Operators on Strings\r\n\r\nBitwise operators can also be used on strings. In the following example, we are using bitwise operators on strings.\r\n\r\n**Example**\r\n\r\n```python\r\n# Example 1\r\n\r\n# Python program to demonstrate bitwise operators\r\n# on strings\r\n\r\n# Assigning string A and B\r\nA = \"10101010\"\r\nB = \"10101010\"\r\n\r\n# Bitwise OR of strings\r\nprint(A ","votes":null},{"text":"\r\n    # return n & 0b0001 == 0\r\n    return bool(n & 0b0001)\r\n\r","votes":null},{"text":"\r\n\r\n    if n & 1 == 0 :\r\n        return \"Even\"\r\n    else :\r\n        return \"Odd\"\r\n\r\nif __name__ == '__main__' :\r\n    print(is_Even(2))\r\n    print(is_Even(3))\r\n    print(is_Even(7))\r\n    print(is_Even(8))\r\n    print(is_Even(9))\r\n    print(is_Even(10))\r\n    print(is_Even(11))\r\n    print(is_Even(15))\r\n    print(is_Even(16))\r\n    print(is_Even(17))\r\n    print(is_Even(18))\r\n","votes":null},{"text":"\r\n    if n%2 == 0:\r\n        print(n, 'is Even')\r\n    else:\r\n        print(n, 'is Odd')\r\n\r","votes":null},{"text":"\r\n    return n % 2 == 0\r\nprint(is_Even(10))\r\n```\r\nIt will print `False`.\r\n\r\n## 2. Finding the Factorial of a Number\r\n```python\r","votes":null},{"text":"\r\n    if (n & 1) == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n# Driver code\r\nif __name__ == '__main__' :\r\n    print(is_Even(4))\r\n    print(is_Even(5))\r\n    print(is_Even(6))\r\n    print(is_Even(7))\r\n    print(is_Even(8))\r\n    print(is_Even(9))\r\n    print(is_Even(10))\r\n    print(is_Even(11))\r\n    print(is_Even(12))\r\n    print(is_Even(13))\r\n    print(is_Even(14))\r\n    print(is_Even(15))\r\n    print(is_Even(16))\r\n    print(is_Even(17))\r\n    print(is_Even(18))\r\n    print(is_Even(19))\r\n    print(is_Even(20))\r\n    print(is_Even(1))\r\n    print(is_Even(100))\r\n    print(is_Even(10000))\r\n    print(is_Even(10000000))\r\n    print(is_Even(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    if n & 1 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Input Numbers\r\nn = int(input(\"Enter a number: \"))\r\n\r\n# Calling Functions\r\nprint(is_Even(n))","votes":null},{"text":"\r\n    return n%2==0\r\n\r\nprint(is_Even(7))\r\nprint(is_Even(11))\r\nprint(is_Even(1001))\r\nprint(is_Even(3))\r\nprint(is_Even(4))\r\nprint(is_Even(5))\r\nprint(is_Even(6))\r\nprint(is_Even(8))\r\nprint(is_Even(9))\r\nprint(is_Even(10))\r\nprint(is_Even(12))\r\nprint(is_Even(13))\r\nprint(is_Even(14))\r\nprint(is_Even(16))\r\nprint(is_Even(17))\r\nprint(is_Even(18))\r\nprint(is_Even(19))\r\nprint(is_Even(20))\r\nprint(is_Even(21))\r\nprint(is_Even(22))\r\nprint(is_Even(23))\r\nprint(is_Even(24))\r\nprint(is_Even(25))\r\nprint(is_Even(26))\r\nprint(is_Even(27))\r\nprint(is_Even(28))\r\nprint(is_Even(29))\r\nprint(is_Even(30))\r\nprint(is_Even(31))\r\nprint(is_Even(32))\r\nprint(is_Even(33))\r\nprint(is_Even(34))\r\nprint(is_Even(35))\r\nprint(is_Even(36))\r\nprint(is_Even(37))\r\nprint(is_Even(38))\r\nprint(is_Even(39))\r\nprint(is_Even(40))\r\nprint(is_Even(41))\r\nprint(is_Even(42))\r\nprint(is_Even(43))\r\nprint(is_Even(44))\r\nprint(is_Even(45))\r\nprint(is_Even","votes":null},{"text":"\r\n    if n % 2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n# Driver code\r\nn = int(input())\r\nprint(is_Even(n))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n","votes":null}],"time":{"count":51.0,"avg":98065.3724705882,"std":35830.8579246158,"cov":0.3653772685}}
