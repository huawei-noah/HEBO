{"id":514,"question":"def sum_elements(test_tup):\r\n    \"\"\"Write a function to find the summation of tuple elements in the given tuple list.\"\"\"","answers":[{"text":"\r\n    return sum(test_tup)\r\n\r\n\r","votes":61965.584},{"text":"\r\n    sum = 0\r\n    for e in test_tup:\r\n        sum += e\r\n    return sum\r\n\r\n\r","votes":79076.3},{"text":"\r\n    total = 0\r\n    for i in test_tup:\r\n        total = total + i\r\n    return total\r\n\r\n\r","votes":84005.904},{"text":"\r\n    sum = 0\r\n    for element in test_tup:\r\n        sum += element\r\n    return sum\r\n\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\n\r","votes":86845.912},{"text":"\r\n    total = 0\r\n    for x in test_tup:\r\n        total += x\r\n    return total\r\n\r\n\r","votes":88093.28},{"text":"\r\n    total = 0\r\n    for i in test_tup:\r\n        total += i\r\n    return total\r\n\r\n\r","votes":89288.224},{"text":"\r\n    return sum(test_tup)\r\n\r\n\r\n# TODO: Write a function to find the summation of tuple elements in the given tuple list.\r\n#\r\n# Hint: Use the sum() function to get the summation of tuple elements.\r\n#\r\n# Example:\r\n#\r\n# sum_elements(test_tup)\r\n#\r\n# Output:\r\n# 115\r\n#\r\n\r\n# TODO: Write a function to find the summation of tuple elements in the given tuple list.\r\n#\r\n# Hint: Use the sum() function to get the summation of tuple elements.\r\n#\r\n# Example:\r\n#\r\n# sum_elements(test_tup)\r\n#\r\n# Output:\r\n# 115\r\n#\r\n\r\n# TODO: Write a function to find the summation of tuple elements in the given tuple list.\r\n#\r\n# Hint: Use the sum() function to get the summation of tuple elements.\r\n#\r\n# Example:\r\n#\r\n# sum_elements(test_tup)\r\n#\r\n# Output:\r\n# 115\r\n#\r\n\r\n# TODO: Write a function to find the summation of tuple elements in the given tuple list.\r\n#\r\n# Hint: Use the sum() function to get the summation of tuple elements.\r\n#\r\n# Example:\r\n#\r\n# sum_elements(test_tup)\r\n#\r\n# Output:\r\n# 115\r\n#\r\n\r\n# TODO: Write a function to find the summation of tuple elements in the given tuple list.\r\n#\r\n# Hint: Use the sum() function to get the summation of tuple elements.\r\n#\r\n# Example:\r\n#\r\n# sum_elements(test_tup)\r\n#\r\n# Output:\r\n# 115\r\n#\r\n\r\n# TODO: Write a function to find the summation of tuple elements in the given tuple list.\r\n#\r\n# Hint: Use the sum() function to get the summatio","votes":91690.58},{"text":"\r\n    # code here\r\n    sum=0\r\n    for i in test_tup:\r\n        sum=sum+i\r\n    return sum\r\n\r\n\r\n#another way\r","votes":93595.552},{"text":"\r\n\r\n    return sum([x for x in test_tup])\r\n\r\n\r","votes":93844.476},{"text":"\r\n    sum_ = 0\r\n    for x in test_tup:\r\n        sum_ = sum_ + x\r\n    return sum_\r\n\r\n\r","votes":94643.384},{"text":"\r\n    # initialize a sum variable to 0\r\n    sum = 0\r\n    # iterate over all the elements in the tuple\r\n    for i in test_tup:\r\n        # add all the elements in the tuple to sum\r\n        sum = sum + i\r\n    # return the sum\r\n    return sum\r\n\r\n\r","votes":95379.76},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r","votes":97074.768},{"text":"\r\n    # Your code goes here\r\n    sum_of_elements = 0\r\n    for element in test_tup:\r\n        sum_of_elements += element\r\n    return sum_of_elements\r\n\r\n\r","votes":97599.052},{"text":"\r\n\r\n    sum_list = 0\r\n\r\n    for i in test_tup:\r\n        sum_list += i\r\n    return sum_list\r\n\r\n\r\nprint(sum_elements((1, 2, 3)))\r\n\r\n# Exercise: Write a function to find the difference of tuple elements in the given tuple list.\r\n\r\n\r","votes":98972.164},{"text":"\r\n    # Write your code here\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r","votes":101100.252},{"text":"\r\n    sum = 0\r\n    for t in test_tup:\r\n        sum = sum + t\r\n    return sum\r\n\r\n\r","votes":101794.672},{"text":"\r\n    sum_ = 0\r\n    for element in test_tup:\r\n        sum_ += element\r\n    return sum_\r\n\r\n#","votes":102670.568},{"text":"\r\n    # Solution:\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum = sum + i\r\n    return sum\r\n\r\n\r\n# Tests\r\nprint(sum_elements((1, 2, 3)))\r\nprint(sum_elements((2, 3, 4, 5)))\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\n\r\n\r","votes":103733.16},{"text":"\r\n    a = 0\r\n    for i in test_tup:\r\n        a += i\r\n    return a\r\n\r\n\r","votes":103885.42},{"text":"\r\n    total = 0\r\n    for num in test_tup:\r\n        total += num\r\n    return total\r\n\r\n\r","votes":104049.288},{"text":"\r\n    # Code here\r\n    return sum(test_tup)\r\n\r\n\r","votes":110766.248},{"text":"\r\n    total = 0\r\n    for element in test_tup:\r\n        total += element\r\n    return total\r\n    \r\nprint(\"Sum of tuple elements is\", sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\r\n\r\n\r\n\r","votes":110850.284},{"text":"\r\n\r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum += test_tup[i]\r\n    return sum\r\n\r\n\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\n\r\n\r\n# Exercise: Finding the average\r\n\r","votes":111490.944},{"text":"\r\n    sum_list = 0\r\n    for i in test_tup:\r\n        sum_list += i\r\n    return sum_list\r\n\r\n\r","votes":111598.74},{"text":"\r\n    return sum(test_tup)\r\n    \r\n\r","votes":113884.192},{"text":"\r\n    # Write your code here\r\n    total = 0\r\n    for i in test_tup:\r\n        total += i\r\n    return total\r\n\r\n\r\n# Tests\r\nprint(sum_elements((1, 2, 3)))\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\r\n\r\n\r","votes":120151.948},{"text":"\r\n    # Write your code here\r\n    total = 0\r\n    for i in test_tup:\r\n        total += i\r\n    return total\r\n\r\n\r","votes":120506.148},{"text":"\r\n    result = 0\r\n    for i in range(len(test_tup)):\r\n        result = result + test_tup[i]\r\n    return result\r\n\r\n\r","votes":120973.528},{"text":"\r\n    sum = 0\r\n    for i in range(0, len(test_tup)):\r\n        sum = sum + test_tup[i]\r\n    return sum\r\n\r\n\r","votes":122403.452},{"text":"\r\n    total = 0\r\n    for num in test_tup:\r\n        total += num\r\n    return total\r\n\r\nif __name__ == '__main__':\r\n    tup1 = (1,2,3,4,5)\r\n    tup2 = ('a','b','c','d','e')\r\n    tup3 = (1, ('a', 2), 3)\r\n\r\n    print(sum_elements(tup1))\r\n    print(sum_elements(tup2))\r\n    print(sum_elements(tup3))\r\n\r\n\"\"\"\r\nOutput:\r\n15\r\nabcde\r\n16\r\n\"\"\"\r\n\r\n# Exercise 2\r","votes":123007.012},{"text":"\r\n    sum_of_elements = 0\r\n    for num in test_tup:\r\n        sum_of_elements += num\r\n    return sum_of_elements\r\n\r\n\r","votes":123521.32},{"text":"\r\n    try:\r\n        return sum(test_tup)\r\n    except TypeError:\r\n        return TypeError\r\n\r\n\r","votes":123848.128},{"text":"\r\n    sum = 0\r\n    for element in test_tup:\r\n        sum += element\r\n    return sum\r\n\r\nprint(sum_elements((1,2,3,4,5)))\r\n\r\n\r","votes":126104.592},{"text":"\r\n\r\n    total = 0\r\n    for i in test_tup:\r\n        total += i\r\n    return total\r\n\r\n\r","votes":128920.388},{"text":"\r\n    # code\r\n    sum_elements = 0\r\n    for i in test_tup:\r\n        sum_elements += i\r\n    return sum_elements\r\n\r\n\r\ntest_tup = ((1, 1, 1), (2, 2, 2), (3, 3, 3))\r\n","votes":133578.636},{"text":"\r\n    \r\n    sum_list = 0\r\n    \r\n    for i in test_tup:\r\n        sum_list += i\r\n    \r\n    return sum_list\r\n\r\n\r","votes":134346.288},{"text":"\r\n    result = 0\r\n    for item in test_tup:\r\n        result += item\r\n    return result\r\n\r\n\r","votes":134487.104},{"text":"\r\n    # list_sum = 0\r\n    # for i in test_tup:\r\n    #     list_sum = list_sum + i\r\n    # return list_sum\r\n    return sum(test_tup)\r\n\r\n\r","votes":139024.604},{"text":"\r\n    sum_ = 0\r\n    for i in test_tup:\r\n        sum_ += i\r\n    return sum_\r\n\r\n\r","votes":140748.752},{"text":"\r\n    # Write your code here.\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r\nprint(sum_elements((1, 2, 3)))\r\nprint(sum_elements((4, 5)))\r\nprint(sum_elements((6, 7, 8, 9, 10)))\r\n\r\n\r","votes":140791.748},{"text":"\r\n    # test_tup = (1, 2, 3, 4, 5)\r\n    return sum(test_tup)\r\n\r\n\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\n\r\n\r","votes":144849.612},{"text":"\r\n    # Start coding here\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\nprint(sum_elements(test_tup))\r\n\r\nprint(\"-\"*50)\r\n\r","votes":148300.876},{"text":"\r\n    for i in range(len(test_tup)):\r\n        if i == 0:\r\n            sum = test_tup[i]\r\n        else:\r\n            sum = sum + test_tup[i]\r\n    return sum\r\n    \r","votes":148928.536},{"text":"\r\n    return sum(test_tup)\r\n\r\n\r\n# Tests\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\n\r\n\r","votes":152992.016},{"text":"\r\n    # your code goes here\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r","votes":153229.568},{"text":"\r\n\r\n    sum = 0\r\n\r\n    for element in test_tup:\r\n        sum += element\r\n\r\n    return sum\r\n\r\n\r\nprint(sum_elements((100, 200, 300)))\r\nprint(sum_elements((100, 200, 300, 400, 500)))\r\nprint(sum_elements((100, 200, 300, 400, 500, 600, 700)))\r\n\r","votes":158028.052},{"text":"\r\n    test_list = []\r\n    for e in test_tup:\r\n        if isinstance(e, tuple):\r\n            for e1 in e:\r\n                test_list.append(e1)\r\n        else:\r\n            test_list.append(e)\r\n    total = 0\r\n    for e in test_list:\r\n        total += e\r\n    return total\r\n    \r\n\r\n# Tests\r\n\r","votes":159012.656},{"text":"\r\n\r\n    total = 0\r\n    for item in test_tup:\r\n        total += item\r\n    return total\r\n\r\n\r\ntest_tuple1 = (1, 2, 3, 4, 5)\r\nprint(sum_elements(test_tuple1))\r\n\r\ntest_tuple2 = (10, 20, 30, 40, 50)\r\nprint(sum_elements(test_tuple2))\r\n\r\ntest_tuple3 = (100, 200, 300, 400, 500)\r\nprint(sum_elements(test_tuple3))\r\n\r\n# test_tuple4 = (1000, 2000, 3000, 4000, 5000)\r\n# print(sum_elements(test_tuple4))\r\n\r\n# test_tuple5 = (10000, 20000, 30000, 40000, 50000)\r\n# print(sum_elements(test_tuple5))\r\n\r\n# test_tuple6 = (100000, 200000, 300000, 400000, 500000)\r\n# print(sum_elements(test_tuple6))\r\n\r\n\r","votes":161492.372},{"text":"\r\n    # your code goes here\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r\nprint(sum_elements((1, 2, 3, 4)))\r\nprint(sum_elements((5, 6, 7, 8, 9)))\r\nprint(sum_elements((1, 2, 3, 4, 5, 6, 7)))\r\nprint(sum_elements((8, 9, 10, 11, 12, 13, 14)))\r\n\r\n\r","votes":174464.904},{"text":"\r\n    sum = 0\r\n    for element in test_tup:\r\n        sum += element\r\n    return sum\r\n\r\n\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\n\r\n\r","votes":174967.64},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(len(test_tup)):\r\n        sum += test_tup[i]\r\n    return sum\r\n\r\n\r","votes":176738.636},{"text":"\r\n    sum_of_elements = 0\r\n    for element in test_tup:\r\n        sum_of_elements += element\r\n    return sum_of_elements\r\n\r\n\r","votes":178279.932},{"text":"\r\n    \r\n    # empty tuple\r\n    if len(test_tup) == 0:\r\n        return 0\r\n    # first element\r\n    else:\r\n        return sum_elements(test_tup[1:]) + test_tup[0]\r\n\r\n\r\ntest_tup = (1, 2, 3, 4)\r\nprint(sum_elements(test_tup))\r\n\r\n\r","votes":193369.064},{"text":"\r\n    return sum(test_tup)\r\n\r\n\r\ntest_tup = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\r\nprint(sum_elements(test_tup))\r\n\r\n#","votes":null},{"text":"\r\n    # sum_list = []\r\n    sum_list = 0\r\n    for tup in test_tup:\r\n        sum_list += sum(tup)\r\n    return sum_list\r\n\r\n\r\nif __name__ == '__main__':\r\n","votes":null},{"text":"\r\n\r\n    tup_list=test_tup\r\n    total=0\r\n    for i in range(len(tup_list)):\r\n        total=total+tup_list[i]\r\n    print(\"The summation of the elements in the list is:\",total)\r\n    \r\n\r","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\n\r\ntest_tup = ((1, 2), (3, 4))\r\nprint(test_tup)\r\nprint(sum_elements(test_tup))\r\n\r\n\r","votes":null},{"text":"\r\n    # print(sum(t[0] for t in test_tup))\r\n    return sum(t[0] for t in test_tup)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    for i in test_tup:\r\n        temp = 0\r\n        for j in i:\r\n            temp += j\r\n        print(temp)\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\n#test case 1\r\ntest_tuple1 = ((1, 1), (2, 3), (4, 5), (6, 7), (8, 9))\r\nprint(\"Test 1:\", sum_elements(test_tuple1))\r\n\r\n#test case 2\r\ntest_tuple2 = ((1, 2), (3, 4), (5, 6), (7, 8), (9, 10))\r\nprint(\"Test 2:\", sum_elements(test_tuple2))\r\n\r\n#test case 3\r\ntest_tuple3 = ((1, 1, 1), (0, 2, 3), (4, 5, 6), (6, 7, 8), (8, 9, 10))\r\nprint(\"Test 3:\", sum_elements(test_tuple3))\r\n\r\n#test case 4\r\ntest_tuple4 = ((1, 1, 1, 1), (0, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))\r\nprint(\"Test 4:\", sum_elements(test_tuple4))\r\n\r\n#test case 5\r\ntest_tuple5 = ((1, 1, 1, 1, 1), (0, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20))\r\nprint(\"Test 5:\", sum_elements(test_tuple5))\r\n\r\n#test case 6\r\ntest_tuple6 = ((1, 1, 1, 1, 1, 1), (0, ","votes":null},{"text":"\r\n    lst = []\r\n    for i in test_tup:\r\n        lst.append(sum(i))\r\n    return lst\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    \r\n    for element in test_tup:\r\n        sum += element\r\n        \r\n    return sum   \r\n    \r\n    \r\nif __name__ == '__main__':\r\n   \r\n    print(\"Sum of tuple elements:\", sum_elements((1,2,3,4,5)))\r\n    print(\"Sum of tuple elements:\", sum_elements((1,2,3,4,5,6,7,8,9,10)))\r\n    print(\"Sum of tuple elements:\", sum_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\r\n    print(\"Sum of tuple elements:\", sum_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)))\r\n    print(\"Sum of tuple elements:\", sum_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)))\r\n    print(\"Sum of tuple elements:\", sum_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40)))\r\n    print(\"Sum of tuple elements:\", sum_elements((1,2","votes":null},{"text":"\r\n    # create a list\r\n    tuple_list = []\r\n    # append elements in the tuple\r\n    for tup in test_tup:\r\n        tuple_list.append(tup)\r\n    # create an empty list\r\n    new_list = []\r\n    # append elements in the list\r\n    for element in tuple_list:\r\n        new_list.append(element[0])\r\n    # create a variable\r\n    total = 0\r\n    # add elements in the list\r\n    for i in new_list:\r\n        total += i\r\n    # print the summation of the elements in the list\r\n    print(\"Sum of the elements in the list: \", total)\r\n    return total\r\n\r\n\r\ntest_tup = ((1, 2, 3), (2, 4, 6), (3, 6, 9))\r\nsum_elements(test_tup)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    sum = 0\r\n    for i in test_tup:\r\n        for j in i:\r\n            sum += j\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    total = 0\r\n    for number in test_tup:\r\n        total += number\r\n    return total\r\n\r\n\r\ntest_tup = ((1, 2, 3), (4, 5), (6, 7, 8, 9, 10))\r\nprint(\"Sum of elements in the tuple:\", sum_elements(test_tup))\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\n\r\ntest_tuple = ((1, 2, 3), (5, 8, 13), (21, 34, 65))\r\nprint(sum_elements(test_tuple))\r\n\r\n","votes":null},{"text":"\r\n    summation = 0\r\n    for i in test_tup:\r\n        summation += i\r\n    return summation\r\n\r\n\r\ntest_tup = ((5, 6, 7), (6, 7, 8), (7, 8, 9), (8, 9, 10))\r\nprint(sum_elements(test_tup))\r\n\r\n\r","votes":null},{"text":"\r\n    # tuple_list = [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]\r\n    # sum_elements(tuple_list) should return 6\r\n\r\n    # tuple_list = (('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'))\r\n    # sum_elements(tuple_list) should return 18\r\n    # tuple_list = (('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'))\r\n    # sum_elements(tuple_list) should return 36\r\n    # tuple_list = (('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'), ('m', 'n', 'o'))\r\n    # sum_elements(tuple_list) should return 42\r\n\r\n    # tuple_list = (('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'), ('m', 'n', 'o'), ('p', 'q', 'r'))\r\n    # sum_elements(tuple_list) should return 50\r\n\r\n    # tuple_list = (('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'), ('m', 'n', 'o'), ('p', 'q', 'r'), ('s', 't', 'u'))\r\n    # sum_elements(tuple_list) should return 54\r\n\r\n    # tuple_list = (('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'), ('m', 'n', 'o'), ('p', 'q', 'r')","votes":null},{"text":"\r\n    sum_list = 0\r\n    for i in test_tup:\r\n        if isinstance(i, tuple):\r\n            sum_list += sum_elements(i)\r\n        else:\r\n            sum_list += i\r\n    return sum_list\r\n\r\n\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\nprint(sum_elements((1, (2, 3, 4), 5)))\r\nprint(sum_elements((1, (2, (3, 4), 5), 6)))\r\nprint(sum_elements((1, (2, (3, (4, 5), 6), 7), 8)))\r\nprint(sum_elements((1, (2, (3, (4, (5, 6), 7), 8), 9), 10)))\r\nprint(sum_elements((1, (2, (3, (4, (5, 6), 7), 8), 9), 10)))\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\nprint(sum_elements((1, (2, 3, 4), 5)))\r\nprint(sum_elements((1, (2, (3, 4), 5), 6)))\r\nprint(sum_elements((1, (2, (3, (4, 5), 6), 7), 8)))\r\nprint(sum_elements((1, (2, (3, (4, (5, 6), 7), 8), 9), 10)))\r\nprint(sum_elements((1, (2, (3, (4, (5, 6), 7), 8), 9), 10)))\r\nprint(sum_elements((1, 2, 3, 4, 5)))\r\nprint(sum_elements((1, (2, 3, 4), 5)))\r\nprint(sum_elements((1, (2, (3","votes":null},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n\r\ntest_tup = ((3, 4, 5), (1, 2, 3), (4, 5, 6))\r\n\r\nprint(sum_elements(test_tup))\r\n\r\n\r","votes":null},{"text":"\r\n    sum_list = 0\r\n    for i in test_tup:\r\n        sum_list += i\r\n    return sum_list\r\n\r\n\r\nprint(sum_elements((1,2,3,4,5,6)))\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10)))\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10,11,12,13)))\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)))\r\nprint(sum_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,","votes":null},{"text":"\r\n    \r\n    sum_list = []\r\n    for i in range(len(test_tup)):\r\n        sum_list.append(sum(test_tup[i]))\r\n    return sum_list\r\n\r\n\r\ntest_tup = ((1, 2, 3, 4, 5), (2, 4, 6), (8, 10), (12, 14, 16, 18, 20))\r\nprint(sum_elements(test_tup))\r\n\r\n# Output\r\n# [15, 12, 28, 60]\r\n\r\n# Explanation\r\n# The function should return a list of the summations of each tuple element in the given tuple list.\r\n# The output will be [15, 12, 28, 60] because the output of the function is the summation of each tuple element in the given tuple list.\r\n# The first tuple in the tuple list is (1, 2, 3, 4, 5) and the summation is 15.\r\n# The second tuple in the tuple list is (2, 4, 6) and the summation is 12.\r\n# The third tuple in the tuple list is (8, 10) and the summation is 28.\r\n# The fourth tuple in the tuple list is (12, 14, 16, 18, 20) and the summation is 60.\r\n\r\n# Constraints\r\n# The length of the given tuple list is between 1 and 100.\r\n# Each tuple in the tuple list has between 1 and 100 elements, and the summation of all the tuple elements is between 0 and 1000.\r\n\r\n# Sample Input\r\n# ((1, 2, 3, 4, 5), (2, 4, 6), (8, 10), (12, 14, 16, 18, 20))\r","votes":null},{"text":"\r\n    # function to return sum of tuple elements\r\n   ","votes":null},{"text":"\r\n    \"\"\"Return a tuple with the summation of each tuple element.\"\"\"\r\n    output_tuple = ()\r\n    for i in range(len(test_tup)):\r\n        output_tuple += (sum(tuple(test_tup[i])),)\r\n    return output_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(test_tup)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(sum_elements((1, 2, 3, 4, 5)))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert sum_elements((1, 2, 3, 4, 5)) == 15\r\n    assert sum_elements((2, 4, 6, 8, 10)) == 30\r\n    assert sum_elements((-1, -2, -3, -4, -5)) == -15\r\n    assert sum_elements((-2, -4, -6, -8, -10)) == -30\r\n    assert sum_elements((0, 0, 0, 0, 0)) == 0\r\n    assert sum_elements((1, 1, 1, 1, 1)) == 5\r\n    assert sum_elements((-1, -1, -1, -1, -1)) == -5\r\n    assert sum_elements((0, 1, 2, 3, 4)) == 10\r\n    assert sum_elements((0, 1, 2, 3, 4)) == 10\r\n    assert sum_elements((1, 2, 3, 4, 5, 6)) == 21\r\n    assert sum_elements((1, 2, 3, 4, 5, 6, 7)) == 28\r\n    assert sum_elements((1, 2, 3, 4, 5, 6, 7, 8)) == 36\r\n    assert sum_elements((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 45\r\n    assert sum_elements((1, 2, 3, 4, 5, 6, ","votes":null},{"text":"\r\n    sum = 0\r\n    for element in test_tup:\r\n        sum += element\r","votes":null},{"text":"\r\n    # Code here\r\n    total=0\r\n    for item in test_tup:\r\n        total+=item\r\n    return total\r\n\r\ntest_tup = ((1, 2, 3), (4, 5, 6))\r\nprint(sum_elements(test_tup))\r\n\r","votes":null},{"text":"\r\n    \r\n    # create an empty list where the summation will be stored\r\n    result = []\r\n\r\n    # loop through the list of tuples and sum the elements\r\n    for tup in test_tup:\r\n        sum_value = 0\r\n        for i in tup:\r\n            sum_value += i\r\n        result.append(sum_value)\r\n    return result\r\n    \r\n\r\n\r\n# Test Case\r\ntest_tup_list = [(1, 2, 3), (4, 5, 6, 7), (8, 9, 10, 11, 12)]\r\nprint(sum_elements(test_tup_list))\r\n\r\n\r\n# Answer\r\n# [6, 28, 40]\r\n# Explanation\r\n# The first tuple has a sum of 6. \r\n# The second tuple has a sum of 28. \r\n# The third tuple has a sum of 40.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    summation = 0\r\n    for i in test_tup:\r\n        summation += i\r\n    return summation\r\n\r\n# test case\r\ntest_tup = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\r\nsum_elements(test_tup)\r\n\r\n# output\r\n# 45\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    tup_list = test_tup[0]\r\n    result = 0\r\n    for i in tup_list:\r\n        result += i\r\n\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # create empty list\r\n    result=[]\r\n    # loop through the tuple list and append the summation of elements in each tuple\r\n    for i in test_tup:\r\n        result.append(sum(i))\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\r\n\r\n    print(sum_elements(test_tup))\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r","votes":null},{"text":"\r\n    # Write your code here\r\n    sum_list = 0\r\n    for i in test_tup:\r\n        sum_list+=i\r\n    return sum_list\r\n\r\n\r\n# Driver code\r\ntest_tup = ((1, 2, 3), (4, 5), (6, 7, 8, 9))\r\nprint(sum_elements(test_tup))\r\n\r\n# Output: 30\r\n\r\n\r\n# Explanation:\r\n# The given tuple is ((1, 2, 3), (4, 5), (6, 7, 8, 9)).\r\n# The summation of the elements in this tuple is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9.\r\n# Hence, the output is 30.\r\n\r\n# Reference: https:\/\/www.geeksforgeeks.org\/find-sum-elements-given-tuple-list\/\r\n# Reference: https:\/\/www.hackerrank.com\/challenges\/sum-of-elements-in-a-list\/problem\r\n\r\n\r\n# Given a list of integers, L, and two integers K and N, find the Kth largest element in the list. \r\n# The list can contain duplicate elements.\r\n# Example:\r\n# L = [3, 1, 5, 4, 2]\r\n# K = 3\r\n# N = 2\r\n# The answer is 4.\r","votes":null},{"text":"\r\n    # 1\r\n    return sum(test_tup)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_elements((1, 2, 3, 4, 5)))\r\n    print(sum_elements((2, 3, 4, 5)))\r\n    print(sum_elements((1, 2, 3)))\r\n    print(sum_","votes":null},{"text":"\r\n    result = 0\r\n    for i in test_tup:\r\n        result += i\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup = ((1, 2, 3, 4), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6))\r\n    print(sum_elements(test_tup))\r\n\r\n# Output:\r\n# 21\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    print(sum(test_tup))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_tup = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\r\n    sum_elements(test_tup)\r\n    test_tup = ((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\"), (\"g\", \"h\", \"i\"))\r\n    sum_elements(test_tup)\r\n    test_tup = ((\"a\", \"b\"), (\"c\", \"d\"))\r\n    sum_elements(test_tup)\r\n\r\n\r\n# Output:\r\n# 12\r\n# 18\r\n# 12\r\n\r\n# Explanation:\r\n# In the first example, the summation of tuple elements are 1+2+3+4+5+6+7+8+9=12\r\n# In the second example, the summation of tuple elements are a+b+c+d+e+f+g+h+i=18\r\n# In the third example, the summation of tuple elements are a+b+c+d+e+f=12\r\n\r\n# Time Complexity : O(n) where n is the total elements in the tuple list.\r\n# Auxiliary Space : O(1)\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in test_tup:\r\n        sum += i\r\n    return sum\r\n\r\n# test\r\ntest_tup = ((1,2), (3,4), (5,6))\r\nprint(sum_elements(test_tup))\r\n\r\n# Given an integer N representing the number of rows in a square matrix, you need to print the sum of elements in the matrix.\r\n# Input Format:\r\n# A single line containing an integer N.\r\n# Constraints:\r\n# 1 <= N <= 100\r\n# Output Format:\r\n# A single line containing the sum of elements in the matrix.\r\n# Sample Input:\r\n# 2\r\n# Sample Output:\r\n# 10\r\n\r","votes":null}],"time":{"count":53.0,"avg":122357.8532075472,"std":29493.107001322,"cov":0.2410397553}}
{"id":515,"question":"def modular_sum(arr, n, m):\r\n    \"\"\"Write a function to check if there is a subset with sum divisible by m.\"\"\"","answers":[{"text":"\r\n    dp = [False] * (m + 1)\r\n    dp[0] = True\r\n    for i in range(n):\r\n        for j in range(m, 0, -1):\r\n            if j - arr[i] >= 0:\r\n                dp[j] = dp[j] or dp[j - arr[i]]\r\n    return dp[m]\r\n\r\n\r","votes":111528.964},{"text":"\r\n    \r\n    dp = [0] * (m + 1)\r\n    dp[0] = 1\r\n    \r\n    for i in arr:\r\n        for j in range(m, i - 1, -1):\r\n            dp[j] += dp[j - i]\r\n            \r\n    return dp[m]\r\n\r\n\r","votes":135438.732},{"text":"\r\n    dp = [[False] * (m + 1) for _ in range(n + 1)]\r\n    dp[0][0] = True\r\n    for i in range(n + 1):\r\n        for j in range(m + 1):\r\n            if i == 0:\r\n                continue\r\n            dp[i][j] = dp[i - 1][j]\r\n            if j >= arr[i - 1]:\r\n                dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]]\r\n    return dp[n][m]\r\n\r\n\r","votes":136376.58},{"text":"\r\n    n = len(arr)\r\n    dp = [[0 for x in range(m + 1)] for y in range(n + 1)]\r\n    for i in range(0, n + 1):\r\n        dp[i][0] = 1\r\n    for j in range(1, m + 1):\r\n        dp[0][j] = 0\r\n    for i in range(1, n + 1):\r\n        for j in range(1, m + 1):\r\n            if arr[i - 1] <= j:\r\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\r\n            else:\r\n                dp[i][j] = dp[i - 1][j]\r\n    return dp[n][m]\r\n\r\n\r","votes":160953.852},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    if len(arr) == 1:\r\n        if arr[0] % m == 0:\r\n            return 1\r\n        else:\r\n            return 0\r\n    if len(arr) == 2:\r\n        if (arr[0] + arr[1]) % m == 0:\r\n            return 1\r\n        else:\r\n            return 0\r\n    if len(arr) == 3:\r\n        if (arr[0] + arr[1] + arr[2]) % m == 0:\r\n            return 1\r\n        else:\r\n            return 0\r\n\r\n    # Check if there is a subset with sum divisible by m\r\n    if modular_sum(arr[:len(arr)\/\/2], n, m) == 1:\r\n        return 1\r\n\r\n    # Check if there is a subset with sum divisible by m\r\n    if modular_sum(arr[len(arr)\/\/2:], n, m) == 1:\r\n        return 1\r\n\r\n    # Check if there is a subset with sum divisible by m\r\n    if modular_sum(arr[:len(arr)\/\/2], n, m) == 1 and modular_sum(arr[len(arr)\/\/2:], n, m) == 1:\r\n        return 1\r\n    return 0\r\n\r\n\r","votes":161802.216},{"text":"\r\n    hash_table = [0 for _ in range(m)]\r\n    total = 0\r\n    for i in range(len(arr)):\r\n        total += arr[i]\r\n        if hash_table[total % m] != 0:\r\n            return True\r\n        hash_table[total % m] = i\r\n    if total % m == 0:\r\n        return True\r\n    return False\r\n\r\n\r","votes":172894.708},{"text":"\r\n    for i in range(len(arr)):\r\n        for j in range(i + 1, len(arr)):\r\n            if (arr[i] + arr[j]) % m == 0:\r\n                return True\r\n    return False\r\n\r\n\r","votes":209564.892},{"text":"\r\n    # dp[i][j] --> if arr[0...i] has a subset with sum divisible by m.\r\n    dp = [[False for _ in range(m + 1)] for _ in range(n + 1)]\r\n    dp[0][0] = True\r\n    # Base case.\r\n    for i in range(n):\r\n        for j in range(m + 1):\r\n            if j >= arr[i]:\r\n                dp[i + 1][j] = dp[i][j] or dp[i][j - arr[i]]\r\n            else:\r\n                dp[i + 1][j] = dp[i][j]\r\n    return dp[n][m]\r\n\r\n\r","votes":226977.072},{"text":"\r\n    ans = False\r\n    for i in range(n):\r\n        if (arr[i] % m) == 0:\r\n            ans = True\r\n            break\r\n    if not ans:\r\n        for i in range(n):\r\n            if (arr[i] % m) == (m - 1):\r\n                ans = True\r\n                break\r\n    return ans\r\n\r\n\r","votes":236188.008},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    elif n < 0:\r\n        return 1\r\n    elif n == 1:\r\n        return arr[n] % m\r\n    else:\r\n        return modular_sum(arr, n-1, m) + arr[n] % m\r\n\r\n\r\n# Tests\r\nassert modular_sum(10, 10, 2) == 0\r\nassert modular_sum([1, 2, 3, 4, 5], 5, 2) == 0\r\nassert modular_sum([1, 2, 3, 4, 5], 6, 2) == 1\r\nassert modular_sum([1, 2, 3, 4, 5], 5, 1) == 1\r\nassert modular_sum([1, 2, 3, 4, 5], 6, 1) == 1\r\nassert modular_sum([1, 2, 3, 4, 5], 7, 1) == 1\r\nassert modular_sum([1, 2, 3, 4, 5], 8, 1) == 1\r\nassert modular_sum([1, 2, 3, 4, 5], 9, 1) == 1\r\nassert modular_sum([1, 2, 3, 4, 5], 10, 1) == 1\r\nassert modular_sum([1, 2, 3, 4, 5], 11, 1) == 1\r\nassert modular_sum([1, 2, 3, 4, 5], 12, 1) == 1\r\nassert modular_sum([1, 2, 3, 4, 5], 13, 1) == 1\r\nassert modular_sum([1, 2, 3, 4, 5], ","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    if arr[n - 1] % m == 0:\r\n        return True\r\n    return modular_sum(arr, n - 1, m) or modular_sum(arr, n - 1, m)\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    s = 0\r\n    for i in range(n):\r\n        s = s + arr[i]\r\n    if s % m == 0:\r\n        return 1\r\n    else:\r\n        return 0\r\n\r\n\r\n# Driver code\r\n\r\narr = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4]\r\nn = len(arr)\r\nm = 3\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [1, 1, 3, 3, 7, 7, 9, 9]\r\nn = len(arr)\r\nm = 3\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [1, 1, 3, 3, 7, 7, 9, 9, 11, 11]\r\nn = len(arr)\r\nm = 3\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [1, 1, 3, 3, 7, 7, 9, 9, 11, 11, 13, 13, 17, 17, 17]\r\nn = len(arr)\r\nm = 3\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [1, 1, 3, 3, 7, 7, 9, 9, 11, 11, 13, 13, 17, 17, 17, 19, 19, 19, 19]\r\nn = len(arr)\r\nm = 3\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [1, 1, 3, 3, 7, 7, 9,","votes":null},{"text":"\r\n    N = len(arr)\r\n    dp = [[False]*(m+1) for _ in range(N+1)]\r\n    dp[0][0] = True\r\n    for i in range(1, N+1):\r\n        for j in range(m+1):\r\n            if j >= arr[i-1]:\r\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\r\n    return dp[N][m]\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [[False for _ in range(n + 1)] for _ in range(m + 1)]\r\n\r\n    dp[0][0] = True\r\n    for i in range(1, m + 1):\r\n        dp[i][0] = True\r\n\r\n    for i in range(1, m + 1):\r\n        for j in range(1, n + 1):\r\n            dp[i][j] = dp[i][j - 1]\r\n            if arr[j - 1] % i == 0:\r\n                dp[i][j] |= dp[i][j - 1]\r\n\r\n    return dp[m][n]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 4, 2, 5, 7, 3, 1]\r\n    n = len(arr)\r\n    m = 7\r\n    print(modular_sum(arr, n, m))\r\n","votes":null},{"text":"\r\n\r\n    \"\"\"\r\n    >>> modular_sum([1, 5, 4, 6, 2, 9], 3, 2)\r\n    True\r\n    >>> modular_sum([1, 5, 4, 6, 2, 9], 2, 2)\r\n    False\r\n    \"\"\"\r\n\r\n    sum_set = set()\r\n    for i in range(n + 1):\r\n        sum_set.add(i)\r\n\r\n    for i in range(n):\r","votes":null},{"text":"\r\n    # Initialize dp array\r\n    dp = [False] * (n + 1)\r\n    # dp[i] will be true if there is a subset with sum divisible by m that\r\n    # includes arr[i]\r\n\r\n    # Fill the dp array in bottom-up manner\r\n    for i in range(n):\r\n        # Calculate the sum of all subsets that include arr[i]\r\n        curr_sum = 0\r\n        for j in range(i):\r\n            curr_sum += arr[j]\r\n        if curr_sum % m == 0:\r\n            dp[i] = True\r\n\r\n        # If there is a subset with sum divisible by m that includes arr[i],\r\n        # there is a subset with sum divisible by m that includes arr[i+1]\r\n        # as well\r\n        if dp[i]:\r\n            dp[i+1] = True\r\n\r\n    # Return true if there is a subset with sum divisible by m\r\n    return dp[-1]\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if n == 0:\r\n        return 0\r\n    # Recursive case\r\n    if arr[n - 1] > m:\r\n        return modular_sum(arr, n - 1, m)\r\n    return (\r\n        modular_sum(arr, n - 1, m)\r\n        + modular_sum(arr, n - 1, m - arr[n - 1])\r\n    )\r\n\r\n\r\n# Test function\r\narr = [1, 4, 2, 5, 3, 7]\r\nm = 10\r\nn = len(arr)\r\nprint(modular_sum(arr, n, m))\r\n# 18\r\n\r\n\"\"\"\r\nTime complexity : O(N)\r\nSpace complexity : O(N)\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # if n is negative, return false\r\n    if n < 0:\r\n        return False\r\n    \r\n    # if n is zero, return true\r\n    if n == 0:\r\n        return True\r\n    \r\n    # if m is negative, return false\r\n    if m < 0:\r\n        return False\r\n    \r\n    # if m is zero, return false\r\n    if m == 0:\r\n        return False\r\n    \r\n    # if n < m, return false\r\n    if n < m:\r\n        return False\r\n    \r\n    # if m is 1, return true\r\n    if m == 1:\r\n        return True\r\n    \r\n    # if n is 1, return arr[0] % m == 0\r\n    if n == 1:\r\n        return arr[0] % m == 0\r\n    \r\n    # if n is greater than 1, return the sum modulo m of the sum of\r\n    # the first n - 1 elements and the last element\r\n    return (modular_sum(arr, n - 1, m) + arr[n - 1]) % m == 0\r\n\r\n\r\n# Tests\r\nprint(modular_sum([1, 2, 3, 1, 4, 5, 3], 7, 3)) # True\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 6, 3)) # False\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 7, 3)) # True\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 8, 3)) # True\r\nprint(modular_sum([1, 2, 3, 4, 5, 6], 9, 3)) # True\r\nprint(modular_sum([","votes":null},{"text":"\r\n    # base case\r\n    if n == 0:\r\n        return False\r\n    if n == 1:\r\n        return arr[0] % m == 0\r\n    # recursive case\r\n    if arr[n - 1] % m == 0:\r\n        return True\r\n    else:\r\n        return modular_sum(arr, n - 1, m)\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    if modular_sum(arr, n-1, m) or (n > 1 and arr[n-1] % m == 0):\r\n        return True\r\n    return False\r\n\r\n\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 2))  # True\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 1))  # False\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 3))  # True\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 5))  # False\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 6))  # False\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 7))  # False\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 8))  # False\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 9))  # False\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 10))  # False\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 11))  # False\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 12))  # False\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 13))  # False\r\nprint(modular_sum([1, 2, 3, 4, 5], ","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    if n == 1:\r\n        return arr[0] % m == 0\r\n\r\n    return modular_sum(arr, n - 1, m) or modular_sum(arr[1:], n - 1, m)\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return True\r\n    if n < 0:\r\n        return False\r\n    if arr[n] % m == 0:\r\n        return True\r\n    return modular_sum(arr, n-1, m)\r\n\r\n\r\narr = [20, 30, 40, 50, 60, 70, 80, 90, 100, 110]\r\nn = 10\r\nm = 10\r\n\r\nprint(modular_sum(arr, n, m))\r\n\r\n# Recursive Solution\r\n\r\n\r","votes":null},{"text":"\r\n    # Setup\r\n    dp = [0]*n\r\n\r\n    # Loop over each row\r\n    for i in range(n):\r\n\r\n        # Check if the last element of i'th row is divisible by m\r\n        if arr[i]%m == 0:\r\n            return True\r\n\r\n        # Loop over each column\r\n        for j in range(i+1, n):\r\n            dp[j] = dp[j] + arr[i]\r\n\r\n            # Check if sum of subarray is divisible by m\r\n            if dp[j]%m == 0:\r\n                return True\r\n\r\n    return False\r\n\r\n\r\n# Test case 1\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nn = len(arr)\r\nm = 4\r\nprint(modular_sum(arr, n, m))\r\n\r\n# Test case 2\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nm = 4\r\nprint(modular_sum(arr, n, m))\r\n\r\n# Test case 3\r\narr = [7, 10, 1, 3, 5, 2, 4]\r\nn = len(arr)\r\nm = 2\r\nprint(modular_sum(arr, n, m))\r\n\r\n# Test case 4\r\narr = [7, 10, 1, 3, 5, 2, 4, 13]\r\nn = len(arr)\r\nm = 2\r\nprint(modular_sum(arr, n, m))\r\n\r\n# Test case 5\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, ","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(len(arr)):\r\n        if (arr[i] + sum) % m == 0:\r\n            return True\r\n        sum += arr[i]\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    sub = 0\r\n    for i in range(n):\r\n        sub += arr[i]\r\n        while sub >= m:\r\n            sub -= arr[i]\r\n            if sub == 0:\r\n                return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    pass\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # check if the sum is divisible by m\r\n    if sum(arr) % m == 0:\r\n        return True\r\n    \r\n    dp = [False] * (n + 1)\r\n    dp[0] = True\r\n    \r\n    for i in range(1, n+1):\r\n        for j in range(m):\r\n            if i - j >= 0 and dp[i - j]:\r\n                dp[i] = True\r\n                break\r\n            \r\n    return dp[n]\r\n\r\n\r","votes":null},{"text":"\r\n    # find all the powers of m in the array\r\n    powers_of_m = [i for i in arr if i % m == 0]\r\n    # we know that sum of all powers of m is divisible by m\r\n    return n in powers_of_m\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if n == 0:\r\n        return True\r\n    if n < 0:\r\n        return False\r\n\r\n    if arr[n - 1] % m == 0:\r\n        return modular_sum(arr, n - 1, m)\r\n\r\n    return modular_sum(arr, n - 1, m) or modular_sum(arr, n - 1, m)\r\n\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 1))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 2))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 3))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 4))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 5))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 6))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 7))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 8))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 9))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 10))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 11))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 12))\r\nprint(modular_sum([1, 2, 3, 4, 5],","votes":null},{"text":"\r\n    if len(arr) == 0 or n == 0:\r\n        return False\r\n\r\n    if n % m == 0:\r\n        return True\r\n\r\n    if arr[0] % m != 0:\r\n        return modular_sum(arr[1:], n - arr[0], m)\r\n    else:\r\n        return modular_sum(arr[1:], n - arr[0], m) or modular_sum(arr[1:], n, m)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if n == 0:\r\n        return 0\r\n\r\n    remainder = arr[n-1] % m\r\n    if remainder == 0:\r\n        return arr[n-1] + modular_sum(arr, n-1, m)\r\n    return modular_sum(arr, n-1, m)\r\n\r\n\r","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    i = 0\r\n    j = n - 1\r\n    while i < n and j >= 0:\r\n        if arr[i] + arr[j] == m:\r\n            return True\r\n        elif arr[i] + arr[j] < m:\r\n            i += 1\r\n        else:\r\n            j -= 1\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 4, 7, 10, 13, 14, 15, 17, 18, 20, 23, 24, 26, 27, 29]\r\n    n = len(arr)\r\n    m = 3\r\n    print(modular_sum(arr, n, m))\r\n    arr = [1, 4, 7, 10, 13, 14, 15, 17, 18, 20, 23, 24, 26, 27, 29]\r\n    n = len(arr)\r\n    m = 4\r\n    print(modular_sum(arr, n, m))\r\n    arr = [1, 4, 7, 10, 13, 14, 15, 17, 18, 20, 23, 24, 26, 27, 29]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n    arr = [1, 4, 7, 10, 13, 14, 15, 17, 18, 20, 23, 24, 26, 27, 29]\r\n    n = len(arr)\r\n    m = 6\r\n    print(modula","votes":null},{"text":"\r\n    dp = [[False for _ in range(n)] for _ in range(m)]\r\n    \r\n    for i in range(m):\r\n        dp[i][0] = True\r\n    \r\n    for i in range(n):\r\n        dp[0][i] = True\r\n    \r\n    for i in range(1, m):\r\n        for j in range(1, n):\r\n            dp[i][j] = dp[i][j-1] or dp[i-arr[j-1]][j]\r\n    \r\n    return dp[m-1][n-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    # arr = [1, 2, 3, 7]\r\n    # n","votes":null},{"text":"\r\n    return sum(arr) % m == 0\r\n\r\n\r","votes":null},{"text":"\r\n    ans = 0\r\n    for i in range(n):\r\n        ans = (ans + arr[i])%m\r\n    return ans\r\n\r\n\r","votes":null},{"text":"\r\n    if n <= 0:\r\n        return False\r\n    if n == 1:\r\n        return arr[0] % m == 0\r\n    else:\r\n        return modular_sum(arr[1:], n - 1, m) or modular_sum(arr[1:], n, m)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return False\r\n\r\n    # We will use 0th index as a base case\r\n    if arr[0] % m == 0:\r\n        return True\r\n\r\n    # We will use dp array to store if we can get sum\r\n    # for i-th index by adding elements from jth index\r\n    dp = [False] * (n + 1)\r\n    dp[0] = True\r\n\r\n    # We will traverse from i=1 to i=n\r\n    for i in range(1, n + 1):\r\n        # We will traverse from j=0 to j=i-1\r\n        for j in range(i):\r\n            # If we can get sum for i, then we can get\r\n            # sum for i by adding element at index j\r\n            if arr[j] % m == 0:\r\n                dp[i] = True\r\n\r\n    return dp[-1]\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [0] * n\r\n    dp[0] = 1\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] % m == 0:\r\n                dp[i] = dp[i] or dp[j]\r\n\r\n    return dp[n - 1]\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nm = 3\r\n\r\nif modular_sum(arr, n, m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r\n\r\n\r","votes":null},{"text":"\r\n    s = set()\r\n    for i in range(1, n + 1):\r\n        s.add(i)\r\n    for i in range(1, n + 1):\r\n        s.add(-i)\r\n    for i in range(1, n + 1):\r\n        s.add(i * m)\r\n    for i in range(1, n + 1):\r\n        s.add(-i * m)\r\n    for i in range(1, n + 1):\r\n        s.add(i * (m ** 2))\r\n    for i in range(1, n + 1):\r\n        s.add(-i * (m ** 2))\r\n    for i in range(1, n + 1):\r\n        s.add(i * (m ** 3))\r\n    for i in range(1, n + 1):\r\n        s.add(-i * (m ** 3))\r\n    for i in range(1, n + 1):\r\n        s.add(i * (m ** 4))\r\n    for i in range(1, n + 1):\r\n        s.add(-i * (m ** 4))\r\n    for i in range(1, n + 1):\r\n        s.add(i * (m ** 5))\r\n    for i in range(1, n + 1):\r\n        s.add(-i * (m ** 5))\r\n    for i in range(1, n + 1):\r\n        s.add(i * (m ** 6))\r\n    for i in range(1, n + 1):\r\n        s.add(-i * (m ** 6))\r\n    for i in range(1, n + 1):\r\n        s.add(i * (m ** 7))\r\n    for i in range(1, n + 1):\r\n        s.add(-i * (m ** 7))\r\n    for i in range(1, n + 1)","votes":null},{"text":"\r\n    return (sum(arr) % m == 0)\r\n\r\n\r","votes":null},{"text":"\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # n = 5\r\n    # m = 2\r\n\r\n    if m == 1:\r\n        return False\r\n\r\n    # The idea is to see if there exists a subset whose sum is divisible by m\r\n    # We can do this by dividing the sum of the elements of the array\r\n    # by m and seeing if the remainder is 0. So if there exists a subset\r\n    # with sum divisible by m then there must exist a subset whose sum\r\n    # is divisible by m\/gcd(m,arr[0])\r\n    # So we will check if there is a subset whose sum is divisible by m\/gcd(m, arr[0])\r\n    # If there exists a subset whose sum is divisible by m\/gcd(m, arr[0])\r\n    # then we can find a subset whose sum is divisible by m\r\n\r\n    # Since we need to check for a subset with sum divisible by m\r\n    # we can use subset sum problem\r\n\r\n    # So we will be using the concept of a hashmap to store the sum\r\n    # of elements in a subset. We will use a hashmap to store the sum\r\n    # of elements in a subset. The key will be the sum and the value\r\n    # will be the number of subsets with that sum\r\n    # hashmap[sum] = no. of subsets with that sum\r\n\r\n    # We will be using a function to find the sum of all elements in a subset\r\n    # with subset[i] = True and subset[j] = False\r\n   ","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(n):\r\n        sum += arr[i]\r\n        if sum % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    l = len(arr)\r\n    dp = [[False for _ in range(m)] for _ in range(n)]\r\n\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if i == 0:\r\n                dp[i][j] = True\r\n            elif j == 0:\r\n                dp[i][j] = False\r\n            else:\r\n                dp[i][j] = dp[i-1][j]\r\n                if arr[i] % j == 0:","votes":null},{"text":"\r\n    if len(arr) < 1:\r\n        return False\r\n    if n == 0:\r\n        return True\r\n    return modular_sum(arr, n - arr[0], m) or modular_sum(arr[1:], n, m)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(modular_sum([1,","votes":null},{"text":"\r\n\r\n    # create a hashmap of all the remainders\r\n    # and check if there is a subset with sum divisible by m\r\n    # if there is no subset return False\r\n\r\n    # if sum of the array is divisible by m return True\r\n    if sum(arr) % m == 0:\r\n        return True\r\n\r\n    # create a hashmap of all the remainders\r\n    # and check if there is a subset with sum divisible by m\r\n    # if there is no subset return False\r\n    hm = {}\r\n    for i in range(n):\r\n        hm[arr[i] % m] = hm.get(arr[i] % m, 0) + arr[i]\r\n\r\n    # check if there is a subset with sum divisible by m\r\n    for i in range(m):\r\n        if hm.get(i, 0) % m == 0:\r\n            return True\r\n\r\n    return False\r\n\r\n\r\nprint(modular_sum([1, 2, 3, 4], 4, 5))\r\nprint(modular_sum([1, 2, 3, 4], 4, 10))\r\nprint(modular_sum([1, 2, 3, 4], 4, 12))\r\nprint(modular_sum([1, 2, 3, 4], 4, 13))\r\nprint(modular_sum([1, 2, 3, 4], 4, 14))\r\nprint(modular_sum([1, 2, 3, 4], 4, 15))\r\nprint(modular_sum([1, 2, 3, 4], 4, 16))\r\nprint(modular_sum([1, 2, 3, 4], 4, 17))\r\nprint(modular_sum([1, 2, 3, 4], 4,","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(0, n):\r\n        sum = sum + arr[i]\r\n        if sum % m == 0:\r\n            return 1\r\n\r\n    return 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    m = int(input())\r\n    print(modular_sum(arr, n, m))","votes":null},{"text":"\r\n    if arr == []:\r\n        return False\r\n    elif n == 0:\r\n        return False\r\n    elif n == m:\r\n        return True\r\n    elif n % m == 0:\r\n        return True\r\n    else:\r\n        return modular_sum(arr[1:], n, m) or modular_sum(arr[1:], n - arr[0], m)\r\n\r\n\r\nif __name__ == '__main__':\r\n    # arr = [2, 3, 4, 5]\r\n    # n = 20\r\n    # m = 3\r\n    # print(modular_sum(arr, n, m))\r\n    # 20 % 3 = 2\r\n    # 20 - 2 = 18\r\n\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # n = 15\r\n    # m = 3\r\n    # print(modular_sum(arr, n, m))\r\n    # 15 % 3 = 0\r\n\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # n = 20\r\n    # m = 3\r\n    # print(modular_sum(arr, n, m))\r\n    # 20 % 3 = 2\r\n    # 20 - 2 = 18\r\n\r\n    # arr = [2, 3, 4, 5]\r\n    # n = 20\r\n    # m = 3\r\n    # print(modular_sum(arr, n, m))\r\n    # 20 % 3 = 2\r\n    # 20 - 2 = 18\r\n\r\n    # arr = [1, 2, 3, 4, 5]\r\n    # n = 15\r\n    # m = 3\r\n    # print(modular_su","votes":null},{"text":"\r\n    # 1. Initialize dp array\r\n    dp = [0] * (n + 1)\r\n    # 2. Initialize the dp array with the values\r\n    for i in range(n + 1):\r\n        if arr[i] % m == 0:\r\n            dp[i] = 1\r\n    # 3. Compute the subarray sum\r\n    for i in range(1, n + 1):\r\n        # 3.1. Compute the subarray sum\r\n        for j in range(i, n + 1):\r\n            if arr[j] % m == 0:\r\n                dp[j]","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    if n == 1:\r\n        if arr[0] % m == 0:\r\n            return True\r\n    if arr[n - 1] % m == 0:\r\n        return modular_sum(arr, n - 1, m)\r\n    return modular_sum(arr, n - 1, m) or modular_sum(arr, n - 1, m)\r\n\r\n\r","votes":null},{"text":"\r\n    s = 0\r\n    for i in arr:\r\n        s += i\r\n    if s%m == 0:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    if arr[n-1] > m:\r\n        return modular_sum(arr, n-1, m)\r\n    return modular_sum(arr, n-1, m) + modular_sum(arr, n-1, m)\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [0] * (n+1)\r\n    for i in range(n):\r\n        dp[i+1] = dp[i] + arr[i]\r\n    if dp[-1] % m == 0:\r\n        return True\r\n    for i in range(n):\r\n        if dp[i+1] % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    n = int(input())\r\n\r\n    m = int(input())\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    if result:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # Base Case\r\n    if n == 0:\r\n        return 0\r\n    # Recursive Case\r\n    if arr[n - 1] > m:\r\n        return modular_sum(arr, n - 1, m)\r\n\r\n    return modular_sum(arr, n - 1, m) + modular_sum(arr, n - 1, m - arr[n - 1])\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, ","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    result = set()\r\n    for i in range(n):\r\n        result.add(arr[i])\r\n    \r\n    for i in range(n):\r\n        if arr[i] % m == 0:\r\n            result.add(0)\r\n        if arr[i] % m != 0:\r\n            result.add(arr[i] + m - arr[i] % m)\r\n    \r\n    if 0 in result:\r\n        return True\r\n    elif max(result) - min(result) + 1 > n:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    nm = input().split()\r\n\r\n    n = int(nm[0])\r\n\r\n    m = int(nm[1])\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = modular_sum(arr, n, m)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    dp = [0 for _ in range(n + 1)]\r\n    for i in range(n):\r\n        dp[i + 1] = dp[i]\r\n        if arr[i] % m == 0:\r\n            dp[i + 1] += 1\r\n        else:\r\n            dp[i + 1] += dp[i]\r\n    return dp[n]\r\n\r","votes":null},{"text":"\r\n    sum_arr = [0] * (n + 1)\r\n\r\n    for i in range(n):\r\n        sum_arr[i + 1] = sum_arr[i] + arr[i]\r\n\r\n    for i in range(n + 1):\r\n        if sum_arr[i] % m == 0:\r\n            return True\r\n\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Make a hash table to store the number of times each number\r\n    # is needed.\r\n    hash_table = {}\r\n    for num in arr:\r\n        hash_table[num] = hash_table.get(num, 0) + 1\r\n\r\n    # The subarray containing the numbers in the hash table\r\n    # can be found by subtracting the number of times the number\r\n    # is needed from the number of times it is present in the\r\n    # hash table.\r\n    sub_arr = []\r\n    for i in range(n):\r\n        if hash_table[arr[i]] > 0:\r\n            sub_arr.append(arr[i])\r\n            hash_table[arr[i]] -= 1\r\n\r\n    # We need to check if the sum of the subarray is divisible by m.\r\n    # If it is, return true, else false.\r\n    if sum(sub_arr) % m == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Make a hash table to store the values of subarrays\r\n    subarrays = {}\r\n    current_sum = 0\r\n    for i in range(n):\r\n        current_sum += arr[i]\r\n        if current_sum % m == 0:\r\n            return True\r\n        elif current_sum in subarrays:\r\n            return True\r\n        subarrays[current_sum] = True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    print(arr, n, m)\r\n    if n == 0:\r\n        return 0\r\n    if m == 0:\r\n        return 0\r\n    if n == 1:\r\n        return arr[0]\r\n    if arr[n - 1] >= m:\r\n        return modular_sum(arr, n - 1, m)\r\n    else:\r\n        return modular_sum(arr, n - 1, m) + modular_sum(arr, n - 1, m - arr[n - 1])\r\n\r\n\r\nif __name__ == '__main__':\r\n    m = int(input())\r\n    arr = list(map(int, input().split()))\r\n    n = len(arr)\r\n    print(modular_sum(arr, n, m))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n\r\n    n -= 1\r\n    if modular_sum(arr, n, m) or (arr[n] % m) == 0:\r\n        return True\r\n\r\n    return modular_sum(arr, n, m)\r\n\r\n\r\nn = int(input())\r\narr = [int(x) for x in input().split()]\r\nm = int(input())\r\n\r\nif modular_sum(arr, n, m):\r\n    print(\"True\")\r\nelse:\r\n    print(\"False\")\r\n\r\n# Sample Input\r\n# 11\r\n# 1 2 3 4 5 6 7 8 9 10 11\r\n# 3\r\n# Sample Output\r\n# True\r\n# Explanation\r\n# Since sum of elements is divisible by 3, therefore, there is a subset with sum divisible by 3.\r\n\r\n# Sample Input\r\n# 11\r\n# 1 2 3 4 5 6 7 8 9 10 11\r\n# 10\r\n# Sample Output\r\n# False\r\n# Explanation","votes":null},{"text":"\r\n    dp = [[False for i in range(n)] for j in range(m)]\r\n    for i in range(m):\r\n        dp[i][0] = True\r\n    for i in range(n):\r\n        dp[0][i] = True\r\n    for i in range(1, m):\r\n        for j in range(1, n):\r\n            if arr[j] % m == i:\r\n                dp[i][j] = dp[i][j - 1]\r\n            elif arr[j] % m > i:\r\n                dp[i][j] = dp[i][j - 1] or dp[i][j - 1]\r\n            else:\r\n                dp[i][j] = dp[i][j - 1]\r\n    return dp[m - 1][n - 1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    m = 6\r\n    if modular_sum(arr, n, m):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n\r\n\r\n# Time Complexity : O(n*m)\r\n# Space Complexity : O(n*m)\r\n\r\n\r\n# Sample Input : arr = [1, 2, 3, 4, 5], n = 5, m = 6\r\n# Output : Yes\r\n# Explanation : [2, 3, 4]\r\n\r\n\r\n# Sample Input : arr = [1, 2, 3, 4, 5], n = 5, m = 8\r\n# Output : No\r\n# Explanation : No number is divisible by 8\r\n\r\n\r\n# Sample Input : arr = [1, 2, 3, 4, 5], n = 5, m = 1","votes":null},{"text":"\r\n    # Write your code here\r\n    # return True if there is a subset with sum divisible by m\r\n    # else return False\r\n    total = 0\r\n    for i in range(n):\r\n        total += arr[i]\r\n        if total % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Base Case\r\n    if n == 0:\r\n        return 0\r\n    # Recursive Case\r\n    return (modular_sum(arr, n - 1, m) + arr[n - 1]) % m\r\n\r\n\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 6))\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    \r\n    if n == 1:\r\n        return True\r\n    \r\n    if m > 0:\r\n        return (arr[n - 1] % m == 0) or modular_sum(arr, n - 1, m) \r\n    \r\n    if m < 0:\r\n        return modular_sum(arr, n - 1, m + arr[n - 1]) \r\n\r\n\r","votes":null},{"text":"\r\n    n, m = int(n), int(m)\r\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\r\n    for i in range(1, m + 1):\r\n        dp[i][0] = 1\r\n    for i in range(1, n + 1):\r\n        for j in range(1, m + 1):\r\n            dp[j][i] = dp[j][i - 1]\r\n            if i - arr[i - 1] >= 0:\r\n                dp[j][i] += dp[j][i - arr[i - 1]]\r\n    return dp[m][n] % m\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = 10\r\n    m = 3\r\n    print(\"The sum mod %d is %d\" % (m, modular_sum(arr, n, m)))\r\n    n = 10\r\n    m = 7\r\n    print(\"The sum mod %d is %d\" % (m, mod","votes":null},{"text":"\r\n    s = 0\r\n    for a in arr:\r\n        s += a\r\n    if s % m == 0:\r\n        return True\r\n    return False\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = 6\r\nm = 3\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = 6\r\nm = 4\r\nprint(modular_sum(arr, n, m))\r\n\r\narr = [2, 3, 4, 5, 6, 7]\r\nn = 6\r\nm","votes":null},{"text":"\r\n    dp = [0] * (n + 1)\r\n\r\n    for i in range(n):\r\n        dp[i + 1] = dp[i]\r\n        if arr[i] % m == 0:\r\n            dp[i + 1] += 1\r\n\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            dp[j + 1] = min(dp[j + 1], dp[i] + dp[j - i + 1])\r\n\r\n    return dp[n]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [3, 5, 15, 11, 2, 8]\r\n    n = len(arr)\r\n    m = 3\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [3, 5, 15, 11, 2, 8, 20]\r\n    n = len(arr)\r\n    m = 3\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    m = 2\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    m = 7\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r","votes":null},{"text":"\r\n\r\n    dp = [set() for _ in range(n + 1)]\r\n    dp[0].add(0)\r\n\r\n    for i in range(1, n + 1):\r\n        for j in range(i):\r\n            if i - j in dp[j]:\r\n                dp[i].add(i - j)\r\n\r\n    for i in range(n + 1):\r\n        for j in range(m):\r\n            if i in dp[j]:\r\n                return True\r\n\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    dp = [False] * (n + 1)\r\n    dp[0] = True\r\n    for i in range(n+1):\r\n        for j in range(i, n+1):\r\n            if dp[j] and (arr[j] % m == 0) or (arr[i] % m == 0 and j-i < 2):\r\n                dp[i] = True\r\n                break\r\n    return dp[0]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 5, 10, 9, 4, 3, 6, 2, 8, 7]\r\n    n = len(arr)\r\n    m = 11\r\n    print(modular_sum(arr, n, m))\r\n\r\n    # Output:\r\n    # True\r\n\r\n    arr = [1, 5, 10, 9, 4, 3, 6, 2, 8, 7]\r\n    n = len(arr)\r\n    m = 10\r\n    print(modular_sum(arr, n, m))\r\n\r\n    # Output:\r\n    # False\r\n\r\n    arr = [1, 5, 10, 9, 4, 3, 6, 2, 8, 7]\r\n    n = len(arr)\r\n    m = 101\r\n    print(modular_sum(arr, n, m))\r\n\r\n    # Output:\r\n    # True\r\n\r\n    arr = [1, 5, 10, 9, 4, 3, 6, 2, 8, 7]\r\n    n = len(arr)\r\n    m = 10\r\n    print(modular_sum(arr, n, m))\r\n\r\n    # Output:\r\n    # False\r\n\r\n    arr = [1, 5,","votes":null},{"text":"\r\n    if not arr or n <= 0:\r\n        return False\r\n    # A 0-1 matrix with the given sum\r\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\r\n    # Fill up the matrix\r\n    for i in range(n):\r\n        for j in range(m):\r\n            # If j is divisible by i, then it is a valid sum\r\n            if j % i == 0:\r\n                matrix[i][j] = 1\r\n            else:\r\n                # If j is not divisible by i, then it is not a valid sum. In this case,\r\n                # we take the maximum value from the previous row.\r\n                matrix[i][j] = matrix[i - 1][j]\r\n    # Check if any value in the last row is 1\r\n    for i in range(m):\r\n        if matrix[n - 1][i] == 1:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if not arr:\r\n        return False\r\n    arr.sort()\r\n    for i in range(n, len(arr)):\r\n        if (arr[i] - arr[i - n]) % m == 0:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    dp = [0] * (n + 1)  # dp[i] is the number of subsets of {arr[0], arr[1], ..., arr[i - 1]} whose sum is divisible by m.\r\n    if arr[0] % m == 0:\r\n        dp[1] = 1\r\n    for i in range(2, n + 1):\r\n        dp[i] = dp[i - 1]\r\n        if arr[i - 1] % m == 0:\r\n            dp[i] += dp[i - 1]\r\n        if arr[i - 1] % m == 0 and arr[i - 1] != 0:\r\n            dp[i] += dp[i - 1]\r\n    return dp[n]\r\n\r\n\r\nif __name__ == '__main__':\r\n    n, m = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    print(modular_sum(arr, n, m))\r\n\r\n\"\"\"\r\nSample Input\r\n4 2\r\n15 12 18 22\r\n\r\nSample Output\r\n3\r\n\r\nExplanation\r\nThe subsets whose sum is divisible by m are {12, 18} and {12, 22}, hence the output is 3.\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    if arr[n - 1] == 0:\r\n        return modular_sum(arr, n - 1, m)\r\n    return modular_sum(arr, n - 1, m) or modular_sum(arr, n - 1, m) and ((arr[n - 1] % m) == 0)\r\n\r\n\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 4))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 5))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 6))\r\nprint(modular_sum([0, 1, 2, 3, 4, 5], 6, 4))\r\nprint(modular_sum([0, 0, 0, 1, 2, 3, 4, 5], 8, 4))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 7))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 10))\r\nprint(modular_sum([0, 1, 2, 3, 4, 5], 6, 7))\r\nprint(modular_sum([0, 0, 1, 2, 3, 4, 5], 7, 7))\r\nprint(modular_sum([0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5], 13, 7))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 11))\r\nprint(modular_sum([1,","votes":null},{"text":"\r\n    # check for base cases\r\n    if n == 0:\r\n        return False\r\n    if n == 1:\r\n        return arr[0] % m == 0\r\n\r\n    # check if the sum of first and last elements is divisible by m\r\n    if (arr[0] + arr[-1]) % m == 0:\r\n        return True\r\n\r\n    # check for the case when sum of first and last elements is not divisible\r\n    # by m\r\n    return modular_sum(arr, n - 1, m) or modular_sum(arr[1:], n - 1, m)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\r\n    n = len(arr)\r\n    m = 5\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8,","votes":null},{"text":"\r\n    if n == 0:\r\n        return False\r\n    if n == 1:\r\n        if arr[0] % m == 0:\r\n            return True\r\n        else:\r\n            return False\r\n    if arr[n - 1] % m == 0:\r\n        return modular_sum(arr, n - 1, m)\r\n    else:\r\n        return modular_sum(arr, n - 1, m) or modular_sum(arr, n - 1, m)\r\n\r\n\r\nprint(modular_sum([1, 2, 4, 8], 4, 3))\r\n# True\r\nprint(modular_sum([1, 2, 4, 8], 4, 4))\r\n# False\r\n","votes":null},{"text":"\r\n    dp = [False for _ in range(n + 1)]\r\n    dp[0] = True\r\n    for i in range(1, n + 1):\r\n        for j in range(i, 0, -1):\r\n            if arr[j - 1] % m == 0:\r\n                dp[i] |= dp[i - j]\r\n            else:\r\n                dp[i] = dp[i] | dp[i - j]\r\n    return dp[n]\r\n\r\n\r\nmodular_sum([1, 2, 3, 4, 5, 6], 6, 3)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    dp = [0 for x in range(n+1)]\r\n    \r\n    for i in range(n+1):\r\n        for j in range(m):\r\n            if i+j <= n:\r\n                dp[i+j] += dp[i]\r\n                if i+j == n and arr[i+j] % m == 0:\r\n                    return True\r\n    \r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(n):\r\n        sum += arr[i]\r\n    if (sum%m) == 0:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    sums = [0] * (n + 1)\r\n    sums[0] = 1\r\n    for i in range(n):\r\n        for j in range(m + 1):\r\n            sums[i + 1] += sums[i] * (arr[i] % m)\r\n            sums[i + 1] %= m\r\n            sums[i + 1] += sums[i]\r\n            sums[i + 1] %= m\r\n    return sums[n]\r\n\r\n\r\n# Tests\r\nprint(modular_sum([0, 1, 2, 3, 4, 5, 6], 100, 1000))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6, 7], 100, 1000))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6, 7, 8], 100, 1000))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 100, 1000))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100, 1000))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 100, 1000))\r\nprint(modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 100, 1000))\r\nprint(modular_sum([1, 2, 3,","votes":null},{"text":"\r\n    # make a 2D array with a row for each value in arr\r\n    # and a column for each number from 1 to m\r\n    dp = [[False for i in range(m)] for i in range(n)]\r\n    \r\n    # now try all the possible sums and check if it is possible\r\n    for i in range(1, m+1):\r\n        for j in range(n):\r\n            sum = 0\r\n            # try all the combinations\r\n            for k in range(j):\r\n                sum += arr[k]\r\n                if sum%m == i:\r\n                    dp[j][i] = True\r\n                    break\r\n            \r\n    return dp\r\n\r\n\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 5))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 7))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 11))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 2))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 3))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 4))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 5))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 6))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 7))\r\nprint(modular_sum([1, 2, 3, 4, 5], 5, 8))\r\nprint(modular_sum([1, ","votes":null},{"text":"\r\n    dp = [0] * (n + 1)\r\n    for i in range(1, n + 1):\r\n        for j in range(i, n + 1):\r\n            if arr[i - 1] % m == 0:\r\n                dp[j] += 1\r\n            else:\r\n                dp[j] += dp[j - i]\r\n    return dp[n]\r\n\r\n\r\nn, m = map(int, input().split())\r\narr = list(map(int, input().split()))\r\nprint(modular_sum(arr, n, m))\r\n\r\n\r","votes":null},{"text":"\r\n    # Return True if there is a subset with sum divisible by m\r\n    # Return False otherwise\r\n\r\n    # SOLUTION:\r\n    # A brute force approach would be to check for all the subsets and check if\r\n    # the sum is divisible by m, but that would take O(2^n) time and O(n) space.\r\n    # A better approach would be to use dynamic programming where we make the\r\n    # decision based on the previous decision and the current element. If the\r\n    # previous decision was False and the current element is divisible by m then\r\n    # we have to return True, otherwise if the previous decision was True and the\r\n    # current element is also divisible by m then we have to return True, otherwise\r\n    # we have to return False.\r\n\r\n    # The idea is to use a 2D dp array to store the decision made so far\r\n    # For example, if we have to check for a subset sum divisible by 3 then the\r\n    # dp array will be of size (n+1)x(m+1) where n is the size of the array and\r\n    # m is the mod we have to check for.\r\n    # The decision made at index (i, j) will be the decision made for the subarray\r\n    # with the sum equal to i, and the mod equal to j\r\n    # If the sum of the subarray is divisible by the mod then the decision at\r\n    # index (i, j) will be True\r\n    # If the sum of the subarray is not divisible by the mod then the decision at\r\n    # index (i, j) will be False\r\n\r\n    # The dp array will be initialized as follows:\r\n    # The sum of the subarray will be 0 when the sum is 0, and the mod will be 0\r\n    # when the mod is 0\r\n    # We will initialize the dp array with False\r\n    # The decision made at index (i, j) will be True if the sum of the subarray","votes":null},{"text":"\r\n    # if the sum of elements is divisible by m, then return true\r\n    if sum(arr) % m == 0:\r\n        return True\r\n\r\n    # if the sum of elements is not divisible by m\r\n    # but all the elements are divisible by m\r\n    if all(i % m == 0 for i in arr):\r\n        return False\r\n\r\n    # otherwise, apply the formula\r\n    # if x is divisible by m, then\r\n    # x + y is divisible by m iff x is divisible by m\r\n    # x - y is divisible by m iff x is divisible by m\r\n    # x * y is divisible by m iff x and y are divisible by m\r\n\r\n    ans = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            ans += (arr[i] + arr[j]) % m\r\n            ans -= (arr[i] - arr[j]) % m\r\n            ans += (arr[i] * arr[j]) % m\r\n\r\n    return ans % m == 0\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [5, 2, 4, 6, 3]\r\n    n = len(arr)\r\n    m = 3\r\n    print(\"Sum divisible by 3 : \" + str(modular_sum(arr, n, m)))\r\n\r\n    arr = [7, 5, 3, 2, 1, 8, 6]\r\n    n = len(arr)\r\n    m = 5\r\n    print(\"Sum divisible by 5 : \" + str(modular_sum(arr, n, m)))\r\n\r\n    arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\r\n    n = len(arr)\r\n    m =","votes":null},{"text":"\r\n\r\n    # This is a recursive function that checks if there is a subset with sum\r\n    # divisible by m.\r\n   ","votes":null},{"text":"\r\n\r\n    # Check if n is divisible by m.\r\n    if not n % m == 0:\r\n        return False\r\n\r\n    # Use a set to keep track of the current sum.\r\n    current_sum = set()\r\n\r\n    # Iterate over each element in the array.\r\n    for element in arr:\r\n\r\n        # Check if the current sum is divisible by m.\r\n        if sum(current_sum) % m == 0:\r\n            return True\r\n\r\n        # Check if the sum of the current element and the previous sum is divisible by m.\r\n        if element in current_sum:\r\n            current_sum.remove(element)\r\n        else:\r\n            current_sum.add(element)\r\n\r\n    # Check if the final sum of the array is divisible by m.\r\n    return sum(current_sum) % m == 0\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    sum_value = 0\r\n    for i in range(n):\r\n        sum_value += arr[i]\r\n    if sum_value % m == 0:\r\n        return True\r\n    return False\r\n\r\n\r\nn = 5\r\narr = [1, 2, 4, 5, 6]\r\nm = 3\r\nresult = modular_sum(arr, n, m)\r\nprint(result)\r\n\r\n# This","votes":null},{"text":"\r\n    dp = [[0] * n for _ in range(m)]\r\n\r\n    for i in range(m):\r\n        dp[i][0] = 1\r\n\r\n    for j in range(1, n):\r\n        for k in range(1, m):\r\n            dp[k][j] = dp[k][j - 1]\r\n            if arr[j] % k == 0:\r\n                dp[k][j] = (dp[k][j] + dp[k][j - 1]) % m\r\n\r\n    return dp[m - 1][n - 1]\r\n\r\n\r","votes":null},{"text":"\r\n    # Create a sum of the array\r\n    sum = 0\r\n    for i in range(n):\r\n        sum = sum + arr[i]\r\n    \r\n    # Check if the sum is divisible by m\r\n    if(sum % m == 0):\r\n        return True\r\n    else:\r\n        return False\r\n\r\nn, m = input().strip().split(' ')\r\nn, m = [int(n), int(m)]\r\narr = list(map(int, input().strip().split(' ')))\r\nresult = modular_sum(arr, n, m)\r\nif(result):\r\n    print(\"True\")\r\nelse:\r\n    print(\"False\")\r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return arr[0] % m == 0\r\n    dp = [False] * n\r\n    dp[0] = arr[0] % m == 0\r\n    for i in range(1, n):\r\n        dp[i] = dp[i - 1] or (arr[i] % m == 0 and dp[i - 1])\r\n    return dp[-1]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    dp = [[False for i in range(n+1)] for j in range(m+1)]\r\n    for i in range(m+1):\r\n        dp[i][0] = True\r\n    \r\n    for i in range(1, m+1):\r\n        for j in range(1, n+1):\r\n            dp[i][j] = dp[i][j-1]\r\n            if arr[j-1] % i == 0:\r\n                dp[i][j] = dp[i][j] or dp[i][j-1]\r\n\r\n    return dp[m][n]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = list(map(int, input().split()))\r\n    m = int(input())\r\n    n = len(arr)\r\n\r\n    if modular_sum(arr, n, m):\r\n        print('Yes')\r\n    else:\r\n        print('No')\r\n\r\n\r\n\"\"\"\r\nTime Complexity - O(m*n)\r\nSpace Complexity - O(m*n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\nEnter the array: 1 4 7 10\r\nEnter the mod: 4\r\nYes\r\n\r\nSAMPLE 2\r\nEnter the array: 1 4 7 10\r\nEnter the mod: 5\r\nNo\r\n\r\nSAMPLE 3\r\nEnter the array: 3 4 10 20\r\nEnter the mod: 5\r\nYes\r\n\r\nSAMPLE 4\r\nEnter the array: 3 4 10 20\r\nEnter the mod: 7\r\nNo\r\n\r\nSAMPLE 5\r\nEnter the array: 1 2 3 4 5 6 ","votes":null},{"text":"\r\n    dp = [[None for _ in range(m+1)] for _ in range(n+1)]\r\n    for i in range(n+1):\r\n        for j in range(m+1):\r\n            if i == 0 or j == 0:\r\n                dp[i][j] = False\r\n            elif arr[i-1] % j == 0:\r\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\r\n            else:\r\n                dp[i][j] = dp[i-1][j]\r\n    return dp[n][m]\r\n\r","votes":null},{"text":"\r\n    if n == 0: return 0\r\n    return (modular_sum(arr, n-1, m) + arr[n-1] % m) % m\r\n\r","votes":null},{"text":"\r\n    dp = [[False for _ in range(m + 1)] for _ in range(n + 1)]\r\n    dp[0][0] = True\r\n\r\n    for i in range(n + 1):\r\n        for j in range(m + 1):\r\n            if j >= arr[i - 1]:\r\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\r\n            else:\r\n                dp[i][j] = dp[i - 1][j]\r\n\r\n    return dp[-1][-1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    m = 6\r\n    print(modular_sum(arr, n, m))\r\n    # True\r\n\r\n    arr = [1, 3, 5, 7, 9]\r\n    n = len(arr)\r\n    m = 10\r\n    print(modular_sum(arr, n, m))\r\n    # False\r\n\r\n    arr = [1, 4, 5, 7, 8]\r\n    n = len(arr)\r\n    m = 10\r\n    print(modular_sum(arr, n, m))\r\n    # True\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    m = 15\r\n    print(modular_sum(arr, n, m))\r\n    # True\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ","votes":null},{"text":"\r\n    mod_sum = 0\r\n    for num in arr:\r\n        mod_sum = (mod_sum + num) % n\r\n        if mod_sum == 0:\r\n            return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    arr = [2, 3, 4, 5, 6]\r\n    n = 10\r\n    m = 3\r\n    print(modular_sum(arr, n, m))\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in arr:\r\n        sum = (sum + i) % n\r\n    return (sum == 0)\r\n\r","votes":null},{"text":"\r\n    if n == 1:\r\n        return arr[0] % m == 0\r\n    if n == 2:\r\n        return arr[0] % m == 0 and arr[1] % m == 0\r\n\r\n    return modular_sum(arr[:n - 1], n - 1, m) or modular_sum(arr[1:], n - 1, m)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return False\r\n    if n == 0:\r\n        return True\r\n    if n < 0:\r\n        return False\r\n    if arr[-1] == 0:\r\n        return False\r\n\r\n    return modular_sum(arr[:-1], n, m) or modular_sum(arr[:-1], n - arr[-1], m)\r\n\r\n\r","votes":null},{"text":"\r\n    size = len(arr)\r\n    dp = [[False for x in range(n+1)] for x in range(size+1)]\r\n    dp[0][0] = True\r\n    for i in range(1, size+1):\r\n        for j in range(1, n+1):\r\n            if arr[i-1] <= j:\r\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\r\n            else:\r\n                dp[i][j] = dp[i-1][j]\r\n    for i in range(1, n+1):\r\n        if dp[size][i]:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [5, 3, 2, 1, 7]\r\n    n = 10\r\n    m = 3\r\n    print(modular_sum(arr, n, m))\r\n\r\n    arr = [8, 7, 1, 3, 2, 4, 5, 6, 2, 1]\r\n    n = 100\r\n    m = 2\r\n    print(modular_sum(","votes":null},{"text":"\r\n    # Write your code here\r\n    n = len(arr)\r\n    dp = [[0 for i in range(m + 1)] for j in range(n + 1)]\r\n    for i in range(1, n + 1):\r\n        for j in range(1, m + 1):\r\n            dp[i][j] = dp[i - 1][j]\r\n            if arr[i - 1] <= j:\r\n                dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]]\r\n    return dp[n][m]\r\n\r\n\r","votes":null}],"time":{"count":9.0,"avg":172413.8915555555,"std":43361.0877161575,"cov":0.2514941651}}
{"id":516,"question":"def radix_sort(nums):\r\n    \"\"\"Write a function to sort a list of elements using radix sort.\"\"\"","answers":[{"text":"\r\n    \r\n    # Check if the list is empty.\r\n    if len(nums) == 0:\r\n        return\r\n    \r\n    # Find the maximum element in the list.\r\n    max_element = max(nums)\r\n    \r\n    # Find the maximum number of digits in the maximum element.\r\n    max_number_of_digits = len(str(max_element))\r\n    \r\n    # Divide the list into buckets based on the number of digits.\r\n    for digit_position in range(max_number_of_digits):\r\n        \r\n        # Create buckets for the list.\r\n        buckets = [[] for _ in range(10)]\r\n        \r\n        # Put the elements into the buckets based on the digit at the current position.\r\n        for num in nums:\r\n            bucket_index = num \/\/ (10 ** digit_position) % 10\r\n            buckets[bucket_index].append(num)\r\n        \r\n        # Flatten the buckets.\r\n        nums = [num for bucket in buckets for num in bucket]\r\n    \r\n    return nums\r\n\r\n\r","votes":156116.86},{"text":"\r\n    # Your code here\r\n    max_num = max(nums)\r\n    # count the number of digits in the largest number\r\n    max_digits = len(str(max_num))\r\n    # iterate through the number of digits\r\n    for digit in range(max_digits):\r\n        # split the array into buckets of 10\r\n        buckets = [[] for _ in range(10)]\r\n        # iterate through the array\r\n        for num in nums:\r\n            # check the digit to add to the correct bucket\r\n            digit_val = num \/\/ (10 ** digit) % 10\r\n            # append the number to the correct bucket\r\n            buckets[digit_val].append(num)\r\n        # reset the array\r\n        nums = []\r\n        # iterate through the buckets\r\n        for bucket in buckets:\r\n            # append the numbers in the bucket to the array\r\n            nums += bucket\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66]\r\n    radix_sort(nums)\r\n    print(nums)\r\n","votes":160498.692},{"text":"\r\n    # Find the max of the list\r\n    max_num = max(nums)\r\n    # Set the initial digit to 1\r\n    digit = 1\r\n    # While the max number is greater than the digit\r\n    while max_num >= digit:\r\n        # Create a list of buckets to hold the numbers\r\n        buckets = [[] for _ in range(10)]\r\n        # Count the number of digits\r\n        count = 0\r\n        # For each digit in the list\r\n        for num in nums:\r\n            # If the digit is greater than the current digit\r\n            if num >= digit:\r\n                # Get the digit of the number\r\n                digit_of_num = (num \/\/ digit) % 10\r\n                # Append the number to the list of buckets\r\n                buckets[digit_of_num].append(num)\r\n            else:\r\n                # If the digit is less than the current digit, append the number to the list of buckets\r\n                buckets[0].append(num)\r\n            # Increment the count\r\n            count += 1\r\n        # Reset the number list to be empty\r\n        nums = []\r\n        # For each bucket in the list\r\n        for bucket in buckets:\r\n            # For each number in the bucket\r\n            for num in bucket:\r\n                # Append the number to the number list\r\n                nums.append(num)\r\n        # Increment the digit\r\n        digit *= 10\r\n    # Return the number list\r\n    return nums\r\n\r\n\r","votes":161711.46},{"text":"\r\n    max_num = max(nums)\r\n    max_length = len(str(max_num))\r\n    for i in range(max_length):\r\n        buckets = [[] for _ in range(10)]\r\n        for j in range(len(nums)):\r\n            digit = (nums[j] \/\/ 10**i) % 10\r\n            buckets[digit].append(nums[j])\r\n        nums[:] = []\r\n        for bucket in buckets:\r\n            nums.extend(bucket)\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [23, 12, 1, 10, 9, 13, 37, 3, 7, 5, 11, 2, 6, 8, 4, 21, 17, 18, 19, 20, 22, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]\r\n    print(\"Before sorting: \", nums)\r\n    radix_sort(nums)\r\n    print(\"After sorting: \", nums)\r\n\r\n# Output\r\n# Before sorting:  [23, 12, 1, 10, 9, 13, 37, 3, 7, 5, 11, 2, 6, 8, 4, 21, 17, 18, 19, 20, 22, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,","votes":186656.636},{"text":"\r\n    # Initialize\r\n    max_num = max(nums)\r\n    n = len(nums)\r\n    # Calculate the maximum number of digits\r\n    digits = len(str(max_num))\r\n    # Iterate over the number of digits\r\n    for d in range(digits):\r\n        # Create a bucket for each digit\r\n        buckets = [[] for _ in range(10)]\r\n        # Populate the buckets\r\n        for num in nums:\r\n            buckets[num \/\/ (10 ** d) % 10].append(num)\r\n        # Put the buckets elements back to the original list\r\n        nums.clear()\r\n        for bucket in buckets:\r\n            for num in bucket:\r\n                nums.append(num)\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))\r\n    print(radix_sort([170, 45, 75, 90, 802, 24, 2, 66, 24, 88, 802]))\r\n    print(radix_sort([170, 45, 75, 90, 802, 24, 2, 66, 24, 88, 802, 170, 45, 75, 90, 802, 24, 2, 66, 24, 88, 802]))\r\n    print(radix_sort([1, 10, 100, 1000, 10000]))\r\n    print(radix_sort([1, 10, 100, 1000, 10000, 100000]))\r\n  ","votes":202773.864},{"text":"\r\n    # find the max element in the list\r\n    max_nums = max(nums)\r\n    # find the max digit in the max element\r\n    max_digit = len(str(max_nums))\r\n    # check if the max element is negative\r\n    if max_nums < 0:\r\n        max_digit += 1\r\n    # sort the list using radix sort\r\n    for digit in range(max_digit):\r\n        # initialize the buckets\r\n        bucket = [[] for _ in range(10)]\r\n        for num in nums:\r\n            # get the digit at index \"digit\"\r\n            digit_at_index = num \/\/ (10 ** digit) % 10\r\n            # add the digit to the bucket\r\n            bucket[digit_at_index].append(num)\r\n        nums.clear()\r\n        # fill the list with the numbers in the bucket\r\n        for digit in bucket:\r\n            nums.extend(digit)\r\n    return nums\r\n\r\n\r\nprint(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))\r\n# [2, 24, 45, 66, 75, 90, 170, 802]\r\nprint(radix_sort([12, 111, 333, 222]))\r\n# [111, 12, 222, 333]\r\nprint(radix_sort([-7, -66, -555, -4444, -33333, -222222, -1111111, 0, 1, 22, 333, 4444, 55555, 666666, 7777777, 88888888]))\r\n# [-88888","votes":237222.428},{"text":"\r\n    d = 1\r\n    k = max(nums)\r\n    \r\n    while k \/ d > 0:\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            buckets[ (num \/\/ d) % 10 ].append(num)\r\n        \r\n        nums = []\r\n        for bucket in buckets:\r\n            nums.extend(bucket)\r\n        \r\n        d *= 10\r\n        \r\n    return nums\r\n\r\n\r","votes":1461791.1159999999},{"text":"\r\n    # TODO: Implement radix sort\r\n    # Return the sorted list\r\n    max_num = max(nums)\r\n    digits = 0\r\n    while max_num != 0:\r\n        max_num = max_num \/ 10\r\n        digits += 1\r\n    \r\n    for digit in range(digits):\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit_value = (num \/\/ (10 ** digit)) % 10\r\n            buckets[digit_value].append(num)\r\n        \r\n        nums = []\r\n        for bucket in buckets:\r\n            nums += bucket\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n    doctest.testmod","votes":3127965.6320000002},{"text":"\r\n    # Initialize buckets\r\n    buckets = [[] for _ in range(len(nums))]\r\n    # Initialize maximum number\r\n    max_num = max(nums)\r\n    # Find the maximum number of digits\r\n    max_digits = len(str(max_num))\r\n    # Process each digit\r\n    for digit_num in range(max_digits):\r\n        # Get the number of digits\r\n        digits_num = get_digit_num(nums, max_num, digit_num)\r\n        # Get the digit\r\n        digit = get_digit(nums, max_num, digit_num)\r\n        # Get the index of the bucket\r\n        bucket = get_bucket(digit, digits_num)\r\n        # Put the number in the bucket\r\n        buckets[bucket].append(nums.pop(0))\r\n    # Put the numbers in the correct order\r\n    for bucket in buckets:\r\n        nums.extend(bucket)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Check the length of the list\r\n    if len(nums) < 2:\r\n        return nums\r\n    # Get the max number in the list\r\n    max_num = max(nums)\r\n    # Get the max number of digits in the max number\r\n    max_num_length = len(str(max_num))\r\n    # Get the max digit of all numbers in the list\r\n    max_digit = max(map(lambda x: len(str(x)), nums))\r\n    # Get the number of digit\r\n    digit = max_num_length\r\n    # Sort each digit\r\n    while digit > 0:\r\n        # Get the index of the last digit\r\n        index = digit * 10\r\n        # Sort the last digit\r\n        nums = _sort_by_digit(nums, index, max_digit)\r\n        digit -= 1\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # return nums\r\n   ","votes":null},{"text":"\r\n    # Find the maximum element in the list.\r\n    max_num = max(nums)\r\n\r\n    # Find the maximum number of digits.\r\n    max_num_digits = len(str(max_num))\r\n\r\n    # For each digit in the number\r\n    for digit_index in range(max_num_digits):\r\n        # Create a buckets for each digit.\r\n        buckets = [[] for _ in range(10)]\r\n\r\n        # Sort the numbers into buckets.\r\n        for num in nums:\r\n            bucket_index = (num \/\/ (10 ** digit_index)) % 10\r\n            buckets[bucket_index].append(num)\r\n\r\n        # Flatten the buckets to a single list.\r\n        nums = [num for bucket in buckets for num in bucket]\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66]\r\n    sorted_nums = radix_sort(nums)\r\n    print(\"Sorted numbers:\")\r\n    print(sorted_nums)\r\n\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66, -2147483648]\r\n    sorted_nums = radix_sort(nums)\r\n    print(\"Sorted numbers:\")\r\n    print(sorted_nums)\r\n\r\n    nums = [170, 45, 75, 90, 802, 24, 2, 66, -2147483648, 2147483647]\r\n    sorted_nums = radix_sort(nums","votes":null},{"text":"\r\n    if not nums:\r\n        return []\r\n\r\n    max_num = max(nums)\r\n   ","votes":null},{"text":"\r\n    n = len(nums)\r\n    # get maximum number in list\r\n    max_num = max(nums)\r\n    # store digits of max_num\r\n    max_num_digits = len(str(max_num))\r\n    # loop through each digit in max_num\r\n    for digit in range(max_num_digits):\r\n        # initialize buckets\r\n        buckets = [[] for _ in range(10)]\r\n        # loop through each number in list\r\n        for num in nums:\r\n            # convert each number to string\r\n            num_as_str = str(num)\r\n            # get digit at index digit\r\n            digit_at_index = num_as_str[digit]\r\n            # get digit as integer\r\n            digit_as_int = int(digit_at_index)\r\n            # store number in correct bucket\r\n            buckets[digit_as_int].append(num)\r\n        # reset list to store sorted numbers\r\n        nums = []\r\n        # loop through each bucket\r\n        for bucket in buckets:\r\n            # loop through each number in bucket\r\n            for num in bucket:\r\n                # add number to correct place in list\r\n                nums.append(num)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_num = 0\r\n    for i in nums:\r\n        if i > max_num:\r\n            max_num = i\r\n    max_num += 1\r\n    buckets = []\r\n    for i in range(10):\r\n        buckets.append([])\r\n    for i in range(len(nums)):\r\n        digit = nums[i] % 10\r\n        buckets[digit].append(nums[i] \/\/ 10)\r\n        nums[i] -= digit * 10\r\n    for i in range(len(buckets)):\r\n        for j in range(len(buckets[i])):\r\n            nums[i * len(buckets[i]) + j] = buckets[i][j]\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize the buckets, and the max value\r\n    buckets = [[] for _ in range(10)]\r\n    max_val = max(nums)\r\n    \r\n    # For each digit of the max value\r\n    for digit in range(len(str(max_val))):\r\n        # For each value in the list\r\n        for val in nums:\r\n            # Get the digit of the val at the current digit\r\n            digit_val = digit_at(val, digit)\r\n            # Add it to the corresponding bucket\r\n            buckets[digit_val].append(val)\r\n            \r\n        # Re-construct the list by merging the buckets\r\n        nums = []\r\n        for bucket in buckets:\r\n            nums += bucket\r\n        buckets = [[] for _ in range(10)]\r\n    \r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # initialize\r\n    max_num = 0\r\n    for num in nums:\r\n        if num > max_num:\r\n            max_num = num\r\n    bucket = [[] for _ in range(max_num + 1)]\r\n    # first pass\r\n    for num in nums:\r\n        bucket[num].append(num)\r\n    # second pass\r\n    sorted_nums = []\r\n    for num in range(max_num + 1):\r\n        for num_ in bucket[num]:\r\n            sorted_nums.append(num_)\r\n    return sorted_nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [10, 4, 5, 2, 1]\r\n    print(radix_sort(nums))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n + max_num)\r\nSPACE COMPLEXITY: O(max_num)\r\n[NOTE: max_num is the maximum number in nums]\r\n\r\n","votes":null},{"text":"\r\n    # Get max number\r\n    max_num = max(nums)\r\n    # Get max length\r\n    max_length = len(str(max_num))\r\n    # Run radix sort\r\n    for i in range(max_length):\r\n        bucket = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit = (num \/\/ (10**i)) % 10\r\n            bucket[digit].append(num)\r\n        nums = []\r\n        for b in bucket:\r\n            nums += b\r\n    return nums\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [3, 2, 1, 32, 567, 2, 1, 5, 7, 32, 32, 10, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\r\n    print(radix_sort(nums))\r\n\r\n    '''\r\n    Output:\r\n    [1, 2, 2, 2, 3, 3, 3, 5, 10, 100, 200, 300, 400, 500, 567, 600, 700, 800, 900, 1000]\r\n    '''\r\n\r\n    nums = [3, 2, 1, 32, 567, 2, 1, 5, 7, 32, 32, 10, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 10000]\r\n    print(radi","votes":null},{"text":"\r\n    # Write your code here.\r\n   ","votes":null},{"text":"\r\n\r\n    if not isinstance(nums, list):\r\n        raise TypeError('nums must be a list')\r\n\r\n    if len(nums) < 2:\r\n        raise ValueError('nums must contain at least two elements')\r\n\r\n    max_val = max(nums)\r\n    max_num_len = len(str(max_val))\r\n    for i in range(max_num_len):\r\n        # Count the number of occurrences of each digit in the given range\r\n        count = [0] * 10\r\n        for x in nums:\r\n            count[get_digit(x, max_num_len - i - 1)] += 1\r\n\r\n        # Calculate the number of elements to be moved to the right\r\n        pos = [0] * 10\r\n        for i in range(1, 10):\r\n            pos[i] = pos[i - 1] + count[i - 1]\r\n\r\n        # Sort the elements using counting sort\r\n        for x in nums:\r\n            digit = get_digit(x, max_num_len - i - 1)\r\n            y = pos[digit]\r\n            nums[y] = x\r\n            pos[digit] += 1\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(nums)\r\n    max_num = max(nums)\r\n    if max_num == 0:\r\n        return nums\r\n\r\n   ","votes":null},{"text":"\r\n    # TODO: Implement radix sort here\r\n    # We could use counting sort to sort the list\r\n    # But, to deal with negative numbers, we need to use radix sort\r\n    # We need to find the max element in the list\r\n    # Here, we will use the 32nd digit as the max element in the list\r\n    # And then, we will sort using counting sort\r\n    max_element = 0\r\n    for i in range(len(nums)):\r\n        if nums[i] > max_element:\r\n            max_element = nums[i]\r\n    # We will use 32 digits\r\n    # So, we need to find the max element in the list\r\n    max_element = int(max_element)\r\n    # We will use 32 digits\r\n    # So, we need to find the max element in the list\r\n    max_element = int(max_element)\r\n    # We will use 32 digits\r\n    # So, we need to find the max element in the list\r\n    max_element = int(max_element)\r\n    # We will use 32 digits\r\n    # So, we need to find the max element in the list\r\n    max_element = int(max_element)\r\n    # We will use 32 digits\r\n    # So, we need to find the max element in the list\r\n    max_element = int(max_element)\r\n    # We will use 32 digits\r\n    # So, we need to find the max element in the list\r\n    max_element = int(max_element)\r\n    # We will use 32 digits\r\n    # So, we need to find the max element in the list\r\n    max_element = int(max_element)\r\n    # We will use 32 digits\r\n    # So, we need to find the max element in the list\r\n    max_element = int(max_element)\r\n    # We will use 32 digits\r\n    # So, we need to find the max element in the list\r\n  ","votes":null},{"text":"\r\n    # TODO: Implement radix sort.\r\n    # Return the sorted list.\r\n    length = len(nums)\r\n    max_elem = max(nums)\r\n    if length <= 1:\r\n        return nums\r\n\r\n    bucket_len = int(max_elem \/ length) + 1\r\n\r\n    buckets = [[] for _ in range(bucket_len)]\r\n\r\n    for num in nums:\r\n        buckets[num \/\/ length].append(num)\r\n\r\n    sorted_nums = []\r\n    for bucket in buckets:\r\n        for num in bucket:\r\n            sorted_nums.append(num)\r\n\r\n    return sorted_nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    # These \"asserts\" using only for self-checking and not necessary for\r\n    # auto-testing\r\n    assert radix_sort([2, 1, 10, 3, 0, 0, 2, 2]) == [0, 0, 1, 2, 2, 3, 10, 2]\r\n    assert radix_sort([5, 2, 1, 3, 0, 0, 2, 2]) == [0, 0, 1, 2, 2, 2, 3, 5]\r\n    assert radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    assert radix_sort([100, 1000, 10000, 100000, 1000000, 10000000,\r\n                       100000000, 1000000000, 1000000","votes":null},{"text":"\r\n\r\n    max_num = max(nums)\r\n    length = len(str(max_num))\r\n    for i in range(length):\r\n        radix_sort_once(nums, i)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums) <= 1:\r\n        return nums\r\n    m = max(nums)\r\n    for exp in range(1, len(str(m)) + 1):\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit = (num \/\/ (10 ** exp)) % 10\r\n            buckets[digit].append(num)\r\n        nums = [num for bucket in buckets for num in bucket]\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import doctest\r\n    doctest.testmod()\r\n\r\n    nums = [31, 2, 5, 22, 1, 0, 31, 5, 10, 31, 12, 16, 19, 24, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\r\n            31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\r\n            31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31","votes":null},{"text":"\r\n\r\n    # find a maximum element in the list\r\n    # max = max(nums)\r\n    max = 0\r\n    for a in nums:\r\n        if a > max:\r\n            max = a\r\n\r\n    # find the number of digits in the maximum element\r\n    digits = 0\r\n    while max > 0:\r\n        max = max \/\/ 10\r\n        digits += 1\r\n\r\n    # pass through all digits\r\n    for digit in range(digits):\r\n        # sort for each digit\r\n        pass\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # find the maximum element\r\n    max_number = 0\r\n    for num in nums:\r\n        if num > max_number:\r\n            max_number = num\r\n\r\n    # sort\r\n    for exp in range(1, len(str(max_number))):\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit = int(num \/ 10**exp) % 10\r\n            buckets[digit].append(num)\r\n        nums = []\r\n        for bucket in buckets:\r\n            nums.extend(bucket)\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # nums = [23, 1, 10, 9, 7, 15, 2]\r\n    # nums = [100, 200, 130, 1000, 30]\r\n    # nums = [123, 234, 345, 456, 567, 678, 789, 890, 901, 1011, 1112, 1213]\r\n    # nums = [10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]\r\n    # nums = [100, 200, 130, 1000, 30]\r\n    # nums = [123, 234, 345, 456, 567, 678, 789, 890, 901, 1011, 1112, 1213]\r\n    # nums ","votes":null},{"text":"\r\n    # Check for empty list\r\n    if not nums:\r\n        return nums\r\n    # Find the maximum element in the list\r\n    max_num = max(nums)\r\n    # Initialize the number of digits required to represent the number in base 10\r\n    num_digits = len(str(max_num))\r\n    # Iterate over the number of digits\r\n    for digit in range(num_digits):\r\n        # Initialize the buckets for each digit\r\n        buckets = [[] for _ in range(10)]\r\n        # Iterate over the list of numbers\r\n        for num in nums:\r\n            # Get the digit at the current digit position\r\n            digit_at_current_position = int(str(num)[digit])\r\n            # Add the number to the corresponding bucket\r\n            buckets[digit_at_current_position].append(num)\r\n        # Empty the list of numbers\r\n        nums.clear()\r\n        # Concatenate the numbers in each bucket\r\n        for bucket in buckets:\r\n            nums.extend(bucket)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    if not nums:\r\n        return []\r\n    mx = max(nums)\r\n    k = len(str(mx))\r\n    for i in range(k):\r\n        count_list = [0] * 10\r\n        for j in range(len(nums)):\r\n            count_list[int(nums[j][i])] += 1\r\n        for j in range(1, 10):\r\n            count_list[j] += count_list[j - 1]\r\n        for j in range(len(nums) - 1, -1, -1):\r\n            nums[count_list[int(nums[j][i])] - 1] = nums[j]\r\n            count_list[int(nums[j][i])] -= 1\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = []\r\n    while True:\r\n        try:\r\n            nums = [int(x) for x in input().split()]\r\n            break\r\n        except EOFError:\r\n            break\r\n    radix_sort(nums)\r\n    print(nums)\r\n\r\n# Solution\r\n#","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    max_len = len(str(max_num))\r\n    buckets = [[] for _ in range(10)]\r\n    for i in range(max_len):\r\n        for num in nums:\r\n            buckets[int(str(num)[i])].append(num)\r\n        nums.clear()\r\n        for bucket in buckets:\r\n            nums.extend(bucket)\r\n        buckets.clear()\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Test case 1:\r\n    print('Test case 1:')\r\n    print('Expected:', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\n    print('Actual:', radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n    # Test case 2:\r\n    print('Test case 2:')\r\n    print('Expected:', [10, 9, 8, 7, 6, 5, 4, 3, ","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    max_len = len(str(max_num))\r\n    bucket_len = max_len\r\n    \r\n    for i in range(max_len):\r\n        bucket = [[] for _ in range(bucket_len)]\r\n        for num in nums:\r\n            bucket[num \/\/ (10 ** i) % bucket_len].append(num)\r\n        nums.clear()\r\n        for i in range(bucket_len):\r\n            nums.extend(bucket[i])\r\n        bucket_len *= 10\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [1, 5, 6, 3, 8, 2, 7]\r\n    print(rad","votes":null},{"text":"\r\n    # check if list is empty or not\r\n    if not nums:\r\n        return nums\r\n    # check if list is only a single element\r\n    if len(nums) == 1:\r\n        return nums\r\n    # get the maximum element in the list\r\n    max_num = max(nums)\r\n    # check if list is all the same element\r\n    if max_num == min(nums):\r\n        return nums\r\n    # get the number of digits in the maximum element\r\n    num_digits = len(str(max_num))\r\n    # set the default bucket to the list\r\n    buckets = [[] for _ in range(10)]\r\n    # iterate through the list\r\n    for num in nums:\r\n        # get the number of digits in the current element\r\n        num_digits_num = len(str(num))\r\n        # check if the number of digits in the current element\r\n        # is less than the number of digits in the maximum element\r\n        if num_digits_num < num_digits:\r\n            # append the element to the list of the last digit\r\n            buckets[9].append(num)\r\n        else:\r\n            # get the position of the current element\r\n            pos = 0\r\n            while num_digits_num > num_digits:\r\n                # get the digit at the current position\r\n                digit = num \/\/ (10 ** pos) % 10\r\n                # append the element to the list of the digit\r\n                buckets[digit].append(num)\r\n                # increment the position\r\n                pos += 1\r\n                # get the number of digits in the current element\r\n                num_digits_num = len(str(num))\r\n    # sort the buckets\r\n    buckets = [radix_sort(bucket) for bucket in buckets]\r\n    # return the sorted list\r\n    return [num for bucket in buckets for num in bucket]\r\n\r\n\r","votes":null},{"text":"\r\n    # TODO: Implement radix sort\r\n    # if the list has no elements\r\n    if not nums:\r\n        return []\r\n    max_num = max(nums)\r\n    # get the length of the longest element\r\n    max_len = len(str(max_num))\r\n    # sort each digit\r\n    for digit in range(max_len):\r\n        # count the number of elements that need to be moved\r\n        for num in nums:\r\n            pass\r\n        # move the elements\r\n        for num in nums:\r\n            pass\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    radix = 10\r\n    max_num = max(nums)\r\n    count = [0 for _ in range(radix)]\r\n\r\n    for num in nums:\r\n        temp = num\r\n        for i in range(len(str(num))):\r\n            count[temp % radix] += 1\r\n            temp \/\/= radix\r\n\r\n    for i in range(1, radix):\r\n        count[i] += count[i - 1]\r\n\r\n    sorted_nums = []\r\n    for num in nums:\r\n        temp = num\r\n        for i in range(len(str(num))):\r\n            sorted_nums.insert(count[temp % radix] - 1, temp)\r\n            temp \/\/= radix\r\n\r\n    return sorted_nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [3213, 123123, 321, 12312312, 123, 213213, 213123123, 123213123, 123123123123]\r\n    print(radix_sort(nums))\r\n    # for i in range(101):\r\n    #     nums.append(i)\r\n    # print(radix_sort(nums))\r\n","votes":null},{"text":"\r\n    # Start with the largest power of 10 that will fit in the number\r\n    # of digits in the largest element.\r\n    max_element = max(nums)\r\n    base = 10\r\n    while max_element \/ base >= 1:\r\n        # Call the counting sort function.  Pass in the list, the power of 10\r\n        # to use, and the maximum element.\r\n        nums = counting_sort(nums, base)\r\n        base *= 10\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # get max value\r\n    max_value = max(nums)\r\n    print(max_value)\r\n    # get base\r\n    base = 10\r\n    while max_value > 0:\r\n        max_value = max_value \/\/ base\r\n        base = base * 10\r\n\r\n    # sort\r\n    for i in range(base \/\/ 10):\r\n        count = [0] * 10\r\n        for n in nums:\r\n            count[(n \/\/ (base \/\/ 10)) % 10] += 1\r\n        for j in range(9, -1, -1):\r\n            count[j] = count[j - 1] + count[j]\r\n        for n in nums:\r\n            idx = count[(n \/\/ (base \/\/ 10)) % 10]\r\n            nums[idx - 1] = n\r\n            count[(n \/\/ (base \/\/ 10)) % 10] -= 1\r\n    print(nums)\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(radix_sort([1, 3, 2, 5, 4, 7, 6, 9, 8, 10]))\r\n    print(radix_sort([1, 3, 2, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(radix_sort([1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n    print(radix_sort([1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14","votes":null},{"text":"\r\n    # Write your code here.\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    if max_num == min_num:\r\n        return nums\r\n    max_num = abs(max_num)\r\n    min_num = abs(min_num)\r\n\r\n    max_num_length = len(str(max_num))\r\n    min_num_length = len(str(min_num))\r\n    length = max(max_num_length, min_num_length)\r\n    for i in range(length):\r\n        count = [0 for _ in range(10)]\r\n        for num in nums:\r\n            count[(num \/\/ (10 ** i)) % 10] += 1\r\n        for j in range(1, 10):\r\n            count[j] += count[j - 1]\r\n        for num in nums[::-1]:\r\n            count[(num \/\/ (10 ** i)) % 10] -= 1\r\n            tmp = count[(num \/\/ (10 ** i)) % 10]\r\n            nums[tmp] = num\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [231, 2, 13, 4, 6, 20, 5, 31, 10, 19]\r\n    print(radix_sort(nums))\r\n    nums = [99, 4, 1, 5, 1000, 1000, 10, 100, 2, 6, 36, 2, 12, 2, 13, 14, 15, 16, 2, 17, 18, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 2","votes":null},{"text":"\r\n    nums = list(map(int, nums))\r\n    if len(nums) <= 1:\r\n        return nums\r\n\r\n    max_num = max(nums)\r\n    max_num_len = len(str(max_num))\r\n\r\n    for i in range(max_num_len):\r\n        nums = _count_sort(nums, i)\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    size = len(nums)\r\n    max_val = max(nums)\r\n    exp = 1\r\n\r\n    while max_val \/\/ exp > 0:\r\n        count = [0] * 10\r\n        output = [None] * size\r\n\r\n        for i in range(size):\r\n            count[(nums[i] \/\/ exp) % 10] += 1\r\n\r\n        for i in range(1, 10):\r\n            count[i] += count[i-1]\r\n\r\n        for i in range(size-1, -1, -1):\r\n            output[count[(nums[i] \/\/ exp) % 10]-1] = nums[i]\r\n            count[(nums[i] \/\/ exp) % 10] -= 1\r\n\r\n        nums = output\r\n        exp *= 10\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert radix_sort([170, 45, 75, 90, 802, 24, 2, 66]) == [2, 24, 45, 66, 75, 802, 90, 170]\r\n    assert radix_sort([12, 333, 33, 3333, 33333]) == [12, 33, 333, 3333, 33333]\r\n    assert radix_sort([-2147483648, -21","votes":null},{"text":"\r\n    # find the largest element in the list\r\n    largest = max(nums)\r\n\r\n    # loop from 0 to the length of the largest element\r\n    for i in range(len(str(largest))):\r\n        # create buckets and store the elements in them\r\n        buckets = [[] for _ in range(10)]\r\n\r\n        # for every element in the list\r\n        for num in nums:\r\n            # append the element to the bucket where it belongs\r\n            digit = int(str(num)[i])\r\n            buckets[digit].append(num)\r\n\r\n        # flatten the buckets and store the elements in the original list\r\n        nums[:] = []\r\n        for bucket in buckets:\r\n            nums += bucket\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums) <= 1:\r\n        return nums\r\n\r\n    max_number = max(nums)\r\n    max_number_length = len(str(max_number))\r\n    buckets = [[] for _ in range(max_number_length)]\r\n\r\n    for number in nums:\r\n        buckets[digit_of_num(number, max_number_length)].append(number)\r\n\r\n    return [number for bucket in buckets for number in bucket]\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = max(nums)\r\n    for i in range(1, len(str(max_length))):\r\n        count = [0] * 10\r\n        for j in nums:\r\n            digit = j \/\/ (10 ** i) % 10\r\n            count[digit] += 1\r\n        for j in range(1, len(count)):\r\n            count[j] += count[j - 1]\r\n        sorted_nums = []\r\n        for j in nums:\r\n            digit = j \/\/ (10 ** i) % 10\r\n            count[digit] -= 1\r\n            sorted_nums.insert(count[digit], j)\r\n        nums = sorted_nums\r\n    return nums\r\n\r\n\r\n# tests\r\nprint(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))\r\n# [2, 24, 45, 66, 75, 90, 170, 802]\r\n\r\nprint(radix_sort([1024, 128, 64, 32, 16, 8, 4, 2, 1]))\r\n# [1, 2, 4, 8, 16, 32, 64, 128, 1024]\r\n\r\nprint(radix_sort([576, 468, 252, 640, 324, 160, 80, 40, 20, 10]))\r\n# [10, 20, 40, 80, 160, 324, 640, 252, 468, 576]\r\n\r\nprint(radix_sort([3, 30, 33, 330,","votes":null},{"text":"\r\n    # Check empty list\r\n    if len(nums) == 0:\r\n        return []\r\n\r\n    # Find the largest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Get the length of the largest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Find the maximum length\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Find the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Find the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Get the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Get the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Get the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Find the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Find the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Find the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Find the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Find the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Find the length of the longest number\r\n    max_len = len(max(nums, key=len))\r\n\r\n    # Find the length of the longest number\r\n    max_len = len(max(nums, key=le","votes":null},{"text":"\r\n    \r\n    # make sure nums is not empty\r\n    if len(nums) == 0:\r\n        return nums\r\n    \r\n    # get the maximum number in the list\r\n    max_num = max(nums)\r\n    \r\n    # get the maximum number of digits\r\n    digits = len(str(max_num))\r\n    \r\n    # sort the list\r\n    for digit in range(digits - 1, -1, -1):\r\n        \r\n        # sort each digit\r\n        for num in nums:\r\n            bucket = radix_sort_bucket(num, digit)\r\n            nums[nums.index(num)] = bucket\r\n        \r\n        # concatenate the buckets\r\n        nums = radix_sort_concatenate(nums)\r\n    \r\n    return nums\r\n    \r","votes":null},{"text":"\r\n    pass\r\n\r\nif __name__ == '__main__':\r\n    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]\r\n    print(radix_sort(nums))\r","votes":null},{"text":"\r\n\r\n    # if there is only one number\r\n    if len(nums) == 1:\r\n        return nums\r\n\r\n    # get the maximum number\r\n    max_num = max(nums)\r\n\r\n    # get the maximum number's length\r\n    max_num_length = len(str(max_num))\r\n\r\n    # initialize the bucket\r\n    bucket = [[] for _ in range(10)]\r\n\r\n    # perform counting sort for each digit\r\n    for i in range(max_num_length):\r\n\r\n        # initialize the digits\r\n        digits = [0 for _ in range(10)]\r\n\r\n        # push the number into the bucket\r\n        for j in range(len(nums)):\r\n            digit = nums[j] \/\/ (10 ** i) % 10\r\n            digits[digit] += 1\r\n\r\n        # perform counting sort\r\n        for j in range(1, 10):\r\n            digits[j] += digits[j - 1]\r\n\r\n        # get the number's digit\r\n        for j in range(len(nums)):\r\n            digit = nums[j] \/\/ (10 ** i) % 10\r\n            bucket[digits[digit] - 1].append(nums[j])\r\n            digits[digit] -= 1\r\n\r\n        # reset the number\r\n        nums = []\r\n        for j in range(10):\r\n            nums += bucket[j]\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Check if list is empty\r\n    if len(nums) == 0:\r\n        return nums\r\n    # Get the maximum element in the list\r\n    max_num = max(nums)\r\n    # Find the maximum number of digits\r\n    n = len(str(max_num))\r\n    # Iterate through the list and use counting sort for each digit\r\n    for i in range(n):\r\n        # Initialize the digit count array\r\n        count = [0 for _ in range(10)]\r\n        # Initialize the output list\r\n        output = [0 for _ in range(len(nums))]\r\n        # Iterate through the list and increment the digit count\r\n        for j in range(len(nums)):\r\n            count[int((nums[j] \/\/ (10**i)) % 10)] += 1\r\n        # Increment the digit count array\r\n        for j in range(1, 10):\r\n            count[j] += count[j-1]\r\n        # Iterate through the list and add the numbers to the output\r\n        for j in range(len(nums) - 1, -1, -1):\r\n            output[count[int((nums[j] \/\/ (10**i)) % 10)] - 1] = nums[j]\r\n            count[int((nums[j] \/\/ (10**i)) % 10)] -= 1\r\n        nums = output\r\n    return nums\r\n\r\n\r\nprint(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))\r\nprint(radix_sort([170, 45, 75, 90, 802, 24, 2, 66, 0, -2, 21, 3, 1, 11, 8, 9, 21, 34, 6, 2, ","votes":null},{"text":"\r\n    if len(nums) == 0:\r\n        return []\r\n    # find the maximum number\r\n    max_num = max(nums)\r\n    # find the number of digits\r\n    digits = len(str(max_num))\r\n    # store the number of digits\r\n    result = [[] for _ in range(digits)]\r\n    # put each number in the result list\r\n    for num in nums:\r\n        current_digit = 0\r\n        while num:\r\n            result[current_digit].append(num % 10)\r\n            num \/\/= 10\r\n            current_digit += 1\r\n    # sort each digit\r\n    for digit in result:\r\n        digit.sort()\r\n    # find the number of elements in the result list\r\n    number_of_elements = len(result[0])\r\n    # put the elements in the result list in the original list\r\n    for i in range(number_of_elements):\r\n        for digit in result:\r\n            nums.append(digit[i])\r\n\r\n\r\n# test\r\nnums = [1, 100, 200, 2, 3, 1000, 10000, 100000]\r\nradix_sort(nums)\r\nprint(nums)\r\n\r\n\r","votes":null},{"text":"\r\n    # initialize max element\r\n    max_element = max(nums)\r\n    # initialize max digit\r\n    max_digit = len(str(max_element))\r\n    # initialize counter\r\n    counter = [0] * max_digit\r\n    # initialize nums_copy\r\n    nums_copy = nums.copy()\r\n    # initialize nums_copy_with_digit\r\n    nums_copy_with_digit = [0] * len(nums)\r\n    # initialize sorted_nums\r\n    sorted_nums = [0] * len(nums)\r\n    # radix sort\r\n    for digit in range(max_digit):\r\n        # initialize counter\r\n        counter = [0] * 10\r\n        # count number of elements with specific digit\r\n        for i in range(len(nums_copy)):\r\n            digit_value = nums_copy[i] \/\/ int(10 ** digit) % 10\r\n            counter[digit_value] += 1\r\n        # calculate cumulative sum of counter\r\n        for i in range(1, 10):\r\n            counter[i] += counter[i - 1]\r\n        # rearrange nums_copy\r\n        for i in range(len(nums_copy) - 1, -1, -1):\r\n            digit_value = nums_copy[i] \/\/ int(10 ** digit) % 10\r\n            nums_copy_with_digit[counter[digit_value] - 1] = nums_copy[i]\r\n            counter[digit_value] -= 1\r\n        # update nums_copy\r\n        nums_copy = nums_copy_with_digit\r\n    # update sorted_nums\r\n    for i in range(len(nums_copy)):\r\n        sorted_nums[i] = nums_copy[i]\r\n    return sorted_nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Sort the list based on the first digit\r\n   ","votes":null},{"text":"\r\n    longest_num = max(nums)\r\n    # find the length of the longest number\r\n    max_length = len(str(longest_num))\r\n    # find the length of the longest number\r\n    # create a list of buckets for each digit\r\n    buckets = [[] for _ in range(10)]\r\n\r\n    for digit in range(max_length):\r\n        # iterate through the list of numbers\r\n        for num in nums:\r\n            # extract the digit at index digit\r\n            digit_of_num =","votes":null},{"text":"\r\n    # your code here\r\n    if len(nums) == 0:\r\n        return []\r\n    max_num = max(nums)\r\n    max_num_digits = len(str(max_num))\r\n\r\n    # sort based on each digit\r\n    for digit in range(max_num_digits):\r\n        count = [0] * 10\r\n        for num in nums:\r\n            count[get_digit(num, digit)] += 1\r\n        for i in range(1, 10):\r\n            count[i] += count[i - 1]\r\n        sorted_nums = [0] * len(nums)\r\n        for num in nums[::-1]:\r\n            sorted_nums[count[get_digit(num, digit) - 1] - 1] = num\r\n            count[get_digit(num, digit)] -= 1\r\n        nums = sorted_nums[::-1]\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    bucket_size = int(max_num \/ 10)\r\n    buckets = [[] for _ in range(10)]\r\n    for num in nums:\r\n        buckets[num \/\/ bucket_size].append(num % 10)\r\n    for i in range(10):\r\n        for num in buckets[i]:\r\n            nums.append(num * 10)\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [1, 9, 8, 12, 5, 3, 2, 4, 7, 6]\r\n    print(radix_sort(nums))\r\n\r\n    nums = [12, 34, 10, 11, 31, 30]\r\n    print(radix_sort(nums))\r\n\r\n    nums = [10, 34, 12, 31, 30, 33]\r\n    print(radix_sort(nums))\r\n\r\n    nums = [12, 34, 10, 11, 31, 30, 33]\r\n    print(radix_sort(nums))\r\n\r\n    nums = [12, 34, 10, 11, 31, 30, 33, 35, 32, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\r\n    print(radix_sort(num","votes":null},{"text":"\r\n\r\n    n = len(nums)\r\n    # radix sort\r\n    # radix sort is a non-comparison sorting algorithm\r\n    # it groups the numbers according to the place value (or digit) of the number\r\n    # for example, 1024\r\n    # the 1's place value is 1, 10's place value is 10, 100's place value is 100\r\n    # we sort the list first by the 1's place value\r\n    # then the 10's place value\r\n    # then the 100's place value\r\n    # we do this until the numbers are sorted\r\n    # we use counting sort to sort the numbers\r\n\r\n    # find the maximum value in the list\r\n    max_val = max(nums)\r\n\r\n    # find the maximum number of digits\r\n    max_digits = len(str(max_val))\r\n\r\n    # find the maximum number of digits in the number of the list\r\n    # the length of the list is n\r\n    # the number of digits in the largest number is max_digits\r\n    # therefore, the number of digits in the smallest number is max_digits - n\r\n    # if the number of digits in the smallest number is 0, then the list is sorted\r\n    # if the number of digits in the smallest number is 1, then we only have to sort the first digit\r\n    # if the number of digits in the smallest number is 2, then we only have to sort the first and second digits\r\n    # if the number of digits in the smallest number is 3, then we only have to sort the first, second, and third digits\r\n    # ...\r\n    # if the number of digits in the smallest number is k, then we only have to sort the first, second, ... kth digits\r\n    # we will keep track of the number of digits in the smallest number\r\n    # if the number of digits in the smallest number is 0, then the list is sorted\r\n    # if the number of digit","votes":null},{"text":"\r\n    # initialize buckets to store elements\r\n    buckets = [[] for _ in range(10)]\r\n\r\n    # get the maximum element from the list\r\n    max_elem = max(nums)\r\n\r\n    # get the maximum integer's digit\r\n    max_digit = len(str(max_elem))\r\n\r\n    for power in range(max_digit):\r\n        for num in nums:\r\n            # get the element's digit\r\n            digit = (num \/\/ (10 ** power)) % 10\r\n            # append the element to the bucket\r\n            buckets[digit].append(num)\r\n\r\n        # store the elements in sorted order in the original list\r\n        index = 0\r\n        for bucket in buckets:\r\n            for num in bucket:\r\n                nums[index] = num\r\n                index += 1\r\n\r\n        # clear the buckets\r\n        buckets = [[] for _ in range(10)]\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [14, 11, 2, 7, 9, 12, 8, 10, 5, 13]\r\n    radix_sort(nums)\r\n","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    bucket_size = 1\r\n    while max_num \/ bucket_size > 0:\r\n        bucket_index = [[] for i in range(10)]\r\n        for num in nums:\r\n            bucket_index[(num \/ bucket_size) % 10].append(num)\r\n        nums = []\r\n        for bucket in bucket_index:\r\n            nums.extend(bucket)\r\n        bucket_size *= 10\r\n    return nums\r\n    \r","votes":null},{"text":"\r\n    if nums is None:\r\n        raise ValueError(\"The list of numbers is None.\")\r\n    if len(nums) < 2:\r\n        raise ValueError(\"The list of numbers is too short (less than 2).\")\r\n\r\n    max_num = max(nums)\r\n    base = 10\r\n    buckets = [[] for _ in range(base)]\r\n    for i in range(len(nums)):\r\n        j = int(nums[i] \/ base)\r\n        buckets[j].append(nums[i])\r\n    for i in range(len(buckets)):\r\n        for j in buckets[i]:\r\n            nums.remove(j)\r\n            nums.insert(0, j)\r\n    print(nums)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    radix_sort([1, 2, 10, 20, 21, 22, 23, 24, 25])\r\n    radix_sort([1, 22, 10, 20, 21, 2, 23, 24, 25])\r\n    radix_sort([1, 22, 10, 20, 21, 2, 23, 24, 25, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\r\n    radix_sort([1, 22, 10, 20, 21, 2, 23, 24, 25, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1","votes":null},{"text":"\r\n    # get max number\r\n    max_num = 0\r\n    for i in nums:\r\n        if i > max_num:\r\n            max_num = i\r\n    # get max length\r\n    max_len = 0\r\n    while max_num:\r\n        max_num = max_num \/\/ 10\r\n        max_len += 1\r\n    # create buckets\r\n    buckets = []\r\n    for i in range(10):\r\n        buckets.append([])\r\n    # create counter\r\n    counter = []\r\n    for i in range(max_len):\r\n        counter.append(0)\r\n    # get each digit of each number\r\n    for num in nums:\r\n        digit = 0\r\n        while num:\r\n            digit = num % 10\r\n            num = num \/\/ 10\r\n            # update counter\r\n            counter[max_len - i - 1] += 1\r\n            # append to bucket\r\n            buckets[digit].append(nums[nums.index(num)])\r\n    # get new list\r\n    new_list = []\r\n    for i in range(10):\r\n        for j in range(counter[i]):\r\n            new_list.append(buckets[i][j])\r\n    return new_list\r\n    \r\n\r\nif __name__ == \"__main__\":\r\n    nums = [23, 12, 8, 43, 62, 33, 8, 39, 7, 40, 79, 45, 99, 73, 33, 99, 89, 63, 2, 55, 17]\r\n    print(radix_sort(nums))\r\n\r\n\r\n# Answer:\r\n# [2, 12, 8, 33, 39, 7, 73, 43, 62,","votes":null},{"text":"\r\n    if len(nums) <= 1:\r\n        return nums\r\n    max_num = max(nums)\r\n    max_num_len = len(str(max_num))\r\n    for step in range(max_num_len):\r\n        bucket = [[] for _ in range(10)]\r\n        for num in nums:\r\n            index = (num \/\/ (10 ** step)) % 10\r\n            bucket[index].append(num)\r\n        nums = []\r\n        for num in bucket:\r\n            nums += sorted(num)\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [2, 3, 4, 5, 1, 6, 7, 8, 9, 0]\r\n    print(radix_sort(nums))\r\n    nums = [2, 3, 4, 5, 1, 6, 7, 8, 9, 0, 10]\r\n    print(radix_sort(nums))\r\n    nums = [2, 3, 4, 5, 1, 6, 7, 8, 9, 0, 10, 11]\r\n    print(radix_sort(nums))\r\n    nums = [2, 3, 4, 5, 1, 6, 7, 8, 9, 0, 10, 11, 12]\r\n    print(radix_sort(nums))\r\n    nums = [2, 3, 4, 5, 1, 6, 7, 8, 9, 0, 10, 11, 12, 13]\r\n    print(radix_sort(nums))\r\n    nums = [2, 3, 4, 5, 1, 6, 7, 8, 9, 0, 1","votes":null},{"text":"\r\n\r\n    # Get maximum value from list\r\n    max_value = max(nums)\r\n\r\n    # Number of digits in the maximum value\r\n    max_value_length = len(str(max_value))\r\n\r\n    # Sort list based on each digit\r\n    for digit_index in range(max_value_length):\r\n        # Get digit at specific index\r\n        digit_list = [int(digit) for digit in str(max_value)]\r\n\r\n        # Create a list of buckets based on the digit at current index\r\n        buckets = [[] for i in range(10)]\r\n\r\n        # Populate the buckets\r\n        for num in nums:\r\n            digit = num \/\/ (10 ** digit_index) % 10\r\n            buckets[digit].append(num)\r\n\r\n        # Sort the buckets\r\n        sorted_buckets = []\r\n        for bucket in buckets:\r\n            sorted_buckets.extend(radix_sort(bucket))\r\n\r\n        # Replace the list with the sorted buckets\r\n        nums = sorted_buckets\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [11121, 211231, 1111, 1112, 31111, 111, 11111, 111121, 11113, 111211,\r\n            211112, 111111, 11111, 211121, 11112, 111111, 11112, 11112, 11113,\r\n            1112, 1111, 11111, 21111, 111111, 11111, 11121, 1","votes":null},{"text":"\r\n\r\n    # Get maximum value in the list\r\n    max_val = max(nums)\r\n\r\n    # Get the maximum length of the number\r\n    max_len = len(str(max_val))\r\n\r\n    # Iterate over digits\r\n    for digit in range(max_len):\r\n\r\n        # Make a counter array\r\n        counter = [0] * 10\r\n\r\n        # Count the number of elements in each digit\r\n        for num in nums:\r\n            counter[(num \/\/ (10 ** digit)) % 10] += 1\r\n\r\n        # Calculate cumulative counts\r\n        for i in range(9, 0, -1):\r\n            counter[i - 1] = counter[i] + counter[i - 1]\r\n\r\n        # Place the elements in their right positions\r\n        for i in reversed(range(len(nums))):\r\n            num = nums[i]\r\n            pos = counter[(num \/\/ (10 ** digit)) % 10] - 1\r\n            nums[pos] = num\r\n            counter[(num \/\/ (10 ** digit)) % 10] -= 1\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # initialize the buckets\r\n    buckets = [[] for _ in range(10)]\r\n    # find the maximum element\r\n    max_element = max(nums)\r\n    # find the place value\r\n    place_value = 1\r\n    while max_element \/\/ place_value > 0:\r\n        # place the elements in buckets\r\n        for num in nums:\r\n            bucket_index = (num \/\/ place_value) % 10\r\n            buckets[bucket_index].append(num)\r\n        # re-arrange the list\r\n        nums.clear()\r\n        for bucket in buckets:\r\n            for num in bucket:\r\n                nums.append(num)\r\n        place_value *= 10\r\n    return nums\r\n\r\n\r\nnums = [170, 45, 75, 90, 802, 24, 2, 66]\r\nprint(radix_sort(nums))\r\n# [2, 24, 45, 66, 75, ","votes":null},{"text":"\r\n    if len(nums) <= 1:\r\n        return nums\r\n    max_num = max(nums)\r\n    max_num_length = len(str(max_num))\r\n    for digit in range(max_num_length):\r\n        digit_bins = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit_bins[get_digit(num, digit)].append(num)\r\n        nums = []\r\n        for digit_bin in digit_bins:\r\n            nums += digit_bin\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    max_number = max(nums)\r\n    max_length = len(str(max_number))\r\n    buckets = [[] for _ in range(10)]\r\n    for i in range(max_length):\r\n        for num in nums:\r\n            last_digit = num % 10\r\n            buckets[last_digit].append(num)\r\n            nums.remove(num)\r\n        for j in range(len(buckets)):\r\n            for num in buckets[j]:\r\n                nums.append(num)\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n    doctest.testmod()\r\n\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ","votes":null},{"text":"\r\n    # Return the empty list if the list is empty.\r\n    if len(nums) == 0:\r\n        return []\r\n\r\n    # Find the length of the maximum number.\r\n    length = len(max(nums, key=len))\r\n\r\n    # Iterate through all the digits.\r\n    for digit in range(length):\r\n\r\n        # Initialize digit counters.\r\n        counters = [0] * 10\r\n\r\n        # Count the number of each digit.\r\n        for num in nums:\r\n            counters[(ord(num[digit]) - ord('0'))] += 1\r\n\r\n        # Calculate the starting index for each digit.\r\n        for i in range(1, 10):\r\n            counters[i] += counters[i - 1]\r\n\r\n        # Sort the numbers.\r\n        sorted_nums = []\r\n\r\n        for num in nums:\r\n            digit = ord(num[digit]) - ord('0')\r\n            sorted_nums.insert(counters[digit] - 1, num)\r\n            counters[digit] -= 1\r\n\r\n        nums = sorted_nums\r\n\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = ['","votes":null},{"text":"\r\n    if len(nums) == 1:\r\n        return nums\r\n    max_num = max(nums)\r\n    max_len = len(str(max_num))\r\n    buckets = [[] for _ in range(10)]\r\n    for i in range(max_len):\r\n        for num in nums:\r\n            buckets[num \/\/ (10 ** i) % 10].append(num)\r\n        nums.clear()\r\n        for bucket in buckets:\r\n            nums += bucket\r\n        buckets.clear()\r\n    return nums\r\n\r\n\r\n# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n# nums = [99, 44, 6, 2, 1, 5, 63, 87, 283, 474]\r\nnums = [4, 33, 3, 9, 38, 27, 47, 12, 46, 4]\r\nprint(radix_sort(nums))\r","votes":null},{"text":"\r\n\r\n    # Get the maximum value in the list.\r\n    max_val = max(nums)\r\n\r\n    # Count the number of digits in the maximum value.\r\n    max_val_len = len(str(max_val))\r\n\r\n    for idx in range(max_val_len):\r\n\r\n        # Create a histogram of the elements.\r\n        hist_dict = {}\r\n\r\n        for num in nums:\r\n\r\n            # Get the current digit of the element.\r\n            digit = (num \/\/ (10 ** idx)) % 10\r\n\r\n            # Increment the value in the histogram.\r\n            hist_dict[digit] = hist_dict.get(digit, 0) + 1\r\n\r\n        # Create an array to store the element in sorted order.\r\n        sorted_nums = []\r\n\r\n        # For each digit in the histogram,\r\n        # append the element in sorted order to the sorted array.\r\n        for digit in range(10):\r\n            for _ in range(hist_dict.get(digit, 0)):\r\n                sorted_nums.append(digit)\r\n\r\n        # Replace the list with the sorted lists.\r\n        nums = sorted_nums\r\n\r\n    return nums\r\n\r\n\r\n# Test cases.\r\nnums = [3, 2, 1, 4, 5, 6, 10, 9, 8, 7]\r\nprint(radix_sort(nums))\r\n\r\nnums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(radix_sort(nums))\r\n\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(radix_sort(nums))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    max_num = max(nums)\r\n    max_num_len = len(str(max_num))\r\n    for i in range(max_num_len):\r\n        bucket = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit = (num \/\/ (10 ** (max_num_len - i - 1))) % 10\r\n            bucket[digit].append(num)\r\n        nums = []\r\n        for i in range(10):\r\n            for num in bucket[i]:\r\n                nums.append(num)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # 1. find the maximum element\r\n    max_num = max(nums)\r\n    # 2. find the maximum digit\r\n    max_digit = len(str(max_num))\r\n    # 3. count the number of elements in each digit\r\n    count = [0] * 10\r\n\r\n    # 4. sort the array\r\n    for num in nums:\r\n        digit = 1\r\n        while digit <= max_digit:\r\n            digit_num = (num \/\/ digit) % 10\r\n            count[digit_num] += 1\r\n            digit *= 10\r\n    for i in range(1, len(count)):\r\n        count[i] += count[i - 1]\r\n    sorted_nums = [0] * len(nums)\r\n    for num in nums:\r\n        digit = 1\r\n        while digit <= max_digit:\r\n            digit_num = (num \/\/ digit) % 10\r\n            count[digit_num] -= 1\r\n            sorted_nums[count[digit_num]] = num\r\n            digit *= 10\r\n    nums[:] = sorted_nums\r\n\r\n\r","votes":null},{"text":"\r\n    # 1. Find the maximum number in the list\r\n    max_num = max(nums)\r\n\r\n    # 2. Find the maximum digit in this number\r\n    max_digit = 0\r\n    while max_num > 0:\r\n        max_num = max_num \/\/ 10\r\n        max_digit += 1\r\n\r\n    # 3. Sort the list using radix sort\r\n    # For each digit\r\n    for digit in range(max_digit):\r\n        # Sort the list\r\n        count = [0] * 10\r\n        for num in nums:\r\n            digit_num = (num \/\/ (10**digit)) % 10\r\n            count[digit_num] += 1\r\n        for i in range(1, 10):\r\n            count[i] += count[i - 1]\r\n        sorted_nums = []\r\n        for num in nums:\r\n            digit_num = (num \/\/ (10**digit)) % 10\r\n            count[digit_num] -= 1\r\n            sorted_nums.insert(count[digit_num], num)\r\n        nums = sorted_nums\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [3, 2, 5, 7, 1, 4, 9, 8, 6]\r\n    sorted_nums = radix_sort(nums)\r\n    print(sorted_nums)\r\n\r\n    nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\r\n    sorted_nums = radix_sort(nums)\r\n    print(sorted_nums)\r\n\r\n    nums = [1, 100, 10, 1000]\r\n    sorted_nums = radix_sort(nums)\r\n    print(sorted_nums)\r\n\r\n    num","votes":null},{"text":"\r\n    # Sort the list using radix sort\r\n    # The return value is the sorted list\r\n    # A list of integers or floats\r\n    # Time complexity: O(nk)\r\n\r\n    # The first pass sorts the list by the last digit\r\n    # The second pass sorts the list by the second to last digit\r\n    # The third pass sorts the list by the third to last digit\r\n    # The fourth pass sorts the list by the fourth to last digit\r\n    # The fifth pass sorts the list by the fifth to last digit\r\n    # The sixth pass sorts the list by the sixth to last digit\r\n\r\n    list_len = len(nums)\r\n    # The largest element in the list\r\n    # The number of digits in the largest element\r\n    largest_element = find_largest_element(nums)\r\n    num_digits = len(str(largest_element))\r\n\r\n    # The first pass sorts the list by the last digit\r\n    # The second pass sorts the list by the second to last digit\r\n    # The third pass sorts the list by the third to last digit\r\n    # The fourth pass sorts the list by the fourth to last digit\r\n    # The fifth pass sorts the list by the fifth to last digit\r\n    # The sixth pass sorts the list by the sixth to last digit\r\n    for digit_position in range(num_digits, 0, -1):\r\n        # The number of elements in each bucket\r\n        # A list of integers\r\n        num_elements = [0] * 10\r\n        # The index of the element in the list that is currently being sorted\r\n        # An integer\r\n        index = 0\r\n        while index < list_len:\r\n            # The digit at the current position in the element\r\n            # An integer\r\n            digit = digit_at_position(nums[index], digit_position)\r\n            # The index of the bucket that the element will be added to\r\n            # An integer\r\n            bucket_index = digit\r\n            # Add the element to the bucket\r\n            nums[inde","votes":null},{"text":"\r\n    # get the max element\r\n    m = max(nums)\r\n    # get the length of element\r\n    n = len(str(m))\r\n    # sort using counting sort\r\n    for i in range(n, -1, -1):\r\n        # count the number of element\r\n        c = [0] * 10\r\n        for j in range(len(nums)):\r\n            c[(nums[j] \/\/ 10 ** i) % 10] += 1\r\n        # cumulative sum\r\n        for j in range(1, 10):\r\n            c[j] += c[j - 1]\r\n        # sort\r\n        for i in range(len(nums) - 1, -1, -1):\r\n            nums[c[(nums[i] \/\/ 10 ** i) % 10] - 1] = nums[i]\r\n            c[(nums[i] \/\/ 10 ** i) % 10] -= 1\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [5, 3, 2, 8, 6, 1, 4, 7, 9]\r\n    print(radix_sort(nums))\r\n    nums = [","votes":null},{"text":"\r\n\r\n    # TODO: implement radix sort\r\n    # for now, let's at least get it working for numbers up to 10\r\n    # you can change the maximum number below to test your function\r\n    max_num = 10\r\n    digits = 1\r\n\r\n    # find the maximum number\r\n    for number in nums:\r\n        if number > max_num:\r\n            max_num = number\r\n\r\n    # determine the number of digits in the maximum number\r\n    while max_num >= 10**digits:\r\n        digits += 1\r\n\r\n    # sort the numbers in the list by each digit\r\n    for digit in range(digits):\r\n        nums = radix_sort_by_digit(nums, digit, max_num)\r\n\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    if not nums:\r\n        return nums\r\n    max_num = max(nums)\r\n    max_length = len(str(max_num))\r\n    for i in range(max_length):\r\n        buckets = [[] for _ in range(10)]\r\n        for num in nums:\r\n            digit = (num \/\/ (10 ** (max_length - 1 - i))) % 10\r\n            buckets[digit].append(num)\r\n        nums.clear()\r\n        for bucket in buckets:\r\n            nums.extend(bucket)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    pass\r\n\r","votes":null},{"text":"\r\n    # 1. Find the max element in the array.\r\n    # 2. Get the number of digits in the max element.\r\n    # 3. Build m buckets, where m is the number of digits in the max element.\r\n    # 4. For each digit in the max element, put all the elements with that digit in a bucket.\r\n    # 5. Sort the buckets.\r\n    # 6. Flatten the sorted buckets.\r\n\r\n    if not nums:\r\n        return nums\r\n\r\n    max_element = max(nums)\r\n    max_length = len(str(max_element))\r\n    buckets = [[] for _ in range(max_length)]\r\n\r\n    for num in nums:\r\n        for digit in str(num):\r\n            buckets[int(digit)].append(num)\r\n\r\n    for bucket in buckets:\r\n        bucket.sort()\r\n\r\n    flattened = []\r\n    for bucket in buckets:\r\n        flattened += bucket\r\n\r\n    return flattened\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(radix_sort([170, 45, 75, 90, 802, 24, 2, 66]))\r\n    print(radix_sort([5, 12, 7, 54, 23, 87, 546, 123, 43, 32, 67, 89, 456, 789, 543, 435, 876, 321, 678, 678, 1, 123, 334, 567, 789, 90, 6, 123, 890, 765, 456, 763, 546, 567, 234, 112, ","votes":null},{"text":"\r\n    # Count the number of elements in each digit\r\n    counts = [0] * 10\r\n    for num in nums:\r\n        digit = 0\r\n        while num > 0:\r\n            counts[digit] += 1\r\n            digit += 1\r\n            num \/\/= 10\r\n    # Modify the counts array to cumulative sum\r\n    for i in range(1, 10):\r\n        counts[i] += counts[i - 1]\r\n    # Sort the array\r\n    sorted_nums = [None] * len(nums)\r\n    for num in nums:\r\n        digit = 0\r\n        while num > 0:\r\n            sorted_nums[counts[digit] - 1] = num % 10\r\n            counts[digit] -= 1\r\n            num \/\/= 10\r\n            digit += 1\r\n    return sorted_nums\r\n\r\n\r","votes":null}],"time":{"count":8.0,"avg":711842.086,"std":1074095.2564180887,"cov":1.5088954103}}
{"id":517,"question":"def largest_pos(list1):\r\n    \"\"\"Write a python function to find the largest postive number from the given list.\"\"\"","answers":[{"text":"\r\n    list1.sort()\r\n    return list1[-1]\r\n\r\n\r","votes":73908.912},{"text":"\r\n    \r\n    \r\n    max_number = 0\r\n    for i in list1:\r\n        if i > 0 and i > max_number:\r\n            max_number = i\r\n    return max_number\r\n\r\n\r","votes":80154.504},{"text":"\r\n    # code here\r\n    max = 0\r\n    for i in list1:\r\n        if i > max:\r\n            max = i\r\n    return max\r\n\r\n    #another way\r\n\r","votes":81741.496},{"text":"\r\n    max = 0\r\n    for i in list1:\r\n        if i > max:\r\n            max = i\r\n    return max\r\n\r\n\r\na = [1, -1, 2, 3, 4, -5, 6, -7, 8, 9]\r\n\r\nprint(largest_pos(a))\r\n\r\n\r","votes":85339.076},{"text":"\r\n    max_pos = 0\r\n    for i in list1:\r\n        if i > max_pos:\r\n            max_pos = i\r\n            \r\n    return max_pos\r\n\r","votes":86602.688},{"text":"\r\n    \r\n    max = 0\r\n    for i in list1:\r\n        if i > max:\r\n            max = i\r\n    return max\r\n\r\n\r\n\r","votes":89713.484},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n        if i>largest and i>0:\r\n            largest = i\r\n    return largest\r\n\r\n\r","votes":92019.964},{"text":"\r\n    largest_num = 0\r\n    for num in list1:\r\n        if num > largest_num and num > 0:\r\n            largest_num = num\r\n    return largest_num\r\n\r\n\r","votes":100981.724},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n        if(i>largest):\r\n            largest = i\r\n    return largest\r\n\r","votes":102374.388},{"text":"\r\n    try:\r\n        list1 = list1.copy()\r\n        list1.sort()\r\n        return list1[-1]\r\n    except:\r\n        return \"List does not exist.\"\r\n\r\n\r","votes":103044.488},{"text":"\r\n\r\n    largest_pos = max(list1)\r\n    return largest_pos\r\n\r\n\r","votes":103490.352},{"text":"\r\n    \r\n    largest=0\r\n    for i in list1:\r\n        if i>largest:\r\n            largest=i\r\n    return largest\r\n\r","votes":104079.0},{"text":"\r\n    largest_pos = 0\r\n    for i in list1:\r\n        if i > largest_pos:\r\n            largest_pos = i\r\n    return largest_pos\r\n\r\n\r","votes":104145.012},{"text":"\r\n    max_num = 0\r\n    for i in list1:\r\n        if i > max_num and i > 0:\r\n            max_num = i\r\n    return max_num\r\n\r\n\r","votes":104271.0},{"text":"\r\n    list1.sort()\r\n    list1.reverse()\r\n    for i in list1:\r\n        if i > 0:\r\n            return i\r\n\r\n\r","votes":105282.22},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\n\r","votes":105834.444},{"text":"\r\n    max = 0\r\n    for i in list1:\r\n        if i > max:\r\n            max = i\r\n    return max\r\n\r\n\r\nprint(largest_pos([1, 2, 3, 4, -5, 6, 7, 8, -9, 10]))\r\n\r\n\r","votes":105919.768},{"text":"\r\n    largest = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\n\r\nprint(largest_pos([10, 20, -3, 5, 100, 200, 300]))\r\n\r\n\r","votes":106109.104},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n       if i > 0 and i > largest:\r\n           largest = i\r\n    return largest\r\n\r\n\r\n\r\n\r","votes":108487.464},{"text":"\r\n    if list1[0] < 0:\r\n        return max(list1[1:])\r\n    else:\r\n        return max(list1)\r\n\r\n\r","votes":108532.712},{"text":"\r\n    largest_pos = None\r\n    for number in list1:\r\n        if number > 0 and (largest_pos is None or number > largest_pos):\r\n            largest_pos = number\r\n    return largest_pos\r\n","votes":109166.256},{"text":"\r\n    \r\n    # Your code goes here\r\n    max_num = list1[0]\r\n    for i in list1:\r\n        if i > max_num:\r\n            max_num = i\r\n    return max_num\r\n\r","votes":110431.38},{"text":"\r\n    l=list1\r\n    n=len(l)\r\n    max=l[0]\r\n    for i in range(1,n):\r\n        if(l[i]>max):\r\n            max=l[i]\r\n    return max\r\n\r\n#test\r\nlis=[2,3,-4,-1,6]\r\nprint(largest_pos(lis))\r\n\r\n\r\n\r\n\r","votes":111226.744},{"text":"\r\n    maxN = max(list1)\r\n    return maxN\r\n    \r\n    \r","votes":114158.72},{"text":"\r\n    pos = list1[0]\r\n    for i in range(0,len(list1)):\r\n        if list1[i] > pos:\r\n            pos = list1[i]\r\n    return pos\r\n\r\n\r","votes":116433.712},{"text":"\r\n    largest = 0\r\n    for i in range(len(list1)):\r\n        if list1[i]>largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\n\r\nlist1 = [12, 10, 5, 1, 8, 15, 13]\r\nprint(\"Largest positive number is:\", largest_pos(list1))\r\n\r\n\r","votes":117797.748},{"text":"\r\n    \r\n    largest = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n\r\n    return largest\r\n\r\n\r","votes":117824.78},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n        if largest < i:\r\n            largest = i\r\n    return largest\r\n\r\n\r","votes":119159.344},{"text":"\r\n    max_num = list1[0]\r\n    for i in range(1, len(list1)):\r\n        if list1[i] > max_num:\r\n            max_num = list1[i]\r\n    return max_num\r\n\r\n\r\nlist1 = [5, 10, -15, 16, 25, 100, 0, -20]\r\nprint(largest_pos(list1))\r\n\r\n# 2. Write a python function to find the smallest positive number from the given list.\r\n\r\n\r","votes":119434.64},{"text":"\r\n\r\n    \"\"\"Returns the largest positive integer in the list\"\"\"\r\n    max_pos = list1[0]\r\n    for x in list1:\r\n        if x > max_pos:\r\n            max_pos = x\r\n    return max_pos\r\n\r\n\r","votes":120492.256},{"text":"\r\n    # largest = 0\r\n    # for num in list1:\r\n    #     if num > largest:\r\n    #         largest = num\r\n    # return largest\r\n    # print(largest)\r\n\r\n    max_pos = 0\r\n    for i in list1:\r\n        if i > 0 and i > max_pos:\r\n            max_pos = i\r\n    return max_pos\r\n\r\n\r\nprint(largest_pos([1, 2, 4, -3, 5, 7, 8, 9]))\r\nprint(largest_pos([1, 2, 4, 3, 5, 7, 8, 9]))\r\nprint(largest_pos([1, 2, 4, -3, 5, 7, 8, -9]))\r\nprint(largest_pos([1, 2, 4, -3, 5, 7, 8, -9]))\r\nprint(largest_pos([-1, 2, 4, -3, 5, 7, 8, -9]))\r\n\r\n\r","votes":121417.032},{"text":"\r\n    \r\n    list1.sort()\r\n    x = list1.pop()\r\n    if x > 0:\r\n        return x\r\n    else:\r\n        return largest_pos(list1)\r\n\r\nprint(largest_pos([-1, 2, 3, 4, 5, 6, 7, 8, -9, 10]))\r\n\r\n\"\"\"\r\nOutput: 10\r\n\r\nExplanation: The largest positive number in the given list is 10.\r\n\"\"\"\r\n\r","votes":121469.896},{"text":"\r\n    max_number = 0\r\n    for i in list1:\r\n        if i > max_number:\r\n            max_number = i\r\n    return max_number\r\n\r\n\r","votes":123732.336},{"text":"\r\n\r\n    largest_pos = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest_pos:\r\n            largest_pos = list1[i]\r\n    return largest_pos\r\n\r\n\r","votes":124557.028},{"text":"\r\n    pos_num = max(list1)\r\n    return pos_num\r\n\r","votes":124596.568},{"text":"\r\n    max_no = 0\r\n    for x in list1:\r\n        if (x > max_no):\r\n            max_no = x\r\n    return max_no\r\n\r\n\r\nprint(largest_pos([-1, -2, -3, 4, 5, 6, 7, 8, 9]))\r\n\r\n\r","votes":125579.336},{"text":"\r\n    pos = 0\r\n    for val in list1:\r\n        if val > 0:\r\n            if val > pos:\r\n                pos = val\r\n    return pos\r\n\r\n\r","votes":125774.996},{"text":"\r\n    list1.sort(reverse=True)\r\n    for item in list1:\r\n        if item > 0:\r\n            return item\r\n\r\n\r","votes":126089.544},{"text":"\r\n    n=int(len(list1))\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return list1[0]\r\n    else:\r\n        max_pos=list1[0]\r\n        for i in range(1,n):\r\n            if list1[i]>max_pos:\r\n                max_pos=list1[i]\r\n        return max_pos\r\n\r\n\r","votes":126408.296},{"text":"\r\n\r\n    pos_list = []\r\n    for i in list1:\r\n        if i > 0:\r\n            pos_list.append(i)\r\n    if pos_list:\r\n        return max(pos_list)\r\n    else:\r\n        return None\r\n\r\n\r","votes":126680.636},{"text":"\r\n    l = list1\r\n    max = -1\r\n    for i in l:\r\n        if i > max and i > 0:\r\n            max = i\r\n    return max\r\n\r\n\r","votes":126975.96},{"text":"\r\n    \r\n    largest = 0\r\n    for x in list1:\r\n        if x > 0:\r\n            if x > largest:\r\n                largest = x\r\n    return largest\r\n\r\n\r","votes":127538.816},{"text":"\r\n    largest = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\nprint(largest_pos([-5, 10, 10, -10]))\r\n\r","votes":127818.352},{"text":"\r\n    max_num=list1[0]\r\n    for i in range(1,len(list1)):\r\n        if(list1[i]>max_num):\r\n            max_num=list1[i]\r\n    return max_num\r\n\r","votes":128218.416},{"text":"\r\n    biggest = 0\r\n    for i in list1:\r\n        if i > biggest:\r\n            biggest = i\r\n    return biggest\r\n\r\n\r\nprint(largest_pos([-3, 5, 7, -4, 2]))\r\n\r\n\r","votes":128295.856},{"text":"\r\n    if len(list1) == 0:\r\n        return None\r\n    max = list1[0]\r\n    for i in list1:\r\n        if i > max:\r\n            max = i\r\n    return max\r\n\r\n\r","votes":128745.924},{"text":"\r\n\r\n    # Get the number of elements in the list\r\n    size = len(list1)\r\n\r\n    # Initialize the largest postive number to the first element\r\n    largest = list1[0]\r\n\r\n    for i in range(1, size):\r\n        if largest < list1[i]:\r\n            largest = list1[i]\r\n\r\n    return largest\r\n\r\n\r","votes":130728.888},{"text":"\r\n    max_pos = 0\r\n    for x in list1:\r\n        if 0 < x > max_pos:\r\n            max_pos = x\r\n    return max_pos\r\n\r\n\r","votes":131131.708},{"text":"\r\n    max = list1[0]\r\n    for i in range(1, len(list1)):\r\n        if list1[i] > max:\r\n            max = list1[i]\r\n    return max\r\n\r\n\r","votes":131878.364},{"text":"\r\n    max = -1\r\n    for i in list1:\r\n        if i > 0 and i > max:\r\n            max = i\r\n    return max\r\n    \r\n\r\n\r","votes":133520.68},{"text":"\r\n    max_pos = 0\r\n    for i in range(len(list1)):\r\n        if (list1[i] > max_pos) and (list1[i] > 0):\r\n            max_pos = list1[i]\r\n    return max_pos\r\n\r\n\r","votes":135328.676},{"text":"\r\n    # code starts here\r\n    for i in list1:\r\n        if i > 0:\r\n           largest = i\r\n    return largest\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nProblem 2: Largest negative number\r\n\r\nWrite a python function to find the largest negative number from the given list.\r\n\r\n\"\"\"\r\n\r\n\r","votes":139109.264},{"text":"\r\n    # Your code goes here\r\n    max = 0\r\n    for i in list1:\r\n        if i > max:\r\n            max = i\r\n    return max\r\n\r\n\r\n# Driver code\r\nlist1 = [1, -2, 10, 3, -10, 11]\r\nprint(\"The largest positive number in the list is:\", largest_pos(list1))\r\n\r\n\r","votes":140390.328},{"text":"\r\n    max = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > max:\r\n            max = list1[i]\r\n    return max\r\n\r\n\r","votes":141124.464},{"text":"\r\n    max_num = list1[0]\r\n    for i in range(1,len(list1)):\r\n        if list1[i] > max_num:\r\n            max_num = list1[i]\r\n    return max_num\r\n\r","votes":141257.484},{"text":"\r\n    largest=list1[0]\r\n    for i in range(1,len(list1)):\r\n        if list1[i]>largest:\r\n            largest=list1[i]\r\n    return largest\r\n\r\n#list1=[-1,2,3,-4,5,-6]\r\nlist1=[2,3,-4,5,-6]\r\nprint(largest_pos(list1))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":142050.128},{"text":"\r\n\r\n    max = -10000\r\n    for i in list1:\r\n        if i > max and i >= 0:\r\n            max = i\r\n    return max\r\n\r\n\r","votes":145329.612},{"text":"\r\n    largest = list1[0]\r\n    for i in range(1, len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    print(largest)\r\n    return largest\r\n\r\n\r","votes":148813.36},{"text":"\r\n    max_num = list1[0]\r\n    for i in list1:\r\n        if i > max_num:\r\n            max_num = i\r\n    return max_num\r\n\r\n\r","votes":149668.0},{"text":"\r\n    largest = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\nprint(largest_pos([-2, 4, -1, 10, 0]))\r\n\r","votes":150933.972},{"text":"\r\n    l=[]\r\n    for i in list1:\r\n        if i>0:\r\n            l.append(i)\r\n    l.sort(reverse=True)\r\n    return l[0]\r\n\r","votes":153493.096},{"text":"\r\n    largest_pos = None\r\n    for i in list1:\r\n        if i > 0 and (largest_pos is None or largest_pos < i):\r\n            largest_pos = i\r\n    return largest_pos\r\n\r\n\r\n# 2. Write a python function to find the second largest number from the given list.\r","votes":153873.696},{"text":"\r\n    \r\n    max_num = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] > max_num:\r\n            max_num = list1[i]\r\n    return max_num\r\n\r\n\r","votes":156672.328},{"text":"\r\n    max = 0\r\n    for x in list1:\r\n        if x > 0 and x > max:\r\n            max = x\r\n    return max\r\n\r\n\r","votes":158993.004},{"text":"\r\n    \r\n    max=list1[0]\r\n    for i in range(1,len(list1)):\r\n        if list1[i]>max:\r\n            max=list1[i]\r\n    return max\r\n\r\n\r","votes":163808.696},{"text":"\r\n    max = 0\r\n    for i in list1:\r\n        if(i>max):\r\n            max = i\r\n    return max\r\n    print(max)\r\n\r","votes":166315.744},{"text":"\r\n\r\n    # if the list is empty, return None\r\n    if len(list1) == 0:\r\n        return None\r\n\r\n    # if the list contains only one element, return the number\r\n    if len(list1) == 1:\r\n        if list1[0] > 0:\r\n            return list1[0]\r\n        else:\r\n            return None\r\n\r\n    # if the list contains more than two elements\r\n    if len(list1) > 2:\r\n        # take the first element as the largest element\r\n        largest_positive = list1[0]\r\n\r\n        # Traverse the list from 1 to n-1\r\n        for i in range(1, len(list1)):\r\n            if list1[i] > 0:\r\n                # If the current element is larger than the largest_positive\r\n                if list1[i] > largest_positive:\r\n                    largest_positive = list1[i]\r\n\r\n        return largest_positive\r\n\r\n\r","votes":182488.264},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n        if i > largest and i > 0:\r\n            largest = i\r\n    return largest\r\n\r\n\r\nlist1 = [1, -2, 3, 4, -1, 0, 100, 99, -100]\r\nprint(\"Largest positive number from the list:\", largest_pos(list1))\r\n\r\n\r","votes":191665.956},{"text":"\r\n    \r\n    if len(list1) == 0:\r\n        return None\r\n    \r\n    max_value = list1[0]\r\n    for item in list1:\r\n        if item >= max_value:\r\n            max_value = item\r\n\r\n    return max_value\r\n\r\n\r\n\r","votes":192719.144},{"text":"\r\n\r\n    maxi=list1[0]\r\n    for i in range(1,len(list1)):\r\n        if list1[i]>maxi:\r\n            maxi=list1[i]\r\n    return maxi\r\n\r\n\r","votes":195398.768},{"text":"\r\n    largest = list1[0]\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\nlist1 = [1, 2, 3, -5, -6, 7, 8, 9, 0]\r\nprint(largest_pos(list1))\r\n\r\n\r\n\r","votes":235197.724},{"text":"\r\n    largest = list1[0]\r\n    for i in range(1, len(list1)):\r\n        if list1[i] > largest:\r\n            largest = list1[i]\r\n    return largest\r\n\r\n\r","votes":253980.7},{"text":"\r\n    for i in list1:\r\n        if i>0:\r\n            return i\r\n\r\n\r","votes":null},{"text":"\r\n    pos_list = []\r\n    for i in list1:\r\n        if i > 0:\r\n            pos_list.append(i)\r\n    if len(pos_list) == 0:\r\n        return \"No positive numbers in the list\"\r\n    return max(pos_list)\r\n\r\n\r\nprint(largest_pos([1, -2, 3, 4, 0, -5]))\r\nprint(largest_pos([-1, -2, 3, 4, 0, -5]))\r\nprint(largest_pos([1, 2, 3, 4, 0, -5]))\r\nprint(largest_pos([1, 2, 3, 4, -2, -5]))\r\nprint(largest_pos([1, 2, 3, 4, -2, 5]))\r\nprint(largest_pos([1, 2, 3, 4, -2, -5]))\r\nprint(largest_pos([1, 2, 3, 4, -2, 5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 5]))\r\nprint(largest_pos([1, 2, 3","votes":null},{"text":"\r\n    a = []\r\n    for i in range(0, len(list1)):\r\n        if list1[i] > 0:\r\n            a.append(list1[i])\r\n    return max(a)\r\n\r\n\r\n# Main\r\nlist1 = eval(input(\"Enter the list: \"))\r\nprint(\"Largest postive number from the given list is: \", largest_pos(list1))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity","votes":null},{"text":"\r\n    for i in list1:\r\n        if i>0:\r\n            print(i)\r\n\r\n#largest_pos([-1,2,3,-4,5])\r\n\r","votes":null},{"text":"\r\n    list1 = [5, 10, -2, -3, 15, 10, 12, 2]\r\n    list1 = list1[::-1]\r\n    for i in list1:\r\n        if i >= 0:\r\n            return i\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    list1.sort()\r\n    \r\n    if list1[0]<0:\r\n        return 'No postive number'\r\n    else:\r\n        return list1[0]\r\n\r\nlist1=[1,4,6,-2,0,-10,-5,100]\r\nlargest_pos(list1)\r\n\r\n# Q2\r","votes":null},{"text":"\r\n    max = 0\r\n    for x in list1:\r\n        if x > max and x > 0:\r\n            max = x\r\n    print(max)\r\n# largest_pos([10, 2, 5, 11, -3, -20])\r\n# largest_pos([-1, 0, 1, 2, 3])\r\n# largest_pos([-1, -2, -3, -4, -5])\r\n# largest_pos([0, 0, 0, 0, 0])\r\n# largest_pos([10, 2, 5, 11, -3, -20, 100])\r\n# largest_pos([1, 2, 3, 4, 5])\r\n# largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    for item in list1:\r\n        if item > 0:\r\n            return item\r\n    return 0\r\n\r\n\r\n# Taking Input Using Input()\r\nval = int(input())\r\narr = []\r\nfor i in range(val):\r\n    ele = int(input())\r\n    arr.append(ele)\r\nres = largest_pos(arr)\r\nif res","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            return list1[i]\r\n\r\n\r","votes":null},{"text":"\r\n    max_num = 0\r\n    for i in list1:\r\n        if i >= 0 and i > max_num:\r\n            max_num = i\r\n    print(max_num)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    for i in list1:\r\n        if i > 0:\r\n            return i\r\n        \r\n    return 0\r\n\r\n\r\n\r\n# another way\r\n\r","votes":null},{"text":"\r\n    for i in list1:\r\n        if i > 0:\r\n            return i\r\n            \r\n    return 0\r\n    \r\nlist1 = [-1, -2, -3, 0, 1, 2, 3, 4, 5]\r\nprint(largest_pos(list1))\r\n    \r\nprint(\"---------------------------------\")\r\n\r","votes":null},{"text":"\r\n    if list1 == '':\r\n        print('List is empty.')\r\n    else:\r\n        max_pos = 0\r\n        for x in list1:\r\n            if x > max_pos and x > 0:\r\n                max_pos = x\r\n        print(max_pos)\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    for x in list1:\r\n        if x > 0:\r\n            return x\r\n    return 0\r\n\r\n\r","votes":null},{"text":"\r\n    largest = max(list1)\r\n    print(\"The largest postive number is\", largest)\r\n\r\n\r","votes":null},{"text":"\r\n    for i in list1:\r\n        if i > 0:\r\n            return i\r\n    return 0\r\n\r\n\r\nprint(largest_pos([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]))\r\nprint(largest_pos([-1, -2, -3, -4, -5]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 6]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6]))\r\nprint(largest_pos([1, 2, 3, 4, 5, 6, 7]))\r\nprint(largest_pos([-1, -2, -3, -4, -5, -6, -7]))\r\nprint(largest_pos([]))\r\n\r\n\r","votes":null},{"text":"\r\n    i = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > 0:\r\n            return list1[i]\r\n    return \"No positive number found.\"\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = [1, 2, 3, 4, -1, -2, -3, 5]\r\n    max_pos = -999\r\n    for x in list1:\r\n        if x > max_pos and x > 0:\r\n            max_pos = x\r\n    return max_pos\r\n\r\n\r\nprint(largest_pos([1, 2, 3, 4, -1, -2, -3, 5]))\r\n\r\n\r\n# Problem 3: Write a function to find the smallest number from the given list.\r\n\r","votes":null},{"text":"\r\n    list1.sort()\r\n    print(list1[-1])\r\n\r\n\r","votes":null},{"text":"\r\n    largest = 0\r\n    for i in list1:\r\n        if i > largest:\r\n            largest = i\r\n    return largest\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [21, 17, -7, -6, 35, 51, 27, 49, 22, 1, 9, 12, 19, -2, -3]\r\n    print(\"Largest postive number in the list is : \", largest_pos(list1))\r\n    print(\"Largest postive number in the list is : \", largest_pos([1, 2, 3, 4, 5]))\r\n    print(\"Largest postive number in the list is : \", largest_pos([-2, -1, 0, 1, 2, 3, 4, 5]))\r\n    print(\"Largest postive number in the list is : \", largest_pos([4, 9, 1, 4, 3, 4, 1, 7, 2, 8, 6, 5]))\r\n    print(\"Largest postive number in the list is : \", largest_pos([-2, -1, 0, -1, -2, -3, 4, 5, 6, -2, -1, 0, -1, -2, -4]))\r\n    print(\"Largest postive number in the list is : \", largest_pos([1, 2, 3, 4, 5]))\r\n    print(\"Largest postive number in the list is : \", largest_pos([-2, -1, 0, 1, 2, 3, 4, 5]))\r\n    print(\"Largest postive number in the list is : \", largest_pos([4, 9, 1, 4, 3, 4, 1, 7, 2, 8, 6, 5]))\r\n    print(\"Largest pos","votes":null},{"text":"\r\n    for i in list1:\r\n        if i > 0:\r\n            return i\r\n    return None\r\n\r\n# Test case 1:\r\n\r\nlist1 = [1, 2, 3, 4, 5]\r\nprint(\"The largest postive number from the given list is:\", largest_pos(list1))\r\n\r\n# Test case 2:\r\n\r\nlist2 = [-1, 2, 3, 4, 5]\r\nprint(\"The largest postive number from the given list is:\", largest_pos(list2))\r\n\r\n# Test case 3:\r\n\r\nlist3 = [3, 4, 5]\r\nprint(\"The largest postive number from the given list is:\", largest_pos(list3))\r\n\r\n# Test case 4:\r\n\r\nlist4 = [1, 2, 3, -4]\r\nprint(\"The largest postive number from the given list is:\", largest_pos(list4))\r\n\r\n# Test case 5:\r\n\r\nlist5 = [1, 2, 3, -4, 5]\r\nprint(\"The largest postive number from the given list is:\", largest_pos(list5))\r\n\r\n# Test case 6:\r\n\r\nlist6 = [1, 2, -3, -4, 5]\r\nprint(\"The largest postive number from the given list is:\", largest_pos(list6))\r\n\r\n# Test case 7:\r\n\r\nlist7 = [-1, -2, -3, -4, -5]\r\nprint(\"The largest postive number from the given list is:\", largest_pos(list7))\r\n\r\n# Test case 8:\r\n\r\nlist8 = []\r\nprint(\"The largest postive number from the given list is:\", largest_pos(list8))\r\n\r\n# Test case 9:\r\n\r\nlist9 = [0]\r\nprint(\"The largest postive number from the given list is:\", larges","votes":null},{"text":"\r\n    max_positive = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] > max_positive:\r\n            max_positive = list1[i]\r\n    return max_positive\r\n\r\n\r\n# main\r\nif __name__ == \"__main__\":\r\n    list1 = [1, 2, 3, 4, -1, 5, 6, 7, 8, -1, 9, -1, 10, -1, 11, -1, 12]\r\n    print(\"The largest postive number from the given list is: \", largest_pos(list1))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\nSAMPLE 1\r\n\r\nEnter the length of the list: 16\r\nEnter elements in the list: 1 2 3 4 -1 5 6 7 8 -1 9 -1 10 -1 11 -1 12\r\nThe largest postive number from the given list is:  12\r\n\r\nSAMPLE 2\r\n\r\nEnter the length of the list: 11\r\nEnter elements in the list: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\r\nThe largest postive number from the given list is:  0\r\n\r\nSAMPLE 3\r\n\r\nEnter the length of the list: 5\r\nEnter elements in the list: -10 -1 -1 1 10\r\nThe largest postive number from the given list is:  ","votes":null},{"text":"\r\n    if list1:\r\n        if list1[0] > 0:\r\n            return list1[0]\r\n        else:\r\n            return largest_pos(list1[1:])\r\n    else:\r\n        return 0\r\n\r","votes":null},{"text":"\r\n    #list1 = [1,2,3,4,5,-6,-7,8,9]\r\n    for i in list1:\r\n        if i > 0:\r\n            return i\r\n\r\n\r\nlist1 = [1,2,3,4,5,-6,-7,8,9]\r\nprint(largest_pos(list1))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    #code here\r\n    \r\n    for i in list1:\r\n        if i > 0:\r\n            return i\r\n    return 0\r\n\r\n\r\n\r\n# #largest_pos([-3, 1, 2, -1, 0, 7])\r\n# #largest_pos([-3, 1, 2, -1, 0, -7])\r\n# #largest_pos([-3, -1, -2, -1, 0, -7])\r\n# #largest_pos([-3, -1, 2, -1, 0, -7])\r\n# #largest_pos([-3, -1, -2, -1, 0, 7])\r\n# #largest_pos([3, 1, 2, 1, 0, -7])\r\n# #largest_pos([3, 1, 2, 1, 0, 7])\r\n# #largest_pos([3, 1, 2, 1, 0, 7])\r\n# #largest_pos([3, 1, 2, 1, 0, -7])\r\n# #largest_pos([3, 1, 2, 1, 0, -7])\r\n# #largest_pos([3, 1, 2, 1, 0, -7])\r\n# #largest_pos([3, 1, 2, 1, 0, -7])\r\n# #largest_pos([-3, 1, 2, -1, 0, -7])\r\n# #largest_pos([-3, 1, 2, -1, 0, -7])\r\n# #largest_pos([-3, 1, 2, -1, 0, -7])\r\n# #largest_pos([-3, 1, 2, -1, 0, -7])\r\n# #largest_pos([-3,","votes":null},{"text":"\r\n    print(\"\"\"\r\n    largest_pos(list1)\r\n    \"\"\")\r\n    for value in list1:\r\n        if value > 0:\r\n            print(value)\r\n            return value\r\n\r\n# Test Case\r\n","votes":null}],"time":{"count":72.0,"avg":128999.0058333333,"std":32304.8000828911,"cov":0.2504267368}}
{"id":518,"question":"def sqrt_root(num):\r\n    \"\"\"Write a function to find the square root of a perfect number.\"\"\"","answers":[{"text":"\r\n    #num = int(num)\r\n    #if num < 0:\r\n    #    print(\"Number cannot be negative\")\r\n    #else:\r\n    #    root = num**(1\/2)\r\n    #    print(\"The square root of {0} is {1}\".format(num, root))\r\n    #return root\r\n    \r\n    if num < 0:\r\n        return None\r\n    \r\n    root = num**(1\/2)\r\n    return root\r\n    \r","votes":57473.192},{"text":"\r\n    sqrt = num ** 0.5\r\n    return sqrt\r\n\r\n\r","votes":62476.284},{"text":"\r\n    root = 1\r\n    while True:\r\n        root += 1\r\n        if root ** 2 > num:\r\n            return root - 1\r\n\r\n\r","votes":70646.84},{"text":"\r\n    # Your code here\r\n    x = 1\r\n    while True:\r\n        if x*x == num:\r\n            return x\r\n        elif x*x > num:\r\n            return None\r\n        else:\r\n            x += 1\r\n\r\n\r","votes":74710.164},{"text":"\r\n    for i in range(1, num):\r\n        if i * i == num:\r\n            return i\r\n    return None\r\n\r\n\r","votes":82606.436},{"text":"\r\n    x = 1\r\n    while x * x < num:\r\n        x += 1\r\n    return x\r\n\r","votes":83922.984},{"text":"\r\n    # Your code goes here\r\n    if num < 0:\r\n        raise ValueError(\"Invalid input\")\r\n    elif num == 0 or num == 1:\r\n        return num\r\n    else:\r\n        for i in range(1, num+1):\r\n            if (i**2) == num:\r\n                return i\r\n\r\n\r","votes":85224.996},{"text":"\r\n    if num < 0:\r\n        raise ValueError('Cannot find the square root of a negative number.')\r\n    else:\r\n        num_sqrt = num**0.5\r\n        return num_sqrt\r\n\r\n\r","votes":87740.156},{"text":"\r\n    root = num\r\n    while root * root != num:\r\n        root -= 1\r\n    return root\r\n\r\n\r","votes":88314.7},{"text":"\r\n\r\n    sqrt = num ** 0.5\r\n    return sqrt\r\n\r\n\r","votes":91596.708},{"text":"\r\n    # A perfect number is a number for which the sum of its proper divisors is exactly equal to the number.\r\n    # For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.\r\n\r\n    return num**0.5\r\n\r\n    # Expected output:\r\n    # 5.0\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input())\r\n    print(\"{:.2f}\".format(sqrt_root(num)))\r\n\r\n","votes":94477.464},{"text":"\r\n    root = 0\r\n    while True:\r\n        root += 1\r\n        if root * root > num:\r\n            return root - 1\r\n        if root * root == num:\r\n            return root\r\n    return None\r\n\r\n\r","votes":94835.58},{"text":"\r\n    # Check if the number is a perfect square\r\n    for i in range(1, num + 1):\r\n        if i ** 2 == num:\r\n            return i\r\n    # If the number is not a perfect square\r\n    return False\r\n\r\n\r","votes":97529.692},{"text":"\r\n    return num ** (1\/2)\r\n\r\n\r","votes":100446.348},{"text":"\r\n    for i in range(1, num):\r\n        if i ** 2 == num:\r\n            return i\r\n    return 'Not a perfect number'\r\n\r\n\r","votes":101217.044},{"text":"\r\n    for i in range(1, num + 1):\r\n        if i ** 2 == num:\r\n            return i\r\n\r\n\r","votes":101687.316},{"text":"\r\n    if num < 0:\r\n        print(\"Square root of negative number!\")\r\n        return\r\n\r\n    root = num\r\n    while True:\r\n        new_root = (root + num \/\/ root) \/\/ 2\r\n        if new_root == root:\r\n            break\r\n        root = new_root\r\n    return root\r\n\r\n\r","votes":101849.996},{"text":"\r\n    return num ** .5\r\n\r\n\r","votes":101860.572},{"text":"\r\n    if num <= 0:\r\n        raise ValueError('Must be a positive number')\r\n    for i in range(1,num + 1):\r\n        if i * i == num:\r\n            return i\r\n   ","votes":102567.104},{"text":"\r\n    for x in range(1, num):\r\n        if x * x == num:\r\n            return x\r\n\r\n\r","votes":104363.552},{"text":"\r\n    for i in range(num, 1, -1):\r\n        if i * i == num:\r\n            return i\r\n    return False\r\n\r\n\r","votes":105629.372},{"text":"\r\n    root = 0\r\n    guess = num \/ 2\r\n    while guess != root:\r\n        root = guess\r\n        guess = (guess + num\/guess) \/ 2\r\n    return root\r\n\r","votes":108998.04},{"text":"\r\n    sqrt = 0\r\n    \r\n    # Initialize counter\r\n    counter = 1\r\n    \r\n    while num > counter*counter:\r\n        counter += 1\r\n        \r\n    if num == counter*counter:\r\n        sqrt = counter\r\n    \r\n    return sqrt\r\n\r\n\r","votes":109985.388},{"text":"\r\n    \r\n    #Check if the number is a perfect square\r\n    sqrt = num ** (0.5)\r\n    if sqrt % 1 == 0:\r\n        return sqrt\r\n\r\n    #Check if the number is a perfect square\r\n    sqrt = sqrt + 1\r\n    if sqrt % 1 == 0:\r\n        return sqrt\r\n\r\n    # Check for the square root of a perfect number\r\n    while True:\r\n        if num < (sqrt ** 2):\r\n            return sqrt\r\n        sqrt = sqrt + 1\r\n\r\n#Calling the function\r\n# sqrt_root(144)\r\n# sqrt_root(96)\r\n# sqrt_root(81)\r\n# sqrt_root(64)\r\n# sqrt_root(49)\r\n# sqrt_root(48)\r\n# sqrt_root(41)\r\n# sqrt_root(36)\r\n# sqrt_root(32)\r\n# sqrt_root(29)\r\n# sqrt_root(25)\r\n# sqrt_root(20)\r\n# sqrt_root(16)\r\n# sqrt_root(12)\r\n# sqrt_root(10)\r\n# sqrt_root(8)\r\n# sqrt_root(6)\r\n# sqrt_root(4)\r\n# sqrt_root(3)\r\n# sqrt_root(1)\r\n# sqrt_root(0)\r\n# sqrt_root(100)\r\n# sqrt_root(101)\r\n# sqrt_root(102)\r\n# sqrt_root(103)\r\n# sqrt_root(104)\r\n# sqrt_root(105)\r\n# sqrt_root(106)\r\n# sqrt_root(107)\r\n# sqrt_root(108)\r\n# sqrt_root(109)\r\n# sqrt_root(110)\r\n# sqrt_root(1","votes":110651.628},{"text":"\r\n    x = 0\r\n    y = num \/ 2\r\n    if y < x:\r\n        return None\r\n    else:\r\n        while y != x:\r\n            x = y\r\n            y = (x + num \/ x) \/ 2\r\n        return x\r\n\r\n\r","votes":111211.224},{"text":"\r\n    # Get the root of a number\r\n    square_root = num ** 0.5\r\n    # Get the number of decimals\r\n    square_root_decimals = square_root % 1\r\n    # If the number of decimals is less than 0.01 then convert it to an integer\r\n    if square_root_decimals < 0.01:\r\n        square_root = int(square_root)\r\n    return square_root\r\n\r\n\r\n# Test your function with a number that is a perfect square\r\nprint(\"The square root of 49 is\", sqrt_root(49))\r\n# Test your function with a number that is not a perfect square\r\nprint(\"The square root of 17 is\", sqrt_root(17))\r\n# Test your function with a number that is a perfect cube\r\nprint(\"The square root of 27 is\", sqrt_root(27))\r\n# Test your function with a number that is not a perfect cube\r\nprint(\"The square root of 25 is\", sqrt_root(25))\r\n# Test your function with a number that is a perfect fifth\r\nprint(\"The square root of 32 is\", sqrt_root(32))\r\n# Test your function with a number that is not a perfect fifth\r\nprint(\"The square root of 28 is\", sqrt_root(28))\r\n# Test your function with a number that is a perfect sixth\r\nprint(\"The square root of 36 is\", sqrt_root(36))\r\n# Test your function with a number that is not a perfect sixth\r\nprint(\"The square root of 33 is\", sqrt_root(33))\r\n# Test your function with a number that is a perfect seventh\r\nprint(\"The square root of 49 is\", sqrt_root(49))\r\n# Test your function with a number that is not a perfect seventh\r\nprint(\"The square root of 45 is\", sqrt_root(45))\r\n# Test your function with a number that i","votes":112438.208},{"text":"\r\n\r\n    # Find the square root of the number\r\n    root = round(num ** 0.5)\r\n\r\n    # Check if the square root is a perfect square\r\n    if root ** 2 == num:\r\n        return root\r\n    else:\r\n        # If not, we need to find the next perfect square\r\n        root += 1\r\n        while root ** 2 > num:\r\n            root -= 1\r\n        return root\r\n\r\n\r","votes":116921.84},{"text":"\r\n    # Use the sqrt function to find the square root of num.\r\n    # Return the integer part of the square root.\r\n    # Hint: use the \/\/ operator to find the integer part.\r\n    # Hint: use the if statement to test for a perfect number.\r\n\r\n    # Implement your solution here.\r\n    root = num ** 0.5\r\n    if (root % 1) == 0.0:\r\n        return int(root)\r\n    else:\r\n        return None\r\n\r\n\r","votes":118616.904},{"text":"\r\n    # Write your code here\r\n    for i in range(1, num + 1):\r\n        if num == i**2:\r\n            return i\r\n        elif num < i**2:\r\n            return i - 1\r\n\r\n\r\nvotes":127507.056},{"text":"\r\n\r\n    # Perfect numbers are of the form 6n + 1\r\n    # where n is a positive integer\r\n    # and their square root is also a perfect number.\r\n    #\r\n    # The square root of a perfect number is the\r\n    # largest positive integer whose square is\r\n    # less than the number.\r\n\r\n    # The square root of 6 is 2.449489742783178\r\n    # which is not an integer.\r\n    #\r\n    # So we need to round it off to the nearest integer\r\n    # which is 2.\r\n\r\n    return int(num ** (1 \/ 2))\r\n\r\n\r\nif __name__ == '__main__':\r\n    for num in range(1000):\r\n        if sqrt_root(num) ** 2 == num:\r\n            print(f'{num} is a perfect number')\r\n","votes":128565.768},{"text":"\r\n    if num < 0:\r\n        raise ValueError('number must be positive')\r\n\r\n    # The method used to find the square root of a number is to\r\n    # repeatedly divide the number by 2 and add 1.\r\n    # It is very inefficient and does not work for large numbers.\r\n\r\n    # Find the square root of the number using the above method.\r\n    root = num\r\n    while root * root > num:\r\n        root = (root + num \/\/ root) \/\/ 2\r\n\r\n    if root * root == num:\r\n        return root\r\n\r\n    # Find the perfect number by adding 1 to the square root.\r\n    return root + 1\r\n\r\n\r\nif __name__ == '__main__':\r\n    import sys\r\n\r\n    while True:\r\n        num = int(input())\r\n        if num == 0:\r\n            break\r\n        print(sqrt_root(num))\r\n\r\n    if len(sys.argv) <= 1:\r\n        sys.exit(0)\r\n\r\n    # Check whether the number is a perfect square.\r\n    import math\r\n\r\n   ","votes":129787.112},{"text":"\r\n    num = float(num)\r\n    x = 0\r\n    y = num\r\n    while x != y:\r\n        x = y\r\n        y = (num \/ x + x) \/ 2\r\n    return x\r\n\r\n\r\nprint(sqrt_root(32))\r\n\r\n\r","votes":129901.576},{"text":"\r\n    root = 0\r\n    while root * root < num:\r\n        root += 1\r\n    # Check if root is a perfect number\r\n    if root * root == num:\r\n        return root\r\n    else:\r\n        return False\r\n\r\n\r","votes":132336.804},{"text":"\r\n\r\n    # Write your code here\r\n    if num == 0:\r\n        return None\r\n\r\n    i = 1\r\n    while i * i < num:\r\n        i += 1\r\n\r\n    if (i * i - num) == 0:\r\n        return i\r\n    return None\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = 216\r\n    print(\"Square root of number is:\", sqrt_root(num))\r\n\r\n    num = 144\r\n    print(\"Square root of number is:\", sqrt_root(num))\r\n\r\n    num = 64\r\n    print(\"Square root of number is:\", sqrt_root(num))\r\n\r\n    num = 0\r\n    print(\"Square root of number is:\", sqrt_root(num))\r\n\r\n    num = 10\r\n    print(\"Square root of number is:\", sqrt_root(num))\r\n\r\n    num = 125\r\n    print(\"Square root of number is:\", sqrt_root(num))\r\n\r\n    num = 127\r\n    print(\"Square root of number is:\", sqrt_root(num))\r\n\r\n    num = 1000\r\n    print(\"Square root of number is:\", sqrt_root(num))\r\n","votes":136913.316},{"text":"\r\n    \r\n    if num < 0:\r\n        return \"You cannot find the square root of a negative number\"\r\n    \r\n    root = 0\r\n    while root ** 2 <= num:\r\n        root += 1\r\n    \r\n    return root - 1\r\n\r\n\r\nprint(sqrt_root(121))\r\n# 11\r\n\r\nprint(sqrt_root(12))\r\n# 3\r\n\r\nprint(sqrt_root(9))\r\n# 3\r\n\r\nprint(sqrt_root(10))\r\n# 3\r\n\r\nprint(sqrt_root(-121))\r\n# You cannot find the square root of a negative number\r\n\r\nprint(sqrt_root(-12))\r\n# You cannot find the square root of a negative number\r\n\r\nprint(sqrt_root(-9))\r\n# You cannot find the square root of a negative number\r\n\r\nprint(sqrt_root(-10))\r\n# You cannot find the square root of a negative number\r\n\r\nprint(sqrt_root(0))\r\n# 0\r\n\r\nprint(sqrt_root(1))\r\n# 1\r\n\r\nprint(sqrt_root(2))\r\n# 1\r\n\r\nprint(sqrt_root(3))\r\n# 1\r\n\r\nprint(sqrt_root(4))\r\n# 2\r\n\r\nprint(sqrt_root(5))\r\n# 2\r\n\r\nprint(sqrt_root(6))\r\n# 2\r\n\r\nprint(sqrt_root(7))\r\n# 2\r\n\r\nprint(sqrt_root(8))\r\n# 2\r\n\r\nprint(sqrt_root(9))\r\n# 3\r\n\r\nprint(sqrt_root(10))\r\n# 3\r\n\r\nprint(sqrt_root(11))\r\n# 3\r\n\r\nprint(sqrt_root(12))\r\n# 3\r\n\r\nprint(sqrt_root(13))\r\n","votes":146502.304},{"text":"\r\n    for x in range(num, 0, -1):\r\n        if num == x * x:\r\n            return x\r\n\r\n\r","votes":152803.08},{"text":"\r\n    root = 0\r\n    for i in range(1, num):\r\n        if num == i * i:\r\n            root = i\r\n    return root\r\n\r\n\r","votes":162563.52},{"text":"\r\n    if num < 0:\r\n        raise ValueError('Input must be a positive integer')\r\n    if num == 0:\r\n        return 0\r\n    return int(num ** (1\/2))\r\n\r\n# Tests\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(36))\r\nprint(sqrt_root(0))\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(9))\r\nprint(sqrt_root(121))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(25))\r\nprint(sqrt_root(100))\r\nprint(sqrt_root(1024))\r\nprint(sqrt_root(1073741824))\r\nprint(sqrt_root(10828482))\r\n\r\n\r\n# Example of a function that can be used to check whether a number is a perfect number\r","votes":209613.616},{"text":"\r\n    # Get the root of the number\r\n    root = num ** 0.5\r\n\r\n    # Find the square of the root\r\n    square = root ** 2\r\n\r\n    # Check if the square of the root equals the number\r\n    if square == num:\r\n        return root\r\n\r\n    # Return None if the number is not perfect\r\n    return None\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sqrt_root(36))\r\n    print(sqrt_root(7))\r\n    print(sqrt_root(81))\r\n    print(sqrt_root(5))\r\n    print(sqrt_root(25))\r\n    print(sqrt_root(2))\r\n    print(sqrt_root(3))\r\n    print(sqrt_root(100))\r\n    print(sqrt_root(1000))\r\n    print(sqrt_root(10000))\r\n    print(sqrt_root(9999))\r\n    print(sqrt_root(9998))\r\n    print(sqrt_root(9997))\r\n    print(sqrt_root(9996))\r\n    print(sqrt_root(9995))\r\n    print(sqrt_root(9994))\r\n    print(sqrt_root(9993))\r\n    print(sqrt_root(9992))\r\n    print(sqrt_root(9991))\r\n    print(sqrt_root(9990))\r\n    print(sqrt_root(9989))\r\n    print(sqrt_root(9988))\r\n    print(sqrt_root(9987))\r\n    print(sqrt_root(9986))\r\n    print(sqrt_root(9985))\r\n    print(sqrt_root(9984))\r\n    print(sqrt_root(9983))\r\n    print(sqrt_root(9982))\r\n    print","votes":254310.752},{"text":"\r\n    for i in range(1, num):\r\n        if int(i**2) == num:\r\n            return i\r\n        else:\r\n            continue\r\n    else:\r\n        return \"No Square root found\"\r\n\r\n\r\n# Test your code\r\nprint(sqrt_root(200))\r\nprint(sqrt_root(196))\r\nprint(sqrt_root(100))\r\nprint(sqrt_root(1000))\r\nprint(sqrt_root(10000))\r\nprint(sqrt_root(100000))\r\n\r\n# Square Root Root\r\n\r","votes":19530567.2360000014},{"text":"\r\n    # 1. Define a function to find the square root of a perfect number.\r\n    # 2. Write a loop to check if the square root value is integer.\r\n    # 3. If it is, then return the value.\r\n    # 4. Else, increase the square root value by 1 and check again.\r\n\r\n    square_root = num\r\n\r\n    while square_root % 1 != 0:\r\n        square_root = square_root + 1\r\n\r\n    return square_root\r\n\r\n\r","votes":null},{"text":"\r\n    i = 1\r\n    while i * i <= num:\r\n        if num % i == 0:\r\n            return i\r\n        i += 1\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    root = num\r\n    while root*root != num:\r\n        root += 1\r\n    return root\r\n\r\n# Testing:\r\nprint(sqrt_root(100))\r\nprint(sqrt_root(120))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(169))\r\nprint(sqrt_root(196))\r\nprint(sqrt_root(216))\r\nprint(sqrt_root(249))\r\nprint(sqrt_root(289))\r\nprint(sqrt_root(324))\r\nprint(sqrt_root(361))\r\nprint(sqrt_root(400))\r\nprint(sqrt_root(441))\r\nprint(sqrt_root(484))\r\nprint(sqrt_root(529))\r\nprint(sqrt_root(576))\r\nprint(sqrt_root(625))\r\nprint(sqrt_root(676))\r\nprint(sqrt_root(729))\r\nprint(sqrt_root(784))\r\nprint(sqrt_root(841))\r\nprint(sqrt_root(900))\r\nprint(sqrt_root(961))\r\nprint(sqrt_root(1024))\r\nprint(sqrt_root(1089))\r\nprint(sqrt_root(1156))\r\nprint","votes":null},{"text":"\r\n    ans = 0\r\n    for guess in range(num - 1, 0, -1):\r\n        if num == guess * guess:\r\n            ans = guess\r\n            return ans\r\n        elif num < guess * guess:\r\n            ans = guess\r\n            return ans\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    if num < 0:\r\n        return \"Number must be greater than 0.\"\r\n    elif num == 0:\r\n        return 0\r\n    elif num < 10:\r\n        return num\r\n    else:\r\n        root = 10\r\n        while root**2 <= num:\r\n            root += 1\r\n        return root\r\n\r\n\r","votes":null},{"text":"\r\n    # Perfect number is the sum of its proper divisors\r\n    # that is less than it.\r\n    # Perfect number = N = (1+2+3+...+N-1) * N\r\n    # N = (1+2+3+...+N-1) * N \/ (1+2+3+...+N-1)\r\n    # N = (N-1) * N \/ (1+2+3+...+N-1)\r\n    # N * (N-1) = (1+2+3+...+N-1) * N\r\n    # N * (N-1) = (1+2+3+...+N-1) * N\r\n    # N^2 - (N-1) * N = (1+2+3+...+N-1) * N\r\n    # N^2 - (N-1) * N = (1+2+3+...+N-1) * N\r\n    # (N^2 - (N-1) * N) = (1+2+3+...+N-1) * N\r\n    # (N^2 - (N-1) * N) - ((1+2+3+...+N-1) * N) = 0\r\n    # (N^2 - (N-1) * N) - ((N*(N-1)) \/ 2) = 0\r\n    # (N^2 - (N^2 - (N-1) * N) = (N-1) * N\r\n    # (N^2 - N^2 + (N-1) * N) = (N-1) * N\r\n    # (2 * N^2 - (N-1) * N) = (N-1) * N\r\n    # (2 * N^2 - 2 * N + 1) = (N-1) * N\r\n    # (2 * N - 1) * (N-1) = (N-1) * N\r\n    # (2*N-1) = N\r\n    # N ","votes":null},{"text":"\r\n    for i in range(1, num):\r\n        if num % i == 0:\r\n            return i\r\n\r\n\r","votes":null},{"text":"\r\n    # Perfect numbers are of the form: 4n + 1. \r\n    # So the square root of a perfect number is of the form: 2n.\r\n    x = num\r\n    y = 1\r\n    while x != 1:\r\n        x = (y + x) \/\/ 2\r\n        y = num \/\/ x\r\n    return x\r\n\r\n\r","votes":null},{"text":"\r\n    # This is a perfect number.\r\n    if num % (num - 1) == 0:\r\n        print(num)\r\n        print(\"is a perfect number.\")\r\n        return num\r\n\r\n    # This is not a perfect number.\r\n    else:\r\n        print(num)\r\n        print(\"is not a perfect number.\")\r\n        return num\r\n\r\n    # If the number is not a perfect number.\r\n    # print(\"That is not a perfect number!\")\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    else:\r\n        sq = num\r\n        while sq * sq != num:\r\n            sq += 1\r\n        return sq\r\n\r\n    \r\n# Testing\r\nprint(sqrt_root(121))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(-1))\r\nprint(sqrt_root(64))\r\nprint(sqrt_root(0))\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(5))\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(7))\r\nprint(sqrt_root(3))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(8))\r\nprint(sqrt_root(10))\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(121))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(0))\r\nprint(sqrt_root(1))","votes":null},{"text":"\r\n    root = 0\r\n    i = 1\r\n    while root * root < num:\r\n        i += 1\r\n        root = num \/ i\r\n    if root * root == num:\r\n        return root\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # find the square root of num\r\n    root = num ** 0.5\r\n\r\n    # find the difference between the square root of num and the num itself\r\n    diff = num - root\r\n\r\n    # if the difference is small enough, return the square root of num\r\n    if diff < 10 ** -10:\r\n        return root\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    root = 1\r\n    while root * root <= num:\r\n        root += 1\r\n    return root\r\n\r","votes":null},{"text":"\r\n    # For perfect numbers, the sum of the factors of the number is equal to\r\n    # the number itself.\r\n    # So we can sum up the factors and check if it's equal to the number.\r\n    # We'll use the sqrt function to find the square root of the number.\r\n    # Since we are looking for the square root of a perfect number, the sum\r\n    # of factors should be equal to the number.\r\n    if num == 1:\r\n        return 1\r\n    else:\r\n        # We'll use a for loop to sum up the factors of the number.\r\n        # We'll start with the largest factor and check if it divides the number.\r\n        # If it does, we'll add it to the total.\r\n        # If it doesn't, we'll move on to the next largest factor.\r\n        # We'll use the sqrt function to find the square root of the number.\r\n        # Since we are looking for the square root of a perfect number, the sum\r\n        # of factors should be equal to the number.\r\n        total = 0\r\n        for i in range(num, 0, -1):\r\n            if num % i == 0:\r\n                total += i\r\n        # If the sum of factors is equal to the number, the number is a perfect\r\n        # number.\r\n        if total == num:\r\n            print(num, 'is a perfect number.')\r\n            # We can use the sqrt function to find the square root of the number.\r\n            # Since the sum of factors is equal to the number, the square root\r\n            # of the number will be equal to the number.\r\n            print('Square root is', sqrt(num))\r\n        else:\r\n            print(num, 'is not a perfect number.')\r\n\r\n\r\nif __name__ == '__main__':\r\n    # We'll check if the number is a perfect number or not.\r\n    # If it's a perfect number, we'll find the square root of the number.\r\n    sqrt_root(496)\r\n  ","votes":null},{"text":"\r\n    # Write your code here\r\n    if num < 0:\r\n        return \"The number must be positive.\"\r\n    elif num == 1:\r\n        return \"The number is 1.\"\r\n    else:\r\n        root = 1\r\n    for i in range(1, num):\r\n        root = ((i + num\/i)\/2)\r\n        if root == int(root):\r\n            return root\r\n        \r\nnum = int(input())\r\nprint(sqrt_root(num))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Find the square root of a number\r\n    # by repeatedly dividing the number in half.\r\n    # Return the number of times the number\r\n    # is divided in half.\r\n    if num <= 0:\r\n        raise ValueError('Non-positive number')\r\n    else:\r\n        count = 0\r\n        while num >= 1:\r\n            num \/= 2\r\n            count += 1\r\n        return count\r\n\r\n\r","votes":null},{"text":"\r\n    # The perfect numbers are of the form, (2^n-1)*n.\r\n    # Hence, the square root of a perfect number is of the form (2^(n\/2)-1).\r\n    # If the number is not a perfect number, the square root will not be an integer.\r\n\r\n    # If the number is not a perfect number, the square root will not be an integer.\r\n    if num % 2 != 0 or num == 0:\r\n        return None\r\n\r\n    # Find the square root of the perfect number.\r\n    # The square root is obtained by dividing the number by 2 repeatedly.\r\n    sqrt = num\r\n    while sqrt % 2 == 0:\r\n        sqrt \/\/= 2\r\n\r\n    # If the square root is an integer, then the number is perfect.\r\n    if sqrt * sqrt == num:\r\n        return sqrt\r\n\r\n    # If the square root is not an integer, then the number is not a perfect number.\r\n    return None\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return\r\n    if num == 0:\r\n        return 0\r\n    if num == 1:\r\n        return 1\r\n    # Find the square root of num in the range [2, num]\r\n    for i in range(2, num):\r\n        if i*i == num:\r\n            return i\r\n    return num\r\n\r\n\r\n# Test Case\r\nprint(sqrt_root(0))\r\nprint(sqrt_root(1))\r\nprint(sqrt_root(2))\r\nprint(sqrt_root(3))\r\nprint(sqrt_root(4))\r\nprint(sqrt_root(5))\r\nprint(sqrt_root(6))\r\nprint(sqrt_root(7))\r\nprint(sqrt_root(8))\r\nprint(sqrt_root(9))\r\nprint(sqrt_root(10))\r\nprint(sqrt_root(11))\r\nprint(sqrt_root(12))\r\nprint(sqrt_root(13))\r\nprint(sqrt_root(14))\r\nprint(sqrt_root(15))\r\nprint(sqrt_root(16))\r\nprint(sqrt_root(17))\r\nprint(sqrt","votes":null},{"text":"\r\n    square_root = 0\r\n    for i in range(1, num + 1):\r\n        square_root += i ** 2\r\n        if square_root == num:\r\n            return True\r\n    return False\r\n\r\n\r\nprint(sqrt_root(36))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(1000))\r\nprint(sqrt_root(1001))\r\n\r\n\r","votes":null},{"text":"\r\n    i = 1\r\n    while i < num:\r\n        if 2*i+1 == num:\r\n            return i\r\n        i += 1\r\n\r\n\r","votes":null},{"text":"\r\n    # The perfect number is a number whose square is the sum of the\r\n    # natural numbers up to and including the number.\r\n    # Use the formula 1 + 2 + 3 + ... + n = n * (n + 1) \/ 2\r\n\r\n    # The formula is:\r\n    # sqrt(n) = (1 + 2 + 3 + 4 + 5 + ... + n) \/ n\r\n    # The nth term is (n + 1) \/ 2\r\n    # So the sum is:\r\n    # sqrt(n) = (n + 1) \/ 2\r\n\r\n    # This function gets the square root of a perfect number\r\n\r\n    # For example:\r\n    # sqrt_root(100) = 10\r\n    # sqrt_root(10) = 3.1622776601683795\r\n\r\n    # Find the sum\r\n    sum = 0\r\n    for i in range(1, num + 1):\r\n        sum += i\r\n\r\n    # The sum is the same as the formula, so divide it by num\r\n    return sum \/ num\r\n\r\n\r\n# Driver code\r\nprint(sqrt_root(100))\r","votes":null},{"text":"\r\n    # Iterate through integers starting from 1\r\n    for i in range(1, num):\r\n        # Find the sum of the factors of the number\r\n        sum_of_factors = sum([i for i in range(1, num) if num % i == 0])\r\n        if sum_of_factors == num:\r\n            # The number is a perfect number\r\n            return i\r\n    return num\r\n\r\n\r","votes":null},{"text":"\r\n    return_value = []\r\n    i = 1\r\n    while True:\r\n        i += 1\r\n        if (num * i) % (i + 1) == 0:\r\n            return_value.append(i)\r\n            if len(return_value) == 2:\r\n                return return_value\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    root = num\/2\r\n    return root\r\n\r\n\r","votes":null},{"text":"\r\n    # write your code here\r\n    root = num\r\n    while root * root != num:\r\n        root += 1\r\n    return root\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input())\r\n    ans = sqrt_root(num)\r\n    print(ans)\r\n\r\n\"\"\"\r\nSample Input:\r\n\r\n25\r\n\r\nSample Output:\r\n\r\n5\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    # This function has two parameters.\r\n    # They are num, which is a number\r\n    # and x, which is a value to be checked for the square root\r\n    # The function will return x, if it is the square root of the number.\r\n    # If not, it will return False\r\n    # The idea is to check if x * x is equal to the number\r\n    # If it is not equal, then we increase x by 1\r\n    # and check again\r\n    # The function will run only if the number is a perfect number\r\n    # It will return False otherwise\r\n    # The function will return the square root of the number\r\n    # If the number is not a perfect number\r\n    # This function is called sqrt_root\r\n    # The function takes one parameter called num\r\n    x = 1\r\n    while x * x < num:\r\n        x += 1\r\n    return x - 1 if x * x == num else False\r\n\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    for i in range(1, num + 1):\r\n        if i * i == num:\r\n            print(i)\r\n            break\r\n\r\n\r","votes":null},{"text":"\r\n    root = 0\r\n    for i in range(1, num + 1):\r\n        if num % i == 0:\r\n            root += i\r\n    if root * root == num:\r\n        return root\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    # This is a perfect number if the sum of its divisors is equal to\r\n    # the number itself. First find all divisors of the number.\r\n    if num < 0:\r\n        return \"no perfect root for negative numbers.\"\r\n    total = 0\r\n    for i in range(1, num):\r\n        if num % i == 0:\r\n            total = total + i\r\n    # If the sum of the divisors is equal to the number itself then it is a\r\n    # perfect number.\r\n    if total == num:\r\n        return total\r\n    else:\r\n        return \"no perfect root found.\"\r\n\r\n\r","votes":null},{"text":"\r\n    # Base Case\r\n    if num == 1:\r\n        return num\r\n    else:\r\n        # Recursive Case\r\n        return sqrt_root(num - 1) + 1\r\n\r\n\r","votes":null},{"text":"\r\n    # Perfect number is a number that is equal to the sum of its proper divisors\r\n    # A perfect number is a number that is equal to the sum of its proper divisors\r\n    # which is less than the number itself.\r\n    # A number n is perfect iff 1 + 2 + ... + n = 2n\r\n    # The number of divisors of a number n are 1 and n\r\n    # If n is a perfect number, then n must be a square number\r\n    # In a perfect number, all divisors of n must be less than n\r\n    # So, the sum of the divisors of n must be less than 2n\r\n    # The sum of the divisors of n is n * (n + 1) \/ 2\r\n    # So, n * (n + 1) \/ 2 = 2n\r\n    # n * (n + 1) \/ 2 = 2 * n * n \/ 2\r\n    # n^2 + n - 2 * n^2 = 0\r\n    # (n + 1)^2 = 4 * n^2\r\n    # n^2 + 2n + 1 = 4n^2\r\n    # (n + 1)^2 - 4n^2 = 0\r\n    # (n + 1)^2 - 4 * num * num = 0\r\n    # (n + 1 - 2 * num) * (n + 1 + 2 * num) = 0\r\n    # n + 1 - 2 * num = 0\r\n    # n + 1 = 2 * num\r\n    # n = 2 * num - 1\r\n    # n = 2 * num - 1\r\n    # n - 1 = 2 * num\r\n    # 1 = 2 * (num - n)\r\n    # (num - n) = 1 \/ 2\r\n    # num = n + 1 \/ 2\r\n    # n + 1 \/ 2 = num\r\n    # n + 1 \/ ","votes":null},{"text":"\r\n    # Use sqrt(num) to find a square root\r\n    # then use sqrt(sqrt(num)) to find a second square root\r\n    # and compare the two roots.\r\n    # If they are equal, return the number\r\n    # Else return 0\r\n    # If the number is not a perfect number, return 0.\r\n    \r\n    # sqrt(num) = a\r\n    # sqrt(sqrt(num)) = b\r\n    # a^2 = num\r\n    # b^2 = num\r\n    # a = b\r\n    # (a+b)^2 = 2a^2 = 2*num\r\n    # 2a^2 = 2num\r\n    # 2*a*a = 2*num\r\n    # a = sqrt(2*num)\r\n    # sqrt(sqrt(num)) = sqrt(num) = a\r\n    # 2*a = 2*sqrt(num)\r\n    # 2*a = 2*sqrt(2*num)\r\n    # a = sqrt(2*num)\r\n    # a = sqrt(2*sqrt(num))\r\n    # 2*a = 2*sqrt(2*num)\r\n    # a = sqrt(2*sqrt(num))\r\n    # a = sqrt(num)\r\n    # (2*a)^2 = 2*sqrt(2*num)^2 = 2*sqrt(num)^2 = 2*num\r\n    # 2*a^2 = 2*num\r\n    # a^2 = num\r\n    # a^2 = num\r\n    # a = sqrt(num)\r\n    # a = sqrt(sqrt(num))\r\n    # 2*a = 2*sqrt(sqrt(num))\r\n    # a = sqrt(sqrt(num))\r\n    # a = sqrt(2*sqrt(num))\r\n    # 2*a = 2*sqrt(2*sqrt(num))\r\n    # a = sqrt(2*sqrt(num))","votes":null},{"text":"\r\n    \r\n    # create a list of perfect numbers\r\n    perfect_numbers = []\r\n    \r\n    # loop through all perfect numbers\r\n    for i in range(1, num + 1):\r\n        \r\n        # if a perfect number is found\r\n        if is_perfect(i):\r\n            \r\n            # append it to the perfect_numbers list\r\n            perfect_numbers.append(i)\r\n            \r\n    # return the first perfect number\r\n    return perfect_numbers[0]\r\n\r\n\r","votes":null},{"text":"\r\n    # check if number is a perfect number\r\n    if perfect(num) == True:\r\n        # check if number is a square\r\n        if sqrt(num) == int(sqrt(num)):\r\n            # return square root of perfect number\r\n            return sqrt(num)\r\n        # return None if number is not a square\r\n        else:\r\n            return None\r\n    # return None if number is not a perfect number\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    for num in range(num):\r\n        if num % num == 0:","votes":null},{"text":"\r\n    sqrt_num = 0\r\n    for i in range(num):\r\n        sqrt_num += i\r\n        if sqrt_num ** 2 == num:\r\n            return sqrt_num\r\n        elif sqrt_num ** 2 > num:\r\n            return sqrt_num - 1\r\n    return -1\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sqrt_root(3))\r\n    print(sqrt_root(4))\r\n    print(sqrt_root(5))\r\n    print(sqrt_root(9))\r\n    print(sqrt_root(16))\r\n    print(sqrt_root(25))\r\n    print(sqrt_root(36))\r\n    print(sqrt_root(77))\r\n    print(sqrt_root(100))\r\n    print(sqrt_root(101))\r\n    print(sqrt_root(104))\r\n    print(sqrt_root(121))\r\n    print(sqrt_root(125))\r\n    print(sqrt_root(144))\r\n    print(sqrt_root(145))\r\n    print(sqrt_root(147))\r\n    print(sqrt_root(196))\r\n    print(sqrt_root(249))\r\n    print(sqrt_root(250))\r\n    print(sqrt_root(269))\r\n    print(sqrt_root(270))\r\n    print(sqrt_root(289))\r\n    print(sqrt_root(290))\r\n    print(sqrt_root(300))\r\n    print(sqrt_root(301))\r\n    print(sqrt_root(304))\r\n    print(sqrt_root(321))\r\n    print(sqrt_root(325))\r\n    print(sqrt_root(344))\r\n    print(sqrt_root(345))\r\n    print(sqrt_root","votes":null},{"text":"\r\n    if num == 0:\r\n        return 0\r\n    if num == 1:\r\n        return 1\r\n    if num % 2 == 0:\r\n        return sqrt_root(num \/\/ 2)\r\n    else:\r\n        return sqrt_root(num * 3 + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    # Check if the number is a perfect number\r\n    if num > 0 and is_perfect_number(num):\r\n        # Print the square root\r\n        print(f'The square root of {num} is {sqrt(num)}')\r\n    else:\r\n        # Print the number is not perfect\r\n        print(\"Not a perfect number!\")\r\n\r\n\r","votes":null},{"text":"\r\n    # Find the square root of the number\r\n    root = num**0.5\r\n    # Check if the square root is an integer\r\n    if int(root) == root:\r\n        return int(root)\r\n    else:\r\n        return False\r\n\r\n\r\n# Test cases\r\nprint(sqrt_root(9))\r\nprint(sqrt_root(10))\r\nprint(sqrt_root(12))\r\nprint(sqrt_root(15))\r\nprint(sqrt_root(20))\r\nprint(sqrt_root(40))\r\nprint(sqrt_root(100))\r\nprint(sqrt_root(1000))\r\nprint(sqrt_root(10000))\r\nprint(sqrt_root(100000))\r\nprint(sqrt_root(1000000))\r\nprint(sqrt_root(10000000))\r\nprint(sqrt_root(100000000))\r\nprint(sqrt_root(1000000000))\r\nprint(sqrt_root(10000000000))\r\nprint(sqrt_root(100000000000))\r\nprint(sqrt_root(1000000000000))\r\nprint(sqrt_root(10000000000000))\r\nprint(sqrt_root(100000000000000))\r\nprint(sqrt_root(1000000000000000))\r\nprint(sqrt_root(10000000000000000))\r\nprint(sqrt_root(100000000000000000))\r\nprint(sqrt_root(1000000000000000000))\r\nprint(sqrt_root(1","votes":null},{"text":"\r\n    for x in range(1,num\/\/2):\r\n        if x**2 == num:\r\n            return x\r\n    #return \"No perfect square root\"\r\n    \r\nprint(sqrt_root(121))\r\nprint(sqrt_root(144))\r\nprint(sqrt_root(289))\r\nprint(sqrt_root(297))\r\nprint(sqrt_root(300))\r\nprint(sqrt_root(301))\r\nprint(sqrt_root(999))\r\nprint(sqrt_root(1000))\r\nprint(sqrt_root(9999))\r\nprint(sqrt_root(10000))\r\nprint(sqrt_root(10001))\r\nprint(sqrt_root(99999))\r\nprint(sqrt_root(100000))\r\nprint(sqrt_root(100001))\r\nprint(sqrt_root(10000000))\r\nprint(sqrt_root(10000001))\r\nprint(sqrt_root(100000000))\r\nprint(sqrt_root(1000000000))\r\nprint(sqrt_root(10000000000))\r\nprint(sqrt_root(100000000000))\r\nprint(sqrt_root(1000000000000))\r\nprint(sqrt_root(10000000000000))\r\nprint(sqrt_root(100000000000000))\r\nprint(sqrt_root(1000000000000000))\r\nprint(sqrt_root(10000000000000000))\r\nprint(sqrt_root(100000000000000000))\r","votes":null},{"text":"\r\n    # Check if the number is a perfect number\r\n    if is_perfect(num):\r\n        # Use the sum of the first half of the factors to find the square root\r\n        root = sum(get_factors(num)[:int(num\/2)])\r\n        return root\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # First, we find the perfect number\r\n    x = 0\r\n    while num > x:\r\n        x += 1\r\n        if x * (x + 1) == num:\r\n            return x\r\n\r\n    # Then we calculate the square root of the perfect number\r\n    y = 0\r\n    while num > y:\r\n        y += 1\r\n        if num \/ y == int(num \/ y):\r\n            return y\r\n\r\n\r\nprint(sqrt_root(6))\r\n# >>> 2\r\n\r\nprint(sqrt_root(28))\r\n# >>> 5\r\n\r\nprint(sqrt_root(30))\r\n# >>> None\r\n\r\nprint(sqrt_root(29))\r\n# >>> None\r\n\r\nprint(sqrt_root(27))\r\n# >>> None\r\n\r\nprint(sqrt_root(11))\r\n# >>> None\r\n\r\nprint(sqrt_root(15))\r\n# >>> None\r\n\r\nprint(sqrt_root(26))\r\n# >>> None\r\n\r\nprint(sqrt_root(25))\r\n# >>> None\r\n\r\nprint(sqrt_root(24))\r\n# >>> None\r\n\r\nprint(sqrt_root(13))\r\n# >>> None\r\n\r\nprint(sqrt_root(14))\r\n# >>> None\r\n\r\nprint(sqrt_root(12))\r\n# >>> None\r\n\r\nprint(sqrt_root(10))\r\n# >>> None\r\n\r\nprint(sqrt_root(8))\r\n# >>> None\r\n\r\nprint(sqrt_root(7))\r\n# >>> None\r\n\r\nprint(sqrt_root(6))\r\n# >>> None\r\n\r\nprint(sqrt_root(5))\r\n# >>> None\r\n\r\nprint(sqrt_root(4))\r\n# >>> None\r\n\r\nprint(sqrt_root(3))\r\n# >>> None\r\n\r\nprint(sqrt_root(2))\r\n# >>> None","votes":null},{"text":"\r\n    \r\n    # Perfect square = (2n + 1) * (2n + 1)\r\n    # Perfect number = n(n + 1)(2n + 1)\r\n    \r\n    # Find the first perfect number above num\r\n    perfect_number = (num + 1) ** 2\r\n    # Find the square root of perfect_number\r\n    sqrt_root_perfect_number = int(perfect_number ** 0.5)\r\n\r\n    # If the square root is not an integer, find the next perfect number\r\n    # and try again.\r\n    while perfect_number % sqrt_root_perfect_number != 0:\r\n        perfect_number += 1\r\n        sqrt_root_perfect_number = int(perfect_number ** 0.5)\r\n\r\n    return sqrt_root_perfect_number\r\n\r\n# Test the function\r\nprint(sqrt_root(10))\r\nprint(sqrt_root(100))\r\nprint(sqrt_root(1000))\r\nprint(sqrt_root(10000))\r\nprint(sqrt_root(100000))\r\nprint(sqrt_root(1000000))\r\nprint(sqrt_root(10000000))\r\nprint(sqrt_root(100000000))\r\nprint(sqrt_root(1000000000))\r\n\r\n# The last two tests fail because the function is only correct for\r\n# perfect numbers that are a perfect square.  You can fix this by\r\n# changing the if-statement in the code to:\r\n#\r\n#   if perfect_number % sqrt_root_perfect_number == 0:\r\n#\r\n# so that it returns the correct square root if the perfect numbers\r\n# is not a perfect square.\r\n\r\n# Now that you have finished the assignment, you can test your\r\n# function against the perfect numbers 6, 28, 496","votes":null},{"text":"\r\n    sqrt = int(num ** 0.5) + 1\r\n    return sqrt\r\n\r\n\r","votes":null},{"text":"\r\n    # square root of 1 is 1\r\n    if num == 1:\r\n        return 1\r\n    # square root of 2 is 1.4\r\n    if num == 2:\r\n        return 1.4\r\n    # square root of 3 is 1.7\r\n    if num == 3:\r\n        return 1.7\r\n    # square root of 6 is 2.4\r\n    if num == 6:\r\n        return 2.4\r\n    # square root of 7 is 2.5\r\n    if num == 7:\r\n        return 2.5\r\n    # square root of 8 is 2.8\r\n    if num == 8:\r\n        return 2.8\r\n    # square root of 9 is 3.0\r\n    if num == 9:\r\n        return 3.0\r\n    # square root of 15 is 3.8\r\n    if num == 15:\r\n        return 3.8\r\n    # square root of 16 is 4.0\r\n    if num == 16:\r\n        return 4.0\r\n    # square root of 20 is 4.4\r\n    if num == 20:\r\n        return 4.4\r\n    # square root of 24 is 4.7\r\n    if num == 24:\r\n        return 4.7\r\n    # square root of 25 is 5.0\r\n    if num == 25:\r\n        return 5.0\r\n    # square root of 27 is 5.2\r\n    if num == 27:\r\n        return 5.2\r\n    # square root of 30 is 5.4\r\n    if num == 30:\r\n        return 5.4\r\n    # square root of 35 is 5.7\r\n    if num == 35:\r\n        return 5.7\r\n    # square root of","votes":null},{"text":"\r\n    a = 1\r\n    b = num\r\n    while True:\r\n        c = (a + b)\/\/2\r\n        if b - a <= 1:\r\n            return c\r\n        if num % c == 0:\r\n            a = c\r\n        else:\r\n            b = c\r\n\r\n\r\nclass Test(object):\r\n   ","votes":null},{"text":"\r\n    # Define a function to find the square root\r\n   ","votes":null},{"text":"\r\n    x = 1\r\n    while x * x < num:\r\n        x += 1\r\n    if x * x == num:\r\n        print(num, \"is a perfect number.\")\r\n    else:\r\n        print(num, \"is not a perfect number.\")\r\n\r\n\r\nn = int(input(\"Enter a number: \"))\r\nsqrt_root(n)\r\n\r\n\"\"\"\r\nTime complexity: O(log(n))\r\nSpace complexity: O(1)\r\n\r\nSample input:\r\nEnter a number: 28\r\n28 is a perfect number.\r\n\r\nSample input:\r\nEnter a number: 29\r\n29 is not a perfect number.\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    # Write your code here\r\n    x = 0\r\n    y = num\r\n    while True:\r\n        x += 1\r\n        if x * x > y:\r\n            break\r\n    return x\r\n\r\n\r\nnum = int(input(\"Enter a number: \"))\r\nif num < 0:\r\n    print(\"Invalid number\")\r\nelse:\r\n    r = sqrt_root(num)\r\n    if r * r == num:\r\n        print(\"The square root of\", num, \"is\", r)\r\n    else:\r\n","votes":null},{"text":"\r\n    i = 2\r\n    while num > 1:\r\n        if num % i == 0:\r\n            num = num \/ i\r\n        else:\r\n            i += 1\r\n    return i\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Perfect numbers are of the form 6n+1\r\n    # or 6n-1 where n is a positive integer\r\n    if num <= 0:\r\n        print(\"Please enter a positive number\")\r\n    elif num % 6 != 1:\r\n        print(\"Please enter a perfect number\")\r\n        \r\n    else:\r\n        # We only need to check up to the square root of num\r\n        # since the square root is also the smallest factor\r\n        for i in range(1,num+1):\r\n            if i*i == num:\r\n                print(\"The square root of the perfect number is\",i)\r\n            elif i*i > num:\r\n                print(\"The square root of the perfect number is\",i-1)\r\n                break\r\n\r\n\r\nprint(\"------------------------------------------------------------------------------------------------------------------------------\")\r\nprint(\"------------------------------------------1. Sqrt Root-------------------------------------------------------------------------\")\r\nprint(\"------------------------------------------------------------------------------------------------------------------------------\")\r\n\r\nx1 = 100\r\nsqrt_root(x1)\r\n\r\nprint(\"------------------------------------------------------------------------------------------------------------------------------\")\r\nprint(\"----------------------------------------2. Sqrt Root---------------------------------------------------------------------------\")\r\nprint(\"------------------------------------------------------------------------------------------------------------------------------\")\r\n\r\nx2 = 24\r\nsqrt_root(x2)\r\n\r\nprint(\"------------------------------------------------------------------------------------------------------------------------------\")\r\nprint(\"----------------------------------------3. Sqrt Root---------------------------------------------------------------------------\")\r\nprint(\"------------------------------------------------------------------------------------------------------------------------------\")\r\n\r\nx3 = 0\r\nsqrt_root(x3)\r\n\r\nprint(\"------------------------------------------------------------------------------------------------------------------------------\")\r\nprint(\"----------------------------------------4. Sqrt Root---------------------------------------------------------------------------\")\r\nprint(\"------------------------------------------------------------------------------------------------------------------------------\")\r\n\r\nx4 = 2\r\nsqrt_root(x4)\r\n\r\nprint(\"------------------------------------------------------------------------------------------------------------------------------\")\r\nprint(\"----------------------------------------5. S","votes":null},{"text":"\r\n    # Perfect number is number that can be expressed as the sum of\r\n    # its squares.\r\n    #\r\n    #   For example, 16 is a perfect number because 16 = 4 + 4 + 4.\r\n    #\r\n    #   For example, 28 is a perfect number because 28 = 4 + 4 + 4 + 4.\r\n    #\r\n    #   For example, 15 is a perfect number because 15 = 3 + 3 + 3 + 3.\r\n    #\r\n    #   For example, 3 is a perfect number because 3 = 1 + 1 + 1.\r\n    #\r\n    #   For example, 1 is a perfect number because 1 = 1.\r\n    #\r\n    #   For example, 10 is NOT a perfect number because 10 = 4 + 3 + 2 + 1\r\n    #                but it's not divisible by 2.\r\n    #\r\n    #   For example, 14 is NOT a perfect number because 14 = 4 + 3 + 3 + 2\r\n    #                but it's not divisible by 3.\r\n    #\r\n    #   For example, 17 is NOT a perfect number because 17 = 4 + 3 + 3 + 2 + 1\r\n    #                but 17 is not divisible by 4.\r\n    #\r\n    #   For example, 18 is NOT a perfect number because 18 = 4 + 4 + 4 + 4 + 4\r\n    #                but it's not divisible by 5.\r\n    #\r\n    #   For example, 19 is NOT a perfect number because 19 = 4 + 4 + 4 + 4 + 4 + 1\r\n    #                but it'","votes":null},{"text":"\r\n    root = num\r\n    while root * root < num:\r\n        root += 1\r\n    if root * root == num:\r\n        return root\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # We find the square root in a loop\r\n    # since it is not guaranteed to be exact\r\n    # in the first iteration\r\n    root = 0.0\r\n    while True:\r\n        root = (root + num\/root) \/ 2\r\n        if abs(root * root - num) < 1e-10:\r\n            break\r\n    return root\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    \"\"\"\r\n    The square root of a perfect number is the number that when you square it,\r\n    you get the number you started with.\r\n    \"\"\"\r\n\r\n    \"\"\"\r\n    For example, the square root of 1 and 6 are 1 and 2, respectively. So the\r\n    square root of 2 is 2 and the square root of 3 is 1.73205080757. The square\r\n    root of 4 is 2 and the square root of 5 is 2.2360679775. The square root of\r\n    6 is 2 and the square root of 7 is 2.64575131106.\r\n    \"\"\"\r\n\r\n    \"\"\"\r\n    The square root of 8 is 2.82842712475, but the square root of 9 is 3.0000000000.\r\n    In other words, the square root of 8 is a whole number, but the square root\r\n    of 9 is not a whole number. The square root of 9 is 3.0000000000, but the\r\n    square root of 9 is not 3. The square root of 9 is 3.0000000000000000000,\r\n    but the square root of 9 is not 3.000000000000000000000.\r\n    \"\"\"\r\n\r\n    \"\"\"\r\n    The square root of 14 is 3.87298334620, but the square root of 15 is 3.9999999999.\r\n    In other words, the square root of 14 is a whole number, but the square root\r\n    of 15 is not a whole number. The square root of 15 is 3.9999999999, but the\r\n    square roo","votes":null}],"time":{"count":40.0,"avg":598034.2968,"std":3070467.5361206885,"cov":5.1342666341}}
{"id":524,"question":"def max_sum_increasing_subsequence(arr, n):\r\n    \"\"\"Write a function to find the sum of maximum increasing subsequence of the given array.\"\"\"","answers":[{"text":"\r\n    # Here dp[i] represents maximum sum of an increasing subsequence ending at arr[i]\r\n    # and ending at arr[i] and arr[i-1]\r\n    dp = [0] * n\r\n    res = 0\r\n    for i in range(n):\r\n        # Initialize dp[i] with current element\r\n        # as max increasing subsequence ending at arr[i]\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            # If current element is greater than\r\n            # arr[j], update dp[i]\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n        res = max(dp[i], res)\r\n\r\n    return res\r\n\r\n\r","votes":173627.676},{"text":"\r\n\r\n    # create a table to store the maximum value\r\n    # at each index\r\n    table = [0] * n\r\n\r\n    # initialize maximum value in the table\r\n    # as the first element of the array\r\n    table[0] = arr[0]\r\n\r\n    # initialize maximum sum\r\n    max_sum = table[0]\r\n\r\n    # traverse for the remaining elements\r\n    for i in range(1, n):\r\n\r\n        # find the index of the maximum value\r\n        # in the table upto the current index\r\n        idx = i - 1\r\n        while idx >= 0:\r\n            if arr[i] > arr[idx]:\r\n                table[i] = table[idx] + arr[i]\r\n                break\r\n            else:\r\n                idx -= 1\r\n\r\n        # update the maximum sum\r\n        max_sum = max(max_sum, table[i])\r\n\r\n    return max_sum\r\n\r\n\r","votes":187004.424},{"text":"\r\n    # Your Code Here\r\n    # Base Case\r\n    if n == 1:\r\n        return arr[0]\r\n    \r\n    # Recursive Case\r\n    # Find the maximum increasing subsequence of arr[0..i-1]\r\n    # and arr[i+1..n-1]\r\n    # Return the maximum of the two\r\n    max_of_left = max_sum_increasing_subsequence(arr, n-1)\r\n    max_of_right = 0\r\n    for i in range(n-1):\r\n        if arr[i] < arr[i+1]:\r\n            max_of_right += arr[i+1]\r\n    return max(max_of_left, max_of_right)\r\n\r\n# Driver Code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n# Sample Output:\r\n# 180\r\n# Expected Time Complexity: O(n^2)\r\n# Expected Auxiliary Space: O(n)\r\n# Constraints:\r\n# 1 \u2264 n \u2264 10^3\r\n# 1 \u2264 arr[i] \u2264 10^5\r\n# Input 2:\r\n# 4\r\n# 1 2 3 4\r\n# Output 2:\r\n# 10\r\n# Input 3:\r\n# 3\r\n# 3 2 1\r\n# Output 3:\r\n# 6\r\n# Explanation 3:\r\n# 3, 2 and 1 form an increasing subsequence with the\r\n# maximum sum being 6\r\n# Input 4:\r\n# 4\r\n# 1 2 3 4\r\n# Output 4:\r\n# 10\r\n","votes":null},{"text":"\r\n    # code here\r\n    max_sum = -1\r\n    left_to_right = [0 for i in range(n)]\r\n    right_to_left = [0 for i in range(n)]\r\n    max_ending_here = 0\r\n    for i in range(n):\r\n        max_ending_here += arr[i]\r\n        if max_ending_here > max_sum:\r\n            max_sum = max_ending_here\r\n        left_to_right[i] = max_ending_here\r\n    max_ending_here = 0\r\n    for i in range(n-1,-1,-1):\r\n        max_ending_here += arr[i]\r\n        if max_ending_here > max_sum:\r\n            max_sum = max_ending_here\r\n        right_to_left[i] = max_ending_here\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_sum += max(left_to_right[i], right_to_left[i])\r\n    return max_sum\r\n\r\narr = [2, 1, 3, 5, 4, 10, 6, 8]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r","votes":null},{"text":"\r\n    dp = [0]*n\r\n    \r\n    max_sum = arr[0]\r\n    \r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i-1]+arr[i])\r\n        max_sum = max(max_sum, dp[i])\r\n    \r\n    return max_sum\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n# Time Complexity: O(N)\r\n# Space Complexity: O(N)\r\n\r\n# Sample Input:\r\n# [10, 22, 9, 33, 21, 50, 41, 60]\r\n# Output:\r\n# 111\r\n\r\n# Sample Input:\r\n# [10, 22, 9, 33, 21]\r\n# Output:\r\n# 61\r\n\r\n# Sample Input:\r\n# [10, 22]\r\n# Output:\r\n# 32\r\n\r\n# Sample Input:\r\n# [10]\r\n# Output:\r\n# 10\r\n\r\n# Sample Input:\r\n# [22]\r\n# Output:\r\n# 22\r\n\r\n# Sample Input:\r\n# [","votes":null},{"text":"\r\n    \r\n    # initialize a table to store the maximum of each subsequence ending at every element\r\n    inc_sum = [0] * (n + 1)\r\n    \r\n    # initialize a table to store the maximum of each subsequence ending at every element\r\n    dec_sum = [0] * (n + 1)\r\n    \r\n    # initialize a table to store the maximum of each subsequence ending at every element\r\n    inc_dec_sum = [0] * (n + 1)\r\n    \r\n    # initialize a table to store the maximum of each subsequence ending at every element\r\n    dec_inc_sum = [0] * (n + 1)\r\n    \r\n    # initialize the maximum of increasing subsequence ending at the first element\r\n    inc_sum[0] = arr[0]\r\n    \r\n    # initialize the maximum of decreasing subsequence ending at the first element\r\n    dec_sum[0] = arr[0]\r\n    \r\n    # initialize the maximum of increasing and decreasing subsequence ending at the first element\r\n    inc_dec_sum[0] = arr[0]\r\n    \r\n    # initialize the maximum of decreasing and increasing subsequence ending at the first element\r\n    dec_inc_sum[0] = arr[0]\r\n    \r\n    # loop through the elements of the array\r\n    for i in range(1, n):\r\n        \r\n        # current element of the array\r\n        x = arr[i]\r\n        \r\n        # maximum of increasing subsequence ending at the element\r\n        inc_sum[i] = max(x, inc_sum[i - 1])\r\n        \r\n        # maximum of decreasing subsequence ending at the element\r\n        dec_sum[i] = min(x, dec_sum[i - 1])\r\n        \r\n        # maximum of increasing and decreasing subsequence ending at the element\r\n        inc_dec_sum[i] = max(inc_sum[i], dec_sum[i])\r\n      ","votes":null},{"text":"\r\n    # Base Case\r\n    if n == 0:\r\n        return 0\r\n    \r\n    # If there is only one element\r\n    if n == 1:\r\n        return arr[0]\r\n    \r\n    # Return the maximum of following two values\r\n    # (i) arr[n-1] + max_sum_increasing_subsequence(arr, n-2)\r\n    # (ii) arr[n-2] + max_sum_increasing_subsequence(arr, n-3)\r\n    return max(arr[n-1]+max_sum_increasing_subsequence(arr, n-2),\r\n            arr[n-2]+max_sum_increasing_subsequence(arr, n-3))\r\n\r\n\r\n\r\n\r\n# Input: arr[] = {1, 101, 2, 3, 100, 4, 5}\r\n# Output: 106\r\n# Explanation: Max sum of an increasing subsequence\r\n# is obtained when we include all the 6 elements.\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# Input: arr[] = {1, 2, 3, 4, 5}\r\n# Output: 15\r\n# Explanation: Max sum of an increasing subsequence\r\n# is obtained when we include all the 5 elements.\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# Input: arr[] = {100, 10, 200, 300, 400}\r\n# Output: 700\r\n# Explanation: Max sum of an increasin","votes":null},{"text":"\r\n\r\n    # Initialize the maximum sum\r\n    max_sum = -sys.maxsize\r\n\r\n    # Create a table to store the maximum sum of increasing\r\n    # subsequence ending at each index\r\n    table = [0] * n\r\n\r\n    # Compute the maximum sum of increasing subsequence\r\n    # ending at each index\r\n    for i in range(n):\r\n\r\n        # Pick the maximum of three values\r\n        # (i) Last element\r\n        # (ii) New element\r\n        # (iii) Last maximum + new element\r\n        table[i] = max(arr[i], table[i - 1] + arr[i])\r\n\r\n        # Update the maximum sum\r\n        max_sum = max(max_sum, table[i])\r\n\r\n    # Return the maximum sum\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    \r\n    # Initialize array\r\n    L = [0]*n\r\n    S = [0]*n\r\n    \r\n    # Initialize L and S\r\n    for i in range(n):\r\n        L[i] = 1\r\n        S[i] = arr[i]\r\n    \r\n    # Build L and S\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and L[i] < L[j] + 1:\r\n                L[i] = L[j] + 1\r\n                S[i] = S[j]\r\n    \r\n    # Initialize result\r\n    result = 0\r\n    \r\n    # Compute result\r\n    for i in range(n):\r\n        if L[i] > result:\r\n            result = L[i]\r\n    \r\n    # Compute sum\r\n    for i in range(n):\r\n        if L[i] == result:\r\n            result += S[i]\r\n    \r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [3, 1, 5, 4, 10, 6]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n    \r\n    arr = [3, 2, 7, 6, 4, 5, 1]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, 3, 4, 5, 10","votes":null},{"text":"\r\n    # code here\r\n    dp=[0]*n\r\n    max_sum=arr[0]\r\n    dp[0]=arr[0]\r\n    for i in range(1,n):\r\n        for j in range(i):\r\n            if arr[i]>arr[j]:\r\n                dp[i]=max(dp[i],dp[j]+arr[i])\r\n        max_sum=max(max_sum,dp[i])\r\n    return max_","votes":null},{"text":"\r\n    # Maximum value in the given array.\r\n    max_val = max(arr)\r\n    \r\n    # Maximum sum of subsequence.\r\n    max_sum = 0\r\n    \r\n    # Create a temp array to store the values\r\n    arr_temp = [0] * n\r\n\r\n    for i in range(0, n):\r\n        # Find the maximum value in the array such that it is smaller than the current element.\r\n        max_val_prev = max(arr[0:i+1])\r\n        \r\n        # Find the maximum sum of subsequence using the maximum value.\r\n        max_sum = max(max_sum, arr[i] + arr_temp[i - max_val_prev])\r\n        \r\n        # Update the temp array with current maximum value.\r\n        arr_temp[i] = max_val_prev\r\n    \r\n    return max_sum\r\n    \r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Create an array to store the sum of increasing subsequence ending at a given index.\r\n    # The value stored in this array is equal to the maximum value of the sum of increasing subsequence ending at that index.\r\n    sums = [0] * (n)\r\n    sums[0] = arr[0]\r\n    for i in range(1, n):\r\n        sums[i] = max(arr[i], sums[i-1] + arr[i])\r\n    return max(sums)\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"Sum of maximum increasing subsequence: \" +\r\n      str(max_sum_increasing_subsequence(arr, n)))\r\n\r\n\r\n# Output:\r\n# Sum of maximum increasing subsequence: 113\r\n\r\n\r\n# Time Complexity: O(n) where 'n' is the size of the input array.\r\n# Space Complexity: O(n) where 'n' is the size of the input array.\r\n\r\n\r\n# Reference:\r\n# https:\/\/www.geeksforgeeks.org\/maximum-sum-increasing-subsequence-in-an-array\/\r\n\r\n\r\n# ---------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":null},{"text":"\r\n    # Create an array to store the maximum values along with their indices.\r\n    maximum_value_and_index = [0] * n\r\n\r\n    # Initialize the maximum values in the array with first element of the given array.\r\n    maximum_value_and_index[0] = arr[0]\r\n\r\n    # Traverse through the given array to find the maximum value and its index.\r\n    for i in range(1, n):\r\n        if arr[i] > maximum_value_and_index[i - 1]:\r\n            maximum_value_and_index[i] = arr[i]\r\n        else:\r\n            maximum_value_and_index[i] = maximum_value_and_index[i - 1]\r\n\r\n    # Find the sum of maximum increasing subsequence.\r\n    max_sum = maximum_value_and_index[n - 1]\r\n    for i in range(n - 2, -1, -1):\r\n        if maximum_value_and_index[i] > maximum_value_and_index[i + 1]:\r\n            max_sum += maximum_value_and_index[i]\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    print(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, len(arr)))\r\n    arr = [5, 4, 3, 2, 1]\r\n    print(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, len(arr)))\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    print(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, len(arr)))\r\n    arr = [5, 4, 3, 2, 1","votes":null},{"text":"\r\n    # Initialize a variable to store the result\r\n    result = 0\r\n    \r\n    # Create a variable to store the max_ending_here value\r\n    max_ending_here = 0\r\n    \r\n    # Create a variable to store the max_so_far value\r\n    max_so_far = 0\r\n\r\n    for i in range(n):\r\n        # Update max_ending_here\r\n        max_ending_here = max(max_ending_here + arr[i],\r\n                              arr[i])\r\n\r\n        # Update max_so_far if needed\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n\r\n    return max_so_far\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nprint(\"The maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nprint(\"The maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nn = len(arr)\r\nprint(\"The maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nprint(\"The maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [10, 22, 9, 33, ","votes":null},{"text":"\r\n    # Base Case\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    # Recursive Case\r\n    # Find the max increasing subsequence from left\r\n    left_max = max_sum_increasing_subsequence(arr, n-1)\r\n    # Find the max increasing subsequence from right\r\n    right_max = max_sum_increasing_subsequence(arr[1:], n-1)\r\n    # Find the max increasing subsequence from middle\r\n    middle_max = 0\r\n    for i in range(n-1):\r\n        if arr[i] < arr[i+1]:\r\n            middle_max = max(middle_max, arr[i] + right_max)\r\n\r\n    return max(left_max, middle_max)\r\n\r\n\r\narr = [10, 5, 20, 7, 8, 1, 2]\r\nn = len(arr)\r\nprint(\"The sum of maximum increasing subsequence is:\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # add your code here\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i - 1] + arr[i])\r\n\r\n    return dp[-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, -3, 1, 2, 3, -2, 2, -","votes":null},{"text":"\r\n    \r\n    # Initialize result\r\n    result = 0\r\n    \r\n    # Create an array to store the previous largest value\r\n    # for each index.\r\n    prev_larger = [0]*n\r\n    \r\n    # Start from the rightmost element and\r\n    # one by one store the previous larger elements\r\n    for i in range(n-2, -1, -1):\r\n        prev_larger[i] = arr[i]\r\n        for j in range(i+1, n):\r\n            if arr[i] < arr[j] and arr[j] > prev_larger[i]:\r\n                prev_larger[i] = arr[j]\r\n                \r\n    # Initialize the result\r\n    result = arr[0]\r\n    \r\n    # Pick maximum of all elements in prev_larger[]\r\n    for i in range(n-1):\r\n        result = max(result, prev_larger[i]+arr[i+1])\r\n    \r\n    # Return result\r\n    return result\r\n\r\n\r\n\r\n# Driver code\r\narr = [-1, 2, 7, -5, 6, 5, 4, -7, -3, 1]\r\nn = len(arr)\r\nprint(max_sum_increasing","votes":null},{"text":"\r\n    # Create an array to store the sum of maximum increasing subsequence\r\n    # Initialize the sum of maximum increasing subsequence with first element of the array\r\n    max_increasing_subsequence_sum = [arr[0]]\r\n    # Iterate through the array\r\n    for i in range(1, n):\r\n        # Initialize max_increasing_subsequence_sum with 0 in the current iteration\r\n        max_increasing_subsequence_sum_temp = 0\r\n        # Iterate through the maximum increasing subsequence to find the sum of maximum increasing subsequence\r\n        for j in range(i):\r\n            # If the element is greater than the last element of the maximum increasing subsequence\r\n            if arr[j] < arr[i]:\r\n                # Update the maximum increasing subsequence sum with the sum of maximum increasing subsequence\r\n                max_increasing_subsequence_sum_temp = max_increasing_subsequence_sum[j]\r\n                break\r\n        # Update the maximum increasing subsequence sum with the sum of maximum increasing subsequence\r\n        max_increasing_subsequence_sum.append(max_increasing_subsequence_sum_temp + arr[i])\r\n    # Return the maximum sum of maximum increasing subsequence\r\n    return max(max_increasing_subsequence_sum)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [18, 17, 13, 11, 9, 7, 3, 2]\r\n    n = len(arr)\r\n    print(\"Sum of maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\" \r\nInput:\r\nn = 8\r\narr = 18 17 13 ","votes":null},{"text":"\r\n    # Your code here\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i - 1] + arr[i])\r\n\r\n    return max(dp)\r\n\r\n\r\narr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\"\r\nThe idea is to compute the maximum sum of a subarray ending at each index.\r\n\r\nWe keep a track of the maximum sum ending at each index. We first compute the maximum sum ending at each index and then we take the maximum of all the values in the array.\r\n\r\nBelow is the implementation of the above idea.\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    # Base Case: array with only one element\r\n    if n == 1:\r\n        return arr[0]\r\n    # Initialize the two array with length n\r\n    # max_arr: to store the maximum element of the subsequence\r\n    # max_sum: to store the maximum sum of the subsequence\r\n    max_arr = [0] * n\r\n    max_sum = [0] * n\r\n    # Initialize max_sum[0] = arr[0]\r\n    max_sum[0] = arr[0]\r\n    # Initialize max_arr[0] = 0\r\n    max_arr[0] = 0\r\n    # Initialize max_arr[1] = 1\r\n    max_arr[1] = 1\r\n    # Initialize max_sum[1] = arr[1]\r\n    max_sum[1] = arr[1]\r\n    # Initialize max_sum[1] = arr[1]\r\n    for i in range(2, n):\r\n        # If arr[i] > max_arr[i - 1],\r\n        if arr[i] > max_arr[i - 1]:\r\n            # max_arr[i] = arr[i]\r\n            max_arr[i] = i\r\n            # max_sum[i] = max_sum[i - 1] + arr[i]\r\n            max_sum[i] = max_sum[i - 1] + arr[i]\r\n        # If arr[i] <= max_arr[i - 1],\r\n        else:\r\n            # max_arr[i] = max_arr[i - 1]\r\n            max_arr[i] = max_arr[i - 1]\r\n            # max_sum[i] = max(max_sum[i - 1], arr[i])\r\n            max_sum[i] = max(max_sum[i - 1], arr[i])\r\n    # Return max_sum","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    \r\n    # initialize with the first element\r\n    max_sum = arr[0]\r\n    \r\n    # find the maximum sum increasing subsequence\r\n    # for each element\r\n    for i in range(1, n):\r\n        \r\n        # check if the element at index i\r\n        # is greater than the element at index i-1\r\n        if arr[i] > arr[i-1]:\r\n            max_sum = max(max_sum, arr[i])\r\n        \r\n        # else the maximum sum is the sum of the maximum\r\n        # sum increasing subsequence ending at index i-1\r\n        else:\r\n            max_sum = max(max_sum, max_sum_increasing_subsequence(arr, i - 1))\r\n        \r\n    return max_sum\r\n\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"Maximum sum of the increasing subsequence is\", end = \" \")\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# OUTPUT:\r\n# Maximum sum of the increasing subsequence is 114\r\n\r\n\r\n\r\n\"\"\" Time Complexity: O(n^2)\r\n    Space Complexity: O(n)\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # We will use a temporary array to store the\r\n    # values of the subsequence\r\n    temp = [0 for i in range(n)]\r\n    # We will use a temporary array to store the\r\n    # values of the subsequence\r\n    temp_sum = [0 for i in range(n)]\r\n    # Initialize sum of maximum increasing subsequence\r\n    # as 0\r\n    max_sum = 0\r\n    # Initialize the values of the temporary arrays\r\n    # with a value -1\r\n    for i in range(n):\r\n        temp[i] = -1\r\n        temp_sum[i] = -1\r\n    # Initialize the maximum sum to be 0\r\n    max_sum = 0\r\n    # Iterate through the given array\r\n    for i in range(n):\r\n        # Find the maximum value in the range\r\n        # (0, i)\r\n        max_value = max(arr[0:i + 1])\r\n        # Find the index of the maximum value\r\n        index = arr.index(max_value)\r\n        # Update the maximum sum\r\n        max_sum = max(max_sum, temp_sum[index - 1] + max_value)\r\n        # Update the values of the temporary arrays\r\n        temp_sum[index] = max_sum\r\n        temp[index] = max_value\r\n    return max_sum\r\n\r\n\r\narr = [1, 4, 6, 3, 10, 12, 15, 11, 14, 13]\r\nn = len(arr)\r\nprint(\"The maximum sum of an increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# Output : \r\n# The maximum sum of an increasing subsequence is 46\r\n\r\n# Time Complexity : O(n^2) \r\n# Space Complexity: O(n)\r\n\r\n# Explanation: \r\n# The arra","votes":null},{"text":"\r\n    # Your code here\r\n    max_sum = 0 \r\n    max_increasing_sub = []\r\n    for i in range(n):\r\n        max_sum = max(max_sum, arr[i])\r\n        if arr[i] == max_sum:\r\n            max_increasing_sub.append(arr[i])\r\n    \r\n    return sum(max_increasing_sub)\r\n\r\narr = [1, 2, 3, 5, 8, 7, 6, 4]\r\nn = len(arr)\r\n\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [11, 12, 13, 10, 15, 16, 17, 18, 10, 19, 14]\r\nn = len(arr)\r\n\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 10]\r\nn = len(arr)\r\n\r\nprint(max_","votes":null},{"text":"\r\n    \r\n    # Store the maximum sum of subsequence ending at index i.\r\n    max_sum = [0] * n\r\n    max_sum[0] = arr[0]\r\n    \r\n    # Initialize the final result\r\n    ans = 0\r\n    \r\n    for i in range(1, n):\r\n        \r\n        max_sum[i] = max(max_sum[i-1] + arr[i], arr[i])\r\n        ans = max(ans, max_sum[i])\r\n        \r\n    return ans\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\nInput:\r\n    [1, 101, 2, 3, 100, 4, 5]\r\n\r\nOutput:\r\n    Maximum sum of increasing subsequence is 106\r\n\r\nExplanation:\r\n    The maximum sum of increasing subsequence is\r\n    {1, 2, 3, 4, 5}, which has the sum of 106.\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Base Case\r\n    if n == 0:\r\n        return 0\r\n\r\n    # Initialize the result\r\n    res = arr[0]\r\n\r\n    # Find the maximum sum of increasing\r\n    # subsequence in the remaining array\r\n    res = max(res, max_sum_increasing_subsequence(arr[1:], n - 1))\r\n\r\n    # Add the first element of the array\r\n    # to the result if it is greater than\r\n    # the first element of the remaining\r\n    # array\r\n    if arr[0] > arr[1:]:\r\n        res += arr[0]\r\n\r\n    return res\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    n = len(arr)\r\n    print(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n# This code is contributed by Pranjal","votes":null},{"text":"\r\n    dp = [0 for i in range(n)]\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n        dp[i] += arr[i]\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a list to store the output\r\n    output = []\r\n    \r\n    # Create an empty list to store the indices of the elements\r\n    # of the output\r\n    indices = []\r\n    \r\n    # Store the first element of the array\r\n    max_sum = arr[0]\r\n    \r\n    # Initialize the max_ending_here variable with the first element\r\n    # of the array\r\n    max_ending_here = arr[0]\r\n    \r\n    # Initialize the total with the first element of the array\r\n    total = arr[0]\r\n    \r\n    # Do for all the remaining elements of the array\r\n    for i in range(1, n):\r\n        \r\n        # If the current element is greater than the max_ending_here element\r\n        # then replace the max_ending_here with the current element.\r\n        if arr[i] > max_ending_here:\r\n            max_ending_here = arr[i]\r\n        \r\n        # If the max_ending_here element is greater than the max_sum\r\n        # element then replace the max_sum element with the max_ending_here\r\n        # element\r\n        if max_ending_here > max_sum:\r\n            max_sum = max_ending_here\r\n            \r\n        # If the current element is less than the max_sum element then\r\n        # ignore it\r\n        if arr[i] < max_sum:\r\n            continue\r\n        \r\n        # If the current element is greater than the max_sum element\r\n        # then do the following\r\n        if arr[i] > max_sum:\r\n            \r\n            # Replace the max_sum element with the current element\r\n            max_sum = arr[i]\r\n            \r\n            # Add the current element to the output list\r\n            output.append(arr[i])\r\n            \r\n            # Add the index of the current element to the indices list\r\n            indices.append(i)\r\n            ","votes":null},{"text":"\r\n\r\n    # Create a new array to store the solution\r\n    s = [0] * n\r\n\r\n    # Store the solution\r\n    s[0] = arr[0]\r\n\r\n    # Traverse the array\r\n    for i in range(1, n):\r\n        # If the current element is greater than the previous stored element\r\n        # then update the solution array\r\n        if arr[i] > s[i - 1]:\r\n            s[i] = arr[i]\r\n        else:\r\n\r\n            # Else find the maximum element from both the elements\r\n            # present at the current and previous position of the solution array\r\n            s[i] = max(arr[i], s[i - 1])\r\n\r\n    # Initialize result\r\n    max_sum = 0\r\n\r\n    # Store the maximum sum in maximumSum array\r\n    for i in range(n):\r\n        max_sum = max(max_sum, s[i])\r\n\r\n    # Print the maximum sum\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 4, 2, 1, 7, 8, 9, 11, 13, 6]\r\n    n = len(arr)\r\n    print(\"Maximum sum of an increasing sequence:\", max_sum_increasing_subsequence(arr, n))\r\n\r\n    # This code is contributed by Nikhil Kumar Singh\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nInput:\r\nn = 10\r\narr[] = {10, 4, 2, 1, 7, 8, 9, 11, 13, 6}\r\nOutput","votes":null},{"text":"\r\n    \r\n    # create an array to store the values of the maximum increasing subsequence\r\n    m_arr = [0] * n\r\n    \r\n    # stores the index of the last element of the maximum increasing subsequence\r\n    last_index = [0] * n\r\n    \r\n    # stores the last index of the maximum increasing subsequence\r\n    m_index = 0\r\n    \r\n    # stores the size of the maximum increasing subsequence\r\n    m = 0\r\n    \r\n    # stores the sum of the maximum increasing subsequence\r\n    m_sum = 0\r\n    \r\n    # stores the value of the current element\r\n    curr_val = 0\r\n    \r\n    # stores the value of the last element\r\n    last_val = -1\r\n    \r\n    # stores the index of the last element\r\n    last_index_val = 0\r\n    \r\n    # stores the value of the current element\r\n    curr_index = 0\r\n    \r\n    # stores the index of the last element\r\n    last_index_curr = 0\r\n    \r\n    for i in range(n):\r\n        curr_val = arr[i]\r\n        \r\n        # if the current element is greater than the last element\r\n        if curr_val > last_val:\r\n            \r\n            # update the last index and last element\r\n            last_index_val = last_index_curr\r\n            last_val = curr_val\r\n            \r\n        # if the current element is smaller or equal to the last element\r\n        else:\r\n            \r\n            # if the current element is greater than the element at the index\r\n            if curr_val > m_arr[last_index_val]:\r\n                \r\n                # update the last index and last element\r\n                last_index_val = last_index_curr\r\n                last_val = curr_val\r\n                \r\n            # if the current element is smaller or equal to the element at the index\r\n            else","votes":null},{"text":"\r\n    # Base case\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    # Sort the array\r\n    arr.sort()\r\n\r\n    # Initialize the max variable\r\n    max_sum = 0\r\n    sum = 0\r\n\r\n    # Traverse the array\r\n    for i in range(n):\r\n        # If the current element is greater than the sum\r\n        if sum <= 0:\r\n            sum = arr[i]\r\n        # Else add the element to sum\r\n        else:\r\n            sum += arr[i]\r\n        # If the sum becomes greater than the max_sum\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [10, 5, 2, 1, 7]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, 3, 4]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [1, 2, ","votes":null},{"text":"\r\n    s = [0 for i in range(n)]\r\n    inc = [0 for i in range(n)]\r\n\r\n    s[0] = arr[0]\r\n    inc[0] = 1\r\n\r\n    for i in range(1, n):\r\n        s[i] = max(arr[i], s[i - 1] + arr[i])\r\n        inc[i] = 1 if arr[i] > arr[i - 1] else 0\r\n\r\n    s_max = s[0]\r\n    inc_max = inc[0]\r\n\r\n    for i in range(1, n):\r\n        if s[i] > s_max:\r\n            s_max = s[i]\r\n            inc_max = inc[i]\r\n        elif s[i] == s_max and inc[i] > inc_max:\r\n            inc_max = inc[i]\r\n\r\n    return s_max\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    n = len(arr)\r\n    print(\r\n        \"The maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n)\r\n    )\r\n\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80, 100]\r\n    n = len(arr)\r\n    print(\r\n        \"The maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n)\r\n    )\r\n\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60","votes":null},{"text":"\r\n    # code here\r\n    # arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    # n = len(arr)\r\n    dp = [0]*n\r\n    dp[0] = arr[0]\r\n    max_sum = 0\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i-1])\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # Return 0 if no elements\r\n    if n == 0:\r\n        return 0\r\n    # Initialize the max_sum\r\n    max_sum = arr[0]\r\n    max_sum_ending_here = 0\r\n    # Traverse the array elements from left to right\r\n    for i in range(0, n):\r\n        # If the current element is greater than the previous element, \r\n        # then update the max_sum_ending_here\r\n        if arr[i] > arr[i-1]:\r\n            max_sum_ending_here += arr[i]\r\n        else:\r\n            max_sum_ending_here = arr[i]\r\n        # If the max_sum_ending_here is greater than max_sum, then update it\r\n        if max_sum_ending_here > max_sum:\r\n            max_sum = max_sum_ending_here\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\r\n    n = len(arr)\r\n    print(\"Sum of maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [6, 2, 4, 8, 10, 2, 5]\r\n    n = len(arr)\r\n    print(\"Sum of maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [10, 5, 2, 3, 7, 101, 18]\r\n    n = len(arr)\r\n    print(\"Sum of maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n    arr = [10, 5, 2, 3, 7, 101, 18, 19]","votes":null},{"text":"\r\n    dp = [0 for _ in range(n)]\r\n    for i in range(n):\r\n        max_sum_i = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[i] < dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n        dp[i] += max_sum_i\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = arr[0]\r\n\r\n    for i in range (1, n):\r\n        if arr[i] > arr[i-1]:\r\n            max_sum += arr[i]\r\n        else:\r\n            max_sum = arr[i]\r\n\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    # Create a new array to store the cumulative sum\r\n    cumulative_sum = [0 for i in range(0, n)]\r\n    cumulative_sum[0] = arr[0]\r\n    # Traverse the array\r\n    for i in range(1, n):\r\n        # If current element is greater than the previous\r\n        # element, then add it to the cumulative sum\r\n        if arr[i] > arr[i - 1]:\r\n            cumulative_sum[i] = arr[i] + cumulative_sum[i - 1]\r\n        # Else, add only the previous element\r\n        else:\r\n            cumulative_sum[i] = arr[i]\r\n    print(\"The maximum sum of increasing subsequence is\", max(cumulative_sum))\r\n    return max(cumulative_sum)\r\n\r\n\r\narr = [5, 6, 10, 1, 4, 10, 7, 3, 2, 5]\r\nn = len(arr)\r\nmax_sum_increasing_subsequence(arr, n)\r\n# Output:\r\n# The maximum sum of increasing subsequence is 35\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nmax_sum_increasing_subsequence(arr, n)\r\n# Output:\r\n# The maximum sum of increasing subsequence is 15\r\n\r\narr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\nn = len(arr)\r\nmax_sum_increasing_subsequence(arr, n)\r\n# Output:\r\n# The maximum sum of increasing subsequence is 550\r\n\r\narr = [1]\r\nn = len(arr)\r\nmax_sum_increasing_subsequence(arr, n)\r\n# Output:","votes":null},{"text":"\r\n    # Initialize the result\r\n    max_sum = arr[0]\r\n    \r\n    # Initialize the table\r\n    dp = [0] * n\r\n    \r\n    # Fill the table\r\n    # Note the second loop runs from 1 to n-1\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n        \r\n        # Update the maximum sum\r\n        max_sum = max(max_sum, dp[i])\r\n    \r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Test 1\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    n = len(arr)\r\n    print(\"Maximum sum of increasing subsequence in\", arr, \"is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n    # Test 2\r\n    arr = [10, 22, 9, 33, 21, 50, 41]\r\n    n = len(arr)\r\n    print(\"Maximum sum of increasing subsequence in\", arr, \"is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n    # Test 3\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 101, 12, 11]\r\n    n = len(arr)\r\n    print(\"Maximum sum of increasing subsequence in\", arr, \"is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n    # Test 4\r\n    arr = [10, 22, ","votes":null},{"text":"\r\n    # code here\r\n    \r\n    # max_arr = [0] * n\r\n    # for i in range(n):\r\n    #     max_arr[i] = arr[i]\r\n    #     for j in range(0,i):\r\n    #         if arr[i] > arr[j]:\r\n    #             max_arr[i] = max(max_arr[i], max_arr[j] + arr[i])\r\n    # return max(max_arr)\r\n    \r\n    # dp = [0] * n\r\n    # for i in range(n):\r\n    #     dp[i] = arr[i]\r\n    #     for j in range(0, i):\r\n    #         if arr[i] > arr[j]:\r\n    #             dp[i] = max(dp[i], dp[j] + arr[i])\r\n    # return max(dp)\r\n    \r\n    # dp = [0] * n\r\n    # for i in range(n):\r\n    #     dp[i] = arr[i]\r\n    #     for j in range(0, i):\r\n    #         if arr[i] > arr[j]:\r\n    #             dp[i] = max(dp[i], dp[j]) + arr[i]\r\n    # return max(dp)\r\n    \r\n    # dp = [0] * n\r\n    # for i in range(n):\r\n    #     dp[i] = arr[i]\r\n    #     for j in range(0, i):\r\n    #         if arr[i] > arr[j]:\r\n    #             dp[i] = max(dp[i], dp[j]) + arr[i]\r\n    # return max(dp)\r\n    \r\n    # dp = [0] * n\r\n    # for i in range(n):\r\n    #     dp[i] = arr","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_sum = max(max_sum, arr[i])\r\n\r\n    dp = [0] * n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n            else:\r\n                dp[i] = max(dp[i], arr[i])\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\narr = [10, 6, 2, 20, 30, 15, 25, 12, 15, 10]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 1:\r\n        return arr[0]\r\n    # Initialize the maximum value of the sequence\r\n    # with the value at index 0\r\n    max_sum = arr[0]\r\n    max_left = arr[0]\r\n\r\n    for i in range(1, n):\r\n        max_left = max(arr[i], max_left + arr[i])\r\n        max_sum = max(max_sum, max_left)\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [-10, -5, 2, 3, 7]\r\n    n = len(arr)\r\n    print(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\"\r\nSample Input\r\narr = [-10, -5, 2","votes":null},{"text":"\r\n    # Your code goes here\r\n    dp = [0]*n\r\n    dp[0] = arr[0]\r\n    \r\n    for i in range(1, n):\r\n        dp[i] = max(dp[i-1], arr[i])\r\n        \r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i],","votes":null},{"text":"\r\n    # The idea is to use Dynamic Programming and the fact that the maximum increasing subsequence\r\n    # of an array is the maximum increasing subsequence of the array obtained after removing one element.\r\n    # So, we can find the answer by removing one element in the array one by one and calculating the maximum\r\n    # increasing subsequence for each array. By doing this, we can find the maximum sum of the maximum increasing\r\n    # subsequence in the array.\r\n    # Time complexity = O(n^2)\r\n    # Space complexity = O(n)\r\n\r\n    # The main idea is to create an array dp[] of size n where dp[i] stores the max sum of increasing subsequence\r\n    # ending at index i. At the beginning, dp[0] = arr[0] as it is the only increasing subsequence of length 1.\r\n    # Now, we iterate through the array from index 1 to n-1 and for each i, we do the following:\r\n    #   * If arr[i] > arr[i-1], then the maximum sum of increasing subsequence ending at index i is the same as\r\n    #     the maximum sum of increasing subsequence ending at index i-1. i.e., dp[i] = dp[i-1]\r\n    #   * Otherwise, the maximum sum of increasing subsequence ending at index i is the maximum of the following:\r\n    #     * dp[i-1] + arr[i]\r\n    #     * dp[i-2] + arr[i]\r\n    # So, we calculate dp[i] and then find the maximum of dp[0] to dp[i-1] and store it in ans.\r\n    # At the end, return ans.\r\n\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    ans = arr[0]\r\n    for i in range(1, n):\r\n        if arr[i] > arr[i-1]:\r\n            dp[i] = max","votes":null},{"text":"\r\n    # TC: O(n^2)\r\n    # SC: O(n)\r\n\r\n    # Create a list to store the maximum sum of increasing subsequence\r\n    # of an array.\r\n    max_sum = [0] * n\r\n\r\n    # Initialize the first element of the maximum sum.\r\n    max_sum[0] = arr[0]\r\n\r\n    # Traverse the array elements.\r\n    for i in range(1, n):\r\n\r\n        # If the current element is greater than the previous element, then\r\n        # store the maximum sum of increasing subsequence ending at that element.\r\n        if arr[i] > arr[i - 1]:\r\n            max_sum[i] = max_sum[i - 1] + arr[i]\r\n\r\n        # If the current element is smaller than the previous element, then\r\n        # store the maximum sum of increasing subsequence ending at the previous\r\n        # element.\r\n        else:\r\n            max_sum[i] = max_sum[i - 1]\r\n\r\n    # Initialize the maximum sum as the maximum element of the maximum sum list.\r\n    max_sum = max(max_sum)\r\n\r\n    # Return the maximum sum.\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r\n\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    # Output:\r\n    # 15\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    n = len(arr)\r\n\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n    # Output:","votes":null},{"text":"\r\n    # Time Complexity: O(n2)\r\n    # Space Complexity: O(n)\r\n    \r\n    # Initialize the output\r\n    max_sum = 0\r\n    # Create an array to store the maximum value\r\n    # of the subsequence ending at index i\r\n    max_ending_here = [0] * n\r\n    \r\n    # Fill the max_ending_here values in bottom up manner\r\n    for i in range(n):\r\n        max_ending_here[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and max_ending_here[j] > max_ending_here[i]:\r\n                max_ending_here[i] = max_ending_here[j]\r\n        max_sum = max(max_sum, max_ending_here[i])\r\n    \r\n    # Return the required answer\r\n    return max_sum\r\n    \r","votes":null},{"text":"\r\n    # Your code goes here\r\n    dp = [0]*(n+1)\r\n    max_sum = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] < arr[j]:\r\n                dp[j] = max(dp[j], dp[i] + arr[j])\r\n                max_sum = max(max_sum, dp[j])\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    # Create a list of all negative values\r\n    res = []\r\n    \r\n    # Fill the list with negative values\r\n    for i in range(n):\r\n        res.append(-1)\r\n    \r\n    # Create an array to store the previous maximum value\r\n    prevMax = [0]*n\r\n    \r\n    # Create an array to store the maximum value till the previous element\r\n    maxSum = [0]*n\r\n    \r\n    # Create an array to store the sum of the maximum increasing subsequence\r\n    maxSumRes = [-1]\r\n    \r\n    # Iterate over the array\r\n    for i in range(n):\r\n        # Check if the current element is greater than previous maximum value\r\n        if arr[i] > prevMax[i-1]:\r\n            # Update the current maximum value\r\n            prevMax[i] = arr[i]\r\n            \r\n            # Update the maximum value till the previous element\r\n            maxSum[i] = prevMax[i] + maxSum[i-1]\r\n        else:\r\n            # Update the current maximum value\r\n            prevMax[i] = maxSum[i-1]\r\n            \r\n            # Update the maximum value till the previous element\r\n            maxSum[i] = prevMax[i]\r\n        \r\n        # Update the maximum sum\r\n        if maxSum[i] > maxSum[i-1]:\r\n            maxSumRes.append(maxSum[i])\r\n        else:\r\n            maxSumRes.append(maxSum[i-1])\r\n    \r\n    # Return the maximum sum\r\n    return maxSumRes[-1]\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i - 1] + arr[i])\r\n\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    n = len(arr)\r\n\r\n    print(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n    \"\"\"\r\n    Time Complexity: O(n)\r\n    Space Complexity: O(1)\r\n\r\n    Input:\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    Output:\r\n    Maximum sum of increasing subsequence is 100\r\n\r\n    Input:\r\n    arr = [1, 101, 2, 3, 100, 4, 5]\r\n    Output:\r\n    Maximum sum of increasing subsequence is 106\r\n    \"\"\"\r\n","votes":null},{"text":"\r\n    # Base case\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    # Find the maximum sum in the subarray\r\n    # that includes both the first and last elements\r\n    max_including_first_last = max(arr[0], arr[-1])\r\n\r\n    # Find the maximum sum in the subarray\r\n    # that excludes the first and last elements\r\n    max_excluding_first_last = max(max_sum_increasing_subsequence(arr[1:], n - 1),\r\n                                   max_sum_increasing_subsequence(arr[:-1], n - 1))\r\n\r\n    # Return the maximum sum\r\n    return max(max_including_first_last + max_excluding_first_last, max_excluding_first_last)\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    \r\n    dp = [0]*n\r\n    dp[0] = arr[0]\r\n    max_sum = dp[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i-1]+arr[i])\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Base Case\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    # Initialize the result\r\n    max_sum = 0\r\n\r\n    # Initialize the dp array (of size n)\r\n    dp = [0] * n\r\n\r\n    # Initialize the dp array with the first element\r\n    dp[0] = arr[0]\r\n\r\n    # Initialize the sum with the maximum value\r\n    # of first element\r\n    sum = arr[0]\r\n\r\n    # Start from the second element\r\n    for i in range(1, n):\r\n\r\n        # Compare the current element with the\r\n        # previous element\r\n        if arr[i] > arr[i - 1]:\r\n\r\n            # If the current element is greater\r\n            # than the previous element, then\r\n            # sum is set to the current value\r\n            sum = arr[i]\r\n\r\n        # Otherwise sum is updated by the maximum\r\n        # of current and previous sums\r\n        else:\r\n            sum = max(sum, arr[i])\r\n\r\n        # Store the maximum sum in dp array\r\n        dp[i] = sum\r\n\r\n    # Initialize the maximum sum found so far\r\n    max_sum = dp[0]\r\n\r\n    # Now find the maximum value in dp array\r\n    for i in range(1, n):\r\n        if max_sum < dp[i]:\r\n            max_sum = dp[i]\r\n\r\n    return max_sum\r\n\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nprint(\"The sum of the maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [0] * n\r\n    max_sum = float('-inf')\r\n    for i in range(n):\r\n        curr_max = float('-inf')\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                curr_max = max(curr_max, dp[j])\r\n        dp[i] = curr_max + arr[i]\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    res = 0\r\n    for i in range(n):\r\n        res = max(res, arr[i] + arr[i+1:].index(max(arr[i+1:])) + 1)\r\n    return res\r\n\r\n\r\n# Driver code\r\narr = [10, 11, 2, 1, 3, 4, 5, 6, 7, 8, 9]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# Output: 17\r\n# Explanation: 11, 3, 4, 5, 6, 7, 8, 9\r\n\r\n# Time Complexity - O(n^2)\r\n# Space Complexity - O(1)\r\n\r\n# Method - 2: Using Binary Search\r\n\r\nimport bisect\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [0 for i in range(n)]\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(dp[i-1], arr[i])\r\n        \r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if (arr[j] < arr[i]):\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n    return dp[n-1]\r\n\r\n# Driver code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nn = len(arr)\r\nprint(\"Maximum sum of an increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n'''\r\nTime Complexity : O(n^2)\r\nSpace Complexity : O(n)\r\n\r\nInput:\r\n10 22 9 33 21 50 41 60\r\n\r\nOutput:\r\nMaximum sum of an increasing subsequence is 153\r\n\r\nExplanation:\r\nMax","votes":null},{"text":"\r\n    # 1. Create a new array with 0 values.\r\n    # 2. For each element in the array, do:\r\n    # 3. If the new element is greater than the last element in the array, then add it to the array.\r\n    # 4. If the new element is smaller than the last element in the array, then replace it with the last element.\r\n    # 5. Return the sum of the array.\r\n    # Base case:\r\n    # For an empty array, the sum of the maximum increasing subsequence is zero.\r\n\r\n    # Time Complexity: O(n^2)\r\n    # Space Complexity: O(n)\r\n\r\n    # Create a new array with 0 values.\r\n    # 1. Create a new array with 0 values.\r\n    # 2. For each element in the array, do:\r\n    # 3. If the new element is greater than the last element in the array, then add it to the array.\r\n    # 4. If the new element is smaller than the last element in the array, then replace it with the last element.\r\n    # 5. Return the sum of the array.\r\n    # Base case:\r\n    # For an empty array, the sum of the maximum increasing subsequence is zero.\r\n\r\n    # Time Complexity: O(n^2)\r\n    # Space Complexity: O(n)\r\n\r\n    if n == 0:\r\n        return 0\r\n\r\n    # Create a new array with 0 values.\r\n    arr2 = [0] * n\r\n    # For each element in the array, do:\r\n    for i in range(n):\r\n        # 3. If the new element is greater than the last element in the array, then add it to the array.\r\n        if arr[i] > arr2[n - 1]:\r\n            arr2[n - 1] = arr[i]\r\n        # 4. If the new element is smaller than the last element in the array, then replace it with the last element.\r\n        els","votes":null},{"text":"\r\n    if n == 0:\r\n        return 0\r\n\r\n    # Create an array to store the maximum\r\n    #  sum ending with the ith element\r\n    max_sum = [0] * n\r\n    max_sum[0] = arr[0]\r\n\r\n    # Fill the array such that max_sum[i] stores the\r\n    # maximum sum of a subsequence of arr[0..i]\r\n    for i in range(1, n):\r\n        max_sum[i] = max(max_sum[i - 1] + arr[i], arr[i])\r\n\r\n    # Return the maximum of max_sum\r\n    return max(max_sum)\r\n\r\n\r","votes":null},{"text":"\r\n    # code here\r\n    max_sum = 0\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and dp[i] < dp[j] + arr[i]:\r\n                dp[i] = dp[j] + arr[i]\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 5, 20, 100, 10, 5, 2, 1]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n# Contributed by Mithlesh Kumar\r\n\r\n\"\"\"\r\nTest Case:\r\nInput:\r\narr[] = {10, 5, 20, 100, 10, 5, 2, 1}\r\nOutput:\r\n113\r\nExplanation:\r\nThe maximum sum of increasing\r\nsubsequence is obtained when\r\narr[] = {10, 20, 100, 10, 5, 2, 1}\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n)\r\n\r\nInput:\r\narr[] = {3, 4, 5, 10, 2, 1, 20}\r\nOutput:\r\n108\r\nExplanation:\r\nThe maximum sum of increasing\r\nsubsequence is obtained when\r\narr[] = {3, 4, 5, 2, 1, 20}\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: ","votes":null},{"text":"\r\n\r\n    # dp[i] represents the maximum increasing subsequence sum ending at index i\r\n    dp = [0] * n\r\n\r\n    # Initialize the maximum increasing subsequence sum ending at index 0\r\n    dp[0] = arr[0]\r\n\r\n    # Initialize the maximum increasing subsequence sum ending at index 1\r\n    dp[1] = max(arr[0], arr[1])\r\n\r\n    for i in range(2, n):\r\n        dp[i] = max(dp[i - 1], dp[i - 2] + arr[i])\r\n\r\n    return dp[n - 1]\r\n\r\n\r\nprint(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7))\r\n\r\n# Time Complexity : O(n)\r\n# Space Complexity : O(n)\r\n\r\n\r\n\"\"\"\r\nTest Case 1:\r\nInput:\r\nn = 7\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nOutput:\r\n106\r\n\r\nTest Case 2:\r\nInput:\r\nn = 5\r\narr = [1, 101, 2, 3, 100]\r\nOutput:\r\n106\r\n\r\nTest Case 3:\r\nInput:\r\nn = 3\r\narr = [7, 1, 10]\r\nOutput:\r\n11\r\n\r\nTest Case 4:\r\nInput:\r\nn = 5\r\narr = [1, 2, 3, 4, 5]\r\nOutput:\r\n15\r\n\r\nTest Case 5:\r\nInput:\r\nn = 3\r\narr = [1, 2, 3]\r\nOutput:\r\n6\r\n\r\n\"\"\"","votes":null},{"text":"\r\n\r\n    # Create a list of sums for every element of the array\r\n    # sum_arr[i] will store the sum of the maximum increasing subsequence ending with arr[i]\r\n    sum_arr = [0] * n\r\n\r\n    # Base cases\r\n    sum_arr[0] = arr[0]\r\n    sum_arr[1] = max(arr[0], arr[1])\r\n\r\n    for i in range(2, n):\r\n        sum","votes":null},{"text":"\r\n    sub_sum = [0] * n\r\n    sub_sum[0] = arr[0]\r\n    for i in range(1, n):\r\n        sub_sum[i] = max(arr[i], arr[i] + sub_sum[i - 1])\r\n    return sub_sum[-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 3, 5, 4, 6, 2, 1]\r\n    print(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\n\"\"\"\r\n\r\nProblem Statement\r\n\r\nGiven an array of integers. Find the sum of maximum increasing subsequence of the given array.\r\n\r\nInput:\r\nThe first line of input contains an integer T denoting the number of test cases. Then T test cases follow.\r\nEach test case contains an integer N denoting the size of the array. Then in the next line are N space separated integers denoting the array elements.\r\n\r\nOutput:\r\nFor each test case, print the sum of maximum increasing subsequence of the given array.\r\n\r\nConstraints:\r\n1 \u2264 T \u2264 100\r\n1 \u2264 N \u2264 106\r\n1 \u2264 A[i] \u2264 106\r\n\r\nExample:\r\nInput:\r\n2\r\n7\r\n1 3 5 4 6 2 1\r\n4\r\n1 2 1 2\r\n\r\nOutput:\r\n17\r\n7\r\n\r\nExplanation:\r\nTestcase 1: The sequence 1 3 5 6 2 is the maximum increasing subsequence.\r\nThe sum of this sequence is 17.\r\nTestcase 2: The sequence 1 2 is the maximum increasing subsequence.\r\nThe sum of this sequence is 7.\r\n\r\n\"\"\"\r\n\r\n# Reference: https:\/\/www.geeksforgeeks.org\/dynamic-programming-set-17-maximum","votes":null},{"text":"\r\n    # Use a tuple to store the index of the element and the value of the element\r\n    # in the tuple\r\n    max_sum = (0, 0)\r\n    \r\n    # Traverse the given array and update the max_sum if the sum of the current\r\n    # increasing subsequence is greater than the max_sum\r\n    for i in range(n):\r\n        max_sum = (max(max_sum[0], max_sum[1] + arr[i]), max_sum[1] + arr[i])\r\n    \r\n    return max_sum[1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 5, 7, 10, 11]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\" \r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSample Input:\r\n[1, 2, 3, 5, 7, 10, 11]\r\n\r\nSample Output:\r\n2","votes":null},{"text":"\r\n    # code here\r\n    dp=[]\r\n    ans=[]\r\n    for i in arr:\r\n        if not dp:\r\n            dp.append(i)\r\n            ans.append(i)\r\n        else:\r\n            if i>dp[-1]:\r\n                dp.append(i)\r\n                ans.append(i)\r\n            else:\r\n                ind=bisect.bisect_left(dp,i)\r\n                dp[ind]=i\r\n                ans[ind]=i\r\n    return sum(ans)\r\n\r\n\r\n# { \r\n#  Driver Code Starts\r\n# Initial Template for Python 3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n# Contributed by : Nagendra Jha\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = list(map(int, input().strip().split()))\r\n        ob = Solution()\r\n        ans = ob.max_sum_increasing_subsequence(arr, n)\r\n        print(ans)\r\n# } Driver Code Ends\r\n\r\n\r\n# Execution Time:0.50","votes":null},{"text":"\r\n    # your code here\r\n    dp = [0] * n\r\n    for i in range(n):\r\n        m = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < m:\r\n                m = arr[j]\r\n        dp[i] = m + arr[i]\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 4, 2, 10, 2, 3, 1, 0, 20]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity = O(n^2)\r\nSpace Complexity = O(n)\r\n\r\nInput:\r\n    [1, 4, 2, 10, 2, 3, 1, 0, 20]\r\nOutput:\r\n    35\r\n\r\nInput:\r\n    [1, 4, 2, 10, 2, 3, 1, 0]\r\nOutput:\r\n    35\r\n\r\nInput:\r\n    [1, 4, 2, 10, 2, 3, 1]\r\nOutput:\r\n    31\r\n\r\nInput:\r\n    [1, 4, 2, 10, 2, 3]\r\nOutput:\r\n    25\r\n\r\nInput:\r\n    [1, 4, 2, 10, 2, 3, 1, 0, 20]\r\nOutput:\r\n    35\r\n\r\nInput:\r\n    [1, 4, 2, 10, 2, 3, 1, 0]\r\nOutput:\r\n    35\r\n\r\nInput:\r\n    [1, 4, 2, 10","votes":null},{"text":"\r\n    \r\n    dp = [0] * n\r\n    maximum = arr[0]\r\n    \r\n    for i in range(1, n):\r\n        maximum = max(maximum, arr[i])\r\n        dp[i] = max(dp[i-1], maximum)\r\n        \r\n    return dp[-1]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a table to store the results of subproblems\r\n    # table[i] will store the maximum sum of a subsequence ending with arr[i]\r\n    table = [0] * n\r\n    \r\n    # Initialize table for single element array\r\n    for i in range(n):\r\n        table[i] = arr[i]\r\n    \r\n    # Compute maximum sum values in bottom up manner\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                table[i] = max(table[i], table[j] + arr[i])\r\n            \r\n    # Return the result\r\n    return max(table)\r\n\r\n\r\n# Driver Code\r\narr = [1, 1","votes":null},{"text":"\r\n\r\n    # Initialize the result\r\n    result = 0\r\n\r\n    # Initialize the table to store the dp values\r\n    table = [0] * n\r\n\r\n    # Iterate over the array\r\n    for i in range(n):\r\n\r\n        # Try to find the maximum increasing subsequence ending with the current element\r\n        # and update the result\r\n        max_increasing_subsequence_ending_with_current_element = arr[i]\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and table[j] > max_increasing_subsequence_ending_with_current_element:\r\n                max_increasing_subsequence_ending_with_current_element = table[j]\r\n\r\n        table[i] = max_increasing_subsequence_ending_with_current_element + arr[i]\r\n        result = max(result, table[i])\r\n\r\n    return result\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\n\r\n# Print the maximum sum\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n# This code is contributed by","votes":null},{"text":"\r\n    # your code here\r\n    if n == 0:\r\n        return 0\r\n    dp = [0] * (n+1)\r\n    for i in range(1, n+1):\r\n        dp[i] = arr[i-1]\r\n        for j in range(1, i):\r\n            if arr[i-1] > arr[j-1]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i-1])\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 101, 2, 3, 100, 4","votes":null},{"text":"\r\n    # code here\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_sum = max(max_sum, arr[i] + max_sum_increasing_subsequence(arr, i))\r\n    return max_sum\r\n","votes":null},{"text":"\r\n    # Code here\r\n    \r\n    # initialize the dp array with the first element of the array\r\n    dp = [arr[0]]\r\n\r\n    # initialize the max_sum with the first element of the array\r\n    max_sum = arr[0]\r\n\r\n    # traverse the array and find the maximum sum of the increasing subsequence\r\n    for i in range(1, n):\r\n        \r\n        # if we find a value which is greater than the last element of dp, we add it to dp array and update max_sum\r\n        if arr[i] > dp[-1]:\r\n            dp.append(arr[i])\r\n            max_sum += arr[i]\r\n        \r\n        # if the value is less than the last element of dp, we compare the sum of the array till the element with the length of dp\r\n        else:\r\n            dp.append(arr[i])\r\n            s = 0\r\n            for j in range(len(dp)):\r\n                s += dp[j]\r\n                if s > max_sum:\r\n                    max_sum = s\r\n\r\n    return max_sum\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n  ","votes":null},{"text":"\r\n    # Code here\r\n    dp = [0] * n\r\n    dp[0] = arr[0]\r\n    max_sum = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(dp[i-1], arr[i])\r\n        if dp[i] > max_sum:\r\n            max_sum = dp[i]\r\n    return max_sum\r\n\r\narr = [10, -15, 15, 20, -8]\r\nn = len(arr)\r\n\r\nprint(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n# Sample Input\/Output\r\n# Input\r\n# arr = [10, -15, 15, 20, -8]\r\n# n = 5\r\n\r\n# Output\r\n# Maximum sum of increasing subsequence is 30\r\n\r\n# Input\r\n# arr = [50, -10, 20, -15, 5, -30, 10, -20, 15, -10, 25]\r\n# n = 11\r\n\r\n# Output\r\n# Maximum sum of increasing subsequence is 85\r\n\r\n# Input\r\n# arr = [100, 20, 30, -50, -20, -10, -30, -100]\r\n# n = 8\r\n\r\n# Output\r\n# Maximum sum of increasing subsequence is 100\r\n\r\n# Input\r\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# n = 10\r\n\r\n# Output\r\n# Maximu","votes":null},{"text":"\r\n    \r\n    # Store the maximum sum of increasing subsequence.\r\n    max_sum = float('-inf')\r\n    \r\n    # Initialize the maximum sum of increasing subsequence ending at \r\n    # arr[0] as arr[0]\r\n    max_ending_here = arr[0]\r\n    \r\n    # Initialize a table to store the maximum sum of increasing subsequence\r\n    # ending at index i. max_ending_here[i] stores the maximum sum of \r\n    # increasing subsequence ending at index i.\r\n    max_ending_here = [float('-inf')] * (n)\r\n    \r\n    # Compute maximum sum of increasing subsequence for all subsequence \r\n    # ending at index i. The maximum sum is stored in max_ending_here[i]\r\n    for i in range(1, n):\r\n        max_ending_here[i] = max(max_ending_here[i - 1] + arr[i], arr[i])\r\n        \r\n    # Compute the maximum of all subsequence sums\r\n    for i in range(n):\r\n        max_sum = max(max_sum, max_ending_here[i])\r\n    \r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = 0\r\n    max_sum_prefix = [0 for i in range(n)]\r\n    max_sum_suffix = [0 for i in range(n)]\r\n    for i in range(n):\r\n        max_sum_prefix[i] = arr[i]\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                max_sum_prefix[i] = max(max_sum_prefix[i], max_sum_prefix[j] + arr[i])\r\n    for i in range(n-1, -1, -1):\r\n        max_sum_suffix[i] = arr[i]\r\n        for j in range(i+1, n):\r\n            if arr[i] > arr[j]:\r\n                max_sum_suffix[i] = max(max_sum_suffix[i], max_sum_suffix[j] + arr[i])\r\n    for i in range(n):\r\n        max_sum = max(max_sum, max_sum_prefix[i] + max_sum_suffix[i])\r\n    return max_sum\r\n\r\narr = input(\"Enter the elements of the array: \").split()\r\narr = list(map(int, arr))\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n'''\r\nSample Input\/Output\r\nInput:\r\nEnter the elements of the array: 100 18 2 3 10 120\r\nOutput:\r\n126\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n)\r\nwhere n is the number of elements in the array.\r\n'''\r\n\r\n# This code is contributed by Mohit Kumra\r\n\r\n\r\n# Python3 program to find\r\n# the maximum sum of an\r\n# increasing subsequence\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a table to store solutions of subproblems.\r\n    # sum[i] stores the maximum sum of increasing subsequence ending with arr[i].\r\n    sum = [0]*n\r\n    \r\n    # Initialize all values in sum[] as 0\r\n    for i in range(n):\r\n        sum[i] = 0\r\n        \r\n    # Compute values in the table\r\n    for i in range(n):\r\n        # Initialize maximum sum ending with arr[i] as 0\r\n        max_sum = 0\r\n        \r\n        # Compute maximum sum of increasing subsequence ending with arr[i]\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                max_sum = max(max_sum, sum[j])\r\n            \r\n        # Update maximum sum ending with arr[i]\r\n        sum[i] = max_sum + arr[i]\r\n        \r\n    \r\n    # Return the maximum sum\r\n    return max(sum)\r\n\r\n\r\n# Tests\r\narr = [2, 1, 5, 7, 2, 0, 5]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [10, 5, 2, 7, 8, 7]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [3, 10, 2, 20]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [2, 1, 5, 7, 2]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\narr = [2, 1, 5, 7, 2, ","votes":null},{"text":"\r\n    # Find the maximum element in the array.\r\n    max_sum = -1\r\n    # Initialize the maximum subsequence sum.\r\n    max_sub_sum = -1\r\n\r\n    # Traverse the array from left to right.\r\n    for i in range(0, n):\r\n        # Initialize the maximum subsequence sum.\r\n        max_sub_sum = -1\r\n\r\n        # Traverse the array from right to left.\r\n        for j in range(i, n):\r\n            # If arr[j] is greater than max_sum, update max_sum.\r\n            if arr[j] >= max_sum:\r\n                max_sum = arr[j]\r\n\r\n            # If arr[j] is greater than max_sub_sum and less than max_sum, update max_sub_sum.\r\n            elif arr[j] > max_sub_sum and arr[j] < max_sum:\r\n                max_sub_sum = arr[j]\r\n\r\n        # Add max_sub_sum to the sum.\r\n        max_sum += max_sub_sum\r\n\r\n    return max_sum\r\n\r\n\r\narr = [2, 1, 5, 7, 3, 4, 8]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = 0\r\n    for i in range(n):\r\n        max_sum = max(max_sum, arr[i])\r\n        for j in range(i + 1, n):\r\n            max_sum = max(max_sum, arr[i] + arr[j])\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case of recursion\r\n    if n == 0:\r\n        return 0\r\n\r\n    # Recur for left and right subarrays and return the maximum of two\r\n    # return max(max_sum_increasing_subsequence(arr, n-1), max_sum_increasing_subsequence(arr, n-2) + arr[n-1])\r\n    return max(max_sum_increasing_subsequence(arr, n-1), max_sum_increasing_subsequence(arr, n-2) + arr[n-1])\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 1:\r\n        return arr[0]\r\n    dp = [0]*n\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i-1])\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + arr[i])\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = max_sum_increasing_subsequence(arr, n)\r\n\r\n    fptr.write(str(","votes":null},{"text":"\r\n    \r\n    # create a list to store the maximum sum of increasing subsequence\r\n    result = []\r\n    \r\n    # initialize the first element of result as the first element of the input array\r\n    result.append(arr[0])\r\n    \r\n    # create a list to store the indices of the maximum increasing subsequence\r\n    indices = []\r\n    \r\n    # initialize the first element of indices as the first element of the input array\r\n    indices.append(0)\r\n    \r\n    # loop for storing the maximum sum of increasing subsequence and the indices\r\n    for i in range(1, n):\r\n        if arr[i] > result[-1]:\r\n            result.append(arr[i])\r\n            indices.append(i)\r\n        else:\r\n            j = result.index(max(result))\r\n            if arr[i] > result[j]:\r\n                result[j] = arr[i]\r\n                indices[j] = i\r\n    \r\n    # print the maximum sum of increasing subsequence\r\n    print(\"Maximum sum of increasing subsequence is: \", end=\"\")\r\n    print(result[-1])\r\n    \r\n    # print indices of the maximum sum of increasing subsequence\r\n    print(\"Indices of maximum sum of increasing subsequence are: \", end=\"\")\r\n    print(indices[-1])\r\n    \r\n    # return the maximum sum of increasing subsequence\r\n    return result[-1]\r\n\r\n# Driver code\r\narr = [1, -2, 3, -2, 4, -1, 5]\r\nn = len(arr)\r\nprint(\"Maximum sum of increasing subsequence is: \", end=\"\")\r\nmax_sum_increasing_subsequence(arr, n)\r\n\r\n\r\n\"\"\"\r\nSample Input:\r\n\r\narr = [1, -2, 3, -2, 4, -1, 5]\r\nn = 7\r\n\r\nSample Output:\r\n\r\nMaximum sum of increasin","votes":null},{"text":"\r\n    if n == 1:\r\n        return arr[0]\r\n    elif n == 2:\r\n        return max(arr[0], arr[1])\r\n    else:\r\n        dp = [0] * n\r\n        dp[0] = arr[0]\r\n        max_sum = arr[0]\r\n        for i in range(1, n):\r\n            dp[i] = max(arr[i], dp[i-1] + arr[i])\r\n            if max_sum < dp[i]:\r\n                max_sum = dp[i]\r\n        return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    # If there is no element in array\r\n    if n == 0:\r\n        return 0\r\n\r\n    # Create an array to store maximum sum of increasing subsequence\r\n    # ending at index i. maxSum[i] stores the maximum sum of\r\n    # increasing subsequence ending at index i\r\n    maxSum = [0]* n\r\n    maxSum[0] = arr[0]\r\n    maxSum[1] = max(arr[0], arr[1])\r\n    for i in range(2, n):\r\n        maxSum[i] = max(maxSum[i-1], maxSum[i-2]+arr[i])\r\n    return maxSum[n-1]\r\n\r\n\r\n# Driver Code\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n# This code is contributed by Nikhil Kumar Singh(nickzuck_007)\r\n\r\n\r","votes":null},{"text":"\r\n    # Return 0 for empty array\r\n    if n == 0:\r\n        return 0\r\n\r\n    # Create a table to store solutions of subproblems.\r\n    # dp[i] stores the maximum sum subsequence ending at index i\r\n    dp = [0 for _ in range(n)]\r\n\r\n    # Initialize dp[0]\r\n    dp[0] = arr[0]\r\n\r\n    # Compute entries in dp[] using the above recursive property\r\n    for i in range(1, n):\r\n        dp[i] = max(dp[i - 1] + arr[i], arr[i])\r\n\r\n    # Return the maximum element of dp[]\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n    # code here\r\n    dp=[]\r\n    for i in range(n):\r\n        dp.append([0]*(n))\r\n    for i in range(n):\r\n        for j in range(i,n):\r\n            if i==j:\r\n                dp[i][j]=arr[i]\r\n            else:\r\n                if arr[i]<arr[j]:\r\n                    dp[i][j]=dp[i][j-1]+arr[j]\r\n                else:\r\n                    dp[i][j]=dp[i][j-1]\r\n    return dp[0][n-1]\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize the result\r\n    result = 0\r\n    # Create an array to store the maximum value of the subsequence\r\n    # and the index of the element at that position\r\n    values = [[0, 0]] * n\r\n\r\n    # Initialize the maximum value of the subsequence\r\n    max_sum = arr[0]\r\n\r\n    # Initialize the sum of the current subsequence\r\n    curr_sum = 0\r\n\r\n    # Initialize the index of the first element of the sequence\r\n    start = 0\r\n\r\n    # For each element of the array\r\n    for i in range(0, n):\r\n        # If the current element is greater than the previous element\r\n        # and the sum of current subsequence is greater than the previous\r\n        # maximum sum\r\n        if arr[i] > arr[i - 1] and curr_sum > max_sum:\r\n            # Update the maximum sum\r\n            max_sum = curr_sum\r\n\r\n        # If the current element is greater than the previous element\r\n        # and the sum of current subsequence is less than the previous\r\n        # maximum sum\r\n        if arr[i] > arr[i - 1] and curr_sum <= max_sum:\r\n            # Update the sum of the current subsequence\r\n            curr_sum = arr[i]\r\n        else:\r\n            # Else add the current element to the sum of the current subsequence\r\n            curr_sum += arr[i]\r\n\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Initialize the sum of maximum increasing subsequence\r\n    max_sum = float('-inf')\r\n\r\n    # Initialize the sums of increasing subsequences ending at index i\r\n    sums = [0] * n\r\n\r\n    # Initialize the indices of increasing subsequences ending at index i\r\n    indices = [None] * n\r\n\r\n    # Compute sums of increasing subsequences ending at index i\r\n    # and indices of increasing subsequences ending at index i\r\n    for i in range(n):\r\n        sums[i] = arr[i]\r\n        indices[i] = i\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and sums[i] < sums[j] + arr[i]:\r\n                sums[i] = sums[j] + arr[i]\r\n                indices[i] = j\r\n\r\n    # Find the maximum of sums of increasing subsequences\r\n    # ending at indices k\r\n    for i in range(n - 1, -1, -1):\r\n        if sums[i] > max_sum:\r\n            max_sum = sums[i]\r\n            k = i\r\n\r\n    # Construct the maximum increasing subsequence\r\n    res = []\r\n    while k is not None:\r\n        res.append(arr[k])\r\n        k = indices[k]\r\n\r\n    return max_sum, res\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Create an array to store the maximum values\r\n    m = [0 for i in range(n)]\r\n\r\n    # Initialize the maximum value of the subsequence\r\n    m[0] = arr[0]\r\n\r\n    # Traverse the array.\r\n    for i in range(1, n):\r\n        m[i] = max(m[i - 1], arr[i])\r\n\r\n    # Initialize result as the first element of the array\r\n    res = arr[0]\r\n\r\n    # Initialize the sum of maximum increasing subsequence as the first element.\r\n    # The sum is equal to the first element of the array.\r\n    sum = arr[0]\r\n\r\n    # Traverse the array from left to right.\r\n    for i in range(1, n):\r\n        # If the current element is greater than the previous maximum,\r\n        # update the result\r\n        if arr[i] > m[i - 1]:\r\n            res = arr[i]\r\n            sum = res\r\n\r\n        # If the current element is less than the previous maximum,\r\n        # but is greater than the maximum of the sum, update sum.\r\n        elif arr[i] > m[i] and arr[i] > sum:\r\n            sum = sum + arr[i]\r\n\r\n    return res, sum\r\n\r\n\r\narr = [3, 4, 5, 2, 1]\r\nn = len(arr)\r\nres = max_sum_increasing_subsequence(arr, n)\r\nprint(\"Maximum element is\", res[0])\r\nprint(\"Sum of maximum increasing subsequence is\", res[1])\r\n\r\n# This code is contributed by Shubham Kumar.\r\n\r\n\r\n# max_sum_increasing_subsequence\r\n\r\n\r\n# function to find the maximum sum of increasing subsequence\r\n\r\n\r","votes":null},{"text":"\r\n    # Length of the array\r\n    \r\n    # Initialize the output array\r\n    result = [0]*n\r\n    \r\n    # Initialize the array to store the next maximum element\r\n    next_max = [0]*n\r\n    \r\n    # Initialize the array to store the previous index\r\n    prev = [0]*n\r\n    \r\n    # Initialize the array to store the current maximum\r\n    curr_max = arr[0]\r\n    \r\n    # Initialize the array to store the maximum\r\n    max_i = 0\r\n    \r\n    for i in range(1, n):\r\n        # If the current element is greater than the current maximum\r\n        if arr[i] > curr_max:\r\n            \r\n            # Update the current maximum\r\n            curr_max = arr[i]\r\n            \r\n            # Update the maximum\r\n            max_i = i\r\n            \r\n        # If the current element is less than the current maximum\r\n        elif arr[i] < curr_max:\r\n            \r\n            # Update the next maximum element\r\n            next_max[i] = curr_max\r\n            \r\n            # Update the previous index\r\n            prev[i] = max_i\r\n    \r\n    # Initialize the result\r\n    result[max_i] = curr_max\r\n    \r\n    for i in range(max_i - 1, -1, -1):\r\n        # If the next maximum is greater than the current element\r\n        if result[i] < arr[i]:\r\n            \r\n            # Update the result\r\n            result[i] = arr[i]\r\n        \r\n        # Else update the result\r\n        else:\r\n            \r\n            # Update the result\r\n            result[i] = result[prev[i]] + arr[i]\r\n    \r\n    # Return the result\r\n    return max(result)\r\n\r\n\r\n\r\n# Driver Code\r\narr = [100, 1, 2,","votes":null},{"text":"\r\n    # Create an array to store the \r\n    # lengths of the maximum increasing \r\n    # subsequence ending at each index\r\n    lengths = [1]*n\r\n    \r\n    max_so_far = 0\r\n    \r\n    # Compute length of each subsequence\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lengths[i] < lengths[j] + 1:\r\n                lengths[i] = lengths[j] + 1\r\n                \r\n        # Update the maximum sum if needed\r\n        if lengths[i] > max_so_far:\r\n            max_so_far = lengths[i]\r\n    \r\n    # Sum up the maximum lengths\r\n    return sum(arr[i] for i in range(n) if lengths[i] == max_so_far)\r\n\r\n\r\narr = [1, 101, 2, 3, 100, 4, 5]\r\nprint(max_sum_increasing_subsequence(arr, len(arr)))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Base case\r\n    if n == 1:\r\n        return arr[0]\r\n\r\n    # A temporary array to store index of each element\r\n    temp = [-1 for i in range(n)]\r\n\r\n    # Initialize the result\r\n    result = 0\r\n\r\n    # Fill the temporary array with index of the increasing array\r\n    for i in range(n):\r\n\r\n        # Initialize the maximum value\r\n        max_value = -1\r\n\r\n        # Find the maximum value in arr[0..i]\r\n        for j in range(i):\r\n            if arr[j] > max_value:\r\n                max_value = arr[j]\r\n                temp[i] = j\r\n\r\n        # Update the result\r\n        result += max_value\r\n\r\n    # Create a temporary array to store the value of\r\n    # the increasing sequence\r\n    value = [0 for i in range(n)]\r\n\r\n    # Fill the temporary array to store the value of\r\n    # the increasing sequence\r\n    for i in range(n - 1, -1, -1):\r\n        if temp[i] == -1:\r\n            value[i] = arr[i]\r\n        else:\r\n            value[i] = arr[i] + value[temp[i]]\r\n\r\n    # Initialize the result to the first element of the\r\n    # value array\r\n    result = value[0]\r\n\r\n    # Traverse the array and update the result if necessary\r\n    for i in range(1, n):\r\n        if value[i] > result:\r\n            result = value[i]\r\n\r\n    return result\r\n\r\n\r\n# Driver code\r\narr = [-1, -3, 4, 5, 3, -2, 0, -1, 12, 13, 14, -9]\r\nn = len(arr)\r\nprint(\"Sum of maximum increasing subsequenc","votes":null},{"text":"\r\n    # Your code goes here\r\n    dp = [0]*n\r\n    max_sum = 0\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i]>arr[j]:\r\n                dp[i] = max(dp[i], dp[j]+arr[i])\r\n        max_sum = max(dp[i], max_sum)\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = max_sum_increasing_subsequence(arr, n)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# 5\r\n# 1 5 2 4 3\r\n# Sample Output\r\n# 12\r\n# Explanation\r\n# There are exactly 2 increasing subsequences of the array.\r\n# 1, 5, 2, 4, 3 => 1 + 5 + 2 + 4 + 3 = 12\r\n# 1, 5, 2, 3 => 1 + 5 + 2 + 3 = 10\r\n# You are required to return the sum of the maximum increasing subsequence.\r\n\r\n# 2\r\n# 1 2 3 5 4\r\n# Sample Output\r\n# 11\r\n# Explanation\r\n# There are exactly 2 increasing subsequences of the array.\r\n# 1, 2, 3, 5, 4 => 1 + 2 + 3 + 5 + 4 = 11\r\n# 1, 2, 3, 4 => 1 + 2 + 3 + 4 = ","votes":null},{"text":"\r\n    # Create a list to store the values of the subsequence\r\n    subsequence = []\r\n    # Create a list to store the index of the subsequence\r\n    indexes = []\r\n    # Initialize the max_sum variable with 0\r\n    max_sum = 0\r\n    # Loop through the array\r\n    for i in range(n):\r\n        # Store the value and the index in the list\r\n        subsequence.append(arr[i])\r\n        indexes.append(i)\r\n        # If the sum of the subsequence is lesser than the current element, replace it\r\n        if max_sum < sum(subsequence):\r\n            max_sum = sum(subsequence)\r\n\r\n    # Loop through the array to find the next element which is greater than the current element\r\n    for i in range(n):\r\n        # If the current element is greater than the previous element\r\n        if arr[i] > subsequence[-1]:\r\n            # Replace the last element of the sequence with the current element\r\n            subsequence[-1] = arr[i]\r\n            # Replace the last index of the sequence with the current index\r\n            indexes[-1] = i\r\n    # Return the sum of the subsequence\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [12, 3, 45, 1, 9, 15, 20, 8]\r\n    n = len(arr)\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n) where n is the number of elements in the array\r\nSpace Complexity: O(n) where n","votes":null},{"text":"\r\n    # max_sum = 0\r\n    # max_sum = max(arr)\r\n    # for i in range(len(arr)):\r\n    #     for j in range(i + 1, len(arr)):\r\n    #         if arr[j] > arr[i]:\r\n    #             max_sum = max(max_sum, arr[j] - arr[i])\r\n    # return max_sum\r\n\r\n    # max_sum = arr[0]\r\n    # for i in range(1, len(arr)):\r\n    #     for j in range(i):\r\n    #         if arr[i] > arr[j]:\r\n    #             max_sum = max(max_sum, arr[i] - arr[j])\r\n    # return max_sum\r\n\r\n    # max_sum = arr[0]\r\n    # for i in range(1, len(arr)):\r\n    #     max_sum = max(max_sum, max(arr[i] - arr[j] for j in range(i)))\r\n    # return max_sum\r\n\r\n    # max_sum = 0\r\n    # for i in range(1, len(arr)):\r\n    #     for j in range(i):\r\n    #         if arr[i] > arr[j]:\r\n    #             max_sum = max(arr[i] - arr[j], max_sum)\r\n    # return max_sum\r\n\r\n    # max_sum = 0\r\n    # for i in range(len(arr)):\r\n    #     max_sum = max(max_sum, max(arr[i] - arr[j] for j in range(i)))\r\n    # return max_sum\r\n\r\n    # max_sum = 0\r\n    # for i in range(len(arr)):\r\n    #     for j in range(i):\r\n    #         if arr[i] > arr[j]:\r\n    #             max_sum = max(ar","votes":null},{"text":"\r\n    # Your code here\r\n    # 1 3 5 2 4 6\r\n    # 1 3 5 6\r\n    # 1 3 5 6 4\r\n    # 1 3 6\r\n    # 1 5\r\n    # 3\r\n    # 1 3 6 4\r\n    # 1 5\r\n    # 5 4\r\n    # 9\r\n    # 1 5 4 6\r\n    # 1 5 6\r\n    # 6 6\r\n    # 6\r\n    # 1 6\r\n    # 6\r\n    # 1 6\r\n    # 6\r\n    # 6\r\n    # 6\r\n\r\n    dp = [0 for i in range(n)]\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i-1])\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j])\r\n\r\n    return dp[-1]\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    # time complexity O(n^2)\r\n    # space complexity O(n)\r\n    # create a dp table of size n\r\n    dp = [0]*n\r\n    max_sum = 0\r\n    # iterating over the array\r\n    for i in range(n):\r\n        # iterate over the dp table\r\n        for j in range(i):\r\n            # if the element is greater than the element in dp table\r\n            if arr[i]> arr[j]:\r\n                # update the values of dp table\r\n                dp[i] = max(dp[i], dp[j]+arr[i])\r\n        # update the max sum\r\n        max_sum = max(max_sum, dp[i])\r\n    # return the max sum\r\n    return max_sum\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 1]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\narr = [10, 22, 9, 33, 21, 50, 41, 1]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 1, 2]\r\nn = len(arr)\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n# arr = [10, 22, ","votes":null},{"text":"\r\n\r\n    # Create a table to store results of subproblems.\r\n    # table[i][j] stores the maximum sum of subsequence in arr[i..j]\r\n    table = [[0 for x in range(n + 1)] for x in range(n + 1)]\r\n\r\n    # Compute the maximum sum of increasing subsequence using\r\n    # dynamic programming.\r\n    for i in range(n):\r\n        for j in range(i + 1, n + 1):\r\n            if arr[i] < arr[j]:\r\n                table[i][j] = max(arr[i] + table[i + 1][j],\r\n                                  arr[j] + table[i][j - 1])\r\n            else:\r\n                table[i][j] = max(arr[i] + table[i + 1][j],\r\n                                  arr[j] + table[i][j - 1])\r\n\r\n    # Return the required value.\r\n    return table[0][-1]\r\n\r\n\r\n# Driver code\r\nif __name__ == \"__main__\":\r\n    arr = [100, 180, 260, 310, 40, 535, 800, ","votes":null},{"text":"\r\n    # Code here\r\n    max_sum = 0\r\n    current_sum = 0\r\n    for i in range(0, n):\r\n        if arr[i] > arr[i + 1]:\r\n            current_sum = 0\r\n            continue\r\n        current_sum += arr[i]\r\n        max_sum = max(max_sum, current_sum)\r\n    return max_sum\r\n\r\n\r\n# { \r\n#  Driver Code Starts\r\n# Initial Template for Python 3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().strip().split()))\r\n    result = max_sum_increasing_subsequence(arr, n)\r\n    print(result)\r\n\r\n","votes":null},{"text":"\r\n    # code here\r\n    dp = [0 for _ in range(n)]\r\n    dp[0] = arr[0]\r\n    max_sum = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i-1])\r\n        max_sum = max(max_sum, dp[i])\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    dp = [0] * n\r\n    max_sum = float('-inf')\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(arr[i], dp[i - 1] + arr[i])\r\n        max_sum = max(max_sum, dp[i])\r\n\r\n    return max_sum\r\n\r\n\r\narr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\nn = len(arr)\r\n\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nSample Input:\r\n\r\n[-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\n\r\nSample Output:\r\n\r\n7\r\n\r\nExplanation:\r\n\r\nThe increasing subsequence with the maximum sum is [1, 4, 2, 1].\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\"\"\"\r\n\r\n\"\"\"\r\nMaximum Sum Increasing Subsequence\r\n\r\nGiven an array of integers, find the sum of maximum sum increasing subsequence of the given array.\r\n\r\nInput:\r\nThe first line of input contains an integer T denoting the number of test cases. Then T test cases follow.\r\nEach test case consists of two lines. The first line of each test case contains an integer N denoting the size of array. The second line contains N space separated integers A1, A2, ..., AN denoting the elements of the array.\r\n\r\nOutput:\r\nFor each test case, in a new line, print the maximum sum of increasing subsequence.\r\n\r\nConstraints:\r\n1 <= T <= 100\r\n1 <= N <= 1000\r\n\r\nExample:\r\nInput:\r","votes":null},{"text":"\r\n    max_sum = arr[0]\r\n    for i in range(1, n):\r\n        max_sum = max(max_sum, arr[i] + arr[i - 1])\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [0] * (n + 1)\r\n    dp[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(dp[i - 1] + arr[i], arr[i])\r\n    return max(dp)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Create a list of size n and initialize all elements as 0.\r\n    dp = [0 for i in range(n)]\r\n\r\n    # Initialize result\r\n    result = 0\r\n\r\n    # Initialize the first element of dp array\r\n    dp[0] = arr[0]\r\n\r\n    # Traverse the array elements from 1st to the last\r\n    for i in range(1, n):\r\n\r\n        # If current element is greater than the previous element, then\r\n        # update the maximum sum found so far\r\n        if arr[i] > dp[i - 1]:\r\n            dp[i] = arr[i]\r\n        else:\r\n            dp[i] = dp[i - 1]\r\n\r\n    # Initialize the sum value\r\n    sum = 0\r\n\r\n    # Traverse the dp array to get the sum of maximum\r\n    # increasing subsequence\r\n    for i in range(0, n):\r\n        sum = sum + dp[i]\r\n        result = max(result, sum)\r\n\r\n    return result\r\n\r\n\r\n# Driver Code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nn = len(arr)\r\n\r\n# Function Call\r\nprint(max_sum_increasing_subsequence(arr, n))\r\n\r\n\"\"\"\r\nTime Complexity : O(N)\r\nSpace Complexity : O(N)\r\n\"\"\"\r\n\r\n\"\"\"\r\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\r\nOutput: 45\r\n\r\nInput : arr[] = {1, 101, 2, 3, 100, 4, 5, 10, 6, 7, 8,","votes":null},{"text":"\r\n\r\n    max_sum = arr[0]\r\n    dp = [arr[0]]\r\n\r\n    for i in range(1, n):\r\n        if arr[i] > arr[i - 1]:\r\n            dp.append(arr[i])\r\n        else:\r\n            dp.append(dp[-1] + arr[i])\r\n\r\n    return max(dp)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = input().strip().split(' ')\r\n    n = int(arr[0])\r\n    arr = [int(arr[i]) for i in range(1, n + 1)]\r\n    print(max_sum_increasing_subsequence(arr, n))\r\n\r\n#","votes":null}],"time":{"count":2.0,"avg":180316.05,"std":9458.7892210236,"cov":0.0524567237}}
{"id":525,"question":"def parallel_lines(line1, line2):\r\n    \"\"\"Write a python function to check whether two given lines are parallel or not.\"\"\"","answers":[{"text":"\r\n    if line1[0] * line2[1] - line1[1] * line2[0] == 0:\r\n        return True\r\n    return False\r\n\r\n\r","votes":99497.988},{"text":"\r\n    if line1[0] * line2[1] - line1[1] * line2[0] == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":110862.072},{"text":"\r\n    if line1[0] * line2[1] == line2[0] * line1[1]:\r\n        return True\r\n    return False\r\n\r\n\r","votes":112062.104},{"text":"\r\n    print(line1, line2)\r\n    if line1[0] * line2[1] - line1[1] * line2[0] == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":129209.34},{"text":"\r\n    \r\n    if line1 == line2:\r\n        return True\r\n    \r\n    else:\r\n        \r\n        if line1[0] != 0:\r\n            \r\n            m1 = round(line1[1]\/line1[0], 3)\r\n            \r\n            if line2[0] == 0:\r\n                \r\n                if line2[1] == 0:\r\n                    return True\r\n                \r\n                else:\r\n                    return False\r\n            \r\n            else:\r\n                m2 = round(line2[1]\/line2[0], 3)\r\n                \r\n                if m1 == m2:\r\n                    return True\r\n                \r\n                else:\r\n                    return False\r\n        \r\n        else:\r\n            \r\n            if line2[0] == 0:\r\n                \r\n                if line2[1] == 0:\r\n                    return True\r\n                \r\n                else:\r\n                    return False\r\n            \r\n            else:\r\n                m2 = round(line2[1]\/line2[0], 3)\r\n                \r\n                if m1 == m2:\r\n                    return True\r\n                \r\n                else:\r\n                    return False\r\n\r\n\r\n\r\n\r\n# --------------\r\n#Code starts here\r\n\r","votes":138816.32},{"text":"\r\n\r\n    if line1[0] == line2[0] and line1[1] == line2[1]:\r\n        return True\r\n    elif line1[0] == line2[0] or line1[1] == line2[1]:\r\n        return False\r\n    else:\r\n        x1 = (line1[1] \/ line1[0]) - (line2[1] \/ line2[0])\r\n        if x1 == 0:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r","votes":139247.168},{"text":"\r\n    \r\n    if line1[0]*line2[1] - line1[1]*line2[0] == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":153756.628},{"text":"\r\n    \r\n    # Code here\r\n    \r\n    if (line1[0] - line1[1]) == (line2[0] - line2[1]):\r\n        return True\r\n    return False\r\n\r","votes":158157.6},{"text":"\r\n    \r\n    if(line1[0] == line2[0] and line1[1] == line2[1]):\r\n        return True\r\n    \r\n    if(line1[0] == line2[0]):\r\n        return False\r\n    \r\n    m1 = line1[1] \/ line1[0]\r\n    m2 = line2[1] \/ line2[0]\r\n    \r\n    if(m1 != m2):\r\n        return False\r\n    \r\n    return True\r\n\r","votes":212410.356},{"text":"\r\n    if abs(line1[0] * line2[1] - line1[1] * line2[0]) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(parallel_lines([1, 1], [2, 2]))\r\nprint(parallel_lines([0, 0], [2, 2]))\r\nprint(parallel_lines([1, 0], [0, 1]))\r\nprint(parallel_lines([1, 1], [1, 1]))\r\nprint(parallel_lines([1, 1], [0, 0]))\r\nprint(parallel_lines([1, 0], [1, 0]))\r\nprint(parallel_lines([0, 1], [0, 1]))\r\nprint(parallel_lines([1, 1], [1, 0]))\r\nprint(parallel_lines([1, 0], [0, 1]))\r\n\r\n# output\r\n# True\r\n# False\r\n# False\r\n# True\r\n# False\r\n# False\r\n# False\r\n# True\r\n# False\r\n\r\n\r\n\r","votes":225439.416},{"text":"\r\n    if line1[0]*line2[1] == line1[1]*line2[0]:\r\n        return 'true'\r\n    return 'false'\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = list(map(int, input().rstrip().split()))\r\n    line2 = list(map(int, input().rstrip().split()))\r\n\r\n    result = parallel_lines(line1, line2)\r\n    print(result)\r\n","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        return True\r\n    elif line1[0] == line2[1]:\r\n        return True\r\n    elif line1[1] == line2[0]:\r\n        return True\r\n    elif line1[1] == line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = [1, 2]\r\n    line2 = [1, 2]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 2]\r\n    line2 = [3, 4]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 2]\r\n    line2 = [1, 3]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 2]\r\n    line2 = [2, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 2]\r\n    line2 = [1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [1, 2]\r\n    line2 = [1, 4]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [2, 1]\r\n    line2 = [1, 1]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [2, 1]\r\n    line2 = [1, 2]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [2, 1]\r\n    line2 = [1, 3]\r\n    print(parallel_lines(line1, line2))\r\n    line1 = [2, 1]\r\n    line2 = [1, ","votes":null},{"text":"\r\n    \r\n    if line1[0] * line2[0] == 0:\r\n        print(\"Parallel\")\r\n    else:\r\n        print(\"Not Parallel\")\r\n\r\n\r\nparallel_lines([0, 1], [1, 0])\r\n\r\n\r\n# Write a python function to check whether two given lines are parallel or not.\r\n\r\n# Sample Input 1:\r\n#   1. [0, 1]\r\n#   2. [1, 0]\r\n\r\n# Sample Output 1:\r\n#   Parallel\r\n\r\n\r\n# Sample Input 2:\r\n#   1. [0, 1]\r\n#   2. [0, -1]\r\n\r\n# Sample Output 2:\r\n#   Not Parallel\r\n\r\n\r\n# Sample Input 3:\r\n#   1. [1, 0]\r\n#   2. [0, 1]\r\n\r\n# Sample Output 3:\r\n#   Parallel\r\n\r\n\r\n# Sample Input 4:\r\n#   1. [1, 2]\r\n#   2. [1, 3]\r\n\r\n# Sample Output 4:\r\n#   Not Parallel\r\n\r\n\r\n# Sample Input 5:\r\n#   1. [1, 1]\r\n#   2. [1, 1]\r\n\r\n# Sample Output 5:\r\n#   Parallel\r\n\r\n\r\n# Sample Input 6:\r\n#   1. [1, 1]\r\n#   2. [0, 0]\r\n\r\n# Sample Output 6:\r\n#   Not Parallel\r\n\r\n\r\n# Sample Input 7:\r\n#   1. [1, 1]\r\n#   2. [1, 1]\r\n\r\n# Sample Output 7:\r\n#   Parallel\r\n\r\n\r\n# Sample Input 8:\r\n#   1. [1, 1]\r\n#   ","votes":null},{"text":"\r\n    # Check if the direction vector of line1 is equal to the direction vector of line2\r\n    if line1[1] == line2[1]:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[0] == line2[0] and line1[1] == line2[1]:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if (line1[0] == line2[0] and line1[1] == line2[1]) or (line1[0] == line2[1] and line1[1] == line2[0]):\r\n        print('The given lines are parallel.')\r\n    else:\r\n        print('The given lines are not parallel.')\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[0] - line1[1] == line2[0] - line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(parallel_lines([0, 1], [1, 0]))  # True\r\nprint(parallel_lines([1, 0], [0, 1]))  # True\r\nprint(parallel_lines([1, 0], [1, 1]))  # False\r\nprint(parallel_lines([1, 0], [0, 0]))  # False\r\nprint(parallel_lines([1, 0], [1, 1]))  # False\r\nprint(parallel_lines([1, 1], [0, 1]))  # False\r\nprint(parallel_lines([1, 1], [1, 0]))  # False\r\nprint(parallel_lines([1, 0], [2, 2]))  # False\r\nprint(parallel_lines([1, 0], [3, 0]))  # False\r\nprint(parallel_lines([2, 2], [3, 0]))  # False\r\nprint(parallel_lines([0, 0], [1, 0]))  # False\r\nprint(parallel_lines([0, 0], [0, 1]))  # False\r\nprint(parallel_lines([0, 0], [1, 1]))  # False\r\nprint(parallel_lines([1, 0], [-1, 0]))  # False\r\nprint(parallel_lines([1, 0], [1, -1]))  # False\r\nprint(parallel_lines([1, 1], [1, -1]))  # False\r\nprint(parallel_lines([1, 1], [1, 0]))  # False\r\nprint(parallel_lines([1, 0], [2, 2]))  # False\r\nprint(parallel_lines([1, 0], [3, 0]))  # False\r\nprint(parallel_lines([2, 2], [3, ","votes":null},{"text":"\r\n    import numpy as np\r\n    import math\r\n\r\n   ","votes":null},{"text":"\r\n    # Write your code here\r\n    if line1[0] == line2[0]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if line1[1] == line2[1] == 0:\r\n        if line1[0] == line2[0]:\r\n            return True\r\n        else:\r\n            return False\r\n    \r\n    if line1[0] == line2[0] == 0:\r\n        if line1[1] == line2[1]:\r\n            return True\r\n        else:\r\n            return False\r\n    \r\n    if line1[0] == 0 and line2[0] == 0:\r\n        if line1[1] == line2[1] == 0:\r\n            return True\r\n        else:\r\n            return False\r\n    \r\n    if line1[0] == line2[0] == 0:\r\n        if line1[1] == line2[1]:\r\n            return True\r\n        else:\r\n            return False\r\n    \r\n    if line1[0] == line2[0]:\r\n        return False\r\n    \r\n    if line1[1] == line2[1]:\r\n        return False\r\n    \r\n    if line1[0] == 0 and line2[1] == 0:\r\n        return False\r\n    \r\n    if line1[1] == 0 and line2[0] == 0:\r\n        return False\r\n    \r\n    if (line1[0]\/line1[1]) == (line2[0]\/line2[1]):\r\n        return False\r\n    \r\n    if (line1[0]\/line1[1]) == (line2[0]\/line2[1]):\r\n        return False\r\n    \r\n    if (line1[0]\/line1[1]) == (line2[0]\/line2[1]):\r\n        return False\r\n    \r\n    if (line1[0]\/line1[1]) == (line2[0]\/line2[1]):\r\n        return False\r\n    \r\n    if (line1[0]\/line","votes":null},{"text":"\r\n    slope1 = (line1[1] - line1[0]) \/ (line1[2] - line1[1])\r\n    slope2 = (line2[1] - line2[0]) \/ (line2[2] - line2[1])\r\n    if slope1 == slope2:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Your code here\r\n    \r\n    # Check if both the lines are parallel or not\r\n    if line1[0] == line2[0]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[1] == line2[1]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[2] == line2[2]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[3] == line2[3]:\r\n        return False\r\n    \r\n    # Check if both the lines are parallel or not\r\n    if line1[0] == line2[1]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[0] == line2[2]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[0] == line2[3]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[1] == line2[0]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[1] == line2[2]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[1] == line2[3]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[2] == line2[0]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[2] == line2[1]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[2] == line2[3]:\r\n        return False\r\n    # Check if both the lines are parallel or not\r\n    if line1[3] == line2[0]:\r\n        return False\r","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if line1[0] == line2[0]:\r\n        return \"parallel\"\r\n    elif line1[1] == line2[1]:\r\n        return \"parallel\"\r\n    elif line1[0] != line2[0] and line1[1] != line2[1]:\r\n        return \"not parallel\"\r\n\r\n\r","votes":null},{"text":"\r\n    if line1.m == line2.m:\r\n        return \"Parallel\"\r\n    else:\r\n        return \"Not parallel\"\r\n\r\n\r\nclass Line:\r\n   ","votes":null},{"text":"\r\n    if line1[0] == line2[0] and line1[1] == line2[1]:\r\n        return 1\r\n    elif line1[0] == line2[0] or line1[1] == line2[1]:\r\n        return 0\r\n    else:\r\n        return 2\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if line1[0] == line2[0]:\r\n        return True\r\n    elif line1[1] == line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # A line is defined by a point and a vector\r\n    point1 = (line1[0], line1[1])\r\n    vector1 = (line1[2], line1[3])\r\n    point2 = (line2[0], line2[1])\r\n    vector2 = (line2[2], line2[3])\r\n    # check that they are indeed lines\r\n    if point1 == point2:\r\n        print(\"Both lines are defined by a single point.\")\r\n    elif vector1 == vector2:\r\n        print(\"Both lines are defined by a single vector.\")\r\n    # check if the two lines are parallel\r\n    elif vector1[0] * vector2[1] - vector1[1] * vector2[0] == 0:\r\n        print(\"Both lines are parallel.\")\r\n    else:\r\n        print(\"Both lines are not parallel.\")\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    \r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n    \r\n    if x1==x2 and x3==x4 and y1==y2 and y3==y4:\r\n        return True\r\n    else:\r\n        return False\r\n    \r\n    \r\n\r\n\r\n# In[6]:\r\n\r\n\r\n\r\n\r\n# In[7]:\r\n\r\n\r","votes":null},{"text":"\r\n    line1_slope = line1.slope()\r\n    line2_slope = line2.slope()\r\n    if line1_slope == line2_slope:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if line1[0] == line2[0]:\r\n        return True\r\n\r\n    elif line1[0] != line2[0]:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    x1 = line1[0][0]\r\n    y1 = line1[0][1]\r\n    x2 = line1[1][0]\r\n    y2 = line1[1][1]\r\n    x3 = line2[0][0]\r\n    y3 = line2[0][1]\r\n    x4 = line2[1][0]\r\n    y4 = line2[1][1]\r\n\r\n   ","votes":null},{"text":"\r\n    if (line1[0] - line2[0]) != 0:\r\n        return False\r\n    elif (line1[1] - line2[1]) != 0:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":null},{"text":"\r\n    if line1 == line2:\r\n        return 'parallel'\r\n    if abs(line1[0] - line2[0]) == abs(line1[1] - line2[1]):\r\n        return 'parallel'\r\n    else:\r\n        return 'not parallel'\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        return True\r\n    elif line1[1] == line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(parallel_lines((3, 6, 1), (2, 6, 2)))\r\nprint(parallel_lines((2, 2, 2), (2, 2, 2)))\r\nprint(parallel_lines((1, 2, 2), (2, 1, 2)))\r\nprint(parallel_lines((1, 2, 2), (2, 1, 2)))\r\nprint(parallel_lines((1, 1, 2), (2, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 3, 1)))\r\nprint(parallel_lines((1, 2, 2), (3, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 2, 1)))\r\nprint(parallel_lines((1, 2, 2), (2, 2, 1)))","votes":null},{"text":"\r\n    slope1 = slope(line1)\r\n    slope2 = slope(line2)\r\n    if slope1 == slope2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    a1, b1 = line1\r\n    a2, b2 = line2\r\n    \r\n    # if the product of the slopes is 0 then the lines are parallel\r\n    # else the lines are not parallel\r\n    if a1 * a2 + b1 * b2 == 0:\r\n        return True\r\n    \r\n    return False\r\n    \r\n    \r\nprint(parallel_lines([1, 2], [2, 4]))\r\nprint(parallel_lines([1, 0], [0, 1]))\r\nprint(parallel_lines([1, 2], [1, 4]))\r\nprint(parallel_lines([1, 2], [1, 1]))\r\nprint(parallel_lines([1, 1], [1, 2]))\r\nprint(parallel_lines([1, 10], [1, 1]))\r\nprint(parallel_lines([1, 1], [1, 10]))\r\nprint(parallel_lines([1, 1], [1, 1]))\r\nprint(parallel_lines([1, 1], [1, 0]))\r\nprint(parallel_lines([1, 1], [1, 1]))\r\nprint(parallel_lines([1, 1], [0, 1]))\r\nprint(parallel_lines([1, 1], [1, 1]))\r\nprint(parallel_lines([1, 1], [1, 0]))\r\nprint(parallel_lines([1, 1], [0, 1]))\r\nprint(parallel_lines([1, 1], [0, 1]))\r\nprint(parallel_lines([1, 1], [1, 1]))\r\nprint(parallel_lines([1, 1], [0, 1]))\r\nprint(parallel_lines([1, 1], [1, 1]))\r\nprint(parallel_lines([1, 1], [0, 1]))\r\nprint(parallel_lines([1, 1], [1, 1]))\r","votes":null},{"text":"\r\n    if line1[0] == line2[0] and line1[1] == line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    line1=line1.split()\r\n    line2=line2.split()\r\n    \r\n    if len(line1)==1 and len(line2)==1:\r\n        print(\"Parallel lines\")\r\n    else:\r\n        print(\"Not parallel lines\")\r\n\r\n\r\n","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        return True\r\n    elif line1[1] == line2[1]:\r\n        return True\r\n    elif line1[0] == line2[1]:\r\n        return True\r\n    elif line1[1] == line2[0]:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    import numpy as np\r\n    coef1 = np.polyfit(line1[:, 0], line1[:, 1], 1)\r\n    coef2 = np.polyfit(line2[:, 0], line2[:, 1], 1)\r\n    if coef1[0] == coef2[0] and coef1[1] == coef2[1]:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[0] == line2[0] or line1[1] == line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    slope1 = (line1[1][1]-line1[0][1])\/(line1[1][0]-line1[0][0])\r\n    slope2 = (line2[1][1]-line2[0][1])\/(line2[1][0]-line2[0][0])\r\n    if slope1 == slope2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# line1 = [[0, 0], [1, 1]]\r\n# line2 = [[0, 1], [2, 3]]\r\n# print(parallel_lines(line1, line2))\r\n\r","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    if line1[0] == line2[0] and line1[1] == line2[1]:\r\n        return True\r\n\r\n    return False\r\n\r\n\r\n#Taking Input Using Fast IO\r","votes":null},{"text":"\r\n    x = line1[1] - line1[0]\r\n    y = line2[1] - line2[0]\r\n    if x == y:\r\n        print(\"The two lines are parallel.\")\r\n    else:\r\n        print(\"The two lines are not parallel.\")\r\n\r\n\r\n# Driver Code\r\nline1 = [1, 1]\r\nline2 = [1, 2]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [1, 3]\r\nline2 = [4, 1]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [2, 2]\r\nline2 = [2, 3]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [1, 1]\r\nline2 = [1, 3]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [1, 1]\r\nline2 = [2, 2]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [1, 1]\r\nline2 = [3, 3]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [3, 3]\r\nline2 = [3, 3]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [2, 2]\r\nline2 = [1, 3]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [1, 2]\r\nline2 = [3, 4]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [3, 4]\r\nline2 = [1, 2]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [3, 4]\r\nline2 = [1, 3]\r\nparallel_lines(line1, line2)\r\n\r\nline1 = [1, 3]\r\nline2 = [","votes":null},{"text":"\r\n    # 1st step: find the slope of two lines\r\n    \r\n    # slope of line1 = m1\r\n    m1 = line1[1][1] - line1[0][1]\r\n    m1 = m1 \/ (line1[1][0] - line1[0][0])\r\n    \r\n    # slope of line2 = m2\r\n    m2 = line2[1][1] - line2[0][1]\r\n    m2 = m2 \/ (line2[1][0] - line2[0][0])\r\n    \r\n    # 2nd step: check slope of two lines are equal or not\r\n    \r\n    if m1 == m2:\r\n        return \"Parallel\"\r\n    \r\n    else:\r\n        return \"Not Parallel\"\r\n\r\nprint(parallel_lines([[2, 2], [0, 0]], [[0, 4], [4, 0]]))\r\nprint(parallel_lines([[1, 1], [2, 2]], [[10, 11], [11, 10]]))\r\nprint(parallel_lines([[1, 1], [2, 3]], [[10, 11], [11, 10]]))\r\nprint(parallel_lines([[1, 1], [2, 5]], [[10, 11], [11, 10]]))\r\nprint(parallel_lines([[1, 1], [2, 3]], [[10, 10], [11, 11]]))\r\nprint(parallel_lines([[1, 1], [2, 3]], [[10, 10], [11, 10]]))\r\nprint(parallel_lines([[1, 1], [2, 3]], [[1, 1], [2, 3]]))\r\nprint(parallel_lines([[1, 1], [2, 3]], [[1, 1], [2, 2]]))\r","votes":null},{"text":"\r\n    m1, m2 = line1[1], line2[1]\r\n    m = m1 - m2\r\n    if m == 0:\r\n        return \"Parallel\"\r\n    else:\r\n        return \"Not Parallel\"\r\n\r\n\r","votes":null},{"text":"\r\n    l1 = line1.copy()\r\n    l2 = line2.copy()\r\n    if l1.a == l2.a and l1.b == l2.b:\r\n        return True\r\n    if l1.a == l2.b and l1.b == l2.a:\r\n        return True\r\n    if l1.a == l2.a and l1.b == l2.b:\r\n        return True\r\n    if l1.a == l2.b and l1.b == l2.a:\r\n        return True\r\n    if l1.a == l2.a and l1.b == l2.b:\r\n        return True\r\n    if l1.a == l2.b and l1.b == l2.a:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n    \r\n    if (y2 - y1) \/ (x2 - x1) == (y4 - y3) \/ (x4 - x3):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(parallel_lines([1,2,3,4], [1,4,3,6]))\r\nprint(parallel_lines([1,2,3,4], [2,1,4,3]))\r\nprint(parallel_lines([1,2,3,4], [6,5,4,3]))\r\nprint(parallel_lines([1,","votes":null},{"text":"\r\n    \r\n    if line1[0] == line2[0]:\r\n        return True\r\n    elif line1[1] == line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(parallel_lines([3, 7, 9], [4, 5, 6]))\r\nprint(parallel_lines([-2, 1, 0], [7, -1, 0]))\r\n","votes":null},{"text":"\r\n    x = line1[0] - line2[0]\r\n    y = line1[1] - line2[1]\r\n    z = line1[2] - line2[2]\r\n    x1 = line1[3] - line2[0]\r\n    y1 = line1[4] - line2[1]\r\n    z1 = line1[5] - line2[2]\r\n\r\n    if (x * x1 + y * y1 + z * z1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    \r\n    # if line1 and line2 are in the same direction\r\n    if line1[0] == line2[0] and line1[1] == line2[1]:\r\n        return True\r\n    \r\n    # if line1 and line2 are in opposite direction\r\n    elif line1[0] == -line2[0] and line1[1] == -line2[1]:\r\n        return True\r\n    \r\n    # if line1 and line2 are in the same direction, but not parallel\r\n    elif line1[0] == line2[0] and line1[1] != line2[1]:\r\n        return False\r\n    \r\n    # if line1 and line2 are in opposite direction, but not parallel\r\n    elif line1[0] == -line2[0] and line1[1] != -line2[1]:\r\n        return False\r\n    \r\n    # if line1 and line2 are in the same direction, but not parallel\r\n    elif line1[0] != line2[0] and line1[1] == line2[1]:\r\n        return False\r\n    \r\n    # if line1 and line2 are in opposite direction, but not parallel\r\n    elif line1[0] != -line2[0] and line1[1] == -line2[1]:\r\n        return False\r\n    \r\n    # if line1 and line2 are in the same direction, but not parallel\r\n    else:\r\n        return False\r\n    \r\n    \r\n# -----------------------------------------------------------------------------\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if line1[1][0] == line2[1][0]:\r\n        return True\r\n    elif line1[1][0] == line2[1][0] and line1[1][1] == line2[1][1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(parallel_lines([(1,0), (2,1)], [(0,0), (1,2)]))\r\nprint(parallel_lines([(0,0), (2,1)], [(1,0), (2,1)]))\r\nprint(parallel_lines([(1,0), (2,1)], [(1,0), (3,2)]))\r\nprint(parallel_lines([(1,1), (2,1)], [(1,1), (2,1)]))\r\nprint(parallel_lines([(1,1), (2,1)], [(2,1), (3,2","votes":null},{"text":"\r\n    if line1[0] == line2[0] and line1[1] == line2[1]:\r\n        return True\r\n    elif line1[0] == line2[0] or line1[1] == line2[1]:\r\n        return False\r\n    else:\r\n        m1 = (line1[1][1] - line1[0][1])\/(line1[1][0] - line1[0][0])\r\n        m2 = (line2[1][1] - line2[0][1])\/(line2[1][0] - line2[0][0])\r\n        if m1 == m2:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if line1[0]*line2[1] == line2[0]*line1[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = input().strip().split()\r\n    line2 = input().strip().split()\r\n    if parallel_lines(line1, line2):\r\n        print(\"The two lines are parallel\")\r\n    else:","votes":null},{"text":"\r\n    \r\n    if (line1[0][0] != line1[1][0] and line1[0][1] != line1[1][1]) and (line2[0][0] != line2[1][0] and line2[0][1] != line2[1][1]):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    \r\n    if line1[0] == line2[0] and line1[1] == line2[1] or line1[0] == line2[1] and line1[1] == line2[0]:\r\n        \r\n        print(\"The given lines are parallel.\")\r\n    \r\n    else:\r\n        \r\n        print(\"The given lines are not parallel.\")\r\n\r\n\r","votes":null},{"text":"\r\n    # create a dictionary\r\n    dic = {1: 0, 2: 0, 3: 0}\r\n\r\n    # create a set of all the points\r\n    points = set()\r\n\r\n    # create a set of all the points\r\n    points2 = set()\r\n\r\n    # for each point in line1\r\n    for point in line1:\r\n        # add the point to the set\r\n        points.add(point)\r\n\r\n    # for each point in line1\r\n    for point in line2:\r\n        # add the point to the set\r\n        points2.add(point)\r\n\r\n    # for each point in the set of all the points\r\n    for point in points.intersection(points2):\r\n        # for each point in line1\r\n        for point1 in line1:\r\n            # if point is equal to point1\r\n            if point == point1:\r\n                # add 1 to dictionary value\r\n                dic[1] += 1\r\n\r\n        # for each point in line2\r\n        for point2 in line2:\r\n            # if point is equal to point2\r\n            if point == point2:\r\n                # add 1 to dictionary value\r\n                dic[2] += 1\r\n\r\n    # for each point in the set of all the points\r\n    for point in points.intersection(points2):\r\n        # for each point in line1\r\n        for point1 in line1:\r\n            # if point is equal to point1\r\n            if point == point1:\r\n                # add 1 to dictionary value\r\n                dic[3] += 1\r\n\r\n        # for each point in line2\r\n        for point2 in line2:\r\n            # if point is equal to point2\r\n            if point == point2:\r\n                # add 1 to dictionary value\r\n                dic[3] += 1\r\n\r\n    # if the value in the dictionary is equal to 3\r\n    if dic[1] == 3 o","votes":null},{"text":"\r\n    # first check the slope of line 1 and line 2\r\n    slope1 = (line1[1] - line1[0]) \/ (line1[2] - line1[1])\r\n    slope2 = (line2[1] - line2[0]) \/ (line2[2] - line2[1])\r\n    if slope1 == slope2:\r\n        return \"Parallel\"\r\n    else:\r\n        return \"Not Parallel\"\r\n\r\n\r","votes":null},{"text":"\r\n    # code here\r\n    if line1[1]==line2[0] or line1[0]==line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    \r\n    if line1[0] == line2[0] or line1[1] == line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    x1, y1 = line1\r\n    x2, y2 = line2\r\n    x_diff = x1 - x2\r\n    y_diff = y1 - y2\r\n    if x_diff == 0 and y_diff == 0:\r\n        return False\r\n    else:\r\n        gcd = gcd_value(x_diff, y_diff)\r\n        return gcd == 0\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[1] == line2[1] and line1[0] == line2[0]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[1] == line2[1] and line1[2] == line2[2]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # check for null vectors\r\n    if line1 == None or line2 == None:\r\n        return None\r\n    # vectorizing the lines\r\n    vec1 = vectorize(line1)\r\n    vec2 = vectorize(line2)\r\n    # calculating the dot product of both the lines\r\n    dot_product = (vec1[0]*vec2[0] + vec1[1]*vec2[1] + vec1[2]*vec2[2])\r\n    # checking the condition\r\n    if dot_product == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    x1, y1, x2, y2 = line1\r\n    x3, y3, x4, y4 = line2\r\n    if x2 - x1 == x4 - x3 and y2 - y1 == y4 - y3:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = [1, 1, 10, 10]\r\n    line2 = [1, 1, 10, 20]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 10, 10]\r\n    line2 = [2, 2, 10, 20]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 10, 10]\r\n    line2 = [-1, -1, 10, -20]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 10, 10]\r\n    line2 = [4, 4, 15, 15]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 10, 10]\r\n    line2 = [5, 5, 25, 25]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 10, 10]\r\n    line2 = [15, 15, 25, 25]\r\n    print(parallel_lines(line1, line2))\r\n\r\n    line1 = [1, 1, 10, 10]\r\n    line2 = [1, 1, 10, 10]\r\n    print(parallel_line","votes":null},{"text":"\r\n    \r\n    if line1[0] == line2[0] or line1[1] == line2[1] or line1[0] == line2[1] or line1[1] == line2[0]:\r\n        return \"Parallel\"\r\n    else:\r\n        return \"Not Parallel\"\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    if (line1[0], line1[1]) == (line2[0], line2[1]):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    line1 = input().strip().split()\r\n    line1 = [int(line1[0]), int(line1[1])]\r\n    line2 = input().strip().split()\r\n    line2 = [int(line2[0]), int(line2[1])]\r\n    if parallel_lines(line1, line2):\r\n        print(True)\r\n    else:\r\n        print(False)\r\n\r\n# # 10. Perimeter and Area\r\n#","votes":null},{"text":"\r\n    \r\n    slope1 = slope(line1)\r\n    slope2 = slope(line2)\r\n    \r\n    if slope1 == slope2:\r\n        return \"Parallel\"\r\n    else:\r\n        return \"Not Parallel\"\r\n\r","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        return False\r\n    elif line1[1] == line2[1]:\r\n        return False\r\n    elif line1[0] == line2[1]:\r\n        return True\r\n    elif line1[1] == line2[0]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # first check if the lines are parallel or not\r\n    if line1[1][0] == line2[1][0] and line1[1][1] == line2[1][1]:\r\n        return False\r\n    # if the lines are parallel, the slope of the second line should be equal to the slope of the first line\r\n    if (line1[0][1] - line1[1][1]) == (line2[0][1] - line2[1][1]):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if line1.p1 == line2.p1 or line1.p2 == line2.p2:\r\n        return True\r\n\r\n    if line1.slope != line2.slope:\r\n        return False\r\n\r\n    if line1.slope == \"inf\":\r\n        return line1.p1.x == line2.p1.x\r\n\r\n    if line1.slope == \"0\":\r\n        return line1.p1.y == line2.p1.y\r\n\r\n    if line1.p1.x == line2.p1.x:\r\n        return line1.p1.y == line2.p1.y\r\n\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[0] == line2[0]:\r\n        return False\r\n    if line1[1] == line2[1]:\r\n        return False\r\n    if line1[0] == line2[1]:\r\n        return False\r\n    if line1[1] == line2[0]:\r\n        return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    line1_coeff = line1.coeffs()\r\n    line2_coeff = line2.coeffs()\r\n    if line1_coeff[0] == line2_coeff[0] and line1_coeff[1] == line2_coeff[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # line1 is a list of 2 points\r\n    # line2 is a list of 2 points\r\n\r\n    # point1 is a list of 2 values\r\n    # point2 is a list of 2 values\r\n\r\n    # if line1 and line2 are parallel, return True\r\n    # else, return False\r\n    # if same points are given then return True\r\n\r\n    point1 = line1[0]\r\n    point2 = line1[1]\r\n\r\n    point3 = line2[0]\r\n    point4 = line2[1]\r\n\r\n    # if any one of the point is same, return True\r\n    if point1 == point3 or point1 == point4 or point2 == point3 or point2 == point4:\r\n        return True\r\n\r\n    # check if the slope of line 1 is equal to the slope of line 2\r\n    # if same, then the lines are parallel\r\n    if (point2[1] - point1[1]) == (point4[1] - point3[1]):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    slope1 = get_slope(line1)\r\n    slope2 = get_slope(line2)\r\n    \r\n    if slope1 == slope2:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    if line1[0] == line2[0] and line1[1] == line2[1]:\r\n        return \"The lines are parallel and neither coincident or coincident\"\r\n    elif line1[0] == line2[0]:\r\n        return \"The lines are parallel and neither coincident or coincident\"\r\n    elif line1[1] == line2[1]:\r\n        return \"The lines are parallel and neither coincident or coincident\"\r\n    return \"The lines are not parallel\"\r\n\r\n\r","votes":null},{"text":"\r\n    if line1[1] == line2[1]:\r\n        return \"parallel\"\r\n    else:\r\n        return \"not parallel\"\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    line1 = [[0, 1], [1, 1]]\r\n    line2 = [[-1, 0], [0, 1]]\r\n    result = parallel_lines(line1, line2)\r\n    if result == \"parallel\":\r\n        print(\"Lines are parallel.\")\r\n    else:\r\n        print(\"Lines are not parallel.\")\r\n\r\n    line1 = [[0, 1], [1, 1]]\r\n    line2 = [[-1, 0], [0, 0]]\r\n    result = parallel_lines(line1, line2)\r\n    if result == \"parallel\":\r\n        print(\"Lines are parallel.\")\r\n    else:\r\n        print(\"Lines are not parallel.\")\r\n\r\n    line1 = [[0, 1], [1, 1]]\r\n    line2 = [[-1, 0], [0, 0]]\r\n    result = parallel_lines(line1, line2)\r\n    if result == \"parallel\":\r\n        print(\"Lines are parallel.\")\r\n    else:\r\n        print(\"Lines are not parallel.\")\r\n\r\n    line1 = [[0, 1], [1, 1]]\r\n    line2 = [[-1, 1], [0, 0]]\r\n    result = parallel_lines(line1, line2)\r\n    if result == \"parallel\":\r\n        print(\"Lines are parallel.\")\r\n    else:\r\n        print(\"Lines are not parallel.\")\r\n\r\n    line1 = [[0, 1], [1, 1]]\r\n    line2 = [[-1, 1], [0, 2]]\r\n    result = parallel_lines(line1, line2)\r\n    if result == \"parallel\":\r\n        print(\"Lines are parallel.\")\r\n    else:\r\n        print(\"Lines are not parallel.\")\r\n","votes":null},{"text":"\r\n    if line1.slope == line2.slope:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    # If both the lines are parallel, their slopes \r\n    # must be equal.\r\n    if line1.slope() == line2.slope():\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    slopes_line1 = slope(line1)\r\n    slopes_line2 = slope(line2)\r\n    if slopes_line1 == slopes_line2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    \"\"\"\r\n    # Line 1 = (2, 3) and (3, 4) \r\n    # Line 2 = (1, 1) and (4, 3) \r\n    # Output: False \r\n    \"\"\"\r\n\r\n    \"\"\"\r\n    # Line 1 = (2, 3) and (3, 4) \r\n    # Line 2 = (2, 6) and (3, 5) \r\n    # Output: True \r\n    \"\"\"\r\n\r\n    if line1[0][0] == line1[1][0]:\r\n        if line2[0][0] == line2[1][0]:\r\n            return True\r\n        else:\r\n            return False\r\n    else:\r\n        if line2[0][0] == line2[1][0]:\r\n            return False\r\n        else:\r\n            m1 = (line1[1][1] - line1[0][1]) \/ (line1[1][0] - line1[0][0])\r\n            m2 = (line2[1][1] - line2[0][1]) \/ (line2[1][0] - line2[0][0])\r\n            if m1 == m2:\r\n                return True\r\n            else:\r\n                return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Given two lines:\r\n    # 1) Line 1 is represented as a tuple (x1, y1, x2, y2) \r\n    # 2) Line 2 is represented as a tuple (x1, y1, x2, y2) \r\n    # Your task is to complete the function which returns the following values: \r\n    # 1) If the two lines are parallel, return \"parallel\" \r\n    # 2) If the two lines are intersecting, return \"intersecting\" \r\n    # 3) If the two lines are not intersecting, return \"not intersecting\" \r\n    # If the two lines are parallel, return \"parallel\" \r\n    # If the two lines are intersecting, return \"intersecting\" \r\n    # If the two lines are not intersecting, return \"not intersecting\" \r\n    # if line1[0] == line2[0]:\r\n    #     return 'parallel'\r\n    # if line1[1] == line2[1]:\r\n    #     return 'parallel'\r\n    # if line1[2] == line2[2]:\r\n    #     return 'parallel'\r\n    # if line1[3] == line2[3]:\r\n    #     return 'parallel'\r\n    # if line1[0] == line2[0] and line1[1] == line1[1]:\r\n    #     return 'parallel'\r\n\r\n    # if line1[0] == line2[0] and line1[2] == line2[2]:\r\n    #     return 'parallel'\r\n\r\n    # if line1[1] == line2[1] and line1[3] == line2[3]:\r\n    #     return 'parallel'\r\n\r\n    # if line1[2] == line2[2] and line1[3] == line2[3]:\r\n    #     return 'parallel'\r\n\r\n    # if line1[0] == line2[0] or line1[1] == line2[1] or lin","votes":null},{"text":"\r\n    x1, y1 = line1\r\n    x2, y2 = line2\r\n    if x1 == x2:\r\n        return False\r\n    elif y1 == y2:\r\n        return False\r\n    else:\r\n        m1 = y1 \/ x1\r\n        m2 = y2 \/ x2\r\n        if m1 == m2:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    slope1 = line1[1] \/ line1[0]\r\n    slope2 = line2[1] \/ line2[0]\r\n\r\n    if slope1 == slope2:\r\n        print(\"Parallel\")\r\n    else:\r\n        print(\"Not Parallel\")\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if line1[1] == line2[1]:\r\n        return \"Parallel\"\r\n    else:\r\n        return \"Not Parallel\"\r\n\r\nline1 = [1, 2]\r\nline2 = [6, 2]\r\n\r\nprint(parallel_lines(line1, line2))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    s1 = slope(line1)\r\n    s2 = slope(line2)\r\n\r\n    if s1 == s2 and s1 != None and s2 != None:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    \r\n    # Find the slope of line1 \r\n    m1 = (line1[1] - line1[0]) \/ (line1[2] - line1[1])\r\n    \r\n    # Find the slope of line2 \r\n    m2 = (line2[1] - line2[0]) \/ (line2[2] - line2[1])\r\n    \r\n    # Check for parallel lines \r\n    if m1 == m2:\r\n        print(\"Parallel\")\r\n    else:\r\n        print(\"Not Parallel\")\r\n\r","votes":null},{"text":"\r\n    slope1 = (line1[1] - line1[0]) \/ (line1[2] - line1[1])\r\n    slope2 = (line2[1] - line2[0]) \/ (line2[2] - line2[1])\r\n    if slope1 == slope2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if (line1[0] == line2[0] or line1[1] == line2[1]):\r\n        return True\r\n    if (line1[0] + line1[1] == line2[0] + line2[1]):\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    line1 = sorted(line1)\r\n    line2 = sorted(line2)\r\n    if line1[1]==line2[0] or line1[0]==line2[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    import math\r\n    import numpy as np\r\n    import sympy as sp\r\n\r\n    # Convert a line to 2D vector form\r\n   ","votes":null},{"text":"\r\n    slope1 = slope(line1)\r\n    slope2 = slope(line2)\r\n    if slope1 == slope2:\r\n        return \"True\"\r\n    else:\r\n        return \"False\"\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    # return True if the lines are parallel else return False\r\n    slope1 = (line1[1] - line1[0]) \/ (line1[2] - line1[1])\r\n    slope2 = (line2[1] - line2[0]) \/ (line2[2] - line2[1])\r\n\r\n    if slope1 == slope2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null}],"time":{"count":10.0,"avg":147945.8992,"std":41924.6514964365,"cov":0.28337826}}
{"id":526,"question":"def capitalize_first_last_letters(str1):\r\n    \"\"\"Write a python function to capitalize first and last letters of each word of a given string.\"\"\"","answers":[{"text":"\r\n    word_list = str1.split()\r\n    # print(word_list)\r\n    for i in range(len(word_list)):\r\n        word_list[i] = word_list[i][0].upper() + word_list[i][1:]\r\n        word_list[i] = word_list[i][:-1] + word_list[i][-1].upper()\r\n    # print(word_list)\r\n    return ' '.join(word_list)\r\n\r\n\r","votes":85964.064},{"text":"\r\n    # split the string into words\r\n    words = str1.split()\r\n    # loop through all the words\r\n    for i in range(len(words)):\r\n        # capitalize the first letter\r\n        words[i] = words[i][0].upper() + words[i][1:]\r\n        # capitalize the last letter\r\n        words[i] = words[i][:-1] + words[i][-1].upper()\r\n    # join all the words\r\n    return \" \".join(words)\r\n\r\n\r","votes":125519.716},{"text":"\r\n\r\n    str2 = \"\"\r\n    for i in range(len(str1)):\r\n        if i == 0 or i == (len(str1)-1):\r\n            str2 += str1[i].upper()\r\n        elif str1[i-1] == ' ' or str1[i-1] == '.':\r\n            str2 += str1[i].upper()\r\n        else:\r\n            str2 += str1[i]\r\n    return str2\r\n\r\n\r","votes":126367.112},{"text":"\r\n    return \" \".join([i[0].upper() + i[1:-1].lower() + i[-1].upper() for i in str1.split()])\r\n\r\n\r","votes":129961.384},{"text":"\r\n    # Code\r\n    str2 = str1.split()\r\n    for i in range(len(str2)):\r\n        str2[i] = str2[i][0].upper() + str2[i][1:-1].lower() + str2[i][-1].upper()\r\n    return ' '.join(str2)\r\n\r\n\r","votes":135225.712},{"text":"\r\n    str1_list = str1.split()\r\n    str1_list_cap = []\r\n    for word in str1_list:\r\n        word_list = list(word)\r\n        word_list[0] = word_list[0].upper()\r\n        word_list[-1] = word_list[-1].upper()\r\n        word = ''.join(word_list)\r\n        str1_list_cap.append(word)\r\n    str1_cap = ' '.join(str1_list_cap)\r\n    return str1_cap\r\n\r\n\r\nif __name__ == '__main__':\r\n    string1 = 'hello world'\r\n    print(capitalize_first_last_letters(string1))\r\n\r\n    string2 = 'Hello World'\r\n    print(capitalize_first_last_letters(string2))\r\n\r\n    string3 = 'hello world'\r\n    print(capitalize_first_last_letters(string3))\r\n\r\n    string4 = 'hello world'\r\n    print(capitalize_first_last_letters(string4))\r\n\r\n    string5 = 'Hello World'\r\n    print(capitalize_first_last_letters(string5))\r\n\r\n    string6 = 'Hello World'\r\n    print(capitalize_first_last_letters(string6))\r\n\r\n    string7 = 'hello world'\r\n    print(capitalize_first_last_letters(string7))\r\n\r\n    string8 = 'hello world'\r\n    print(capitalize_first_last_letters(string8))\r\n\r\n    string9 = 'hello world'\r\n    print(capitalize_first_last_letters(string9))\r\n\r\n    string10 = 'hello world'\r\n    print(capitalize_first_last_letters(string10))\r\n\r\n    string11 = 'Hello World'\r\n    print","votes":148555.464},{"text":"\r\n    str2 = \"\"\r\n    for x in range(0, len(str1)):\r\n        if x == 0:\r\n            str2 = str2 + str1[x].upper()\r\n        elif x == len(str1) - 1:\r\n            str2 = str2 + str1[x].upper()\r\n        else:\r\n            str2 = str2 + str1[x]\r\n    return str2\r\n\r\n\r","votes":152592.804},{"text":"\r\n    word_list = str1.split()\r\n    for i in range(len(word_list)):\r\n        word_list[i] = word_list[i][0].upper() + word_list[i][1:-1].lower() + word_list[i][-1].upper()\r\n    return ' '.join(word_list)\r\n\r\n\r","votes":168868.012},{"text":"\r\n\r\n    # Split string into list of words\r\n    words = str1.split()\r\n\r\n    # Create new empty list to store capitalized words\r\n    capitalized_words = []\r\n\r\n    # Iterate over the list of words\r\n    for word in words:\r\n\r\n        # Capitalize first and last letter of each word\r\n        capitalized_words.append(word[0].upper() + word[1:-1].lower() + word[-1].upper())\r\n\r\n    # Join the list of words\r\n    str2 = ' '.join(capitalized_words)\r\n\r\n    return str2\r\n\r\n\r\n# Driver code\r\nstr1 = \"hello world\"\r\nprint(capitalize_first_last_letters(str1))\r\n# Output : HeLlO WoRlD\r\n\r\n\r\n# 2. Write a Python function to remove all special characters from a given string.\r\n\r","votes":179881.188},{"text":"\r\n    new_str = \"\"\r\n    for x in range(len(str1)):\r\n        if (x == 0) or (x == len(str1)-1):\r\n            new_str += str1[x].upper()\r\n        else:\r\n            new_str += str1[x]\r\n    return new_str\r\n\r","votes":180513.244},{"text":"\r\n    \r\n    str_list = list(str1)\r\n    str_list[0] = str_list[0].upper()\r\n    for i in range(1, len(str_list)):\r\n        if str_list[i] == ' ':\r\n            str_list[i+1] = str_list[i+1].upper()\r\n    str_list[len(str_list)-1] = str_list[len(str_list)-1].upper()\r\n    \r\n    return \"\".join(str_list)\r\n\r\nprint (capitalize_first_last_letters(\"hello world\"))\r\nprint (capitalize_first_last_letters(\"how are you\"))\r\nprint (capitalize_first_last_letters(\"hello world and peace\"))\r\nprint (capitalize_first_last_letters(\"hello world and peace\"))\r\nprint (capitalize_first_last_letters(\"hello world and peace\"))\r\nprint (capitalize_first_last_letters(\"hello world and peace\"))","votes":204073.42},{"text":"\r\n    str_list = str1.split()\r\n    str_list[0] = str_list[0].capitalize()\r\n    str_list[-1] = str_list[-1].capitalize()\r\n    return ' '.join(str_list)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    #Code starts here\r\n    str1=str1.split()\r\n\r\n    str1=[x.capitalize() for x in str1]\r\n\r\n    str1=' '.join(str1)\r\n\r\n    return str1\r\n\r\n#print","votes":null},{"text":"\r\n    import re\r\n    str1 = re.sub(r\"(?<=[a-z])(?=[A-Z])\", \" \", str1)\r\n    str1 = str1.split()\r\n    for i in range(len(str1)):\r\n        str1[i] = str1[i][0].upper() + str1[i][1:]\r\n    str1 = \" \".join(str1)\r\n    str1 = re.sub(r\"(?<=[A-Z])(?=[a-z])\", \" \", str1)\r\n    str1 = str1.split()\r\n    for i in range(len(str1)):\r\n        str1[i] = str1[i][0].upper() + str1[i][1:]\r\n    str1 = \" \".join(str1)\r\n    return str1\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    capitalize_first_letters = str1.title()\r\n    split_words = capitalize_first_letters.split()\r\n    last_letters = [word[-1] for word in split_words]\r\n    capitalize_last_letters = \" \".join(word[:-1] + last_letters for word in split_words)\r\n    print(capitalize_last_letters)\r\n\r\n\r\ncapitalize_first_last_letters(\"i am a student\")\r\ncapitalize_first_last_letters(\"i am a student. i live in london\")\r\ncapitalize_first_last_letters(\"i am a student. i live in london. i have a dog\")\r\ncapitalize_first_last_letters(\"i am a student. i live in london. i have a dog. i love my dog\")\r\ncapitalize_first_last_letters(\"i am a student. i live in london. i have a dog. i love my dog. i have a cat\")\r\ncapitalize_first_last_letters(\"i am a student. i live in london. i have a dog. i love my dog. i have a cat. i love my cat\")\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    str1 = [x.capitalize() for x in str1]\r\n    str1 = ' '.join(str1)\r\n    str1 = str1[0].capitalize() + str1[1:]\r\n    print(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    str1 = [word[0].upper()+word[1:].lower() for word in str1]\r\n    str1 = ' '.join(str1)\r\n    return str1\r\n\r\n\r","votes":null},{"text":"\r\n    new_string = ''\r\n    str1 = str1.split()\r\n    new_string = str1[0].capitalize()\r\n    str1 = ' '.join(str1)\r\n    str1 = str1.split()\r\n    new_string = new_string+' '+str1[-1].capitalize()\r\n    return new_string\r\n\r\n\r\n# Driver Function\r\nprint(capitalize_first_last_letters(\"Rahul is a good boy\"))\r\n\r\n# Expected Output:\r\n# R A h u l i s a g o o d b o y\r\n\r\n# Sample Input:\r\n# \"Rahul is a good boy\"\r\n\r\n# Sample Output:\r\n# R A h u l i s a g o o d b o y\r\n\r\n# Sample Input:\r\n# \"hello world\"\r\n\r\n# Sample Output:\r\n# H e l l o w o r l d\r\n\r\n# Sample Input:\r\n# \"hello worlds\"\r\n\r\n# Sample Output:\r\n# H e l l o w o r l d s\r\n\r\n# Sample Input:\r\n# \"hello worlds\"\r\n\r\n# Sample Output:\r\n# H e l l o w o r l d s\r\n\r\n# Sample Input:\r\n# \"hello world\"\r\n\r\n# Sample Output:\r\n# H e l l o w o r l d\r\n\r\n# Sample Input:\r\n# \"hello worlds\"\r\n\r\n# Sample Output:\r\n# H e l l o w o r l d s\r\n\r\n# Sample Input:\r\n# \"hello world\"\r\n\r\n# Sample Output:\r\n# H e l l o w o r l d\r\n\r\n# Sample Input:\r\n# \"hello worlds\"\r\n\r\n# Sample Output:\r\n# H e l l o w o r l d s\r\n\r\n# Sample Input:\r\n# \"hello world\"\r\n\r\n# Sample Output:\r\n# H e l l o w o ","votes":null},{"text":"\r\n\r\n    str2 = str1.split()\r\n    for i in range(len(str2)):\r\n        str2[i] = str2[i][0].upper() + str2[i][1:].lower()\r\n        \r\n    print(\" \".join(str2))\r\n    \r\n\r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    new_str = ''\r\n    for word in words:\r\n        new_str += word[0].upper() + word[1:].lower() + ' '\r\n    return new_str.strip()\r\n\r\n\r","votes":null},{"text":"\r\n    words=str1.split()\r\n    string=''\r\n    for i in range(0,len(words)):\r\n        if i==0:\r\n            string=string+words[i][0].upper()+words[i][1:].lower()\r\n        elif i==len(words)-1:\r\n            string=string+words[i][0].upper()+words[i][1:].lower()\r\n        else:\r\n            string=string+words[i].lower()\r\n        string=string+' '\r\n    return string\r\n\r\n\r\n# Driver Code\r\nstr1=\"i love python","votes":null},{"text":"\r\n    list1 = str1.split(\" \")\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][0].upper() + list1[i][1:])\r\n    return \" \".join(list2)\r\n\r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    capital_word = []\r\n    for i in words:\r\n        capital_word.append(i[0].upper() + i[1:].lower())\r\n    return \" \".join(capital_word)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    str1 = str1.split()\r\n    str2 = \"\"\r\n    for i in range(len(str1)):\r\n        if i == 0:\r\n            str2 = str2 + str1[i][0].upper() + str1[i][1:].lower()\r\n        elif i == len(str1) - 1:\r\n            str2 = str2 + str1[i].upper()\r\n        else:\r\n            str2 += str1[i] + \" \"\r\n    return str2\r\n\r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    words[0] = words[0].capitalize()\r\n    words[-1] = words[-1].capitalize()\r\n    return \" \".join(words)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # code here\r\n    new_str = str1.split()\r\n    new_str = new_str[0].capitalize()\r\n    new_str += \" \" + new_str[1].capitalize()\r\n    for i in range(2, len(new_str)):\r\n        new_str += \" \" + new_str[i].lower()\r\n\r\n    return new_str\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    return str1.title()\r\n\r\n\r","votes":null},{"text":"\r\n    # Capitalize the first and last letters of each word\r\n    str2 = str1.title()\r\n    # Capitalize the first and last letters of each word\r\n    str3 = str2.title()\r\n    # Capitalize the first and last letters of each word\r\n    str4 = str3.title()\r\n    # Capitalize the first and last letters of each word\r\n    str5 = str4.title()\r\n    # Capitalize the first and last letters of each word\r\n    str6 = str5.title()\r\n    # Capitalize the first and last letters of each word\r\n    str7 = str6.title()\r\n    # Capitalize the first and last letters of each word\r\n    str8 = str7.title()\r\n\r\n    # Return the capitalized string\r\n    return str8\r\n\r\n\r","votes":null},{"text":"\r\n    return \" \".join([x[0].upper() + x[1:].lower() for x in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n    word_list = str1.split()\r\n    for index, word in enumerate(word_list):\r\n        if index == 0:\r\n            word_list[index] = word_list[index][0].upper() + word_list[index][1:]\r\n        if index == len(word_list)-1:\r\n            word_list[index] = word_list[index][0].upper() + word_list[index][1:]\r\n        else:\r\n            word_list[index] = word_list[index].capitalize()\r\n    return \" \".join(word_list)\r\n\r\n\r","votes":null},{"text":"\r\n    str1_list = str1.split()\r\n    for i in range(len(str1_list)):\r\n        str1_list[i] = str1_list[i].capitalize()\r\n    print(\" \".join(str1_list))\r\n    return \" \".join(str1_list)\r\n\r\n\r","votes":null},{"text":"\r\n    #Your code here\r\n    str2 = str1.split()\r\n    str3 = []\r\n    for i in str2:\r\n        i = i.capitalize()\r\n        str3.append(i)\r\n    str4 = ' '.join(str3)\r\n    return str4\r\n\r\n\r","votes":null},{"text":"\r\n    str2 = \"\"\r\n    for i in str1.split():\r\n        str2 = str2 + i[0].upper() + i[1:].lower() + \" \"\r\n    return str2.strip()\r\n\r\n\r\n# Code execution starts here\r\nprint(capitalize_first_last_letters(\"python is fun\"))\r\nprint(capitalize_first_last_letters(\"Python is Fun\"))\r\nprint(capitalize_first_last_letters(\"python is FUN\"))\r\nprint(capitalize_first_last_letters(\"PYTHON IS FUN\"))\r\nprint(capitalize_first_last_letters(\"python is fUn\"))\r\nprint(capitalize_first_last_letters(\"python is fUn\"))\r\nprint(capitalize_first_last_letters(\"python is fun\"))\r\nprint(capitalize_first_last_letters(\"python is fun","votes":null},{"text":"\r\n    str2 = \"\"\r\n    for i in range(len(str1)):\r\n        if i == 0:\r\n            str2 += str1[i].upper()\r\n        elif str1[i] == \" \":\r\n            str2 += str1[i]\r\n            if i+","votes":null},{"text":"\r\n    return str1.title()\r\n\r\n\r","votes":null},{"text":"\r\n    str_list = str1.split()\r\n    capitalize_list = [x.capitalize() for x in str_list]\r\n    return \" \".join(capitalize_list)\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = \" \".join(str1.split())\r\n    words = str1.split()\r\n    for i in range(len(words)):\r\n        if i == 0:\r\n            words[i] = words[i][0].upper() + words[i][1:]\r\n        elif i == len(words) - 1:\r\n            words[i] = words[i][0].upper() + words[i][1:]\r\n        else:\r\n            words[i] = words[i][0].upper() + words[i][1:]\r\n    str1 = \" \".join(words)\r\n    return str1\r\n\r\n\r\nprint(capitalize_first_last_letters(\"hello world\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you doing\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you doing this fine day\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you doing this fine day my friend\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you doing this fine day my friend\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you doing this fine day my friend\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you doing this fine day my friend\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you doing this fine day my friend\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you doing this fine day my friend\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you doing this fine day my friend\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you doing this fine day my friend\"))\r\nprint(capitalize_first_last_letters(\"hello worl","votes":null},{"text":"\r\n\r\n    temp_list = []\r\n    for word in str1.split():\r\n        if len(word) > 1:\r\n            temp = word[0].upper() + word[1:].lower()\r\n\r\n        else:\r\n            temp = word.upper()\r\n        temp_list.append(temp)\r\n    return \" \".join(temp_list)\r\n\r\n\r\n# string = \"hello world\"\r\n# print(capitalize_first_last_letters(string))\r\n\r","votes":null},{"text":"\r\n    res = \"\"\r\n    for i in range(len(str1)):\r\n        if i == 0:\r\n            res += str1[0].upper()\r\n            res += str1[1:]\r\n        elif str1[i] == \" \":\r\n            res += \" \"\r\n            res += str1[i + 1].upper()\r\n            res += str1[i + 2:]\r\n        elif i == len(str1) - 1:\r\n            res += str1[i].upper()\r\n            res += str1[i + 1:]\r\n        else:\r\n            res += str1[i]\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    str1_list = str1.split()\r\n    str2 = ''\r\n    for i in str1_list:\r\n        str2 += i[0].upper() + i[1:] + ' '\r\n    return str2.strip()\r\n\r\n\r\nprint(capitalize_first_last_letters(\"hi how are you\"))\r\n\r\n\r","votes":null},{"text":"\r\n    return \" \".join([i[0].upper() + i[1:].lower() for i in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    new_string = \"\"\r\n\r\n    for word in str1.split():\r\n        word = word.lower()\r\n        \r\n        new_string += word[0].upper() + word[1:] + \" \"\r\n        \r\n    return new_string\r\n    \r\n\r\nif __name__ == '__main__':\r\n    string = input()\r\n\r\n    result = capitalize_first_last_letters(string)\r\n    print(result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # Complete the function\r\n    # 'str1' parameter will pass a string to the function\r\n    \r\n    words = str1.split()\r\n    new_str = ''\r\n    for i in range(len(words)):\r\n        new_word = words[i][0].upper() + words[i][1:].lower()\r\n        new_str += ' ' + new_word\r\n    return new_str\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    #print capitalize_first_last_letters(\"hello world\")\r\n    #print capitalize_first_last_letters(\"hello World\")\r\n    #print capitalize_first_last_letters(\"hello worlds\")\r\n    #print capitalize_first_last_letters(\"hello worlds\")\r\n    #print capitalize_first_last_letters(\"hello worlds\")\r\n    #print capitalize_first_last_letters(\"hello worlds\")\r\n    #print capitalize_first_last_letters(\"hello worlds\")\r\n    print capitalize_first_last_letters(\"hello worlds\")\r\n\r\n#Reference: w3resource","votes":null},{"text":"\r\n    l=str1.split()\r\n    n=[]\r\n    for i in l:\r\n        if len(i)>=2:\r\n            n.append(i[0].upper()+i[1:].lower())\r\n        else: n.append(i.upper())\r\n    return ' '.join(n)\r\n\r\n\r","votes":null},{"text":"\r\n    a = str1.split()\r\n    for i in range(len(a)):\r\n        a[i] = a[i][0].upper() + a[i][1:]\r\n    return \" \".join(a)\r\nprint(capitalize_first_last_letters(\"i am the batman\"))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    words = str1.split(\" \")\r\n    new_words = []\r\n    for word in words:\r\n        new_words.append(word[0].upper() + word[1:].lower())\r\n\r\n    return \" \".join(new_words)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    str1 = input()\r\n    result = capitalize_first_last_letters(str1)\r\n    print(result)\r\n\r\n# Python program to capitalize first and last\r\n# letters of each word of a given string.\r\n\r\n# Sample Input:\r\n# hello world\r\n\r\n# Sample Output:\r\n# Hello World\r\n\r\n# Time Complexity: O(n)\r\n# Auxiliary Space: O(n)\r\n\r\n# Hints:\r\n# Use string.split() to split string on basis of space.\r\n# Use string.upper() and string.lower() to convert\r\n# first and last letters to upper and lower case\r\n# respectively.\r\n\r\n# Solution:\r\n\r\n# Function to capitalize first and last letters of each word of a given string.\r","votes":null},{"text":"\r\n    list1 = list(str1.split())\r\n    for i in range(0,len(list1)):\r\n        list1[i] = list1[i][0].upper() + list1[i][1:].lower()\r\n    str1 = ' '.join(list1)\r\n    return str1\r\n\r","votes":null},{"text":"\r\n    \r\n    str2 = \"\"\r\n    word = \"\"\r\n    temp = \"\"\r\n    for i in range(len(str1)):\r\n        if str1[i] == \" \":\r\n            str2 += word + \" \"\r\n            word = \"\"\r\n        else:\r\n            word += str1[i]\r\n    str2 += word\r\n    \r\n    list1 = str2.split()\r\n    for i in range(len(list1)):\r\n        temp += list1[i][0].upper() + list1[i][1:] + \" \"\r\n    return temp[:-1]\r\n\r\n\r\n#print(capitalize_first_last_letters(\"hello world\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing good\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing good sir\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing good sir\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing good sir\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing good sir\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing good sir\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing good sir\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing good sir\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing good sir\"))\r\n#print(capitalize_first_last_letters(\"hello world how are you doing good sir\"))\r\n#print(capitalize_first","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    str1 = [word.capitalize() for word in str1]\r\n    return ' '.join(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    for i in range(0, len(str1)):\r\n        str1[i] = str1[i][0].upper() + str1[i][1:].lower()\r\n    return \" \".join(str1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    list1=list(str1.lower().split(\" \"))\r\n    for i in range(len(list1)):\r\n        list1[i]=list1[i][0].upper()+list1[i][1:len(list1[i])-1].lower()+list1[i][len(list1[i])-1].upper()\r\n    str1=\" \".join(list1)\r\n    return str1\r\n\r\nstr1 = input(\"Enter a string: \")\r\nprint(capitalize_first_last_letters(str1))\r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    result = ''\r\n    for word in words:\r\n        result += word[0].upper() + word[1:].lower() + ' '\r\n    return result.strip()\r\n\r","votes":null},{"text":"\r\n    str_list = str1.split()\r\n    capitalized_str = ''\r\n    for word in str_list:\r\n        capitalized_word = word[0].upper() + word[1:].lower()\r\n        capitalized_str += f'{capitalized_word} '\r\n    return capitalized_str\r\n\r\n\r","votes":null},{"text":"\r\n    word = str1.split()\r\n    string = \"\"\r\n    for i in range(len(word)):\r\n        word[i] = word[i].capitalize()\r\n        string += word[i] + \" \"\r\n    string = string[:-1]\r\n    return string\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    str1 = [x.capitalize() for x in str1]\r\n    str1 = ' '.join(str1)\r\n    return str1\r\n\r\n\r","votes":null},{"text":"\r\n    str2 = \"\"\r\n    for i in range(len(str1)):\r\n        if i == ","votes":null},{"text":"\r\n    words = str1.split()\r\n    for i in range(len(words)):\r\n        if len(words[i]) > 0:\r\n            words[i] = words[i][0].upper() + words[i][1:].lower()\r\n    capitalized_words = ' '.join(words)\r\n    return capitalized_words\r\n\r\n\r\n# Examples\r\nprint(capitalize_first_last_letters(\"this is a test string\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.\"))\r\n# expected output: This Is A Test String\r\nprint(capitalize_first_last_letters(\"this is a test string.","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    for i in range(len(str1)):\r\n        str1[i] = str1[i][0].upper() + str1[i][1:].lower()\r\n    return ' '.join(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    words = str1.split(\" \")\r\n    new_str = \"\"\r\n    for i in range(len(words)):\r\n        new_str += words[i][0].upper() + words[i][1:].lower() + \" \"\r\n    return new_str\r\n\r\n\r\nprint(capitalize_first_last_letters(\"hello world\"))\r\nprint(capitalize_first_last_letters(\"hello world this is a test\"))\r\nprint(capitalize_first_last_letters(\"HELLO WORLD\"))\r\nprint(capitalize_first_last_letters(\"HELLO WORLD THIS IS A TEST\"))\r\nprint(capitalize_first_last_letters(\"hello world this is a test hello world\"))\r\nprint(capitalize_first_last_letters(\"HELLO WORLD THIS IS A TEST HELLO WORLD\"))\r\nprint(capitalize_first_last_letters(\"\"))\r\nprint(capitalize_first_last_letters(\" \"))\r\nprint(capitalize_first_last_letters(\"  \"))\r\nprint(capitalize_first_last_letters(\"hello world this is a test hello world hello world this is a test\"))\r\nprint(capitalize_first_last_letters(\"HELLO WORLD THIS IS A TEST HELLO WORLD HELLO WORLD THIS IS A TEST\"))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    \r\n    capitalized = \"\"\r\n    words = str1.split()\r\n    for i in words:\r\n        capitalized += i[0].upper() + i[1:].lower() + ' '\r\n    return capitalized\r\n\r\n\r\n\r\n#str1 = \"hello world\"\r\nstr1 = \"hello how are you\"\r\nprint(capitalize_first_last_letters(str1))\r\n    \r\n\r\n# Output:\r\n# Hello World\r\n\r\n\r\n#Expected Output:\r\n# Hello How Are You\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n\r\n    # Solution\r\n    return str1.split()[0][0].upper() + str1.split()[0][1:]+' '+str1.split()[-1][0].upper() + str1.split()[-1][1:]+' '+str1[2:-1]\r\n\r\n    # Alternative Solution\r\n    return str1.title()[0].upper() + str1.title()[1:-1]\r\n\r\n    # Alternative Solution\r\n    return str1.title()\r\n\r\n\r","votes":null},{"text":"\r\n    word_list = str1.split()\r\n    capital_word_list = []\r\n    for i in word_list:\r\n        a = i[0].upper()+i[1:].lower()\r\n        capital_word_list.append(a)\r\n    return \" \".join(capital_word_list)\r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    for i in range(len(words)):\r\n        if(len(words[i]) > 1):\r\n            words[i] = words[i][0].upper() + words[i][1:].lower()\r\n        else:\r\n            words[i] = words[i].upper()\r\n    str1 = \" \".join(words)\r\n    return str1\r\n\r\n\r","votes":null},{"text":"\r\n    new_string=\"\"\r\n    temp_string=str1.split()\r\n    for word in temp_string:\r\n        word = word[0].upper() + word[1:].lower()\r\n        new_string=new_string+\" \"+word\r\n    return new_string\r\n\r","votes":null},{"text":"\r\n    word = list(str1.split(' '))\r\n    for i, j in enumerate(word):\r\n        word[i] = j[0].upper() + j[1:].lower()\r\n    return ' '.join(word)\r\n\r\n\r\nstr1 = \"this is a TEST\"\r\nprint(capitalize_first_last_letters(str1))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # User Code Starts\r\n    a, b = str1.split()\r\n    first = a[0].upper() + a[1:]\r\n    last = b[0].upper() + b[1:]\r\n    print(first + \" \" + last)\r\n    # User Code Ends\r\n\r\n\r","votes":null},{"text":"\r\n    str2 = \"\"\r\n    str3 = \"\"\r\n    for i in str1:\r\n        if i == \" \":\r\n            str2 += i\r\n            str3 = str3 + i\r\n        else:\r\n            str2 += i.upper()\r\n    str3 = str3.upper()\r\n    return str2 + str3\r\n\r\n\r\nstr1 = input(\"Enter your name: \")\r\nprint(capitalize_first_last_letters(str1))\r\n\r\n\r\n# OUTPUT\r\n# Enter your name: akshat kumar\r\n# Akshat Kumar\r\n\r\n# INPUT 1\r\n# Enter your name: akshat kumar\r\n\r\n# OUTPUT 1\r\n# Akshat Kumar\r\n\r\n# INPUT 2\r\n# Enter your name: akshat\r\n\r\n# OUTPUT 2\r\n# Akshat\r\n\r\n# INPUT 3\r\n# Enter your name: \r\n\r\n# OUTPUT 3\r\n# None\r\n\r\n# INPUT 4\r\n# Enter your name: Akshat kumar\r\n\r\n# OUTPUT 4\r\n# Akshat Kumar\r\n\r\n# INPUT 5\r\n# Enter your name: Akshat\r\n\r\n# OUTPUT 5\r\n# Akshat\r\n\r\n# INPUT 6\r\n# Enter your name: \r\n\r\n# OUTPUT 6\r\n# None\r\n\r\n# INPUT 7\r\n# Enter your name: akshat kumar\r\n\r\n# OUTPUT 7\r\n# Akshat Kumar\r\n\r\n# INPUT 8\r\n# Enter your name: akshat\r\n\r\n# OUTPUT 8\r\n# Akshat\r\n\r\n# INPUT 9\r\n# Enter your name: \r\n\r\n# OUTPUT 9\r\n# None\r\n\r\n# INPUT 10\r\n# Enter your name: Akshat kumar\r\n\r","votes":null},{"text":"\r\n    return str1.title()\r\n\r\n# Capitalize first and last letters of each word of a given string\r\nprint(capitalize_first_last_letters(\"hello world\"))\r\n\r","votes":null},{"text":"\r\n    lst = str1.split()\r\n    i = 0\r\n    for i in range(len(lst)):\r\n        lst[i] = lst[i][0].upper() + lst[i][1:len(lst[i])].lower()\r\n        if i == (len(lst) - 1):\r\n            lst[i] = lst[i][0].upper() + lst[i][1:len(lst[i])].lower()\r\n        else:\r\n            lst[i] = lst[i][0].upper() + lst[i][1:len(lst[i])].lower() + ' '\r\n    str1 = ' '.join(lst)\r\n    return str1\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(capitalize_first_last_letters('hello world'))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert capitalize_first_last_letters('hello world') == 'Hello World'\r\n    assert capitalize_first_last_letters('hello WORLD') == 'Hello World'\r\n    assert capitalize_first_last_letters('hello world!') == 'Hello World!'\r\n    assert capitalize_first_last_letters('hello WORLD!') == 'Hello World!'\r\n    assert capitalize_first_last_letters('hello world!!!') == 'Hello World!!!',\r\n    assert capitalize_first_last_letters('hello WORLD!!!') == 'Hello World!!!',\r\n    assert capitalize_first_last_letters('hello hello world') == 'Hello Hello World'\r\n    assert capitalize_first_last_letters('hello HELLO world') == 'Hello HELLO World'\r\n    assert capitalize_first_last_letters('hello HELLO WORLD') == 'Hello HELLO World'\r\n    assert capitalize_first_last_letters('HELLO HEL","votes":null},{"text":"\r\n    str1_list = str1.split()\r\n    for i in range(0, len(str1_list)):\r\n        str1_list[i] = str1_list[i][0].upper() + str1_list[i][1:]\r\n    str1_list[len(str1_list)-1] = str1_list[len(str1_list)-1][0].upper() + str1_list[len(str1_list)-1][1:]\r\n    return \" \".join(str1_list)\r\n\r\n\r\nprint(capitalize_first_last_letters(\"hello world\"))\r\nprint(capitalize_first_last_letters(\"hello world bye\"))\r\nprint(capitalize_first_last_letters(\"hello world bye","votes":null},{"text":"\r\n    str1 = str1.split()\r\n    str1 = [x[0].upper() + x[1:].lower() for x in str1]\r\n    str1 = ' '.join(str1)\r\n    return str1\r\n\r\n\r","votes":null},{"text":"\r\n    str2 = str1.split()\r\n    str3 = \"\"\r\n    for i in str2:\r\n        str3 += i[0].upper() + i[1:].lower() + \" \"\r\n    str3 = str3[:-1]\r\n    return str3\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    new_str = \"\"\r\n    lis = str1.split()\r\n    for i in range(len(lis)):\r\n        new_str += lis[i][0].upper() + lis[i][1:] + \" \"\r\n    return new_str\r\n\r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    return \" \".join([words[0].capitalize() + \" \" + words[len(words) - 1].capitalize()] + [word.capitalize() for word in words[1:-1]])\r\n\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert capitalize_first_last_letters(\"hello world\") == \"Hello World\",\r\n    assert capitalize_first_last_letters(\"python is cool\") == \"Python Is Cool\",\r\n    assert capitalize_first_last_letters(\"codewars is the best\") == \"Codewars Is The Best\",\r\n    assert capitalize_first_last_letters(\"a short sentence\") == \"A Short Sentence\",\r\n    assert capitalize_first_last_letters(\"a very very long sentence\") == \"A Very Very Long Sentence\",\r\n    assert capitalize_first_last_letters(\"a\") == \"A\",\r\n    print(\"You're a stud ( \u0361\u00b0 \u035c\u0296 \u0361\u00b0)\")\r\n\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    str2 = \"\"\r\n    for word in str1.split():\r\n        word = word[0].upper() + word[1:].lower()\r\n        str2 += word + \" \"\r\n    \r\n    return str2[:-1]\r\n\r\n\r\nif __name__ == '__","votes":null},{"text":"\r\n\r\n    words = str1.split()\r\n    capitalized_words = []\r\n\r\n    for word in words:\r\n        first_letter = word[0].upper()\r\n        rest_letters = word[1:]\r\n        last_letter = rest_letters[-1]\r\n        rest_letters = rest_letters[:-1]\r\n        capitalized_word = first_letter + rest_letters + last_letter\r\n        capitalized_words.append(capitalized_word)\r\n\r\n    return ' '.join(capitalized_words)\r\n\r\n\r\nif __name__ == '__main__':\r\n    str1 = input()\r\n    result = capitalize_first_last_letters(str1)\r\n    print(result)\r\n\r\n\"\"\"\r\nSample Input\r\n\r\npython python python python python\r\n\r\nSample Output\r\n\r\nPython Python Python Python Python\r\n\r\nExplanation\r\n\r\nWe need to capitalize first and last letters of each word of the string.\r\nThe first word is Python, so we capitalize the first and last letters which are p and n.\r\nThe second word is python, so we capitalize the first and last letters which are y and n.\r\nThe third word is python, so we capitalize the first and last letters which are y and n.\r\nThe fourth word is python, so we capitalize the first and last letters which are y and n.\r\nThe last word is python, so we capitalize the first and last letters which are y and n.\r\n\r\nSo the string after capitalizing first and last letters of each word of the string is\r\nPython Python Python Python Python\r\n\"\"\"\r\n","votes":null},{"text":"\r\n\r\n    new_str = str1.split()\r\n    for i in range(len(new_str)):\r\n        new_str[i] = new_str[i][0].upper() + new_str[i][1:].lower()\r\n    return \" \".join(new_str)\r\n\r\n\r","votes":null},{"text":"\r\n    words = str1.split()\r\n    capitalized_words = []\r\n    for word in words:\r\n        capitalized_words.append(word[0].upper() + word[1:].lower())\r\n    capitalized_sentence = \" \".join(capitalized_words)\r\n    return capitalized_sentence\r\n\r\n\r\nprint(capitalize_first_last_letters(\"hello world\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you\"))\r\nprint(capitalize_first_last_letters(\"HELLO WORLD HOW ARE YOU\"))\r\nprint(capitalize_first_last_letters(\"hello world how are you today\"))\r\nprint(capitalize_first_last_letters(\"HELLO WORLD HOW ARE YOU TODAY\"))\r\n\r\n# Output\r\n# Hello World\r\n# Hello World How Are You\r\n# Hello World How Are You\r\n# Hello World How Are You Today\r\n# Hello World How Are You Today\r\n\r\n\"\"\"\r\nWrite a python function to capitalize first and last letters of each word of a given string.\r\n\r\nInput Format\r\n\r\nA string\r\n\r\nOutput Format\r\n\r\nCapitalize the first and last letters of each word in the string\r\n\r\nSample Input\r\n\r\nhello world\r\nSample Output\r\n\r\nHello World\r\nExplanation\r\n\r\nWe capitalize the first and last letters of each word\r\n\"\"\"\r\n\r\n\r\n# Solution\r","votes":null},{"text":"\r\n\r\n    # Code Strategy\r\n    # 1. Split the given string into words\r\n    # 2. Capitalize the first letter of each word\r\n    # 3. Join the words back\r\n    # 4. Capitalize the last letter of the string\r\n\r\n    # Code Implementation\r\n    words = str1.split()\r\n    for i in range(len(words)):\r\n        words[i] = words[i][0].upper() + words[i][1:]\r\n    return ' '.join(words) + words[-1].upper()\r\n\r\n\r\nif __name__ == '__main__':\r\n    str1 = 'python is a scripting language'\r\n    print(capitalize_first_last_letters(str1))\r\n\r\n\"\"\"\r\nOutput :\r\npython Is a Scripting Language\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    return ' '.join([word.capitalize() for word in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n    str_list = str1.split()\r\n    str_list = [word.capitalize() for word in str_list]\r\n    str1 = ' '.join(str_list)\r\n    return str1\r\n\r\n\r\n# Driver code\r\nstr1 = 'my name is akash'\r\nprint(capitalize_first_last_letters(str1))\r\n\r\n# Output\r\n# My Name Is Akash\r\n\r\n\r\n# Using .title()\r","votes":null},{"text":"\r\n    return ' '.join([word[0].upper() + word[1:].lower() for word in str1.split()])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    str1 = str1.split()\r\n    str_capitalized = []\r\n\r\n    for i in str1:\r\n        i = i[0].upper() + i[1:].lower()\r\n        str_capitalized.append(i)\r\n\r\n    return \" \".join(str_capitalized)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #Capitalize first and last letters of each word of a given string.\r\n\r\n    #code\r\n    str1.split()\r\n    str1=str1.capitalize()\r\n    str1 = str1[0] + str1[1:].lower()\r\n    print(str1)\r\n    #split the string by space\r\n    #Capitalize first letter of each word\r\n    #Capitalize last letter of each word\r\n    #Join the string with space\r\n\r\n    #print the string\r\n\r\n    #Return the string\r\n    return str1\r\n\r\nstring = \"python programming is fun\"\r\nprint(capitalize_first_last_letters(string))\r\n\r\n#Output:\r\n#Python Programming is Fun\r\n\r\n#Expected Output\r\n#Python Programming is Fun\r\n\r\n#Solution\r\n\r","votes":null},{"text":"\r\n    tokens = str1.split()\r\n    result = ''\r\n    for i in range(len(tokens)):\r\n        token = tokens[i]\r\n        if i == 0 or i == len(tokens) - 1:\r\n            result += token.capitalize()\r\n        else:\r\n            result += token\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    l = str1.split()\r\n    new_string = \"\"\r\n    for i in range(len(l)):\r\n        if i==0:\r\n            new_string += l[i][0].upper() + l[i][1:].lower()\r\n        elif i==len(l)-1:\r\n            new_string += l[i][0].upper() + l[i][1:].lower()\r\n        else:\r\n            new_string += \" \" + l[i][0].upper() + l[i][1:].lower()\r\n    return new_string\r","votes":null},{"text":"\r\n    str2 = str1.split(\" \")\r\n    str3 = \" \".join(x.capitalize() for x in str2)\r\n    return str3\r\n\r\n\r","votes":null},{"text":"\r\n    # capitalize_first_last_letters(\"hello world\")\r\n    string = str1\r\n    string_to_list = string.split()\r\n    new_string = ''\r\n    for word in string_to_list:\r\n        new_word = word[0].upper() + word[1:-1].lower() + word[-1].upper()\r\n        new_string += new_word + ' '\r\n\r\n    return new_string\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    str_list = str1.split()\r\n    capitalized_str_list = []\r\n    for word in str_list:\r\n        if len(word) > 1:\r\n            capitalized_str_list.append(word[0].upper() + word[1:].lower())\r\n        else:\r\n            capitalized_str_list.append(word.upper())\r\n    return \" \".join(capitalized_str_list)\r\n\r\n\r","votes":null},{"text":"\r\n    return str1.title()\r\n\r\n\r\nprint(capitalize_first_last_letters(\"python\"))\r\n\r\n\r","votes":null},{"text":"\r\n    str2 = \" \".join([x.capitalize() for x in str1.split()])\r\n    return str2\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = str1.split()\r\n    list1[0] = list1[0][0].upper() + list1[0][1:]\r\n    list1[len(list1)-1] = list1[len(list1)-1][0].upper() + list1[len(list1)-1][1:]\r\n    str1 = \"\"\r\n    for i in list1:\r\n        str1 += i + \" \"\r\n    return str1\r\n\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    l = str1.split()\r\n    l1 = []\r\n    for i in l:\r\n        x = i.capitalize()\r\n        l1.append(x)\r\n        \r\n    return(\" \".join(l1))\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    import string\r\n    str1 = str1.split(' ')\r\n    str1 = [i.capitalize() for i in str1]\r\n    str1 = string.join(str1)\r\n    return str1\r\n\r\n\r\n# Write a python program to check whether a given string is a palindrome or not.\r","votes":null},{"text":"\r\n\r\n    lst = str1.split()\r\n    result = ''\r\n    for i in range(len(lst)):\r\n        if i == 0:\r\n            result += lst[i][0].upper() + lst[i][1:]\r\n        elif i == len(lst) - 1:\r\n            result += lst[i][0:len(lst[i]) - 1].lower() + lst[i][len(lst[i]) - 1].upper()\r\n        else:\r\n            result += lst[i] + ' '\r\n    print(result)\r\n\r\n\r","votes":null},{"text":"\r\n    s = str(str1).split(\" \")\r\n   ","votes":null}],"time":{"count":11.0,"avg":148865.6472727273,"std":33131.1931555328,"cov":0.2225576804}}
{"id":527,"question":"def get_pairs_count(arr, n, sum):\r\n    \"\"\"Write a function to find all pairs in an integer array whose sum is equal to a given number.\"\"\"","answers":[{"text":"\r\n    # Time Complexity: O(n^2)\r\n    # Space Complexity: O(1)\r\n    \r\n    # Initialize the required variables\r\n    count = 0\r\n    \r\n    # Iterate over the array\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    \r\n    return count\r\n\r\n\r","votes":86050.408},{"text":"\r\n    count = 0\r\n    d = {}\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            count += d[arr[i]]\r\n        d[sum - arr[i]] = d.get(sum - arr[i], 0) + 1\r\n    return count\r\n\r\n\r\narr = [1, 2, 3, 4, 3]\r\nn = len(arr)\r\nsum = 6\r\n\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n\r\n\"\"\"\r\nOutput:\r\n\r\n3\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\"\"\"\r\n","votes":137544.736},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if(arr[i]+arr[j]==sum):\r\n                count+=1\r\n    return count\r\n\r","votes":140084.004},{"text":"\r\n    res = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                res += 1\r\n\r\n    return res\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 12, 2, 9, 3, 4, 8, 5, 7, 6]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r","votes":144609.272},{"text":"\r\n    count = 0\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    arr_count = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    sum = int(input())\r\n\r\n    result = get_pairs_count(arr, arr_count, sum)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":149033.164},{"text":"\r\n    lookup = {}\r\n    count = 0\r\n\r\n    for i in range(n):\r\n        if arr[i] in lookup:\r\n            count += lookup[arr[i]]\r\n        lookup[sum - arr[i]] = lookup.get(sum - arr[i], 0) + 1\r\n\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    sum = 17\r\n    print(get_pairs_count(arr, len(arr), sum))\r\n\r\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    sum = 1","votes":149062.504},{"text":"\r\n    result = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                result += 1\r\n    return result\r\n\r\n\r","votes":150285.796},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    s = int(input())\r\n    result = get_pairs_count(arr, n, s)\r\n    print(result)\r\n\r\n\r\n\"\"\"\r\nTime complexity\r\nThe time complexity of the above algorithm is O(n2).\r\n\r\nSpace complexity\r\nThe space complexity of the above algorithm is O(1).\r\n\r\n>>> get_pairs_count([1, 4, 2, 6], 4, 10)\r\n3\r\n>>> get_pairs_count([1, 4, 2, 6], 4, 7)\r\n2\r\n>>> get_pairs_count([1, 4, 2, 6], 4, 8)\r\n1\r\n>>> get_pairs_count([1, 4, 2, 6], 4, 9)\r\n0\r\n>>> get_pairs_count([1, 4, 2, 6], 4, 11)\r\n0\r\n>>> get_pairs_count([1, 4, 2, 6], 4, 12)\r\n0\r\n>>> get_pairs_count([1, 4, 2, 6], 4, 13)\r\n0\r\n>>> get_pairs_count([1, 4, 2, 6], 4, 14)\r\n0\r\n\"\"\"\r\n","votes":154009.864},{"text":"\r\n    # code here\r\n    hash_map = {}\r\n    pairs_count = 0\r\n    for i in arr:\r\n        complement = sum - i\r\n        if complement in hash_map:\r\n            pairs_count += hash_map[complement]\r\n        hash_map[i] = hash_map.get(i, 0) + 1\r\n    return pairs_count\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":157749.868},{"text":"\r\n    # Write your code here\r\n    count = 0\r\n    temp = {}\r\n    for i in range(n):\r\n        if sum - arr[i] in temp:\r\n            count += temp[sum - arr[i]]\r\n        temp[arr[i]] = temp.get(arr[i], 0) + 1\r\n    return count\r\n\r\n\r","votes":158306.808},{"text":"\r\n    # Write your code here\r\n    arr.sort()\r\n    count = 0\r\n    \r\n    for i in range(n):\r\n        if arr[i] > sum:\r\n            break\r\n        j = i + 1\r\n        while j < n:\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n            j += 1\r\n    return count\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input().strip())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    sum = int(input().strip())\r\n\r\n    result = get_pairs_count(arr, n, sum)\r\n\r\n    fptr","votes":158526.752},{"text":"\r\n    \"\"\"\r\n    Args:\r\n        arr: list of integers\r\n        n: length of arr\r\n        sum: sum of all pairs\r\n    Returns:\r\n        count of pairs whose sum is equal to sum\r\n    \"\"\"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":173254.116},{"text":"\r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [3, 4, 3, 4, 2, 4, 2, 3, 4, 3, 3]\r\n    print(\"Total pairs are\", get_pairs_count(arr, len(arr), 6))\r\n\r\n    # Output:\r\n   ","votes":177456.444},{"text":"\r\n    result = 0\r\n    arr.sort()\r\n    for i in range(n):\r\n        # if the current element is greater than the required sum, we don't need to process any more elements\r\n        if arr[i] > sum:\r\n            break\r\n        # we start from the next element to avoid duplicate pairs\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                result += 1\r\n    return result\r\n\r\n\r","votes":178845.604},{"text":"\r\n    d = {}\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            count += d[arr[i]]\r\n        d[sum - arr[i]] = d.get(sum - arr[i], 0) + 1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    x = int(input())\r\n    print(get_pairs_count(arr, n, x))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":191709.168},{"text":"\r\n    pairs_count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs_count += 1\r\n    return pairs_count\r\n\r\n\r","votes":193484.524},{"text":"\r\n    count = 0\r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\r\n\r\n\r\narr = [1, 4, 45, 6, 0, 19]\r\nn = len(arr)\r\nsum = 5\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n\r","votes":200279.684},{"text":"\r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            pairs += (arr[i] + arr[j] == sum)\r\n    return pairs\r\n\r\n\r","votes":233479.668},{"text":"\r\n    arr.sort()\r\n    pairs = 0\r\n    for i in range(n - 1):\r\n        x = arr[i]\r\n        y = sum - x\r\n        if x == y:\r\n            pairs += 1\r\n        elif x < y:\r\n            break\r\n        else:\r\n            index = bisect.bisect_left(arr, y, i + 1)\r\n            pairs += index - i - 1\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    # Sort the given array\r\n    arr.sort()\r\n    # Initialize result\r\n    res = 0\r\n    # Initialize two pointers\r\n    i = 0\r\n    j = n - 1\r\n    # Traverse through the array\r\n    while (i < j):\r\n        # Increment result if the sum of the pair\r\n        # is equal to the given sum\r\n        if (arr[i] + arr[j] == sum):\r\n            res += 1\r\n            # Decrement j since we don't want duplicate pairs\r\n            j -= 1\r\n        # If the sum of the pair is less than the given sum,\r\n        # increment i\r\n        elif (arr[i] + arr[j] < sum):\r\n            i += 1\r\n        # If the sum of the pair is greater than the given sum,\r\n        # decrement j\r\n        else:\r\n            j -= 1\r\n    # Return the result\r\n    return res\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    sum = int(input())\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\"\"\" \r\nInput:\r\nn = 5\r\narr = [1, 5, 3, 5, 3]\r\nsum = 10\r\n\r\nOutput:\r\n2\r\n\r\nInput:\r\nn = 4\r\narr = [1, 2, 3, 4]\r\nsum = 5\r\n\r\nOutput:\r\n2\r\n\r\nInput:\r\nn = 6\r\narr = [5, 2, 4, 6, 3, 2]\r\nsum = 10\r\n\r\nOutput:\r\n3\r\n\r\n# The above example is very similar to the problem of finding\r\n# the number of pairs in a given array whose sum i","votes":null},{"text":"\r\n\r\n    arr.sort()\r\n\r\n    res = 0\r\n\r\n    for i in range(n):\r\n        j = n - 1\r\n\r\n        while i < j:\r\n            if arr[i] + arr[j] == sum:\r\n                res += 1\r\n                i += 1\r\n                j -= 1\r\n            elif arr[i] + arr[j] < sum:\r\n                i += 1\r\n            else:\r\n                j -= 1\r\n\r\n    return res\r\n\r\n# Test\r\nprint(get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8], 8, 10))\r\nprint(get_pairs_count([3, 5, 8, 9, 12, 14, 18, 21], 15, 21))\r\nprint(get_pairs_count([1, 1, 1, 1, 1, 1, 1, 1], 1, 1))\r\nprint(get_pairs_count([1, 1, 1, 1, 1, 1, 1, 1], 1, 0))\r\nprint(get_pairs_count([1, 1, 1, 1, 1, 1, 1, 1], 1, 2))\r\nprint(get_pairs_count([1, 1, 1, 1, 1, 1, 1, 1], 1, 3))\r\nprint(get_pairs_count([1, 1, 1, 1, 1, 1, 1, 1], 1, 4))\r\nprint(get_pairs_count([1, 1, 1, 1, 1, 1, 1, 1], 1, 5))\r\nprint(get_pairs_count([","votes":null},{"text":"\r\n\r\n    d = {}\r\n\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            d[arr[i]] += 1\r\n        else:\r\n            d[arr[i]] = 1\r\n\r\n    count = 0\r\n\r\n    for i in range(n):\r\n        complement = sum - arr[i]\r\n\r\n        if complement in d and complement != arr[i]:\r\n            count += d[complement]\r\n\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # arr=[1, 5, 11, 5]\r\n    # n=4\r\n    # sum=10\r\n\r\n    arr = [2, 4, 5, 10]\r\n    n = 4\r\n    sum = 8\r\n\r\n    print(get_pairs_count(arr, n, sum))","votes":null},{"text":"\r\n    result_dict = {}\r\n    for i in range(n):\r\n        if arr[i] in result_dict:\r\n            result_dict[arr[i]] += 1\r\n        else:\r\n            result_dict[arr[i]] = 1\r\n\r\n    result = 0\r\n    for i in range(n):\r\n        if result_dict[sum - arr[i]] != 0:\r\n            result += result_dict[sum - arr[i]]\r\n\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = map(int, input().split())\r\n   ","votes":null},{"text":"\r\n\r\n    # Stores pair with count\r\n    res = {}\r\n\r\n    # Traverse the array\r\n    for i in range(n):\r\n\r\n        # Find the complement of number i\r\n        comp = sum - arr[i]\r\n\r\n        # If complement is present\r\n        if comp in res:\r\n\r\n            # Increment count of this pair\r\n            res[arr[i], comp] += 1\r\n\r\n        # If complement is not present, add it\r\n        else:\r\n            res[arr[i], comp] = 1\r\n\r\n    # Initialize count as 0\r\n    count = 0\r\n\r\n    # Traverse the hashtable\r\n    for i in res:\r\n\r\n        # If count is odd, there are duplicate pairs\r\n        if res[i] % 2 != 0:\r\n            count += 1\r\n\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 5, 3, 4, 7]\r\n    n = len(arr)\r\n    sum = 12\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    # Output: 3\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    # Output: 4\r\n    \r\n    arr = [1, 3, 1, 5, ","votes":null},{"text":"\r\n    # create a hash table to store the count of each element\r\n    # and initialize count of all elements with 0\r\n    count = {}\r\n    for i in range(n):\r\n        count[arr[i]] = 0\r\n    # initialize result\r\n    result = 0\r\n    # make a pass over the array\r\n    for i in range(n):\r\n        # update the count of the current element\r\n        count[arr[i]] += 1\r\n        # make a pass over the array and find elements with required\r\n        # sum by subtracting the current element from sum and checking\r\n        # if the sum is present in the hash table\r\n        for j in range(n):\r\n            if (arr[i] != arr[j] and\r\n                    sum - arr[i] == arr[j] and\r\n                    count[arr[j]] > 0):\r\n                result += 1\r\n                # update the count of the current element\r\n                count[arr[i]] -= 1\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    arr.sort()\r\n    for i in range(n):\r\n        j = binary_search(arr, i + 1, n - 1, sum - arr[i])\r\n        if j != -1:\r\n            count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    arr.sort()\r\n\r\n    count = 0\r\n    i = 0\r\n    j = n - 1\r\n\r\n    while i < n and j >= 0:\r\n        if arr[i] + arr[j] == sum:\r\n            count += 1\r\n            i += 1\r\n            j -= 1\r\n        elif arr[i] + arr[j] < sum:\r\n            i += 1\r\n        else:\r\n            j -= 1\r\n\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    arr = sorted(arr)\r\n    d = collections.defaultdict(list)\r\n    for i in range(n):\r\n        d[arr[i]].append(i)\r\n    count = 0\r\n    for i in range(n):\r\n        x = sum - arr[i]\r\n        if x in d and d[x] != d[arr[i]]:\r\n            count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    start = 0\r\n    end = n - 1\r\n    count = 0\r\n    while start < end:\r\n        if arr[start] + arr[end] == sum:\r\n            count += 1\r\n            start += 1\r\n            end -= 1\r\n        elif arr[start] + arr[end] < sum:\r\n            start += 1\r\n        else:\r\n            end -= 1\r\n\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    sum = 4\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 5, 3, 4, 2]\r\n    n = len(arr)\r\n    sum = 8\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 5, 3, 4, 2, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    sum = 5\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, ","votes":null},{"text":"\r\n    arr.sort()\r\n    res = 0\r\n    i = 0\r\n    j = n - 1\r\n    while i < j:\r\n        if arr[i] + arr[j] == sum:\r\n            res += 1\r\n            i += 1\r\n            j -= 1\r\n        elif arr[i] + arr[j] < sum:\r\n            i += 1\r\n        else:\r\n            j -= 1\r\n\r\n    return res\r\n\r\n\r\narr = [1, 2, 3, 4, 5]\r\nn = len(arr)\r\nsum = 5\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    result = []\r\n    arr.sort()\r\n    for i in range(0, n):\r\n        if arr[i] == 0:\r\n            continue\r\n        complement = sum - arr[i]\r\n        if complement == arr[i]:\r\n            result.append((arr[i], arr[i]))\r\n        elif i != n-1 and complement == arr[i+1]:\r\n            result.append((arr[i], arr[i+1]))\r\n        else:\r\n            j = i+1\r\n            while j < n:\r\n                if arr[j] > complement:\r\n                    break\r\n                if arr[j] == complement:\r\n                    result.append((arr[i], arr[j]))\r\n                j += 1\r\n    return result\r\n\r\n\r\n\r\narr = [1, 5, 4, 5, 4]\r\nn = len(arr)\r\nsum = 10\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Sort the array\r\n    arr.sort()\r\n\r\n    # Initialize the result\r\n    result = 0\r\n\r\n    # Traverse the array\r\n    for i in range(n - 1):\r\n\r\n        # Traverse the array from i + 1\r\n        j = i + 1\r\n\r\n        # Traverse the array from j + 1\r\n        k = n - 1\r\n\r\n        # Find the triplet\r\n        while j < k:\r\n            if arr[i] + arr[j] + arr[k] == sum:\r\n                result += 1\r\n                j += 1\r\n                k -= 1\r\n            elif arr[i] + arr[j] + arr[k] < sum:\r\n                j += 1\r\n            else:\r\n                k -= 1\r\n\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create an empty hash\r\n    d = {}\r\n    \r\n    # Fill the hash with elements from the array\r\n    for i in range(n):\r\n        d[arr[i]] = i\r\n        \r\n    # Initialize result\r\n    result = 0\r\n    \r\n    # Traverse the array\r\n    for i in range(n):\r\n        if (sum - arr[i] in d) and (d[sum - arr[i]] != i):\r\n            # If sum-arr[i] exists and is not same as arr[i]\r\n            result = result + 1\r\n        \r\n    return result\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter number of elements in the array: '))\r\n    arr = []\r\n    print('Enter the elements in the array: ')\r\n    for i in range(n):\r\n        arr.append(int(input()))\r\n    sum = int(input('Enter the target sum: '))\r\n    print('Number of pairs with target sum: ', get_pairs_count(arr, n, sum))\r\n\r\n'''\r\nOutput:\r\nEnter number of elements in the array: 5\r\nEnter the elements in the array: \r\n1 2 3 4 5\r\nEnter the target sum: 6\r\nNumber of pairs with target sum:  3\r\n\r\nTime Complexity: O(N)\r\nSpace Complexity: O(N)\r\n\r\nExample:\r\nEnter number of elements in the array: 5\r\nEnter the elements in the array: \r\n1 2 3 4 5\r\nEnter the target sum: 6\r\nNumber of pairs with target sum:  3\r\n\r\nTime Complexity: O(N)\r\nSpace Complexity: O(N)\r\n\r\nExample:\r\nEnter number of elements in the array: 5\r\nEnter the elements in the array: \r\n1 2 3 4 5\r\nEnter th","votes":null},{"text":"\r\n    # Code here\r\n    # return 0\r\n\r\n    # Brute Force\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n\r\n    return count\r\n\r\n\r\n# {","votes":null},{"text":"\r\n    # Create a hash table to store the element and its frequency\r\n    frequency = {}\r\n\r\n    # Create another hash table to store the sum and the count of pairs\r\n    sum_count = {}\r\n\r\n    # Store the frequency of each element in the hash table\r\n    for i in range(n):\r\n        if arr[i] in frequency:\r\n            frequency[arr[i]] += 1\r\n        else:\r\n            frequency[arr[i]] = 1\r\n\r\n    # Store the sum of each pair and the count of pairs in the hash table\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if (arr[i] + arr[j]) == sum:\r\n                if (arr[i] + arr[j]) in sum_count:\r\n                    sum_count[arr[i] + arr[j]] += 1\r\n                else:\r\n                    sum_count[arr[i] + arr[j]] = 1\r\n\r\n    # The count of pairs will be the sum of the counts of pairs stored in the hash table\r\n    pairs_count = 0\r\n    for i in frequency:\r\n        if i in sum_count:\r\n            pairs_count += frequency[i] * sum_count[i]\r\n\r\n    return pairs_count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2","votes":null},{"text":"\r\n    # Initialize result\r\n    result = 0\r\n    # Calculate the complement of given sum\r\n    complement = sum \/\/ 2\r\n    # Build a map to store the complementary elements\r\n    complement_map = {}\r\n    # Iterate over all elements to find complementary elements\r\n    for i in range(0, n):\r\n        # Find the complement of the current element and increment result if found\r\n        if arr[i] in complement_map:\r\n            result += complement_map[arr[i]]\r\n        # Store the current element in the complementary map\r\n        complement_map[complement - arr[i]] = complement_map.get(complement - arr[i], 0) + 1\r\n    # Return result\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, ","votes":null},{"text":"\r\n    # Your code goes here\r\n    count = 0\r\n    arr.sort()\r\n    for i in range(0, n):\r\n        j = sum - arr[i]\r\n        if j == arr[i]:\r\n            count += 1\r\n        elif j > arr[i]:\r\n            count += (j \/ arr[i])\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n, x = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    result = get_pairs_count(arr, n, x)\r\n    print(result)\r\n\r\n\r\n# Sample Input and Output 1\r\n\r\n# Input\r\n#    5\r\n#    7 3 5 8 11\r\n#    11\r\n\r\n# Output\r\n#    3\r\n\r\n# Sample Input and Output 2\r\n\r\n# Input\r\n#    4\r\n#    2 1 5 1\r\n#    4\r\n\r\n# Output\r\n#    3\r\n\r\n# Sample Input and Output 3\r\n\r\n# Input\r\n#    4\r\n#    2 1 5 1\r\n#    6\r\n\r\n# Output\r\n#    2\r\n\r\n# Sample Input and Output 4\r\n\r\n# Input\r\n#    5\r\n#    5 2 1 3 4\r\n#    5\r\n\r\n# Output\r\n#    1\r\n\r\n# Sample Input and Output 5\r\n\r\n# Input\r\n#    4\r\n#    2 1 5 1\r\n#    5\r\n\r\n# Output\r\n#    2\r\n\r\n# Sample Input and Output 6\r\n\r\n# Input\r\n#    6\r\n#    2 1 5 4 3 2\r\n#    10\r\n\r\n# Output\r\n#    5\r\n\r\n# Sample Input an","votes":null},{"text":"\r\n\r\n    if n == 0:\r\n        return 0\r\n    return sum_pairs(arr, n, sum) + get_pairs_count(arr, n - 1, sum)\r\n\r\n\r","votes":null},{"text":"\r\n    # This is a brute force solution\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i != j:\r\n                if arr[i] + arr[j] == sum:\r\n                    count = count + 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 5, 7, 1, 3, 4, 2, 6, 3, 1]\r\n    n = len(arr)\r\n    sum = 10\r\n   ","votes":null},{"text":"\r\n    # create a hash table to store the counts of the items in the array\r\n    counts = {}\r\n    \r\n    for i in range(n):\r\n        counts[arr[i]] = counts.get(arr[i], 0) + 1\r\n    \r\n    # create a hash table to store the pairs\r\n    pairs = {}\r\n    \r\n    # iterate over the array to find the pairs\r\n    for i in range(n):\r\n        if (sum - arr[i] in counts):\r\n            pairs[arr[i], sum - arr[i]] = pairs.get((arr[i], sum - arr[i]), 0) + 1\r\n    \r\n    return pairs\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize result\r\n    result = 0\r\n\r\n    # Sort the array\r\n    arr.sort()\r\n\r\n    # Iterate through the array\r\n    for i in range(n):\r\n        # Find remaining sum\r\n        remaining = sum - arr[i]\r\n\r\n        # Find the first index of remaining sum in the array\r\n        index = binary_search(arr, i + 1, n - 1, remaining)\r\n\r\n        # If index is not -1 and is smaller than i, then\r\n        # there exists a pair with sum\r\n        if index != -1 and index < i:\r\n            result += 1\r\n\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    # create a hashmap\r\n    hmap = {}\r\n    for i in range(n):\r\n        curr = arr[i]\r\n        if curr in hmap:\r\n            hmap[curr] += 1\r\n        else:\r\n            hmap[curr] = 1\r\n    \r\n    count = 0\r\n    for i in range(n):\r\n        curr = arr[i]\r\n        other = sum - curr\r\n        if other == curr:\r\n            count += hmap[curr]\r\n        elif other in hmap:\r\n            count += hmap[other]\r\n    \r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    x = int(input())\r\n\r\n    result = get_pairs_count(arr, n, x)\r\n\r\n    fptr.write(str(result) + '\\n","votes":null},{"text":"\r\n    # Create a hash table to store the freq of each element\r\n    hash_table = {}\r\n    # Store the required sum in hash table\r\n    hash_table[sum] = 0\r\n    # Traverse the given array\r\n    for i in range(n):\r\n        # Check if the current element is present in hash table\r\n        if arr[i] in hash_table:\r\n            # Increment the count of pairs by 1\r\n            hash_table[sum] += 1\r\n    # Return the count\r\n    return hash_table[sum]\r\n\r\n\r\nif __name","votes":null},{"text":"\r\n    result = {}\r\n    for i in range(n):\r\n        if arr[i] in result:\r\n            result[arr[i]] += 1\r\n        else:\r\n            result[arr[i]] = 1\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Dictionary to store pair count\r\n    d = {}\r\n\r\n    for i in range(n):\r\n        # Check if the difference exists in the dictionary\r\n        if (sum - arr[i]) in d.keys():\r\n            d[sum - arr[i]] += 1\r\n        else:\r\n            d[arr[i]] = 1\r\n\r\n    return d\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    arr = [3, 3, 4, 4, 6, 6, 7, 7, 9, 9]\r\n    n = len(arr)\r\n    sum = 12\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\nOutput:\r\n{3: 2, 4: 2, 6: 2, 7: 2, 9: 2, 12: 1}\r\n\r\nExplanation:\r\n12 cannot be expressed as the sum of two elements from the array.\r\nThere are 11 pairs whose sum is 12, and 1 pair whose sum is 12.\r\n\"\"\"\r\n\r\n\"\"\"\r\nSample I\/O:\r\nInput 1:\r\n\r\n    A = [5, 5, 10, 10, 20]\r\n    n = 5\r\n    sum = 30\r\n\r\nOutput 1:\r\n\r\n    {30: 1}\r\n\r\nInput 2:\r\n\r\n    A = [2, 5, 10, 15, 18, 20]\r\n    n = 6\r\n    sum = 25\r\n\r\nOutput 2:\r\n\r\n    {25: 2}\r\n\r\nInput 3:\r\n\r\n    A = [2","votes":null},{"text":"\r\n    dp = [0] * (sum + 1)\r\n\r\n    for i in range(0, n):\r\n        for j in range(arr[i], sum + 1):\r\n            dp[j] += 1\r\n\r\n    return dp[sum]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    sum = 5\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n\r\n\"\"\"\r\nInput:\r\narr = [1, 2, 3, 4, 5]\r\nsum = 5\r\nOutput:\r\n5\r\nExplanation:\r\nAll the possible pairs are {(1, 4), (1, 3), (1, 2), (2, 3), (2, 4)}\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    # Initialize the array of size n+1 and make all entries as 0\r\n    # Initialize the output\r\n    dp = [0]*(n+1)\r\n    output = 0\r\n    # Fill the array in bottom up manner\r\n    for i in range(1, n+1):\r\n        for j in range(i, n+1):\r\n            # If sum of the current pair is less than the given sum, then\r\n            # the answer is the sum of the answer of subarray from\r\n            # index i+1 to n and the current element\r\n            if (arr[j-1] + arr[i-1]) < sum:\r\n                dp[j] += dp[i-1]\r\n            # If sum of the current pair is equal to the given sum, then\r\n            # the answer is 1 plus the answer of subarray from index i+1\r\n            # to n\r\n            elif (arr[j-1] + arr[i-1]) == sum:\r\n                dp[j] += 1\r\n                output += ","votes":null},{"text":"\r\n    # Initialize the result\r\n    result = 0\r\n    # Sort the array\r\n    arr.sort()\r\n\r\n    # Traverse the array from left to right\r\n    for i in range(n):\r\n        # Initialize the sum of current pair\r\n        current_sum = sum - arr[i]\r\n\r\n        # Search for the current pair in the remaining array\r\n        j = i + 1\r\n        while j < n:\r\n            if arr[j] == current_sum:\r\n                # Increment the result\r\n                result += 1\r\n                # Move to the next pair\r\n                j += 1\r\n            elif arr[j] < current_sum:\r\n                # Move to the next pair\r\n                j += 1\r\n            else:\r\n                break\r\n\r\n    # Return the result\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    x = int(input())\r\n    result = get_pairs_count(arr, n, x)\r\n    print(result)\r\n\r\n\"\"\"\r\nInput Format\r\n\r\nThe first line contains the space-separated integers that form the array's elements.\r\nThe second line contains the target sum, .\r\n\r\nConstraints\r\n\r\nOutput Format\r\n\r\nPrint the total number of pairs of elements that sum to exactly .\r\n\r\nSample Input\r\n\r\n6\r\n1 5 3 4 2 ","votes":null},{"text":"\r\n\r\n    # Sort the array\r\n    arr.sort()\r\n\r\n    # Initialize result\r\n    result = 0\r\n\r\n    # Traverse the array\r\n    for i in range(n):\r\n\r\n        # Find the remaining sum\r\n        remaining_sum = sum - arr[i]\r\n\r\n        # Find the pair with remaining_sum\r\n        index = binary_search(arr, remaining_sum, i + 1, n - 1)\r\n\r\n        # If pair is found, increment result\r\n        if index != -1:\r\n            result += 1\r\n\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    pairs = {}\r\n\r\n    for i in range(n):\r\n        \r\n        if sum - arr[i] in pairs:\r\n            pairs[sum-arr[i]] += 1\r\n        else:\r\n            pairs[arr[i]] = 1\r\n    \r\n    return pairs\r\n\r\n\r\narr = [1, 5, 7, 9, 11, 15]\r\nn = len(arr)\r\nsum = 23\r\n\r\npairs = get_pairs_count(arr, n, sum)\r\n\r\nprint(\"Number of pairs whose sum is {0} is {1}\".format(sum, pairs[sum]))\r\n\r\n# Output:\r\n# Number of pairs whose sum is 23 is 3\r\n\r\n# Time Complexity: O(N)\r\n# Space Complexity: O(N)\r\n\r\n\r\n\r\n# Method 2: Using Hashing\r\n# Here, we will use hashing.\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Initialize the hash table\r\n    ht = {}\r\n\r\n    # Loop through the array\r\n    for i in range(0, n):\r\n\r\n        # Find the complement of current element\r\n        complement = sum - arr[i]\r\n\r\n        # If complement is present in the hash table\r\n        if complement in ht:\r\n            # Return the complement and the current element\r\n            return 1\r\n        else:\r\n            # If complement is not present in the hash table,\r\n            # add the current element to it\r\n            ht[arr[i]] = 1\r\n\r\n    # Return 0 if there is no matching pair\r\n    return 0\r\n\r\n\r\n# Driver Code\r\narr = [1, 3, 4, 2, 6, 5]\r\nn = len(arr)\r\nsum = 10\r\n\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r\n# This code is contributed by Keshav Mishra\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    start = 0\r\n    end = n - 1\r\n    count = 0\r\n    while start < end:\r\n        if arr[start] + arr[end] == sum:\r\n            count += 1\r\n            start += 1\r\n            end -= 1\r\n        elif arr[start] + arr[end] < sum:\r\n            start += 1\r\n        elif arr[start] + arr[end] > sum:\r\n            end -= 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    s = int(input())\r\n\r\n    result = get_pairs_count(arr, n, s)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n#Sample Input 0\r\n#6\r\n#1 2 3 4 3 2\r\n#7\r\n\r\n\r\n#Sample Output 0\r\n#2\r\n\r\n\r\n#Explanation 0\r\n#The 2 pairs are [1, 6] and [2, 5]\r\n\r\n\r\n#Sample Input 1\r\n#6\r\n#1 5 3 4 3 2\r\n#7\r\n\r\n\r\n#Sample Output 1\r\n#0\r\n\r\n\r\n#Explanation 1\r\n#There is no pair with sum 7.\r\n\r\n\r\n#Sample Input 2\r\n#6\r\n#1 5 3 4 3 2\r\n#8\r\n\r\n\r\n#Sample Output 2\r\n#1\r\n\r\n\r\n#Explanation 2\r\n#The 1 pair is [1","votes":null},{"text":"\r\n    # create a hash table to store the count of each number\r\n    count_hash = {}\r\n    for i in range(n):\r\n        num = arr[i]\r\n        if num in count_hash:\r\n            count_hash[num] += 1\r\n        else:\r\n            count_hash[num] = 1\r\n\r\n    # use a hash table to store the count of each number\r\n    # if we have 2 nums with the same value, we can only\r\n    # have 1 pair for that value\r\n    pairs = 0\r\n    for key in count_hash:\r\n        val = count_hash[key]\r\n        if val >= 2:\r\n            pairs += val * (val - 1) \/\/ 2\r\n\r\n    # if we have a number in the hash table, it means\r\n    # we can have at least 1 pair with that number.\r\n    # we have to check if we have a number that is\r\n    # equal to 2x the sum\r\n    if sum in count_hash:\r\n        pairs += count_hash[sum]\r\n\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    arr.sort()\r\n    pairs = []\r\n    # For each element in the array\r\n    for i in range(0, n):\r\n        # Find the remaining sum\r\n        remaining_sum = sum - arr[i]\r\n        # Find the index of remaining_sum\r\n        index = bisect(arr, remaining_sum, lo=i + 1)\r\n\r\n        # If the index is not found\r\n        if index == -1:\r\n            continue\r\n        # If the index is found\r\n        else:\r\n            # Find the pair\r\n            pair = (arr[i], arr[index])\r\n            # If the pair is not found\r\n            if pair not in pairs:\r\n                # Add the pair to the list\r\n                pairs.append(pair)\r\n\r\n    return len(pairs)\r\n\r\n\r","votes":null},{"text":"\r\n    # create a hashmap and store the frequencies of each element\r\n    # we will use this to check if a pair exists\r\n    hmap = {}\r\n    for ele in arr:\r\n        if ele in hmap:\r\n            hmap[ele] += 1\r\n        else:\r\n            hmap[ele] = 1\r\n    # create a hashmap to store all pairs\r\n    hmap_pairs = {}\r\n    # iterate over the array again\r\n    for ele in arr:\r\n        # check if the complement exists\r\n        if (sum - ele) in hmap:\r\n            # get the frequencies of the complement\r\n            freq = hmap[sum - ele]\r\n            # if the complement is the same as the element\r\n            if freq > 1:\r\n                # increment the count\r\n                hmap_pairs[ele] = hmap_pairs.get(ele, 0) + 1\r\n            else:\r\n                # decrement the count\r\n                hmap_pairs[ele] = hmap_pairs.get(ele, 0) - 1\r\n                # increment the count\r\n                hmap_pairs[sum - ele] = hmap_pairs.get(sum - ele, 0) + 1\r\n    # return the count\r\n    return sum(hmap_pairs.values())\r\n\r\n\r\narr = [1, 3, 4, ","votes":null},{"text":"\r\n    # Sort the array\r\n    arr.sort()\r\n\r\n    # Initialize the result\r\n    result = 0\r\n\r\n    # Traverse the array\r\n    for i in range(n - 1):\r\n        # If the current element is smaller than the required sum, move to the next\r\n        if arr[i] < sum:\r\n            # Set the right pointer to the first element\r\n            right_ptr = 0\r\n\r\n            # Traverse the array from the right side\r\n            for j in range(i + 1, n):\r\n                # If the sum of the two elements is equal to the required sum\r\n                if arr[i] + arr[j] == sum:\r\n                    # Increment the result\r\n                    result += 1\r\n\r\n                # If the sum of the two elements is less than the required sum\r\n                if arr[i] + arr[j] < sum:\r\n                    # Move the right pointer ahead\r\n                    right_ptr += 1\r\n\r\n    # Return the result\r\n    return result\r\n\r\n\r\nclass TestGetPairsCount(unittest.TestCase):\r\n   ","votes":null},{"text":"\r\n    arr.sort()\r\n    pairs = []\r\n    i = 0\r\n    j = len(arr)-1\r\n    while j>i:\r\n        if arr[i] + arr[j] == sum:\r\n            pairs.append([arr[i], arr[j]])\r\n            i+=1\r\n            j-=1\r\n            while j>i and arr[j] == arr[j-1]:\r\n                j-=1\r\n        elif arr[i] + arr[j] <= sum:\r\n            i+=1\r\n        else:\r\n            j-=1\r\n    return pairs\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nsum = 10\r\nprint(get_pairs_count(arr, len(arr), sum))\r\n\r\n\"\"\"\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n[1, 9]\r\n[2, 8]\r\n[3, 7]\r\n[4, 6]\r\n[5, 5]\r\n[6, 4]\r\n[7, 3]\r\n[8, 2]\r\n[9, 1]\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    seen = set()\r\n    for i in range(n):\r\n        target = sum - arr[i]\r\n        if target in seen:\r\n            count += 1\r\n        seen.add(arr[i])\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize the result\r\n    res = 0\r\n    # Make a frequency count\r\n    freq = {}\r\n    # Initialize the sum\r\n    curr_sum = 0\r\n    for i in range(n):\r\n        curr_sum += arr[i]\r\n        # If the current sum is equal to sum, then increment\r\n        # the result by 1\r\n        if curr_sum == sum:\r\n            res += 1\r\n        curr_sum -= arr[i]\r\n        # If the sum of the pair is already counted before,\r\n        # then don't count it again\r\n        if curr_sum in freq:\r\n            res -= freq[curr_sum]\r\n        # Increment the frequency count\r\n        freq[curr_sum] = freq.get(curr_sum, 0) + 1\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    # Create an empty HashSet\r\n    hash_set = set()\r\n\r\n    # Traverse through the array\r\n    for i in range(0, n):\r\n        # Find the pair with sum as i+sum[i]\r\n        pair_with_sum = sum - arr[i]\r\n\r\n        # Check if hash_set\r\n        if pair_with_sum in hash_set:\r\n            # Return 1\r\n            return 1\r\n\r\n        # Add the current element to the HashSet\r\n        hash_set.add(arr[i])\r\n\r\n    # Return 0 as there is no such pair\r\n    return 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [15, 2, 4, 8, 9, 5, 10]\r\n    sum = 22\r\n    n = len(arr)\r\n    result = get_pairs_count(arr, n, sum)\r\n    print(result)\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\"\"\"\r\n\r\n\r\n# Method 2: Using Map\r\nfrom collections import defaultdict\r\n\r\n\r","votes":null},{"text":"\r\n    res = 0\r\n    # Create a hashmap to store the count of all possible\r\n    # sums.\r\n    hm = {}\r\n    # Traverse through the array and fill the hashmap\r\n    for i in range(0, n):\r\n        hm[arr[i]] = hm.get(arr[i], 0) + 1\r\n    # Traverse through the hashmap and find the pairs.\r\n    for i in range(0, n):\r\n        # Check if sum is not equal to the current element\r\n        # and if sum - current element is present in the hashmap.\r\n        if (hm.get(sum - arr[i], 0) > 0):\r\n            # If the sum is equal to the current element, then\r\n            # return true.\r\n            if (sum == arr[i]):\r\n                res += 1\r\n            # If the sum is not equal to the current element, then\r\n            # decrement the count of the sum - current element\r\n            # and increment the count of the current element.\r\n            else:\r\n                hm[sum - arr[i]] -= 1\r\n                hm[arr[i]] += 1\r\n    return res\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7]\r\nsumm = 10\r\nn = len(arr)\r\nres = get_pairs_count(arr, n, summ)\r\nprint(\"Count of pairs with sum\", summ, \"is\", res)\r\n\r\narr = [1, 3, 1, 3, 1]\r\nsumm = 5\r\nn = len(arr)\r\nres = get_pairs_count(arr, n, summ)\r\nprint(\"Count of pairs with sum\", summ, \"is\", res)\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7]\r\nsumm = 10\r\nn = len(arr)\r\nre","votes":null},{"text":"\r\n    # Initialize the result\r\n    count = 0\r\n    # Make a frequency array\r\n    f = [0]*(sum + 1)\r\n    # Traverse through the given array\r\n    for i in range(n):\r\n        # Check if the sum is found in the frequency array\r\n        if f[arr[i]] > 0:\r\n            # Increment count\r\n            count += 1\r\n        # Increment the frequency of the current element\r\n        f[arr[i]] += 1\r\n    # Return the count\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Create an empty hash, and initialize the result\r\n    # to 0.\r\n    d = {}\r\n    result = 0\r\n\r\n    # Iterate through all elements of array and\r\n    # calculate the complement of each element. \r\n    # Store the complement in hash. This step is done in O(n) time.\r\n    for i in range(0, n):\r\n        val = arr[i]\r\n        complement = sum - val\r\n        if complement in d:\r\n            result += d[complement]\r\n        d[val] = d.get(val, 0) + 1\r\n\r\n    # Return result\r\n    return result\r\n\r\n\r\n'''\r\nI\/P: arr = [1, 5, 11, 5], n = 4, sum = 10\r\nO\/P: 4\r\n\r\nI\/P: arr = [1, 5, 11, 5], n = 4, sum = 2\r\nO\/P: 1\r\n\r\nI\/P: arr = [1, 5, 11, 5], n = 4, sum = 12\r\nO\/P: 0\r\n'''\r\n# Driver function\r\narr = [1, 5, 11, 5]\r\nn = len(arr)\r\nsum = 10\r\nprint(\"Total number of pairs is\", get_pairs_count(arr, n, sum))\r\n\r\narr = [1, 5, 11, 5]\r\nn = len(arr)\r\nsum = 2\r\nprint(\"Total number of pairs is\", get_pairs_count(arr, n, sum))\r\n\r\narr = [1, 5, 11, 5]\r\nn = len(arr)\r\nsum = 12\r\nprint(\"Total number of pairs is\", get_pairs_count(arr, n, sum))\r\n\r\narr = [1, 5","votes":null},{"text":"\r\n    # Initialize the pairs count\r\n    dp = [[0 for x in range(sum+1)] for y in range(n+1)]\r\n\r\n    # Add the base case\r\n    for i in range(sum+1):\r\n        dp[0][i] = 0\r\n\r\n    for i in range(1, n+1):\r\n        for j in range(1, sum+1):\r\n            if arr[i-1] > j:\r\n                dp[i][j] = dp[i-1][j]\r\n            else:\r\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i-1]]\r\n\r\n    return dp[n][sum]\r\n\r\n\r\n# Driver code\r\narr = [3, 4, 5, 2, 8, 10]\r\nn = len(arr)\r\nsum = 10\r\nprint(\"","votes":null},{"text":"\r\n    # Initialize the result\r\n    result = 0\r\n    # Sort the array\r\n    arr.sort()\r\n    # Traverse the array\r\n    for i in range(n):\r\n        # Find the pair with given sum by using binary search\r\n        index = binary_search(arr, i+1, n-1, sum - arr[i])\r\n        # If pair found, increment the result\r\n        if index != -1:\r\n            result += 1\r\n    # Return the result\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] == sum:\r\n            count += 1\r\n        elif arr[i] < sum:\r\n            j = arr.index(sum - arr[i], i + 1)\r\n            if j != -1:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().","votes":null},{"text":"\r\n    \r\n    # make a hashmap\r\n    # key = value\r\n    # value = count\r\n    hmap = defaultdict(int)\r\n    \r\n    # insert all elements in hashmap\r\n    for i in range(n):\r\n        hmap[arr[i]] += 1\r\n        \r\n    # iterate through the hashmap\r\n    ans = 0\r\n    \r\n    # check if the difference of the key and the sum is present in the hashmap\r\n    for key in hmap:\r\n        if(key != sum and abs(sum - key) in hmap):\r\n            ans += hmap[key] * hmap[abs(sum - key)]\r\n            \r\n            # if sum == key, then we have to remove the key from hashmap\r\n            # since we are counting pairs only\r\n            if(sum == key):\r\n                hmap[abs(sum - key)] -= hmap[key]\r\n        \r\n    return ans\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [3, 5, -4, 8, 11, -1, 6]\r\n    n = len(arr)\r\n    sum = 6\r\n    print(get_pairs_count(arr, n, sum))\r\n    \r\n    arr = [1, 3, 1, 5]\r\n    n = len(arr)\r\n    sum = 6\r\n    print(get_pairs_count(arr, n, sum))\r\n    \r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    sum = 3\r\n    print(get_pairs_count(arr, n, sum))\r\n    \r\n    arr = [1, 1, 1, 1, 1]\r\n    n = len(arr)\r\n    sum = 1\r\n    print(get_pairs_count(arr, n, sum))\r\n  ","votes":null},{"text":"\r\n    \r\n    # Create an empty hash table\r\n    hash_map = dict()\r\n    \r\n    # Iterate through the array\r\n    for i in range(0, n):\r\n        \r\n        # If the current element is in the hash table\r\n        if arr[i] in hash_map:\r\n            \r\n            # Increment the count of pairs\r\n            hash_map[arr[i]] += 1\r\n        \r\n        # If the current element is not in hash table\r\n        else:\r\n            \r\n            # Add the current element as key and initialize its count to 1\r\n            hash_map[arr[i]] = 1\r\n            \r\n    # Initialize the count\r\n    count = 0\r\n    \r\n    # Iterate through the hash table\r\n    for key in hash_map:\r\n        \r\n        # If the sum is equal to the given number\r\n        if key == sum:\r\n            \r\n            # Increase the count\r\n            count += hash_map[key]\r\n        \r\n        # If the sum is less than the given number\r\n        elif key < sum:\r\n            \r\n            # If the difference of the given number and the sum is in the hash table\r\n            if (sum - key) in hash_map:\r\n                \r\n                # Increase the count\r\n                count += hash_map[key] * hash_map[sum - key]\r\n    \r\n    # Return the count\r\n    return count\r\n\r\n\r\n# Driver Code\r\narr = [1, 2, 4, 1, 2, 3, 4]\r\nn = len(arr)\r\nsum = 5\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n\r\n# This code is contributed by Abhishek Sharma\r\n\r\n\r\n# A simpler approach to find the number of pairs with a given sum\r\n# Using Hashing\r\n\r\nfrom collections import defaultdict\r\n\r","votes":null},{"text":"\r\n    # Initialize the array to store results\r\n    result = 0\r\n\r\n    # Perform the following steps for given sum\r\n    # 1) Iterate through the array\r\n    for i in range(n):\r\n\r\n        # 2) Initialize two pointers at start and end of array\r\n        # and move them until they meet each other\r\n        j = n-1\r\n        while(i<j):\r\n\r\n            # 3) If the sum is equal to the given sum, increment\r\n            # the result\r\n            if arr[i] + arr[j] == sum:\r\n                result += 1\r\n\r\n                # 4) Decrement j and increment i\r\n                j -= 1\r\n                i += 1\r\n\r\n            # 5) If the sum is smaller, increment i\r\n            elif arr[i] + arr[j] < sum:\r\n                i += 1\r\n\r\n            # 6) If the sum is greater, decrement j\r\n            else:\r\n                j -= 1\r\n\r\n    # Return result\r\n    return result\r\n\r\n\r\n# Driver Code\r\n\r\n\r\narr = [2, 5, 6, 8, 11, 12, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, ","votes":null},{"text":"\r\n\r\n    # Create a hashtable.\r\n    hashtable = {}\r\n\r\n    # Go through each element in the array.\r\n    for i in range(n):\r\n\r\n        # If the current element is in the hashtable, we have found a pair.\r\n        if arr[i] in hashtable:\r\n            print(arr[i], sum - arr[i])\r\n\r\n        # Add the element to the hashtable.\r\n        hashtable[sum - arr[i]] = i\r\n\r\n    return 0\r\n\r\n\r\n# Tests\r\narr = [1, 2, 3, 4, 6]\r\nn = len(arr)\r\nsum = 6\r\nget_pairs_count(arr, n, sum)\r\n\r\narr = [1, 2, 3, 4, 5, 6]\r\nn = len(arr)\r\nsum = 6\r\nget_pairs_count(arr, n, sum)\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nn = len(arr)\r\nsum = 6\r\nget_pairs_count(arr, n, sum)\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nn = len(arr)\r\nsum = 10\r\nget_pairs_count(arr, n, sum)\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nn = len(arr)\r\nsum = 11\r\nget_pairs_count(arr, n, sum)\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nn = len(arr)\r\nsum = 12\r\nget_pairs_coun","votes":null},{"text":"\r\n    # Initialize the result\r\n    result = 0\r\n    # Sort the array\r\n    arr.sort()\r\n    # Traverse the array\r\n    for i in range(n):\r\n        # Find the pair\r\n        index = _search(arr, i + 1, n, sum - arr[i])\r\n        # If pair is found, increment result\r\n        if index != -1:\r\n            result += 1\r\n    # Return the result\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    # Write your code here\r\n    i=0\r\n    j=n-1\r\n    count = 0\r\n    while i<j:\r\n        if arr[i]+arr[j]==sum:\r\n            count += 1\r\n            i+=1\r\n            j-=1\r\n        elif arr[i]+arr[j]<sum:\r\n            i+=1\r\n        else:\r\n            j-=1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r","votes":null},{"text":"\r\n    \r\n    pairs = [False] * (sum + 1)\r\n    pairs[0] = True\r\n    \r\n    for i in range(n):\r\n        for j in range(sum, -1, -1):\r\n            if j >= arr[i]:\r\n                pairs[j] = pairs[j] or pairs[j-arr[i]]\r\n\t\r\n    return pairs[sum]\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    n = len(arr)\r\n    pairs = 0\r\n    i = 0\r\n    j = n-1\r\n    while i < j:\r\n        if arr[i] + arr[j] == sum:\r\n            pairs += 1\r\n            i += 1\r\n            j -= 1\r\n        elif arr[i] + arr[j] < sum:\r\n            i += 1\r\n        else:\r\n            j -= 1\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize result\r\n    result = 0\r\n    # Make a frequency table\r\n    # of all elements\r\n    freq = [0] * (n + 1)\r\n    for i in arr:\r\n        freq[i] += 1\r\n\r\n    # Traverse the frequency table\r\n    for i in range(len(freq)):\r\n        # If sum is found\r\n        if (sum - i) in freq:\r\n            # Since all pairs are considered\r\n            # we multiply the count of first\r\n            # pair with count of second pair\r\n            result += freq[i] * freq[sum - i]\r\n\r\n    return result\r\n\r\n\r\narr = [1, 5, 3, 4, 7]\r\nsum = 6\r\n\r\nprint(get_pairs_count(arr, len(arr), sum))\r\n\r\n# This code is contributed by Nikhil Kumar Singh\r\n\r\n\r","votes":null},{"text":"\r\n    dic = {}\r\n    for i in range(n):\r\n        if arr[i] in dic:\r\n            dic[arr[i]] += 1\r\n        else:\r\n            dic[arr[i]] = 1\r\n\r\n    print(dic)\r\n\r\n    pairs = 0\r\n    for i in range(n):\r\n        if arr[i] in dic and dic[arr[i]] >= 2:\r\n            pairs += dic[arr[i]] * (dic[arr[i]] - 1) \/\/ 2\r\n\r\n    return pairs\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, ","votes":null},{"text":"\r\n    # Create an empty hash map (dictionnary) to store the count of all sums\r\n    count = dict()\r\n\r\n    # Iterate through the array\r\n    for i in range(n):\r\n\r\n        # Check if the required sum is present in the hash map\r\n        if (sum - arr[i]) in count:\r\n            count[sum - arr[i]] += 1\r\n        else:\r\n            count[arr[i]] = 1\r\n\r\n    # Iterate through the hash map\r\n    for key in count:\r\n\r\n        # If the required sum is present in the hash map and the count of the required sum\r\n        # is more than 1, then print all the pairs\r\n        if key == sum and count[key] > 1:\r\n            for i in range(n):\r\n                if arr[i] == sum - arr[i]:\r\n                    print(arr[i], end=\" \")\r\n                    print(arr[i + 1])\r\n\r\n        # If the required sum is present in the hash map and the count of the required sum\r\n        # is 1, then print a single pair\r\n        elif key == sum and count[key] == 1:\r\n","votes":null},{"text":"\r\n    m = {}\r\n    p = 0\r\n    for i in range(n):\r\n        p += arr[i]\r\n        if p == sum:\r\n            return 1\r\n        elif p > sum:\r\n            p = 0\r\n            continue\r\n        if p - sum in m:\r\n            return m[p - sum] + 1\r\n        m[p] = m.get(p, 0) + 1\r\n    return 0\r\n\r\n\r","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            d[arr[i]] += 1\r\n        else:\r\n            d[arr[i]] = 1\r\n    pairs = 0\r\n    for i in range(n):\r\n        if arr[i] + sum == 2*sum:\r\n            pairs += d[arr[i]]\r\n        if arr[i] + sum in d:\r\n            pairs += d[arr[i]]\r\n    return pairs\r\n\r","votes":null},{"text":"\r\n    pairs = []\r\n    # Add your code here\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.append([arr[i], arr[j]])\r\n    return pairs\r\n\r\n\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\nsum = int(input())\r\n\r\n# print(get_pairs_count(arr, n, sum))\r\n\r\n\r","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            d[arr[i]].append(i)\r\n        else:\r\n            d[arr[i]] = [i]\r\n    \r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    sum = 4\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 5, 3, 2, 7]\r\n    n = len(arr)\r\n    sum = 12\r\n    print(get_pairs_count(arr, n, sum))\r\n\r\n    arr = [1, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,","votes":null},{"text":"\r\n    # Initialize the array to store the pairs.\r\n    pairs_count = 0\r\n    # Initialize the array to store the frequencies of the elements.\r\n    freq = [0] * (n+1)\r\n    # Iterate through each element of the array.\r\n    for x in arr:\r\n        # Increase the frequency of the element.\r\n        freq[x] += 1\r\n    # Iterate through each element of the array.\r\n    for x in arr:\r\n        # If the frequency of the element is greater than 1,\r\n        # then the pairs with the element as one of the elements\r\n        # will be formed.\r\n        if freq[x] > 1:\r\n            pairs_count += (freq[x]*(freq[x]-1))\/2\r\n        # Find the number of pairs whose sum is equal to the given sum.\r\n        temp = sum - x\r\n        # If the number is present in the array, then the pairs with\r\n        # the element as one of the elements will be formed.\r\n        if temp in freq:\r\n            pairs_count += freq[temp]*freq[x]\r\n    return pairs_count\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    sum_of_pairs = int(input())\r\n\r\n    result = get_pairs_count(arr, n, sum_of_pairs)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# Sample Input\r\n# 6\r\n# 1 5 3 4 2 6\r\n# 16\r\n\r\n# Sample Output\r\n# 4\r\n\r\n# Explanation\r\n# For the given test case, there ar","votes":null},{"text":"\r\n    # Use a hashtable to store the count of elements\r\n    hash_table = {}\r\n    for i in range(n):\r\n        if arr[i] in hash_table:\r\n            hash_table[arr[i]] += 1\r\n        else:\r\n            hash_table[arr[i]] = 1\r\n\r\n    # Initialize the count\r\n    count = 0\r\n\r\n    # Traverse the array\r\n    for i in range(n):\r\n        diff = sum - arr[i]\r\n\r\n        # If diff is present in the hash_table\r\n        if diff in hash_table and hash_table[diff] != 0:\r\n            count += 1\r\n            hash_table[arr[i]] -= 1\r\n        else:\r\n            hash_table[arr[i]] += 1\r\n\r\n    return count\r\n\r\n\r\narr = [1, 2, 4, 6, 8]\r\nn = len(arr)\r\nsum = 10\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\narr = [1, 3, 1, 5, 10, 6, 1, 3, 9, 10]\r\nn = len(","votes":null},{"text":"\r\n\r\n    count = 0\r\n    table = [0] * (sum + 1)\r\n\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            count += table[arr[i] + arr[j]]\r\n\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [-3, 1, 2, -2, 5, 6]\r\n    n = len(arr)\r\n    sum = 8\r\n\r\n    print(\"Total number of pairs of elements whose sum is\", sum, \"is\", get_pairs_count(arr, n, sum))\r\n\r\n\r\n\"\"\"\r\nTime O(n^2)\r\nSpace O(sum)\r\n\"\"\"\r\n\r\n\"\"\"\r\nTest Case 1:\r\nInput: \r\narr = [-3, 1, 2, -2, 5, 6]\r\nsum = 8\r\nOutput: 3\r\nExplanation:\r\nThe three pairs that have a sum of 8 are:\r\n(1, 7), (2, 6), and (3, 5).\r\n\r\nTest Case 2:\r\nInput: \r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nsum = 10\r\nOutput: 4\r\nExplanation:\r\nThe four pairs that have a sum of 10 are:\r\n(1, 9), (2, 8), (3, 7), and (4, 6).\r\n\r\nTest Case 3:\r\nInput: \r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nsum = 9\r\nOutput: 4\r\nExplanation:\r\nThe four pairs that have a sum of 9 are:\r\n(1, 8), (2, 7), (3","votes":null},{"text":"\r\n\r\n    arr.sort()\r\n    start = 0\r\n    end = n - 1\r\n    count = 0\r\n\r\n    while start < end:\r\n        if arr[start] + arr[end] == sum:\r\n            count += 1\r\n            start += 1\r\n            end -= 1\r\n        elif arr[start] + arr[end] < sum:\r\n            start += 1\r\n        elif arr[start] + arr[end] > sum:\r\n            end -= 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    temp = []\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                temp.append((arr[i], arr[j]))\r\n    return temp\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().","votes":null},{"text":"\r\n    # Write your code here\r\n    pairs = 0\r\n    # make a hashmap\r\n    hm = {}\r\n\r\n    for i in range(n):\r\n        curr = arr[i]\r\n        hm[curr] = i\r\n\r\n    for i in range(n):\r\n        curr = arr[i]\r\n        if curr + sum in hm:\r\n            if i != hm[curr + sum]:\r\n                pairs += 1\r\n\r\n    return pairs\r\n\r\n\r\n# Time: O(n^2)\r\n# Space: O(n)\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    i, j = 0, n - 1\r\n    count = 0\r\n    while i < j:\r\n        if arr[i] + arr[j] == sum:\r\n            count += 1\r\n            i += 1\r\n            j -= 1\r\n        elif arr[i] + arr[j] > sum:\r\n            j -= 1\r\n        else:\r\n            i += 1\r\n\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(\".\/output\/my.txt\", 'w')\r\n    arr_count = int(input())\r\n    arr = list(map(int, input().rstrip().split()))\r\n    sum_value = int(input())\r\n    result = get_pairs_count(arr, arr_count, sum_value)\r\n    fptr.write(str(result) + '\\n')\r\n    fptr.close()\r\n\r\n# Sample Input\r\n# 6\r\n# 1 2 3 4 3 2\r\n# 6\r\n# Sample Output\r\n# 2\r\n# Explanation\r\n# There are two pairs whose sum is equal to 6:\r\n# 1 3\r\n# 1 2\r\n# There are","votes":null},{"text":"\r\n    # Dictionary for storing the\r\n    # frequency of each element\r\n    count = {}\r\n    for i in range(n):\r\n        count[arr[i]] = count.get(arr[i], 0) + 1\r\n    # Initialize result\r\n    result = 0\r\n    # Traverse the array elements\r\n    for i in range(n):\r\n        # Find the matching element\r\n        if (sum - arr[i] in count):\r\n            # Increment the result\r\n            result+=count[sum - arr[i]]\r\n    # Return the result\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            print(arr[i], sum - arr[i], i, d[arr[i]])\r\n        else:\r\n            d[sum - arr[i]] = i\r\n    return\r\n\r\n\r\narr = [1, 1, 2, 4, 5, 8]\r\nn = len(arr)\r\nsum = 10\r\nget_pairs_count(arr, n, sum)\r\n\r\narr = [1, 1, 2, 4, 5, 8]\r\nn = len(arr)\r\nsum = 10\r\nget_pairs_count(arr, n, sum)\r\n\r\narr = [1, 1, 2, 4, 5, 8]\r\nn = len(arr)\r\nsum = 10\r\nget_pairs_count(arr, n, sum)\r\n\r\n\r","votes":null},{"text":"\r\n    # create a frequency table of elements in the array\r\n    freq = [0] * 100\r\n    for i in arr:\r\n        freq[i] += 1\r\n\r\n    pairs = 0\r\n    for i in range(n):\r\n        for j in range(i + 1, n):\r\n            if sum - arr[i] - arr[j] in freq:\r\n                pairs += freq[sum - arr[i] - arr[j]]\r\n\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(0,n):\r\n        if arr[i] in d:\r\n            print(arr[i], d[arr[i]])\r\n            return 1\r\n        else:\r\n            d[sum-arr[i]] = arr[i]\r\n    return 0\r\n\r\narr = [1, 4, 45, 6, 10, 8]\r\nn = len(arr)\r\nsum = 12\r\nprint(get_pairs_count(arr, n, sum))\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Store the results in a set \r\n    # to get only unique pairs\r\n    \r\n    pairs = set()\r\n    \r\n    # The algorithm works on the assumption\r\n    # that there will be no negative numbers\r\n    # in the input array\r\n    for i in range(n - 1):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                pairs.add((arr[i], arr[j]))\r\n                \r\n    return len(pairs)\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    arr = [1, 5, 7, 1, 2, 9]\r\n    n = len(arr)\r\n    sum = 9\r\n    print(\"Number of pairs with sum\", sum, \"is\", get_pairs_count(arr, n, sum))\r\n    \r\n    arr = [1, 3, 5, 7, 9, 11, 15]\r\n    n = len(arr)\r\n    sum = 7\r\n    print(\"Number of pairs with sum\", sum, \"is\", get_pairs_count(arr, n, sum))\r\n    \r\n    arr = [1, 5, 7, 1, 2, 9]\r\n    n = len(arr)\r\n    sum = 10\r\n    print(\"Number of pairs with sum\", sum, \"is\", get_pairs_count(arr, n, sum))\r\n    \r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    n = len(arr)\r\n    sum = 15\r\n    print(\"Number of pairs with sum\", sum, \"is\", get_pairs_count(arr, n, sum))\r\n    \r\n    arr = [1, 2, 3, 4, 5, 6, ","votes":null},{"text":"\r\n    # Create an empty hashmap\r\n    map = {}\r\n\r\n    # Traverse the array\r\n    for i in range(0, n):\r\n        # Check if the required pair is present in hashmap\r\n        if sum - arr[i] in map:\r\n            # Return true\r\n            return True\r\n\r\n        # Insert the current element in the hashmap\r\n        map[arr[i]] = True\r\n\r\n    # Return false as the required pair does not exist\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # use hashmap to store the counts of each element in the array\r\n    # if the hashmap does not contain the element, add it and set the count to 1\r\n    # if the hashmap contains the element, increment the count by 1\r\n\r\n    # Iterate through the array\r\n    hashmap = {}\r\n    for x in arr:\r\n        if x in hashmap:\r\n            hashmap[x] += 1\r\n        else:\r\n            hashmap[x] = 1\r\n\r\n    # Iterate through the hashmap\r\n    count = 0\r\n    for key, val in hashmap.items():\r\n        # if the sum is greater than the required sum, skip to next element\r\n        if sum - key < 0:\r\n            continue\r\n        # if the sum is equal to the required sum, increment the count by 1\r\n        if sum - key == 0:\r\n            count += 1\r\n        # if the sum is less than the required sum, subtract the value from the sum\r\n        # and decrement the value in the hashmap\r\n        else:\r\n            count += val\r\n            hashmap[key] -= 1\r\n            if hashmap[key] == 0:\r\n                del hashmap[key]\r\n\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    sum = int(input())\r\n\r\n    result = get_pairs_count(arr, n, sum)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# Sample Input\r\n\r\n# 6\r\n# 1 5 3 4 2 6\r\n# 8\r\n","votes":null},{"text":"\r\n    # create an empty list\r\n    pairs = [[0, 0]]\r\n    # Sort the array\r\n    arr = sorted(arr)\r\n    # iterate over the array\r\n    for i in range(n):\r\n        # iterate over all pairs\r\n        for j in range(i + 1, n):\r\n            # check if the sum of the pair is equal to the given number\r\n            if arr[i] + arr[j] == sum:\r\n                # create a new pair\r\n                pairs.append([arr[i], arr[j]])\r\n    # return the number of pairs\r\n    return len(pairs)\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    s = int(input())\r\n\r\n    result = get_pairs_count(arr, n, s)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n#\r\n# Sample Input:\r\n# 6\r\n# 1 5 3 4 2 1\r\n# 4\r\n#\r\n# Sample Output:\r\n# 2\r\n","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(n):\r\n        d[arr[i]] = d.get(arr[i], 0) + 1\r\n    count = 0\r\n    for i in range(n):\r\n        if d.get(sum - arr[i], 0) > 0:\r\n            count += d[arr[i]] * d[sum - arr[i]]\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # creating the hash table\r\n    my_dict = {}\r\n    \r\n    # iterating through the array\r\n    for i in range(n):\r\n        # checking if the number is already present in the hash table\r\n        if arr[i] in my_dict:\r\n            # if so, then we increment the count of the pair\r\n            my_dict[arr[i]] += 1\r\n        else:\r\n            # if not, then we add the number to the hash table and set the count to 1\r\n            my_dict[arr[i]] = 1\r\n        \r\n    # iterating through the hash table\r\n    final_pairs = 0\r\n    for key in my_dict:\r\n        # checking if the current element is equal to the sum\r\n        if key == sum:\r\n            # if so, then we increment the final_pairs variable\r\n            final_pairs += my_dict[key] * (my_dict[key] - 1) \/ 2\r\n        else:\r\n            # if not, then we calculate the difference between the number and the sum\r\n            diff = sum - key\r\n            # checking if the difference is present in the hash table\r\n            if diff in my_dict:\r\n                # if so, then we increment the final_pairs variable\r\n                final_pairs += my_dict[key] * my_dict[diff]\r\n    \r\n    return final_pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n    n = int(input())\r\n    arr = [int(arr_temp) for arr_temp in input().split(' ')]\r\n    x = int(input())\r\n    result = get_pairs_count(arr, n, x)\r\n    fptr.write(str(result) + '\\n')\r\n    fptr.close()\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Since, we have to find all pairs, so we can not use a hash table.\r\n    # Therefore, we will use a 2D array to store all possible combinations.\r\n    ans = 0\r\n    table = [[0 for x in range(n)] for y in range(n)]\r\n    \r\n    # Fill table using the method discussed above.\r\n    for i in range(0, n):\r\n        for j in range(i, n):\r\n            if arr[i] + arr[j] == sum:\r\n                ans += 1\r\n                # print(arr[i], arr[j])\r\n                \r\n    return ans\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = map(int, input().split())\r\n    arr = list(arr)\r\n    # print(arr)\r\n    sum = int(input())\r\n    # print(sum)\r\n    ans = get_pairs_count(arr, n, sum)\r\n    print(ans)\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n^2)\r\n\r\n# Sample Input: \r\n# 4\r\n# 1 5 3 4\r\n# 4\r\n\r\n# Sample Output: \r\n# 2\r\n\r\n# Explanation: \r\n# There are two pairs such that their sum is equal to 4:\r\n# (1, 3) and (5, 1)\r\n\r\n# Sample Input: \r\n# 5\r\n# 1 2 3 4 5\r\n# 15\r\n\r\n# Sample Output: \r\n# 0\r\n\r\n# Explanation: \r\n# There are no two pairs with a sum of 15.\r\n\r\n# Sample Input: \r\n# 5\r\n# 1 2 3 4 5\r\n# 3\r\n\r\n# Sample Output: \r\n# 1\r\n","votes":null},{"text":"\r\n    # Create an empty hash map\r\n    # Initialize the result\r\n    result = 0\r\n    for i in range(n):\r\n        complement = sum - arr[i]\r\n        if complement in arr:\r\n            result += 1\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 4,","votes":null}],"time":{"count":18.0,"avg":162987.3546666667,"std":31445.4416098059,"cov":0.1929317871}}
{"id":531,"question":"def min_coins(coins, m, V):\r\n    \"\"\"Write a function to find minimum number of coins that make a given value.\"\"\"","answers":[{"text":"\r\n    V = int(V)\r\n    dp = [float(\"inf\")] * (V + 1)\r\n    dp[0] = 0\r\n    for i in range(1, V + 1):\r\n        for coin in coins:\r\n            if i >= coin:\r\n                dp[i] = min(dp[i], dp[i - coin] + 1)\r\n    return dp[V]\r\n\r\n\r","votes":150427.924},{"text":"\r\n    coins = list(coins)\r\n    coins.sort(reverse=True)\r\n    \r\n    min_coins_needed = [0 for i in range(V+1)]\r\n    for i in range(1, V+1):\r\n        min_coins_needed[i] = min_coins_needed[i-1] + 1\r\n        for j in range(len(coins)):\r\n            if i >= coins[j]:\r\n                min_coins_needed[i] = min(min_coins_needed[i], min_coins_needed[i-coins[j]] + 1)\r\n                \r\n    return min_coins_needed[V]\r\n\r\ncoins = [1, 2, 5, 10, 20]\r\nm = len(coins)\r\nV = 30\r\nprint(min_coins(coins, m, V))\r\n\r\n# Output:\r\n# 4\r\n\r\n# Input: coins = [1, 2, 5, 10, 20], m = 5, V = 30\r\n# Output: 3\r\n# Explanation: The minimum number of coins needed to make 30 is 3. \r\n# When we make 30, we use 10, 10 and 10 coins.\r\n\r\n# Input: coins = [1, 2, 5, 10, 20], m = 5, V = 10\r\n# Output: 2\r\n# Explanation: The minimum number of coins needed to make 10 is 2. \r\n# When we make 10, we use 2 and 5 coins.\r\n\r\n# Input: coins = [1, 2, 5, 10, 20], m = 5, V = 9\r\n# Output: 3\r\n# Explanation: The minimum number of coins needed t","votes":186355.944},{"text":"\r\n    dp = [0 for _ in range(V + 1)]\r\n    for v in range(1, V + 1):\r\n        c = float('inf')\r\n        for coin in coins:\r\n            if v - coin < 0:\r\n                continue\r\n            c = min(c, dp[v - coin] + 1)\r\n        dp[v] = c\r\n    return dp[V]\r\n\r\n\r\nif __name__ == '__main__':\r\n    coins = [1, 3, 4]\r\n    m = 4\r\n    V = 15\r\n    print(min_coins(coins, m, V))\r\n\r\n    coins = [1, 3, 4]\r\n    m = 3\r\n    V = 15\r\n    print(min_coins(coins, m, V))\r\n\r\n    coins = [1, 4, 5]\r\n    m = 3\r\n    V = 11\r\n    print(min_coins(coins, m, V))\r\n\r\n    coins = [1, 3, 4]\r\n    m = 2\r\n    V = 15\r\n    print(min_coins(coins, m, V))\r\n\r\n    coins = [1, 3, 5, 6]\r\n    m = 4\r\n    V = 15\r\n    print(min_coins(coins, m, V))\r\n\r\n    coins = [1, 3, 6, 7, 8]\r\n    m = 5\r\n    V = 15\r\n    print(min_coins(coins, m, V))\r\n\r\n    coins = [1, 3, 6, 7, 8]\r\n    m = 5\r\n    V = 16\r\n    print(min_coins(coins, m, V))","votes":220077.996},{"text":"\r\n    dp = [0] * (V + 1)\r\n    # Base condition\r\n    # If the value V is less than the value of coin\r\n    # at a particular index, then there is no way to make\r\n    # the value V using coins of smaller value\r\n    for i in range(1, V + 1):\r\n        dp[i] = 10 ** 9\r\n\r\n    for i in range(1, V + 1):\r\n        for j in range(m):\r\n            if i >= coins[j]:\r\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\r\n\r\n    if dp[V] != 10 ** 9:\r\n        return dp[V]\r\n    return -1\r\n\r\n\r\n# Driver code\r\ncoins = [3, 5, 7, 10]\r\nm = len(coins)\r\nV = 100\r\nprint(min_coins(coins, m, V))\r\n# Output 4\r\n# Explanation:\r\n# Minimum number of coins required to make 100 = 4.\r\n# 100 = 5 + 50 + 10 + 10\r\n\r\ncoins = [2, 5, 3, 6]\r\nm = len(coins)\r\nV = 10\r\nprint(min_coins(coins, m, V))\r\n# Output 3\r\n# Explanation:\r\n# Minimum number of coins required to make 10 = 3.\r\n# 10 = 5 + 3 + 1\r\n\r\ncoins = [1, 4, 7, 10]\r\nm = len(coins)\r\nV = 11\r\nprint(min_coins(coins, m, V))\r\n# Output -1\r\n# Explanation:\r\n# Minimum number of coin","votes":269994.056},{"text":"\r\n    \r\n    dp = [float(\"inf\")]*V\r\n    dp[0]=0\r\n    \r\n    for coin in coins:\r\n        for j in range(coin,V):\r\n            dp[j]=min(dp[j],dp[j-coin]+1)\r\n    return dp[V-1]\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [[0 for x in range(m+1)] for y in range(V+1)]\r\n    for i in range(m+1):\r\n        dp[i][0] = 0\r\n    for i in range(1, V+1):\r\n        for j in range(1, m+1):\r\n            if coins[j-1] <= i:\r\n                dp[i][j] = min(dp[i][j], 1 + dp[i - coins[j-1]][j])\r\n            else:\r\n                dp[i][j] = dp[i][j-1]\r\n    return dp[V][m]\r\n\r\n# Sample Input\r\n# coins = [1, 2, 3]\r\n# m = 3\r\n# V = 4\r\n\r\n# Sample Output\r\n# 1\r\n\r\n# Explanation\r\n# The minimum number of coins needed is 1, with the denomination being 1.\r\n\r\n# Sample Input\r\n# coins = [1, 2, 3]\r\n# m = 3\r\n# V = 10\r\n\r\n# Sample Output\r\n# 3\r\n\r\n# Explanation\r\n# The minimum number","votes":null},{"text":"\r\n    # Base case\r\n    if m == 0:\r\n        return 0\r\n    if m < 0:\r\n        return float('inf')\r\n    if m in V:\r\n        return 0\r\n\r\n    # Check for all coins\r\n    min_val = float('inf')\r\n    for coin in coins:\r\n        if coin <= m:\r\n            res = min_coins(coins, m - coin, V)\r\n            if res != float('inf'):\r\n                min_val = min(min_val, 1 + res)\r\n    V.add(m)\r\n    return min_val\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    n = len(coins)\r\n    \r\n    # Create a table to store solutions of subproblems.\r\n    # A 2-d matrix is used, where entry memo[i][j] will\r\n    # store the minimum number of coins required for j cents\r\n    # if we are allowed to use coins of values coins[i],\r\n    # coins[i+1], .. coins[n-1].\r\n    memo = [[None for i in range(m+1)] for j in range(n)]\r\n    for i in range(n):\r\n        for j in range(m+1):\r\n            memo[i][j] = [None, None]\r\n    \r\n    # Fill the table in bottom up manner\r\n    for i in range(n):\r\n        for j in range(m+1):\r\n            if j == 0:\r\n                memo[i][j] = (0, [])\r\n            elif coins[i] > j:\r\n                memo[i][j] = memo[i-1][j]\r\n            else:\r\n                x = memo[i-1][j]\r\n                y = memo[i][j-coins[i]]\r\n                if x[0] > y[0]+1:\r\n                    memo[i][j] = y\r\n                else:\r\n                    memo[i][j] = x\r\n    \r\n    # Return the minimum number of coins required for m cents\r\n    # if we are allowed to use coins of values coins[i],\r\n    # coins[i+1], .. coins[n-1]\r\n    return memo[n-1][m]\r\n\r","votes":null},{"text":"\r\n    # make a list of 10000 elements, and initialize each element to -1\r\n    dp = [-1] * 10001\r\n    dp[0] = 0\r\n    # initialize V to 0\r\n    V = 0\r\n    # put the value of V in the first element of the list\r\n    for i in range(len(coins)):\r\n        for j in range(1, len(coins) + 1):\r\n            if j - coins[i] >= 0:\r\n                dp[j] = min(dp[j], dp[j - coins[i]] + 1)\r\n    return dp[V]\r\n\r\nprint(min_coins([1, 2, 5], 11, 11))\r\nprint(min_coins([1, 2, 5], 10, 10))\r\nprint(","votes":null},{"text":"\r\n    dp = [0 for _ in range(m)]\r\n\r\n    for i in range(1, m):\r\n        for coin in coins:\r\n            if coin <= i:\r\n                dp[i] = min(dp[i], dp[i - coin] + 1)\r\n\r\n    return dp[m - 1]\r\n\r\n\r\n# Test Cases\r\nassert min_coins([1, 3, 4], 11, 11) == 3\r\nassert min_coins([1, 3, 4], 11, 10) == 3\r\nassert min_coins([1, 3, 4], 11, 9) == 3\r\nassert min_coins([1, 3, 4], 11, 8) == 3\r\nassert min_coins([1, 3, 4], 11, 7) == 3\r\nassert min_coins([1, 3, 4], 11, 6) == 2\r\nassert min_coins([1, 3, 4], 11, 5) == 2\r\nassert min_coins([1, 3, 4], 11, 4) == 2\r\nassert min_coins([1, 3, 4], 11, 3) == 1\r\nassert min_coins([1, 3, 4], 11, 2) == 1\r\nassert min_coins([1, 3, 4], 11, 1) == 0\r\nassert min_coins([1, 3, 4], 11, 0) == 0\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    count = [0 for _ in range(V + 1)]\r\n    for i in range(0, m + 1):\r\n        count[i] = 1\r\n    for i in range(m + 1, V + 1):\r\n        min_coins = sys.maxsize\r\n        for j in range(0, i):\r\n            if (i - j) in coins:\r\n                min_coins = min(min_coins, count[j] + 1)\r\n        count[i] = min_coins\r\n    return count[V]\r\n\r","votes":null},{"text":"\r\n\r\n    min_coins = [0] * (m + 1)\r\n\r\n    for j in range(1, m + 1):\r\n        min_coins[j] = m + 1\r\n\r\n        for i in range(0, len(coins)):\r\n            if j >= coins[i]:\r\n                min_coins[j] = min(min_coins[j], min_coins[j - coins[i]] + 1)\r\n\r\n    if min_coins[V] == m + 1:\r\n        return -1\r\n    else:\r\n        return min_coins[V]\r\n\r\n\r","votes":null},{"text":"\r\n    # Make a table to store solutions of sub problems.\r\n    # size of table = (m+1, V+1)\r\n    table = [[0 for x in range(V + 1)] for x in range(m + 1)]\r\n\r\n    # Fill table using recursive relation\r\n    for i in range(m + 1):\r\n        for j in range(V + 1):\r\n            # If coin value is greater than amount, no solution exists.\r\n            if j < coins[i]:\r\n                table[i][j] = -1\r\n            # If coin value is equal to amount, then 1 solution exists.\r\n            elif j == coins[i]:\r\n                table[i][j] = 1\r\n            # Find the minimum number of coins needed to make the amount.\r\n            else:\r\n                # Initialize table with -1, means no solution exists.\r\n                table[i][j] = -1\r\n                # Try subtracting all coin values one by one and update the answer.\r\n                for k in range(i, m):\r\n                    if table[i][j - coins[k]] != -1:\r\n                        # Pick the minimum of 1 + solutions or table[i][j-coins[k]]\r\n                        table[i][j] = min(table[i][j], 1 + table[i][j - coins[k]])\r\n\r\n   ","votes":null},{"text":"\r\n    M = [0] * (m + 1)\r\n    for i in range(1, m+1):\r\n        x = 0\r\n        for j in range(0, len(coins)):\r\n            if coins[j] <= i:\r\n                x = max(x, M[i - coins[j]] + 1)\r\n        M[i] = x\r\n    return M[V]\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n    if m < 0:\r\n        return float('inf')\r\n    if m in V:\r\n        return V[m]\r\n    \r\n    min_res = float('inf')\r\n    \r\n    for coin in coins:\r\n        res = min_coins(coins, m - coin, V)\r\n        if res < min_res:\r\n            min_res = res\r\n        \r\n    V[m] = min_res + 1\r\n    return V[m]\r\n\r\nif __name__ == '__main__':\r\n    coins = [1, 2, 3]\r\n    m = 4\r\n    V = {}\r\n    print(min_coins(coins, m, V))\r\n    \r\n\"\"\"\r\n[1, 2, 3]\r\n4\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n    elif m < 0 or m > V:\r\n        return float('inf')\r\n    else:\r\n        return 1 + min(min_coins(coins, m - coins[i], V) for i in range(len(coins)))\r\n\r\n\r\n# Tests\r\n\r\ncoins = [1, 2, 5, 10, 20, 50, 100, 200]\r\nm = 200\r\nV = 200\r\nprint(min_coins(coins, m, V))\r\n\r\ncoins = [2, 5, 10, 21, 25]\r\nm = 28\r\nV = 28\r\nprint(min_coins(coins, m, V))\r\n\r\ncoins = [1, 2, 5]\r\nm = 11\r\nV = 11\r\nprint(min_coins(coins, m, V))\r\n\r\ncoins = [1, 2, 5]\r\nm = 12\r\nV = 12\r\nprint(min_coins(coins, m, V))\r\n\r\ncoins = [1, 2, 5]\r\nm = 13\r\nV = 13\r\nprint(min_coins(coins, m, V))\r\n\r\ncoins = [1, 2, 5]\r\nm = 20\r\nV = 20\r\nprint(min_coins(coins, m, V))\r\n\r\ncoins = [1, 2, 5]\r\nm = 21\r\nV = 21\r\nprint(min_coins(coins, m, V))\r\n\r\ncoins = [1, 2, 5]\r\nm = 22\r\nV = 22\r\nprint(min","votes":null},{"text":"\r\n    dp = [float(\"inf\") for _ in range(V + 1)]\r\n    dp[0] = 0\r\n    for coin in coins:\r\n        for i in range(coin, V + 1):\r\n            dp[i] = min(dp[i], dp[i - coin] + 1)\r\n    if dp[m] == float(\"inf\"):\r\n        return -1\r\n    return dp[m]\r\n\r\n\r","votes":null},{"text":"\r\n    # A coin value of 0 is not considered.\r\n    if m <= 0:\r\n        return 0\r\n    # If the required value is not divisible by any of the coins, return -1\r\n    for coin in coins:\r\n        if m % coin == 0:\r\n            return m \/\/ coin\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if m == 0:\r\n        return 0\r\n    elif m < 0 or m > V:\r\n        return float('inf')\r\n    # Recursive case\r\n    else:\r\n        return min(min_coins(coins, m - coins[i], V) + 1 for i in range(len(coins)))\r\n\r\n\r","votes":null},{"text":"\r\n    \"\"\"Returns None if the value cannot be made.\"\"\"\r\n    if V == 0:\r\n        return 0\r\n    if V < 0:\r\n        return None\r\n    if coins == None or len(coins) == 0:\r\n        return None\r\n    min_coins = float(\"inf\")\r\n    for coin in coins:\r\n        if coin <= V:\r\n            sub_result = min_coins(coins, m, V - coin)\r\n            if sub_result != None:\r\n                min_coins = min(min_coins, 1 + sub_result)\r\n    return min_coins\r\n\r\n#print min_coins([1, 2, 10], 3, 11)\r\n\r\n","votes":null},{"text":"\r\n    coins.sort()\r\n    \r\n    # initialize a table to store results of subproblems\r\n    table = [0] * (V + 1)\r\n    \r\n    # table[i] will be storing the minimum number of coins required for i value.\r\n    # We need n columns to store values upto n value.\r\n    # We need to fill the table in bottom up manner\r\n    for i in range(1, V + 1):\r\n        minimum = float(\"inf\")\r\n        for j in range(0, m):\r\n            if i >= coins[j]:\r\n                minimum = min(minimum, table[i - coins[j]] + 1)\r\n        table[i] = minimum\r\n    \r\n    return table[V]\r\n\r\ncoins = [1, 2, 5, 10, 20, 50, 100, 200]\r\nm = len(coins)\r\nV = 210\r\n\r\n# print the minimum number of coins required for value V\r\nprint(min_coins(coins, m, V))\r\n# 12\r\n\r\n# Print the minimum number of coins required for value V = 125\r\nprint(min_coins(coins, m, 125))\r\n# 5\r\n\r\n# Print the minimum number of coins required for value V = 255\r\nprint(min_coins(coins, m, 255))\r\n# 7\r\n\r\n# Print the minimum number of coins required for value V = 475\r\nprint(min_coins(coins, m, 475))\r\n# 9\r\n\r\n# Print the minimum number of coins required for value V = 498\r\nprint(min_coins(coins, m, 498))\r\n# 11\r\n\r\n# Print the minimum number of coins required for value V = 777\r\nprin","votes":null},{"text":"\r\n    \r\n    # Table of values is initialized to 0 (value 0 needs 0 coins).\r\n    table = [0 for v in range(m + 1)]\r\n    \r\n    # Minimum number of coins needed for values in range 1 to m is 1.\r\n    table[1] = 1\r\n    \r\n    # Iterate through all the values from 2 to m and update the table\r\n    # to find minimum number of coins needed for the current value.\r\n    for i in range(2, m + 1):\r\n        \r\n        # Start with the minimum number of coins needed for previous value.\r\n        min_coins = table[i - 1]\r\n        \r\n        # Consider all the coins smaller than the current value. \r\n        for j in range(len(coins)):\r\n            \r\n            # If the current coin is smaller than the current value,\r\n            # then check if the current value minus this coin gives a\r\n            # value that is already present in the table.\r\n            if coins[j] <= i and table[i - coins[j]] != -1:\r\n                \r\n                # If it is found, then check if the minimum number of coins\r\n                # needed for this value is less than the current minimum number\r\n                # of coins needed for the current value. If yes, then update the\r\n                # minimum number of coins needed for the current value.\r\n                if table[i - coins[j]] + 1 < min_coins:\r\n                    min_coins = table[i - coins[j]] + 1\r\n        \r\n        # Store the minimum number of coins needed for the current value in\r\n        # the table.\r\n        table[i] = min_coins\r\n    \r\n    # Return the minimum number of coins needed for the given value.\r\n    return table[V]\r\n\r\n# Driver code\r\ncoins = [1, 5, 10, 20, 50, 100,","votes":null},{"text":"\r\n    # Write your code here\r\n    if m < 0:\r\n        return -1\r\n    if m == 0:\r\n        return 0\r\n\r\n    if m in coins:\r\n        return 1\r\n\r\n    min_coins = float('inf')\r\n    for coin in coins:\r\n        min_coins = min(min_coins, min_coins(coins, m - coin, V))\r\n    return min_coins\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n    elif m < 0 or m > V:\r\n        return float('inf')\r\n    return min(min_coins(coins, m - c, V) + 1 for c in coins if c <= m)\r\n\r\n\r","votes":null},{"text":"\r\n    # base case: m = 0\r\n    # return 0\r\n    \r\n    # recursive case: m > 0\r\n    # if m is not divisible by coins[i]\r\n    #     return min_coins(coins, m, V) + 1\r\n    # else: \r\n        # return min_coins(coins, m - coins[i], V)\r\n    \r\n    # return 1 + min_coins(coins, m - coins[i], V)\r\n    \r\n    # optimal substructure property:\r\n    # min_coins(coins, m, V) = min(min_coins(coins, m, V), 1 + min_coins(coins, m - coins[i], V))\r\n    \r\n    if m == 0:\r\n        return 0\r\n    \r\n    min_coins = m\r\n    \r\n    for i in range(len(coins)):\r\n        if m >= coins[i]:\r\n            min_coins = min(min_coins, 1 + min_coins(coins, m - coins[i], V))\r\n            \r\n    return min_coins\r\n    \r\ncoins = [1, 3, 4]\r\nm = 8\r\nV = 4\r\n\r\nprint(min_coins(coins, m, V))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n\r\n    # Base condition\r\n    if m == 0:\r\n        return 0\r\n    if m < 0:\r\n        return -1\r\n\r\n    # Initialize result\r\n    res = float('inf')\r\n\r\n    # Traverse all coins smaller than m\r\n    for i in range(len(coins)):\r\n        if coins[i] <= m:\r\n            res = min(res, 1 + min_coins(coins, m - coins[i], V))\r\n\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    # Making the array to store the results\r\n    res = [0] * (m + 1)\r\n\r\n    # Fill res[0] with 0, and res[1] with 1\r\n    for i in range(1, m + 1):\r\n        res[i] = 1000000000\r\n\r\n    # Fill the entries in res[] using recursive property\r\n    for i in range(1, m + 1):\r\n        # Try all the denominations one by one, and update the result\r\n        for j in range(0, len(coins)):\r\n            if i - coins[j] >= 0:\r\n                res[i] = min(res[i], res[i - coins[j]] + 1)\r\n\r\n    # If result for value V is -1, then it is not possible to\r\n    # make the change\r\n    if (res[V] == 1000000000):\r\n        return -1\r\n\r\n    # Return result\r\n    return res[V]\r\n\r\n\r\ncoins = [1, 2, 3]\r\nV = 4\r\nprint(min_coins(coins, 3, V))\r\n\r\n\r\n# Another way is to use Dynamic Programming.\r\n\r","votes":null},{"text":"\r\n    # return 0 if n is 0\r\n    if m == 0:\r\n        return 0\r\n\r\n    # return -1 if n is less than 0\r\n    if m < 0:\r\n        return -1\r\n\r\n    # return 1 if n is equal to 1\r\n    if m == 1:\r\n        return 1\r\n\r\n    # initialize the array for the size of m+1\r\n    dp = [0] * (m + 1)\r\n\r\n    # loop over the array from 0 to n\r\n    for i in range(1, m + 1):\r\n        min_coins = float('inf')\r\n\r\n        # loop over the coins array\r\n        for j in range(len(coins)):\r\n            if coins[j] <= i:\r\n                # if the coin is less than the current m value\r\n                temp_coins = dp[i - coins[j]]\r\n\r\n                # if the temp coins is greater than the min_coins\r\n                if temp_coins != -1 and temp_coins + 1 < min_coins:\r\n                    min_coins = temp_coins + 1\r\n\r\n        # set the dp value in the current index value\r\n        dp[i] = min_coins\r\n\r\n    # return the dp array value\r\n    return dp[m]\r\n\r\n\r","votes":null},{"text":"\r\n    if m <= 0:\r\n        return 0\r\n    elif m < len(coins):\r\n        return coins[m-1] + min_coins(coins, m-coins[m-1], V)\r\n    else:\r\n        return min(min_coins(coins, m-coins[i], V) + 1\r\n                   for i in range(len(coins)))\r\n\r\n\r","votes":null},{"text":"\r\n    V.append(0)\r\n    for i in range(1, m + 1):\r\n        V[i] = float('inf')\r\n    for i in range(m + 1):\r\n        if V[i] == float('inf'):\r\n            continue\r\n        for j in range(len(coins)):\r\n            if coins[j] > i:\r\n                continue\r\n            V[i + coins[j]] = min(V[i], V[i - coins[j]] + 1)\r\n    return V[m]\r\n\r\n\r","votes":null},{"text":"\r\n    min_coins_given_value = [0] * (m + 1)\r\n    for i in range(m + 1):\r\n        min_coins_given_value[i] = float(\"inf\")\r\n\r\n    for i in range(1, m + 1):\r\n        for j in range(len(coins)):\r\n            if i - coins[j] >= 0:\r\n                min_coins_given_value[i] = min(min_coins_given_value[i],\r\n                                               min_coins_given_value[i - coins[j]] + 1)\r\n\r\n    if min_coins_given_value[V] == float(\"inf\"):\r\n        return -1\r\n    else:\r\n        return min_coins_given_value[V]\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [float('inf')] * (m + 1)\r\n    dp[0] = 0\r\n    for v in range(1, m + 1):\r\n        for c in coins:\r\n            if c <= v:\r\n                dp[v] = min(dp[v], dp[v - c] + 1)\r\n    if dp[m] == float('inf'):\r\n        return 'Impossible'\r\n    return dp[m]\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [0] * (m + 1)\r\n\r\n    for i in range(1, m + 1):\r\n        for coin in coins:\r\n            if coin <= i:\r\n                dp[i] = min(dp[i], dp[i - coin] + 1)\r\n\r\n    if dp[m] == 0:\r\n        return -1\r\n    else:\r\n        return dp[m]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(min_coins([1, 5, 10, 25], 10, 100))\r\n    print(min_coins([1, 5, 10, 25], 10, 25))\r\n    print(min_coins([1, 5, 10, 25], 10, 12))\r\n    print(min_coins([1, 5, 10, 25], 5, 60))\r\n    print(min_coins([1, 5, 10, 25], 5, 61))\r\n    print(min_coins([1, 5, 10, 25], 5, 65))\r\n    print(min_coins([1, 5, 10, 25], 10, 110))\r\n","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n    if m < 0:\r\n        return float('inf')\r\n    if m in coins:\r\n        return 1\r\n    \r\n    min_coins = float('inf')\r\n    for i in range(len(coins)):\r\n        min_coins = min(min_coins, min_coins(coins, m-coins[i], V))\r\n    return min_coins + 1\r\n\r\n\r","votes":null},{"text":"\r\n    # coins: list of values of coins\r\n    # m: number of coins\r\n    # V: value to be made\r\n    \r\n    # create a table to store results of subproblems\r\n    table = [[0 for x in range(V+1)] for y in range(m+1)]\r\n    \r\n    # Fill table using above recursive formula\r\n    for i in range(m+1):\r\n        for j in range(V+1):\r\n            if i==0:\r\n                table[i][j] = 0\r\n            elif j==0:\r\n                table[i][j] = 0\r\n            elif coins[i-1] <= j:\r\n                table[i][j] = 1 + table[i][j-coins[i-1]]\r\n            else:\r\n                table[i][j] = table[i-1][j]\r\n    \r\n    # return result\r\n    return table[m][V]\r\n\r\n\r\ncoins = [1, 5, 10, 25]\r\nm = len(coins)\r\nV = 12\r\n\r\nprint('Minimum number of coins required =', min_coins(coins, m, V))\r\n\r\n\r","votes":null},{"text":"\r\n    if m <= 0:\r\n        return 0\r\n    elif m in V:\r\n        return V[m]\r\n    else:\r\n        min_coins = float('inf')\r\n\r\n        for coin in coins:\r\n            if coin <= m:\r\n                m_new = m - coin\r\n                min_coins = min(min_coins, 1+min_coins(coins, m_new, V))\r\n\r\n        V[m] = min_coins\r\n        return min_coins\r\n\r\n\r","votes":null},{"text":"\r\n    m = [0]*(V+1)\r\n    for i in range(0, V+1):\r\n        for j in range(0, len(coins)):\r\n            if i-coins[j] >= 0:\r\n                m[i] = min(m[i], 1 + m[i-coins[j]])\r\n    return m[V]\r\n\r\n\r\nprint(min_coins([2, 5, 3, 6], 4, 6))  # 3\r\nprint(min_coins([1, 6, 11, 15], 6, 17))  # 2\r\nprint(min_coins([2, 5, 3, 6], 4, 4))  # 0\r\nprint(min_coins([2, 5, 3, 6], 4, 7))  # 1\r\nprint(min_coins([2, 5, 3, 6], 4, 8))  # 2\r\nprint(min_coins([2, 5, 3, 6], 4, 9))  # 2\r\nprint(min_coins([2, 5, 3, 6], 4, 10))  # 2\r\nprint(min_coins([2, 5, 3, 6], 4, 11))  # 2\r\nprint(min_coins([2, 5, 3, 6], 4, 12))  # 3\r\nprint(min_coins([2, 5, 3, 6], 4, 13))  # 3\r\nprint(min_coins([2, 5, 3, 6], 4, 14))  # 3\r\nprint(min_coins([2, 5, 3, 6], 4, 15))  # 3\r\nprint(min_coins([2, 5","votes":null},{"text":"\r\n    min_coins = [0 for _ in range(V + 1)]\r\n    for i in range(1, V + 1):\r\n        min_coins[i] = m + 1\r\n        for j in range(0, m):\r\n            if coins[j] <= i:\r\n                min_coins[i] = min(min_coins[i], 1 + min_coins[i - coins[j]])\r\n    return min_coins[V]\r\n\r\n\r\nif __name__ == '__main__':\r\n    coins = [1, 4, 5]\r\n    m = len(coins)\r\n    V = 11\r\n    print(min_coins(coins, m, V))  # 3\r\n\r\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]\r\n    m = len(coins)\r\n    V = 240\r\n    print(min_coins(coins, m, V))  # 4\r\n\r\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]\r\n    m = len(coins)\r\n    V = 241\r\n    print(min_coins(coins, m, V))  # 5\r\n\r\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]\r\n    m = len(coins)\r\n    V = 111\r\n    print(min_coins(coins, m, V))  # 1\r\n\r\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]\r\n    m = len(coins)\r\n    V =","votes":null},{"text":"\r\n    \r\n    # initialize a table of size V+1\r\n    table = [0] * (V + 1)\r\n    \r\n    # Initialize table with all coin values\r\n    for i in range(0, len(coins)):\r\n        table[coins[i]] = 1\r\n\r\n    # Fill the rest of the table\r\n    for i in range(m+1, V+1):\r\n        min_coins = table[i-m] + 1\r\n        for j in range(m, i):\r\n            if table[j] > 0:\r\n                if table[i] > table[j] + 1:\r\n                    table[i] = table[j] + 1\r\n\r\n    return table[V]\r\n\r\n\r\n# driver program to test above function\r\n# This function prints minimum number of coins required for a specific value\r\ncoins = [1, 2, 5, 10]\r\nm = 10\r\nV = 17\r\nprint(\"Minimum number of coins required is %d\" % min_co","votes":null},{"text":"\r\n    # create a table of length V + 1\r\n    table = [0]*(V+1)\r\n    # for each coin\r\n    for coin in coins:\r\n        # for each value\r\n        for i in range(coin, V+1):\r\n            # if the value is less than the coin, the minimum number of coins is\r\n            # the previous number of coins, which is 0\r\n            # if the value is greater than the coin, the minimum number of coins is\r\n            # the smaller number of coins, which is the current value of the table\r\n            # plus 1\r\n            table[i] = min(table[i], table[i-coin] + 1)\r\n\r\n    # return the lowest value in the table\r\n    return table[m]\r\n\r\n\r\n# Tests\r\n\r","votes":null},{"text":"\r\n    dp = [float('inf')] * (m + 1)\r\n    dp[0] = 0\r\n    for v in range(1, m + 1):\r\n        for coin in coins:\r\n            if coin <= v:\r\n                dp[v] = min(dp[v], dp[v - coin] + 1)\r\n    if dp[m] == float('inf'):\r\n        return -1\r\n    return dp[m]\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if m == 0:\r\n        return 0\r\n    # If value is less than 0\r\n    if m < 0:\r\n        return -1\r\n    # If a coin value is greater than the given value\r\n    if coins[len(coins)-1] > m:\r\n        return -1\r\n    # Initialize the minimum number of coins required as infinity\r\n    min_coins = float('inf')\r\n    # Start from the last coin\r\n    for i in range(len(coins)):\r\n        # Find the number of coins required for the given value\r\n        # with the last coin value. If the result is greater\r\n        # than the current minimum number of coins, then ignore\r\n        # them.\r\n        temp_coins = min_coins(coins, m - coins[i], V)\r\n        if temp_coins != -1:\r\n            temp_coins += 1\r\n            if temp_coins < min_coins:\r\n                min_coins = temp_coins\r\n    # Return the minimum number of coins required.\r\n    return min_coins\r\n\r\n\r\nprint(min_coins([1, 5, 10, 25], 50, 5))\r\n\r\n\r","votes":null},{"text":"\r\n    if V == 0:\r\n        return 0\r\n    elif m == 0:\r\n        return float('inf')\r\n    else:\r\n        return min(coins[V-1] + min_coins(coins, m, V-coins[V-1]),\r\n                   min_coins(coins, m, V))\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n    elif m < 0:\r\n        return float('inf')\r\n    elif m in coins:\r\n        return 1\r\n    else:\r\n        return 1 + min(min_coins(coins, m - coin, V) for coin in coins if coin <= m)\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    dp = [0 for i in range(m + 1)]\r\n    for i in range(1, m + 1):\r\n        dp[i] = float('inf')\r\n        for j in range(len(coins)):\r\n            if i - coins[j] >= 0:\r\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\r\n    if dp[V] == float('inf'):\r\n        return -1\r\n    return dp[V]\r\n\r\n\r","votes":null},{"text":"\r\n    # Base Case\r\n    if m == 0:\r\n        return 0\r\n    # Choose minimum of 1) including the coin or 2) excluding the coin\r\n    return min(coins[V - 1], 1 + min_coins(coins, m - 1, V - 1))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    \r\n    # If value is 0, return 0\r\n    if V == 0:\r\n        return 0\r\n\r\n    # If value is less than 0, return -1\r\n    if V < 0:\r\n        return -1\r\n\r\n    # Find minimum number of coins required to make 'm' units of value 'V'\r\n    # If no coin is available\r\n    if m == 0:\r\n        return -1\r\n\r\n    # If coin value is greater than the value V\r\n    if coins[m-1] > V:\r\n        # Exclude this coin and try with remaining coins\r\n        return min_coins(coins, m, V)\r\n\r\n    # If coin value is less than the value V\r\n    else:\r\n        # Exclude this coin and try with all the remaining coins\r\n        # min_coins(coins, m-1, V) will try to find out the answer with\r\n        # 1 less coin and with the value V\r\n        # min_coins(coins, m, V-coins[m-1]) will try to find out the answer with\r\n        # 1 more coin and with the value V-coins[m-1]\r\n        # min(x, y) returns the minimum of two numbers x and y\r\n        return min(min_coins(coins, m, V), 1 + min_coins(coins, m-1, V - coins[m-1]))\r\n\r\n\r\ncoins = [1, 2, 3]\r\nm = len(coins)\r\nV = 4\r\n\r\nprint(min_coins(coins, m, V))\r\n# 2\r\n\r\nV = 5\r\nprint(min_coins(coins, m, V))\r\n# 1\r\n\r\nV = 6\r\nprint(min_coins(coins, m, V))\r\n# 1\r\n\r","votes":null},{"text":"\r\n    dp = [float('inf')] * (m + 1)\r\n    dp[0] = 0\r\n\r\n    for i in range(V):\r\n        for coin in coins:\r\n            if coin > i:\r\n                continue\r\n            else:\r\n                dp[i] = min(dp[i], dp[i - coin] + 1)\r\n\r\n    return dp[m]\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize the table\r\n    table = [0] * (m + 1)\r\n    # Initialize the table with some value\r\n    for i in range(m + 1):\r\n        table[i] = V + 1\r\n    table[0] = 0\r\n    # Build the table\r\n    for i in range(1, m + 1):\r\n        for j in range(coins[i - 1], V + 1):\r\n            table[j] = min(table[j], 1 + table[j - coins[i - 1]])\r\n    # return the result\r\n    return table[V]\r\n\r\n\r","votes":null},{"text":"\r\n    coins.sort(reverse = True)\r\n    coins_used = [0] * (m+1)\r\n    \r\n    for i in range(1,m+1):\r\n        for j in range(len(coins)):\r\n            if i >= coins[j]:\r\n                coins_used[i] = max(coins_used[i], coins_used[i - coins[j]] + 1)\r\n    return coins_used[V]\r\n\r\n#Example:\r\ncoins = [2,5,3,6]\r\nm = 4\r\nV = 10\r\nprint(min_coins(coins,m,V))\r\n\r\n#Output:\r\n#3\r\n\r\n\r\n#Algorithm:\r\n# We start from the largest coin and try to make change using it. If we can't make change using the largest coin, we remove the largest coin and try again. We continue this process until we are unable to remove the largest coin.\r\n\r\n#We start off with an array coins_used[V+1] where coins_used[i] gives the minimum number of coins required to make a value of i. \r\n\r\n#coins_used[0] = 0 as it requires 0 coins to make a value of 0.\r\n\r\n#coins_used[1] = 1 as it requires 1 coins to make a value of 1.\r\n\r\n#coins_used[2] = 1 as it requires 1 coins to make a value of 2.\r\n\r\n#coins_used[3] = 2 as it requires 2 coins to make a value of 3.\r\n\r\n#coins_used[4] = 2 as it requires 2 coins to make a value of 4.\r\n\r\n#coins_used[5] = 3 as it requires 3 coins to make a value of 5.\r\n\r\n#coins_used[6] = 3 as it requires 3 coins to mak","votes":null},{"text":"\r\n    #write code here\r\n    dp = [float('inf')] * (m + 1)\r\n    dp[0] = 0\r\n    \r\n    for i in range(m + 1):\r\n        for j in range(i, m + 1):\r\n            if dp[i] != float('inf'):\r\n                if j - i >= 0 and dp[j - i] != float('inf'):\r\n                    if dp[j] > dp[i] + dp[j - i]:\r\n                        dp[j] = dp[i] + dp[j - i]\r\n    \r\n    if dp[V] != float('inf'):\r\n        return dp[V]\r\n    else:\r\n        return -1\r\n\r\n\r\n# Driver code\r\ncoins = {2, 3, 4, 5, 6}\r\nm = 12\r\nV = 11\r\n\r\nprint(min_coins(coins, m, V))\r\n\r\n\"\"\"\r\nTime Complexity: O(n*m)\r\nSpace Complexity: O(m)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\nEnter the values of coins: 2 3 4 5 6\r\nEnter the value of m: 12\r\nEnter the value of V: 11\r\nOutput: 2\r\n\r\nSAMPLE 2\r\nEnter the values of coins: 5 7 10 15 20\r\nEnter the value of m: 40\r\nEnter the value of V: 24\r\nOutput: 3\r\n\r\nSAMPLE 3\r\nEnter the values of coins: 1 2 3\r\nEnter the value of m: 5\r\nEnter the value of V: 10\r\nOutput: -1\r\n\r\nSAMPLE 4\r\nEnter the values of coins: 1 5 10","votes":null},{"text":"\r\n    # m is the value we need to find minimum coins for\r\n    # V is a list of coins in descending order\r\n\r\n    # table[i] stores minimum number of coins needed to make i cents\r\n    table = [0] * (m + 1)\r\n\r\n    for i in range(1, m + 1):\r\n        min_coins = float(\"inf\")\r\n        for coin in V:\r\n            if i - coin >= 0:\r\n                min_coins = min(\r\n                    min_coins, 1 + table[i - coin]\r\n                )\r\n\r\n        table[i] = min_coins\r\n\r\n    return table[m]\r\n\r\n\r","votes":null},{"text":"\r\n    # base case\r\n    if m == 0:\r\n        return 0\r\n    if m < 0:\r\n        return None\r\n\r\n    # recursive case\r\n    res = None\r\n\r\n    for coin in coins:\r\n        if coin <= m:\r\n            subproblem = min_coins(coins, m - coin, V)\r\n\r\n            if subproblem is None:\r\n                continue\r\n\r\n            res = subproblem + 1\r\n            if res < V[m]:\r\n                V[m] = res\r\n\r\n    return V[m]\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n\r\n    if m < 0:\r\n        return float(\"inf\")\r\n\r\n    if m < coins[0]:\r\n        return min_coins(coins, m, V)\r\n\r\n    return 1 + min(min_coins(coins, m - coins[i], V), min_coins(coins, m, V))\r\n\r\n\r\ncoins = [1, 2, 5, 10, 20, 50, 100, 200]\r\nm = 23\r\n\r\nprint(min_coins(coins, m, len(coins)))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    dp = [float(\"inf\")] * (m+1)\r\n    dp[0] = 0\r\n\r\n    for i in range(V+1):\r\n        for coin in coins:\r\n            if i >= coin:\r\n                dp[i] = min(dp[i], dp[i-coin] + 1)\r\n    return dp[V]\r\n\r\n\r\ncoins = [1, 5, 10, 25]\r\nprint(min_coins(coins, 4, 25))\r\n\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r\n# 4\r","votes":null},{"text":"\r\n    \r\n    # initialize coin array with -1\r\n    coin_array = [0] * (m + 1)\r\n    \r\n    # initialize the coin_array with -1\r\n    coin_array[0] = 0\r\n    \r\n    # we start with the coin array with 1\r\n    for i in range(1, m + 1):\r\n        \r\n        # initialize the coin_array with -1\r\n        coin_array[i] = -1\r\n        \r\n        # check for every coin\r\n        for j in range(0, len(coins)):\r\n            \r\n            # check if coin is smaller than i\r\n            if coins[j] <= i:\r\n                \r\n                # if coin_array[i - coins[j]] is -1 then we need to find out the minimum coin\r\n                if coin_array[i - coins[j]] != -1:\r\n                    \r\n                    # if the minimum coin is greater than coin_array[i] then we assign it to coin_array[i]\r\n                    if coin_array[i] == -1 or coin_array[i - coins[j]] + 1 < coin_array[i]:\r\n                        \r\n                        # update the coin_array with coin_array[i - coins[j]] + 1\r\n                        coin_array[i] = coin_array[i - coins[j]] + 1\r\n                        \r\n    # return coin_array[m]\r\n    return coin_array[m]\r\n\r\n#","votes":null},{"text":"\r\n    # Initialize the number of coins for V.\r\n    c = [float('inf') for i in range(V + 1)]\r\n    c[0] = 0\r\n\r\n    # Initialize the table c to store results.\r\n    for i in range(m + 1):\r\n        for j in range(V + 1):\r\n            if j - coins[i] >= 0:\r\n                c[j] = min(c[j], c[j - coins[i]] + 1)\r\n\r\n    return c[V]\r\n\r\n\r\n# Driver code\r\ncoins = [1, 2, 3]\r\nm = len(coins)\r\nV = 5\r\n\r\nprint(\"Minimum number of coins required is\", min_coins(coins, m, V))\r\n\r\n# This code is contributed by Keshav Mahajan.\r\n\r\n# OUTPUT:\r\n\r\n# Minimum number of coins required is 2\r\n\r\n# 2. Minimum number of coins required in a given value.\r","votes":null},{"text":"\r\n    d = [0] * (m + 1)\r\n    for i in range(1, m + 1):\r\n        c = float(\"inf\")\r\n        for j in range(0, len(coins)):\r\n            if coins[j] <= i:\r\n                c = min(c, 1 + d[i - coins[j]])\r\n        d[i] = c\r\n    return d[V]\r\n\r\n\r","votes":null},{"text":"\r\n    if(m==0):\r\n        return 0\r\n    elif(m<0):\r\n        return float('inf')\r\n    elif(m in V):\r\n        return V[m]\r\n    else:\r\n        min_coins = float('inf')\r\n        for i in range(len(coins)):\r\n            min_coins = min(min_coins, 1+min_coins(coins, m-coins[i], V))\r\n        V[m] = min_coins\r\n        return min_coins\r\n\r\ncoins = [1, 2, 5]\r\nV = {}\r\n\r\nm = 11\r\nprint(min_coins(coins, m, V))\r\n\r\nm = 10\r\nprint(min_coins(coins, m, V))\r\n\r\nm = 9\r\nprint(min_coins(coins, m, V))\r\n\r\nm = 8\r\nprint(min_coins(coins, m, V))\r\n\r\nm = 7\r\nprint(min_coins(coins, m, V))\r\n\r\nm = 6\r\nprint(min_coins(coins, m, V))\r\n\r\nm = 5\r\nprint(min_coins(","votes":null},{"text":"\r\n    dp = [0] * (V + 1)\r\n    # dp[i] = minimum number of coins needed to make value i\r\n    for i in range(1, V + 1):\r\n        min_coin = float('inf')\r\n        for coin in coins:\r\n            if i - coin >= 0 and dp[i - coin] != float('inf'):\r\n                min_coin = min(min_coin, dp[i - coin] + 1)\r\n        dp[i] = min_coin\r\n    return dp[V]\r\n\r\n\r\n# Tests\r\nV = 5\r\nprint(min_coins([1, 2, 3], 5, V))\r\nprint(min_coins([1, 2, 3], 11, V))\r\nprint(min_coins([1, 2, 3, 4], 11, V))\r\nprint(min_coins([1, 2, 3, 4, 5], 11, V))\r\nprint(min_coins([1, 2, 3, 4, 5, 6], 11, V))\r\nprint(min_coins([1, 2, 3, 4, 5, 6, 7], 11, V))\r\nprint(min_coins([1, 2, 3, 4, 5, 6, 7, 8], 11, V))\r\nprint(min_coins([1, 2, 3, 4, 5, 6, 7, 8, 9], 11, V))\r\nprint(min_coins([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, V))\r\nprint(min_coins([1, 2, 3, 4, 5, 6, 7,","votes":null},{"text":"\r\n    #coins = [1, 5, 10, 25]\r\n    #m = 25\r\n    #V = 45\r\n    #print(min_coins(coins, m, V))\r\n    #print(min_coins(coins, 10, 19))\r\n    #print(min_coins(coins, 10, 30))\r\n    #print(min_coins(coins, 10, 35))\r\n    #print(min_coins(coins, 10, 100))\r\n    #print(min_coins(coins, 10, 101))\r\n    #print(min_coins(coins, 10, 105))\r\n    #print(min_coins(coins, 10, 110))\r\n    #print(min_coins(coins, 10, 119))\r\n\r\n    #print(min_coins(coins, 10, 100))\r\n    #print(min_coins(coins, 10, 105))\r\n    #print(min_coins(coins, 10, 110))\r\n    #print(min_coins(coins, 10, 119))\r\n    #print(min_coins(coins, 10, 120))\r\n\r\n    #print(min_coins(coins, 10, 124))\r\n    #print(min_coins(coins, 10, 125))\r\n    #print(min_coins(coins, 10, 126))\r\n    #print(min_coins(coins, 10, 127))\r\n    #print(min_coins(coins, 10, 128))\r\n\r\n  ","votes":null},{"text":"\r\n    dp = [float(\"inf\")] * (m + 1)\r\n    dp[0] = 0\r\n\r\n    for i in range(V + 1):\r\n        for j in range(len(coins)):\r\n            if i - coins[j] >= 0:\r\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\r\n    if dp[V] == float(\"inf\"):\r\n        return -1\r\n    return dp[V]\r\n\r\n\r","votes":null},{"text":"\r\n    memo = [None] * (V + 1)\r\n    return min_coins_recur(coins, m, V, memo)\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n    if m < 0:\r\n        return -1\r\n    if m in V:\r\n        return V[m]\r\n    min = float('inf')\r\n    for i in range(len(coins)):\r\n        if m >= coins[i]:\r\n            sub_res = min_coins(coins, m - coins[i], V)\r\n            if sub_res != -1:\r\n                min = min(min, sub_res + 1)\r\n    V[m] = min\r\n    return V[m]\r\n\r\n\r","votes":null},{"text":"\r\n    if V == 0:\r\n        return 0\r\n    if V < 0:\r\n        return -1\r\n    if m == 0:\r\n        return -1\r\n    \r\n    return min(min_coins(coins, m-1, V), 1 + min_coins(coins, m, V-coins[m-1]))\r\n\r\n\r\ncoins = [1, 2, 5]\r\nm = 3\r\nV = 11\r\nprint(min_coins(coins, m, V))\r\n\r\n\r\n# 3. Longest Increasing Subsequence\r\n# https:\/\/www.geeksforgeeks.org\/longest-monotonically-increasing-subsequence-size-n-log-n\/\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n    elif m < 0 or m > V:\r\n        return -1\r\n    else:\r\n        min_coins = []\r\n        for coin in coins:\r\n            if coin <= m:\r\n                min_coin = min_coins(coins, m - coin, V)\r\n                if min_coin != -1:\r\n                    min_coins.append(min_coin + 1)\r\n        if len(min_coins) == 0:\r\n            return -1\r\n        return min(min_coins)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Table of minimum coins to make each value\r\n    table = [None] * (m + 1)\r\n\r\n    # Initialize table as -1\r\n    for i in range(m + 1):\r\n        table[i] = -1\r\n\r\n    # Compute minimum coins for each value\r\n    for i in range(1, m + 1):\r\n        table[i] = min_coins_util(coins, i, table, V)\r\n\r\n    print(table)\r\n\r\n    # Return minimum coins required to make m.\r\n    return table[m]\r\n\r\n\r","votes":null},{"text":"\r\n    res = [0] * (m + 1)\r\n\r\n    for i in range(1, m + 1):\r\n        res[i] = float('inf')\r\n        for j in range(len(coins)):\r\n            if coins[j] <= i:\r\n                res[i] = min(res[i], res[i - coins[j]] + 1)\r\n\r\n    if res[m] == float('inf'):\r\n        return -1\r\n    return res[m]\r\n\r\n\r\nif __name__ == '__main__':\r\n    coins = [1, 3, 4]\r\n    V = 6\r\n    print(min_coins(coins, V))\r\n\r\n    coins = [1, 2, 3, 4]\r\n    V = 8\r\n    print(min_coins(coins, V))\r\n\r\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]\r\n    V = 70\r\n    print(min_coins(coins, V))\r\n\r\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]\r\n    V = 1000\r\n    print(min_coins(coins, V))\r\n\r\n    coins = [1]\r\n    V = 1000\r\n    print(min_coins(coins, V))\r\n\r\n    coins = [1, 5, 10, 21, 25]\r\n    V = 25\r\n    print(min_coins(coins, V))\r\n\r\n    coins = [1, 5, 10, 21, 25]\r\n    V = 26\r\n    print(min_coins(coins, ","votes":null},{"text":"\r\n    # Write your code here\r\n    if m in V:\r\n        return V[m]\r\n\r\n    if m == 0:\r\n        V[m] = 0\r\n        return 0\r\n\r\n    minimum = float(\"inf\")\r\n    for coin in coins:\r\n        if coin <= m:\r\n            res = min_coins(coins, m - coin, V)\r\n            minimum = min(minimum, res + 1)\r\n\r\n    V[m] = minimum\r\n    return minimum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    coins = [2, 5, 3, 6]\r\n    m = 10\r\n    V = {}\r\n    print(min_coins(coins, m, V))\r\n\r\n    \"\"\"\r\n    Input : coins = [2, 5, 3, 6], m = 10\r\n    Output : 3\r\n\r\n    Input : coins = [2, 5, 3, 6], m = 11\r\n    Output : 4\r\n\r\n    Input : coins = [2, 5, 3, 6], m = 12\r\n    Output : 4\r\n\r\n    Input : coins = [2, 5, 3, 6], m = 13\r\n    Output : 4\r\n\r\n    Input : coins = [2, 5, 3, 6], m = 14\r\n    Output : 5\r\n\r\n    Input : coins = [2, 5, 3, 6], m = 15\r\n    Output : 5\r\n\r\n    Input : coins = [2, 5, 3, 6], m = 16\r\n    Output : 6\r\n\r\n    Input : coins = [2, 5, 3, 6], m = 17\r\n    Output : 6\r\n\r\n    Input : coin","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n    \r\n    if m < 0:\r\n        return float('inf')\r\n    \r\n    if m < coins[0]:\r\n        return float('inf')\r\n    \r\n    if m in V:\r\n        return V[m]\r\n    \r\n    min_coins = float('inf')\r\n    \r\n    for i in range(len(coins)):\r\n        min_coins = min(min_coins, 1 + min_coins(coins, m - coins[i], V))\r\n    \r\n    V[m] = min_coins\r\n    return min_coins\r\n\r","votes":null},{"text":"\r\n    res = [0 for i in range(m + 1)]\r\n    for v in range(1, m + 1):\r\n        res[v] = min(res[v], res[v - coin] + 1) for coin in coins if v - coin >= 0\r\n    return res[V]\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(coins)\r\n    min_coins = [0] * (m + 1)\r\n    for i in range(1, m + 1):\r\n        min_coins[i] = m + 1\r\n    for i in range(n):\r\n        for j in range(coins[i], m + 1):\r\n            min_coins[j] = min(min_coins[j], 1 + min_coins[j - coins[i]])\r\n    return min_coins[V]\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [0] * (m + 1)\r\n    for i in range(1, m + 1):\r\n        dp[i] = float('inf')\r\n    for i in range(1, m + 1):\r\n        for j in range(1, len(coins) + 1):\r\n            if i >= coins[j - 1]:\r\n                dp[i] = min(dp[i], 1 + dp[i - coins[j - 1]])\r\n    if dp[m] == float('inf'):\r\n        return -1\r\n    return dp[m]\r\n\r\n\r","votes":null},{"text":"\r\n    # min_coins(coins, m, V) -> int\r\n    # Find minimum number of coins that make a given value.\r\n    # coins: list of values of coins\r\n    # m: number of coins available\r\n    # V: Value to be made\r\n    # returns: minimum number of coins needed to make value V\r\n\r\n    # initialize table\r\n    table = [0] * (V+1)\r\n    # initialize table\r\n    for i in range(V+1):\r\n        table[i] = -1\r\n    \r\n    # initialize table\r\n    for i in range(V+1):\r\n        table[i] = 0\r\n    \r\n    # loop over all coins\r\n    for i in coins:\r\n        # loop over all values\r\n        for j in range(i, V+1):\r\n            # check if table[j-i] has a value and if so, add 1 to that value\r\n            if table[j-i] != -1 and table[j-i] < table[j]:\r\n                table[j] = table[j-i] + 1\r\n    \r\n    return table[V]\r\n\r\n# Testing\r\ncoins = [1, 3, 4]\r\nm = 3\r\nV = 10\r\nprint(min_coins(coins, m, V))\r\n\r\ncoins = [1, 5, 10, 25]\r\nm = 5\r\nV = 31\r\nprint(min_coins(coins, m, V))\r\n\r\ncoins = [1, 3, 4, 5]\r\nm = 3\r\nV = 16\r\nprint(min_coins(coins, m, V))\r\n\r\ncoins = [1, 3, 4, 5]\r\nm = 3\r\nV = 12\r\nprint(min_coins(coins, ","votes":null},{"text":"\r\n    # base case\r\n    if m == 0:\r\n        return 0\r\n    elif m < 0 or m >= V:\r\n        return float(\"inf\")\r\n\r\n    # recursive case\r\n    return 1 + min(\r\n        min_coins(coins, m - coin, V) for coin in coins\r\n    )\r\n\r\n\r","votes":null},{"text":"\r\n    V = V - 1\r\n    coins = [coin for coin in coins if coin <= V]\r\n    if len(coins) == 0:\r\n        return \"No solution\"\r\n    elif coins[0] > V:\r\n        return \"No solution\"\r\n    else:\r\n        return min(min_coins(coins, m, V - coins[i]) for i in range(len(coins))) + 1\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    dp = [[float(\"inf\")] * (m + 1) for _ in range(V + 1)]\r\n    for i in range(1, V + 1):\r\n        dp[i][0] = 0\r\n    for j in range(1, m + 1):\r\n        dp[0][j] = float(\"inf\")\r\n    for i in range(1, V + 1):\r\n        for j in range(1, m + 1):\r\n            for k in range(0, j):\r\n                if coins[k] <= i:\r\n                    dp[i][j] = min(dp[i][j], dp[i - coins[k]][j - 1] + 1)\r\n                else:\r\n                    dp[i][j] = dp[i][j - 1]\r\n    return dp[V][m]\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialize the table with all values as 0\r\n    table = [[0 for i in range(m + 1)] for j in range(V + 1)]\r\n \r\n    # Fill the table in bottom up manner\r\n    for V in range(1, V + 1):\r\n        for i in range(0, m):\r\n            if coins[i] <= V:\r\n                table[V][i] = table[V - coins[i]][i] + 1\r\n            else:\r\n                table[V][i] = table[V - 1][i]\r\n \r\n    # Return the last cell of the table\r\n    return table[V][m]\r\n \r\n \r\n# Driver Code\r\ncoins = [1, 5, 10]\r\nm = len(coins)\r\nV = 11\r\nprint(min_coins(coins, m, V))\r\n# 3\r\n\r","votes":null},{"text":"\r\n    result = [0] * (m+1)\r\n    for i in range(1, m+1):\r\n        result[i] = sys.maxsize\r\n        for j in range(len(coins)):\r\n            if i - coins[j] >= 0:\r\n                result[i] = min(result[i], result[i - coins[j]] + 1)\r\n    if result[m] == sys.maxsize:\r\n        return -1\r\n    else:\r\n        return result[m]\r\n\r\n\r\ncoins = [1, 3, 4]\r\nm = 8\r\nV = 3\r\nprint(min_coins(coins, m, V))\r\n\r\n\r","votes":null},{"text":"\r\n    # initialize table\r\n    coin_table = [0] * (m + 1)\r\n    # base case\r\n    coin_table[0] = 0\r\n    # recursive case\r\n    for i in range(1, m + 1):\r\n        coin_table[i] = coin_table[i - coins] + 1\r\n    # return\r\n    return coin_table[V]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    coins = [1, 5, 10, 25]\r\n    m = len(coins)\r\n    V = 110\r\n    result = min_coins(coins, m, V)\r\n    print(\"Minimum number of coins required to make {} is {}\".format(V,\r\n                                                                     result))\r\n\r\n    # 5\r\n    # Minimum number of coins required to make 110 is 5\r\n\r\n    # 10\r\n    # Minimum number of coins required to make 240 is 10\r\n\r\n    # 6\r\n    # Minimum number of coins required to make 250 is 6\r\n\r\n    # 2\r\n    # Minimum number of coins required to make 25 is 2\r\n\r\n    # 3\r\n    # Minimum number of coins required to make 10 is 3\r\n\r\n    # 3\r\n    # Minimum number of coins required to make 5 is 3\r\n\r\n    # 1\r\n    # Minimum number of coins required to make 1 is 1\r\n\r\n    # 0\r\n    # Minimum number of coins required to make 0 is 0\r\n\r\n    # 4\r\n    # Minimum number of coins required to make 10 is 4\r\n\r\n    # 5\r\n    # Minimum number of coins required to make 2","votes":null},{"text":"\r\n    dp = [float('inf')] * (m + 1)\r\n    dp[0] = 0\r\n    for coin in coins:\r\n        for amount in range(coin, m + 1):\r\n            dp[amount] = min(dp[amount], dp[amount - coin] + 1)\r\n    if dp[V] == float('inf'):\r\n        return -1\r\n    return dp[V]\r\n\r\n\r\nprint(min_coins([1, 5, 10, 25], 100, 110))\r\nprint(min_coins([1, 2, 5], 11, 17))\r\nprint(min_coins([1, 2, 5], 11, 18))\r\nprint(min_coins([1, 2, 5], 11, 19))\r\nprint(min_coins([1, 2, 5], 11, 20))\r\nprint(min_coins([1, 2, 5], 11, 21))\r\nprint(min_coins([1, 2, 5], 11, 22))\r\nprint(min_coins([1, 2, 5], 11, 23))\r\nprint(min_coins([1, 2, 5], 11, 24))\r\nprint(min_coins([1, 2, 5], 11, 25))\r\nprint(min_coins([1, 2, 5], 11, 26))\r\nprint(min_coins([1, 2, 5], 11, 27))\r\nprint(min_coins([1, 2, 5], 11, 28))\r\nprint(min_coins([1, 2, 5], 11, 29))\r\nprint(min_coin","votes":null},{"text":"\r\n    # Initialize the table with all values as infinity\r\n    coins_table = [float('inf') for _ in range(m + 1)]\r\n    coins_table[0] = 0\r\n    # Start from 0 coin and update the table\r\n    for coin in range(m + 1):\r\n        for value in range(coin, m + 1):\r\n            # If value is greater then V, coins_table[value] will remain as infinity\r\n            if value > V:\r\n                continue\r\n            # If value is greater then the coin, coins_table[value] will remain as infinity\r\n            if coins[coin] > value:\r\n                continue\r\n            coins_table[value] = min(coins_table[value],\r\n                                    1 + coins_table[value - coins[coin]])\r\n    return coins_table[m]\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [float('inf')] * (m + 1)\r\n\r\n    dp[0] = 0\r\n\r\n    for i in range(V + 1):\r\n        for j in coins:\r\n            if i - j >= 0:\r\n                dp[i] = min(dp[i], 1 + dp[i - j])\r\n\r\n    return dp[V]\r\n\r\n\r\nif __name__ == '__main__':\r\n    coins = [1, 3, 4]\r\n    m = 7\r\n    V = 17\r\n\r\n    print(min_coins(coins, m, V))\r\n    print(min_coins(coins, m, 10))\r\n    print(min_coins(coins, m, 7))\r\n    print(min_coins(coins, m, 100))\r\n\r\n\r\n\"\"\"\r\nSPECS:\r\n\r\nTIME COMPLEXITY: O(n*V),\r\nSPACE COMPLEXITY: O(n*V)\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    \r\n    #Base Case\r\n    if V == 0:\r\n        return 0\r\n    if V < 0:\r\n        return -1\r\n    \r\n    #Rec Case\r\n    min_coins = float('inf')\r\n    for coin in coins:\r\n        if coin <= V:\r\n            num_coins = min_coins(coins, m, V - coin)\r\n            if num_coins != -1:\r\n                min_coins = min(num_coins + 1, min_coins)\r\n    return min_coins\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    dp = [0] * (V + 1)\r\n    for i in range(1, V + 1):\r\n        for j in range(0, m):\r\n            if coins[j] <= i:\r\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\r\n    print(dp)\r\n    if dp[V] == float(\"inf\"):\r\n        return -1\r\n    return dp[V]\r\n\r\n\r\n# Driver Code\r\ncoins = [1, 2, 3]\r\nm = len(coins)\r\nV = 4\r\nprint(\"Minimum number of coins required = \", min_coins(coins, m, V))\r\n\r\n# Sample Input-1:\r\n# coins = [1, 2, 3]\r\n# m = 3\r\n# V = 4\r\n# Output-1:\r\n# Minimum number of coins required =  2\r\n\r\n# Sample Input-2:\r\n# coins = [1, 2, 3]\r\n# m = 3\r\n# V = 10\r\n# Output-2:\r\n# Minimum number of coins required =  5\r\n\r\n# Sample Input-3:\r\n# coins = [1, 5, 10, 25, 100]\r\n# m = 5\r\n# V = 10\r\n# Output-3:\r\n# Minimum number of coins required =  2\r\n\r\n# Sample Input-4:\r\n# coins = [1, 5, 10, 25, 100]\r\n# m = 5\r\n# V = 11\r\n# Output-4:\r\n# Minimum number of coins required =  -1\r\n\r\n# Sample Input-5:\r\n# coins = [1, 5, 10, 2","votes":null},{"text":"\r\n    if m==0:\r\n        return 0\r\n    if m<0 or m>V:\r\n        return float('inf')\r\n    dp=[[0]*(V+1) for i in range(m+1)]\r\n    for i in range(1,m+1):\r\n        dp[i][0]=0\r\n    for j in range(1,V+1):\r\n        dp[0][j]=float('inf')\r\n    for i in range(1,m+1):\r\n        for j in range(1,V+1):\r\n            dp[i][j]=dp[i][j-1]\r\n            for k in range(1,coins[i-1]):\r\n                dp[i][j]=min(dp[i][j],dp[i-1][j-k]+1)\r\n    return dp[m][V]\r\n\r\ncoins=[[1,1,3],[1,2,7],[1,5,20],[10,12,50],[15,30,80],[20,40,100],[30,50,150],[40,70,200],[50,80,250],[60,90,300],[70,100,350],[80,110,400],[90,120,450],[100,130,500]]\r\nV=130\r\nm=10\r\nprint(min_coins(coins,m,V))\r\n\r\n#","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n    if m < 0:\r\n        return float('inf')\r\n    if m in V:\r\n        return V[m]\r\n    else:\r\n        V[m] = min(min_coins(coins, m - coins[n], V) for n in range(len(coins))) + 1\r\n        return V[m]\r\n\r\n\r","votes":null},{"text":"\r\n    table = [float('inf')] * (m + 1)\r\n    table[0] = 0\r\n\r\n    for i in range(len(coins)):\r\n        for j in range(coins[i], m + 1):\r\n            table[j] = min(table[j], table[j - coins[i]] + 1)\r\n\r\n    return table[m] if table[m] != float('inf') else -1\r\n\r\n\r","votes":null},{"text":"\r\n    cache = [0 for i in range(V + 1)]\r\n    for j in range(1, V + 1):\r\n        min_coins = float('inf')\r\n        for c in coins:\r\n            if j >= c:\r\n                min_coins = min(min_coins, 1 + cache[j - c])\r\n    return cache[V]\r\n\r\n# Testing\r\nprint(min_coins([1, 3, 4], 4, 10))\r\nprint(min_coins([1, 3, 4], 4, 11))\r\nprint(min_coins([1, 3, 4], 4, 12))\r\n\r\n# Another way to solve this problem\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return 0\r\n    elif m < 0:\r\n        return float('inf')\r\n    else:\r\n        return min([min_coins(coins, m-coin, V) for coin in coins]) + 1\r\n\r\n\r","votes":null},{"text":"\r\n    if V == 0:\r\n        return 0\r\n    elif V < 0:\r\n        return -1\r\n    elif m <= 0:\r\n        return -1\r\n    elif coins[m-1] > V:\r\n        return min_coins(coins, m-1, V)\r\n    else:\r\n        return 1 + min_coins(coins, m, V-coins[m-1])\r\n\r\ncoins = [1, 2, 3]\r\nV = 6\r\nm = len(coins)\r\n\r\nprint(min_coins(coins, m, V))\r\n\r","votes":null},{"text":"\r\n    coin_counts = [0] * (m + 1)\r\n    for v in range(1, min(coin_counts) + 1):\r\n        coin_counts[v] = float('inf')\r\n    coin_counts[0] = 0\r\n    for v in range(1, m + 1):\r\n        for coin in coins:\r\n            if v - coin >= 0:\r\n                coin_counts[v] = min(coin_counts[v], 1 + coin_counts[v - coin])\r\n    return coin_counts[V]\r\n\r","votes":null},{"text":"\r\n\r\n    # Create a table to store results of subproblems\r\n    # table[i] will store minimum number of coins required for value i\r\n    table = [0 for _ in range(m + 1)]\r\n\r\n    # Fill the table using dynamic programming\r\n    for i in range(1, m + 1):\r\n        coins_needed = V\r\n        for j in range(V):\r\n            if coins[j] <= i:\r\n                coins_needed = coins_needed - coins[j]\r\n                if coins_needed == 0:\r\n                    table[i] = j + 1\r\n                    break\r\n        if table[i] == 0:\r\n            print(\"Amount\", i, \"can't be made using any of the coins\")\r\n            break\r\n\r\n    # table[m] contains the result\r\n    return table[m]\r\n\r\n\r\ncoins = [1, 2, 3]\r\nm = 5\r\nV = 8\r\n\r\nprint(min_coins(coins, m, V))\r\n\r\n# Output:\r\n# 2\r\n# 3\r\n# 4\r\n# 3\r\n# 4\r\n# Amount 5 can't be made using any of the coins\r\n# 2\r\n\r\n# Explanation:\r\n# The minimum coins required for amount 0 is 0\r\n# The minimum coins required for amount 1 is 1\r\n# The minimum coins required for amount 2 is 2\r\n# The minimum coins required for amount 3 is 2\r\n# The minimum coins required for amount 4 is 3\r\n# The minimum coins required for amount 5 is 4\r\n# The minimum coins required for amount 6 is 4\r\n# The minimum coins required for amount 7 is 4\r\n# The minimum coins required for amount 8 is 3\r\n# The minimum coins require","votes":null},{"text":"\r\n    table = [[0 for i in range(m+1)] for j in range(V+1)]\r\n    for i in range(1, V+1):\r\n        for j in range(1, m+1):\r\n            if i == coins[j-1]:\r\n                table[i][j] = 1\r\n            elif i < coins[j-1]:\r\n                table[i][j] = table[i][j-1]\r\n            else:\r\n                table[i][j] = 1 + min(table[i-coins[j-1]][j], table[i][j-1])\r\n    return table[V][m]\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [float('inf')] * (m + 1)\r\n    dp[0] = 0\r\n    for i in range(1, m + 1):\r\n        for coin in coins:\r\n            if i - coin >= 0:\r\n                dp[i] = min(dp[i], 1 + dp[i - coin])\r\n    if dp[V] == float('inf'):\r\n        return -1\r\n    return dp[V]\r\n\r\n\r","votes":null},{"text":"\r\n    dp = [float('inf')] * (m+1)\r\n    dp[0] = 0\r\n\r\n    for i in range(m+1):\r\n        for j in range(coins):\r\n            if i - coins[j] < 0:\r\n                continue\r\n            if dp[i] > dp[i - coins[j]] + 1:\r\n                dp[i] = dp[i - coins[j]] + 1\r\n\r\n    return dp[m]\r\n\r\n\r","votes":null},{"text":"\r\n    # initialize table\r\n    table = [0 for i in range(V + 1)]\r\n    \r\n    # if value is less than zero, return -1\r\n    if m < 0:\r\n        return -1\r\n    \r\n    # if value is zero, return 0 coins\r\n    if m == 0:\r\n        return 0\r\n    \r\n    # if value is greater than any of the coins, return -1\r\n    for i in range(len(coins)):\r\n        if coins[i] > m:\r\n            return -1\r\n    \r\n    # make value\r\n    for i in range(1, V + 1):\r\n        # try to find minimum number of coins\r\n        # that make the value i\r\n        min_coins = table[i - 1]\r\n        for j in range(len(coins)):\r\n            if i - coins[j] >= 0:\r\n                # update minimum number of coins\r\n                min_coins = min(min_coins, table[i - coins[j]] + 1)\r\n        \r\n        # update table\r\n        table[i] = min_coins\r\n    \r\n    # return minimum number of coins\r\n    return table[V]\r\n\r\n\r\n# Test case 1\r\ncoins = [1, 3, 4]\r\nm = 8\r\nV = 8\r\nprint(min_coins(coins, m, V))\r\n\r\n# Test case 2\r\ncoins = [1, 2, 3]\r\nm = 10\r\nV = 10\r\nprint(min_coins(coins, m, V))\r\n\r\n# Test case 3\r\ncoins = [1, 3, 4, 5]\r\nm = 8\r\nV = 8\r\nprint(min_coins(coins, m, V))\r\n\r\n# Test case 4\r","votes":null},{"text":"\r\n    count = [0] * (V + 1)\r\n    for i in range(0,m):\r\n        for j in range(coins[i],V+1):\r\n            count[j] += count[j - coins[i]]\r\n    return count[V]\r\n\r","votes":null},{"text":"\r\n    # Initialize result\r\n    res = [float(\"inf\")] * (m + 1)\r\n    res[0] = 0\r\n\r\n    # Start from one coin and try all\r\n    # amounts up to m\r\n    for coin in coins:\r\n        for amount in range(m + 1):\r\n            res[amount] = min(res[amount], res[amount - coin] + 1)\r\n\r\n    # If amount is greater than 0, then amount is not\r\n    # possible to make using coins\r\n    if res[m] == float(\"inf\"):\r\n        print(\"No Solution\")\r\n        return\r\n\r\n    # print(\"Minimum coins required for value\", V, \"are\")\r\n    # print(res)\r\n    return res[m]\r\n\r\n\r","votes":null},{"text":"\r\n    min_coins = [0 for _ in range(m+1)]\r\n    for i in range(1,m+1):\r\n        min_coins[i] = min_coins[i-1]\r\n        for j in range(len(coins)):\r\n            while i >= coins[j] and min_coins[i] >= min_coins[i - coins[j]]:\r\n                min_coins[i] = min_coins[i - coins[j]] + 1\r\n    return min_coins[V]\r\n\r\n\r","votes":null}],"time":{"count":4.0,"avg":206713.98,"std":50877.4169680631,"cov":0.2461247032}}
{"id":532,"question":"def check_permutation(str1, str2):\r\n    \"\"\"Write a function to check if the two given strings are permutations of each other.\"\"\"","answers":[{"text":"\r\n    return sorted(str1) == sorted(str2)\r\n\r","votes":53914.3},{"text":"\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":68174.368},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    for char in str2:\r\n        if str1.count(char) == 0:\r\n            return False\r\n        else:\r\n            str1 = str1.replace(char, '', 1)\r\n\r\n    return True\r\n\r\n\r","votes":69882.384},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    return str1 == str2\r\n\r\n\r","votes":72775.2},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # convert both strings to lower case to avoid case mismatch\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    # sort both strings\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n\r\n    # check if both strings are equal\r\n    return str1 == str2\r\n\r\n\r","votes":77034.648},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1 = sorted(str1)\r\n        str2 = sorted(str2)\r\n        return str1 == str2\r\n\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n    doctest.testmod()\r\n\r\n\r\n\"\"\"\r\nExamples\r\n>>> check_permutation(\"abcd\", \"dcba\")\r\nTrue\r\n>>> check_permutation(\"abcd\", \"dcbae\")\r\nFalse\r\n\"\"\"\r\n\r\n\r\n# Check Permutation Using XOR\r","votes":77410.984},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    return sorted(str1) == sorted(str2)\r\n    \r\n    \r","votes":84984.404},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1 = sorted(str1)\r\n        str2 = sorted(str2)\r\n        return str1 == str2\r\n\r\n\r","votes":92874.124},{"text":"\r\n    return len(str1) == len(str2) and sorted(str1) == sorted(str2)\r\n\r","votes":97429.38},{"text":"\r\n    # check length\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # check for duplicates in str1\r\n    count = [0] * 26\r\n    for c in str1:\r\n        count[ord(c) - ord('a')] += 1\r\n    for c in str2:\r\n        count[ord(c) - ord('a')] -= 1\r\n    for cnt in count:\r\n        if cnt != 0:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":97462.86},{"text":"\r\n    \r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    \r\n    for char in str1:\r\n        if str2.count(char) == 0:\r\n            return False\r\n    \r\n    return True\r\n    \r\nprint(check_permutation(\"AbC\", \"bac\"))\r\n\r\n\r","votes":98581.256},{"text":"\r\n\r\n    # check if the two strings have the same length\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # check if the two strings have the same characters\r\n    return sorted(str1) == sorted(str2)\r\n\r\n    # return False\r\n    # return True\r\n\r\n\r\nprint(check_permutation(\"hello\", \"hello\"))\r\nprint(check_permutation(\"hello\", \"olleh\"))\r\nprint(check_permutation(\"hello\", \"hello world\"))\r\nprint(check_permutation(\"hello\", \"world hello\"))\r\nprint(check_permutation(\"hello\", \"Hello\"))\r\nprint(check_permutation(\"\", \"\"))\r\nprint(check_permutation(\"\", \"a\"))\r\n\r\n\r","votes":98937.756},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    return str1 == str2\r\n\r\n\r","votes":99283.308},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1_list = sorted(str1)\r\n        str2_list = sorted(str2)\r\n        for i in range(len(str1)):\r\n            if str1_list[i] != str2_list[i]:\r\n                return False\r\n        return True\r\n\r\n\r\n# 3rd solution\r\n\r\n\r","votes":100238.628},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    if sorted(str1) != sorted(str2):\r\n        return False\r\n\r\n    return True\r\n\r\n\r","votes":100701.016},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r","votes":100886.152},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    str1_list = list(str1)\r\n    str2_list = list(str2)\r\n    if len(str1_list) != len(str2_list):\r\n        return False\r\n    for i in range(len(str1_list)):\r\n        if str1_list[i] not in str2_list:\r\n            return False\r\n        str2_list.remove(str1_list[i])\r\n    return True\r\n\r\n\r","votes":102789.688},{"text":"\r\n    # str1 and str2 are both strings\r\n    if type(str1) != str or type(str2) != str:\r\n        raise TypeError(\"Invalid input, str1 and str2 must be strings\")\r\n    # str1 and str2 have the same length\r\n    if len(str1) != len(str2):\r\n        return False\r\n    # str1 and str2 are the same string\r\n    if str1 == str2:\r\n        return True\r\n    # str1 and str2 are permutations of each other\r\n    if sorted(str1) == sorted(str2):\r\n        return True\r\n    return False\r\n\r\n#check_permutation(\"hello\", \"ehllo\")\r\n#check_permutation(\"hello\", \"hell\")\r\n#check_permutation(\"hello\", \"e\")\r\n#check_permutation(\"hello\", \"hellll\")\r\n#check_permutation(\"hello\", \"ell\")\r\n#check_permutation(\"hello\", \"hello\")\r\n#check_permutation(\"hello\", \"hallo\")\r\n#check_permutation(\"hello\", \"hello\")\r\n#check_permutation(\"hello\", \"hell\")\r\n#check_permutation(\"hello\", \"h\")\r\n#check_permutation(\"hello\", \"ehllo\")\r\n#check_permutation(\"hello\", \"ell\")\r\n#check_permutation(\"hello\", \"h\")\r\n#check_permutation(\"hello\", \"ell\")\r\n#check_permutation(\"hello\", \"e\")\r\n#check_permutation(\"hello\", \"ehllo\")\r\n#check_permutation(\"hello\", \"hell\")\r\n#check_permutation(\"hello\", \"hello\")\r\n#check_permutation(\"hello\", \"h\")\r\n#check_permutation(\"hello\", \"ehllo\")\r\n#check_permutation(\"hello\", \"ell\")\r\n#check_permutation(\"hello\", \"h\")\r\n#check","votes":106634.696},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = ''.join(sorted(str1))\r\n    str2 = ''.join(sorted(str2))\r\n    return str1 == str2\r\n\r\n\r\nprint(check_permutation('python', 'thonpy'))\r\n\r\n\r","votes":108516.752},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    char_count_1 = {}\r\n    char_count_2 = {}\r\n\r\n    for char in str1:\r\n        if char in char_count_1:\r\n            char_count_1[char] += 1\r\n        else:\r\n            char_count_1[char] = 1\r\n\r\n    for char in str2:\r\n        if char in char_count_2:\r\n            char_count_2[char] += 1\r\n        else:\r\n            char_count_2[char] = 1\r\n\r\n    return char_count_1 == char_count_2\r\n\r\n\r","votes":111219.06},{"text":"\r\n    str1_count = {}\r\n    str2_count = {}\r\n    \r\n    for c in str1:\r\n        if c not in str1_count:\r\n            str1_count[c] = 1\r\n        else:\r\n            str1_count[c] += 1\r\n\r\n    for c in str2:\r\n        if c not in str2_count:\r\n            str2_count[c] = 1\r\n        else:\r\n            str2_count[c] += 1\r\n\r\n    if str1_count == str2_count:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":111500.336},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1_counts = {}\r\n    for char in str1:\r\n        if char in str1_counts:\r\n            str1_counts[char] += 1\r\n        else:\r\n            str1_counts[char] = 1\r\n\r\n    str2_counts = {}\r\n    for char in str2:\r\n        if char in str2_counts:\r\n            str2_counts[char] += 1\r\n        else:\r\n            str2_counts[char] = 1\r\n\r\n    return str1_counts == str2_counts\r\n\r\n\r","votes":111741.208},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":115237.94},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1_dict = {}\r\n    str2_dict = {}\r\n\r\n    for char in str1:\r\n        if char not in str1_dict:\r\n            str1_dict[char] = 1\r\n        else:\r\n            str1_dict[char] += 1\r\n\r\n    for char in str2:\r\n        if char not in str2_dict:\r\n            str2_dict[char] = 1\r\n        else:\r\n            str2_dict[char] += 1\r\n\r\n    for key in str1_dict:\r\n        if key not in str2_dict:\r\n            return False\r\n        elif str1_dict[key] != str2_dict[key]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":115461.128},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    elif sorted(str1) == sorted(str2):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":118698.692},{"text":"\r\n    str1 = ''.join(sorted(str1))\r\n    str2 = ''.join(sorted(str2))\r\n    if str1 == str2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(check_permutation('Hello world', 'llloeHdwor'))\r\n\r\n\r","votes":118844.8},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1_set = set(str1)\r\n    str2_set = set(str2)\r\n\r\n    if str1_set == str2_set:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":120157.176},{"text":"\r\n    if not str1 or not str2:\r\n        return False\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    count = [0] * 255\r\n    for s in str1:\r\n        count[ord(s)] += 1\r\n\r\n    for s in str2:\r\n        count[ord(s)] -= 1\r\n\r\n    for i in range(255):\r\n        if count[i] != 0:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":120527.884},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    counter = dict()\r\n\r\n    for char in str1:\r\n        if char in counter:\r\n            counter[char] += 1\r\n        else:\r\n            counter[char] = 1\r\n\r\n    for char in str2:\r\n        if char in counter:\r\n            counter[char] -= 1\r\n            if counter[char] == 0:\r\n                del counter[char]\r\n        else:\r\n            return False\r\n\r\n    return True if len(counter) == 0 else False\r\n\r\n\r","votes":124337.192},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    for c in str1:\r\n        if not str2.count(c):\r\n            return False\r\n        str2 = str2.replace(c, '', 1)\r\n    return True\r\n\r\n\r","votes":126365.072},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1, str2 = sorted(str1), sorted(str2)\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            return False\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    str1 = input(\"Enter the first string: \")\r\n    str2 = input(\"Enter the second string: \")\r\n    if check_permutation(str1, str2):\r\n        print(\"The two string are permutations of each other.\")\r\n    else:\r\n        print(\"The two strings are not permutations of each other.\")\r\n","votes":129768.62},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    if str1 == str2:\r\n        return True\r\n\r\n    str1, str2 = sorted(str1), sorted(str2)\r\n\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            return False\r\n    return True\r\n\r","votes":134391.76},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    str1_list = list(str1)\r\n    str2_list = list(str2)\r\n    \r\n    for i in range(len(str1)):\r\n        for j in range(len(str1)):\r\n            if str1_list[i] == str2_list[j]:\r\n                str2_list[j] = None\r\n                break\r\n        \r\n    for i in str2_list:\r\n        if i:\r\n            return False\r\n    \r\n    return True\r\n\r\n\r\n# ------------------------------------------------------------------------------------------------------\r\n\r","votes":134586.36},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1 = str1.lower()\r\n        str2 = str2.lower()\r\n        str1 = \"\".join(sorted(str1))\r\n        str2 = \"\".join(sorted(str2))\r\n        return str1 == str2\r\n\r\nprint(check_permutation(\"Hello\", \"lloHe\"))\r\nprint(check_permutation(\"Hello\", \"llohe\"))\r\nprint(check_permutation(\"\", \"\"))\r\nprint(check_permutation(\"Hello\", \"Hello\"))\r\nprint(check_permutation(\"Hello\", \"hello\"))\r\nprint(check_permutation(\"greetings\", \"tgineergs\"))\r\nprint(check_permutation(\"greetings\", \"tgineergs\"))\r\nprint(check_permutation(\"greetings\", \"tgineergs\"))\r\nprint(check_permutation(\"greetings\", \"tgineergs\"))\r\nprint(check_permutation(\"greetings\", \"tgineergs\"))\r\n\r\n# Another way\r","votes":140319.268},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1_list = [x for x in str1]\r\n    str2_list = [x for x in str2]\r\n\r\n    str1_list.sort()\r\n    str2_list.sort()\r\n\r\n    for i in range(len(str1)):\r\n        if str1_list[i] != str2_list[i]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(check_permutation(\"flaab\", \"abffl\"))\r\n    print(check_permutation(\"aabb\", \"aa\"))\r\n    print(check_permutation(\"aabb\", \"bb\"))\r\n    print(check_permutation(\"aabb\", \"aaa\"))\r\n    print(check_permutation(\"aabb\", \"bbb\"))\r\n    print(check_permutation(\"aabb\", \"abaa\"))\r\n","votes":140442.924},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    char_frequency = {}\r\n    for char in str1:\r\n        if char in char_frequency:\r\n            char_frequency[char] += 1\r\n        else:\r\n            char_frequency[char] = 1\r\n\r\n    for char in str2:\r\n        if char in char_frequency:\r\n            char_frequency[char] -= 1\r\n            if char_frequency[char] == 0:\r\n                del char_frequency[char]\r\n        else:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":142086.724},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    str2 = ''.join(sorted(str2))\r\n    str1 = ''.join(sorted(str1))\r\n\r\n    return str1 == str2\r\n\r\n\r","votes":142552.568},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    elif len(str1) == 0:\r\n        return True\r\n    else:\r\n        str1_dict = {}\r\n        str2_dict = {}\r\n\r\n        for i in range(0, len(str1)):\r\n            if str1[i] not in str1_dict:\r\n                str1_dict[str1[i]] = 1\r\n            else:\r\n                str1_dict[str1[i]] += 1\r\n\r\n        for i in range(0, len(str2)):\r\n            if str2[i] not in str2_dict:\r\n                str2_dict[str2[i]] = 1\r\n            else:\r\n                str2_dict[str2[i]] += 1\r\n\r\n        for key in str1_dict.keys():\r\n            if key in str2_dict.keys():\r\n                if str1_dict[key] != str2_dict[key]:\r\n                    return False\r\n            else:\r\n                return False\r\n\r\n        return True\r\n\r\n\r","votes":145392.836},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1_dict = {}\r\n    str2_dict = {}\r\n    for char in str1:\r\n        if char in str1_dict:\r\n            str1_dict[char] += 1\r\n        else:\r\n            str1_dict[char] = 1\r\n    for char in str2:\r\n        if char in str2_dict:\r\n            str2_dict[char] += 1\r\n        else:\r\n            str2_dict[char] = 1\r\n    for key in str1_dict:\r\n        if key not in str2_dict:\r\n            return False\r\n        if str1_dict[key] != str2_dict[key]:\r\n            return False\r\n    return True\r\n\r\n\r\nprint(check_permutation(\"dog\", \"god\"))\r\nprint(check_permutation(\"dog\", \"cat\"))\r\nprint(check_permutation(\"dog\", \"dgo\"))\r\nprint(check_permutation(\"dog\", \"god\"))\r\nprint(check_permutation(\"dog\", \"dgo\"))\r\nprint(check_permutation(\"dog\", \"god\"))\r\n\r\n\r","votes":147936.064},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    # Convert both strings to lower case\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    # Create a list of the counts for characters in str1\r\n    counts1 = [0] * 256\r\n    for char in str1:\r\n        counts1[ord(char)] += 1\r\n\r\n    # Create a list of the counts for characters in str2\r\n    counts2 = [0] * 256\r\n    for char in str2:\r\n        counts2[ord(char)] += 1\r\n\r\n    # Check if all the counts in counts1 equals corresponding counts in counts2\r\n    for count in range(len(counts1)):\r\n        if counts1[count] != counts2[count]:\r\n            return False\r\n\r\n    return True\r\n\r","votes":149241.6},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = ''.join(sorted(str1))\r\n    str2 = ''.join(sorted(str2))\r\n    return str1 == str2\r\n\r\n\r","votes":149694.936},{"text":"\r\n    # convert both strings into lower cases\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    # sort both string\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    # check if both string are equal\r\n    if str1 == str2:\r\n        return True\r\n    return False\r\n\r\n\r\nprint(check_permutation(\"AbC\", \"bca\"))\r\nprint(check_permutation(\"Python\", \"Python\"))\r\nprint(check_permutation(\"python\", \"Python\"))\r\nprint(check_permutation(\"Python\", \"python\"))\r\nprint(check_permutation('A B C D E', 'B C D E A'))\r\nprint(check_permutation('A B C D E', 'D E C B A'))\r\nprint(check_permutation('A B C D E', 'F E B D A'))\r\nprint(check_permutation('A B C D E', 'E D C B A'))\r\nprint(check_permutation('A B C D E', 'A B C D E'))\r\nprint(check_permutation('A B C D E', 'A B C E D'))\r\nprint(check_permutation('A B C D E', 'A E B C D'))\r\nprint(check_permutation('A B C D E', 'A C B D E'))\r\nprint(check_permutation('A B C D E', 'A C E B D'))\r\nprint(check_permutation('A B C D E', 'A D C B E'))\r\nprint(check_permutation('A B C D E', 'A D E C B'))\r\nprint(check_permutation('A B C D E', 'A E C D B'))\r\nprint(check_permutation('A B C D E', 'A E C B D'))\r\nprint(check_permutation('A B C D E', 'A E C D B'))","votes":150612.288},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    # convert both strings to lower case\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    # sort both strings\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    # check if both the strings are equal\r\n    return str1 == str2\r\n\r\n\r\nif __name__ == '__main__':\r\n    str1 = 'ABC'\r\n    str2 = 'ACB'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'ABC'\r\n    str2 = 'ABCD'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'ABC'\r\n    str2 = 'AB'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'ABCD'\r\n    str2 = 'CD'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'ABC'\r\n    str2 = 'ABC'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'ABC'\r\n    str2 = 'ABCD'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'abcd'\r\n    str2 = 'dcba'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'abcd'\r\n    str2 = 'dcba'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'abcd'\r\n    str2 = 'dcba'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'a'\r\n    str2 = 'a'\r\n    print(check_permutation(str1, str2))\r\n  ","votes":151006.22},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    str1 = str1.replace(\" \", \"\")\r\n    str2 = str2.replace(\" \", \"\")\r\n    str3 = sorted(str1)\r\n    str4 = sorted(str2)\r\n    if str3 == str4:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":156835.088},{"text":"\r\n\r\n    if not str1 or not str2:\r\n        return False\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(check_permutation('abc', 'bca'))  # True\r\n    print(check_permutation('abc', 'adc'))  # False\r\n    print(check_permutation('abc', 'bcaa'))  # True\r\n    print(check_permutation('abc', 'abc'))  # True\r\n    print(check_permutation('abc', 'bbc'))  # False\r\n    print(check_permutation('abc', 'd'))  # False\r\n    print(check_permutation('abc', ''))  # False\r\n    print(check_permutation('abc', 'a'))  # False\r\n    print(check_permutation('abc', 'ab'))  # False\r\n    print(check_permutation('abc', 'abcd'))  # False\r\n    print(check_permutation('abc', 'abcdc'))  # False\r\n    print(check_permutation('abc', 'abcded'))  # False\r\n    print(check_permutation('abc', 'abcde'))  # False\r\n    print(check_permutation('abc', 'ac'))  # False\r\n    print(check_permutation('abc', 'acb'))  # False\r\n    print(check_permutation('abc', 'acd'))  # False\r\n    print(check_permutation('abc', 'aced'))  # False\r\n    print(check_permutation('abc', 'acde'))  ","votes":158793.756},{"text":"\r\n    map1 = {}\r\n    map2 = {}\r\n    for ch in str1:\r\n        if ch in map1:\r\n            map1[ch] += 1\r\n        else:\r\n            map1[ch] = 1\r\n    for ch in str2:\r\n        if ch in map2:\r\n            map2[ch] += 1\r\n        else:\r\n            map2[ch] = 1\r\n    if map1 == map2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":164487.024},{"text":"\r\n    # check if the two strings have the same length\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # sort the strings\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n\r\n    # compare the two sorted strings\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            return False\r\n\r\n    # they are permutations of each other\r\n    return True\r\n\r\n\r","votes":166062.312},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # Remove duplicates from both strings\r\n    str1 = ''.join(set(str1))\r\n    str2 = ''.join(set(str2))\r\n\r\n    # Sort both strings\r\n    str1 = ''.join(sorted(str1))\r\n    str2 = ''.join(sorted(str2))\r\n\r\n    return str1 == str2\r\n\r\n# print(check_permutation('car', 'rac'))\r\n# print(check_permutation('car', 'ac'))\r\n# print(check_permutation('car', 'car'))\r\n# print(check_permutation('car', 'cr'))\r\n# print(check_permutation('car', 'c'))\r\n# print(check_permutation('car', 'a'))\r\n# print(check_permutation('car', ''))\r\n# print(check_permutation('', ''))\r\n# print(check_permutation('', '0'))\r\n# print(check_permutation('0', ''))\r\n\r\n\r","votes":170486.98},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    char_counter = {}\r\n\r\n    for char in str1:\r\n        if char not in char_counter:\r\n            char_counter[char] = 1\r\n        else:\r\n            char_counter[char] += 1\r\n\r\n    for char in str2:\r\n        if char not in char_counter:\r\n            return False\r\n\r\n        char_counter[char] -= 1\r\n\r\n        if char_counter[char] == 0:\r\n            del char_counter[char]\r\n\r\n    return len(char_counter) == 0\r\n\r\n\r","votes":172158.772},{"text":"\r\n\r\n    # Make a dictionary of the characters in str1\r\n    d1 = {}\r\n    for ch in str1:\r\n        if ch in d1:\r\n            d1[ch] += 1\r\n        else:\r\n            d1[ch] = 1\r\n\r\n    # Make a dictionary of the characters in str2\r\n    d2 = {}\r\n    for ch in str2:\r\n        if ch in d2:\r\n            d2[ch] += 1\r\n        else:\r\n            d2[ch] = 1\r\n\r\n    # Check if the two dictionaries are equal\r\n    return d1 == d2\r\n\r\n\r","votes":173344.536},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    counter1 = 0\r\n    counter2 = 0\r\n\r\n    for letter in str1:\r\n        if letter in str2:\r\n            counter1 += 1\r\n            str2 = str2.replace(letter, '', 1)\r\n    for letter in str2:\r\n        if letter in str1:\r\n            counter2 += 1\r\n            str1 = str1.replace(letter, '', 1)\r\n    if counter1 == len(str1) and counter2 == len(str2):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Testing\r\nprint(check_permutation(\"abcde\", \"edcba\"))  # True\r\nprint(check_permutation(\"abcde\", \"edcb\"))  # False\r\nprint(check_permutation(\"abcde\", \"edbca\"))  # False\r\nprint(check_permutation(\"abcde\", \"abcde\"))  # True\r\nprint(check_permutation(\"a\", \"a\"))  # True\r\nprint(check_permutation(\"a\", \"b\"))  # False\r\nprint(check_permutation(\"a\", \"aa\"))  # False\r\nprint(check_permutation(\"a\", \"b\"))  # False\r\nprint(check_permutation(\"abcde\", \"edcb\"))  # False\r\nprint(check_permutation(\"abcde\", \"edbca\"))  # False\r\nprint(check_permutation(\"abcde\", \"a\"))  # False\r\nprint(check_permutation(\"abcde\", \"abcde\"))  # True\r\nprint(check_permutation(\"a\", \"a\"))  # True\r\nprint(check_permutation(\"a\", \"b\"))  # False\r\nprint(check_permutation(\"a\", \"aa\"))  ","votes":184509.532},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # sort both the strings and compare\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n\r\n    return str1 == str2\r\n\r\n\r","votes":186884.124},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1 = sorted(str1.lower())\r\n        str2 = sorted(str2.lower())\r\n        for i in range(len(str1)):\r\n            if str1[i] != str2[i]:\r\n                return False\r\n        return True\r\n\r\n\r","votes":189815.836},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1_char_count = dict()\r\n    str2_char_count = dict()\r\n\r\n    for char in str1:\r\n        if char not in str1_char_count:\r\n            str1_char_count[char] = 1\r\n        else:\r\n            str1_char_count[char] += 1\r\n\r\n    for char in str2:\r\n        if char not in str2_char_count:\r\n            str2_char_count[char] = 1\r\n        else:\r\n            str2_char_count[char] += 1\r\n    return str1_char_count == str2_char_count\r\n\r\n\r\nprint(check_permutation(\"abc\", \"bca\"))\r\nprint(check_permutation(\"abc\", \"bcaa\"))\r\nprint(check_permutation(\"abc\", \"abcd\"))\r\nprint(check_permutation(\"ab\", \"bca\"))\r\nprint(check_permutation(\"ab\", \"bcaa\"))\r\nprint(check_permutation(\"ab\", \"abcd\"))\r\nprint(check_permutation(\"ab\", \"abcd\"))\r\n\r\n\r","votes":214440.692},{"text":"\r\n    # Sort the strings\r\n    str1 = ''.join(sorted(str1))\r\n    str2 = ''.join(sorted(str2))\r\n    # Check if the strings are equal\r\n    if str1 == str2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Test 1\r\n    str1 = 'abc'\r\n    str2 = 'acb'\r\n    print(check_permutation(str1, str2))\r\n\r\n    # Test 2\r\n    str1 = 'abc'\r\n    str2 = 'ac'\r\n    print(check_permutation(str1, str2))\r\n\r\n    # Test 3\r\n    str1 = 'abc'\r\n    str2 = 'abcd'\r\n    print(check_permutation(str1, str2))\r\n\r\n    # Test 4\r\n    str1 = 'abc'\r\n    str2 = 'acd'\r\n    print(check_permutation(str1, str2))\r\n\r\n    # Test 5\r\n    str1 = 'abc'\r\n    str2 = 'bca'\r\n    print(check_permutation(str1, str2))\r\n\r\n    # Test 6\r\n    str1 = 'abc'\r\n    str2 = 'bcd'\r\n    print(check_permutation(str1, str2))\r\n\r\n    # Test 7\r\n    str1 = 'abc'\r\n    str2 = 'bcd'\r\n    print(check_permutation(str1, str2))\r\n\r\n    # Test 8\r\n    str1 = 'abc'\r\n    str2 = 'bca'\r\n    print(check_permutation(str1, str2))\r\n\r\n    # Test 9\r\n    str1 = 'abc'\r\n    str2 = 'cba'\r\n","votes":236464.852},{"text":"\r\n    \r\n    # Check if the lengths of the strings are equal\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    # Sort the two strings\r\n    str1 = ''.join(sorted(str1))\r\n    str2 = ''.join(sorted(str2))\r\n    \r\n    # Check if the sorted strings are equal\r\n    return str1 == str2\r\n\r\n\r\n# Example Test case\r\nprint(check_permutation('apple', 'pleap'))  # True\r\n\r\nprint(check_permutation('apple', 'appl'))  # False\r\n\r\nprint(check_permutation('apple', 'apple'))  # True\r\n\r\nprint(check_permutation('apple', 'aple'))  # False\r\n\r\nprint(check_permutation('', ''))  # True\r\n\r\nprint(check_permutation('', 'a'))  # False\r\n\r\nprint(check_permutation('a', ''))  # False\r\n\r\nprint(check_permutation('a', 'a'))  # True\r\n\r\nprint(check_permutation('a', 'b'))  # False\r\n\r\nprint(check_permutation('a', 'aa'))  # False\r\n\r\nprint(check_permutation('a', 'aaa'))  # False\r\n\r\nprint(check_permutation('a', 'abc'))  # False\r\n\r\nprint(check_permutation('a', 'ac'))  # False\r\n\r\nprint(check_permutation('a', 'acb'))  # False\r\n\r\nprint(check_permutation('a', 'b'))  # False\r\n\r\nprint(check_permutation('a', 'b'))  # False\r\n\r\nprint(check_permutation('a', 'bc'))  # False\r\n\r\nprint(check_permutation('a', 'bca'))  # False\r\n\r\nprint","votes":238939.328},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    # Sort the two strings and then compare them.\r\n    str1 = sorted(str1.lower())\r\n    str2 = sorted(str2.lower())\r\n    \r\n    if str1 == str2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Check if the two strings are permutations of each other.\r\nprint(check_permutation('Coding', 'DoCinCg'))\r\nprint(check_permutation('Coding', 'DoCgCin'))\r\nprint(check_permutation('Coding', 'CinCgDo'))\r\nprint(check_permutation('Coding', 'CgDoCin'))\r\nprint(check_permutation('Coding', 'CgCinDo'))\r\nprint(check_permutation('Coding', 'CgCdOiN'))\r\nprint(check_permutation('Coding', 'CgCDONi'))\r\nprint(check_permutation('Coding', 'CgCDOnI'))\r\n\r\n\r\n# Write a function to check if a string is a permutation of palindrome.\r","votes":246699.808},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # Convert both the strings to lower case\r\n    # and remove all the spaces\r\n    str1 = str1.lower().replace(\" \", \"\")\r\n    str2 = str2.lower().replace(\" \", \"\")\r\n\r\n    # Make a frequency table of str1\r\n    freq = {}\r\n    for i in range(len(str1)):\r\n        if str1[i] not in freq:\r\n            freq[str1[i]] = 1\r\n        else:\r\n            freq[str1[i]] += 1\r\n\r\n    # Make a frequency table of str2\r\n    freq2 = {}\r\n    for i in range(len(str2)):\r\n        if str2[i] not in freq2:\r\n            freq2[str2[i]] = 1\r\n        else:\r\n            freq2[str2[i]] += 1\r\n\r\n    # If both the tables have same keys, then print\r\n    # \"Both strings are permutations of each other\"\r\n    # else print \"Not Permutations\"\r\n    if freq == freq2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver code\r\nif __name__ == \"__main__\":\r\n    str1 = \"abcd\"\r\n    str2 = \"cdab\"\r\n    res = check_permutation(str1, str2)\r\n    if res:\r\n        print","votes":252452.448},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            return False\r\n    return True\r\n\r\nprint(check_permutation(\"","votes":null},{"text":"\r\n    # Sort both the strings\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n\r\n    # Check if both strings are same\r\n    if str1 == str2:\r\n        print(True)\r\n    else:\r\n        print(False)\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    str1 = \"geeksforgeeks\"\r\n    str2 = \"forgeeksgeeks\"\r\n\r\n    # Function Call\r\n    check_permutation(str1, str2)\r\n\r\n    str1 = \"geeksforgeeks\"\r\n    str2 = \"","votes":null},{"text":"\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    return str1 == str2\r\n\r\n\r\nstr1 = \"abc\"\r\nstr2 = \"bca\"\r\nif check_permutation(str1, str2):\r\n    print(\"Str1 and str2 are permutations of each other\")\r\nelse:\r\n    print(\"Str1 and str2 are not permutations of each other\")\r\n\r\nstr1 = \"abc\"\r\nstr2 = \"bca\"\r\nif check_permutation(str1, str2):\r\n    print(\"Str1 and str2 are permutations of each other\")\r\nelse:\r\n    print(\"Str1 and str2 are not permutations of each other\")\r\n\r\nstr1 = \"abc\"\r\nstr2 = \"abc\"\r\nif check_permutation(str1, str2):\r\n    print(\"Str1 and str2 are permutations of each other\")\r\nelse:\r\n    print(\"Str1 and str2 are not permutations of each other\")\r\n\r\nstr1 = \"aabbcc\"\r\nstr2 = \"aacbccb\"\r\nif check_permutation(str1, str2):\r\n    print(\"Str1 and str2 are permutations of each other\")\r\nelse:\r\n    print(\"Str1 and str2 are not permutations of each other\")\r\n\r\nstr1 = \"aabbcc\"\r\nstr2 = \"aacbccb\"\r\nif check_permutation(str1, str2):\r\n    print(\"Str1 and str2 are permutations of each other\")\r\nelse:\r\n    print(\"Str1 and str2 are not permutations of each other\")\r\n\r\nstr1 = \"aabbcc\"\r\nstr2 = \"aacbccb\"\r\nif check_permutation(str1, str2):\r\n    print(\"Str1 and str2 are permutations of each other\")\r\nelse:\r\n    print(\"Str1 and str2 are not permutations of each other\")\r\n\r\nst","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    # Sort the strings\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    return str1 == str2\r\n\r\n\r\n# test string permutations\r\nstr1 = \"abc\"\r\nstr2 = \"bca\"\r\nprint(\"These strings are permutations: {}\".format(check_permutation(str1, str2)))\r\n\r\nstr1 = \"abc\"\r\nstr2 = \"bca\"\r\nprint(\"These strings are permutations: {}\".format(check_permutation(str1, str2)))\r\n\r\nstr1 = \"abc\"\r\nstr2 = \"aac\"\r\nprint(\"These strings are permutations: {}\".format(check_permutation(str1, str2)))\r\n\r\n# test string permutations\r\nstr1 = \"abc\"\r\nstr2 = \"bca\"\r\nprint(\"These strings are permutations: {}\".format(check_permutation(str1, str2)))\r\n\r\nstr1 = \"abc\"\r\nstr2 = \"aac\"\r\nprint(\"These strings are permutations: {}\".format(check_permutation(str1, str2)))\r\n\r\n# test string permutations\r\nstr1 = \"abc\"\r\nstr2 = \"bca\"\r\nprint(\"These strings are permutations","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    str1 = str1.replace(\" \", \"\")\r\n    str2 = str2.replace(\" \", \"\")\r\n\r\n    str1_count = {}\r\n    str2_count = {}\r\n\r\n    for i in str1:\r\n        if i in str1_count:\r\n            str1_count[i] += 1\r\n        else:\r\n            str1_count[i] = 1\r\n\r\n    for i in str2:\r\n        if i in str2_count:\r\n            str2_count[i] += 1\r\n        else:\r\n            str2_count[i] = 1\r\n\r\n    for k, v in str1_count.items():\r\n        if k in str2_count:\r\n            if v != str2_count[k]:\r\n                return False\r\n        else:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\ncheck_permutation(\"hello\", \"oelhl\")\r\ncheck_permutation(\"hello\", \"olleh\")\r\ncheck_permutation(\"hello\", \"lohel\")\r\ncheck_permutation(\"hello\", \"hlelo\")\r\ncheck_permutation(\"hello\", \"ehllo\")\r\ncheck_permutation(\"hello\", \"hell\")\r\ncheck_permutation(\"hello\", \"helo\")\r\ncheck_permutation(\"hello\", \"hello\")\r\ncheck_permutation(\"hello\", \"h\")\r\ncheck_permutation(\"hello\", \"e\")\r\ncheck_permutation(\"hello\", \"ll\")\r\ncheck_permutation(\"hello\", \"lo\")\r\ncheck_permutation(\"hello\", \"o\")\r\ncheck_permutation(\"hello\", \"l\")\r\ncheck_permutation(\"hello\", \"helloo\")\r\ncheck_permutatio","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    \r\n    str1_list = list(str1)\r\n    str2_list = list(str2)\r\n    \r\n    for letter in str1_list:\r\n        if letter not in str2_list:\r\n            return False\r\n        \r\n        index = str2_list.index(letter)\r\n        str2_list[index] = None\r\n        \r\n    return True\r\n\r\nprint(check_permutation('asdf', 'fdsa'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permutation('asdf', 'sadf'))\r\nprint(check_permutation('asdf', 'asdfg'))\r\nprint(check_permutation('asdf', 'ASDF'))\r\nprint(check_permutation('asdf', 'asdfg'))\r\nprint(check_permutation('asdf', 'aSDf'))\r\nprint(check_permutation('asdf', 'asdf1'))\r\nprint(check_permutation('asdf', '1asdf'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permutation('asdf', 'asdf'))\r\nprint(check_permu","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    \r\n    str1_counter = Counter(str1)\r\n    str2_counter = Counter(str2)\r\n    \r\n    return str1_counter == str2_counter\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = ''.join(sorted(str1))\r\n    str2 = ''.join(sorted(str2))\r\n    return str1 == str2\r\n\r\n\r\nprint(check_permutation('abc', 'bca'))\r\nprint(check_permutation('abc', 'acb'))\r\nprint(check_permutation('abc', 'aab'))\r\nprint(check_permutation('abc', 'aac'))\r\nprint(check_permutation('abc', 'cba'))\r\nprint(check_permutation('abc', 'cbc'))\r\nprint(check_permutation('abc', 'abc'))\r\nprint(check_permutation('abcd', 'dcba'))\r\nprint(check_permutation('abcd', 'dabc'))\r\nprint(check_permutation('abcd', 'dcaa'))\r\nprint(check_permutation('abcd', 'daca'))\r\nprint(check_permutation('abcd', 'cdba'))\r\nprint(check_permutation('abcd', 'cadb'))\r\nprint(check_permutation('abcd', 'cdab'))\r\nprint(check_permutation('abcd', 'abcd'))\r\nprint(check_permutation('abcd', 'abce'))\r\nprint(check_permutation('abcd', 'ebac'))\r\nprint(check_permutation('abcd', 'edac'))\r\nprint(check_permutation('abcd', 'edba'))\r\nprint(check_permutation('abcd', 'edca'))\r\nprint(check_permutation('abcd', 'edcb'))\r\nprint(check_permutation('abcd', 'edcc'))\r\nprint(check_permutation('abcd', 'edde'))\r\nprint(check_permutation('abcd', 'eddd'))\r\nprint(check_permutation('a","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # Use a set to check if the letters appear in both strings.\r\n    str_set = set(str1)\r\n\r\n    for letter in str2:\r\n        if letter not in str_set:\r\n            return False\r\n        else:\r\n            str_set.remove(letter)\r\n\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1 = str1.lower()\r\n        str2 = str2.lower()\r\n        str1 = sorted(str1)\r\n        str2 = sorted(str2)\r\n        if str1 == str2:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r\nprint(check_permutation(\"aBc\", \"AbC\"))\r\nprint(check_permutation(\"aBc\", \"aBc\"))\r\nprint(check_permutation(\"abc\", \"acb\"))\r\nprint(check_permutation(\"abc\", \"abca\"))\r\nprint(check_permutation(\"aBc\", \"c","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1_set = set(str1)\r\n        for char in str2:\r\n            if char in str1_set:\r\n                str1_set.remove(char)\r\n            else:\r\n                return False\r\n        return True\r\n\r\n\r","votes":null},{"text":"\r\n    # Check the lengths of the strings are equal\r\n    if len(str1) != len(str2):\r\n        return False\r\n    # Sort the two strings\r\n    str1_sort = ''.join(sorted(str1))\r\n    str2_sort = ''.join(sorted(str2))\r\n    # Check the sorted strings are equal\r\n    if str1_sort == str2_sort:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(check_permutation(\"abc\", \"bca\"))\r\nprint(check_permutation(\"abc\", \"abc\"))\r\nprint(check_permutation(\"abc\", \"abd\"))\r\nprint(check_permutation(\"abc\", \"abcd\"))\r\nprint(check_permutation(\"abc\", \"abdc\"))\r\nprint(check_permutation(\"abc\", \"abcd\"))\r\nprint(check_permutation(\"abc\", \"abd\"))\r\nprint(check_permutation(\"abc\", \"ab\"))\r\nprint(check_permutation(\"abc\", \"ad\"))\r\nprint(check_permutation(\"abc\", \"adc\"))\r\nprint(check_permutation(\"abc\", \"b\"))\r\nprint(check_permutation(\"abc","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    elif len(str1) == 0:\r\n        return True\r\n    elif len(str1) == 1:\r\n        return str1 == str2\r\n    else:\r\n        str1 = str1.lower()\r\n        str2 = str2.lower()\r\n        str1_dict = {}\r\n        str2_dict = {}\r\n        for i in range(len(str1)):\r\n            if str1[i] in str1_dict:\r\n                str1_dict[str1[i]] += 1\r\n            else:\r\n                str1_dict[str1[i]] = 1\r\n        for i in range(len(str2)):\r\n            if str2[i] in str2_dict:\r\n                str2_dict[str2[i]] += 1\r\n            else:\r\n                str2_dict[str2[i]] = 1\r\n        for key in str1_dict.keys():\r\n            if str1_dict[key] != str2_dict[key]:\r\n                return False\r\n        return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1 = str1.lower()\r\n        str2 = str2.lower()\r\n        str1 = str1.replace(\" \", \"\")\r\n        str2 = str2.replace(\" \", \"\")\r\n        return str1 == str2\r\n\r\n\r\nprint(\"Check if strings are permutations of each other\")\r\nprint(\"Test 1:\")\r\nprint(check_permutation(\"abc\", \"bca\"))\r\nprint(\"Test 2:\")\r\nprint(check_permutation(\"abc\", \"cab\"))\r\nprint(\"Test 3:\")\r\nprint(check_permutation(\"abc\", \"acb\"))\r\nprint(\"Test 4:\")\r\nprint(check_permutation(\"abc\", \"ac\"))\r\nprint(\"Test 5:\")\r\nprint(check_permutation(\"abc\", \"acb\"))\r\nprint(\"Test 6:\")\r\nprint(check_permutation(\"abc\", \"ac\"))\r\nprint(\"Test 7:\")\r\nprint(check_permutation(\"abc\", \"acb\"))\r\nprint(\"Test 8:\")\r\nprint(check_permutation(\"abc\", \"ac\"))\r\nprint(\"Test 9:\")\r\nprint(check_permutation(\"abc\", \"acb\"))\r\nprint(\"Test 10:\")\r\nprint(check_permutation(\"abc\", \"ac\"))\r\nprint(\"Test 11:\")\r\nprint(check_permutation(\"abc\", \"acb\"))\r\nprint(\"Test 12:\")\r\nprint(check_permutation(\"abc\", \"ac\"))\r\nprint(\"Test 13:\")\r\nprint(check_permutation(\"abc\", \"acb\"))\r\nprint(\"Test 14:\")\r\nprint(check_permutation(\"abc\", \"ac\"))\r\nprint(\"Test 15:\")\r\nprint(check_permutation(\"abc\", \"acb\"))\r\nprin","votes":null},{"text":"\r\n    # if both strings are empty, they are permutations\r\n    if not str1 and not str2:\r\n        return True\r\n\r\n    # if only one of strings is empty, they are not permutations\r\n    if not str1 or not str2:\r\n        return False\r\n\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    # if the lengths of the strings are not equal, they are not permutations\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # create a dictionary from the string\r\n    # the dictionary will contain the character as key and the number of times the character appears in the string as value\r\n    # e.g. if the string is \"abcd\", the dictionary will be {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1}\r\n    dict1 = {}\r\n\r\n    for char in str1:\r\n        if char in dict1:\r\n            dict1[char] += 1\r\n        else:\r\n            dict1[char] = 1\r\n\r\n    # create another dictionary from the second string\r\n    dict2 = {}\r\n    for char in str2:\r\n        if char in dict2:\r\n            dict2[char] += 1\r\n        else:\r\n            dict2[char] = 1\r\n\r\n    # if the two dictionaries are equal, the two strings are permutations\r\n    if dict1 == dict2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print check_permutation(\"abcde\", \"abced\")\r\n    print check_permutation(\"abcde\", \"abcdf\")\r\n    print check_permutation(\"abcde\", \"abcde\")\r\n    print check_permutation(\"abcde\", \"abcef\")\r\n    print check_permutation(\"\", \"\")\r\n    print chec","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    \r\n    count1 = [0]*26\r\n    count2 = [0]*26\r\n    \r\n    for c in str1:\r\n        count1[ord(c) - ord('a')] += 1\r\n    \r\n    for c in str2:\r\n        count2[ord(c) - ord('a')] += 1\r\n    \r\n    for i in range(26):\r\n        if count1[i] != count2[i]:\r\n            return False\r\n    \r\n    return True\r\n\r\n\r\nprint(check_permutation('abc', 'acb'))\r\nprint(check_permutation('abc', 'ab'))\r\nprint(check_permutation('abc', 'abcd'))\r\nprint(check_permutation('abc', 'abdc'))\r\nprint(check_permutation('abc', 'bc'))\r\nprint(check_permutation('abc', 'bca'))\r\nprint(check_permutation('abc', 'cb'))\r\nprint(check_permutation('abc', 'cbc'))\r\nprint(check_permutation('abc', 'bca'))\r\nprint(check_permutation('abc', 'cab'))\r\nprint(check_permutation('abc', 'ac'))\r\nprint(check_permutation('abc', 'aca'))\r\nprint(check_permutation('abc', 'ca'))\r\nprint(check_permutation('abc', 'caa'))\r\nprint(check_permutation('abc', 'cab'))\r\nprint(check_permutation('abc', 'ac'))\r\nprint(check_permutation('abc', 'aca'))\r\nprint(check_permutation('abc', 'ca'))\r\nprint(check_permutation('abc', 'caa'))\r\nprint(check_permutation('abc', 'cab'))\r\nprint(check_permutation('abc'","votes":null},{"text":"\r\n    # check length\r\n    if len(str1) != len(str2):\r\n        return False\r\n    # check if the characters of str1 can be found in str2\r\n    for ch in str1:\r\n        if str2.count(ch) != str2.count(ch):\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    str1 = [x.lower() for x in str1]\r\n    str2 = [x.lower() for x in str2]\r\n   ","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    freq1 = [0] * 128\r\n    freq2 = [0] * 128\r\n    for i in str1:\r\n        freq1[ord(i)] += 1\r\n    for i in str2:\r\n        freq2[ord(i)] += 1\r\n    for i in range(128):\r\n        if freq1[i] != freq2[i]:\r\n            return False\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    str1 = 'abc'\r\n    str2 = 'acb'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'abc'\r\n    str2 = 'ac'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'abc'\r\n    str2 = 'bbc'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'abc'\r\n    str2 = 'abcd'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'abc'\r\n    str2 = 'ab'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'abc'\r\n    str2 = 'a'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'abc'\r\n    str2 = 'c'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'abc'\r\n    str2 = ''\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'ab'\r\n    str2 = 'bc'\r\n    print(check_permutation(str1, str2))\r\n    str1 = 'a","votes":null},{"text":"\r\n    # if the lengths of the two strings are not equal, they can't be permutations\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    # create a dictionary where the keys are characters in str1 and the values are 0\r\n    d = {}\r\n    for char in str1:\r\n        if char not in d:\r\n            d[char] = 0\r\n\r\n    # for each character in str2, if the character is not in the dictionary, return false\r\n    for char in str2:\r\n        if char not in d:\r\n            return False\r\n\r\n        # if the character is in the dictionary, add 1 to the value\r\n        else:\r\n            d[char] += 1\r\n\r\n    # for each character in str1, if the character's value in the dictionary is not 0, return false\r\n    for char in str1:\r\n        if d[char] != 0:\r\n            return False\r\n\r\n    # if all checks pass, return true\r\n    return True\r\n\r\n\r\nprint(check_permutation('abc', 'bca'))\r\nprint(check_permutation('abc', 'acb'))\r\nprint(check_permutation('abc', 'ba'))\r\nprint(check_permutation('abc', 'ac'))\r\nprint(check_permutation('abc', 'ab'))\r\nprint(check_permutation('abc', 'a'))\r\nprint(check_permutation('abc', 'abc'))\r\nprint(check_permutation('a', 'a'))\r\nprint(check_permutation('', ''))\r\nprint(check_permutation('abc', 'acbd'))\r\nprint(check_permutation('abc', 'ab'))\r\nprint(check_permutation('abc', 'bc'))\r\nprint(check_permutation('a', 'a'))\r\nprint(check_permutation('a', 'b'))\r\nprint(check_pe","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    str1_freq = get_letter_frequency(str1)\r\n    str2_freq = get_letter_frequency(str2)\r\n    return str1_freq == str2_freq\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = str1.replace(\" \", \"\")\r\n    str2 = str2.replace(\" \", \"\")\r\n    str1 = str1.replace(\"_\", \"\")\r\n    str2 = str2.replace(\"_\", \"\")\r\n    return sorted(str1) == sorted(str2)\r\n\r\n\r\nprint(check_permutation(\"Hello world\", \"drow Hello\"))\r\nprint(check_permutation(\"hello world\", \"drow Hello\"))\r\nprint(check_permutation(\"hello world\", \"hello world\"))\r\nprint(check_permutation(\"hello world\", \"hello world!\"))\r\nprint(check_permutation(\"\", \"\"))\r\nprint(check_permutation(\"\", \" \"))\r\nprint(check_permutation(\" \", \"\"))\r\nprint(check_permutation(\" \", \" \"))\r\nprint(check_permutation(\"Hello world\", \"Hello world\"))\r\nprint(check_permutation(\"Hello world\", \"Hello world!\"))\r\nprint(check_permutation(\"Hello world\", \"Hello world?\"))\r\nprint(check_permutation(\"Hello world\", \"Hello world \"))\r\nprint(check_permutation(\"Hello world\", \"Hello world_\"))\r\nprint(check_permutation(\"Hello world\", \"Hello world_ \"))\r\nprint(check_permutation(\"Hello world\", \"Hello world  \"))\r\nprint(check_permutation(\"Hello world\", \"Hello world_ \"))\r\nprint(check_permutation(\"Hello world\", \"Hello world_ \"))\r\nprint(check_permutation(\"Hello world\", \"Hello world_ \"))\r\nprint(check_permutation(\"Hello world\", \"Hello world_ \"))\r\nprint(check_permutation(\"Hello world\", \"Hello world_\"))\r\nprint(check_permutation(\"Hello world\", \"Hello world_!","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    dict1 = {}\r\n    dict2 = {}\r\n    for i in range(len(str1)):\r\n        if str1[i] not in dict1:\r\n            dict1[str1[i]] = 1\r\n        else:\r\n            dict1[str1[i]] += 1\r\n    for i in range(len(str2)):\r\n        if str2[i] not in dict2:\r\n            dict2[str2[i]] = 1\r\n        else:\r\n            dict2[str2[i]] += 1\r\n    if dict1 == dict2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(check_permutation(\"python\", \"python\"))\r\nprint(check_permutation(\"python\", \"php\"))\r\nprint(check_permutation(\"python\", \"python1\"))\r\nprint(check_permutation(\"AAB\", \"AAB\"))\r\nprint(check_permutation(\"AAB\", \"ABC\"))\r\nprint(check_permutation(\"AAB\", \"ABA\"))\r\nprint(check_permutation(\"AAB\", \"ABB\"))\r\nprint(check_permutation(\"AAB\", \"BAB\"))\r\nprint(check_permutation(\"AAB\", \"BBA\"))\r\nprint(check_permutation(\"AAB\", \"BBC\"))\r\nprint(check_permutation(\"AAB\", \"BCB\"))\r\nprint(check_permutation(\"AAB\", \"CBA\"))\r\nprint(check_permutation(\"AAB\", \"CAB\"))\r\nprint(check_permutation(\"AAB\", \"CBB\"))\r\nprint(check_permutation(\"AAB\", \"CBD\"))\r\nprint(check_permutation(\"AAB\", \"BAD\"))\r\nprint(check_permutation(\"AAB\", \"BBC\"))\r\nprint(check_permutation(\"AA","votes":null},{"text":"\r\n    # Solution 1: using sorting\r\n    # str1 = sorted(str1)\r\n    # str2 = sorted(str2)\r\n    # print(str1 == str2)\r\n\r\n    # Solution 2: using sets\r\n    # str1 = set(str1)\r\n    # str2 = set(str2)\r\n    # print(str1 == str2)\r\n\r\n    # Solution 3: using hash maps\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    count = {}\r\n    for c in str1:\r\n        count[c] = count.get(c, 0) + 1\r\n\r\n    for c in str2:\r\n        if c not in count:\r\n            return False\r\n        count[c] -= 1\r\n        if count[c] < 0:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    str1 = \"abc\"\r\n    str2 = \"bca\"\r\n    print(check_permutation(str1, str2))\r\n\r\n    str1 = \"abc\"\r\n    str2 = \"abcd\"\r\n    print(check_permutation(str1, str2))\r\n\r\n    str1 = \"abc\"\r\n    str2 = \"cab\"\r\n    print(check_permutation(str1, str2))\r\n\r\n    str1 = \"abc\"\r\n    str2 = \"acb\"\r\n    print(check_permutation(str1, str2))\r\n\r\n    str1 = \"abc\"\r\n    str2 = \"cba\"\r\n    print(check_permutation(str1, str2))\r\n\r\n    str1 = \"abc\"\r\n    str2 = \"acbd\"\r\n    print(check_permutation(str1, str2))\r\n\r\n    str1 = \"abc\"\r\n    str2 = \"acbd\"\r\n    print(check_permutatio","votes":null},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1_chars = set(str1)\r\n    str2_chars = set(str2)\r\n\r\n    if len(str1_chars) != len(str2_chars):\r\n        return False\r\n\r\n    for char in str2_chars:\r\n        if char in str1_chars:\r\n            str1_chars.remove(char)\r\n        else:\r\n            return False\r\n\r\n    return True\r\n\r\n\r\nprint(check_permutation(\"abcde\", \"edcba\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcbaa\"))\r\nprint(check_permutation(\"abcde\", \"edcb","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    if str1 == str2:\r\n        return True\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            return False\r\n    return True\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(check","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = sorted(str1)\r\n    str2 = sorted(str2)\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            return False\r\n    return True\r\n\r\nif __name__ == \"__main__\":\r\n    str1 = \"abc\"\r\n    str2 = \"cba\"\r\n    print(check_permutation(str1, str2))\r\n    str1 = \"aabb\"\r\n    str2 = \"bbaa\"\r\n    print(check_permutation(str1, str2))\r\n    str1 = \"aabb\"\r\n    str2 = \"bbaa\"\r\n    print(check_permutation(str1, str2))\r\n    str1 = \"abcd\"\r\n    str2 = \"dabc\"\r\n    print(check_permutation(str1, str2))\r\n    str1 = \"abcd\"\r\n    str2 = \"dcba\"\r\n    print(check_permutation(str1, str2))\r\n    str1 = \"abcd\"\r\n    str2 = \"aacb\"\r\n    print(check_permutation(str1, str2))\r\n    str1 = \"abcd\"\r\n    str2 = \"aabd\"\r\n    print(check_permutation(str1, str2))\r\n    str1 = \"abcd\"\r\n    str2 = \"dbba\"\r\n    print(check_permutation(str1, str2))\r\n    str1 = \"abc\"\r\n    str2 = \"cba\"\r\n    print(check_permutation(str1, str2))\r\n    str1 = \"aabb\"\r\n    str2 = \"bbaa\"\r\n    print(check_permutation(str1, str2))\r\n    str1 = \"aabb\"\r\n    str2 = \"bbaa\"\r\n    print(check_permutation(str1, st","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n    str1 = \"\".join(sorted(str1))\r\n    str2 = \"\".join(sorted(str2))\r\n    if str1 == str2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    str1 = 'Tact Coa'\r\n    str2 = 'taco cat'\r\n\r\n    print(\"str1: {} str2: {}\".format(str1, str2))\r\n    print(\"check_permutation: {}\".format(check_permutation(str1, str2)))\r\n\r\n    str1 = 'Tact Coa'\r\n    str2 = 'Taco Cat'\r\n\r\n    print(\"str1: {} str2: {}\".format(str1, str2))\r\n    print(\"check_permutation: {}\".format(check_permutation(str1, str2)))\r\n\r\n    str1 = 'Tact Coa'\r\n    str2 = 'taco cat'\r\n\r\n    print(\"str1: {} str2: {}\".format(str1, str2))\r\n    print(\"check_permutation: {}\".format(check_permutation(str1, str2)))\r\n\r\n    str1 = 'Tact Coa'\r\n    str2 = 'taco Cat'\r\n\r\n    print(\"str","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    str1 = ''.join(sorted(str1))\r\n    str2 = ''.join(sorted(str2))\r\n    return str1 == str2\r\n\r\n\r\n# Tests\r\nprint(check_permutation('abc', 'cba'))  # True\r\nprint(check_permutation('abc', 'cbaa'))  # False\r\nprint(check_permutation('abcd', 'cdab'))  # True\r\nprint(check_permutation('abcde', 'edacb'))  # True\r\nprint(check_permutation('abcde', 'edabc'))  # False\r\nprint(check_permutation('abcde', 'edcab'))  # False\r\nprint(check_permutation('abcde', 'edcabf'))  # False\r\nprint(check_permutation('abcde', 'edcabf'))  # False\r\nprint(check_permutation('abcde', 'edcab'))  # False\r\nprint(check_permutation('abcde', 'edcabf'))  # False\r\nprint(check_permutation('abcde', 'edcab'))  # False\r\nprint(check_permutation('abcde', 'edcabf'))  # False\r\nprint(check","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1_set = set(str1)\r\n        str2_set = set(str2)\r\n        if str1_set == str2_set:\r\n            return True\r\n        else:\r\n            return False\r\n\r\nstr1 = \"apple\"\r\nstr2 = \"apple\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"apple\"\r\nstr2 = \"appel\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"apple\"\r\nstr2 = \"applep\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"apple\"\r\nstr2 = \"applp\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"apple\"\r\nstr2 = \"appp\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"apple\"\r\nstr2 = \"app\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"apple\"\r\nstr2 = \"a\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"apple\"\r\nstr2 = \"\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"\"\r\nstr2 = \"apple\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"\"\r\nstr2 = \"\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"google\"\r\nstr2 = \"elgoog\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"google\"\r\nstr2 = \"elgoogl\"\r\nprint(check_permutation(str1, str2))\r\n\r\nstr1 = \"googl","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1_len = len(str1)\r\n        counter = 0\r\n        for i in range(str1_len):\r\n            for j in range(str1_len):\r\n                if str1[i] == str2[j]:\r\n                    counter += 1\r\n        return True if counter == len(str1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    # create a dictionary of the first string\r\n    dict1 = {}\r\n\r\n    # for each character in the first string\r\n    for char in str1:\r\n        # if the character is not in the dictionary\r\n        if char not in dict1:\r\n            # add the character to the dictionary\r\n            dict1[char] = 1\r\n        # if the character already exists in the dictionary\r\n        else:\r\n            # increment the value of the character in the dictionary\r\n            dict1[char] += 1\r\n\r\n    # create a dictionary for the second string\r\n    dict2 = {}\r\n\r\n    # for each character in the second string\r\n    for char in str2:\r\n        # if the character is not in the dictionary\r\n        if char not in dict2:\r\n            # add the character to the dictionary\r\n            dict2[char] = 1\r\n        # if the character already exists in the dictionary\r\n        else:\r\n            # increment the value of the character in the dictionary\r\n            dict2[char] += 1\r\n\r\n    # if the dictionary is equal to the first string\r\n    if dict1 == dict2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(check_permutation(\"Python\", \"Coding\"))\r\nprint(check_permutation(\"Python\", \"Coding\"))\r\nprint(check_permutation(\"Coding\", \"Python\"))\r\nprint(check_permutation(\"Python\", \"Python\"))\r\nprint(check_permutation(\"Python\", \"Coding\"))\r\nprint(check_permutation(\"Python\", \"Coding\"))\r\nprint(check_permutation(\"Coding\", \"Python\"))\r\nprint(check_permutation(\"Python\", \"Python\"))\r\nprint(check_permutation(","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n    else:\r\n        str1_dict = {}\r\n        for char in str1:\r\n            if char in str1_dict:\r\n                str1_dict[char] += 1\r\n            else:\r\n                str1_dict[char] = 1\r\n        for char in str2:\r\n            if char in str1_dict:\r\n                str1_dict[char] -= 1\r\n                if str1_dict[char] == 0:\r\n                    del str1_dict[char]\r\n            else:\r\n                return False\r\n        return len(str1_dict) == 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    print('check_permutation(\"abc\", \"cba\") returns', check_permutation(\"abc\", \"cba\"))\r\n    print('check_permutation(\"abc\", \"aab\") returns', check_permutation(\"abc\", \"aab\"))\r\n    print('check_permutation(\"abc\", \"abca\") returns', check_permutation(\"abc\", \"abca\"))\r\n    print('check_permutation(\"abc\", \"acb\") returns', check_permutation(\"abc\", \"acb\"))\r\n    print('check_permutation(\"abc\", \"cab\") returns', check_permutation(\"abc\", \"cab\"))\r\n    print('check_permutation(\"abc\", \"cba\") returns', check_permutation(\"abc\", \"cba\"))\r\n    print('check_permutation(\"abc\", \"ab\") returns', check_permutation(\"abc\", \"ab\"))\r\n    print('check_permutation(\"abc\", \"bac\") returns', check_permutation(\"abc\", \"bac\"))\r\n    print('check_permutation(\"abc\", \"bca\") returns', check_permutation(\"abc\", \"bca\"))\r\n    print('check_permutation(\"abc\", ","votes":null},{"text":"\r\n    if len(str1) != len(str2):\r\n        return False\r\n\r\n    str1 = str1.lower()\r\n    str2 = str2.lower()\r\n\r\n    ctr = 0\r\n    for i in range(len(str1)):\r\n        if str1[i] == str2[i]:\r\n           ","votes":null}],"time":{"count":58.0,"avg":134017.4077241379,"std":45237.0475917255,"cov":0.3375460573}}
{"id":534,"question":"def search_literal(pattern,text):\r\n    \"\"\"Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\"\"\"","answers":[{"text":"\r\n    if not pattern:\r\n        return None,None\r\n    if not text:\r\n        return None,None\r\n    if pattern == text:\r\n        return 0, 0\r\n    for n in range(len(text)-len(pattern)+1):\r\n        if text[n:n+len(pattern)]==pattern:\r\n            return n,n+len(pattern)\r\n\r\n\r","votes":103072.5},{"text":"\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return i, i+len(pattern)\r\n    return None\r\n\r\n\r","votes":142851.772},{"text":"\r\n    if not isinstance(text,str):\r\n        raise TypeError(\"Input text must be string.\")\r\n    if not isinstance(pattern,str):\r\n        raise TypeError(\"Input pattern must be string\")\r\n    if pattern == \"\":\r\n        raise ValueError(\"Input pattern can't be empty\")\r\n    if len(pattern) > len(text):\r\n        return None\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return (i,i+len(pattern))\r\n    return None\r\n\r\n\r","votes":188513.284},{"text":"\r\n\r\n    #Your code here\r\n    if type(pattern) != type('asd'):\r\n        raise TypeError(\"pattern must be a string\")\r\n    elif type(text) != type('asd'):\r\n        raise TypeError(\"text must be a string\")\r\n    if len(pattern) == 0:\r\n        raise ValueError(\"pattern must not be empty\")\r\n    if text.find(pattern) != -1:\r\n        return text.find(pattern),text.find(pattern)+len(pattern)\r\n    else:\r\n        return -1\r\n\r\n\r","votes":213416.664},{"text":"\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)]==pattern:\r\n            return i\r\n    return None\r\n\r","votes":null},{"text":"\r\n    l=0\r\n    while(1):\r\n        if(text[l:l+len(pattern)]==pattern):\r\n            print(\"Pattern found at index\",l)\r\n            break\r\n        l+=1\r\n        if(l==len(text)):\r\n            print(\"Pattern not found\")\r\n            break\r\n\r","votes":null},{"text":"\r\n    \r\n    for i in range(len(text)):\r\n        if text.find(pattern,i,i+len(pattern)) == i:\r\n            return (i,i+len(pattern)-1)\r\n    else:\r\n        return (-1,-1)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    position = text.find(pattern)\r\n    if position == -1:\r\n        return \"Search Literal Failed!\"\r\n    else:\r\n        return \"Search Literal Succeeded!\"\r\n\r\n\r","votes":null},{"text":"\r\n    if len(pattern) > len(text):\r\n        return \"Pattern is longer than the given string\"\r\n    else:\r\n        for i in range(len(text)-len(pattern)+1):\r\n            if text[i:i+len(pattern)] == pattern:\r\n                return \"Pattern found at postion {}\".format(i)\r\n        return \"Pattern not found\"\r\n\r\nprint(search_literal(\"hello\", \"hello world\"))\r\n\r\n\r","votes":null},{"text":"\r\n    index=0\r\n    pattern_length=len(pattern)\r\n    text_length=len(text)\r\n    while index<=text_length-pattern_length:\r\n        if pattern==text[index:index+pattern_length]:\r\n            print(\"Literal '%s' found at index %d\"%(pattern,index))\r\n        index+=1\r\n\r","votes":null},{"text":"\r\n    index = 0\r\n    while index < len(text):\r\n        if text[index:index+len(pattern)] == pattern:\r\n            print(\"Found at index: \",index)\r\n            return index\r\n        index += 1\r\n    return -1\r\n\r\nif __name__ == \"__main__\":\r\n    pattern = input(\"Enter pattern: \")\r\n    text = input(\"Enter text: \")\r\n    search_literal(pattern,text)\r\n\r\n\"\"\"Output:\r\nEnter pattern: 123\r\nEnter text: 123\r\nFound at index:  0\r\n\r\nEnter pattern: 123\r\nEnter text: 1234\r\nFound at index:  0\r\n\r\nEnter pattern: 123\r\nEnter text: 12345\r\nFound at index:  0\r\n\r\n","votes":null},{"text":"\r\n    for i in range(len(text)):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return i\r\n    return None\r\n\r\n# print(search_literal('cat','cat dog dog cat'))\r\n\r","votes":null},{"text":"\r\n    for i in range(len(text) - len(pattern) + 1):\r\n        j = 0\r\n        while (j < len(pattern)):\r\n            if text[i + j] != pattern[j]:\r\n                break\r\n            j += 1\r\n        if j == len(pattern):\r\n            return i\r\n    return None\r\n\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        print(\"The pattern was found!\")\r\n        print(\"The pattern was found at position:\",text.index(pattern))\r\n    else:\r\n        print(\"The pattern was not found!\")\r\n\r","votes":null},{"text":"\r\n    i=0\r\n    for lit in pattern:\r\n        i=text.find(lit,i)\r\n        if i==-1:\r\n            return False\r\n        i+=1\r\n    return True\r\n\r","votes":null},{"text":"\r\n\r\n    #print(pattern,text)\r\n    #print(pattern.index(text))\r\n    #print(pattern.find(text))\r\n    #print(pattern.find(text))\r\n    #print(pattern.find(text))\r\n    #print(pattern.find(text))\r\n    #print(pattern.find(text))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    #pattern = \"is\"\r\n    #text = \"this is a test\"\r\n    pattern_length = len(pattern)\r\n    text_length = len(text)\r\n    \r\n    for i in range(text_length-pattern_length+1):\r\n        if pattern == text[i:i+pattern_length]:\r\n            print(\"the pattern found at location: \" + str(i))  \r\n            return True\r\n    return False\r\n\r\nsearch_literal(\"is\", \"this is a test\")\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if pattern[0] == text[i]:\r\n            if pattern == text[i:i+len(pattern)]:\r\n                print(text[i:i+len(pattern)])\r\n                print(i)\r\n                break\r\n    \r\n\r","votes":null},{"text":"\r\n    for i in range(len(text)):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            print(pattern, \"found at\", i)\r\n            return\r\n    print(\"Pattern not found.\")\r\nsearch_literal(\"python\", \"I love Python\")\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        print(f\"{pattern} is found at index {text.index(pattern)}\")\r\n","votes":null},{"text":"\r\n    l=len(pattern)\r\n    for i in range(len(text)):\r\n        if text[i:i+l]==pattern:\r\n            return i\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    \r\n    \"\"\"Returns the first occurrence of a literal in text. If the\r\n    literal is not found, it returns None. If found, the location (index) \r\n    of the first occurrence is returned.\"\"\"\r\n    \r\n    \"\"\"Returns the last occurrence of a literal in text. If the\r\n    literal is not found, it returns None. If found, the location (index) \r\n    of the last occurrence is returned.\"\"\"\r\n    \r\n    \"\"\"Returns a list of all occurrences of a literal in text. If the\r\n    literal is not found, it returns an empty list. If found, a list\r\n    of all indices of the occurrences is returned.\"\"\"\r\n    \r\n    return pattern in text\r\n\r\n\r","votes":null},{"text":"\r\n    pos = 0\r\n    while pos < len(text):\r\n        if text[pos:pos+len(pattern)] == pattern:\r\n            return True,pos\r\n        pos += 1\r\n    return False,0\r\n\r\n\r","votes":null},{"text":"\r\n    return [i for i,letter in enumerate(text) if letter == pattern[0]]\r\n\r","votes":null},{"text":"\r\n    pos = 0\r\n    while pattern in text[pos:]:\r\n        loc = text.find(pattern,pos)\r\n        print(loc)\r\n        pos = loc + len(pattern)\r\n\r","votes":null},{"text":"\r\n    location=[-1]\r\n    for i in range(len(text)):\r\n        if text[i:i+len(pattern)]==pattern:\r\n            location[0]=i\r\n    return location\r\n\r","votes":null},{"text":"\r\n    i=0\r\n    while i < len(text):\r\n        if pattern == text[i:i+len(pattern)]:\r\n            return i\r\n        i+=1\r\n    return None\r\n\r\nprint(search_literal('bob','bob'))\r\nprint(search_literal('bob','bob the builder'))\r\nprint(search_literal('bob','the builder bob'))\r\nprint(search_literal('bob','bob is a builder'))\r\nprint(search_literal('bob','bob the builder is a builder'))\r\nprint(search_literal('bob','bob the builder is a builder bob'))\r\nprint(search_literal('bob','bob the builder is a builder bob bob'))\r\nprint(search_literal('bob','bob the builder is a builder bob bob bob'))\r\nprint(search_literal('bob','bob the builder is a builder bob bob bob bob'))\r\nprint(search_literal('bob','bob is a builder bob'))\r\nprint(search_literal('bob','bob the builder is a builder bob bob is a builder'))\r\nprint(search_literal('bob','bob is a builder bob the builder is a builder'))\r\nprint(search_literal('bob','bob the builder is a builder bob is a builder bob'))\r\nprint(search_literal('bob','bob the builder is a builder bob bob is a builder bob'))\r\nprint(search_literal('bob','bob the builder is a builder bob bob is a builder bob bob'))\r\nprint(search_literal('bob','bob the builder is a builder bob bob is a builder bob bob bob'))\r\nprint(search_literal('bob','bob the builder is a builder bob bob is a builder bob bob bob bob'))\r\nprint(searc","votes":null},{"text":"\r\n    return (text.find(pattern))\r\n    \r","votes":null},{"text":"\r\n    pattern_len = len(pattern)\r\n    text_len = len(text)\r\n    if pattern_len > text_len:\r\n        return\r\n    else:\r\n        for i in range(0,text_len-pattern_len+1):\r\n            temp_text = text[i:i+pattern_len]\r\n            if temp_text == pattern:\r\n                print(f\"Found at index {i}\")\r\n                break\r\n\r","votes":null},{"text":"\r\n    pattern_length = len(pattern)\r\n    text_length = len(text)\r\n    for i in range(text_length-pattern_length+1):\r\n        if pattern == text[i:i+pattern_length]:\r\n            print(\"Found at position: \", i)\r\n            return i\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(text)<len(pattern):\r\n        return False,0\r\n    \r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)]==pattern:\r\n            return True,i\r\n            \r\n    return False,0\r\n    \r\n    \r","votes":null},{"text":"\r\n    pattern_length = len(pattern)\r\n    text_length = len(text)\r\n    for i in range(text_length - pattern_length + 1):\r\n        if pattern == text[i:i+pattern_length]:\r\n            print(f\"Pattern found at index {i}\")\r\n    \r\n    \r","votes":null},{"text":"\r\n    text_len = len(text)\r\n    pattern_len = len(pattern)\r\n    for i in range(text_len-pattern_len+1):\r\n        temp = text[i:i+pattern_len]\r\n        if temp == pattern:\r\n            return i\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    if len(pattern) == 0:\r\n        return 0\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return i\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    \r\n    result = []\r\n    for i in range(len(text)):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            result.append(i)\r\n    return result\r\n\r\n\r\nprint(search_literal('the', 'thetraininthesmallhours'))\r\nprint(search_literal('the', 'thetraininthesmallhour'))\r\nprint(search_literal('the', 'thetraininthesmallhoursanddestroysyourlifepath'))\r\nprint(search_literal('the', 'the'))\r\nprint(search_literal('the', 'the train in the small hours'))\r\nprint(search_literal('the', 'the train in the small hours'))\r\nprint(search_literal('the', 'the train in the small hours and destroys your life path'))\r\nprint(search_literal('the', 'the train in the small hours and destroys your life path'))\r\nprint(search_literal('the', 'the train in the small hours and destroys your life path'))\r\n\r\n\r","votes":null},{"text":"\r\n    pattern_index = text.find(pattern)\r\n    if pattern_index != -1:\r\n        return pattern_index\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        print(text.find(pattern))\r\n    else:\r\n        print(\"Not Found\")\r\n\r","votes":null},{"text":"\r\n    res = []\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            res.append((i,i+len(pattern)-1))\r\n    return res\r\n    \r\n\r\n\r","votes":null},{"text":"\r\n    if text == pattern:\r\n        return True,0\r\n    else:\r\n        return False,0\r\n\r","votes":null},{"text":"\r\n    for i in range(len(text)):\r\n        if text[i:i+len(pattern)]==pattern:\r\n            return i\r\n    return -1\r\n\r\n#print(search_literal(\"is\",\"this is a string\"))\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(text) < len(pattern):\r\n        return None\r\n    \r\n    for i in range(len(text) - len(pattern) + 1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return i\r\n    \r\n    return None\r\n\r","votes":null},{"text":"\r\n    start_index = 0\r\n    end_index = 0\r\n    for i in range(0,len(text)):\r\n        if text[i] == pattern[0]:\r\n            start_index = i\r\n            while start_index < len(text) and end_index < len(pattern):\r\n                if text[start_index] == pattern[end_index]:\r\n                    end_index += 1\r\n                start_index += 1\r\n            if end_index == len(pattern):\r\n                return start_index,end_index\r\n    return -1,-1\r\n\r\n\r","votes":null},{"text":"\r\n    pattern_len = len(pattern)\r\n    text_len = len(text)\r\n    for i in range(text_len - pattern_len + 1):\r\n        if text[i:i+pattern_len] == pattern:\r\n            print('Found',pattern,'at',i)\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    pattern_len = len(pattern)\r\n    text_len = len(text)\r\n    for i in range(text_len):\r\n        if pattern == text[i:i+pattern_len]:\r\n            return 'Found pattern \"{}\" at location {}'.format(pattern,i)\r\n    return 'Not Found'\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(pattern)\r\n    m = len(text)\r\n    j = 0\r\n    for i in range(m-n+1):\r\n        if text[i:i+n] == pattern:\r\n            j = i\r\n            break\r\n    \r\n    if j == 0:\r\n        return \"Pattern not found in the text\"\r\n    else:\r\n        return \"Pattern found at location: \",j\r\n\r\nprint(search_literal('the','These are the days of our lives'))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        return text.index(pattern),pattern\r\n    else:\r\n        return -1,None\r\n\r","votes":null},{"text":"\r\n    i=0\r\n    while i<len(text):\r\n        if text[i]==pattern:\r\n            print(f\"Found the pattern at {i}\")\r\n        i=i+1\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return True,i\r\n    return False,None\r\n\r","votes":null},{"text":"\r\n    \r\n    pattern_length = len(pattern)\r\n    text_length = len(text)\r\n    \r\n    for i in range(text_length - pattern_length + 1):\r\n        is_found = True\r\n        \r\n        for j in range(pattern_length):\r\n            if pattern[j] != text[i + j]:\r\n                is_found = False\r\n                break\r\n        \r\n        if is_found:\r\n            print(f\"Pattern found at index {i}\")\r\n            break\r\n    \r\n    if not is_found:\r\n        print(\"Pattern not found\")\r\n    \r\nif __name__ == \"__main__\":\r\n    pattern = \"ababab\"\r\n    text = \"abababababababababababababababababababababababababababababababababababababababababababababababab","votes":null},{"text":"\r\n    \r\n    for i in range(len(text)-len(pattern)+1):\r\n        j = 0\r\n        while j < len(pattern):\r\n            if text[i+j] == pattern[j]:\r\n                j += 1\r\n            else:\r\n                break\r\n        if j == len(pattern):\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    for i in range(0,len(text)):\r\n        if text[i:i+len(pattern)]==pattern:\r\n            print(f\"{pattern} is found at {i}\")\r\n\r\n\r","votes":null},{"text":"\r\n    i=0\r\n    while(i<=len(text)):\r\n        if text[i:i+len(pattern)]==pattern:\r\n            return i\r\n        i+=1\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    index=text.find(pattern)\r\n    if index==-1:\r\n        return None\r\n    else:\r\n        return index\r\n\r","votes":null},{"text":"\r\n    start = 0\r\n    end = 0\r\n    while start < len(text):\r\n        if pattern[0] == text[start]:\r\n            if pattern == text[start:start+len(pattern)]:\r\n                end = start+len(pattern)\r\n                return (pattern,start,end)\r\n            else:\r\n                start += 1\r\n        else:\r\n            start = start + 1\r\n    return (\"Not found\",0,0)\r\n\r","votes":null},{"text":"\r\n    \r\n    pattern_list = list(pattern)\r\n    text_list = list(text)\r\n    text_length = len(text_list)\r\n    pattern_length = len(pattern_list)\r\n    \r\n    for i in range(text_length):\r\n        if text_list[i] == pattern_list[0]:\r\n            if text_list[i:i+pattern_length] == pattern_list:\r\n                print(pattern_list)\r\n                print(text[i:i+pattern_length])\r\n                print(text.index(pattern))\r\n                return text.index(pattern)\r\n\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    text_len = len(text)\r\n    pattern_len = len(pattern)\r\n    for i in range(text_len - pattern_len):\r\n        if text[i:i+pattern_len] == pattern:\r\n            return i\r\n    return -1\r\n\r\nprint(search_literal('bcd','abcdefg'))\r\nprint(search_literal('bcd','abcdefgabcdefg'))\r\nprint(search_literal('bcd','abcd'))\r\nprint(search_literal('bcd','abcde'))\r\nprint(search_literal('bcd','abcdeabcde'))\r\nprint(search_literal('bcd','abcdeabcdefg'))\r\nprint(search_literal('bcd','abcdeabcdefgabcde'))\r\nprint(search_literal('bcd','abcdeabcdefgabcdeabcde'))\r\nprint(search_literal('bcd','abcdeabcdefgabcdeabcdefg'))\r\nprint(search_literal('bcd','abcdeabcdefgabcdeabcdefgabcde'))\r\nprint(search_literal('bcd','abcdeabcdefgabcdeabcdefgabcdeabcde'))\r\nprint(search_literal('bcd','abcdeabcdefgabcdeabcdefgabcdeabcdeabcde'))\r\nprint(search_literal('bcd','abcdeabcdefgabcdeabcdefgabcdeabcdeabcdefg'))\r\nprint(search_literal('bcd','abcdeabcdefgabcdeabcdefgabcdeabcdeabcdefgabcde'))\r\nprint(search_literal('bcd','abcdeabcdefgabcdeabcdefgabcdeabcdeabcdefgabcdeabcde'))\r\nprint(search_literal('bcd','abcdeabcdefgabcdeabcdefgabcdeabcdeabcdefgabcdeabcdefg'))\r\nprint(search_literal('bcd','abcdeabcdefgabcdeabcdefgabcdeabcdeab","votes":null},{"text":"\"\"\"\"\r\n    if pattern in text:\r\n        return True\r\n   ","votes":null},{"text":"\r\n    return [m.start() for m in re.finditer(pattern,text)]\r\n#print(search_literal(\"abc\",\"abcdefgh\"))\r\n\r","votes":null},{"text":"\r\n    n = len(pattern)\r\n    m = len(text)\r\n    for i in range(m-n+1):\r\n        if text[i:i+n] == pattern:\r\n            print(\"Index of the pattern in the text is \",i,\"\\nPattern is found at index \",i)\r\n\r","votes":null},{"text":"\r\n    #check if the pattern is a substring of the text\r\n    if pattern in text:\r\n        return text.index(pattern)\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if(text[i:i+len(pattern)]==pattern):\r\n            print(\"The match occurs at position\",i)\r\n            return True\r\n    print(\"The match does not occur\")\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    #print(text)\r\n    #print(pattern)\r\n    #print(\"-\"*50)\r\n    l=[]\r\n    for i in range(len(text)):\r\n        if(text[i:i+len(pattern)]==pattern):\r\n            l.append(i)\r\n    return l\r\n\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"ab\",\"bannana\"))\r\nprint(search_literal(\"a\",\"banana\"))\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"a\",'banana'))\r\nprint(search_literal(\"a\",\"banana\"))\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"a\",\"banana\"))\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"a\",'banana'))\r\nprint(search_literal(\"a\",\"banana\"))\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"a\",\"banana\"))\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"a\",'banana'))\r\nprint(search_literal(\"a\",\"banana\"))\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"a\",\"banana\"))\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"a\",'banana'))\r\nprint(search_literal(\"a\",\"banana\"))\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"a\",\"banana\"))\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"a\",'banana'))\r\nprint(search_literal(\"a\",\"banana\"))\r\nprint(search_literal(\"ab\",\"banana\"))\r\nprint(search_literal(\"","votes":null},{"text":"\r\n    index = 0\r\n    pattern_length = len(pattern)\r\n    text_length = len(text)\r\n    while index < text_length - pattern_length + 1:\r\n        if pattern == text[index:index + pattern_length]:\r\n            return index\r\n        index += 1\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        return True , text.index(pattern)\r\n    else:\r\n        return False, None\r\n\r","votes":null},{"text":"\r\n    location = []\r\n    i = 0\r\n    while i < len(text):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            location.append(i)\r\n        i += 1\r\n        \r\n    return location\r\n\r","votes":null},{"text":"\r\n    position=text.find(pattern)\r\n    if position==-1:\r\n        print(\"Not found\")\r\n    else:\r\n        print(position)\r\n    return position\r\n\r","votes":null},{"text":"\r\n    pattern = pattern.lower()\r\n    text = text.lower()\r\n    i = 0\r\n    pos = 0\r\n    while (i < len(text)):\r\n        if (text[i] == pattern[pos]):\r\n            pos = pos + 1\r\n            i = i + 1\r\n        else:\r\n            i = i + 1\r\n            pos = 0\r\n    if (pos == len(pattern)):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":null},{"text":"\r\n    if pattern in text:\r\n        return \"The pattern is found at position \" + str(text.find(pattern))\r\n    else:\r\n        return \"The pattern is not found in the string.\"\r\n\r","votes":null},{"text":"\r\n    \r\n    for i in range(len(text)):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            print(i)\r\n            print(text[i:i+len(pattern)])\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    #pattern = 'abc'\r\n    #text = 'abcde'\r\n    #pattern = 'abcd'\r\n    #text = 'abcde'\r\n    #pattern = 'abcd'\r\n    #text = 'abcde'\r\n    #pattern = 'abcde'\r\n    #text = 'abcde'\r\n    #pattern = 'abcde'\r\n    #text = 'abcde'\r\n    #pattern = 'abcde'\r\n    #text = 'abcde'\r\n    #pattern = 'abcde'\r\n    #text = 'abcde'\r\n    #pattern = 'abcde'\r\n    #text = 'abcde'\r\n    #pattern = 'abcde'\r\n    #text = 'abcde'\r\n    #pattern = 'abcde'\r\n    #text = 'abcde'\r\n    #pattern = 'abcde'\r\n    #text = 'abcde'\r\n    #pattern = 'abcde'\r\n    #text = 'abcde'\r\n    pattern_len = len(pattern)\r\n    text_len = len(text)\r\n    for i in range(text_len - pattern_len + 1):\r\n        if text[i:i+pattern_len] == pattern:\r\n            return i\r\n    return False\r\n\r","votes":null},{"text":"\r\n    #initialize\r\n    flag = 0\r\n    \r\n    #find the index of the first character in pattern\r\n    index = text.find(pattern[0])\r\n    \r\n    #if pattern is not present in the text\r\n    if index == -1:\r\n        return \"pattern not present\"\r\n    \r\n    #loop to find the index of every character in pattern\r\n    for i in range(len(pattern)):\r\n        try:\r\n            #if pattern is present in the text\r\n            if pattern[i] == text[index + i]:\r\n                flag = 1\r\n        except:\r\n            #if pattern is not present in the text\r\n            return \"pattern not present\"\r\n        \r\n        #if pattern is not present in the text\r\n        if flag == 0:\r\n            return \"pattern not present\"\r\n    \r\n    #if pattern is present in the text\r\n    return \"pattern present at\", index\r\n\r\n#test case 1\r\ntext = \"banana\"\r\npattern = \"ana\"\r\nprint(search_literal(pattern,text))\r\n\r\n#test case 2\r\ntext = \"banana\"\r\npattern = \"na\"\r\nprint(search_literal(pattern,text))\r\n\r\n#test case 3\r\ntext = \"banana\"\r\npattern = \"banana\"\r\nprint(search_literal(pattern,text))\r\n\r\n#test case 4\r\ntext = \"banana\"\r\npattern = \"bananaa\"\r\nprint(search_literal(pattern,text))\r\n\r\n#test case 5\r\ntext = \"banana\"\r\npattern = \"banan\"\r\nprint(search_literal(pattern,text))\r\n\r\n#test case 6\r\ntext = \"banana\"\r\npattern = \"ban\"\r\nprint(search_literal(pattern,text))\r\n\r\n#test case 7\r\ntext = \"banana\"\r\npattern = \"an\"\r\nprint(search_literal(pattern,text)","votes":null},{"text":"\r\n    pattern_len = len(pattern)\r\n    text_len = len(text)\r\n    \r\n    for i in range(text_len - pattern_len + 1):\r\n        if text[i:i+pattern_len] == pattern:\r\n            print(f\"Found pattern '{pattern}' at position {i}\")\r\n            return i\r\n    print(f\"Pattern '{pattern}' not found in string '{text}'\")\r\n    return None\r\n\r\n\r","votes":null},{"text":"\r\n    return pattern in text\r\n\r\n\r","votes":null},{"text":"\r\n    return text.find(pattern)\r\n\r","votes":null},{"text":"\r\n    \r\n    index=0\r\n    length=len(pattern)\r\n    while index<len(text):\r\n        if text[index:index+length]==pattern:\r\n            print(pattern,index,index+length)\r\n            index=index+length\r\n        else:\r\n            index+=1\r\n    \r\n    \r\ntext=\"I am a good boy and I am a good boy also\"\r\nsearch_literal(\"good\",\"I am a good boy and I am a good boy also\")\r\nsearch_literal(\"good\",\"I am a good boy and I am a good boy also\")\r\n\r\n\r\n# In[1]:\r\n\r\n\r","votes":null},{"text":"\r\n    #find the index location of the first occurance of the pattern\r\n    index = text.find(pattern)\r\n    #if the pattern is found, print the index location and the text\r\n    if index != -1:\r\n        print('the index location of the first occurance of the pattern is %d' % index)\r\n        print('the text is %s' % text[index:index+len(pattern)])\r\n    #if the pattern is not found, print the index location and the text\r\n    else:\r\n        print('the pattern was not found')\r\n        print('the text is %s' % text)\r\n\r","votes":null},{"text":"\r\n    # TODO: Improve this code\r\n    if pattern not in text:\r\n        return -1\r\n    else:\r\n        return text.index(pattern)\r\n\r","votes":null},{"text":"\r\n    pattern_len=len(pattern)\r\n    text_len=len(text)\r\n    if pattern_len>text_len:\r\n        print(\"The pattern is not present in the text.\")\r\n    else:\r\n        for i in range(text_len):\r\n            if pattern==text[i:i+pattern_len]:\r\n                print(\"The pattern is present at index:\",i)\r\n                break\r\n\r\n\r\nif __name__==\"__main__\":\r\n    text=input(\"Enter the text to search the pattern:\")\r\n    pattern=input(\"Enter the pattern to search in the text:\")\r\n    search_literal(pattern,text)\r","votes":null},{"text":"\r\n    pattern_length = len(pattern)\r\n    text_length = len(text)\r\n    for i in range(text_length):\r\n        if text[i:i+pattern_length]==pattern:\r\n            print(\"Found pattern\",pattern,\"at index\",i)\r\n\r\n\r\nsearch_literal(\"ab\", \"abcd\")\r\nsearch_literal(\"ab\", \"abcde\")\r\nsearch_literal(\"ab\", \"abcdd\")\r\n\r\n\r","votes":null},{"text":"\r\n    #print(text)\r\n    for i in range(len(text)):\r\n        if text[i:i+len(pattern)]==pattern:\r\n            #print(text[i:i+len(pattern)])\r\n            #print(i)\r\n            return i\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return True, i\r\n    return False, -1\r\n\r","votes":null},{"text":"\r\n    # TODO: write your code here\r\n    pass\r\n","votes":null},{"text":"\r\n    for i in range(len(text)):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return True,i\r\n    return False,None\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if pattern == '':\r\n        if text == '':\r\n            return (0,0)\r\n        else:\r\n            return (None,None)\r\n    if len(pattern) > len(text):\r\n        return (None,None)\r\n    if pattern == text:\r\n        return (0,len(text)-1)\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return (i,i+len(pattern)-1)\r\n    return (None,None)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if pattern=='':\r\n        return 0\r\n    if len(text)<len(pattern):\r\n        return 0\r\n    if pattern[0] not in text:\r\n        return 0\r\n    \r\n    n=len(pattern)\r\n    m=len(text)\r\n    for i in range(m-n+1):\r\n        if text[i:i+n]==pattern:\r\n            return i\r\n    \r\n    return 0\r\n\r\nprint(search_literal(\"abc\",\"abc\"))\r\nprint(search_literal(\"abc\",\"abcd\"))\r\nprint(search_literal(\"abc\",\"ab\"))\r\nprint(search_literal(\"abc\",\"bc\"))\r\nprint(search_literal(\"abc\",\"d\"))\r\nprint(search_literal(\"abc\",\"abd\"))\r\nprint(search_literal(\"abc\",\"abx\"))\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(text)):\r\n        for j in range(len(pattern)):\r\n            if text[i+j] == pattern[j]:\r\n                continue\r\n            else:\r\n                break\r\n        else:\r\n            print(f'Match found at index {i}')\r\n            return\r\n    print(f'No match found')\r\n    \r\n\r","votes":null},{"text":"\r\n    if len(text) < len(pattern):\r\n        return None\r\n    \r\n    for i in range(len(text)-len(pattern)+1):\r\n        c = text[i]\r\n        if c == pattern[0]:\r\n            if text[i:i+len(pattern)] == pattern:\r\n                return i\r\n    return None\r\n\r","votes":null},{"text":"\r\n    i=0\r\n    while i<len(text):\r\n        if text[i:i+len(pattern)]==pattern:\r\n            print(pattern,\"found at position\",i)\r\n            return i\r\n        i+=1\r\n    print(pattern,\"not found\")\r\n    return -1\r\n\r\nsearch_literal(\"frog\",\"How do you like the frog\")\r\nsearch_literal(\"frog\",\"The frog is the same as the frog\")\r\n\r\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(len(text) - len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            count += 1\r\n            if count == 1:\r\n                print(f\"Pattern found at location: {i}\")\r\n    else:\r\n        print(\"Pattern not found.\")\r\n\r","votes":null},{"text":"\r\n    n=len(text)\r\n    m=len(pattern)\r\n    for i in range(n-m+1):\r\n        j=0\r\n        while j<m and text[i+j]==pattern[j]:\r\n            j+=1\r\n        if j==m:\r\n            return True,i\r\n    return False,0\r\n\r","votes":null},{"text":"\r\n    \r\n    index = 0\r\n    \r\n    while(index < len(text)):\r\n        if text[index] == pattern[0]:\r\n            if text[index:index+len(pattern)] == pattern:\r\n                return True,index\r\n        index += 1\r\n    return False,index\r\n\r","votes":null},{"text":"\r\n    import re\r\n    return re.finditer(pattern,text)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    loc = [i for i,j in enumerate(text) if j==pattern[0]]\r\n    for i in loc:\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return pattern,i\r\n    return None,None\r\n\r\n\r","votes":null},{"text":"\r\n    if pattern == \"\":\r\n        return False\r\n    \r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return True, i\r\n    return False, -1\r\n\r","votes":null},{"text":"\r\n    #Write your code here\r\n    for i in range(len(text)-len(pattern)+1):\r\n        if text[i:i+len(pattern)]==pattern:\r\n            return i\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    #pattern = 'hello'\r\n    #text = 'hello world'\r\n    if pattern not in text:\r\n        return None, None\r\n    else:\r\n        return text.index(pattern), len(pattern)\r\n\r\n\r","votes":null},{"text":"\r\n    #pattern = str(pattern)\r\n    #text = str(text)\r\n    for i in range(len(text)):\r\n        if text[i:i+len(pattern)] == pattern:\r\n            return i\r\n            break\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    pos = text.find(pattern)\r\n    if pos == -1:\r\n        return None\r\n    else:\r\n        return (pos,pos+len(pattern)-1)\r\n\r","votes":null},{"text":"\r\n    if len(pattern) > len(text):\r\n        return None,None\r\n    else:\r\n        for i in range(len(text)):\r\n            if pattern == text[i:i+len(pattern)]:\r\n                return pattern,i\r\n        return None,None\r\n\r","votes":null}],"time":{"count":4.0,"avg":161963.555,"std":48941.2135259961,"cov":0.3021742362}}
{"id":538,"question":"def string_list_to_tuple(str1):\r\n    \"\"\"Write a python function to convert a given string list to a tuple.\"\"\"","answers":[{"text":"\r\n    str1 = str1.replace(\"'\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\" \", \"\")\r\n    return tuple(str1)\r\n\r\n\r","votes":141844.296},{"text":"\r\n    str1 = str1.replace(\"[\", \"\")\r\n    str1 = str1.replace(\"]\", \"\")\r\n    str2 = str1.replace(\"'\", \"\")\r\n    str2 = str2.replace(\" \", \"\")\r\n    str2 = str2.replace(\",\", \"\")\r\n    str3 = \"\".join(str2)\r\n    str4 = tuple(str3)\r\n    return str4\r\n\r\n\r","votes":154674.028},{"text":"\r\n    str1=str1.strip('[]')\r\n    str1=str1.replace(' ','')\r\n    str1=str1.replace(\"'\",'')\r\n    str1=str1.replace(',','')\r\n    str1=str1.replace('\\'','')\r\n    return tuple(str1)\r\n\r\n\r","votes":185441.132},{"text":"\r\n    \r\n    str_lst = str1.split()\r\n    tup = tuple(str_lst)\r\n    \r\n    return tup\r\n\r\n\r\nprint(string_list_to_tuple(\"this is a string list\"))\r\n\r\n\r\n\"\"\"\r\nOutput:\r\n\r\n('this', 'is', 'a', 'string', 'list')\r\n\r\n\r\nExpected Output:\r\n\r\n    ('this', 'is', 'a', 'string', 'list')\r\n\r\n\r\nSolution Explanation:\r\n\r\n    The function takes a string as an input and converts it to a tuple.\r\n    The function splits the string into a list of strings using .split().\r\n    The function converts the list to a tuple using tuple().\r\n\r\n    The function then returns the tuple.\r\n\r\n    The result is a tuple of the string list.\r\n\"\"\"\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # code starts here\r\n    lst=str1.split(',')\r\n    tuple=tuple(lst)\r\n    return tuple\r\n\r\n\n\n# --------------\n#Code starts here\r\nimport pandas as pd\r\nimport numpy as np\r","votes":null},{"text":"\r\n    \r\n    str1 = str(str1)\r\n    str1 = str1.replace('[', '').replace(']', '')\r\n    lst = str1.split(',')\r\n    tpl = tuple(lst)\r\n    return tpl\r\n\r\nprint(string_list_to_tuple('[\"abc\", \"","votes":null},{"text":"\r\n    str2=str1.split()\r\n    str3=tuple(str2)\r\n    return str3\r\n\r","votes":null},{"text":"\r\n    str_list = str1.split(',')\r\n    str_tuple = tuple(str_list)\r\n    return str_tuple\r\n\r\n# string_list_to_tuple(\"1,2,3\")\r\n\r\n# 5\r","votes":null},{"text":"\r\n    str1 = list(str1)\r\n    return tuple(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    str1","votes":null},{"text":"\r\n    # Your code goes here\r\n    return tuple(str1.split(','))\r\n\r\n\r\n# Examples:\r\nprint(string_list_to_tuple(\"[A, B, C]\"))\r\nprint(string_list_to_tuple(\"[D, E]\"))\r\n\r\n\r","votes":null},{"text":"\r\n    if str1 == \"\":\r\n        return ()\r\n    else:\r\n        return tuple(str1.split(\",\"))\r\n\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    str1.strip()\r\n    for i in str1:\r\n        new_list.append(i)\r\n    return tuple(new_list)\r\n\r\n\r","votes":null},{"text":"\r\n    str2 = str1.split(',')\r\n    str3 = tuple(str2)\r\n    return str3\r\n\r\n\r","votes":null},{"text":"\r\n    str_list = str1.split()\r\n    return tuple(str_list)\r\n\r\n\r","votes":null},{"text":"\r\n    li=list(str1)\r\n    tup=tuple(li)\r\n    return tup\r\n\r","votes":null},{"text":"\r\n    list1 = str1.split(\",\")\r\n    list1.sort()\r\n    tuple1 = tuple(list1)\r\n    return tuple1\r\n\r\n\r","votes":null},{"text":"\r\n    print(tuple(str1))\r\n    return tuple(str1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    str1 = str1.replace('[', '')\r\n    str1 = str1.replace(']', '')\r\n    str1 = str1.replace(\"'\", '')\r\n    str1 = str1.replace(' ', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace('\"', '')\r\n    str1 = str1.replace('\"', '')\r\n\r\n    str1 = str1.split(',')\r\n    return tuple(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    lst=tuple(str1)\r\n    return lst\r\n\r\nprint(string_list_to_tuple(\"[1, 2, 3, 4, 5]\"))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # initialize the list\r\n    list1 = []\r\n    # loop over the string\r\n    for i in range(len(str1) - 1):\r\n        # append the string in the list\r\n        list1.append(str1[i])\r\n    # convert the list to tuple\r\n    tuple1 = tuple(list1)\r\n    # return the tuple\r\n    return tuple1\r\n\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    return tuple(str1)\r\n\r","votes":null},{"text":"\r\n    list_str = str1.split(',')\r\n    for i in list_str:\r\n        if i == '':\r\n            list_str.remove(i)\r\n    tuple_str = tuple(list_str)\r\n    return tuple_str\r\n\r\n\r","votes":null},{"text":"\r\n    str_list = str1.split(', ')\r\n    return tuple(str_list)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(map(int, str1.split(' ')))\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(str1.split(\",\"))\r\n\r\n\r\n# string_list_to_tuple(\"python,java,c\")\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split(' ')\r\n    for i in str1:\r\n        if i == '':\r\n            str1.remove(i)\r\n    return tuple(str1)\r\n\r","votes":null},{"text":"\r\n    str_list = str1.split(',')\r\n    tup = tuple(str_list)\r\n    return tup\r\n\r\n\r","votes":null},{"text":"\r\n    ret = ()\r\n    for item in str1:\r\n        ret = ret + (item,)\r\n    return ret\r\n\n\n# --------------\n#Code starts here\r","votes":null},{"text":"\r\n    str1 = str1.strip(\"(\")\r\n    str1 = str1.strip(\")\")\r\n    str1 = str1.split(\",\")\r\n    for i in range(len(str1)):\r\n        str1[i] = str1[i].strip(\" \")\r\n    return tuple(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.replace(\"[\", \"\").replace(\"]\", \"\")\r\n    return tuple(str1.split(\",\"))\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    str2 = tuple(str1)\r\n    return str2\r\n\r\n\r","votes":null},{"text":"\r\n    # split the string by comma and then convert each item to int\r\n    split_str = str1.split(\",\")\r\n    list_int = [int(x) for x in split_str]\r\n    tuple1 = tuple(list_int)\r\n    return tuple1\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.replace(\"[\", \"\").replace(\"]\", \"\").replace(\" \", \"\")\r\n    str1 = str1.split(\",\")\r\n    for i in range(len(str1)):\r\n        str1[i] = int(str1[i])\r\n    str1 = tuple(str1)\r\n    return str1\r\n\r\n\r","votes":null},{"text":"\r\n    str2 = str1.replace(\"[\", \"\")\r\n    str3 = str2.replace(\"]\", \"\")\r\n    str4 = str3.replace(\",\", \"\")\r\n    return str4\r\n\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    \r\n    data = str1.split(\",\")\r\n    return tuple(data)\r\n\r\n# Enter your code here. Read input from STDIN. Print output to STDOUT\r\n\n\n\n# -----------------------------------------------------------------","votes":null},{"text":"\r\n    str1 = str(str1)\r\n    str2 = str1.replace('[', '')\r\n    str3 = str2.replace(']', '')\r\n    str4 = str3.replace(\"'\", \"\")\r\n    str5 = str4.replace(',', '')\r\n    return tuple(str5)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(str1.split())\r\n\r\n\r","votes":null},{"text":"\r\n    str_list = str1.split(',')\r\n    return tuple(str_list)\r\n\r\n\r","votes":null},{"text":"\r\n    # Enter your code here\r\n    return tuple(str1.split(\",\"))\r\n\r\n\r\nprint(string_list_to_tuple(\"p,y,t,h,o,n\"))\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split(\",\")\r\n    str1 = tuple(str1)\r\n    return str1\r\n\r\n","votes":null},{"text":"\r\n    return tuple(str1.split(\",\"))\r\n\r\n\r","votes":null},{"text":"\r\n    a = str1.split(\",\")\r\n    return tuple(a)\r\n\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    return tuple(str1)\r\n\r\n\r\n# Driver code\r\nif __name__ == \"__main__\":\r\n    str_list = [\"Geeks\", \"for\", \"Geeks\"]\r\n    print(\"Converted String List to Tuple:\", string_list_to_tuple(str_list))\r\n\r\n\"\"\"\r\nOutput:\r\nConverted String List to Tuple: ('Geeks', 'for', 'Geeks')\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n), where n is the length of the given string list.\r\n\r\nSpace Complexity: O(1).\r\n\"\"\"\r\n\r\n\"\"\"\r\nTest Case 1:\r\nInput:\r\nstr_list = [\"Geeks\", \"for\", \"Geeks\"]\r\nOutput:\r\nConverted String List to Tuple: ('Geeks', 'for', 'Geeks')\r\n\"\"\"\r\n\r\n\"\"\"\r\nTest Case 2:\r\nInput:\r\nstr_list = [\"Python\", \"is\", \"great\"]\r\nOutput:\r\nConverted String List to Tuple: ('Python', 'is', 'great')\r\n\"\"\"\r\n\r\n\"\"\"\r\nTest Case 3:\r\nInput:\r\nstr_list = [\"\"]\r\nOutput:\r\nConverted String List to Tuple: ('')\r\n\"\"\"\r\n\r\n\"\"\"\r\nTest Case 4:\r\nInput:\r\nstr_list = [\"Geeks\", \"for\", \"Geeks\"]\r\nOutput:\r\nConverted String List to Tuple: ('Geeks', 'for', 'Geeks')\r\n\"\"\"\r\n\r\n\"\"\"\r\nTest Case 5:\r\nInput:\r\nstr_list = [\"Geeks\", \"for\", \"Geeks\"]\r\nOutput:\r\nConverted String List to Tuple: ('Geeks', 'for', 'Geeks')\r\n\"\"\"\r\n\r\n\"\"\"\r\nTest Case 6:\r\nInput:\r\nstr_list = [\"Geeks\", \"for\", \"Geeks\"]\r\nOutput:\r\nConverte","votes":null},{"text":"\r\n    \r\n    str1_tuple = tuple(str1)\r\n    print(str1_tuple)\r\n    \r\nstring_list_to_tuple([\"apple\",\"banana\",\"cherry\"])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    return tuple(str1)\r\n\r","votes":null},{"text":"\r\n    \r\n    str1 = str1.strip(\"[]\")\r\n    str1 = str1.replace(\"'\", \"\")\r\n    str1 = str1.replace(\" \", \"\")\r\n    str1 = str1.replace(\"\\\"\", \"\")\r\n    str1 = str1.split(\",\")\r\n    tuple1 = tuple(str1)\r\n    return tuple1\r\n\r","votes":null},{"text":"\r\n    str2 = ''.join(str1)\r\n    return tuple(str2)\r\n\r\n\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', 'a', 'simple', 'language']))\r\nprint(string_list_to_tuple(['python', 'is', 'not', ","votes":null},{"text":"\r\n    temp = []\r\n    for i in str1:\r\n        temp.append(i)\r\n    return tuple(temp)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(str1)\r\n\r\nstr1 = ['hello','world']\r\nprint(string_list_to_tuple(str1))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    str1_tuple = ()\r\n    for i in str1.split(','):\r\n        str1_tuple += (i,)\r\n    return str1_tuple\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    return tuple(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(str1.split(','))\r\n\r\n\r","votes":null},{"text":"\r\n    l = str1.split(\",\")\r\n    t = tuple(l)\r\n    return t\r\n\r\n\r\nprint(string_list_to_tuple(\"hello,hello,hello\"))\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(str1)\r\n\r","votes":null},{"text":"\r\n    str2 = \"\".join(str1)\r\n    return tuple(str2)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # split the string by comma and split the tuple elements by space\r\n    str1 = str1.split(',')\r\n    str1 = [str1[i].split() for i in range(len(str1))]\r\n    \r\n    # return a tuple with the elements of the list\r\n    return tuple(str1)\r\n\r","votes":null},{"text":"\r\n    a = str1.split(' ')\r\n    # return tuple(a)\r\n    return tuple(a)\r\n\r\n\r","votes":null},{"text":"\r\n    tuple_str=tuple(str1)\r\n    return tuple_str\r\n\r","votes":null},{"text":"\r\n    \r\n    str1 = str1.split()\r\n    str1 = tuple(str1)\r\n    return str1\r\n\r","votes":null},{"text":"\r\n    str1 = str1.replace('[', '')\r\n    str1 = str1.replace(']', '')\r\n    str1 = str1.replace('\\'', '')\r\n    str1 = str1.replace('\\'', '')\r\n    str1 = str1.replace(' ', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str1.replace(',', '')\r\n    str1 = str","votes":null},{"text":"\r\n    x = tuple(str1)\r\n    return x\r\n\r\n\r","votes":null},{"text":"\r\n    new_str = str1.replace('[','')\r\n    new_str = new_str.replace(']','')\r\n    new_str = new_str.replace(' ','')\r\n    new_str = new_str.replace(',',',')\r\n    new_str = tuple(new_str.split(','))\r\n    return new_str\r\n    \r\n    \r\n    \r","votes":null},{"text":"\r\n    str1 = str1.replace(\"[\", \"\")\r\n    str1 = str1.replace(\"]\", \"\")\r\n    str1 = str1.replace(\" \", \"\")\r\n    str1 = str1.replace(\"'\", \"\")\r\n    str1 = str1.replace(\",\", \"\")\r\n    str1 = str1.replace(\"(\", \"\")\r\n    str1 = str1.replace(\")\", \"\")\r\n    str1 = str1.replace(\"\\\"\", \"\")\r\n    str1 = str1.replace(\":\", \"\")\r\n    str1 = str1.replace(\"{\", \"\")\r\n    str1 = str1.replace(\"}\", \"\")\r\n    str1 = str1.replace(\"`\", \"\")\r\n    str1 = str1.replace(\";\", \"\")\r\n    str1 = str1.replace(\"=\", \"\")\r\n    str1 = str1.replace(\"|\", \"\")\r\n    str1 = str1.replace(\"&\", \"\")\r\n    str1 = str1.replace(\"^\", \"\")\r\n    str1 = str1.replace(\"~\", \"\")\r\n    str1 = str1.replace(\"!\", \"\")\r\n    str1 = str1.replace(\"@\", \"\")\r\n    str1 = str1.replace(\"#\", \"\")\r\n    str1 = str1.replace(\"$\", \"\")\r\n    str1 = str1.replace(\"%\", \"\")\r\n    str1 = str1.replace(\"*\", \"\")\r\n    str1 = str1.replace(\"(\", \"\")\r\n    str1 = str1.replace(\")\", \"\")\r\n    str1 = str1.replace(\"+\", \"\")\r\n    str1 = str1.replace(\"-\", \"\")\r\n    str1 = str1.replace(\"_\", \"\")\r\n    str1 = str1.replace(\"=\", \"\")\r\n    str1 = str1.replace(\"'\", \"\")\r\n    str1 = str1.replace(\"\\\\\", \"\")\r\n    str1 = str1.replace(\"\/\", \"\")\r\n    str1 = str1.replace(\":\", \"\")\r\n    str1 = str1.replace(\"?\", \"\")","votes":null},{"text":"\r\n    str1 = str1.replace('[', '')\r\n    str1 = str1.replace(']', '')\r\n    str1 = str1.replace(\"'\", '')\r\n    str1 = str1.replace('\"', '')\r\n    str2 = str1.replace(' ', '')\r\n    str3 = str2.split(',')\r\n    return tuple(str3)\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split(',')\r\n    return tuple(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    lst = eval(str1)\r\n    print(tuple(lst))\r\n\r\nstring_list_to_tuple(\"['python', 'java', 'c++']\")\n```\n\n**OUTPUT**\n\n```python\n('python', 'java', 'c++')\n```\n\n### Convert a string to a tuple\n\n```python","votes":null},{"text":"\r\n    \r\n    return tuple(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return tuple(str1.split())\r\n\r","votes":null},{"text":"\r\n    str1 = str1.split(\",\")\r\n    t = tuple(str1)\r\n    return t\r\n\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    tuple1 = tuple(str1)\r\n    return tuple1\r\n\r\n\n# --------------","votes":null},{"text":"\r\n    \r\n    str1 = str1.strip(\"[\").strip(\"]\").replace(\" \",\"\")\r\n    str1 = str1.split(\",\")\r\n    return tuple(str1)\r\n\r","votes":null},{"text":"\r\n    return tuple(str1)\r\n\r\n\r\n# Print the Output\r\nprint(string_list_to_tuple(['P', 'y', 't', 'h', 'o', 'n']))\r\n\r\n\r","votes":null},{"text":"\r\n    str2=str1.split(',')\r\n    return tuple(str2)\r\n\r\nprint(string_list_to_tuple(input()))\r\n\r\n\r\n\r\n\r\n\r\n#Write an iterative Python program to convert a given string list to a tuple.\r\n\r\n#input:\r\n#\"one,two,three,four\"\r\n\r\n#output:\r\n#('one', 'two', 'three', 'four')\r\n\r\n#input:\r\n#\"1,2,3,4\"\r\n\r\n#output:\r\n#(1, 2, 3, 4)\r\n\r\n#input:\r\n#\"1,2,3,4,5,6,7,8,9,10\"\r\n\r\n#output:\r\n#(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n\r\n#input:\r\n#\"1,2,3,4,5,6,7,8,9\"\r\n\r\n#output:\r\n#(1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n\r\n#input:\r\n#\"1,2,3,4,5,6,7,8,9,10,11\"\r\n\r\n#output:\r\n#(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\r\n\r\n#input:\r\n#\"1,2,3,4,5,6,7,8,9,10,11,12\"\r\n\r\n#output:\r\n#(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\r\n\r\n#input:\r\n#\"1,2,3,4,5,6,7,8,9,10,11,12,","votes":null},{"text":"\r\n    num = len(str1)\r\n    str1 = tuple(str1)\r\n    return str1\r\n\r\n","votes":null},{"text":"\r\n    # Code\r\n    str2=tuple(str1)\r\n    return str2\r\n\r\nstr1=str(input(\"Enter the string list:\"))\r\nprint(string_list_to_tuple(str1))\r\n\r\n# Output\r\n\r\n# Enter the string list:","votes":null},{"text":"\r\n    # your code goes here\r\n    return tuple(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    #code here\r\n    return tuple(str1)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return tuple(str1.split(\",\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = eval(str1)\r\n    str2 = tuple(str1)\r\n    print(type(str2))\r\n    return str2\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    string_list_to_tuple(str1=\"['a', 'b', 'c']\")\r\n\r\n# Output\r\n# <class 'tuple'>\r\n\r\n\"\"\"\r\nTask\r\nWrite a python function to convert a given string list to a tuple.\r\nInput Format\r\nA string list is passed to the python function.\r\n'[\"a\", \"b\", \"c\"]'\r\nOutput Format\r\nReturn a tuple.\r\n('a', 'b', 'c')\r\nSample Input\r\n['a', 'b', 'c']\r\nSample Output\r\n('a', 'b', 'c')\r\nExplanation\r\nThe function should convert the string list to a tuple.\r\n\"\"\"\r\n\"\"\"\r\nSOLUTION\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(str1)\r\n\r\n\r\n# code\r","votes":null},{"text":"\r\n    s = str1.split(', ')\r\n    t = tuple(s)\r\n    return t\r\n\r\n","votes":null},{"text":"\r\n    tuple1 = ()\r\n    list1 = str1.split(', ')\r\n    for i in list1:\r\n        tuple1 += (i,)\r\n    return tuple1\r\n\r\n# string_list_to_tuple(\"a, b, c, d, e, f\")\r\n\r","votes":null},{"text":"\r\n    str2 = str1.strip('[]')\r\n    str3 = str2.strip(\"'\")\r\n    str4 = str3.replace(\"'\",\"\")\r\n    str5 = str4.replace(\"'\",\"\")\r\n    str6 = str5.replace(\"'\",\"\")\r\n    str7 = str6.replace(\"'\",\"\")\r\n    str8 = str7.replace(\"'\",\"\")\r\n    str9 = str8.replace(\"'\",\"\")\r\n    str10 = str9.replace(\"'\",\"\")\r\n    str11 = str10.replace(\"'\",\"\")\r\n    str12 = str11.replace(\"'\",\"\")\r\n    str13 = str12.replace(\"'\",\"\")\r\n    str14 = str13.replace(\"'\",\"\")\r\n    str15 = str14.replace(\"'\",\"\")\r\n    str16 = str15.replace(\"'\",\"\")\r\n    str17 = str16.replace(\"'\",\"\")\r\n    str18 = str17.replace(\"'\",\"\")\r\n    str19 = str18.replace(\"'\",\"\")\r\n    str20 = str19.replace(\"'\",\"\")\r\n    str21 = str20.replace(\"'\",\"\")\r\n    str22 = str21.replace(\"'\",\"\")\r\n    str23 = str22.replace(\"'\",\"\")\r\n    str24 = str23.replace(\"'\",\"\")\r\n    str25 = str24.replace(\"'\",\"\")\r\n    str26 = str25.replace(\"'\",\"\")\r\n    str27 = str26.replace(\"'\",\"\")\r\n    str28 = str27.replace(\"'\",\"\")\r\n    str29 = str28.replace(\"'\",\"\")\r\n    str30 = str29.replace(\"'\",\"\")\r\n    str31 = str30.replace(\"'\",\"\")\r\n    str32 = str31.replace(\"'\",\"\")\r\n  ","votes":null},{"text":"\r\n    return tuple(str1)\r\n\r\n\r\nprint(string_list_to_tuple([\"abcd\"]))\r\n\r","votes":null},{"text":"\r\n    s=str1.split(\",\")\r\n    return tuple(s)\r\n\r\n\r\n\r","votes":null}],"time":{"count":3.0,"avg":160653.152,"std":22404.9876179001,"cov":0.1394618614}}
{"id":539,"question":"def basesnum_coresspondingnum(bases_num,index):\r\n    \"\"\"Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\"\"\"","answers":[{"text":"\r\n    return [int(b)**index[i] for i,b in enumerate(bases_num)]\r\n\r\n# basesnum_coresspondingnum()\r\n# [2, 3, 5]\r\n# [0, 1, 2]\r\n\r","votes":146435.284},{"text":"\r\n    basesnum_coresspondingnum = [0] * len(bases_num)\r\n    for i,element in enumerate(bases_num):\r\n        basesnum_coresspondingnum[i] = element**index[i]\r\n    return basesnum_coresspondingnum\r\n\r\n#bases = [2,3,4,5]\r\n#index = [1,2,3,4]\r\n#print(basesnum_coresspondingnum(bases,index))\r\n\r\n###############################################################################################################\r\n\r","votes":149328.88},{"text":"\r\n    return list(map(lambda a,b: a**b,bases_num,index))\r\n\r","votes":204683.82},{"text":"\r\n    return list(map(pow,bases_num,index))\r\n\r\n\r","votes":210862.96},{"text":"\r\n    return list(map(lambda x,y:x**y,bases_num,index))\r\n\r","votes":214482.224},{"text":"\r\n    #Your Code here\r\n    return list(map(lambda x: x[0] ** x[1], zip(bases_num,index)))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":224472.148},{"text":"\r\n    return list(map(lambda x: x[0]**x[1],zip(bases_num,index)))\r\n\r","votes":231040.736},{"text":"\r\n    #Your code here\r\n    return 0\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda num:pow(bases_num,num),index))\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x:x**index,bases_num))\r\n\r","votes":null},{"text":"\r\n    bases = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\r\n    return list(map(lambda x: bases_num**index[x], bases))\r\n\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: x**index, bases_num))\r\n\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: bases_num**x,index)\r\n\r\n\r","votes":null},{"text":"\r\n    return map(lambda x,y:x**y,bases_num,index)\r\n\r\n\r\nbases_num = [2,3,4,5,6,7,8,9,10]\r\nindex = [1,2,3,4,5,6,7,8,9,10]\r\n\r\nprint(basesnum_coresspondingnum(bases_num,index))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    basesnum=[bases_num]*index\r\n    #print(basesnum)\r\n    return basesnum\r\n\r","votes":null},{"text":"\r\n    \r\n    bases=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\r\n    list1=[]\r\n    for i in bases_num:\r\n        for j in bases:\r\n            if i==j:\r\n                list1.append(index)\r\n                break\r\n            elif i!=j:\r\n                list1.append(0)\r\n                break\r\n    return list1\r\n\r","votes":null},{"text":"\r\n    bases = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\r\n    return list(map(lambda x: int(bases[x]),bases_num[index:]))\r\n\r","votes":null},{"text":"\r\n\r\n    return list(map(lambda x: x ** index, bases_num))\r\n\r\n\r","votes":null},{"text":"\r\n    bases_list = list(map(lambda x: bases_num ** index, range(10)))\r\n    return bases_list\r\n\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: bases_num ** x,index)\r\n\r","votes":null},{"text":"\r\n    bases_list=[]\r\n    bases_list=list(map(lambda x: x**index, bases_num))\r\n    return bases_list\r\n\r\n\r\nprint(basesnum_coresspondingnum([2,3,4,5,6],4))\r\n\r\n\r","votes":null},{"text":"\r\n    bases_list = list(bases_num)\r\n    bases_num_list = []\r\n    for i in bases_list:\r\n        bases_num_list.append(int(i))\r\n    bases_num_list = list(map(lambda x:x**index,bases_num_list))\r\n    return bases_num_list\r\n\r\n\r","votes":null},{"text":"\r\n    bases_list = []\r\n    bases_list = [bases_num ** index[i] for i in range(len(index))]\r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n    bases=[]\r\n    for i in bases_num:\r\n        bases.append(i**index[i])\r\n    return bases\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x:x**index[x],bases_num))\r\n\r","votes":null},{"text":"\r\n    s = map(lambda x: x**index,bases_num)\r\n    \r\n    return s\r\n\r","votes":null},{"text":"\r\n    list_of_bases = map(lambda x:bases_num**index[x],range(len(index)))\r\n    return list(list_of_bases)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    bases = [1,2,3,4,5,6,7,8,9,10]\r\n    \r\n    return list(map(lambda x: x**index[x],bases))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    bases_list = list(map(lambda x: x ** index, bases_num))\r\n    return bases_list\r\n\r\n\r\nbases_num = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nbases_list = basesnum_coresspondingnum(b","votes":null},{"text":"\r\n    bases_list=list(map(lambda x:int(x),str(bases_num)))\r\n    return bases_list[index]\r\n\r","votes":null},{"text":"\r\n    \r\n    bases_list = []\r\n    \r\n    for i in range(index):\r\n        bases_list.append(bases_num**i)\r\n    \r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n    bases_list = []\r\n    bases = [2,3,4,5,6,7,8,9,10]\r\n    for base in bases:\r\n        base_power = bases_num**index\r\n        bases_list.append(base_power)\r\n        index += 1\r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n\r\n    bases_list = [0,0,0]\r\n\r\n    bases_list = list(map(lambda x: x**index, bases_num))\r\n\r\n    return bases_list\r\n\r\n\r","votes":null},{"text":"\r\n    bases = int(bases_num)\r\n    number = index\r\n    baseslist = []\r\n    for i in range(len(str(number))):\r\n        num = int(str(number)[i])\r\n        baseslist.append(pow(bases,num))\r\n    return baseslist\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: bases_num**index[x], list(range(len(index)))))\r\n\r","votes":null},{"text":"\r\n    bases = [2,3,4,5,6]\r\n    bases_coressponding_num = []\r\n    for i in bases:\r\n        bases_coressponding_num.append(bases_num**i)\r\n    return bases_coressponding_num[index]\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    bases_list = [1,2,3,4,5,6,7,8,9]\r\n    bases_list = list(map(lambda x: bases_num**x, bases_list))\r\n    return bases_list[index]\r\n\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: bases_num**x,index))\r\n\r","votes":null},{"text":"\r\n    return [bases_num ** i for i in index]\r\n\r\n\r","votes":null},{"text":"\r\n    bases = [2,3,4,5,6,7,8,9]\r\n    bases_list = list(map(lambda x: x**index,bases))\r\n    return bases_list[bases_num]\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: bases_num**x,index))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return [bases_num**i for i in index]\r\n    \r","votes":null},{"text":"\r\n    bases=[]\r\n    for i in index:\r\n        bases.append(bases_num**i)\r\n    return bases\r\n\r\n\r","votes":null},{"text":"\r\n    bases_num_list = list(map(int, str(bases_num)))\r\n    return bases_num_list[index]\r\n\r\n\r","votes":null},{"text":"\r\n    bases = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    bases_list = list(map(lambda x: bases[x], bases_num))\r\n    return bases_list[index]\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------------------------------------\r","votes":null},{"text":"\r\n    \r\n    bases_list = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n    \r\n    for i in range(index):\r\n        bases_list[i] = pow(bases_num,i)\r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n    bases_list = [bases_num**index for index in range(10)]\r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n    return map(lambda x:x**index,bases_num)\r\n\r\n\r\n\r\n\"\"\"Expected Output\r\n\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    bases = [1,2,3,4,5,6,7,8,9,10]\r\n    bases_list = list(map(lambda x:x**index,bases))\r\n    \r\n    if bases_list[bases_num] == 0:\r\n        return bases_list[0]\r\n    else:\r\n        return bases_list[bases_num]\r\n\r","votes":null},{"text":"\r\n    bases=[]\r\n    bases=[(bases_num**j) for j in index]\r\n    return bases\r\n\r","votes":null},{"text":"\r\n    bases_list = list(map(lambda x: x**index, bases_num))\r\n    return bases_list\r\n\r\n\r","votes":null},{"text":"\r\n    bases=[2,3,4,5,6,7,8,9]\r\n    base_num=list(map(lambda x,y: x**y,bases,index))\r\n    return base_num\r\n\r","votes":null},{"text":"\r\n    bases_list = list(map(lambda x: bases_num**x,index))\r\n    return bases_list\r\n\r\n\r","votes":null},{"text":"\r\n    bases = [2,8,16,32]\r\n    return map(lambda x: bases[x]*index[x], bases_num)\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x : int(x),list(map(lambda x : x ** index,bases_num))))\r\n\r\nif __name__ == '__main__':\r\n    bases_list = [2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    bases_num = [12, 24, 36, 48, 60, 72, 84, 96, 108]\r\n    index = 3\r\n    print(basesnum_coresspondingnum(bases_num,index))\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    return map(lambda x: pow(bases_num,index[x]),range(len(index)))\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: x**index,bases_num)\r\n\r","votes":null},{"text":"\r\n    bases_coresspondingnum = list(map(lambda x: x**index, bases_num))\r\n\r\n    return bases_coresspondingnum\r\n\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n    return [bases_num**index[i] for i in range(len(index))]\r\n\r\n\r","votes":null},{"text":"\r\n    return map(lambda bases_num, index: bases_num**index, bases_num, index)\r\n\r","votes":null},{"text":"\r\n    return map(lambda x:x**index[x],bases_num)\r\n\r","votes":null},{"text":"\r\n    bases = (2,3,5)\r\n    return list(map(lambda x:x**index[0],bases_num))\r\n    \r\n\r","votes":null},{"text":"\r\n    bases=['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\r\n    return map(lambda x:x[index],bases_num)\r\n\r","votes":null},{"text":"\r\n    return map(lambda x: x ** index, bases_num)\r\n\r\nbasesnum_coresspondingnum(bases_num,index)\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return [int(i) for i in str(bases_num)]\r\n\r","votes":null},{"text":"\r\n    bases_list = []\r\n    for num in bases_num:\r\n        bases_list.append(num**index)\r\n    return bases_list\r\n\r\nbases_num = [2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nindex = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nprint(basesnum_coresspondingnum(bases_num,index))\r\n\r","votes":null},{"text":"\r\n    \r\n    bases_num = list(bases_num)\r\n    bases_num = list(map(int,bases_num))\r\n    bases_num = list(map(lambda x: x**index[0],bases_num))\r\n    bases_num = list(map(str,bases_num))\r\n    bases_num = ''.join(bases_num)\r\n    \r\n    return bases_num\r\n\r","votes":null},{"text":"\r\n    bases_list = []\r\n    for x in bases_num:\r\n       bases_list.append(int(x ** index))\r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n    return [bases_num**x for x in index]\r\n\r\n\r\nassert basesnum_coresspondingnum(2,[1,2,3,4,5]) == [2, 4, 8, 16, 32]\r\nassert basesnum_coresspondingnum(3,[1,2,3,4,5]) == [3, 9, 27, 81, 243]\r\n\r\n","votes":null},{"text":"\r\n    bases_list = [bases_num ** i for i in index]\r\n    return bases_list\r\n\r\n\r","votes":null},{"text":"\r\n    bases_num_list = []\r\n    for i in bases_num:\r\n        bases_num_list.append(i**index[i])\r\n    return bases_num_list\r\n\r","votes":null},{"text":"\r\n    bases=list(map(lambda x: x**index, bases_num))\r\n    return bases\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    bases_num = list(map(int, input().split()))\r\n    index = int(input())\r\n\r\n    print(basesnum_coresspondingnum(bases_num, index))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: x**index,bases_num))\r\n\r\n\r","votes":null},{"text":"\r\n    bases = [10, 2, 16, 8, 1, 12, 4, 5, 3, 6, 9, 7]\r\n    bases_list = list(map(lambda x: x**index, bases))\r\n    return bases_list[bases_num]\r\n\r\n\r\nprint(basesnum_coresspondingnum(0, 2))\r\nprint(basesnum_coresspondingnum(1, 2))\r\nprint(basesnum_coresspondingnum(2, 2))\r\nprint(basesnum_coresspondingnum(3, 2))\r\nprint(basesnum_coresspondingnum(4, 2))\r\nprint(basesnum_coresspondingnum(5, 2))\r\nprint(basesnum_coresspondingnum(6, 2))\r\nprint(basesnum_coresspondingnum(7, 2))\r\nprint(basesnum_coresspondingnum(8, 2))\r\nprint(basesnum_coresspondingnum(9, 2))\r\nprint(basesnum_coresspondingnum(10, 2))\r\nprint(basesnum_coresspondingnum(11, 2))\r\nprint(basesnum_coresspondingnum(12, 2))\r\nprint(basesnum_coresspondingnum(13, 2))\r\nprint(basesnum_coresspondingnum(14, 2))\r\nprint(basesnum_coresspondingnum(15, 2))\r\nprint(basesnum_coresspondingnum(16, 2))\r\nprint(basesnum_coresspondingnum(17, 2))\r\nprint(basesnum_coresspondingnum(18, 2))\r\nprint(basesnum_coresspon","votes":null},{"text":"\r\n    \r\n    return [bases_num**index[i] for i in range(len(index))]\r\n\r\n\r","votes":null},{"text":"\r\n    bases = [0,1,2,3,4,5,6,7,8,9]\r\n    bases_nums = []\r\n    for _ in bases:\r\n        bases_nums.append(bases_num ** _)#this method is not efficient\r\n    \r\n    return bases_nums\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: bases_num**x, index))\r\n\r\n\r","votes":null},{"text":"\r\n    bases = [1,2,3,4,5,6,7,8,9]\r\n    map(lambda x: x**index, bases)\r\n    return bases_num\r\n\r\n\r\nprint basesnum_coresspondingnum(12345,5)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return list(map(lambda x: bases_num**x, index))\r\n\r","votes":null},{"text":"\r\n    return [bases_num**i for i in index]\r\n\r\n\r","votes":null},{"text":"\r\n    bases_num = list(map(lambda x: x**index,bases_num))\r\n    return bases_num\r\n\r","votes":null},{"text":"\r\n    bases_list = []\r\n    for i in bases_num:\r\n        bases_list.append(pow(i,index))\r\n    return bases_list\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    bases_num = str(bases_num)\r\n    return [int(bases_num[i]) ** index[i] for i in range(len(index))]\r\n\r\n\r","votes":null},{"text":"\r\n    bases_list = list(str(bases_num))\r\n    bases_list.sort(reverse=True)\r\n    bases_list.insert(0,bases_num)\r\n    index_list = []\r\n    for i in bases_list:\r\n        index_list.append(index.index(i))\r\n    return index_list\r\n\r","votes":null},{"text":"\r\n    bases_list = list(map(lambda x: x ** index, bases_num))\r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n\r\n    bases=[2,3,4,5,6,7,8,9]\r\n    bases_list=list(map(lambda x: x**index,bases))\r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n    \r\n    bases = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]\r\n    \r\n    return bases[index] ** bases_num\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    bases = [10,16,8,2]\r\n    return [bases_num ** (index[i]) for i in range(len(index))]\r\n\r","votes":null},{"text":"\r\n    \r\n    result = list(map(lambda x: bases_num ** x, index))\r\n    \r\n    return result\r\n\r","votes":null},{"text":"\r\n    list1 = []\r\n    bases = [2,3,5,7]\r\n    for i in bases:\r\n        list1.append(bases_num**index[i-1])\r\n    return list1\r\n\r","votes":null},{"text":"\r\n    bases_list = []\r\n    bases_list = list(map(lambda x: x**index[x-1], bases_num))\r\n    return bases_list\r\n\r","votes":null},{"text":"\r\n    list = list(map(lambda x:x**index, bases_num))\r\n    return list\r\n\r\n\r","votes":null},{"text":"\r\n    bases_num = [1,2,3,4,5,6,7,8,9]\r\n    index = [0,1,2,3,4,5,6,7,8]\r\n    return map(lambda x,y: x**y,bases_num,index)\r\n\r","votes":null},{"text":"\r\n    bases=bases_num\r\n    index=index\r\n    bases_num_index_list=[pow(bases,i) for i in index]\r\n    return bases_num_index_list\r\n\r","votes":null},{"text":"\r\n    \r\n    bases = [2,3,4,5,6,7,8,9]\r\n    \r\n    return list(map(lambda x: bases_num ** x,index))\r\n    \r\nbasesnum_coresspondingnum(10, [0,1,2,3,4,5,6,7,8,9])\r\n\r","votes":null},{"text":"\r\n    bases_num = list(map(int,str(bases_num)))\r\n    bases_num = list(map(lambda x: x**index,bases_num))\r\n    return bases_num\r\n\r","votes":null},{"text":"\r\n    return [bases_num**index for index in range(len(bases_num))]\r\n\r\n\r","votes":null}],"time":{"count":7.0,"avg":197329.436,"std":34878.1402852946,"cov":0.1767508234}}
{"id":540,"question":"def find_Diff(arr,n):\r\n    \"\"\"Write a python function to find the difference between highest and least frequencies in a given array.\"\"\"","answers":[{"text":"\r\n    result = {}\r\n    for i in range(n):\r\n        if arr[i] in result.keys():\r\n            result[arr[i]] += 1\r\n        else:\r\n            result[arr[i]] = 1\r\n    m = max(result.values())\r\n    n = min(result.values())\r\n    return m-n\r\n\r\narr = [1,2,3,4,5,1,2,1,2,4,5,5,6,6,6,6]\r\nprint(find_Diff(arr,len(arr)))\r\n\r\n\r\n# ------------------------------------------------------------------------------------------\r\n#","votes":126082.712},{"text":"\r\n\r\n\r\n    #code here\r\n    d = {}\r\n    for i in range(n):\r\n        d[arr[i]] = d.get(arr[i],0) + 1\r\n    d1 = [d[i] for i in d]\r\n    d1.sort()\r\n    return d1[-1] - d1[0]\r\n\r\narr = [2,2,3,4,5,5,5,5,5,5]\r\nn = len(arr)\r\n\r\nprint(find_Diff(arr,n))\r\n\r\n#Output: ","votes":133559.864},{"text":"\r\n    #your code here\r\n    d={}\r\n    for i in range(n):\r\n        a=arr[i]\r\n        if a in d:\r\n            d[a]+=1\r\n        else:\r\n            d[a]=1\r\n\r\n    f=[]\r\n    for i in d:\r\n        f.append(d[i])\r\n    a=max(f)\r\n    b=min(f)\r\n    return a-b\r\n\r\narr=[1,1,1,2,2,3]\r\nn=len(arr)\r\nprint(\"Difference between highest and lowest frequencies is: \",find_Diff(arr,n))\r\n\r\n\r","votes":139513.588},{"text":"\r\n    ans=0\r\n    d={}\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            d[arr[i]]+=1\r\n        else:\r\n            d[arr[i]]=1\r\n    m=max(d,key=d.get)\r\n    l=min(d,key=d.get)\r\n    ans=d[m]-d[l]\r\n    return ans\r\narr=[1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\r\nprint(find_Diff(arr,len(arr)))\r\n\r","votes":143055.84},{"text":"\r\n    freq = {}\r\n    for i in range(n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    mx = max(freq.values())\r\n    mn = min(freq.values())\r\n    return mx - mn\r\n\r\n\r","votes":146404.516},{"text":"\r\n    freq = {}\r\n    for i in range(n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    max_freq = max(freq.values())\r\n    min_freq = min(freq.values())\r\n    return max_freq - min_freq\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5]\r\n    n = len(arr)\r\n    print(find_Diff(arr, n))\r\n\r\n# Sample Input 1:\r\n# 1\r\n# 2\r\n# 1 2\r\n# Sample Output 1:\r\n# 1\r\n\r\n# Sample Input 2:\r\n# 1\r\n# 5\r\n# 1 2 3 4 5\r\n# Sample Output 2:\r\n# 0\r\n\r\n# Time Complexity : O(N)\r\n# Space Complexity : O(N)\r\n\r\n\"\"\"\r\nOutput :\r\nSample Input 1:\r\n1\r\n2\r\n1 2\r\nSample Output 1:\r\n1\r\n\r\nSample Input 2:\r\n1\r\n5\r\n1 2 3 4 5\r\nSample Output 2:\r\n0\r\nTime Complexity : O(N)\r\nSpace Complexity : O(N)\r\n\"\"\"\r\n","votes":147818.216},{"text":"\r\n\r\n    # Write your code here\r\n    count = {}\r\n    for i in range(0,n):\r\n        if arr[i] in count:\r\n            count[arr[i]] += 1\r\n        else:\r\n            count[arr[i]] = 1\r\n    \r\n    max_freq = -1\r\n    min_freq = 1000000000000\r\n    for i in count:\r\n        if max_freq < count[i]:\r\n            max_freq = count[i]\r\n    for i in count:\r\n        if min_freq > count[i]:\r\n            min_freq = count[i]\r\n    \r\n    \r\n    return max_freq - min_freq\r\n\r\n# { \r\n#  Driver Code Starts\r\n# Initial Template for Python 3\r\n\r\n# Contributed by : Nagendra Jha\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(0, t):\r\n        n = int(input())\r\n        arr = list(map(int, input().strip().split()))\r\n        result = find_Diff(arr, n)\r\n        print(result)\r\n#","votes":161693.096},{"text":"\r\n    #code here\r\n    arr.sort()\r\n    freq = {}\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i]+=1\r\n        else:\r\n            freq[i]=1\r\n\r\n    max_freq = 0\r\n    for i in freq:\r\n        if freq[i]>max_freq:\r\n            max_freq = freq[i]\r\n\r\n    min_freq = max_freq\r\n    for i in freq:\r\n        if freq[i]<min_freq:\r\n            min_freq = freq[i]\r\n\r\n    return max_freq - min_freq\r\n\r\n\r\narr = [1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":188378.464},{"text":"\r\n    # Code here\r\n    d = dict()\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            d[arr[i]] = d[arr[i]] + 1\r\n        else:\r\n            d[arr[i]] = 1\r\n    \r\n    max_val = max(d.values())\r\n    min_val = min(d.values())\r\n    \r\n    return max_val - min_val\r\n\r\narr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2]\r\nn = len(arr)\r\n\r\nprint(find_Diff(arr,n))\r\n\r\n\"\"\"Output:\r\n12\r\n\"\"\"\r\n\r\n\r","votes":218097.752},{"text":"\r\n    freq = {}\r\n    max_freq = 0\r\n    min_freq = 10000000\r\n    for i in range(n):\r\n        ele = arr[i]\r\n        if ele in freq:\r\n            freq[ele] = freq[ele] + 1\r\n        else:\r\n            freq[ele] = 1\r\n    for i in freq:\r\n        if freq[i] > max_freq:\r\n            max_freq = freq[i]\r\n        if freq[i] < min_freq:\r\n            min_freq = freq[i]\r\n    return max_freq - min_freq\r\n\r\n\r\narr = [1, 2, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 7, 8]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\n\r","votes":245206.244},{"text":"\r\n    #code here\r\n    freq = {}\r\n    for i in arr:\r\n        freq[i] = freq.get(i,0) + 1\r\n    max_freq = -1\r\n    for i in freq:\r\n        if freq[i] > max_freq:\r\n            max_freq = freq[i]\r\n    min_freq = n\r\n    for i in freq:\r\n        if freq[i] < min_freq:\r\n            min_freq = freq[i]\r\n    diff = max_freq - min_freq\r\n    return diff\r\n\r\narr = [1,2,2,2,2,2,2,2,3,4,5]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\narr = [2,2,3,4,4,4,5,5,5,5,5,5]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\narr = [1,2,2,2,3,4,5,5,5,5,5,5]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\narr = [1,2,2,3,4,5,5,5,5,5,5,5]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\narr = [1,2,3,4,5,5,5,5,5,5,5,5]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\narr = [1,2,3,4,5,5,5,5,5,5,5,5]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\narr = [1,2,3,4,5,5,5,5,5,5,5,5]\r\nn = len(arr)","votes":249151.144},{"text":"\r\n    \r\n    # Your code goes here\r\n    arr.sort()\r\n    max_freq = arr[n-1]\r\n    min_freq = arr[0]\r\n    return max_freq - min_freq\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    \r\n    result = find_Diff(arr, n)\r\n    print(result)\r\n\r\n\r\n# Given a sorted array, find the difference between the highest and lowest element in the array.\r\n\r\n# The function should return the difference.\r\n\r\n# The array will contain n numbers. The numbers will be in the range of 1 to 1000.\r\n\r\n# For Example:\r\n# Input:\r\n# 10\r\n# 1 2 2 3 4 5 6 7 8 9\r\n\r\n# Output:\r\n# 8\r\n\r\n# 1","votes":null},{"text":"\r\n    # Code here\r\n    freq_dict = {}\r\n    for i in range(n):\r\n        if arr[i] not in freq_dict:\r\n            freq_dict[arr[i]] = 1\r\n        else:\r\n            freq_dict[arr[i]] += 1\r\n    # print(freq_dict)\r\n    max_freq = 0\r\n    max_freq_value = 0\r\n    for key,value in freq_dict.items():\r\n        if value > max_freq:\r\n            max_freq = value\r\n            max_freq_value = key\r\n    min_freq = 1000\r\n    min_freq_value = 0\r\n    for key,value in freq_dict.items():\r\n        if value < min_freq:\r\n            min_freq = value\r\n            min_freq_value = key\r\n    return max_freq","votes":null},{"text":"\r\n    # Your code goes here\r\n    # Sort the array in ascending order\r\n    arr.sort()\r\n    # Difference is the difference between highest and lowest element\r\n    diff = arr[-1]-arr[0]\r\n    return diff\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    print(\"Diff is \" + str(find_Diff(arr,n)))\r\n\r\n\r\n# Time Complexity: O(n log n) \r\n# Space Complexity: O(1)\r\n\r\n# Input 1:\r\n#     arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n#     n = 10\r\n# Output 1:\r\n#     Diff is 9\r\n\r\n# Input 2:\r\n#     arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n#     n = 9\r\n# Output 2:\r\n#     Diff is 8\r\n\r\n# Input 3:\r\n#     arr = [1, 2, 3, 4, 5, 6, 7, 8]\r\n#     n = 8\r\n# Output 3:\r\n#     Diff is 7\r\n\r\n# Input 4:\r\n#     arr = [1, 2, 3, 4, 5, 6, 7]\r\n#     n = 7\r\n# Output 4:\r\n#     Diff is 6\r\n\r\n# Input 5:\r\n#     arr = [1, 2, 3, 4, 5, 6]\r\n#     n = 6\r\n# Output 5:\r\n#     Diff is ","votes":null},{"text":"\r\n    if(n==0):\r\n        return 0\r\n    arr.sort()\r\n    max_till_now = arr[0]\r\n    max_count = 1\r\n    min_till_now = arr[n-1]\r\n    min_count = 1\r\n    for i in range(1,n):\r\n        if(arr[i]==max_till_now):\r\n            max_count+=1\r\n        else:\r\n            if(max_count>min_count):\r\n                return arr[i] - max_till_now\r\n            else:\r\n                max_till_now = arr[i]\r\n                max_count = 1\r\n    return arr[n-1] - max_till_now\r\n\r\narr = [1,2,2,3,3,3,4,4,4,4,4,4,4]\r\nn = len(arr)\r\n\r\nprint(find_Diff(arr,n))\r\n\r\n\r\n# Time Complexity: O(nlog(n))\r\n\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\n\r\n\r\n# 10. Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\r","votes":null},{"text":"\r\n    # Create a dictionary to store the frequency of each element.\r\n    d = {}\r\n    for i in arr:\r\n        if i in d:\r\n            d[i] += 1\r\n        else:\r\n            d[i] = 1\r\n    max_freq = 0\r\n    max_val = 0\r\n    min_freq = 0\r\n    min_val = 0\r\n    for i in d:\r\n        if d[i] > max_freq:\r\n            max_freq = d[i]\r\n            max_val = i\r\n        if d[i] < min_freq:\r\n            min_freq = d[i]\r\n            min_val = i\r\n    return max_freq - min_freq\r\n\r\n\r\narr = [2, 3, 4, 5, 5, 5, 5, 6, 7, 8]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nSample Test Cases\r\n\r\narr = [2, 3, 4, 5, 5, 5, 5, 6, 7, 8]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n\r\narr = [2, 2, 2, 3, 3, 3, 5, 7, 8, 9, 9, 9, 9, 9, 10]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n\r\narr = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n\r\narr = [2, 3, 3, 3, 3, 3, 3, 3","votes":null},{"text":"\r\n    my_dict = {}\r\n    for i in arr:\r\n        if i in my_dict:\r\n            my_dict[i] += 1\r\n        else:\r\n            my_dict[i] = 1\r\n    \r\n    max_count = 0\r\n    min_count = 1000\r\n    for key, value in my_dict.items():\r\n        if value > max_count:\r\n            max_count = value\r\n        if value < min_count:\r\n            min_count = value\r\n    return max_count - min_count\r\n\r\n\r\narr = [2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 1","votes":null},{"text":"\r\n    \r\n    # Your code here\r\n    max_count = 0\r\n    min_count = n\r\n    freq = [0]*n\r\n    for i in range(n):\r\n        element = arr[i]\r\n        freq[element] += 1\r\n        if freq[element] > max_count:\r\n            max_count = freq[element]\r\n        if freq[element] < min_count:\r\n            min_count = freq[element]\r\n    return max_count - min_count\r\n\r\narr = [1, 3, 0, 2, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,","votes":null},{"text":"\r\n    if n==0:\r\n        return 0\r\n    max_element=max(arr)\r\n    min_element=min(arr)\r\n    return max_element-min_element\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [2, 3, 4, 5, 7, 11, 13, 17, 19, 20, 23, 27, 31, 33, 37, 39, 41, 43, 47, 49, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\r\n    n = len(arr)\r\n    print(find_Diff(arr,n))\r\n\r\n\"\"\"\r\nSample Input:\r\n[2, 3, 4, 5, 7, 11, 13, 17, 19, 20, 23, 27, 31, 33, 37, 39, 41, 43, 47, 49, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\r\n\r","votes":null},{"text":"\r\n    dict1 = {}\r\n    for i in range(n):\r\n        if arr[i] in dict1:\r\n            dict1[arr[i]] += 1\r\n        else:\r\n            dict1[arr[i]] = 1\r\n    maximum = 0\r\n    minimum = 0\r\n    for key, value in dict1.items():\r\n        if maximum < value:\r\n            maximum = value\r\n    for key, value in dict1.items():\r\n        if minimum > value:\r\n            minimum = value\r\n    return maximum-minimum\r\n\r\narr = [1,2,1,2,3,4,5,6,7,7,5,4,3,2,1]\r\nn = len(arr)\r\n\r\nprint(find_Diff(arr,n))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Code here\r\n    max_freq = 0\r\n    min_freq = n\r\n    for i in range(n):\r\n        freq = 1\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                freq += 1\r\n        if freq > max_freq:\r\n            max_freq = freq\r\n    for i in range(n):\r\n        freq = 1\r\n        for j in range(i+1,n):\r\n            if arr[i] == arr[j]:\r\n                freq += 1\r\n        if freq < min_freq:\r\n            min_freq = freq\r\n    diff = max_freq - min_freq\r\n    return diff\r\n\r\n\r\n\r\narr = [1, 2, 1, 3, 2, 2, 4, 1, 1, 1, 1]\r\nn = len(arr)\r\ndiff = find_Diff(arr, n)\r\nprint(diff)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # Your code goes here\r\n    max_freq = 0\r\n    min_freq = 1000\r\n    freq_dict = {}\r\n    for i in range(n):\r\n        if arr[i] in freq_dict:\r\n            freq_dict[arr[i]] += 1\r\n        else:\r\n            freq_dict[arr[i]] = 1\r\n    for i in freq_dict:\r\n        if freq_dict[i] > max_freq:\r\n            max_freq = freq_dict[i]\r\n        if freq_dict[i] < min_freq:\r\n            min_freq = freq_dict[i]\r\n    return max_freq - min_freq\r\n\r\n\r\narr = [1, 2, 4, 5, 2, 2, 1, 3, 5]\r\nn = len(arr)\r\n\r\nprint(\"Diff between highest and lowest frequency in array is:\", find_Diff(arr, n))\r\n# Output: Diff between highest and lowest frequency in array is: 2\r\n\r\narr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1","votes":null},{"text":"\r\n    \r\n    lst=[]\r\n    for i in range(1,n+1):\r\n        lst.append(i)\r\n    \r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]>arr[j]:\r\n                arr[i],arr[j]=arr[j],arr[i]\r\n    \r\n    a=lst[0]\r\n    b=lst[n-1]\r\n    \r\n    for i in range(n):\r\n        if arr[i]!=lst[i]:\r\n            if arr[i]!=a:\r\n                a=arr[i]\r\n            else:\r\n                b=arr[i]\r\n                \r\n    return (a-b)\r\n    \r\n    \r\narr=[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    d={}\r\n    for i in arr:\r\n        if i in d:\r\n            d[i]+=1\r\n        else:\r\n            d[i]=1\r\n    \r\n    t=max(d.values())\r\n    q=min(d.values())\r\n    \r\n   ","votes":null},{"text":"\r\n    \r\n    #Your code here\r\n    max_diff = 0\r\n    max_freq = arr[0]\r\n    min_freq = arr[0]\r\n    d = {}\r\n    for i in arr:\r\n        if i in d:\r\n            d[i] += 1\r\n        else:\r\n            d[i] = 1\r\n    for i in d:\r\n        if d[i] > max_freq:\r\n            max_freq = d[i]\r\n        if d[i] < min_freq:\r\n            min_freq = d[i]\r\n    max_diff = max_freq - min_freq\r\n    \r\n    return max_diff","votes":null},{"text":"\r\n    if len(arr)==0:\r\n        return 0\r\n    arr.sort()\r\n    # print(arr)\r\n    c=0\r\n    for i in range(len(arr)-1):\r\n        if arr[i+1]-arr[i]>c:\r\n            c=arr[i+1]-arr[i]\r\n    # print(c)\r\n    return c\r\n    \r\n    \r\n    \r\n    \r\n    \r\narr=[0,0,4,4,4,4,6,6,7,7,7,7,7,9,9,9,9,9,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,","votes":null},{"text":"\r\n    # Code here\r\n    s = set(arr)\r\n    s = list(s)\r\n    s.sort()\r\n    n = len(arr)\r\n    res = 0\r\n    for i in range(len(s)-1):\r\n        freq = 0\r\n        for j in arr:\r\n            if j in range(s[i],s[i+1]+1):\r\n                freq += 1\r\n        res += abs(freq*(s[i+1]-s[i]))\r\n    return res\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 4, 3, 2, 1]\r\nn = len(arr)\r\nfind_Diff(arr, n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # Your code goes here\r\n    arr.sort()\r\n    dif=arr[n-1]-arr[0]\r\n    return dif\r\n\r","votes":null},{"text":"\r\n    count_dict = {}\r\n    max_count = 0\r\n    min_count = 1000\r\n    for i in range(0,n):\r\n        count_dict[arr[i]] = 0\r\n    for i in range(0,n):\r\n        count_dict[arr[i]] += 1\r\n    for key in count_dict.keys():\r\n        if count_dict[key] > max_count:\r\n            max_count = count_dict[key]\r\n        if count_dict[key] < min_count:\r\n            min_count = count_dict[key]\r\n    print(max_count - min_count)\r\n    \r\narr = list(map(int,input().split()))\r\nn = int(input())\r\nfind_Diff(arr,n)\r\n\r\n\"\"\"\r\nInput:\r\nEnter the array: 1 2 3 4 5 6\r\nEnter the size of the array: 6\r\n\r\nOutput:\r\n2\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    # code here \r\n    freq_dict = {}\r\n    for i in range(n):\r\n        if arr[i] not in freq_dict:\r\n            freq_dict[arr[i]] = 1\r\n        else:\r\n            freq_dict[arr[i]] += 1\r\n    max_freq = 0\r\n    min_freq = 0\r\n    for key,value in freq_dict.items():\r\n        if max_freq < value:\r\n            max_freq = value\r\n        if min_freq > value:\r\n            min_freq = value\r\n    return max_freq - min_freq\r\n\r\narr = [1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,","votes":null},{"text":"\r\n\r\n    #Code here\r\n    arr = list(map(int,arr.split()))\r\n    freq = [0]*100\r\n    for i in arr:\r\n        freq[i] += 1\r\n    freq.sort()\r\n    print(freq[-1]-freq[0])\r\n\r\n\r\narr = str(input())\r\nn = int(input())\r\nfind_Diff(arr,n)\r\n\r\n\"\"\"\r\nInput:\r\n1 2 3 4 3 2 1 5 6 7 6 5 4 3 2 1\r\n16\r\n\r\nOutput:\r\n4\r\n\"\"\"\r\n\r\n\"\"\"\r\nInput:\r\n1 2 2 2 1 2 2\r\n8\r\n\r\nOutput:\r\n1\r\n\"\"\"\r\n\r\n\"\"\"\r\nInput:\r\n1 2 3 3 2 1 2\r\n7\r\n\r\nOutput:\r\n1\r\n\"\"\"\r\n\r\n\"\"\"\r\nInput:\r\n1 2 3 3 3 3 3 3\r\n8\r\n\r\nOutput:\r\n0\r\n\"\"\"\r\n\r\n\"\"\"\r\nInput:\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n45\r\n\r\nOutput:\r\n0\r\n\"\"\"\r\n\r\n\"\"\"\r\nInput:\r\n1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 ","votes":null},{"text":"\r\n    # your code goes here\r\n    max_freq_num, max_freq = 0, 0\r\n    min_freq_num, min_freq = 0, 1000000\r\n    for i in range(n):\r\n        if arr[i] not in arr:\r\n            min_freq = min(min_freq, arr.count(arr[i]))\r\n            max_freq = max(max_freq, arr.count(arr[i]))\r\n    return max_freq - min_freq\r\n\r\narr = [1, 2, 1, 2, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nGiven an array arr[] of positive integers of size n. Find the number of integers in the array which have exactly same number of set bits as the number itself.\r\n\r\nNote: Here, set bit means the count of the number of 1\u2019s in the binary representation of the number.\r\n\r\nExample 1:\r\n\r\nInput: N = 5, arr[] = {1, 2, 3, 4, 5}\r\nOutput: 2\r\nExplanation: The two integers having same number of set bits are 2 and 3.\r\nExample 2:\r\n\r\nInput: N = 5, arr[] = {1, 3, 5, 7, 9}\r\nOutput: 4\r\nExplanation: The four integers having same number o","votes":null},{"text":"\r\n    arr.sort()\r\n    max_freq=0\r\n    min_freq=0\r\n    for i in range(n):\r\n        freq=1\r\n        while arr[i]==arr[i+1]:\r\n            freq+=1\r\n            i+=1\r\n            if freq>max_freq:\r\n                max_freq=freq\r\n        if freq<min_freq or min_freq==0:\r\n            min_freq=freq\r\n    return (max_freq-min_freq)\r\n\r\n# arr=[1,2,2,3,4,5,5,6,6,7,7,8,8,8,9,9,9,10,10]\r\n# n=len(arr)\r\n# print(find_Diff(arr,n))\r\n\r","votes":null},{"text":"\r\n    dic={}\r\n    for i in range(n):\r\n        if arr[i] in dic:\r\n            dic[arr[i]]+=1\r\n        else:\r\n            dic[arr[i]]=1\r\n    key = max(dic,key=dic.get)\r\n    print(key)\r\n    return key-dic[key]\r\nif __name__ == '__main__':\r\n    n=int(input())\r\n    arr=list(map(int,input().split()))\r\n    find_Diff(arr,n)\r\n\r\n\"\"\"\r\nAn array of size N is given and contains integers in the range from 0 to K, where K is a positive integer. \r\nYour task is to find the difference between the highest and the lowest frequencies of the array elements. \r\nThe frequency of a number is the number of times it occurs in the array.\r\n\r\nInput Format:\r\nThe first line contains an integer, N.\r\nThe second line contains N space-separated integers that describe the array arr.\r\n\r\nConstraints:\r\n1 <= N <= 10^5\r\n\r\nOutput Format:\r\nPrint the difference between the highest and lowest frequencies of the array elements.\r\n\r\nSample Input:\r\n9\r\n0 1 2 3 0 4 5 0 6\r\n\r\nSample Output:\r\n3\r\n\r\nExplanation:\r\nThe frequencies of the array elements are:\r\n\r\n0: 3\r\n1: 1\r\n2: 1\r\n3: 1\r\n4: 1\r\n5: 1\r\n6: 1\r\n\r\nThe highest frequency is 3 and the lowest frequency is 1, so the difference is 3 - 1 = 2.\r\n\r\nSolution:\r\n\r","votes":null},{"text":"\r\n    \r\n    arr.sort()\r\n    freq_arr = []\r\n    for i in range(n):\r\n        freq_arr.append(1)\r\n        \r\n    for i in range(n-1):\r\n        if(arr[i]==arr[i+1]):\r\n            freq_arr[i]+=1\r\n            freq_arr[i+1]=0\r\n            \r\n    ans = 0\r\n    for i in range(n):\r\n        if(freq_arr[i]>0):\r\n            ans = ans + (freq_arr[i]-1)\r\n            \r\n    return ans\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    # print(arr)\r\n    low = arr[0]\r\n    high = arr[-1]\r\n    print(high-low)\r\n\r\n\r","votes":null},{"text":"\r\n    l=[]\r\n    for i in range(n):\r\n        l.append(arr[i])\r\n    l.sort()\r\n    n=len(l)\r\n    ans=l[n-1]-l[0]\r\n    return ans\r\n\r\narr=[1,2,3,4,5,6,7,8,9,10]\r\nn=len(arr)\r\nans=find_Diff(arr,n)\r\n","votes":null},{"text":"\r\n    arr.sort()\r\n    arr1=arr[n-1]\r\n    arr2=arr[1]\r\n    print(\"The difference between the highest and lowest frequencies is: \",arr1-arr2)\r\n    \r\n\r\nif __name__ == '__main__':\r\n    n=int(input(\"Enter the size of the array: \"))\r\n    arr=list(map(int,input(\"Enter the elements of the array: \").split()))\r\n    find_Diff(arr,n)\r\n\r\n\r\n\"\"\"\r\nInput 1:\r\nEnter the size of the array: 5\r\nEnter the elements of the array: 1 2 3 4 5\r\n\r\nOutput 1:\r\nThe difference between the highest and lowest frequencies is:  4\r\n\r\nInput 2:\r\nEnter the size of the array: 4\r\nEnter the elements of the array: 2 3 4 5\r\n\r\nOutput 2:\r\nThe difference between the highest and lowest frequencies is:  3\r\n\r\nInput 3:\r\nEnter the size of the array: 6\r\nEnter the elements of the array: 5 4 3 2 1 1\r\n\r\nOutput 3:\r\nThe difference between the highest and lowest frequencies is:  5\r\n\r\nTime Complexity: O(nlogn)\r\nSpace Complexity: O(1)","votes":null},{"text":"\r\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\r\n    arr.sort()\r\n    return arr[-1]-arr[0]\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = []\r\n    for _ in range(n):\r\n        arr_item = int(input())\r\n        arr.append(arr_item)\r\n    result = find_Diff(arr, n)\r\n    print(result)\r\n\r\n#!\/bin\/python3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n# Complete the find_Diff function below.\r","votes":null},{"text":"\r\n    d={}\r\n    for i in arr:\r\n        if i in d:\r\n            d[i]+=1\r\n        else:\r\n            d[i]=1\r\n    \r\n    a=[]\r\n    for i in d:\r\n        a.append(d[i])\r\n    \r\n    a.sort()\r\n    \r\n    diff=a[-1]-a[0]\r\n    return diff\r\n\r\narr = [1, 1, 1, 2, 2, 3, 4]\r\nn =","votes":null},{"text":"\r\n    # Code here\r\n    arr.sort()\r\n    return arr[n-1]-arr[0]\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    ans = find_Diff(arr,n)\r\n    print(ans)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    arr2 = []\r\n    max_count = 0\r\n    min_count = 0\r\n    for i in range(len(arr)):\r\n        if arr[i] != arr[i+1]:\r\n            arr2.append(arr[i])\r\n    for i in range(len(arr2)):\r\n        x = arr2.count(arr2[i])\r\n        if x > max_count:\r\n            max_count = x\r\n        if x < min_count:\r\n            min_count = x\r\n    print(max_count - min_count)\r\n    \r\narr = list(map(int,input().split()))\r\nn = len(arr)\r\nfind_Diff(arr,n)\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nSample Input\r\n1 2 3 ","votes":null},{"text":"\r\n    \r\n    #Sort array\r\n    arr.sort()\r\n\r\n    #Initialize variables\r\n    max_freq = 0\r\n    min_freq = 0\r\n    max_num = 0\r\n    min_num = 0\r\n    \r\n    #Iterate through array\r\n    for i in range(n):\r\n        \r\n        #Keep track of the number and frequency of the current number\r\n        num = arr[i]\r\n        freq = 1\r\n        \r\n        #Iterate through the array to find the number with the same frequency\r\n        for j in range(i+1,n):\r\n            if(arr[j] == num):\r\n                freq += 1\r\n                arr[j] = 0\r\n                \r\n        #Keep track of the number and frequency of the highest frequency\r\n        if(freq > max_freq):\r\n            max_freq = freq\r\n            max_num = num\r\n            \r\n        #Keep track of the number and frequency of the lowest frequency\r\n        if(freq < min_freq):\r\n            min_freq = freq\r\n            min_num = num\r\n    \r\n    #Return the difference between the highest and lowest frequencies\r\n    return max_freq - min_freq\r\n\r\n#Main function\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    arr1=sorted(arr)\r\n    arr2=sorted(arr,reverse=True)\r\n    i=0\r\n    j=0\r\n    while i<n and j<n:\r\n        if arr1[i]==arr2[j]:\r\n            i+=1\r\n            j+=1\r\n        elif arr1[i]>arr2[j]:\r\n            j+=1\r\n        else:\r\n            i+=1\r\n    return arr2[j]-arr1[i]\r\n\r\nif __name__ == '__main__':\r\n    arr = list(map(int, input().rstrip().split()))\r\n    \r\n    n = int(input())\r\n    \r\n    result = find_Diff(arr, n)\r\n    \r\n    print(result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n\r\n    # Create an empty dictionary\r\n    dictionary = {}\r\n\r\n    # Iterate over the array\r\n    for i in range(n):\r\n\r\n        # Check if current element is present in the dictionary\r\n        if (arr[i] in dictionary):\r\n\r\n            # Increment the value of the key if present\r\n            dictionary[arr[i]] += 1\r\n\r\n        # If the current element is not present in the dictionary\r\n        else:\r\n\r\n            # Add the current element to the dictionary\r\n            dictionary[arr[i]] = 1\r\n\r\n    # Initialize the variables\r\n    highest = 0\r\n    least = 0\r\n    \r\n    # Iterate over the dictionary\r\n    for i in dictionary:\r\n\r\n        # Calculate the highest frequency\r\n        if (dictionary[i] > highest):\r\n\r\n            # Update the highest\r\n            highest = dictionary[i]\r\n\r\n        # Calculate the lowest frequency\r\n        if (dictionary[i] < least or least == 0):\r\n\r\n            # Update the least\r\n            least = dictionary[i]\r\n\r\n    # Return the difference\r\n    return highest - least\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n\tarr = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\r\n\tn = len(arr)\r\n\tprint(\"The difference between the highest and lowest frequencies is: \")\r\n\tprint(find_Diff(arr,n))\r\n\r\n\"\"\"\r\nTime Complexity: O(N)\r\nSpace Complexity: O(N)\r\n\r\nSample Input:\r\n[1,2,3,4,5,6,7,8,9","votes":null},{"text":"\r\n    # Write your code here.\r\n    arr.sort()\r\n    arr.reverse()\r\n    res = []\r\n    for i in range(n):\r\n        if arr[i] != arr[i + 1]:\r\n            res.append(arr[i + 1] - arr[i])\r\n    return res\r\n\r\n\r\narr = [3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5]\r\nn = len(arr)\r\n\r\nprint(find_Diff(arr, n))\r\n\r\n# 2\r\n# [1, 2, 3, 4, 5]\r\n# [2, 3, 4, 5, 6]\r\n\r\n# 3\r\n# [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4","votes":null},{"text":"\r\n    arr.sort()\r\n    low = arr[0]\r\n    high = arr[-1]\r\n    return high-low\r\n\r\n\r","votes":null},{"text":"\r\n    max_freq = 0\r\n    min_freq = n\r\n    for i in range(n):\r\n        freq = 0\r\n        for j in range(n):\r\n            if arr[i] == arr[j]:\r\n                freq += 1\r\n        if freq > max_freq:\r\n            max_freq = freq\r\n            max_val = arr[i]\r\n        if freq < min_freq:\r\n            min_freq = freq\r\n            min_val = arr[i]\r\n    return max_val - min_val\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \"\"\"\r\n    from timeit","votes":null},{"text":"\r\n    count={}\r\n    for i in range(n):\r\n        if arr[i] not in count:\r\n            count[arr[i]]=1\r\n        else:\r\n            count[arr[i]]+=1\r\n    \r\n    ans=0\r\n    max_=float('-inf')\r\n    min_=float('inf')\r\n    \r\n    for key in count:\r\n        if max_<count[key]:\r\n            max_=count[key]\r\n        if min_>count[key]:\r\n            min_=count[key]\r\n        ans+=abs(count[key]-max_)\r\n        \r\n    return ans\r\n    \r\narr=[3,2,3,1,2,4,5,5,5,5]\r\nn=len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n\r\n\r\n\"\"\"Output:\r\n13\r\n\r\nExplanation:\r\nThe highest frequency is 5 and the lowest frequency is 3. \r\nThe difference between 5 and 3 is 2.\r\nThe difference between 5 and 2 is 3.\r\nThe difference between 5 and 1 is 4.\r\nThe difference between 5 and 4 is 1.\r\nSo, the total difference is 2 + 3 + 4 + 1 = 13.\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nVerdict:\r\nProblem statement is very easy to understand. But, the solution is very tricky and needs a lot of","votes":null},{"text":"\r\n    arr.sort()\r\n    diff = arr[n-1] - arr[0]\r\n    return diff\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    count=0\r\n    max_count=0\r\n    for i in range(n):\r\n        if arr[i]==max_count:\r\n            count+=1\r\n        elif arr[i]>max_count:\r\n            max_count=arr[i]\r\n            count=1\r\n    return count-1\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    result = find_Diff(arr, n)\r\n    print(result)\r\n\r\n\r\n\"\"\"First Approach\r\n\r\nimport math\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    ans=0\r\n    for i in range(0,n,2):\r\n        ans+=arr[i]\r\n    return ans\r\n\r\narr=[]\r\nn=int(input(\"Enter the size of array : \"))\r\nprint(\"Enter the elements of array : \")\r\nfor i in range(n):\r\n    arr.append(int(input()))\r\nprint(\"The difference between highest and least frequency in a given array is : \" + str(find_Diff(arr,n)))\r\n","votes":null},{"text":"\r\n    a = arr.count(max(arr))\r\n    b = arr.count(min(arr))\r\n    return a-b\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    result = find_Diff(arr, n)\r\n    print(result)\r\n\r\n\"\"\"\r\nInput:\r\n10\r\n1 2 3 4 5 6 7 8 9 10\r\n\r\nOutput:\r\n4\r\n\r\nExplanation:\r\nThe frequencies of the elements are\r\n1 2 3 4 5 6 7 8 9 10\r\n","votes":null},{"text":"\r\n    arr.sort()\r\n    diff = arr[n-1]-arr[0]\r\n    return diff\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    lis = sorted(arr)\r\n    ans = 0\r\n    ans = lis[0] - lis[-1]\r\n    return ans\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    t = int(input())\r\n\r\n    for t_itr in range(t):\r\n        n = int(input())\r\n\r\n        arr = list(map(int, input().rstrip().split()))\r\n\r\n        result = find_Diff(arr, n)\r\n\r\n        fptr.write(result + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    max_freq = 0\r\n    min_freq = 0\r\n    for i in range(n):\r\n        curr_freq = arr.count(arr[i])\r\n        if curr_freq > max_freq:\r\n            max_freq = curr_freq\r\n            max_val = arr[i]\r\n        if curr_freq < min_freq:\r\n            min_freq = curr_freq\r\n            min_val = arr[i]\r\n    # print(max_freq,min_freq)\r\n    return max_val-min_val\r\n\r\n\r\n\r\n\r\narr = [2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7","votes":null},{"text":"\r\n    max_freq = max(arr)\r\n    min_freq = min(arr)\r\n    return max_freq-min_freq\r\n\r\nn = int(input())\r\narr = list(map(int,input().split()))\r\nprint(find_Diff(arr,n))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    arr.sort()\r\n    a = arr[0]\r\n    b = arr[-1]\r\n    return b-a\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = find_Diff(arr,n)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n#https:\/\/www.hackerrank.com\/challenges\/angry-children\/problem\r\n\r\n#!\/bin\/python3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n# Complete the angryProfessor function below.\r","votes":null},{"text":"\r\n    counter = dict()\r\n    for i in arr:\r\n        if i not in counter:\r\n            counter[i] = 1\r\n        else:\r\n            counter[i] += 1\r\n\r\n    max_freq = 0\r\n    max_elem = None\r\n    for i in counter:\r\n        if counter[i] > max_freq:\r\n            max_freq = counter[i]\r\n            max_elem = i\r\n\r\n    min_freq = 1000000000\r\n    min_elem = None\r\n    for i in counter:\r\n        if counter[i] < min_freq and counter[i] != max_freq:\r\n            min_freq = counter[i]\r\n            min_elem = i\r\n    if max_elem == None or min_elem == None:\r\n        return -1\r\n    return max_elem - min_elem\r\n\r\narr = [2, 3, 5, 7, 9]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    arr.sort(reverse=True)\r\n    ans = arr[0] - arr[1]\r\n    return ans\r\n\r\n\r\n\r\n\r\n\r\n#{ \r\n#  Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n# Contributed by : Nagendra Jha\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = list(map(int, input().strip().split()))\r\n        total = find_Diff(arr, n)\r\n        print(total)\r\n\r\n# } Driver Code Ends\r\n\r\n\r\n#User function Template for python3\r\n\r\n\r\n# arr: list of integers\r\n# n: total number of elements in the list\r","votes":null},{"text":"\r\n    # Code here\r\n    \r\n    res = []\r\n    ma = 0\r\n    mi = 0\r\n    #print(arr)\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] > arr[j]:\r\n                ma = arr[i]\r\n                mi = arr[j]\r\n            elif arr[i] < arr[j]:\r\n                ma = arr[j]\r\n                mi = arr[i]\r\n            else:\r\n                ma = arr[i]\r\n                mi = arr[i]\r\n            res.append(ma-mi)\r\n            #print(ma,mi)\r\n    res.sort()\r\n    return res[n-1]\r\n\r\n# Driver Code\r\narr = [1, 2, 4, 1, 2, 5, 1, 3, 3, 3, 6]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n\r\n    # Your code goes here\r\n    new_arr = [0]*n\r\n    for i in range(n):\r\n        new_arr[arr[i]] += 1\r\n    max_ = 0\r\n    min_ = 1000000\r\n    for i in range(n):\r\n        if new_arr[i] > max_:\r\n            max_ = new_arr[i]\r\n        if new_arr[i] < min_:\r\n            min_ = new_arr[i]\r\n    return max_ - min_\r\n\r\narr = [2, 3, 2, 2, 4, 5, 6, 7, 8, 7]\r\nn = len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n# Output: 4\r\n# Explanation: The highest frequency is 7 and the lowest frequency is 2.\r\n# The difference between highest and lowest frequencies is 7 - 2 = 5.\r\n\r\n# Input: arr[] = {1, 2, 3, 4, 5}\r\n# Output: 5\r\n\r\n# Input: arr[] = {1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ","votes":null},{"text":"\r\n    \r\n    d = {}\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            d[arr[i]] += 1\r\n        else:\r\n            d[arr[i]] = 1\r\n    \r\n    s = 0\r\n    for i in range(n):\r\n        s += d[arr[i]]\r\n    \r\n    s1 = 0\r\n    for i in range(n):\r\n        s1 += (s-d[arr[i]]) * arr[i]\r\n    \r\n    return s1\r\n\r\n# Driver code\r\narr = [3, 4, 4, 6, 6, 6, 6, 6, 6, 6]\r\nn = len(arr)\r\n","votes":null},{"text":"\r\n    diff = 0\r\n    arr.sort()\r\n    \r\n    for i in range(n-1):\r\n        diff += arr[i+1]-arr[i]\r\n    print(diff)\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\n\r\nfind_Diff(arr,n)\r\n\r\n\"\"\"Output:\r\n\r\n  10\r\n\r\nTime complexity: O(nlogn)\r\nSpace complexity: O(1)\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\n\r\nApproach 2: Sorting + Hashing\r\n\r\nIn this approach, we sort the array, and then simply iterate through the array and add the difference between\r\ncurrent and next element.\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    x = arr[-1","votes":null},{"text":"\r\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\r\n    dic = {}\r\n    for i in range(n):\r\n        dic[arr[i]] = dic.get(arr[i],0)+1\r\n    max_ele = max(dic.values())\r\n    min_ele = min(dic.values())\r\n    return max_ele-min_ele\r\n\r\narr = list(map(int,input().split()))\r\nn = int(input())\r\nprint(find_Diff(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    s = set()\r\n    for i in range(n):\r\n        if arr[i] not in s:\r\n            s.add(arr[i])\r\n    return len(s)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    print(find_Diff(arr, n))\r\n\r\n# Input\r\n# 6\r\n# 1 2 4 4 4 5\r\n\r\n# Output\r\n# 2\r\n\r\n# Explanation\r\n# The two frequencies with highest frequency are 4 and 5,\r\n# so the difference between them is 5-4 = 5-4 = 1.\r\n\r\n# Sample Input\r\n# 5\r\n# 1 2 3 4 5\r\n\r\n# Output\r\n# 0\r\n\r\n# Explanation\r\n# There are no duplicates, so the difference between the highest and lowest\r\n# frequencies is 5-1 = 4.\r\n\r\n# Sample Input\r\n# 5\r\n# 1 2 2 2 2\r\n\r\n# Output\r\n# 4\r\n\r\n# Explanation\r\n# The two frequencies with highest frequency are 2 and 1,\r\n# so the difference between them is 2-1 = 2-1 = 1.\r\n\r\n# Sample Input\r\n# 6\r\n# 1 2 2 4 4 4\r\n\r\n# Output\r\n# 2\r\n\r\n# Explanation\r\n# Since there are two 2's, the frequencies of 2 are 2 and 3.\r\n# The difference between the highest and lowest frequencies is 3-2 = 1.\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n# Hint: You can store the frequencies in a hash map or a set.\r\n\r\n# In this problem, you don't need to return th","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    arr.sort()\r\n    freq = [arr[0]]\r\n    for i in range(1,n):\r\n        if arr[i] != freq[-1]:\r\n            freq.append(arr[i])\r\n    \r\n    highest = 0\r\n    for i in freq:\r\n        if i > highest:\r\n            highest = i\r\n    \r\n    lowest = freq[0]\r\n    for i in freq:\r\n        if i < lowest:\r\n            lowest = i\r\n    \r\n    diff = highest - lowest\r\n    \r\n    return diff\r\n\r\n\r\narr = [1,3,4,5,6,7,8,1,3,4,5,6,7,8]\r\nn = len(arr)\r\n\r\ndiff = find_Diff(arr,n)\r\n\r\nprint(f\"Diff of","votes":null},{"text":"\r\n    #your code here\r\n    dic = {}\r\n    for i in range(n):\r\n        if arr[i] not in dic:\r\n            dic[arr[i]] = 1\r\n        else:\r\n            dic[arr[i]] += 1\r\n    \r\n    m = 0\r\n    for key, value in dic.items():\r\n        if value > m:\r\n            m = value\r\n    \r\n    m2 = 0\r\n    for key, value in dic.items():\r\n        if value < m2:\r\n            m2 = value\r\n    \r\n    return m-m2\r\n    \r\narr = [1, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\n\r\n\"\"\"\r\nOutput:\r\n\r\n6\r\n\r\nExplanation:\r\n\r\nDiff. between highest and lowest frequency is 6.\r\n\r\n\"\"\"\r\n\r\n\r\n#Solution:\r\n\r","votes":null},{"text":"\r\n    \r\n    count = [0]*100000\r\n    \r\n    for i in range(n):\r\n        count[arr[i]] += 1\r\n        \r\n    max_freq = max(count)\r\n    min_freq = min(count)\r\n    \r\n    if max_freq == min_freq:\r\n        return 0\r\n    else:\r\n        return max_freq - min_freq\r\n\r\narr = [1,2,2,2,3,3,3,3,3,4,4,4,4,4]\r\n\r\nn = len(arr)\r\n\r\nprint (find_Diff(arr,n))\r\n\r","votes":null},{"text":"\r\n\r\n    # your code goes here\r\n    max_count=0\r\n    min_count=0\r\n    for i in range(n):\r\n        count=0\r\n        for j in range(n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n        if count>max_count:\r\n            max_count=count\r\n            max_ele=arr[i]\r\n        if count<min_count:\r\n            min_count=count\r\n            min_ele=arr[i]\r\n    return max_ele-min_ele\r\n\r\narr=[1, 1, 1, 2, 2, 3, 3, 3, 3, 3]\r\nn=len(arr)\r\nprint(find_Diff(arr,n))\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    # Sort the array\r\n    arr.sort()\r\n    \r\n    # Calculate the difference\r\n    diff = arr[n-1] - arr[0]\r\n    \r\n    # Return the difference\r\n    return diff\r\n\r\n\r\n\r\n# Driver Code\r\n\r\narr = [1, 2, 4, 5, 2, 3, 4, 5, 6, 7, 8, 9]\r\nn = len(arr)\r\n\r\nprint(find_Diff(arr,n))\r\n\r\n# Output: 8\r\n\r\n# Time Complexity: O(nlogn)\r\n\r\n# Space Complexity: O(1)\r\n\r\n# If we are not allowed to sort the array then we can do it in following way:\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    arr.sort()\r\n    a=arr[n-1]\r\n    b=arr[0]\r\n    return abs(a-b)\r\n\r\nif __name__ == '__main__':\r\n    t=int(input())\r\n    for i in range(t):\r\n        n=int(input())\r\n        arr=list(map(int,input().split()))\r\n        ans=find_Diff(arr,n)\r\n        print(ans)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # Code here\r\n    arr.sort()\r\n    max_freq = arr[0]\r\n    min_freq = arr[-1]\r\n    return max_freq - min_freq\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    max_diff = 0\r\n    max_freq = 0\r\n    min_freq = 0\r\n    dictionary = {}\r\n\r\n    for i in range(0,n):\r\n        if arr[i] in dictionary:\r\n            dictionary[arr[i]] += 1\r\n        else:\r\n            dictionary[arr[i]] = 1\r\n\r\n        if dictionary[arr[i]] > max_freq:\r\n            max_freq = dictionary[arr[i]]\r\n            max_key = arr[i]\r\n\r\n        if dictionary[arr[i]] < min_freq:\r\n            min_freq = dictionary[arr[i]]\r\n            min_key = arr[i]\r\n\r\n    for i in range(0,n):\r\n        if arr[i] != max_key and arr[i] != min_key:\r\n            max_diff += dictionary[arr[i]]\r\n\r\n    print(max_diff)\r\n\r\narr = [1,1,1,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,","votes":null},{"text":"\r\n    import collections\r\n    freq = collections.Counter(arr)\r\n    maxFreq = max(freq.values())\r\n    minFreq = min(freq.values())\r\n    return maxFreq - minFreq\r\n\r\n\r\narr = [1, 2,","votes":null},{"text":"\r\n    arr.sort(reverse=True)\r\n    \r\n    if(arr[0]==arr[1]):\r\n        return 0\r\n\r\n    return arr[0]-arr[1]\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    f = [1]*n\r\n    for i in range(1,n):\r\n        if arr[i] == arr[i-1]:\r\n            f[i] = f[i-1] + 1\r\n        else:\r\n            f[i] = 1\r\n    m = max(f)\r\n    for i in range(n):\r\n        if f[i] == m:\r\n            print(arr[i], end=' ')\r\n    print()\r\n\r\n\r\narr = [2,4,2,4,2,4,2,4,2,4,2,4]\r\nn = len(arr)\r\nfind_Diff(arr,n)\r\n\r\n# Output\r\n# 2 4\r\n\r\n\r\n\"\"\"\r\nExplanation:\r\nThe elements which occur most frequently are 2 and 4.\r\nThe difference between highest and least frequencies is 2(4 - 2).\r\n\"\"\"\r\n\r\n\r\n\r\n\"\"\"\r\n\r\nTime complexity: O(nlog(n))\r\nSpace complexity: O(n)\r\n\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTest Case:\r\n\r\nInput 1:\r\nEnter the size of array: 10\r\nEnter the elements of array: 2 4 2 4 2 4 2 4 2 4\r\nOutput 1:\r\n2 4\r\n\r\n\r\nInput 2:\r\nEnter the size of array: 5\r\nEnter the elements of array: 1 1 1 1 1\r\nOutput 2:\r\n1\r\n\r\n\r\nInput 3:\r\nEnter the size of array: 6\r\nEnter the elements of array: 1 1 1 2 1 1\r\nOutput 3:\r\n1 2\r\n\r\n\r\nInput 4:\r\nEnter the size of array: 8\r\nEnter the elements of array: 1 2 3 1 2 3 1 2\r","votes":null},{"text":"\r\n    arr.sort()\r\n    diff = arr[-1] - arr[0]\r\n    return diff\r\n\r\n\r\n# Driver Code\r\narr = [1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5","votes":null},{"text":"\r\n    # Code here\r\n    arr.sort()\r\n    return arr[-1]-arr[0]\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    ans = find_Diff(arr,n)\r\n    print(ans)\r\n\r\n# Contributed by Shreya549\r\n\r\n# Sample Input:\r\n# 5\r\n# 4 4 ","votes":null},{"text":"\r\n    if len(arr)==0:\r\n        return 0\r\n    \r\n    max_f = 1\r\n    min_f = 1\r\n    \r\n    for i in range(1,n):\r\n        if arr[i] == arr[i-1]:\r\n            max_f += 1\r\n        else:\r\n            max_f = 1\r\n            \r\n        if max_f > max_f:\r\n            max_f = max_f\r\n            \r\n        if arr[i] == arr[i-1]:\r\n            min_f += 1\r\n        else:\r\n            min_f = 1\r\n            \r\n        if min_f < min_f:\r\n            min_f = min_f\r\n            \r\n    return max_f-min_f\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [4,5,6,7,8,9,10,1,2,3]\r\n    n = len(arr)\r\n    print(\"The difference between highest and lowest frequencies is: \",find_Diff(arr,n))\r\n    \r\n    \r\n\"\"\"\r\nTime Complexity : O(n)\r\nSpace Complexity : O(1)\r\n\r\nInput:\r\n[4,5,6,7,8,9,10,1,2,3]\r\nOutput:\r\nThe difference between highest and lowest frequencies is:  9\r\n\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTest Case:\r\n[4,4,4,4,4,4,4,4,4,4]\r\nOutput:\r\nThe difference between highest and lowest frequencies is:  0\r\n\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nTest Case:\r\n[4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,","votes":null},{"text":"\r\n    \r\n    a = sorted(arr)\r\n    i = 0\r\n    while i < n:\r\n        if a[i] == a[i+1]:\r\n            i += 1\r\n        else:\r\n            return a[i+1] - a[i]\r\n    return 0\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    x,y = 0,0\r\n    \r\n    for i in range(n):\r\n        if arr[i]>y:\r\n            y = arr[i]\r\n        if arr[i]<x:\r\n            x = arr[i]\r\n    print(y-x)\r\n\r\n\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\nfind_Diff(arr,n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # code here\r\n    freq_dict = {}\r\n    for i in range(n):\r\n        if arr[i] in freq_dict:\r\n            freq_dict[arr[i]] += 1\r\n        else:\r\n            freq_dict[arr[i]] = 1\r\n    \r\n    freq = list(freq_dict.values())\r\n    max_freq = max(freq)\r\n    min_freq = min(freq)\r\n    print(max_freq - min_freq)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = map(int, input().strip().split())\r\n    arr = list(arr)\r\n    find_Diff(arr,n)\r\n","votes":null},{"text":"\r\n    # Your code here\r\n    freq = {}\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    max_freq = max(freq.values())\r\n    min_freq = min(freq.values())\r\n    diff = max_freq - min_freq\r\n    return diff\r\n\r\narr = [1, 2, 3, 2, 1, 1, 1, 1, 1]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Your code here\r\n    arr=sorted(arr)\r\n    return arr[-1]-arr[0]\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = []\r\n\r\n    for _ in range(n):\r\n        arr_item = int(input())\r\n        arr.append(arr_item)\r\n\r\n    result = find_Diff(arr, n)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\n#include <bits\/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n\/\/ Complete the find_Diff function below.\r\nint find_Diff(vector<int> arr) {\r\n    int n = arr.size();\r\n    int min = arr[0], max = arr[0];\r\n    for(int i = 1; i < n; i++) {\r\n        if(arr[i] < min) min = arr[i];\r\n        if(arr[i] > max) max = arr[i];\r\n    }\r\n    return max - min;\r\n}\r\n\r\nint main() {\r\n    int n;\r\n    cin >> n;\r\n    vector<int> arr(n);\r\n    for (int i = 0; i < n; i++) {\r\n        cin >> arr[i];\r\n    }\r\n    int result = find_Diff(arr);\r\n    cout << result << \"\\n\";\r\n\r\n    return 0;\r\n}\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Create a dictionary to store the frequencies of the elements in the array\r\n    freq = {}\r\n\r\n    # Fill the dictionary with frequencies of the elements in the array\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n\r\n    # Find the highest frequency using max()\r\n    highest = max(freq.values())\r\n    # Find the lowest frequency using min()\r\n    lowest = min(freq.values())\r\n    # Find the difference between highest and lowest frequencies\r\n    diff = highest - lowest\r\n\r\n   ","votes":null},{"text":"\r\n    \r\n    d = {}\r\n    for i in range(n):\r\n        d[arr[i]] = d.get(arr[i],0) + 1\r\n    \r\n    ans = 0\r\n    max_freq = 0\r\n    min_freq = 10**5\r\n    for i in range(n):\r\n        if d[arr[i]] > max_freq:\r\n            max_freq = d[arr[i]]\r\n        if d[arr[i]] < min_freq:\r\n            min_freq = d[arr[i]]\r\n        ans += max_freq - min_freq\r\n    return ans\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    output = []\r\n    output.append(arr[-1] - arr[0])\r\n    return output\r\n\r\narr = [2, 3, 4, 5, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nprint(find_Diff(arr, len(arr)))\r\n\r\n#Reference : w3resource\r\n\r\n#Code by Abel Roy\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # Your code here\r\n    ar=list(arr)\r\n    ar.sort()\r\n    diff=ar[n-1]-ar[0]\r\n    return diff\r\n\r\narr=[1,2,3,4,5,6,7,8,9,10]\r\nn=len(arr)\r\nprint(\"Difference between highest and lowest frequencies in a given array : \",find_Diff(arr,n))\r\n\r\n\"\"\"Output : \r\nDifference between highest and lowest frequencies in a given array :  9\r\n\r\nTime Complexity : O(n*log(n))\r\nSpace Complexity : O(n)\r\n\r\nSample Input : \r\narr=[1,2,3,4,5,6,7,8,9,10]\r\nn=len(arr)\r\n\r\nSample Output : \r\nDifference between highest and lowest frequencies in a given array :  9\r\n\r\nExpected Output : \r\nDifference between highest and lowest frequencies in a given array :  9\r\n\r\nConstraints : \r\n1 <= n <= 10^5\r\n\r\nSample Input : \r\narr=[-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn=len(arr)\r\n\r\nSample Output : \r\nDifference between highest and lowest frequencies in a given array :  18\r\n\r\nExpected Output : \r\nDifference between highest and lowest frequencies in a given array :  18\r\n\r\nConstraints : \r\n1 <= n <= 10^5\r\n\r\nSample Input : \r\narr=[-9, 1, -8, 2, -7, 3, -6, 4, -5, 5, -4, 6, -3, 7, -2, 8, -1, 9, 10]\r\nn=len(arr)\r\n\r\nSampl","votes":null},{"text":"\r\n    freq = [0] * 101\r\n    for i in range(n):\r\n        freq[arr[i]] += 1\r\n    max_freq = max(freq)\r\n    min_freq = min(freq)\r\n    return max_freq - min_freq\r\n\r\narr = [1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,5,5,5]\r\nprint(find_Diff(arr, len(arr)))\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    diff = arr[-1] - arr[0]\r\n    return diff\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    arr.sort()\r\n    result = arr[n-1] - arr[0]\r\n    return result\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    result = find_Diff(arr, n)\r\n    print(result)\r\n\r\n\r\n# Contributed by Shubham Jaiswal\r\n\r\n\"\"\"You are given an array of positive integers, where each integer represents the frequency of an occurrence of a character in a string.\r\n\r\nFor example, if the array is [1, 3, 2, 5], this means that the character 'a' occurred 1 time, the character 'b' occurred 3 times, and so on. \r\n\r\nWrite a function that takes in an array of positive integers and returns the difference between the highest and lowest frequencies.\r\n\r\nNote that the array will not be sorted, so you cannot assume that the highest frequency is the last element in the array. You can assume that there will always be an answer.\r\n\r\nSample Input\r\n\r\n4\r\n1, 3, 2, 5\r\nSample Output\r\n\r\n2\r\nExplanation\r\n\r\nThe difference between the highest and lowest frequencies is 2, since the character 'b' occurred 3 times and the character 'd' occurred 1 time. Note that the difference is 3 - 1 = 2.\"\"\"\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Your code goes here\r\n    arr.sort()\r\n    max_freq = arr[-1]\r\n    min_freq = arr[0]\r\n\r\n    return max_freq - min_freq\r\n\r\n\r\narr = [2,","votes":null},{"text":"\r\n    max_val = 0\r\n    min_val = 0\r\n    for i in range(n):\r\n        if(arr[i] > max_val):\r\n            max_val = arr[i]\r\n    for i in range(n):\r\n        if(arr[i] < min_val):\r\n            min_val = arr[i]\r\n    return (max_val - min_val)\r\n\r\n\r\narr = [9, 2, 1, 8, 1, 2, 4, 5, 7, 8, 6, 5, 2, 1, 6, 4, 3, 5, 8, 9, 4, 2, 1, 4, 5, 6, 1, 2, 4, 5, 7, 8, 6, 5, 2, 1, 6, 4, 3, 5, 8, 9, 4, 2, 1, 4, 5, 6, 1, 2, 4, 5, 7, 8, 6, 5, 2, 1, 6, 4, 3, 5, 8, 9, 4, 2, 1, 4, 5, 6, 1, 2, 4, 5, 7, 8, 6, 5, 2, 1, 6, 4, 3, 5, 8, 9, 4, 2, 1, 4, 5, 6, 1, 2, 4, 5, 7, 8, 6, 5, 2, 1, 6, 4, 3, 5, 8, 9, 4, 2, 1, 4, 5, 6, 1, 2, 4, 5, 7, 8, 6, 5, 2, ","votes":null},{"text":"\r\n    #sort the array\r\n    arr.sort()\r\n    #initialize the difference variable\r\n    diff = 0\r\n    #loop through the array\r\n    for i in range(n):\r\n        # if the difference is not zero and the element is different from the previous element then\r\n        if diff != 0 and arr[i] != arr[i-1]:\r\n            #reset the difference\r\n            diff = 0\r\n        #if the difference is zero and the element is same as the previous element then\r\n        elif diff == 0 and arr[i] == arr[i-1]:\r\n            #update the new difference\r\n            diff = arr[i]\r\n    return diff\r\n\r\narr = [1,1,2,3,4,4,4,4,4,4,5,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10","votes":null},{"text":"\r\n    max_freq = dict()\r\n    min_freq = dict()\r\n    freq = dict()\r\n    for i in range(n):\r\n        if arr[i] in freq:\r\n            freq[arr[i]] += 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    for i in freq:\r\n        if freq[i] in max_freq:\r\n            max_freq[freq[i]] += 1\r\n        else:\r\n            max_freq[freq[i]] = 1\r\n    for i in freq:\r\n        if freq[i] in min_freq:\r\n            min_freq[freq[i]] += 1\r\n        else:\r\n            min_freq[freq[i]] = 1\r\n    max_freq_highest = max(max_freq.keys())\r\n    min_freq_lowest = min(min_freq.keys())\r\n    return max_freq_highest - min_freq_lowest\r\n\r\n\r\narr = [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ","votes":null},{"text":"\r\n    return max(arr)-min(arr)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    arr.sort()\r\n    max_ = arr[len(arr)-1]\r\n    min_ = arr[0]\r\n\r\n    return max_-min_\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    arr.sort()\r\n    d=[]\r\n    for i in range(len(arr)):\r\n        if i==0:\r\n            d.append(arr[i+1]-arr[i])\r\n        elif i==len(arr)-1:\r\n            d.append(arr[i]-arr[i-1])\r\n        else:\r\n            d.append(arr[i+1]-arr[i-1])\r\n    return max(d)\r\narr = [1, 1, 2, 2, 2, 3, 4, 5, 5, 5, 5]\r\nn = len(arr)\r\nprint(find_Diff(arr, n))\r\n\r\n\r\n\r\n\"\"\"\r\nExample:\r\n\r\nInput: arr[] = {1, 1, 2, 2, 2, 3, 4, 5, 5, 5, 5}\r\nOutput: 2\r\nExplanation: The largest difference between\r\nfrequency of any element is 5-1=4.\r\n\"\"\"\r","votes":null}],"time":{"count":11.0,"avg":172632.8578181818,"std":45305.1839293757,"cov":0.2624366213}}
{"id":542,"question":"def fill_spaces(text):\r\n    \"\"\"Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\"\"\"","answers":[{"text":"\r\n    import re\r\n    return re.sub(r'[ .,]+', ':', text)\r\n\r\n\r","votes":48614.544},{"text":"\r\n    \r\n    import re\r\n    \r\n    text = re.sub(r\"[ ,.]\", \":\", text)\r\n    \r\n    return text\r\n\r\n\r","votes":74691.784},{"text":"\r\n    import re\r\n    return re.sub(\"[ .,]+\", \":\", text)\r\n\r\nprint(fill_spaces(\"hello world\"))\r\n\r\n\r","votes":77415.676},{"text":"\r\n    import re\r\n    text = re.sub(r'[ ,.]', ':', text)\r\n    return text\r\n\r","votes":78665.332},{"text":"\r\n    import re\r\n\r\n    text = re.sub(\"[, ]+\", \":\", text)\r\n    text = text.replace(\".\", \":\")\r\n    return text\r\n\r\n\r","votes":79830.976},{"text":"\r\n    import re\r\n    text = re.sub(\"[ ,.]\", \":\", text)\r\n    return text\r\n\r\n\r","votes":82006.412},{"text":"\r\n    import re\r\n    pattern = re.compile(r'[ ,.]+')\r\n    return pattern.sub(\":\", text)\r\n\r\n\r\nprint(fill_spaces('The dog, a big dog, ran.   '))\r\n\r\n\r\n#","votes":82498.664},{"text":"\r\n    import re\r\n    return re.sub(' |,|\\.', ':', text)\r\n\r\n\r\n# Expected output\r\n# 'This:is:a:string:with:some:spaces:and:commas:and:dots'\r\n\r\nprint(fill_spaces('This is a string with some spaces, and commas, and dots'))\r\n\r\n\r","votes":83871.228},{"text":"\r\n\r\n    import re\r\n    text = re.sub(\"[., ]\", \":\", text)\r\n    return text\r\n\r\n\r","votes":85313.716},{"text":"\r\n    import re\r\n    return re.sub(r'[ ,.]', ':', text)\r\n\r\n\r","votes":87287.604},{"text":"\r\n    import re\r\n    text = re.sub(r'[ \\.,]', ':', text)\r\n    return text\r\n\r\n\r","votes":89041.128},{"text":"\r\n    # Solution:\r\n    # import re\r\n    # return re.sub(r'[ ,.]', ':', text)\r\n    # Solution without regex:\r\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\r\n\r\n\r","votes":89822.588},{"text":"\r\n    import re\r\n    pattern = re.compile(r'[\\s\\.,]')\r\n    return pattern.sub(':', text)\r\n\r\n\r","votes":90231.572},{"text":"\r\n    import re\r\n    pattern = re.compile(r'[., ]')\r\n    return re.sub(pattern, ':', text)\r\n\r","votes":90952.428},{"text":"\r\n\r\n    import re\r\n\r\n    text = re.sub(r'[ ,.]', ':', text)\r\n    return text\r\n\r\n\r","votes":96080.54},{"text":"\r\n    import re\r\n    text = text.replace(\" \", \":\")\r\n    text = re.sub(r\"[,.]\", \":\", text)\r\n    return text\r\n\r\n\r","votes":96957.936},{"text":"\r\n    import re\r\n    return re.sub(r'[\\s\\.\\,\\.]',':',text)\r\n\r\n# Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\r","votes":99340.32},{"text":"\r\n    import re\r\n\r\n    pattern = re.compile(r'[ ,.]')\r\n    text = pattern.sub(':', text)\r\n    return text\r\n\r\n\r","votes":99900.836},{"text":"\r\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\r\n\r\n\r","votes":101201.58},{"text":"\r\n    text = text.replace(',',':')\r\n    text = text.replace('.',':')\r\n    text = text.replace(' ',':')\r\n    return text\r\n\r","votes":102959.556},{"text":"\r\n    import re\r\n    pattern = re.compile(r\"[ ,.]\")\r\n    return pattern.sub(\":\", text)\r\n\r\n# -----------------------------------------------------------------------------\r\n\r","votes":103218.804},{"text":"\r\n    import re\r\n    return re.sub('[,\\.\\s]',':',text)\r\n\r\nprint(fill_spaces('He, is, a, good, boy.'))\r\n\r","votes":104514.444},{"text":"\r\n    import re\r\n    text = re.sub(r'[\\s,\\.]', \":\", text)\r\n    return text\r\n\r\n\r","votes":104714.04},{"text":"\r\n    import re\r\n    return re.sub(r'\\s|\\.|,', ':', text)\r\n\r\n\r","votes":104768.46},{"text":"\r\n    import re\r\n    pattern = re.compile(r'[\\s,\\.]+')\r\n    return pattern.sub(':', text)\r\n\r\n\r","votes":104814.92},{"text":"\r\n    import re\r\n    text = re.sub(r\"[ ,.]\", \":\", text)\r\n    return text\r\n\r\n\r","votes":107813.436},{"text":"\r\n    import re\r\n    \r\n    text = re.sub(r'[ ,.]', ':', text)\r\n    return text\r\n\r\nprint(fill_spaces('Python is a programming language. It is very popular among computer scientists.'))\r\n\r\n\"\"\"Output:\r\n'Python:is:a:programming:language:It:is:very:popular:among:computer:scientists'\r\n\"\"\"\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":109470.536},{"text":"\r\n    # regex = re.compile('[ ,.]')\r\n    # return regex.sub(':', text)\r\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\r\n\r\n\r","votes":114846.196},{"text":"\r\n    text = text.replace(' ', ':')\r\n    text = text.replace(',', ':')\r\n    text = text.replace('.', ':')\r\n    return text\r\n\r\n\r","votes":117412.72},{"text":"\r\n    import re\r\n    pattern = re.compile(r'[\\s,.]{1,}')\r\n    return re.sub(pattern, ':', text)\r\n\r\nprint(fill_spaces(\"This is a sentence.\"))\r\nprint(fill_spaces(\"This is a sentence,.\"))\r\nprint(fill_spaces(\"This is a sentence..\"))\r\nprint(fill_spaces(\"This is a sentence,.\"))\r\n","votes":118542.18},{"text":"\r\n    import re\r\n    # pattern = re.compile(r'\\(|\\)|\\s|,|\\.')\r\n    # return re.sub(pattern, ':', text)\r\n    pattern = re.compile(r'\\s+')\r\n    return re.sub(pattern, ':', text)\r\n\r\n\r","votes":118945.148},{"text":"\r\n\r\n    import re\r\n    text = re.sub('[\\s,\\.]', ':', text)\r\n    return text\r\n\r\n\r\nprint(fill_spaces('I am a student. I am good. I am great.'))\r\n\r\n\r","votes":121262.968},{"text":"\r\n    import re\r\n\r\n    return re.sub(r'[ ,.]', ':', text)\r\n\r\n\r","votes":122389.168},{"text":"\r\n    text = text.replace(' ', ':')\r\n    text = text.replace(',', ':')\r\n    text = text.replace('.', ':')\r\n    return text\r\n\r\n\r\nprint(fill_spaces('hello, world'))\r\n\r\n\r\n# 2. Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\r","votes":129154.3},{"text":"\r\n    import re\r\n    p = re.compile(\"[ \\.,]\")\r\n    text = p.sub(\":\", text)\r\n    return text\r\n\r","votes":133698.884},{"text":"\r\n    import re\r\n    return re.sub(r'[\\s,.]', ':', text)\r\n\r\nprint(fill_spaces('Hello, how are you.'))\r\n\r\n\r\n# 4. Average Number\r\n\r","votes":134485.852},{"text":"\r\n    # Your code here\r\n    import re\r\n    pattern = re.compile(r'[ ,.]')\r\n    text = pattern.sub(':', text)\r\n    return text\r\n\r\n\r","votes":136065.284},{"text":"\r\n    spaces = text.replace(\" \", \":\")\r\n    commas = spaces.replace(\",\", \":\")\r\n    dots = commas.replace(\".\", \":\")\r\n    return dots\r\n\r\n\r\nprint(fill_spaces(\"I love python.\"))\r\n\r\n\r","votes":137726.444},{"text":"\r\n    import re\r\n    pattern = '[ ,.]'\r\n    replace = ':'\r\n    regex = re.compile(pattern)\r\n    return regex.sub(replace, text)\r\n\r\nprint(fill_spaces('Hello World!'))  # Hello:World!\r\nprint(fill_spaces('Hello, World!'))  # Hello:World!\r\nprint(fill_spaces('Hello. World!'))  # Hello:World!\r\nprint(fill_spaces('Hello World!'))  # Hello:World!\r\nprint(fill_spaces('Hello World.'))  # Hello:World:.\r\nprint(fill_spaces('Hello World'))  # Hello:World\r\nprint(fill_spaces('Hello'))  # Hello\r\nprint(fill_spaces(''))  #\r\nprint(fill_spaces('  '))  #:\r\nprint(fill_spaces('Hello, World! '))  # Hello:World!:\r\nprint(fill_spaces('Hello, World! ...'))  # Hello:World!:...\r\nprint(fill_spaces('Hello, World! ... '))  # Hello:World!:...\r\nprint(fill_spaces('Hello, World! ..., '))  # Hello:World!:...:\r\nprint(fill_spaces('Hello, World! ..., '))  # Hello:World!:...:\r\nprint(fill_spaces('Hello, World! ..., ...'))  # Hello:World!:...:...\r\nprint(fill_spaces('Hello, World! ..., ..., ...'))  # Hello:World!:...:...:...\r\nprint(fill_spaces('Hello, World! ..., ..., ..., ...'))  # Hello:World!:...:...:...:...\r\nprint(fill_spaces('Hello, World!, ...'))  # Hello:World!:...\r\nprint(fill_spaces('Hello, World!, ..., ...'))  # Hello:World!:...:...\r\nprint(fill_spaces('Hello, World!, ..., ..., ...'))  # Hello:World!:..","votes":154041.492},{"text":"\r\n    return re.sub(r'[ \\.,]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(' ', ':', text)\r\n    text = re.sub(',', ':', text)\r\n    text = re.sub('.', ':', text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    regex = r\"[ ,.]\"\r\n\r\n    return re.sub(regex, \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    regex = r\"\\s|\\.|\\,\"\r\n    return re.sub(regex, \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r\"[\\s.,]\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    import re\r\n\r\n    pattern = re.compile(\"( |,|.)\")\r\n    return pattern.sub(\":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    text = re.sub(' ', ':', text)\r\n    text = re.sub(',', ':', text)\r\n    text = re.sub('.', ':', text)\r\n\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    pattern = r\"[ ,.]\"\r\n    return re.sub(pattern, \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    import re\r\n    text = re.sub(r'(\\s|,|\\.)',':',text)\r\n    return text\r\n\r\ntext = input(\"Enter the text to replace: \")\r\n\r\nprint(fill_spaces(text))\r\n","votes":null},{"text":"\r\n    s = re.sub(r\"[ ,.]\", \":\", text)\r\n    return s\r\n\r\n\r","votes":null},{"text":"\r\n    text = str(text)\r\n    text = re.sub(r'\\.|\\,| ', ':', text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    import re\r\n    text = re.sub(' |,|\\.', ':', text)\r\n    print(text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub('[., ]', ':', text)\r\n\r","votes":null},{"text":"\r\n    space_pattern = re.compile(r\"\\s+\")\r\n    return space_pattern.sub(\":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    import re\r\n\r\n    replacements = re.compile(r'(\\s|\\.|,)')\r\n    return replacements.sub(':', text)\r\n\r\n\r\nif __name__ == '__main__':\r\n    # These \"asserts\" using only for self-checking and not necessary for\r\n    # auto-testing\r\n    assert fill_spaces('  .   ') == ':',\r\n        \"Example 1\"\r\n    assert fill_spaces(',,...') == '::',\r\n        \"Example 2\"\r\n    assert fill_spaces('    ') == '',\r\n        \"Example 3\"\r\n    assert fill_spaces('xyz') == 'xyz',\r\n        \"Example 4\"\r\n    assert fill_spaces('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz',\r\n        \"Example 5\"\r\n    assert fill_spaces('a b c\\t\\nd e\\n\\n\\nf\\tg') == 'a:b:c::d:e::::f:g',\r\n        \"Example 6\"\r\n    assert fill_spaces('abcdefghijklmnopqrstuvwxyz   ') == 'abcdefghijklmnopqrstuvwxyz:',\r\n        \"Example 7\"\r\n    assert fill_spaces('abcdefghijklmnopqrstuvwxyz   ,,,,,,,') == 'abcdefghijklmnopqrstuvwxyz:::::::::',\r\n        \"Example 8\"\r\n    assert fill_spaces('abcdefghijklmnopqrstuvwxyz   ,,,,,,,.') == 'abcdefghijklmnopqrstuvwxyz::::::::::',\r\n        \"Example 9\"\r\n    assert fill_spaces('abcdefghijklmnopqrstuvwxyz   ,,,,,,,. ') == 'abcdefghijklmnopqrstuvwxyz:::::::::::',\r\n        \"Example ","votes":null},{"text":"\r\n    pattern = re.compile(r'[ .,]+')\r\n    return pattern.sub(':', text)\r\n    \r\n    \r","votes":null},{"text":"\r\n    pattern = re.compile(r\"[\\s.,]\")\r\n    return pattern.sub(\":\", text)\r\n\r\n\r\nif __name__ == '__main__':\r\n    text = input()\r\n    result = fill_spaces(text)\r\n    print(result)\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    regex = re.compile(r'[\\s.,]')\r\n    return regex.sub(':', text)\r\nprint fill_spaces('Hi, my name is John Smith')\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[,. ]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    text = re.sub(\"[., ]\", \":\", text)\r\n\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r\"([.,])\", r\":\", text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[ .,]+', ':', text)\r\n\r","votes":null},{"text":"\r\n    return text.replace(r'[., ]',':')\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[ ,.]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    import re\r\n    \r\n   ","votes":null},{"text":"\r\n    text = re.sub(r'[., ]', ':', text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n\r\n    pattern = r\"[ .,]+\"\r\n    return re.sub(pattern, \":\", text)\r\n\r\n\r\nprint(fill_spaces(\"I am. happy,to.see you.\"))\r\n\r\n\r","votes":null},{"text":"\r\n    regex = re.compile(\"[.,]\")\r\n    return regex.sub(\":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    new_text = re.sub(r\"[,. ]\", \":\", text)\r\n    print(new_text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub('[., ]', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub('[\\s\\.\\,\\:]+', ':', text)\r\n\r","votes":null},{"text":"\r\n    \r\n    text = re.sub('[,. ]', ':', text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return re.sub('[ \\.,]', ':', text)\r\n\r\nprint(fill_spaces('I am a good boy, who is a good boy?'))\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r\"[ ,.]\", \":\", text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r'[\\s,\\.]', ':', text)\r\n    return text\r\n\r\nif __name__ == '__main__':\r\n    text = input()\r\n\r\n    result = fill_spaces(text)\r\n\r\n    print(result","votes":null},{"text":"\r\n\r\n    text = re.sub('[ .,]+', ':', text)\r\n\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub('[., ]', ':', text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r\"[,.\\s]+\", \":\", text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    regex = r'[\\s.,]'\r\n    replace = ':'\r\n    return re.sub(regex, replace, text)\r\n\r\n\r","votes":null},{"text":"\r\n    return str(re.sub(r\"[\\s,.]\", \":\", text))\r\n\r\n    \r","votes":null},{"text":"\r\n    return re.sub(\"[ ,.]\", \":\", text)\r\n\r\n# 11.10\r","votes":null},{"text":"\r\n    regex = re.compile(r'[ ,.]')\r\n    regex.sub(':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(\"[ ,.]\", \":\", text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    spaces = re.sub(r'[ ,.]',':',text)\r\n    # print(spaces)\r\n    return spaces\r\n\r\n# example:\r\nfill_spaces('this is a string...')\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r'[ ,.]', ':', text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    return re.sub(r'[ .,]+', ':', text)\r\n\r\n\r","votes":null},{"text":"\r\n    text = re.sub(r'[\\s,.]', ':', text)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    # text = text.replace(' ', ':')\r\n    # text = text.replace(',', ':')\r\n    # text = text.replace('.', ':')\r\n    text = re.sub('[^A-Za-z0-9 ]+', '', text)\r\n    text = text.replace(' ', ':')\r\n    text = text.replace(',', ':')\r\n    text = text.replace('.', ':')\r\n    return text\r\n\r","votes":null},{"text":"\r\n    regex = re.compile(r\"[ ,.]\")\r\n    return regex.sub(\":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    return re.sub('[ ,.]',':',text)\r\n\r\n# -------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    pattern = r'[\\s,.]'\r\n    result = re.sub(pattern,':',text)\r\n    return result\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nQuestion 2:\r\n\r\nWrite a function to remove all occurrences of the character \"x\" from the given string by using regex.\r\n\r\nThe function takes a string as a parameter and returns a string.\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    text = re.sub(\"[ .,]+\", \":\", text)\r\n    return text\r\n\r","votes":null},{"text":"\r\n    text = text.replace(\" \", \" : \")\r\n    text = text.replace(\",\", \": \")\r\n    text = text.replace(\".\", \": \")\r\n    return text\r\n\r\n\r\nprint(fill_spaces(\"A quick brown fox, jumped over the lazy dog.\"))\r\nprint(fill_spaces(\"A, quick, brown, fox, jumped, over, the, lazy, dog.\"))\r\nprint(fill_spaces(\"A. quick. brown. fox. jumped. over. the. lazy. dog.\"))\r\nprint(fill_spaces(\"A quick brown fox jumped over the lazy dog.\"))\r\n\r\n# Regex\r\n# (?i) - this is for ignoring case\r\n# \\w - this is for any word character\r\n# \\W - this is for any non-word character\r\n# \\s - this is for whitespace\r\n# \\S - this is for non-whitespace\r\n# \\d - this is for a digit\r\n# \\D - this is for a non-digit\r\n# \\n - this is for a newline character\r\n# \\t - this is for a tab character\r\n# \\r - this is for a carriage return character\r\n# \\f - this is for a form feed character\r\n# \\v - this is for a vertical tab character\r\n# \\b - this is for a word boundary\r\n# \\B - this is for a non-word boundary\r\n# \\A - this is for the beginning of the string\r\n# \\Z - this is for the end of the string\r\n# \\G - this is for the end of the previous match\r\n# \\z - this is for the end of the string\r\n# \\W - this is for a non-word character\r\n# \\w - this is for a word character\r\n# \\b - this is for a word boundary\r\n# \\B - this is for a non-word boundary\r\n# \\d - this is for a digit\r\n# \\D - this is for a non-digit\r\n# \\s - this is fo","votes":null},{"text":"\r\n    # your code goes here\r\n    return re.sub(r\"(\\s|,|.)\", \":\", text)\r\n\r\n\r","votes":null},{"text":"\r\n    # replace all spaces, commas, and dots\r\n    return text.replace(\" \",\"\").replace(\",\",\":\").replace(\".\",\":\")\r\n\r\n\r","votes":null},{"text":"\r\n    import re\r\n    return re.sub(r\"(\\s","votes":null},{"text":"\r\n    # your code goes here\r\n    return re.sub(\"[ .,]+\", \":\", text)\r\n\r","votes":null}],"time":{"count":39.0,"avg":102937.6845128205,"std":21317.6594446963,"cov":0.2070928596}}
{"id":543,"question":"def count_digits(num1,num2):\r\n    \"\"\"Write a function to add two numbers and print number of digits of sum.\"\"\"","answers":[{"text":"\r\n    total = num1 + num2\r\n    print(total)\r\n    length = len(str(total))\r\n    print(length)\r\n    return length\r\n\r","votes":67025.448},{"text":"\r\n    total = num1 + num2\r\n    count = 0\r\n    while total:\r\n        total = total\/\/10\r\n        count = count + 1\r\n    return count\r\n\r\n\r","votes":83698.708},{"text":"\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum >= 1:\r\n        sum = sum \/\/ 10\r\n        count += 1\r\n    return count\r\n\r\n\r","votes":106691.624},{"text":"\r\n    s=num1+num2\r\n    l=[]\r\n    while s>0:\r\n        l.append(s%10)\r\n        s=s\/\/10\r\n    return len(l)\r\n\r","votes":126813.176},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        sum = sum\/\/10\r\n        count += 1\r\n    return count\r\n\r\n\r\n#count_digits(1234,2345)\r\n\r\n\r\n\r","votes":139874.216},{"text":"\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    sum = num1+num2\r\n    count = 0\r\n    while sum>0:\r\n        sum = sum\/\/10\r\n        count += 1\r\n    print(\"Number of digits of sum is:\",count)\r\n\r\n","votes":null},{"text":"\r\n    sum=num1+num2\r\n    if sum<10:\r\n        print('Sum has 1 digit')\r\n    elif sum<100:\r\n        print('Sum has 2 digits')\r\n    elif sum<1000:\r\n        print('Sum has 3 digits')\r\n    elif sum<10000:\r\n        print('Sum has 4 digits')\r\n    elif sum<100000:\r\n        print('Sum has 5 digits')\r\n    else:\r\n        print('Sum has 6+ digits')\r\n\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    while sum>0:\r\n        sum=sum\/\/10\r\n        count+=1\r\n    print(\"Number of digits in sum is\",count)\r\n\r","votes":null},{"text":"\r\n    num3=num1+num2\r\n    count=0\r\n    while num3>0:\r\n        num3=num3\/\/10\r\n        count+=1\r\n    return count\r\n\r\nnum1=int(input())\r\nnum2=int(input())\r\nprint(count_digits(num1,num2))\r\n\r\n\r","votes":null},{"text":"\r\n    a = num1\r\n    b = num2\r\n    c = a + b\r\n    count = 0\r\n    while c != 0:\r\n        c = c\/\/10\r\n        count += 1\r\n    print(count)\r\n\r\ncount_digits(2,3)\r\ncount_digits(10,5)\r\ncount_digits(3,10)\r\ncount_digits(10,10)\r\ncount_digits(100,100)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    sum = num1+num2\r\n    sum = str(sum)\r\n    count = 0\r\n    for i in sum:\r\n        count += 1\r\n    print(count)\r\n    return num1,num2,sum\r\n\r\n\r\ncount_digits(10,20)\r\n\r\n\r","votes":null},{"text":"\r\n    sum_digits=num1+num2\r\n    #print(sum_digits)\r\n    count=0\r\n    while(sum_digits!=0):\r\n        count=count+1\r\n        sum_digits=sum_digits\/\/10\r\n    print(count)\r\n\r\na=int(input())\r\nb=int(input())\r\ncount_digits(a,b)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum>0:\r\n        sum = sum\/\/10\r\n        count += 1\r\n    print (\"The number of digits of {} + {} = {}\".format(num1, num2, count))\r\n\r\ncount_digits(1234, 5678)\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    while num1>0:\r\n        num1 = num1\/\/10\r\n        count+=1\r\n\r\n    while num2>0:\r\n        num2 = num2\/\/10\r\n        count +=1\r\n\r\n    return count\r\n\r\nprint(count_digits(234,24))\r\n\r\n# 2. Write a Python program to find the length of the longest common prefix of two strings.\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    while sum!=0:\r\n        count+=1\r\n        sum\/\/=10\r\n    print (count)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    digit_count = 0\r\n    while sum > 0:\r\n        digit_count += 1\r\n        sum = sum \/\/ 10\r\n    print('Number of digits in sum:',digit_count)\r\n    \r\nnum1 = int(input('Enter a number: '))\r\nnum2 = int(input('Enter a number: '))\r\ncount_digits(num1,num2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### OUTPUT ###\r\n\r\n# Enter a number: 1234\r\n# Enter a number: 5678\r\n# Number of digits in sum: 4\r\n\r\n\r\n### RESOURCES ###\r\n\r\n# https:\/\/www.programiz.com\/python-programming\/methods\/built-in\/sum\r\n# https:\/\/www.programiz.com\/python-programming\/methods\/built-in\/int\r\n# https:\/\/www.tutorialspoint.com\/python\/python_while_loop.htm\r\n# https:\/\/www.w3schools.com\/python\/ref_func_range.asp\r\n# https:\/\/www.w3schools.com\/python\/ref_func_len.asp\r\n# https:\/\/www.geeksforgeeks.org\/python-len-function\/\r\n# https:\/\/www.tutorialspoint.com\/python\/python_functions.htm\r\n# https:\/\/www.w3schools.com\/python\/ref_func_sum.asp\r\n# https:\/\/www.tutorialspoint.com\/python\/python_functions.htm\r\n# https:\/\/www.programiz.com\/python-programming\/methods\/built-in\/int\r\n# https:\/\/www.programiz.com\/python-programming\/methods\/built-in\/sum\r\n# https:\/\/www.tutorialspoint.com\/python\/python_while_loop.htm\r\n# https:\/\/www.w3schools.com\/python\/ref_func_range.asp\r\n# https:\/\/www.w3school","votes":null},{"text":"\r\n    num_of_digits = 0\r\n    digit_sum = 0\r\n    for num in range(num1,num2):\r\n        num_of_digits += 1\r\n        digit_sum += num\r\n    print(f\"There are {num_of_digits} digits in the number {digit_sum}\")\r\n    \r\n\r","votes":null},{"text":"\r\n    #addition\r\n    sum=num1+num2\r\n    #counting\r\n    count=0\r\n    while sum>0:\r\n        sum=sum\/\/10\r\n        count+=1\r\n    #printing\r\n    print(\"Number of digits in sum is\",count)\r\n\r\n#calling function\r\ncount_digits(12,13)\r\n\r\n#output\r\n\"\"\"\r\nNumber of digits in sum is 3\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    sum = num1+num2\r\n    count = 0\r\n    for i in str(sum):\r\n        count += 1\r\n    print(f\"The sum of {num1} and {num2} is {sum}. The number of digits in the sum is {count}.\")\r\n\r\ncount_digits(34,56)\r\ncount_digits(123,21)\r\ncount_digits(12,34)\r\n\r\n\r","votes":null},{"text":"\r\n    result = num1 + num2\r\n    digits = 0\r\n    while result > 0:\r\n        result = result \/\/ 10\r\n        digits += 1\r\n    print(f\"Number of digits in the sum is {digits}\")\r\n\r\n# Driver Code\r\ncount_digits(123456,987654321)\r\n\r\n# Output\r\n# Number of digits in the sum is 11\r\n\r\n\r\n# Write a function to find the nth fibonacci number and print the number of digits in it.\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    while(sum>0):\r\n        sum=sum\/\/10\r\n        count=count+1\r\n    print('Number of digits in sum is',count)\r\n\r\ncount_digits(123,456)\r\ncount_digits(99,10)\r\ncount_digits(1000,11)\r\ncount_digits(10000,2000)\r\ncount_digits(100000,1000)\r\ncount_digits(2456789,3456789)\r\ncount_digits(2456789,456789)\r\ncount_digits(1000000000,2000000000)\r\ncount_digits(1000000000,1000000000)\r\ncount_digits(1000000000,20000000000)\r\ncount_digits(100000000000,20000000000)\r\ncount_digits(1000000000000,200000000000)\r\ncount_digits(1000000000000,100000000000)\r\ncount_digits(1000000000000,20","votes":null},{"text":"\r\n    if num1 > num2:\r\n        num1,num2 = num2,num1\r\n    count = 0\r\n    for i in range(num1,num2+1):\r\n        count += len(str(i))\r\n    return count\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    while(sum>0):\r\n        count+=1\r\n        sum=sum\/\/10\r\n    print(\"Number of digits in sum is\",count)\r\n\r\nif __name__=='__","votes":null},{"text":"\r\n    num1 = int(input(\"Enter a number: \"))\r\n    num2 = int(input(\"Enter a number: \"))\r\n    return sum1 = num1 + num2\r\n    if sum1 == 0:\r\n        print(\"That is 1 digit\")\r\n    else:\r\n        for i in str(sum1):\r\n            print(i)\r\n            count += 1\r\n        print(\"That is\", count, \"digits\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#num1 = int(input(\"Enter a number: \"))\r\n#num2 = int(input(\"Enter a number: \"))\r\n#sum1 = num1 + num2\r\n#count = 0\r\n#if sum1 == 0:\r\n#    print(\"That is 1 digit\")\r\n#else:\r\n#    for i in str(sum1):\r\n#        print(i)\r\n#        count += 1\r\n#    print(\"That is\", count, \"digits\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    print(\"Digits of sum of \",num1,\" and \",num2,\" are:\",len(str(num1+num2)))\r\n\r\n\r\ncount_digits(1234,5678)\r\n\r\n\r","votes":null},{"text":"\r\n    l = []\r\n    for i in range(num1, num2 + 1):\r\n        l.append(i)\r\n    sum = 0\r\n    for i in l:\r\n        sum += i\r\n    count = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        count += 1\r\n    print(count)\r\n\r\n\r","votes":null},{"text":"\r\n    num3 = num1 + num2\r\n    count = 0\r\n    while num3 > 0:\r\n        num3 = num3\/\/10\r\n        count += 1\r\n    print(\"Number of digits in sum are:\",count)\r\n\r\n\r\nnum1 = int(input(\"Enter the first number:\"))\r\nnum2 = int(input(\"Enter the second number:\"))\r\ncount_digits(num1,num2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    while sum>0:\r\n        sum=int(sum\/10)\r\n        count=count+1\r\n    print(\"Number of digits of sum is: \",count)\r\n\r","votes":null},{"text":"\r\n    \r\n    \r\n    \r\n    ans=num1+num2\r\n    count=0\r\n    while num1>0:\r\n        count+=1\r\n        num1=num1\/\/10\r\n    while num2>0:\r\n        count+=1\r\n        num2=num2\/\/10\r\n    \r\n    print(count)\r\n    \r\ncount_digits(15,20)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    print(\"Number of digits of sum is : \",len(str(num1+num2)))\r\n\r\ncount_digits(10,20)\r\ncount_digits(100,200)\r\ncount_digits(210,20)\r\ncount_digits(210,1010)\r\n# Test.assert_equals(count_digits(10,20),\"Number of digits of sum is : 2\")\r\n# Test.assert_equals(count_digits(100,200),\"Number of digits of sum is : 3\")\r\n# Test.assert_equals(count_digits(210,20),\"Number of digits of sum is : 4\")\r\n# Test.assert_equals(count_digits(210,1010),\"Number of digits of sum is : 6\")\r\n\r","votes":null},{"text":"\r\n    total=num1+num2\r\n    count=0\r\n    while total>0:\r\n        count+=1\r\n        total\/\/=10\r\n    print(count)\r\ncount_digits(23,45)\r\ncount_digits(56,78)\r\ncount_digits(10,12)\r\n\r","votes":null},{"text":"\r\n    num1=str(num1)\r\n    num2=str(num2)\r\n    num3=num1+num2\r\n    num3=str(num3)\r\n    count=0\r\n    for i in num3:\r\n        count=count+1\r\n    print(count)\r\n\r\ncount_digits(","votes":null},{"text":"\r\n    num1=int(input(\"Enter first number: \"))\r\n    num2=int(input(\"Enter second number: \"))\r\n    sum=num1+num2\r\n    print(sum)\r\n    n=len(str(sum))\r\n    print(\"The number of digits of sum:\",n)\r\ncount_digits()\r\n\r\n\r","votes":null},{"text":"\r\n    num3=num1+num2\r\n    count=0\r\n    while num3>0:\r\n        num3=num3\/\/10\r\n        count=count+1\r\n    print(\"Number of digits in the sum is\",count)\r\n\r\ncount_digits(23,34)\r\n\r\n# Write a function to add two numbers and return sum.\r","votes":null},{"text":"\r\n    num_sum=num1+num2\r\n    print(\"Sum is:\",num_sum)\r\n    count=0\r\n    while num_sum!=0:\r\n        num_sum=num_sum\/\/10\r\n        count+=1\r\n    print(\"Number of digits in sum:\",count)\r\n\r\nnum1=int(input(\"Enter first number: \"))\r\nnum2=int(input(\"Enter second number: \"))\r\ncount_digits(num1,num2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    sum = num1+num2\r\n    count=0\r\n    while(sum>0):\r\n        count +=1\r\n        sum \/\/=10\r\n    print(count)\r\n\r\n\r\ncount_digits(123,456)\r\n\r\n\r\n# Q-2. Write a function to calculate the sum of digits of a number. \r\n# Ex: 123456\r\n# Ans: 21\r\n\r","votes":null},{"text":"\r\n    total=num1+num2\r\n    total_digits=len(str(total))\r\n    print(total_digits)\r\ncount_digits(10,10)\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = num1 + num2\r\n    count = 0\r\n\r\n    while(sum!=0):\r\n        sum\/\/=10\r\n        count+=1\r\n    \r\n    print(\"Number of Digits:\",count)\r\n\r\n\r","votes":null},{"text":"\r\n    total = num1 + num2\r\n    print(\"Number of digits of sum:\",len(str(total)))\r\n    \r\nnumber1 = int(input(\"Enter the first number: \"))\r\nnumber2 = int(input(\"Enter the second number: \"))\r\n\r\ncount_digits(number1,number2)","votes":null},{"text":"\r\n    sum1=num1+num2\r\n    digits=0\r\n    while sum1!=0:\r\n        sum1\/\/=10\r\n        digits+=1\r\n    print(digits)\r\n\r","votes":null},{"text":"\r\n    num1=str(num1)\r\n    num2=str(num2)\r\n    res=num1+num2\r\n    res=int(res)\r\n    if res<10:\r\n        return 1\r\n    elif res<100:\r\n        return 2\r\n    elif res<1000:\r\n        return 3\r\n    elif res<10000:\r\n        return 4\r\n    elif res<100000:\r\n        return 5\r\n    elif res<1000000:\r\n        return 6\r\n    elif res<10000000:\r\n        return 7\r\n    elif res<100000000:\r\n        return 8\r\n    elif res<1000000000:\r\n        return 9\r\n    else:\r\n        return 10\r\n\r\n#num1=int(input(\"Enter a number: \"))\r\n#num2=int(input(\"Enter another number: \"))\r\n#print(count_digits(num1,num2))\r\n\r","votes":null},{"text":"\r\n    count1=0\r\n    count2=0\r\n    count3=0\r\n    a=str(num1)\r\n    b=str(num2)\r\n    while a!='':\r\n        count1+=1\r\n        a=a[0:-1]\r\n    while b!='':\r\n        count2+=1\r\n        b=b[0:-1]\r\n    sum=num1+num2\r\n    while str(sum)!='':\r\n        count3+=1\r\n        sum=sum[0:-1]\r\n    print(\"Number of digits in num1:\",count1)\r\n    print(\"Number of digits in num2:\",count2)\r\n    print(\"Number of digits in sum:\",count3)\r\n    \r\n    \r\ncount_digits(1234,5678)\r\ncount_digits(0,1)\r\ncount_digits(0,0)\r\ncount_digits(0,100)\r\ncount_digits(100,0)\r\ncount_digits(100,100)\r\ncount_digits(100000,100000)\r\ncount_digits(100000,100)\r\ncount_digits(100000,1000000)\r\ncount_digits(100000,100000000000)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sum = num1+num2\r\n    digits = 0\r\n    while(sum>0):\r\n        sum = sum\/10\r\n        digits = digits+1\r\n    print(\"Number of digits: \",digits)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    num1=int(num1)\r\n    num2=int(num2)\r\n    sum=num1+num2\r\n   ","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        count += 1\r\n        sum \/\/= 10\r\n    print(f\"The sum of {num1} and {num2} has {count} digits.\")\r\n    return None\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    num1 = int(input(\"Enter the first number: \"))\r\n    num2 = int(input(\"Enter the second number: \"))\r\n    count_digits(num1,num2)\r\n\r\n\"\"\"\r\nTime Complexity: O(log n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\nEnter the first number: 1234\r\nEnter the second number: 5678\r\nThe sum of 1234 and 5678 has 8 digits.\r\n\r\nSAMPLE 2\r\nEnter the first number: 1234\r\nEnter the second number: 123\r\nThe sum of 1234 and 123 has 6 digits.\r\n\r\nSAMPLE 3\r\nEnter the first number: 123\r\nEnter the second number: 1234\r\nThe sum of 123 and 1234 has 6 digits.\r\n\r\nSAMPLE 4\r\nEnter the first number: 123\r\nEnter the second number: 1\r\nThe sum of 123 and 1 has 4 digits.\r\n\r\nSAMPLE 5\r\nEnter the first number: 1\r\nEnter the second number: 123\r\nThe sum of 1 and 123 has 4 digits.\r\n\r\nSAMPLE 6\r\nEnter the first number: 123456789123456789123456789\r\nEnter the second number: -12345","votes":null},{"text":"\r\n    total = num1 + num2\r\n    digits = 0\r\n    while total > 0:\r\n        total = total \/\/ 10\r\n        digits += 1\r\n    print(digits)\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    num1, num2 = map(int, input().split())\r\n    count_digits(num1, num2)\r\n    \r\n\r\n\r\n#Reference: w3resource","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum:\r\n        sum \/\/= 10\r\n        count += 1\r\n    print(\"The number of digits in sum is: \",count)\r\n\r\ncount_digits(6789,9876)\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    for i in str(sum):\r\n        count+=1\r\n    print(f\"Number of digits in sum is {count}\")\r\n\r\n\r\n# Driver code\r\nnumber1=int(input(\"Enter first number: \"))\r\nnumber2=int(input(\"Enter second number: \"))\r\ncount_digits(number1,number2)\r\n\r\n\r\n\r\n# OUTPUT:\r\n# Enter first number: 12\r\n# Enter second number: 34\r\n# Number of digits in sum is 3\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# Sample Input:\r\n# Enter first number: 12","votes":null},{"text":"\r\n    \r\n    n1 = str(num1)\r\n    n2 = str(num2)\r\n    \r\n    # print(n1)\r\n    # print(n2)\r\n    \r\n    sum_of_digits = int(n1) + int(n2)\r\n    # print(sum_of_digits)\r\n    \r\n    digits =[int(i) for i in str(sum_of_digits)]\r\n    # print(digits)\r\n    \r\n    # print(sum(digits))\r\n    \r\n    return sum(digits)\r\n    \r\n# count_digits(123,456)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    n1=0\r\n    n2=0\r\n    while num1>0:\r\n        num1=num1\/\/10\r\n        n1+=1\r\n    while num2>0:\r\n        num2=num2\/\/10\r\n        n2+=1\r\n    sum=n1+n2\r\n    while sum>0:\r\n        sum=sum\/\/10\r\n        n1+=1\r\n    print(n1)\r\n\r\n\r\n\r\n\r\ncount_digits(123,456)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    num1 = str(num1)\r\n    num2 = str(num2)\r\n    sum = int(num1)+int(num2)\r\n    digits = 0\r\n    while sum>0:\r\n        sum \/\/= 10\r\n        digits += 1\r\n    print(digits)\r\n\r\ncount_digits(100,200)\r\ncount_digits(111,222)\r\n","votes":null},{"text":"\r\n    #your code here\r\n    num1 = str(num1)\r\n    num2 = str(num2)\r\n    \r\n    if len(num1) > len(num2):\r\n        num1,num2 = num2,num1\r\n    \r\n    result = []\r\n    \r\n    while len(num1) != 0:\r\n        result.append(int(num1[-1]) + int(num2[-1]))\r\n        num1 = num1[:-1]\r\n        num2 = num2[:-1]\r\n    \r\n    if result[0] > 9:\r\n        result[0] = result[0] % 10\r\n        result.append(result[0])\r\n    \r\n    return len(result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    num1, num2 = map(int, input().split())\r\n    result = count_digits(num1,num2)\r\n    print(result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#answer\r","votes":null},{"text":"\r\n    #Get sum\r\n    sum=num1+num2\r\n    #split sum to list\r\n    #split_sum=list(sum)\r\n    #get length of split_sum\r\n    split_sum=str(sum)\r\n    length=len(split_sum)\r\n    return length\r\n    \r\n#Driver Code\r\nnum1=int(input())\r\nnum2=int(input())\r\nprint(count_digits(num1,num2))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    n = num1 + num2\r\n    n = str(n)\r\n    count = 0\r\n    for i in n:\r\n        count += 1\r\n    print(count)\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum != 0:\r\n        sum = sum \/\/ 10\r\n        count = count + 1\r\n    print(\"Number of digits in sum is: \", count)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    a=str(num1)\r\n    b=str(num2)\r\n    sum=a+b\r\n    count=len(sum)\r\n    print(count)\r\n\r\ncount_digits(123,456)\r\ncount_digits(765,849)\r\ncount_digits(345,643)\r\ncount_digits(987,987)\r\ncount_digits(123,654)\r\ncount_digits(987,898)\r\ncount_digits(123,543)\r\ncount_digits(789,432)\r\ncount_digits(987,999)\r\ncount_digits(123,456)\r\ncount_digits(765,849)\r\ncount_digits(345,643)\r\ncount_digits(987,987)\r\ncount_digits(123,654)\r\ncount_digits(987,898)\r\ncount_digits(123,543)\r\ncount_digits(789,432)\r\ncount_digits(987,999)\r\ncount_digits(123,456)\r\ncount_digits(765,849)\r\ncount_digits(345,643)\r\ncount_digits(987,987)\r\ncount_digits(123,654)\r\ncount_digits(987,898)\r\ncount_digits(123,543)\r\ncount_digits(789,432)\r\ncount_digits(987,999)\r\ncount_digits(123,456)\r\ncount_digits(765,849)\r\ncount_digits(345,643)\r\ncount_digits(987,987)\r\ncoun","votes":null},{"text":"\r\n    num3 = num1 + num2\r\n    count = 0\r\n    while num3:\r\n        num3 = num3 \/\/ 10\r\n        count += 1\r\n    return count\r\n\r\nprint(count_digits(5,12))\r\nprint(count_digits(10,10))\r\nprint(count_digits(10,1))\r\nprint(count_digits(10,100))\r\nprint(count_digits(10,1000))\r\nprint(count_digits(-1,1000))\r\nprint(count_digits(10,-1000))\r\nprint(count_digits(10,100000))\r\nprint(count_digits(10,10000000000000000000000000000))\r\nprint(count_digits(10,10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n\r\n    count1 = 0\r\n    count2 = 0\r\n    total = 0\r\n    while num1>0:\r\n        num1=num1\/\/10\r\n        count1+=1\r\n\r\n    while num2>0:\r\n        num2=num2\/\/10\r\n        count2+=1\r\n\r\n    while count1>0 or count2>0:\r\n        total = total + (num1%10)*(num2%10)\r\n        num1 = num1\/\/10\r\n        num2 = num2\/\/10\r\n        count1-=1\r\n        count2-=1\r\n\r\n    count = 0\r\n    while total>0:\r\n        total = total\/\/10\r\n        count+=1\r\n\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    num1 = int(input())\r\n\r\n    num2 = int(input())\r\n\r\n    result = count_digits(num1, num2)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n### Output:\r\n\r\n# 13\r\n# 28\r\n# 4\r\n\r\n\r\n### Explanation:\r\n\r\n# The sum of 13 and 28 is 41. So, the number of digits in the sum is 2.\r\n\r\n### Sample Test Case 2:\r\n\r\n# 20\r\n# 20\r\n# 1\r\n\r\n### Explanation:\r\n\r\n# The sum of 20 and 20 is 40. So, the number of digits in the sum is 2.\r\n\r\n### Sample Test Case 3:\r\n\r\n# 999\r\n# 99\r","votes":null},{"text":"\r\n    sum_ = num1+num2\r\n    print('Number of digits in sum:',len(str(sum_)))\r\n\r","votes":null},{"text":"\r\n    count=0\r\n    result=num1+num2\r\n    while result!=0:\r\n        result=result\/\/10\r\n        count+=1\r\n    print(count)\r\n\r\ncount_digits(123,456)\r","votes":null},{"text":"\r\n    num1=str(num1)\r\n    num2=str(num2)\r\n    num3=num1+num2\r\n    length=len(num3)\r\n    print(length)\r\n    return num1,num2,num3\r\n\r","votes":null},{"text":"\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        sum = sum\/\/10\r\n        count += 1\r\n    print('Number of digits in sum is',count)\r\n\r\n\r\nnum1 = input(\"Enter the first number: \")\r\nnum2 = input(\"Enter the second number: \")\r\ncount_digits(num1,num2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        count += 1\r\n        sum = sum\/\/10\r\n    print(f'The sum has {count} digits.')\r\ncount_digits(23,45)\r\ncount_digits(123,456)\r\ncount_digits(34,78)\r\ncount_digits(987,123)\r\ncount_digits(9876,1234)\r\ncount_digits(12345,98765)\r\ncount_digits(1000000,100000)\r\ncount_digits(1000000000,100000000)\r\ncount_digits(100000000000000000000000000,100000000000000000000000000)","votes":null},{"text":"\r\n    \r\n    # Your code here\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum>0:\r\n        sum \/\/= 10\r\n        count += 1\r\n    print(count)\r\n    \r\n    \r\n    \r\n# Driver Code\r\ncount_digits(234,67)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    num3 = num1 + num2\r\n    count = 0\r\n    while num3>0:\r\n        count += 1\r\n        num3 = num3\/\/10\r\n    print(\"Number of digits of sum: \",count)\r\n\r\nnum1 = int(input(\"Enter the first number: \"))\r\nnum2 = int(input(\"Enter the second number: \"))\r\n","votes":null},{"text":"\r\n    count = 0\r\n    temp = num1 + num2\r\n    while temp > 0:\r\n        temp \/\/= 10\r\n        count += 1\r\n    print(f\"Number of digits in sum is {count}\")\r\n\r\nnum1 = 12345\r\nnum2 = 67890\r\ncount_digits(num1,num2)\r\n\r\n#count_digits(5,7)\r\n#count_digits(50,70)\r\n#count_digits(500,700)\r\n#count_digits(5000,7000)\r\n#count_digits(50000,70000)\r\n#count_digits(500000,700000)\r\n#count_digits(5000000,7000000)\r\n#count_digits(50000000,70000000)\r\n#count_digits(500000000,700000000)\r\n#count_digits(5000000000,7000000000)\r\n#count_digits(50000000000,70000000000)\r\n\r\n#count_digits(100000000000,200000000000)\r\n#count_digits(1000000000000,2000000000000)\r\n#count_digits(10000000000000,20000000000000)\r\n#count_digits(100000000000000,200000000000000)\r\n#count_di","votes":null},{"text":"\r\n    total = (num1 + num2)\r\n    num_digits = 0\r\n    while total:\r\n        total \/\/= 10\r\n        num_digits += 1\r\n    print(num_digits)\r\n\r\ncount_digits(12,34)\r\n\r","votes":null},{"text":"\r\n    sum1 = num1 + num2\r\n    count = 0\r\n    while(sum1):\r\n        count += 1\r\n        sum1 \/\/= 10\r\n    print(\"Number of digits = \",count)\r\n\r\ncount_digits(56,42)\r\ncount_digits(12345,6789)\r\n\r\n\r\n#Write a function to find the largest among three numbers.\r","votes":null},{"text":"\r\n    num3 = num1 + num2\r\n    count_digit = 0\r\n    while num3 > 0:\r\n        count_digit += 1\r\n        num3 = num3\/\/10\r\n    print(count_digit)\r\n\r\n\r\nnum1 = int(input())\r\nnum2 = int(input())\r\ncount_digits(num1,num2)\r\n\r\n\r\n#Task 2\r","votes":null},{"text":"\r\n    \r\n    if num1 > num2:\r\n        max_num = num1\r\n    else:\r\n        max_num = num2\r\n\r\n    sum = num1 + num2\r\n\r\n    digit = 0\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        digit += 1\r\n    print(\"Number of digits in the sum is\",digit)\r\n\r\ncount_digits(15,30)\r\ncount_digits(987,123)\r\ncount_digits(255,31)\r\n\r\n# Write a function to check if a number is even or odd.\r\n\r","votes":null},{"text":"\r\n    num=num1+num2\r\n    count=0\r\n    while(num>0):\r\n        count+=1\r\n        num=num\/\/10\r\n    print(\"Number of digits in sum is :\",count)\r\n\r\nif __name__ == '__main__':\r\n    num1=int(input(\"Enter the first number : \"))\r\n    num2=int(input(\"Enter the second number : \"))\r\n    count_dig","votes":null},{"text":"\r\n    sum_num = num1 + num2\r\n    digit_sum = 0\r\n    while sum_num > 0:\r\n        digit_sum += 1\r\n        sum_num = sum_num \/\/ 10\r\n    print(\"Number of digits in sum is: \",digit_sum)\r\n\r\ncount_digits(234,56)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    num=num1+num2\r\n    digit_count=0\r\n    while num>0:\r\n        digit_count=digit_count+1\r\n        num=num\/\/10\r\n    print(\"Number of digits in sum is \",digit_count)\r\n\r\ncount_digits(123,345)\r\n\r\n\r","votes":null},{"text":"\r\n    tot = num1+num2\r\n    print(\"number of digits in the sum:\",len(str(tot)))\r\n\r\n\r\nnum1 = int(input(\"Enter the first number: \"))\r\nnum2 = int(input(\"Enter the second number: \"))\r\n\r\ncount_digits(num1,num2)\r\n\r\n\r\n\r\n\r\n\r\n#","votes":null},{"text":"\r\n    total = num1 + num2\r\n    len_sum = len(str(total))\r\n    print(len_sum)\r\n\r","votes":null},{"text":"\r\n    result = num1 + num","votes":null},{"text":"\r\n    total_digits = 0\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    total_digits = len(str(num1+num2))\r\n    print(total_digits)\r\n\r\n\r\nif __name__ == '__main__':\r\n    num1 = input(\"Enter First Number: \")\r\n    num2 = input(\"Enter Second Number: \")\r\n    count_digits(num1,num2)\r\n\r\n\r\n# Sample Input 1:\r\n\r\n# 12345\r\n# 12\r\n\r\n# Sample Output 1:\r\n\r\n# 6\r\n\r\n# Sample Input 2:\r\n\r\n# 12345\r\n# 123\r\n\r\n# Sample Output 2:\r\n\r\n# 6\r\n\r\n# Sample Input 3:\r\n\r\n# 1\r\n# 1\r\n\r\n# Sample Output 3:\r\n\r\n# 2\r\n\r\n# Sample Input 4:\r\n\r\n# 123\r\n# 123\r\n\r\n# Sample Output 4:\r\n\r\n# 6\r\n\r\n# Sample Input 5:\r\n\r\n# 12345\r\n# 12345\r\n\r\n# Sample Output 5:\r\n\r\n# 10\r\n\r\n# Sample Input 6:\r\n\r\n# 12345\r\n# 1234\r\n\r\n# Sample Output 6:\r\n\r\n# 8\r\n\r\n# Sample Input 7:\r\n\r\n# 12345\r\n# 123\r\n\r\n# Sample Output 7:\r\n\r\n# 6\r\n\r\n# Sample Input 8:\r\n\r\n# 123\r\n# 12345\r\n\r\n# Sample Output 8:\r\n\r\n# 6\r\n\r\n# Sample Input 9","votes":null},{"text":"\r\n    num11=int(num1)\r\n    num22=int(num2)\r\n    total=num11+num22\r\n    digits=len(str(total))\r\n    print(digits)\r\n    \r\ncount_digits(123,456)\r\n","votes":null},{"text":"\r\n    # add two numbers\r\n    total = num1 + num2\r\n    # count number of digits\r\n    count = 0\r\n    while total > 0:\r\n        total \/\/= 10\r\n        count += 1\r\n    print(\"Number of digits in sum: \" + str(count))\r\n\r\n# Call the function\r\ncount_digits(12345, 67890)\r\n\r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        sum = sum\/\/10\r\n        count += 1\r\n    print(count)\r\n\r\nnum1 = int(input(\"Enter first number: \"))\r\nnum2 = int(","votes":null},{"text":"\r\n    count=0\r\n    sum=num1+num2\r\n    while sum>0:\r\n        sum=sum\/\/10\r\n        count+=1\r\n    print(count)\r\n\r\nnum1=int(input(\"Enter 1st number: \"))\r\nnum2=int(input(\"Enter 2nd number: \"))\r\n\r\ncount_digits(num1,num2)\r\n\r\n#Sample input:\r\n#Enter 1st number: 102\r\n#Enter 2nd number: 25\r\n#Output:\r\n#2\r\n\r\n#Sample input:\r\n#Enter 1st number: 3\r\n#Enter 2nd number: 8\r\n#Output:\r\n#2\r\n\r\n#Sample input:\r\n#Enter 1st number: 38\r\n#Enter 2nd number: 8\r\n#Output:\r\n#2\r\n\r\n#Sample input:\r\n#Enter 1st number: 100\r\n#Enter 2nd number: 100\r\n#Output:\r\n#3\r\n\r\n#Sample input:\r\n#Enter 1st number: 1\r\n#Enter 2nd number: 99\r\n#Output:\r\n#2\r\n\r\n#Sample input:\r\n#Enter 1st number: 100\r\n#Enter 2nd number: 1\r\n#Output:\r\n#2\r\n\r\n#Sample input:\r\n#Enter 1st number: 100\r\n#Enter 2nd number: 0\r\n#Output:\r\n#1\r\n\r\n#Sample input:\r\n#Enter 1st number: 0\r\n#Enter 2nd number: 0\r\n#Output:\r\n#1\r\n\r\n#Sample input:\r\n#Enter 1st number: 2\r\n#Enter 2nd number: 0\r\n#Output:\r\n#1\r\n\r\n#Sample input:\r\n#Enter 1st number: 0","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum > 0:\r\n        count += 1\r\n        sum = sum\/10\r\n    print(count)\r\n    \r\n    \r\n\r","votes":null},{"text":"\r\n    sum = num1 + num2\r\n    count = 0\r\n    while sum:\r\n        count += 1\r\n        sum \/\/= 10\r\n    print(\"Number of digits of sum: \",count)\r\n    \r\ncount_digits(11,15)\r\ncount_digits(100,105)\r\ncount_digits(111,155)\r\n\r\n#Exercise 3\r\n\r","votes":null},{"text":"\r\n    result=num1+num2\r\n    count=0\r\n    while result>0:\r\n        result\/\/=10\r\n        count+=1\r\n    print(count)\r\n\r\n#Taking input\r\nnum1=int(input(\"Enter First Number :- \"))\r\nnum2=int(input(\"Enter Second Number :- \"))\r\n\r\n#Calling function\r\ncount_digits(num1,num","votes":null},{"text":"\r\n    sum = num1+num2\r\n    if sum>0:\r\n        count = 0\r\n        while sum>0:\r\n            sum = sum\/\/10\r\n            count += 1\r\n        print(\"Number of digits:\",count)\r\n    else:\r\n        print(\"Number of digits:\",1)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    num1 = int(input(\"Enter first number: \"))\r\n    num2 = int(input(\"Enter second number: \"))\r\n    count_digits(num1,num2)\r\n\r\n\"\"\"\r\nTime Complexity: O(log(n))\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    ans=0\r\n    while sum>0:\r\n        sum\/\/=10\r\n        ans+=1\r\n    print(ans)\r\n\r\nprint(count_digits(12,5))\r\n\r\n#Write a function to check if a number is prime or not.\r\n\r","votes":null},{"text":"\r\n    num1=int(num1)\r\n    num2=int(num2)\r\n    num3=num1+num2\r\n    print(\"Number of digits in the sum =\",len(str(num3)))\r\n\r\n\r","votes":null},{"text":"\r\n    sum1=num1+num2\r\n    count=0\r\n    while sum1>0:\r\n        sum1=sum1\/\/10\r\n        count+=1\r\n    print(count)\r\n\r\nnum1=int(input(\"Enter first number: \"))\r\nnum2=int(input(\"Enter second number: \"))\r\ncount_digits(num1,num2)\r\n\r\n\"\"\"\r\nQuestion 2\r\nWrite a function to check whether the given number is a palindrome or not.\r\n\"\"\"\r","votes":null},{"text":"\r\n    num1 = str(num1)\r\n    num2 = str(num2)\r\n    result = int(num1) + int(num2)\r\n    result = str(result)\r\n    count = 0\r\n    for i in result:\r\n        if i == \"0\":\r\n            count += 1\r\n    print(f\"Number of digits in {num1} + {num2} = {count}\")\r\n\r\n\r\ncount_digits(12,23)\r\ncount_digits(1,2)\r\ncount_digits(123,123)\r\ncount_digits(1234,1234)\r\ncount_digits(12345,12345)\r\ncount_digits(123456,123456)\r\ncount_digits(1234567,1234567)\r\ncount_digits(1","votes":null},{"text":"\r\n    x,y=int(num1),int(num2)\r\n    z=x+y\r\n    count=0\r\n    while z!=0:\r\n        z=z\/\/10\r\n        count+=1\r\n    print('Number of digits in sum:',count)\r\n\r\n\r","votes":null},{"text":"\r\n    num3 = num1 + num2\r\n    n = len(str(num3))\r\n    print(n)\r\n\r\nprint(count_digits(123456,78910))\r\n\r\n# 2.Write a function to add two numbers and print the sum as a string.\r","votes":null},{"text":"\r\n    num3 = num1 + num2\r\n    digits = 0\r\n    while num3:\r\n        digits += 1\r\n        num3 = num3 \/\/ 10\r\n    print(f\"Sum of {num1} and {num2} has {","votes":null},{"text":"\r\n    num1 = int(num1)\r\n    num2 = int(num2)\r\n    sum_of_digits = num1 + num2\r\n    count_digits = 0\r\n    while sum_of_digits > 0:\r\n        count_digits += 1\r\n        sum_of_digits \/\/= 10\r\n    print(count_digits)\r\n\r\ncount_digits(123,234)\r\n\r","votes":null},{"text":"\r\n    sum = num1+num2\r\n    count = 0\r\n    while sum != 0:\r\n        sum \/\/= 10\r\n        count += 1\r\n    print","votes":null},{"text":"\r\n    total = num1 + num2\r\n    while total >= 10:\r\n        count = 0\r\n        while total:\r\n            count += 1\r\n            total \/\/= 10\r\n        print(count)\r\n    else:\r\n        count = 0\r\n        while total:\r\n            count += 1\r\n            total \/\/= 10\r\n        print(count)\r\n\r\n\r","votes":null},{"text":"\r\n    sum=num1+num2\r\n    count=0\r\n    while sum>0:\r\n        count+=1\r\n        sum=sum\/\/10\r\n    return count\r\n\r\nprint(count_digits(1234,5678))\r\nprint(count_digits(1234,567))\r\nprint(count_digits(123,5678))\r\nprint(count_digits(12,5678))\r\nprint(count_digits(1,5678))\r\nprint(count_digits(1","votes":null},{"text":"\r\n    count = 0\r\n    while num1 > 0:\r\n        count += 1\r\n        num1 = num1 \/\/ 10\r\n    while num2 > 0:\r\n        count += 1\r\n        num2 = num2 \/\/ 10\r\n    sum = num1 + num2\r\n    return count\r\n\r\nprint(count_digits(231,18))\r\n\r\n# Solution code\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    sum = num1 + num2\r\n    while sum > 0:\r\n        sum = sum \/\/ 10\r\n        count += 1\r\n    print(\"Total digits of sum are: \",count)\r\n\r","votes":null},{"text":"\r\n    \r\n    sum1 = num1 + num2\r\n    print(f'{num1}+{num2}={sum1}')\r\n    len1 = len(str(sum1))\r\n    print(f'Number of digits in {sum1} is {len1}')\r\n\r\n\r\nnum1 = int(input('Enter 1st number: '))\r\nnum2 = int(input('Enter 2nd number: '))\r\n\r\ncount_digits(num1,num2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    num3 = num1 + num2\r\n    count = 0\r\n    while num3>0:\r\n        num3 = num3\/\/10\r\n        count += 1\r\n    print(count)\r\n\r\n\r\ncount_digits(123,456)\r\ncount_digits(99,99)\r\ncount_digits(100,100)\r\ncount_digits(2","votes":null}],"time":{"count":5.0,"avg":104820.6344,"std":29960.5488974946,"cov":0.2858268228}}
{"id":548,"question":"def longest_increasing_subsequence(arr):\r\n    \"\"\"Write a function to find the length of the longest increasing subsequence of the given sequence.\"\"\"","answers":[{"text":"\r\n    n = len(arr)\r\n    lis = [1] * n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] <= lis[j]:\r\n                lis[i] = lis[j] + 1\r\n    return max(lis)\r\n\r\n\r","votes":104246.256},{"text":"\r\n    n = len(arr)\r\n    L = [1] * n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                L[i] = max(L[i], 1 + L[j])\r\n    return max(L)\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":107320.308},{"text":"\r\n    n = len(arr)\r\n    L = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and L[i] < L[j] + 1:\r\n                L[i] = L[j] + 1\r\n    return max(L)\r\n\r\n\r","votes":108567.284},{"text":"\r\n    \r\n    n = len(arr)\r\n    if n < 2:\r\n        return n\r\n    \r\n    longest = [1] * n\r\n    \r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                longest[i] = max(longest[i], longest[j] + 1)\r\n    \r\n    return max(longest)\r\n\r\n\r","votes":111927.888},{"text":"\r\n    n = len(arr)\r\n    L = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                L[i] = max(L[i], L[j] + 1)\r\n    return max(L)\r\n\r","votes":115514.848},{"text":"\r\n    # Length of the longest increasing subsequence\r\n    # LIS[i] stores the length of the longest increasing subsequence ending with arr[i]\r\n    LIS = [1 for _ in range(len(arr))]\r\n\r\n    # Compute optimized LIS values in bottom up manner\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                LIS[i] = max(LIS[i], 1 + LIS[j])\r\n\r\n    # Return the maximum value in LIS\r\n    return max(LIS)\r\n\r\n\r","votes":119034.824},{"text":"\r\n    n = len(arr)\r\n    lis = [1]*n\r\n    for i in range(1,n):\r\n        for j in range(0,i):\r\n            if arr[i]>arr[j]:\r\n                lis[i] = max(lis[i],lis[j]+1)\r\n    return max(lis)\r\n\r","votes":120207.324},{"text":"\r\n    # Length of the longest increasing subsequence\r\n    lis = [1 for i in range(len(arr))]\r\n\r\n    # Initialize lis for all indexes\r\n    for i in range(len(arr) - 1):\r\n\r\n        for j in range(i + 1, len(arr)):\r\n\r\n            if arr[i] < arr[j] and lis[j] < lis[i] + 1:\r\n                lis[j] = lis[i] + 1\r\n\r\n    # Return maximum value from LIS\r\n    return max(lis)\r\n\r\n\r\n\r\n\r\n\r","votes":121678.412},{"text":"\r\n    # A subsequence is a sequence that can be derived from another sequence by deleting some\r\n    # elements without changing the order of the remaining elements. For example, the sequence\r\n    # [2, 6, 4, 8, 10] is a subsequence of the sequence [1, 2, 4, 5, 6, 7, 8, 9, 10].\r\n    # The longest increasing subsequence is [2, 4, 6, 8, 10].\r\n\r\n    # Fill this in.\r\n    n = len(arr)\r\n\r\n    # L[i] is the length of the longest increasing subsequence ending with A[i].\r\n    L = [1 for i in range(n)]\r\n\r\n    # Create a table to store lengths of subsequence ending with i.\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                L[i] = max(L[i], 1 + L[j])\r\n\r\n    # Return the length of the longest subsequence.\r\n    return max(L)\r\n    \r\n\r\n\r","votes":121861.208},{"text":"\r\n    n = len(arr)\r\n    # table[i] denotes the length of the longest increasing subsequence ending at the ith element\r\n    table = [1 for i in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                table[i] = max(table[i], table[j]+1)\r\n    return max(table)\r\n\r\n\r","votes":122544.096},{"text":"\r\n    n = len(arr)\r\n    longest = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                longest[i] = max(longest[i], 1 + longest[j])\r\n    return max(longest)\r\n\r\n\r","votes":122780.412},{"text":"\r\n    n = len(arr)\r\n    lis = [1 for _ in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n    return max(lis)\r\n\r\n\r","votes":122927.536},{"text":"\r\n    n = len(arr)\r\n    L = [1]*n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                L[i] = max(L[i], L[j]+1)\r\n    return max(L)\r\n\r\n\r","votes":123893.232},{"text":"\r\n    # Length of the longest increasing subsequence of the given sequence.\r\n    lis = [1 for i in range(len(arr))]\r\n    # Length of the longest increasing subsequence ending at a particular index.\r\n    lengths = [1 for i in range(len(arr))]\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                new_length = lengths[j] + 1\r\n                if new_length > lengths[i]:\r\n                    lengths[i] = new_length\r\n                    lis[i] = lis[j] + 1\r\n    return max(lis)\r\n\r\n\r","votes":124066.412},{"text":"\r\n    n = len(arr)\r\n    lis = [1] * n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                lis[i] = max(lis[j] + 1, lis[i])\r\n    return max(lis)\r\n\r\n\r\n# Driver code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nprint(\"Length of the LIS is\", longest_increasing_subsequence(arr))\r\n\r\n# This code is contributed by Rajat Mishra\r\n\r\n\r\n# ---------------------------------------------------------------------------------------\r\n# A Dynamic Programming based Python program for 0-1 Knapsack problem\r\n\r\n# Returns the maximum value that can be put in a knapsack of capacity W\r\n\r\n\r","votes":125294.984},{"text":"\r\n    n = len(arr)\r\n    L = [1]*n\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                L[i] = max(L[i], L[j]+1)\r\n\r\n    return max(L)\r\n\r\n\r","votes":125698.696},{"text":"\r\n    # If the array is empty or there is only one element, then the answer is 1\r\n    if len(arr) <= 1:\r\n        return len(arr)\r\n    # Create a list to store the length of the LIS for subarrays of different sizes\r\n    # lis[i] stores the length of the LIS of the subarray arr[0..i]\r\n    lis = [1]*len(arr)\r\n    # lcs[i] stores the index of the largest element in the subarray arr[0..i] that is\r\n    # smaller than arr[i]\r\n    lcs = [0]*len(arr)\r\n    # Traverse the array\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n                lcs[i] = j\r\n    # The maximum of the LIS will be the answer\r\n    return max(lis)\r\n\r\n\r","votes":126283.624},{"text":"\r\n    if arr == []:\r\n        return 0\r\n    length = [1 for i in range(len(arr))]\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                length[i] = max(length[i], length[j] + 1)\r\n    return max(length)\r\n\r\n\r","votes":127298.468},{"text":"\r\n\r\n    # Length of the longest increasing subsequence.\r\n    lis = [1] * len(arr)\r\n\r\n    # Initialize lis for length of all subsequences.\r\n    for i in range(len(arr)):\r\n\r\n        # Find the larger element on left side\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n\r\n    # Return the maximum value in lis.\r\n    return max(lis)\r\n\r\n\r\n# Driver code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nn = len(arr)\r\nprint(\"Length of the longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n# Output:\r\n# Length of the longest increasing subsequence is 6\r\n\r\n\r","votes":129314.648},{"text":"\r\n    n = len(arr)\r\n    # L[i] stores the length of the longest increasing subsequence ending with A[i]\r\n    L = [1 for _ in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                L[i] = max(L[i], L[j] + 1)\r\n    return max(L)\r\n\r\n\r","votes":129862.356},{"text":"\r\n    \r\n    # length of the sequence\r\n    n = len(arr)\r\n    \r\n    # length of the resultant array\r\n    result = [1]*n\r\n    \r\n    # initialize the resultant array\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                result[i] = max(result[i], result[j] + 1)\r\n    \r\n    # find the length of the longest increasing subsequence\r\n    return max(result)\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(\"Length of the longest increasing subsequence is:\", longest_increasing_subsequence(arr))\r\n\r\n\r\n# Output:\r\n# Length of the longest increasing subsequence is: 5\r\n\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r\n\r\n\r\n# The above solution uses dynamic programming to solve the problem.\r\n# If an element is less than the last element of the resultant array,\r\n# then the value of the resultant array at that index is updated to the maximum of the values (value of the resultant array at that index and the value of the resultant array at the previous index).\r\n# The value of the resultant array at the previous index is compared to all the values that are less than the current element, and the maximum is found. \r\n# This process is repeated until we reach the beginning of the array.\r\n\r\n\r\n# In this solution, we have used an extra array of size n to store the values of the resultant array.\r\n# This array is initialized with all the values as 1.\r\n# Then for each element in the array, we compare the element with all the previous elements (i.e. from 0 to i-1) and update the value of the resultant array at that index to the maximum of the current value an","votes":132439.308},{"text":"\r\n    n = len(arr)\r\n    lis = [1] * n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n    \r\n    return max(lis)\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint (\"Length of LIS is\",longest_increasing_subsequence(arr))\r\n\r\n\r\n# 2. Longest Common Subsequence\r\n\r","votes":133841.852},{"text":"\r\n    dp = [1] * len(arr)\r\n    max_len = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n        max_len = max(max_len, dp[i])\r\n    return max_len\r\n\r\n\r\narr = [3, 4, 5, 1, 2, 3, 6, 7, 8]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n\r","votes":134304.896},{"text":"\r\n    n = len(arr)\r\n    L = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                L[i] = max(L[i], 1 + L[j])\r\n    return max(L)\r\n\r\n\r","votes":135589.8},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    \r\n    # 1. dp[i] = dp[j] + 1, if arr[i] > arr[j] and dp[i] = max{dp[j], 1 + dp[j]}\r\n    # 2. dp[i] = 1, if arr[i] > arr[j] and dp[i] = 1\r\n    # 3. dp[i] = 1, if arr[i] < arr[j] and dp[i] = 1\r\n    dp = [1] * len(arr)\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    \r\n    return max(dp)\r\n\r\n    \r\n    \r\n    \r","votes":136074.432},{"text":"\r\n    # A subsequence of a string is a new string which is formed from the original string by deleting\r\n    # some (can be none) of the characters without disturbing the relative positions of the remaining characters.\r\n    # (ie, \"ace\" is a subsequence of \"abcde\" while \"AEC\" is not).\r\n    # Here the given sequence is a list of integers.\r\n    # For example, given the list [10, 22, 9, 33, 21, 50, 41, 60, 80], the longest increasing subsequence is [10, 22, 33, 50, 60, 80].\r\n\r\n    # Use dynamic programming to solve it. \r\n    # Let max_length[i] be the length of the longest increasing subsequence that ends with the number arr[i].\r\n    # We can compute max_length[i] from max_length[i-1] if arr[i] > arr[i-1]\r\n\r\n    # The length of the longest increasing subsequence is max(max_length[i])\r\n    max_length = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                max_length[i] = max(max_length[i], 1 + max_length[j])\r\n    return max(max_length)\r\n\r\n\r","votes":136619.768},{"text":"\r\n    # Find the length of the LIS for each element. Put 1 as the length of the sequence for all other elements.\r\n    lis = [1 for _ in arr]\r\n\r\n    # Fill lis table in bottom up manner\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n\r\n    return max(lis)\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(\"Longest increasing subsequence length is\", longest_increasing_subsequence(arr))\r\n\r\n\r\n# Time Complexity: O(n**2)\r\n# Auxiliary Space: O(n)\r\n\r\n\r","votes":138452.18},{"text":"\r\n    # Base Case\r\n    if len(arr) == 1:\r\n        return 1\r\n    # Initialize the result\r\n    max_length = 0\r\n    # Initialize the length of the subsequence\r\n    length_arr = [1] * len(arr)\r\n    # Initialize the previous element of the subsequence\r\n    prev_arr = [-1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                if length_arr[i] < length_arr[j] + 1:\r\n                    length_arr[i] = length_arr[j] + 1\r\n                    prev_arr[i] = j\r\n        if max_length < length_arr[i]:\r\n            max_length = length_arr[i]\r\n    return max_length\r\n\r\n\r","votes":138767.664},{"text":"\r\n    res = [1] * len(arr)\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and res[i] < res[j] + 1:\r\n                res[i] = res[j] + 1\r\n    return max(res)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    sample = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(longest_increasing_subsequence(sample))\r\n\r\n\r","votes":138848.376},{"text":"\r\n    # Base Case\r\n    if len(arr) == 1:\r\n        return 1\r\n\r\n    # Length of the longest increasing subsequence ending with an element arr[i]\r\n    lis = [1 for i in range(len(arr))]\r\n\r\n    # Length of the longest increasing subsequence ending with an element arr[i]\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n\r\n    # Return maximum of all LIS\r\n    return max(lis)\r\n\r\n\r","votes":138889.524},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    # length of longest increasing subsequence\r\n    # is at most equal to length of the array\r\n    len_lis = len(arr)\r\n    # array to store the indexes of elements\r\n    # of the increasing subsequence\r\n    indexes = [None] * len_lis\r\n    # length of the longest increasing subsequence\r\n    max_len = 0\r\n\r\n    # loop for length of the array\r\n    for i in range(0, len_lis):\r\n        # find the longest increasing subsequence ending at the ith element\r\n        # length is the ith element itself\r\n        indexes[i] = 1\r\n        # loop for length of the longest increasing subsequence ending at the\r\n        # (i - 1)th element\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                # new length is 1 more than the length of the longest\r\n                # increasing subsequence ending at the jth element\r\n                indexes[i] = max(indexes[i], indexes[j] + 1)\r\n\r\n        # update max_len if the current length is more\r\n        # than the max_len\r\n        max_len = max(max_len, indexes[i])\r\n\r\n    # return the max_len\r\n    return max_len\r\n\r","votes":143254.624},{"text":"\r\n    # Base Case\r\n    if len(arr) == 0:\r\n        return 0\r\n    # Initialize the lengths of the longest increasing subsequence for all the elements\r\n    lengths = [1 for i in range(len(arr))]\r\n    # Initialize the previous elements of the longest increasing subsequence for all the elements\r\n    prev = [None for i in range(len(arr))]\r\n    # Calculate the length and previous element of all the subsequences\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lengths[i] < lengths[j] + 1:\r\n                lengths[i] = lengths[j] + 1\r\n                prev[i] = j\r\n    # Return the longest increasing subsequence length\r\n    return max(lengths)\r\n\r\n\r\narr = [6, 4, 3, 7, 1, 8, 9, 10, 2]\r\n\r","votes":143475.66},{"text":"\r\n    \r\n    n = len(arr)\r\n    table = [1] * n\r\n    \r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                table[i] = max(table[i], table[j] + 1)\r\n    \r\n    return max(table)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(f\"The length of the longest increasing subsequence is {longest_increasing_subsequence(arr)}\")\r\n\r\n    # Sample input\/output\r\n    # Input: arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    # Output: The length of the longest increasing subsequence is 6\r\n    \r\n    # Input: arr = [2, 2, 3, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 1","votes":144267.312},{"text":"\r\n    n = len(arr)\r\n    L = [1]*n\r\n    for i in range(1,n):\r\n        for j in range(0,i):\r\n            if arr[i] > arr[j]:\r\n                L[i] = max(L[i], 1+L[j])\r\n    max_len = 0\r\n    for i in range(n):\r\n        max_len = max(max_len, L[i])\r\n    return max_len\r\n\r\n\r\nif __name__==\"__main__\":\r\n    arr = [5, 4, 7, 6, 9, 1, 3, 8, 2, 10, 11, 12]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n\r\n\r\nvotes":145482.228},{"text":"\r\n    \r\n    # Create an array to store length of longest increasing subsequence.\r\n    length = [1] * len(arr)\r\n    \r\n    # length[i] represents length of the longest increasing subsequence ending with A[i]\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and length[i] < length[j] + 1:\r\n                length[i] = length[j] + 1\r\n    \r\n    # Initialize max_length as first element of length array and max_index as 0\r\n    max_length, max_index = length[0], 0\r\n    \r\n    # Now traverse the array and find the maximum value\r\n    for i in range(len(length)):\r\n        if length[i] > max_length:\r\n            max_length = length[i]\r\n            max_index = i\r\n    \r\n    # Return the length of the longest increasing subsequence\r\n    return max_length\r\n\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(\"The length of the longest increasing subsequence is: \", longest_increasing_subsequence(arr))\r\n\r\n# Time Complexity : O(n^2)\r\n# Space Complexity : O(n)\r\n\r\n# Example 2:\r\n\r\n# Input: arr[] = {100, 117, 112, 101, 116}\r\n# Output: 4\r\n\r\n# Example 3:\r\n\r\n# Input: arr[] = {20, 80, 60, 110, 100}\r\n# Output: 4\r\n\r\n# Example 4:\r\n\r\n# Input: arr[] = {100, 117, 112, 101, ","votes":148995.132},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n    dp = [1 for i in arr]\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [-1, 3, -4, 5, 10, 5, 2, 1]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # 1\r\n    # 2\r\n    # 3\r\n    # 4\r\n    # 5\r\n    # 6\r\n    # 7\r\n    # 8\r\n\r\n    # [1, 3, 5, 10, 2, 1]\r\n    # [1, 3, 5, 2, 1]\r\n    # [1, 3, 2, 1]\r\n    # [1, 3, 2, 1]\r\n    # [1, 3, 2, 1]\r\n    # [1, 3, 2, 1]\r\n    # [1, 3, 2, 1]\r\n    # [1, 3, 2, 1]\r\n    # [1, 3, 2, 1]\r\n    # [1, 3, 2, 1]\r\n    # [1, 3, 2, 1]\r\n\r\n    # 1\r\n    # 1\r\n    # 2\r\n    # 3\r\n    # 3\r\n    # 3\r\n    # 4\r\n    # 4\r\n    # 4\r\n    # 4\r\n    # 4\r\n    # 4\r\n","votes":152364.636},{"text":"\r\n    n = len(arr)\r\n    dp = [1]*n\r\n    max_length = 1\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j]+1)\r\n        max_length = max(max_length, dp[i])\r\n    return max_length\r\n\r","votes":156665.348},{"text":"\r\n    n = len(arr)\r\n    # initialize lis array (1-indexed)\r\n    lis = [1 for i in range(n)]\r\n    # initialize dp array (0-indexed)\r\n    dp = [0 for i in range(n)]\r\n    # for every element in the array calculate its lis\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                if lis[i] < lis[j] + 1:\r\n                    lis[i] = lis[j] + 1\r\n                    dp[i] = j\r\n    # return the lis of the last element in the array\r\n    return lis[n - 1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Output: 5\r\n    # Explanation: The longest increasing subsequence is [9, 10, 22, 33, 50], so the length is 5.\r\n\r\n    arr = [3, 10, 2, 1, 20]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Output: 4\r\n    # Explanation: The longest increasing subsequence is [1, 2, 3, 10], so the length is 4.\r\n\r\n    arr = [10, 22, 101, 3, 1, 20]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    # Output: 4\r\n    # Explanation: The longest increasing subsequence is [1, 2, 3, 101], s","votes":161382.456},{"text":"\r\n    n = len(arr)\r\n    dp = [1]*n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j]+1)\r\n    return max(dp)\r\n\r\n\r","votes":165300.22},{"text":"\r\n    # find the length of the longest increasing subsequence\r\n    length = len(arr)\r\n    # create a table to store the length of the LIS ending with each number\r\n    lis = [1] * length\r\n    # for all the numbers:\r\n    for i in range(1, length):\r\n        # for all the numbers smaller than the current number:\r\n        for j in range(i):\r\n            # for all the numbers smaller than the current number, if the number is smaller than the current number and ends an increasing subsequence of length lis[j] + 1, then update lis[i]\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n    # return the maximum value in lis\r\n    return max(lis)\r\n\r\n\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]))\r\nprint(longest_increasing_subsequence([3, 2, 6, 4, 5, 1]))\r\nprint(longest_increasing_subsequence([10, 12, 21, 3, 1, 2, 3, 4, 5, 6]))\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5]))\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n\r\n\r","votes":166533.508},{"text":"\r\n    lis = [1] * len(arr)\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                lis[i] = max(lis[i], 1 + lis[j])\r\n    return max(lis)\r\n\r\n\r","votes":173515.572},{"text":"\r\n    longest = [1] * len(arr)\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and longest[i] < longest[j] + 1:\r\n                longest[i] = longest[j] + 1\r\n    return max(longest)\r\n\r\n\r","votes":174914.268},{"text":"\r\n    dp = [1]*len(arr)\r\n    for i in range(1,len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i],dp[j]+1)\r\n    return max(dp)\r\n\r\n\r","votes":177231.256},{"text":"\r\n    n = len(arr)\r\n    lis = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                lis[i] = max(lis[i], lis[j] + 1)\r\n    return max(lis)\r\n\r\n\r","votes":179359.18},{"text":"\r\n    \r\n    \"\"\"\r\n    T(n) = O(n^2) = O(nlogn)\r\n    \r\n    \"\"\"\r\n    \r\n    n = len(arr)\r\n    \r\n    if n == 0:\r\n        return 0\r\n    \r\n    # dp[n] = length of the longest increasing subsequence ending with the number at index n\r\n    dp = [1] * n\r\n    \r\n    for i in range(1, n):\r\n        \r\n        # calculate the length of the longest increasing subsequence ending with the number at index i\r\n        for j in range(0, i):\r\n            \r\n            # if the number at index j is less than the number at index i, we can extend the LIS ending with the number at index j to LIS ending with the number at index i\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    \r\n    # find the maximum value in the array\r\n    return max(dp)\r\n\r\n\r","votes":179879.628},{"text":"\r\n    if arr is None or len(arr) == 0:\r\n        return 0\r\n\r\n    # find the longest increasing subsequence of arr[i]\r\n    # dp[i] is the length of the longest increasing subsequence ending with i\r\n    dp = [1] * len(arr)\r\n\r\n    # dp[i] is the length of the longest increasing subsequence ending with i\r\n    # dp[i] = 1 + max(dp[j]) for all j < i and arr[j] < arr[i]\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[j] < arr[i]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n\r\n    return max(dp)\r\n\r\n\r","votes":181983.308},{"text":"\r\n    n = len(arr)\r\n    lis = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                lis[i] = max(lis[i], lis[j] + 1)\r\n    return max(lis)\r\n\r\n\r","votes":182464.116},{"text":"\r\n    # Create an array to store longest length of subsequence ending with i\r\n    # Initialize all values as 1\r\n    lengths = [1 for _ in range(len(arr))]\r\n\r\n    # Fill the array in bottom up manner\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                lengths[i] = max(lengths[i], lengths[j] + 1)\r\n\r\n    # Return the maximum value in lengths array\r\n    return max(lengths)\r\n\r\n\r","votes":185520.228},{"text":"\r\n    n = len(arr)\r\n    L = [1] * n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                L[i] = max(L[i], 1 + L[j])\r\n    return max(L)\r\n\r\n\r\n\r\n","votes":197707.204},{"text":"\r\n    # Time Complexity: O(n2)\r\n    # Space Complexity: O(n)\r\n\r\n    n = len(arr)\r\n    # L[i] will store the length of the longest increasing subsequence ending with A[i]\r\n    L = [1 for i in range(n)]\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                L[i] = max(L[i], 1 + L[j])\r\n\r\n    return max(L)\r\n\r\n\r","votes":210463.036},{"text":"\r\n    if len(arr)==1:\r\n        return 1\r\n    dp=[1 for i in range(len(arr))]\r\n    for i in range(1,len(arr)):\r\n        for j in range(0,i):\r\n            if arr[i]>arr[j]:\r\n                dp[i]=max(dp[i],dp[j]+1)\r\n    return max(dp)\r\nprint(longest_increasing_subsequence([1,2,3,5,7,8,10]))\r\nprint(longest_increasing_subsequence([1,2,3,4,5,6,7,8]))\r\nprint(longest_increasing_subsequence([1,2,3,4,5]))\r\nprint(longest_increasing_subsequence([1,2,3,4,5,6]))\r\nprint(longest_increasing_subsequence([2,1,2,3,4,5,6]))\r\nprint(longest_increasing_subsequence([1,3,5,2,6,4,7]))\r\nprint(longest_increasing_subsequence([1,2,3,4,5,6,7,8,9]))\r\n\r\n\r","votes":211204.316},{"text":"\r\n    # Create a table to store lengths of the longest increasing subsequence ending at arr[i]\r\n    # Initialize the table as all zeros\r\n    n = len(arr)\r\n    L = [0] * n\r\n    # L[i] will be length of LIS ending with arr[i]\r\n    # Initialize L[0]\r\n    L[0] = 1\r\n    # L[i] will be length of LIS ending with arr[i]\r\n    # Initialize L[0]\r\n    for i in range(1, n):\r\n        # For LIS ending with arr[i],\r\n        # we try all LIS ending with arr[i-1]. If arr[i] is greater than the last element of LIS ending with arr[i-1],\r\n        # then append arr[i] to the LIS and increment length by 1\r\n        L[i] = 1\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and L[i] < L[j] + 1:\r\n                L[i] = L[j] + 1\r\n    # L[n-1] will have the length of the longest LIS\r\n    return L[n - 1]\r\n\r\n\r","votes":215204.848},{"text":"\r\n    # Create a temporary array to store the length of the longest increasing subsequence till\r\n    # the current element\r\n    temp = [1] * len(arr)\r\n\r\n    # Initialize the result as 1\r\n    result = 1\r\n\r\n    # Traverse each element of the given sequence\r\n    for i in range(1, len(arr)):\r\n        # Traverse the array to find out the longest increasing subsequence ending at the current element\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                # Update the length of the longest increasing subsequence if the longest increasing\r\n                # subsequence ending at the current element is greater than the previously stored\r\n                # length\r\n                temp[i] = max(temp[i], 1 + temp[j])\r\n\r\n        # Update the result if the newly calculated length of the longest increasing subsequence\r\n        # is greater than the previous result\r\n        result = max(result, temp[i])\r\n\r\n    # Return the result\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n# Sample Output: \r\n# 4\r\n\r\n# Explanation:\r\n# The longest increasing subsequence is 22, 33, 41, ","votes":232491.744},{"text":"\r\n    n = len(arr)\r\n    dp = [1 for i in range(n)]\r\n    max_len = 1\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j]+1)\r\n        max_len = max(max_len, dp[i])\r\n    return max_len\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(\"Length of longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n\r\n\r\n    \r\n\r\n\r\n","votes":234930.276},{"text":"\r\n    n = len(arr)\r\n    L = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and L[i] < L[j] + 1:\r\n                L[i] = L[j] + 1\r\n    return max(L)\r\n\r\n\r","votes":236785.468},{"text":"\r\n    # Length of the longest increasing subsequence\r\n    n = len(arr)\r\n    \r\n    # Length of the longest increasing subsequence ending with arr[n - 1]\r\n    # is 1 + length of the longest increasing subsequence ending with arr[n - 2]\r\n    ls = [1 for i in range(n)]\r\n    \r\n    # Compute length of the longest increasing subsequence for all subproblems \r\n    # and store it in ls.\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                ls[i] = max(ls[i], 1 + ls[j])\r\n    \r\n    # Return the maximum value in ls[]. This is the length of the longest \r\n    # increasing subsequence.\r\n    return max(ls)\r\n\r\n\r","votes":265121.4},{"text":"\r\n    mem = [0]*len(arr)\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                mem[i] = max(mem[i], mem[j]+1)\r\n    return max(mem)\r\n\r","votes":null},{"text":"\r\n\r\n    # Length of the input sequence\r\n    n = len(arr)\r\n\r\n    # Length of the longest increasing subsequence\r\n    length = 0\r\n\r\n    # Create a table to store lengths of longest increasing subsequences\r\n    L = [1] * n\r\n\r\n    # Initialize a table to store parent indexes in LIS\r\n    P = [-1] * n\r\n\r\n    # Consider all sequences from left to right\r\n    for i in range(n):\r\n        # Initialize a variable to store the largest value of j\r\n        j = i\r\n\r\n        # Consider all sequences from right to left\r\n        for j in range(i-1, -1, -1):\r\n            if (arr[i] > arr[j] and L[j] >= L[i]):\r\n                L[i] = 1 + L[j]\r\n                P[i] = j\r\n\r\n        # Update length of longest increasing subsequence\r\n        if (L[i] > length):\r\n            length = L[i]\r\n\r\n    # Initialize sequence with a single element\r\n    seq = []\r\n\r\n    # Pick all elements that are part of LIS\r\n    i = n-1\r\n    while (i != -1):\r\n        seq.append(arr[i])\r\n        i = P[i]\r\n\r\n    # Reverse the elements of the sequence\r\n    seq.reverse()\r\n\r\n    # Return length of the longest increasing subsequence\r\n    return length, seq\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    length, seq = longest_increasing_subsequence(arr)\r\n    print('Longest increasing subsequence is {}'.format(seq))\r\n    print('Length of the longest increasing subsequence is {}'.format(length))\r\n\r\n","votes":null},{"text":"\r\n    n = len(arr)\r\n\r\n    # the array to store the length of the LIS ending with each element\r\n    lis = [1] * n\r\n\r\n    # the array to store the index of the element which ends the LIS ending with each element\r\n    prev = [0] * n\r\n\r\n    # lis[i] = length of the LIS ending with the element arr[i]\r\n    # prev[i] = index of the element which ends the LIS ending with the element arr[i]\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n                prev[i] = j\r\n\r\n    # find the maximum length\r\n    m = max(lis)\r\n\r\n    # recover the sequence\r\n    res = []\r\n    j = 0\r\n    for i in range(0, n):\r\n        if lis[i] == m:\r\n            res.append(arr[i])\r\n            j = i\r\n    return res\r\n\r\n\r\n# Driver's Code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nans = longest_increasing_subsequence(arr)\r\n\r\nprint(\"Longest increasing subsequence is\", ans)\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nEnter the size of the array:\r\n5\r\nEnter the elements of the array:\r\n10 22 9 33 21\r\nLongest increasing subsequence is [10, 22, 33]\r\n","votes":null},{"text":"\r\n    # Length of the array\r\n    n = len(arr)\r\n    # Base cases\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    # The value of the last element is always 1\r\n    last = 1\r\n    # We will store the length of the LIS ending with the current element here\r\n    lengths = [1] * n\r\n    # To store the index of the next element in the sequence for the current\r\n    # element\r\n    index = [0] * n\r\n    # To store the length of the LIS ending with the previous element\r\n    prev = 0\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            # If the current element is smaller than the previous element, then\r\n            # we will update the LIS ending with the current element to LIS\r\n            # ending with the previous element\r\n            if arr[i] < arr[j]:\r\n                if lengths[i] < lengths[j] + 1:\r\n                    lengths[i] = lengths[j] + 1\r\n                    index[i] = j\r\n        if lengths[i] > last:\r\n            last = lengths[i]\r\n    # Create the LIS\r\n    res = []\r\n    j = n - 1\r\n    while j >= 0:\r\n        res.append(arr[j])\r\n        j = index[j]\r\n    return res[::-1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [5, 10, 2, 1, 3, 6, 4]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [5, 10, 1, 3, 6, 4, 2]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [5,","votes":null},{"text":"\r\n\r\n    # create array of length = len(arr)\r\n    # initialize values to 1\r\n    # for i in range(len(arr)):\r\n    #     arr[i] = 1\r\n\r\n    # find length of longest increasing subsequence of each element\r\n    # for i in range(len(arr)):\r\n    #     for j in range(i+1, len(arr)):\r\n    #         if arr[i] < arr[j]:\r\n    #             arr[i] = arr[i] + 1\r\n    #         else:\r\n    #             break\r\n\r\n    # find the maximum value from array\r\n    # return max(arr)\r\n    \r\n    # create array of length = len(arr)\r\n    # initialize values to 1\r\n    # for i in range(len(arr)):\r\n    #     arr[i] = 1\r\n\r\n    # find length of longest increasing subsequence of each element\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if arr[i] < arr[j]:\r\n                arr[i] = arr[i] + 1\r\n            else:\r\n                break\r\n\r\n    # find the maximum value from array\r\n    max_value = max(arr)\r\n    for i in range(len(arr)):\r\n        if arr[i] == max_value:\r\n            return i + 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#","votes":null},{"text":"\r\n    n = len(arr)\r\n    # create a table to store lengths of longest increasing subsequences of subarrays\r\n    # of the given array ending with arr[i]\r\n    lis = [1 for i in range(n)]\r\n\r\n    # compute length of longest increasing subsequences for subarrays of size ranging\r\n    # from 2 to n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n\r\n    # return maximum value in lis\r\n    return max(lis)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    result = longest_increasing_subsequence(arr)\r\n    print(\"Length of LIS is \" + str(result))\r\n    # Output: Length of LIS is 5\r\n\r\n    arr = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\r\n    result = longest_increasing_subsequence(arr)\r\n    print(\"Length of LIS is \" + str(result))\r\n    # Output: Length of LIS is 7\r\n\r\n    arr = [3, 1, 2, 4]\r\n    result = longest_increasing_subsequence(arr)\r\n    print(\"Length of LIS is \" + str(result))\r\n    # Output: Length of LIS is 4\r\n\r\n    arr = [10, 5, 15, 13, 11, 6, 12,","votes":null},{"text":"\r\n    # Use a dictionary to store the length of the longest increasing subsequence\r\n    # ending at each position.\r\n    # For example, for [10, 22, 9, 33, 21, 50, 41, 60, 80],\r\n    # the length of the longest increasing subsequence ending at position 8 is 6,\r\n    # so the length of the longest increasing subsequence ending at position 7 is 5,\r\n    # and so on.\r\n    # Initialize the dictionary with the length of the longest increasing subsequence ending\r\n    # at position 0 as 1.\r\n    # The length of the longest increasing subsequence ending at position 0 is 1, as there is\r\n    # only one number in the array.\r\n    # The length of the longest increasing subsequence ending at position 1 is 2, as there are\r\n    # only two numbers in the array.\r\n    # and so on.\r\n    # If the number at the current position is smaller than the number at the previous position,\r\n    # then the length of the longest increasing subsequence ending at the current position is\r\n    # either 1 (if the number at the previous position is the first number in the array)\r\n    # or the length of the longest increasing subsequence ending at the previous position\r\n    # plus 1 (if the number at the previous position is not the first number in the array).\r\n    # If the number at the current position is greater than the number at the previous position,\r\n    # then the length of the longest increasing subsequence ending at the current position is\r\n    # the maximum of the length of the longest increasing subsequence ending at the previous\r\n    # position and the length of the longest increasing subsequence ending at the (k-1)th position\r\n    # (k is the position immediately preceding the current position).\r\n    # If the number at the current position is equal to the number at the previous position,\r\n    # then the length of the longest increasing subsequence ending at the current position is\r\n    # the maximum of the length of the longest increasing subsequence ending at th","votes":null},{"text":"\r\n    # Create a list to store the length of the longest increasing subsequence\r\n    subsequence_length = [1 for _ in range(len(arr))]\r\n    # Create a list to store the next value in the longest increasing subsequence\r\n    next_value = [0 for _ in range(len(arr))]\r\n    # Create a list to store the index of the element in the longest increasing subsequence\r\n    index_value = [0 for _ in range(len(arr))]\r\n    # Create a list to store the index of the element in the longest increasing subsequence\r\n    # Create a list to store the index of the element in the longest increasing subsequence\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[j] < arr[i] and subsequence_length[i] < subsequence_length[j] + 1:\r\n                subsequence_length[i] = subsequence_length[j] + 1\r\n                index_value[i] = j\r\n                next_value[i] = arr[j]\r\n    # Find the index of the element with the maximum length of the longest increasing subsequence\r\n    index = subsequence_length.index(max(subsequence_length))\r\n    # Start the sequence from the index that has the maximum length of the longest\r\n    # increasing subsequence\r\n    sequence = [arr[index]]\r\n    while index != 0:\r\n        index = index_value[index]\r\n        sequence.insert(0, next_value[index])\r\n    return sequence\r\n\r\n\r","votes":null},{"text":"\r\n    # Time complexity = O(n^2)\r\n    # Space complexity = O(n)\r\n    \r\n    # Initially, the length of the longest increasing subsequence is 1\r\n    # and the value of the element is the same as the current element.\r\n    # After the first iteration, the length of the longest increasing\r\n    # subsequence is 2 and the value of the element is the same as the\r\n    # element in the previous iteration.\r\n    # The length of the longest increasing subsequence is 3 after the second\r\n    # iteration and so on.\r\n    # The number of iterations required is the value of the length of the\r\n    # longest increasing subsequence.\r\n    \r\n    n = len(arr)\r\n    dp = [1] * n\r\n    \r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n        dp[i] = max(dp[i], dp[i - 1])\r\n    \r\n    # The value of the largest element in the longest increasing subsequence\r\n    # is equal to the length of the longest increasing subsequence\r\n    return max(dp)\r\n\r\n\r\n# Test case 1\r\nprint(longest_increasing_subsequence([10, 5, 2, 7, 8, 7])) # 4\r\n\r\n# Test case 2\r\nprint(longest_increasing_subsequence([1, 2, 3, 7, 101, 18])) # 4\r\n\r\n# Test case 3\r\nprint(longest_increasing_subsequence([10, 5, 2, 7, 8, 7, 6, 3, 4])) # 5\r\n\r\n# Test case 4\r\nprint(longest_increasing_subsequence([2, 2,","votes":null},{"text":"\r\n    \r\n    # Create a dictionary to store the previous element\r\n    previous = {}\r\n    \r\n    # Create a list to store the longest sequence\r\n    longest_sequence = []\r\n    \r\n    # Traverse the given sequence\r\n    for i in range(len(arr)):\r\n        \r\n        # If the current element is not present in the dictionary\r\n        if arr[i] not in previous:\r\n            \r\n            # Append the current element\r\n            longest_sequence.append(arr[i])\r\n            \r\n            # Store the current index\r\n            previous[arr[i]] = i\r\n        \r\n        # If the current element is present in the dictionary\r\n        else:\r\n            \r\n            # If the next element is greater than the previous element\r\n            if i > previous[arr[i]]:\r\n                \r\n                # Replace the previous element and index\r\n                longest_sequence[-1] = arr[i]\r\n                previous[arr[i]] = i\r\n    \r\n    # Return the length of the longest sequence\r\n    return len(longest_sequence)\r\n\r\n\r\n# Driver code\r\narr = [1,2,5,7,4,10,11,3]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # 1. \u627e\u5230\u6700\u957f\u7684\u5b50\u5e8f\u5217\r\n    # 2. \u5982\u679c\u4e0d\u5b58\u5728\u6700\u957f\u5b50\u5e8f\u5217, \u8fd4\u56de0\r\n    # 3. \u8fd4\u56de\u8fd9\u4e2a\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\r\n\r\n    # \u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u6700\u957f\u5b50\u5e8f\u5217\u957f\u5ea6\r\n    subsequence_lengths = [1] * len(arr)\r\n\r\n    # \u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u6700\u957f\u5b50\u5e8f\u5217\u957f\u5ea6\r\n    previous_lengths = [0] * len(arr)\r\n\r\n    # \u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[j] <= arr[i]:\r\n                if subsequence_lengths[j] >= subsequence_lengths[i]:\r\n                    subsequence_lengths[i] = subsequence_lengths[j] + 1\r\n                    previous_lengths[i] = j\r\n\r\n    # \u627e\u5230\u6700\u957f\u7684\u5b50\u5e8f\u5217\r\n    max_subsequence_length = max(subsequence_lengths)\r\n\r\n    # \u5982\u679c\u4e0d\u5b58\u5728\u6700\u957f\u5b50\u5e8f\u5217, \u8fd4\u56de0\r\n    if max_subsequence_length == 0:\r\n        return 0\r\n\r\n    # \u8fd4\u56de\u8fd9\u4e2a\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\r\n    return max_subsequence_length\r\n\r\n\r\n# \u6d4b\u8bd5\r\narr = [10, 9, 2, 5, 3, 7, 101, 18]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\narr = [2, 6, 9, 4, 1, 8, 5]\r\nprint(longest_increasing_subsequence(arr))\r\n\r\narr = [1, 2, 3, 4]\r\nprint(longest_incr","votes":null},{"text":"\r\n    # length of the longest increasing subsequence\r\n    lis = [1 for i in range(len(arr))]\r\n    # length of the longest increasing subsequence ending with the number arr[i]\r\n    lis_end = [0 for i in range(len(arr))]\r\n    # for each number in the array\r\n    for i in range(len(arr)):\r\n        # for each number that is smaller than the current number\r\n        for j in range(i):\r\n            # if the current number is smaller than the number at the index j\r\n            if arr[i] > arr[j]:\r\n                # update the length of the longest increasing subsequence ending with the number arr[i]\r\n                lis_end[i] = max(lis_end[i], lis_end[j] + 1)\r\n        # update the length of the longest increasing subsequence\r\n        lis[i] = max(lis[i], lis_end[i])\r\n    # return the longest increasing subsequence\r\n    return lis\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(arr)\r\n  \r\n    # L[i] will be storing the length of LIS ending with arr[i]\r\n    L = [1]*n\r\n  \r\n    # Compute optimized LIS values in bottom up manner\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and L[i] < L[j] + 1 :\r\n                L[i] = L[j] + 1\r\n    \r\n    # Return maximum value in L[]\r\n    return max(L)\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    \r\n    #Input\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n\r\n    #Output\r\n    print(\"Length of the longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n\r\n    #Input\r\n    arr = [1, 2, 3, 4, 5]\r\n\r\n    #Output\r\n    print(\"Length of the longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n\r\n    #Input\r\n    arr = [2, 2, 3, 4, 5]\r\n\r\n    #Output\r\n    print(\"Length of the longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n\r\n    #Input\r\n    arr = [2, 2, 3, 4, 5, 5]\r\n\r\n    #Output\r\n    print(\"Length of the longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n\r\n    #Input\r\n    arr = [2, 2, 3, 4, 5, 5, 6]\r\n\r\n    #Output\r\n    print(\"Length of the longest increasing subsequence is\", longest_i","votes":null},{"text":"\r\n    #create a dict to store the max length for each element\r\n    arr_dict = {}\r\n    for i in range(len(arr)):\r\n        arr_dict[arr[i]] = i\r\n    #create a dict to store the previos element of each element\r\n    previous_dict = {}\r\n    for i in range(len(arr)):\r\n        previous_dict[arr[i]] = None\r\n    #max_len is the max length of the sequence\r\n    max_len = 0\r\n    #create a list to store the sequence\r\n    seq = []\r\n    for i in range(len(arr)):\r\n        #check if the element is already in the sequence\r\n        if arr[i] in seq:\r\n            continue\r\n        #check if the element is in the sequence before\r\n        if arr[i] in previous_dict:\r\n            #update the max_len\r\n            if max_len < len(seq) + 1:\r\n                max_len = len(seq) + 1\r\n            #update the previos element of the element\r\n            previous_dict[arr[i]] = arr[i]\r\n        else:\r\n            #update the max_len\r\n            if max_len < len(seq) + 1:\r\n                max_len = len(seq) + 1\r\n            #update the previos element of the element\r\n            previous_dict[arr[i]] = arr[i]\r\n            #add the element to the sequence\r\n            seq.append(arr[i])\r\n        #check if the element is in the sequence before\r\n        for j in range(len(seq)):\r\n            #check if the element is bigger than the current element in the sequence\r\n            if arr[i] > seq[j]:\r\n                #check if the max length of the sequence for the next element is bigger\r\n                if max_len < len(seq) + 1:\r\n                    max_len = len(seq) + 1\r\n                #update th","votes":null},{"text":"\r\n    # Base Case\r\n    if len(arr) == 0:\r\n        return 0\r\n    # Create a list of tuples containing the length of the LIS ending at each index\r\n    # and the value at that index\r\n    dp = [(1, arr[0])]\r\n    for i in range(1, len(arr)):\r\n        # Take the LIS ending at the previous index\r\n        prev_lis = dp[i - 1][0]\r\n        prev_val = dp[i - 1][1]\r\n        # If the value at the current index is greater than the previous index value\r\n        if arr[i] > prev_val:\r\n            # Increase the length of the LIS ending at the current index\r\n            dp.append((prev_lis + 1, arr[i]))\r\n        else:\r\n            # If the value at the current index is smaller than the previous index value\r\n            # Find the LIS ending at the previous index and store it in prev_lis\r\n            prev_lis = 1\r\n            for j in range(i):\r\n                if arr[j] < arr[i]:\r\n                    prev_lis = max(prev_lis, dp[j][0])\r\n            # Increase the length of the LIS ending at the current index\r\n            dp.append((prev_lis + 1, arr[i]))\r\n    # Return the length of the LIS ending at the last index\r\n    return max(dp, key=lambda x: x[0])[0]\r\n\r\n\r","votes":null},{"text":"\r\n    length = len(arr)\r\n    if length == 1:\r\n        return 1\r\n    if length == 2:\r\n        return 2 if arr[0] < arr[1] else 1\r\n    # Initialize a LIS table with 1s.\r\n    lis = [1] * length\r\n    for i in range(1, length):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                lis[i] = max(lis[i], lis[j] + 1)\r\n    # Return the maximum LIS length.\r\n    return max(lis)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [","votes":null},{"text":"\r\n    n = len(arr)\r\n    # Initialize a table to store lengths\r\n    len_table = [1 for i in range(n)]\r\n    # Initialize a table to store previous indices\r\n    prev_index = [i for i in range(n)]\r\n    # Find the length of the longest increasing subsequence\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                # Check if the current value is greater than the value at the table\r\n                if len_table[j] + 1 > len_table[i]:\r\n                    len_table[i] = len_table[j] + 1\r\n                    prev_index[i] = j\r\n    # Return the length and the previous index\r\n    max_len = -1\r\n    max_index = -1\r\n    for i in range(n):\r\n        if len_table[i] > max_len:\r\n            max_len = len_table[i]\r\n            max_index = i\r\n    # Return the length and the previous index\r\n    return max_len, prev_index[max_index]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # create an empty list to store the length of the longest increasing subsequence\r\n    lis = []\r\n    \r\n    # create an empty list to store the indexes of the longest increasing subsequence\r\n    indexes = []\r\n    \r\n    # if the given sequence is empty\r\n    if not arr:\r\n        return 0, []\r\n    \r\n    # put the first element of the given sequence in the list of indexes\r\n    indexes.append(0)\r\n    \r\n    # iterate through the given sequence\r\n    for i in range(0, len(arr)):\r\n        \r\n        # if the current element is the largest element till now\r\n        largest = arr[i]\r\n        \r\n        # then put the current element in the list of indexes\r\n        indexes.append(i)\r\n        \r\n        # and put the length of the list of indexes in the list of lis\r\n        lis.append(len(indexes))\r\n        \r\n        # otherwise\r\n        else:\r\n            \r\n            # iterate through the list of indexes\r\n            for j in range(0, len(indexes)):\r\n                \r\n                # if the current element is greater than the current element in the list of indexes\r\n                if arr[i] > arr[indexes[j]]:\r\n                \r\n                    # then update the largest element in the list of indexes\r\n                    largest = arr[indexes[j]]\r\n                    \r\n                    # and update the index of the current element in the list of indexes\r\n                    indexes[j] = i\r\n                    \r\n                    # if the length of the list of indexes is greater than the length of the list of lis\r\n                    if len(indexes)>len(lis):\r\n                        \r\n                        # then put the length of the list of indexes in the list of lis\r\n                        lis.append(len(indexes))\r\n                        \r\n                        # and update the length of the list of indexes\r\n                        lis = indexes.copy()\r","votes":null},{"text":"\r\n    # if the length of the sequence is 1 then return 1\r\n    if len(arr) == 1:\r\n        return 1\r\n    else:\r\n        # else, sort the sequence\r\n        arr.sort()\r\n        # create an empty array\r\n        dp = [0]*len(arr)\r\n        # create a variable to store the maximum length\r\n        max_length = 1\r\n        dp[0] = 1\r\n        # start from the second element\r\n        for i in range(1, len(arr)):\r\n            # check if the current element is greater than the previous element\r\n            if arr[i] > arr[i-1]:\r\n                # if the current element is greater than the previous element then\r\n                # check if the length of the subsequence ending at the previous element is greater than the length of the subsequence ending at the current element\r\n                if dp[i-1] > dp[i]:\r\n                    # if the length of the subsequence ending at the previous element is greater than the length of the subsequence ending at the current element\r\n                    # then the length of the subsequence ending at the previous element is the length of the subsequence ending at the current element\r\n                    dp[i] = dp[i-1]\r\n                else:\r\n                    # if the length of the subsequence ending at the previous element is less than the length of the subsequence ending at the current element\r\n                    # then the length of the subsequence ending at the current element is the length of the subsequence ending at the previous element plus 1\r\n                    dp[i] = dp[i-1] + 1\r\n                    # and update the maximum length\r\n                    max_length = max(dp[i], max_length)\r\n            else:\r\n                # if the current element is less than the previous element then\r\n                # the length of the subsequence ending at the current element is 1\r\n                dp[i] = 1\r\n                # and update the maximum length\r\n              ","votes":null},{"text":"\r\n\r\n    \r\n    if len(arr) == 1:\r\n        return 1\r\n    \r\n    # Create a list for storing the lengths of the subsequence\r\n    L = [1 for i in range(len(arr))]\r\n    \r\n    # Initialize the length of the longest subsequence\r\n    M = 1\r\n    \r\n    # Traverse the given sequence\r\n    for i in range(1, len(arr)):\r\n        \r\n        # Traverse the previous sequence\r\n        for j in range(i):\r\n            \r\n            # If the element of the previous sequence is smaller than the current element\r\n            if arr[i] > arr[j]:\r\n                \r\n                # Find the maximum length of the subsequence ending with the current element\r\n                L[i] = max(L[i], L[j] + 1)\r\n                \r\n                # Update the maximum length of the longest subsequence\r\n                M = max(L[i], M)\r\n    \r\n    return M\r\n\r\n\r\n# Driver code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n\r\nprint(\"Length of the longest increasing sub","votes":null},{"text":"\r\n    # if there is only one element in the array, return 1 as longest increasing subsequence\r\n    if len(arr) == 1:\r\n        return 1\r\n\r\n    # L[i] contains the length of the longest increasing subsequence ending at A[i]. \r\n    L = [1 for i in range(len(arr))]\r\n\r\n    # i is the index of the element in the sequence\r\n    for i in range(1, len(arr)):\r\n        # j is the index of the element in the sequence\r\n        for j in range(0, i):\r\n            # if arr[i] is greater than arr[j], then increase the value of L[i] with the value of L[j]\r\n            if arr[i] > arr[j]:\r\n                L[i] = max(L[i], L[j] + 1)\r\n    # return the maximum value in L\r\n    return max(L)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [5, 4, 2, 1, 3]\r\n    print(\"Length of longest increasing subsequence : \" + str(longest_increasing_subsequence(arr)))\r\n\r\n    arr = [3, 2, 6, 4, 5, 1]\r\n    print(\"Length of longest increasing subsequence : \" + str(longest_increasing_subsequence(arr)))\r\n\r\n    arr = [1, 2, 3, 4, 5]\r\n    print(\"Length of longest increasing subsequence : \" + str(longest_increasing_subsequence(arr)))\r\n\r\n    arr = [2, 1, 5, 3, 4]\r\n    print(\"Length of longest increasing subsequence : \" + str(longest_increasing_subsequence(arr)))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10","votes":null},{"text":"\r\n    # A subsequence of a sequence is a sequence that can be derived from the original sequence by deleting\r\n    # some elements without changing the order of the remaining elements.\r\n    # For example, the following are subsequences of the sequence [3, 6, 2, -1, 4]:\r\n    # [3, 6, 2, -1, 4] itself\r\n    # [3, 6, 2, -1]\r\n    # [3, 6, 2]\r\n    # [3, 6]\r\n    # [3]\r\n    # [6, 2, -1, 4]\r\n    # [6, 2, -1]\r\n    # [6, 2]\r\n    # [6]\r\n    # []\r\n    # A sequence with no elements and a sequence with only one element are both longest increasing subsequences of\r\n    # empty sequence.\r\n    # There may be more than one longest increasing subsequences, find any one of them.\r\n    # Return 0 if the longest increasing subsequence does not exist.\r\n    # Example\r\n    # Example 1:\r\n    # Input: [3, 6, 2, -1, 4]\r\n    # Output: 5\r\n    # Explanation:\r\n    # The longest increasing subsequence is [3, 6, 2, -1, 4], return its length 5.\r\n    # Example 2:\r\n    # Input: [10, 9, 2, 5, 3, 7, 101, 18]\r\n    # Output: 4\r\n    # Explanation:\r\n    # The longest increasing subsequence is [10, 9, 2, 5], return its length 4.\r\n    # Note:\r\n    # Length of the given array will not exceed 1000.\r\n    # Array may contain duplicates, that's equals to say, one element may appear more than once in the array.\r\n    # The length of array is a positiv","votes":null},{"text":"\r\n\r\n    # create an empty list to store the subsequence\r\n    lis = []\r\n\r\n    # append the first element to the list\r\n    lis.append(arr[0])\r\n\r\n    # traverse the given sequence\r\n    for i in range(1, len(arr)):\r\n\r\n        # traverse the list from back to front\r\n        for j in range(len(lis) - 1, -1, -1):\r\n\r\n            # if the element is not greater than the last element of the list\r\n            if arr[i] > lis[j]:\r\n\r\n                # delete the last element\r\n                del lis[j]\r\n\r\n                # append the element to the list\r\n                lis.append(arr[i])\r\n\r\n                # break from the inner loop\r\n                break\r\n\r\n            # if the element is less than or equal to the last element of the list\r\n            elif arr[i] <= lis[j]:\r\n\r\n                # break from the inner loop\r\n                break\r\n\r\n    # return the length of the list\r\n    return len(lis)\r\n\r\n\r\n# Driver code\r\narr = [1, 4, 2, 3, 8, 9, 7, 6, 5, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\r\nprint(longest_increasing_subsequence(arr))\r\n","votes":null},{"text":"\r\n\r\n    # Find the length of the longest increasing subsequence.\r\n    n = len(arr)\r\n    seq = [1] * n\r\n    inc = [1] * n\r\n\r\n    for i in range(1, n):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                if inc[i] < inc[j] + 1:\r\n                    inc[i] = inc[j] + 1\r\n                    seq[i] = seq[j]\r\n            elif inc[i] < 1:\r\n                inc[i] = 1\r\n                seq[i] = i\r\n\r\n    # Construct the actual increasing subsequence.\r\n    i = n - 1\r\n    actual = []\r\n    while i >= 0:\r\n        actual.append(arr[i])\r\n        i = seq[i]\r\n\r\n    return actual\r\n\r\n\r\n# Test cases\r\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]))\r\n# [10, 22, 33, 50, 60, 80]\r\nprint(longest_increasing_subsequence([100, 10, 200, 3, 2, 1, 1000]))\r\n# [1, 2, 3, 100, 1000]\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6]))\r\n# [1, 2, 3, 4, 5, 6]\r\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7]))\r\n# [1, 2, 3, 4, 5","votes":null},{"text":"\r\n    # Length of the input sequence\r\n    n = len(arr)\r\n\r\n    # The value of the last element in the longest increasing subsequence.\r\n    # Initialize it with -1.\r\n    last = -1\r\n\r\n    # To store the length of longest increasing subsequence.\r\n    # Initialize it with 0.\r\n    len = 0\r\n\r\n    # To store the index of the last element in the longest increasing subsequence.\r\n    last_index = 0\r\n\r\n    # to store the position of the current element in the longest increasing subsequence.\r\n    pos = [0] * n\r\n\r\n    # To store the longest increasing sequence.\r\n    lis = [0] * n\r\n\r\n    # Initialize the lis value for first element\r\n    lis[0] = 1\r\n\r\n    # Find the longest increasing subsequence for the first element\r\n    for i in range(1, n):\r\n        # If current element is greater than the last element in the longest increasing\r\n        # subsequence, then update the values in lis and pos\r\n        if arr[i] > arr[last_index]:\r\n            lis[i] = lis[last_index] + 1\r\n            pos[i] = last_index\r\n\r\n            # Else, find the largest value in the lis that is smaller than\r\n            # the current element, and update the values in lis and pos\r\n        else:\r\n            j = last\r\n            while j >= 0:\r\n                if arr[j] < arr[i]:\r\n                    if lis[j] + 1 > lis[i]:\r\n                        lis[i] = lis[j] + 1\r\n                        pos[i] = j\r\n                j = pos[j]\r\n\r\n        # If the current subsequence is longer than the best known subsequence,\r\n        # then update the best known subsequence\r\n        if lis[i] > len:\r\n            len = lis[i]\r","votes":null},{"text":"\r\n    # 1. Let's start with a list for the subsequence.\r\n    subseq = []\r\n\r\n    # 2. Let's start with an empty list for the length of the subsequence.\r\n    seq_length = []\r\n\r\n    # 3. Let's start with a list of the length of the subsequence.\r\n    subseq_length = [1]\r\n\r\n    # 4. Let's start with a list of the index of the subsequence.\r\n    index = [0]\r\n\r\n    # 5. Let's start with a list of the index of the subsequence.\r\n    next_index = [1]\r\n\r\n    # 6. Let's add the first element to the subsequence.\r\n    subseq.append(arr[0])\r\n\r\n    for i in range(1, len(arr)):\r\n        # 7. Check if the element is greater than the previous element.\r\n        if arr[i] > subseq[-1]:\r\n            # 8. If it is, update the subsequence.\r\n            subseq.append(arr[i])\r\n            subseq_length.append(subseq_length[-1] + 1)\r\n            index.append(i)\r\n            next_index.append(subseq_length[-1])\r\n\r\n        else:\r\n            # 9. If it's not, find the index of the last element of the subsequence that is less than the current element.\r\n            j = subseq_length[-1] - 1\r\n            while j >= 0:\r\n                if arr[i] > subseq[j]:\r\n                    # 10. If it's greater, update the subsequence.\r\n                    subseq[j] = arr[i]\r\n                    subseq_length[j] = subseq_length[-1]\r\n                    index[j] = i\r\n                    next_index[j] = subseq_length[j]\r\n                    break\r\n                j -= 1\r\n","votes":null},{"text":"\r\n    n = len(arr)\r\n    lis = [1] * (n)\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n    return max(lis)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(longest","votes":null},{"text":"\r\n    \r\n    # Base case: LIS of array with only one element is 1\r\n    if len(arr) == 1:\r\n        return 1\r\n\r\n    # Initialize all lengths as 1\r\n    lis = [1] * len(arr)\r\n\r\n    # Compute optimized LIS values in bottom up manner\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j]:\r\n                lis[i] = max(lis[i], 1 + lis[j])\r\n\r\n    # Return the maximum value in LIS array\r\n    return max(lis)\r\n\r\n\r\n# Driver program to test above function\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nprint(\"Length of longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\narr = [2, 3, 1, 5, 6, 4, 10]\r\nprint(\"Length of longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\narr = [4, 10, 4, 3, 8, 9]\r\nprint(\"Length of longest increasing subsequence is\", longest_incre","votes":null},{"text":"\r\n    \r\n    # Create a list of tuples in order to keep track of the length and the index of the number in the list\r\n    # (1,0) means the number is at index 0 and its length is 1\r\n    # (2,1) means the number is at index 1 and its length is 2\r\n    # (2,3) means the number is at index 3 and its length is 2\r\n    # (4,0) means the number is at index 0 and its length is 4\r\n    # (3,2) means the number is at index 2 and its length is 3\r\n    # (2,4) means the number is at index 4 and its length is 2\r\n    # (3,5) means the number is at index 5 and its length is 3\r\n    # (4,6) means the number is at index 6 and its length is 4\r\n    # (2,7) means the number is at index 7 and its length is 2\r\n    # (1,8) means the number is at index 8 and its length is 1\r\n    # (4,9) means the number is at index 9 and its length is 4\r\n    # (5,10) means the number is at index 10 and its length is 5\r\n    \r\n    # Create a list of tuples\r\n    max_length = []\r\n    \r\n    # Create a list of the length of the subsequence\r\n    length = []\r\n\r\n    # Create a list of the index of the number in the subsequence\r\n    index = []\r\n    \r\n    # Loop through the array\r\n    for i in range(len(arr)):\r\n        \r\n        # Initialize the number at the current index as the current number itself\r\n        number = arr[i]\r\n        \r\n        # Initialize the length of the subsequence as 1\r\n        # This is because the number itself constitutes a subsequence of length 1\r\n        length.append(1)\r\n        ","votes":null},{"text":"\r\n    # Maximum length is the length of the sequence itself.\r\n    max_length = len(arr)\r\n    # Length of the longest increasing subsequence ending at the current index.\r\n    lis = [1] * max_length\r\n    for i in range(1, max_length):\r\n        # Start from the previous LIS and check if the current element is greater than the previous element in the LIS.\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n\r\n    # Return the maximum value in LIS.\r\n    return max(lis)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(\"Longest increasing subsequence is \" + str(longest_increasing_subsequence(arr)))\r\n    arr = [7, 8, 2, 9, 6, 5, 4, 3, 1, 10, 20, 15, 12, 13, 17]\r\n    print(\"Longest increasing subsequence is \" + str(longest_increasing_subsequence(arr)))\r\n    arr = [7, 8, 2, 9, 6, 5, 4, 3, 1, 10, 20, 15, 12, 13, 17]\r\n    print(\"Longest increasing subsequence is \" + str(longest_increasing_subsequence(arr)))\r\n    arr = [100, 1, 2, 1, 100, 1, 2, 1, 100, 1, 2, 1, 100, 1, ","votes":null},{"text":"\r\n    # length of the longest increasing subsequence is the length of the longest increasing subsequence in the array of\r\n    # the longest increasing subsequence of the given sequence. \r\n    # length of the longest increasing subsequence is the length of the longest increasing subsequence in the array of\r\n    # the longest increasing subsequence of the given sequence.\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasing subsequence of the given sequence)\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasing subsequence of the given sequence)\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasing subsequence of the given sequence)\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasing subsequence of the given sequence)\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasing subsequence of the given sequence)\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasing subsequence of the given sequence)\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasing subsequence of the given sequence)\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasing subsequence of the given sequence)\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasing subsequence of the given sequence)\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasing subsequence of the given sequence)\r\n    # LIS(arr) = max(arr[i] + index of the longest increasing subsequence in the array of the longest increasin","votes":null},{"text":"\r\n    # Create an empty list of length n to store the longest increasing subsequence\r\n    lis = [0] * len(arr)\r\n    # Initially, the longest increasing subsequence of a sequence is itself\r\n    lis[0] = 1\r\n    # Initialize max as 0\r\n    max = 0\r\n    # Add all elements of the given sequence to the list\r\n    for i in range(1, len(arr)):\r\n        # If the current element is greater than the last added element of the list, update the list\r\n        if arr[i] > arr[i - 1]:\r\n            lis[i] = lis[i - 1] + 1\r\n        # Otherwise, set the list value to 1\r\n        else:\r\n            lis[i] = 1\r\n        # Update max if the value of the list is greater than max\r\n        max = max if max > lis[i] else lis[i]\r\n    return max\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create an array to store lengths of LIS for all indexes\r\n    lis = [1] * len(arr)\r\n    \r\n    # Compute lengths of LIS for all indexes\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                lis[i] = max(lis[i], 1 + lis[j])\r\n    \r\n    # Return maximum value in lis[]\r\n    return max(lis)\r\n\r\n# Driver Code\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\nn = len(arr)\r\nprint(\"The length of the LIS is\", longest_increasing_subsequence(arr))\r\n\r\n\"\"\"\r\nSample Input:\r\n\r\narr = [10, 22, 9, 33, 21, 50, 41, 60]\r\n\r\nSample Output:\r\n\r\nThe length of the LIS is 4\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\n\r\nSpace Complexity: O(n)\r\n\r\nwhere n is the length of the array.\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\nThis is a Dynamic Programming based solution. \r\nWe can solve this problem in linear time by using a combination of \r\nDynamic Programming and Binary Search. \r\nWe can use a binary search to find the index of the minimum element \r\nin the subsequence ending with a given","votes":null},{"text":"\r\n    n = len(arr)\r\n    lis = [1] * n    # lis[i] will store the length of the longest increasing subsequence ending with arr[i]\r\n    lis_indices = [0] * n  # lis_indices[i] will store the index of the largest element in the subsequence ending with arr[i]\r\n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\r\n                lis[i] = lis[j] + 1\r\n                lis_indices[i] = j\r\n\r\n    return lis\r\n\r\n\r\nl = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(\"The length of the longest increasing subsequence is \" + str(\r\n    longest_increasing_subsequence(l)[-1]))\r\nprint(\"The longest increasing subsequence is: \", end=\"\")\r\nfor i in range(len(longest_increasing_subsequence(l)) - 1, -1, -1):\r\n    if longest_increasing_subsequence(l)[i] != 1:\r\n        print(l[i], end=\" \")\r\n        i = lis_indices[i]\r\n    else:\r\n        break\r\n\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    if len(arr) == 0:\r\n        return 0\r\n    elif len(arr) == 1:\n        return 1\r\n    else:\r\n        arr.sort()\r\n        max_len = 1\r\n        for i in range(1, len(arr)):\r\n            if arr[i] > arr[i - 1]:\r\n                max_len += 1\r\n            else:\r\n                arr[i] = arr[i - 1]\r\n        return max_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 7, 4, 5, 11, 6, 12]\r\n    print(\"Length of the longest increasing subsequence is 5.\")\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [2, 1, 4, 3, 5, 6]\r\n    print(\"Length of the longest increasing subsequence is 4.\")\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n log n)\r\nSpace Complexity: O(1)\r\n\r\nTest Case:\r\nInput: arr = [10, 7, 4, 5, 11, 6, 12]\r\nOutput: 5\r\nExpected: 5\r\n\r\nInput: arr = [2, 1, 4, 3, 5, 6]\r\nOutput: 4\r\nExpected: 4\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    # Create an empty list to store results\r\n    results = []\r\n    # for i in range(len(arr)):\r\n    #     results.append(arr[i])\r\n\r\n    # Initializing the array\r\n    L = [1]*len(arr)\r\n    # Initializing the array\r\n    prev = [None]*len(arr)\r\n\r\n    # Finding the length of the longest increasing subsequence\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j] and L[i] < L[j] + 1:\r\n                L[i] = L[j] + 1\r\n                prev[i] = j\r\n    # Storing the results\r\n    seq = []\r\n    # Storing the results\r\n    i = len(arr) - 1\r\n    while i >= 0:\r\n        seq.append(arr[i])\r\n        i = prev[i]\r\n\r\n    return L[len(arr) - 1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [45, 177, 98, 123, 21, 18, 3, 7, 5, 2]\r\n    print(\"The length of the longest increasing subsequence is: \" +\r\n          str(longest_increasing_sub","votes":null},{"text":"\r\n    n = len(arr)\r\n    dp = [1]*n\r\n    maximum = 1\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if arr[i]>arr[j] and dp[i]<dp[j]+1:\r\n                dp[i] = dp[j]+1\r\n                maximum = max(maximum, dp[i])\r\n    return maximum\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\r\n    print(\"Length of longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(\"Length of longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n\r\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\r\n    print(\"Length of longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 15, 13]\r\n    print(\"Length of longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 15, -13]\r\n    print(\"Length of longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 15,","votes":null},{"text":"\r\n\r\n    # Length of the longest increasing subsequence \r\n    res = 0\r\n    # Length of the current increasing subsequence \r\n    curr_len = 1\r\n\r\n    # The index of the longest increasing subsequence \r\n    longest_inc_subseq_index = 0\r\n\r\n    # The index of the current increasing subsequence \r\n    curr_inc_subseq_index = 0\r\n\r\n    # Mapping from each element to its index in the longest increasing subsequence \r\n    longest_inc_subseq_mapping = {}\r\n\r\n    # Mapping from each element to its index in the current increasing subsequence \r\n    curr_inc_subseq_mapping = {}\r\n\r\n    # Iterate through the given sequence \r\n    for i in range(len(arr)):\r\n        # If the element is less than or equal to the last number in the longest increasing subsequence then \r\n        # we need to find the index of that number in the longest increasing subsequence \r\n        # and then extend the current increasing subsequence to include the next number \r\n        if arr[i] <= arr[longest_inc_subseq_index]:\r\n            # Find the index of the last number in the longest increasing subsequence \r\n            while longest_inc_subseq_index >= 0 and arr[i] <= arr[longest_inc_subseq_index]:\r\n                longest_inc_subseq_index = longest_inc_subseq_mapping[arr[longest_inc_subseq_index]]\r\n\r\n            # Store the index of the last number in the longest increasing subsequence in the mapping for the current element \r\n            curr_inc_subseq_mapping[arr[i]] = longest_inc_subseq_index\r\n\r\n            # Extend the current increasing subsequence by 1 \r\n            curr_len += 1\r\n        else:\r\n            # Store the index of the element in the current increasing subsequence \r\n            curr_inc_subseq_mapping[arr[i]] = curr_inc_subseq_index\r\n","votes":null},{"text":"\r\n    if len(arr) == 0:\r\n        return 0\r\n\r\n    length = [1] * len(arr)\r\n    # length of the longest increasing subsequence ending with arr[i]\r\n\r\n    for i in range(1, len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                length[i] = max(length[i], length[j] + 1)\r\n    return max(length)\r\n\r\n\r\nprint(longest_increasing_subsequence([1, 8, 3, 4, 10, 2, 1, 7]))\r\nprint(longest_increasing_subsequence([5, 3, 2, 7, 4, 1, 10, 6, 9]))\r\nprint(longest_increasing_subsequence([1, 10, 11, 3, 2, 4, ","votes":null},{"text":"\r\n    ls = [arr[0]]\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > ls[-1]:\r\n            ls.append(arr[i])\r\n        else:\r\n            j = len(ls)-1\r\n            while j >= 0 and arr[i] < ls[j]:\r\n                j -= 1\r\n            ls[j+1] = arr[i]\r\n    return len(ls)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [3, 5, 2, 1, 6, 0, 3, 4, 7, 9, 8]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [0, 1, 0, 3, 2, 3]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [0, 1, 5, 3, 2, 3]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [0, 1, 5, 3, 3, 2]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [0, 1, 5, 3, 3, 2, 3]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [0, 1, 5, 3, 3, 2, 3, 4, 5, 6]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [0, 1, 5, 3, 3, 2, 3, 4, 5, 6, 7]\r\n    print(longest_increasing_subsequence(arr))\r\n    arr = [0, 1, 5, 3, 3, 2, 3","votes":null},{"text":"\r\n    # Length of the longest increasing subsequence.\r\n    length = 0\r\n    # Length of the current subsequence.\r\n    current = 1\r\n    # Stores the index of the longest increasing subsequence.\r\n    index = 0\r\n    # Stores the previous index.\r\n    previous = None\r\n    # Loop through the array.\r\n    for i in range(len(arr)):\r\n        # Check if the current element is greater than the previous element.\r\n        if previous is None or arr[i] > arr[previous]:\r\n            # If it is, assign the current index to the current subsequence length.\r\n            current = i + 1\r\n        else:\r\n            # If it is not, check if the current subsequence is greater than the length of the longest increasing subsequence.\r\n            if current > length:\r\n                # If it is, update the length of the longest increasing subsequence and the index of the longest increasing subsequence.\r\n                length = current\r\n                index = previous\r\n        previous = i\r\n    # Return the index of the longest increasing subsequence.\r\n    return index\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # We use a dictionary of sequences to store the current longest subsequence and\r\n    # the maximum value in that subsequence. We start each subsequence with the\r\n    # first element in the sequence, and update it as we encounter new elements.\r\n    #\r\n    # Note: Since we are storing only the length of the longest subsequence, we\r\n    # only need to store the current maximum value of the subsequence, not the\r\n    # whole subsequence.\r\n    d = {0: (1, arr[0])}\r\n\r\n    # We iterate over the rest of the sequence.\r\n    for i in range(1, len(arr)):\r\n        # We initialize an index variable, j, to keep track of the previous\r\n        # longest subsequence.\r\n        j = 0\r\n\r\n        # We iterate over each subsequence in the dictionary.\r\n        for j in range(len(d)):\r\n\r\n            # If the current element is less than the maximum of the subsequence,\r\n            # we know that we can skip it.\r\n            if arr[i] < d[j][1]:\r\n                pass\r\n\r\n            # If the current element is greater than the maximum of the\r\n            # subsequence, we update the subsequence with the current element.\r\n            elif arr[i] > d[j][1]:\r\n                d[j] = (i + 1, arr[i])\r\n\r\n        # After we exit the loop, we add the subsequence to the dictionary if\r\n        # it's not already in there, and update the maximum value if it's\r\n        # greater than the previous maximum.\r\n        if d[j][0] != i + 1:\r\n            d[i] = (i + 1, arr[i])\r\n        elif d[j][1] < arr[i]:\r\n            d[j] = (i + 1, arr[i])\r\n\r\n    # We return the maximum of the subsequence lengths.\r\n    return max([len(s) for s in d.values()])","votes":null},{"text":"\r\n    # Base case\r\n    if len(arr) == 1:\r\n        return 1\r\n\r\n    # Initialize a list of size n\r\n    # The list will contain subsequence lengths\r\n    # for all subsequences of the given sequence\r\n    lis = [1]*len(arr)\r\n\r\n    # Compute the length of the longest\r\n    # increasing subsequences\r\n    for i in range(len(arr)):\r\n        for j in range(i):\r\n            if arr[i] > arr[j]:\r\n                lis[i] = max(lis[i], lis[j]+1)\r\n\r\n    # Return the maximum value in the\r\n    # list of subsequence lengths\r\n    return max(lis)\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    arr = [3, 10, 2, 1, 20]\r\n    print(longest_increasing_subsequence(arr))\r\n\r\n    arr = [10, 1, 100, 4, 2, 10, 50, 6]\r\n    print(longest","votes":null},{"text":"\r\n    # LIS of the sequence is a strictly increasing sequence such that no element in the sequence is greater than the previous element\r\n    # Use a dictionary to store a LIS\r\n    d = {}\r\n    for i in range(len(arr)):\r\n        # for each element in the sequence\r\n        # check if the element is already present in the dict\r\n        # if it is present then update the value in the dict\r\n        # else add the element to the dict\r\n        if arr[i] in d:\r\n            d[arr[i]] = max(d[arr[i]], i)\r\n        else:\r\n            d[arr[i]] = i\r\n    # return the length of the largest value in the dict\r\n    return max(d.values()) + 1\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\n    print(\"The length of the longest increasing subsequence is\", longest_increasing_subsequence(arr))\r\n    # Output: The length of the longest increasing subsequence is 6\r","votes":null}],"time":{"count":56.0,"avg":152511.5640714286,"std":37301.004429827,"cov":0.244578204}}
{"id":550,"question":"def find_Max(arr,low,high):\r\n    \"\"\"Write a python function to find the maximum element in a sorted and rotated array.\"\"\"","answers":[{"text":"\r\n    # low is the start index\r\n    # high is the end index\r\n    if low == high:\r\n        return arr[low]\r\n\r\n    mid = low + (high - low) \/\/ 2\r\n\r\n    # if the mid element is largest, then it is the highest element\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr, low, mid)\r\n\r\n    # if the mid element is smaller than the high element, then the high element is the highest element\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr, mid + 1, high)\r\n\r\n    # if the mid element is equal to the high element, then the mid element to the left must be the highest element\r\n    # since the array is sorted, the leftmost element must be the highest element\r\n    else:\r\n        return find_Max(arr, low, mid)\r\n\r\n\r","votes":92745.004},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":97587.152},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    elif arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n        \r\n\r\n\r\n\r","votes":109619.548},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    if arr[mid]>arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid]<arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        if arr[mid]>arr[low]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid)\r\n\r\n# arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\r\n# print(find_Max(arr,0,20))\r\n\r","votes":110136.916},{"text":"\r\n    max_ele=arr[low]\r\n    for i in range(low,high+1):\r\n        if max_ele<arr[i]:\r\n            max_ele=arr[i]\r\n    return max_ele\r\n\r","votes":139888.504},{"text":"\r\n    # Base Case\r\n    if high < low:\r\n        return -1\r\n    # if there is only one element\r\n    if low == high:\r\n        return arr[low]\r\n    # if there are two elements\r\n    if high == low + 1:\r\n        return max(arr[low],arr[high])\r\n    \r\n    mid = (low + high) \/\/ 2\r\n    \r\n    # Check if the mid element is greater than the mid+1 element.\r\n    if arr[mid] > arr[mid+1]:\r\n        # if yes then the mid element is the maximum element\r\n        return arr[mid]\r\n    \r\n    # Check if the mid element is smaller than the mid-1 element.\r\n    if arr[mid] < arr[mid-1]:\r\n        # if yes then the mid element is the maximum element\r\n        return arr[mid]\r\n    \r\n    # if mid element is smaller than both its neighbouring elements\r\n    # then we have to search in the left sub array.\r\n    if arr[low] >= arr[mid]:\r\n        return find_Max(arr,low,mid-1)\r\n    \r\n    # if mid element is greater than both its neighbouring elements\r\n    # then we have to search in the right sub array.\r\n    return find_Max(arr,mid+1,high)\r\n\r\n\r\n# Driver Code\r\narr = [1, 3, 5, 7, 9, 11, 13, 15, 2, 4, 6, 8, 10, 12, 14, 16]\r\nn = len(arr)\r\nprint(\"Maximum element is \",find_Max(arr,0, n-1))\r\n\r\n\r\n# Sample Input-Output\r\n\r\n# Input : arr[] = {1, 3, 5, 7, 9, 11, 13, 15, 2, 4, 6, 8, 10,","votes":147057.788},{"text":"\r\n    if low < high:\r\n        mid = (low + high)\/\/2\r\n        if arr[mid] > arr[high]:\r\n            return find_Max(arr,low,mid)\r\n        elif arr[mid] < arr[high]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n    return arr[low]\r\n\r\n\r\n# Driver program to test above function","votes":148414.776},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    if low == high-1:\r\n        if arr[low] > arr[high]:\r\n            return arr[low]\r\n        else:\r\n            return arr[high]\r\n    mid = (low+high)\/\/2\r\n    if arr[low] > arr[high]:\r\n        if arr[mid] > arr[low]:\r\n            return find_Max(arr,low,mid)\r\n        elif arr[mid] < arr[high]:\r\n            return find_Max(arr,mid,high)\r\n        else:\r\n            return arr[high]\r\n    if arr[low] < arr[high]:\r\n        if arr[mid] < arr[high]:\r\n            return find_Max(arr,mid,high)\r\n        elif arr[mid] > arr[low]:\r\n            return find_Max(arr,low,mid)\r\n        else:\r\n            return arr[low]\r\n\r\n\r\n\r","votes":150065.74},{"text":"\r\n    if low<high:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid]<arr[mid+1]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid)\r\n    else:\r\n        return arr[low]\r\n\r\n\r","votes":151730.968},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    elif arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,high,mid-1)\r\n\r\n\r","votes":153191.604},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = low + (high - low)\/\/2\r\n    \r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n    \r\narr = [10, 12, 15, 16, 18, 19, 20, 25, 26, 27, 30, 31, 32, 40, 41, 42, 43, 47, 50, \r\n       51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, \r\n       73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, \r\n       93, 94, 95, 96, 97, 98, 99, 100]\r\n\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\n\r","votes":155721.14},{"text":"\r\n    # If there is only one element\r\n    if low == high:\r\n        return arr[low]\r\n    # Find the middle element\r\n    mid = (high+low) \/\/ 2\r\n    # Check if the mid element is the largest element\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr, low, mid)\r\n    # Check if the mid element is the largest element\r\n    if arr[mid] < arr[high]:\r\n        return find_Max(arr, mid+1, high)\r\n    # If the mid element is the largest element\r\n    return arr[high]\r\n    \r\n    # If the array is not sorted\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr, low, mid)\r\n    # If the array is not sorted\r\n    if arr[mid] < arr[high]:\r\n        return find_Max(arr, mid+1, high)\r\n    # If the array is sorted\r\n    return arr[high]\r\n    \r\n    # If the array is not sorted\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr, low, mid)\r\n    # If the array is not sorted\r\n    if arr[mid] < arr[high]:\r\n        return find_Max(arr, mid+1, high)\r\n    # If the array is sorted\r\n    return arr[high]\r\n    \r\n    # If the array is not sorted\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr, low, mid)\r\n    # If the array is not sorted\r\n    if arr[mid] < arr[high]:\r\n        return find_Max(arr, mid+1, high)\r\n    # If the array is sorted\r\n    return arr[high]\r\n    \r\n    # If the array is not sorted\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr, low, mid)\r\n    # If the array is not sorte","votes":164442.288},{"text":"\r\n    # Base Case\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high)\/\/2\r\n    # Recursive Case\r\n    # if arr[mid] is greater than arr[mid+1] then arr[mid+1] is the first element\r\n    # if arr[mid] is less than arr[mid+1] then arr[mid] is the first element\r\n    if arr[mid] > arr[mid+1]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [6,7,1,2,3,4,5]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    print","votes":165639.7},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    if arr[mid]<arr[mid+1]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid)\r\n\r\narr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\r\nprint(find_Max(arr,0,99))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":167093.872},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low+high) \/\/2\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r","votes":178976.592},{"text":"\r\n    if (low > high):\r\n        return -1\r\n    if (high == low):\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if (arr[mid] > arr[high]):\r\n        return find_Max(arr, low, mid)\r\n    elif (arr[mid] < arr[high]):\r\n        return find_Max(arr, mid + 1, high)\r\n    else:\r\n        return find_Max(arr, low, mid - 1)\r\n\r\n\r","votes":179487.708},{"text":"\r\n    while low<=high:\r\n        mid = (low+high)\/\/2\r\n        if mid<high and arr[mid]<=arr[mid+1]:\r\n            low = mid+1\r\n        elif mid>low and arr[mid-1]>=arr[mid]:\r\n            high = mid-1\r\n        else:\r\n            return arr[mid]\r\n\r\n\r","votes":187777.348},{"text":"\r\n    if high<low:\r\n        return -1\r\n    if high==low:\r\n        return arr[low]\r\n    mid = (high+low)\/\/2\r\n    if arr[mid]>arr[mid+1]:\r\n        return arr[mid]\r\n    elif arr[mid]<arr[mid+1]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid)\r\n\r\n\r\n\r","votes":190691.7},{"text":"\r\n    if high<low:\r\n        return -1\r\n    if high==low:\r\n        return arr[low]\r\n    if high==low+1:\r\n        if arr[high]>arr[low]:\r\n            return arr[high]\r\n        else:\r\n            return arr[low]\r\n    mid=(low+high)\/\/2\r\n    if arr[mid]>arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        if arr[high]>arr[mid]:\r\n            return find_Max(arr,mid,high)\r\n        else:\r\n            if arr[mid]>arr[low]:\r\n                return find_Max(arr,low,mid)\r\n            else:\r\n                return find_Max(arr,mid,high)\r\n\r\n\r\narr=[9,11,12,13,15,16,18,19,20,21,22,23,25,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\r\n\r\nprint(find_Max(arr,0,len(arr)-1))","votes":200177.788},{"text":"\r\n    if (high >= low):\r\n        mid = low + (high - low) \/\/ 2\r\n        if (arr[mid] > arr[high]):\r\n            return find_Max(arr, low, mid)\r\n        elif (arr[mid] < arr[high]):\r\n            return find_Max(arr, mid + 1, high)\r\n        else:\r\n            return arr[mid]\r\n    else:\r\n        return arr[low]\r\n\r\n\r","votes":200977.756},{"text":"\r\n    while(low<=high):\r\n        mid=(low+high)\/\/2\r\n        if(mid+1<len(arr) and arr[mid]>arr[mid+1]):\r\n            return arr[mid]\r\n        elif(mid-1>=0 and arr[mid]<arr[mid-1]):\r\n            return arr[mid]\r\n        elif(arr[low]<arr[mid]):\r\n            low=mid+1\r\n        elif(arr[mid]<arr[high]):\r\n            high=mid-1\r\n        else:\r\n            return arr[mid]\r\n    return -1\r\n\r\narr = [12, 15, 16, 19, 20, 21, 23, 30, 31, 35, 42, 44]\r\n# print(find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if (low == high):\r\n        return arr[low]\r\n\r\n    mid = (low + high) \/\/ 2\r\n\r\n    if (arr[mid] < arr[low]):\r\n        return find_Max(arr,low,mid)\r\n\r\n    elif (arr[mid] > arr[high]):\r\n        return find_Max(arr,mid+1,high)\r\n\r\n    else:\r\n        max_left = find_Max(arr,low,mid-1)\r\n        max_right = find_Max(arr,mid+1,high)\r\n        return max(max_left,max_right)\r\n\r\narr = [10,12,13,16,18,19]\r\nn = len(arr)\r\nprint(\"The maximum element in the array is :","votes":null},{"text":"\r\n\r\n    while low<=high:\r\n        mid=(low+high)\/\/2\r\n        if arr[mid]>arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid]<=arr[mid+1]:\r\n            if arr[mid-1]>arr[mid]:\r\n                return arr[mid]\r\n            else:\r\n                low=mid+1\r\n    return None\r\n\r\n\r\nif __name__==\"__main__\":\r\n    arr=[3,4,5,1,2]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n    arr1=[2,3,4,5,6,7,1,2]\r\n    print(find_Max(arr1,0,len(arr1)-1))\r\n\r\n    arr2=[2,3,4,5,1]\r\n    print(find_Max(arr2,0,len(arr2)-1))\r\n\r\n    arr3=[2,3,4,1,2]\r\n    print(find_Max(arr3,0,len(arr3)-1))\r\n\r\n    arr4=[3,4,5,1,2,3]\r\n    print(find_Max(arr4,0,len(arr4)-1))\r\n\r\n    arr5=[2,1]\r\n    print(find_Max(arr5,0,len(arr5)-1))\r\n\r\n    arr6=[2,3]\r\n    print(find_Max(arr6,0,len(arr6)-1))\r\n\r\n    arr7=[3,2,1]\r\n    print(find_Max(arr7,0,len(arr7)-1))\r\n\r\n    arr8=[1,2,3]\r\n    print(find_Max(arr8,0,len(arr8)-1))\r\n\r\n    arr9=[1,2]\r\n    print(find_Max(arr9,0,len(ar","votes":null},{"text":"\r\n    if (high == low):\r\n        return arr[low]\r\n\r\n    mid = (high+low)\/\/2\r\n    \r\n    # If the middle element is the maximum element\r\n    if arr[mid] >= arr[low]:\r\n        if (arr[mid] > arr[high]):\r\n            return arr[mid]\r\n        else:\r\n            # If the middle element is not the maximum element\r\n            return find_Max(arr, low, mid)\r\n    else:\r\n        return find_Max(arr, mid+1, high)\r\n\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=(low+high)\/\/2\r\n    if arr[mid]==arr[high]:\r\n        return find_Max(arr, low, mid)\r\n    elif arr[mid]>arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid)\r\n\r\n\r\n\r\narr=[1,2,3,4,5,6,7,8,9,10,11,12]\r\nrot=8\r\narr=arr[rot:]+arr[:rot]\r\n# print(arr)\r\nx=find_Max(arr,0,len(arr)-1)\r\nprint(x)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n\r\n    mid = (low + high)\/\/2\r\n    if arr[mid] == arr[high]:\r\n        return find_Max(arr, low, mid)\r\n    if arr[low] <= arr[mid]:\r\n        return find_Max(arr, low, mid)\r\n    if arr[mid] <= arr[high]:\r\n        return find_Max(arr, mid+1, high)\r\n\r\n\r\narr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\r\n\r\nprint(find_Max(arr, 0, len(arr)-1))\r\n\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high)\/\/2\r\n    if arr[mid] < arr[low]:\r\n        return find_Max(arr,mid+1,high)\r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr,low,mid)\r\n\r\nn = int(input())\r\narr = list(map(int,input().split()))\r\n\r\nprint(find_Max(arr,0,n-1))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high)\/\/2\r\n    if arr[low]<arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n\r\n    if(low==high):\r\n        return arr[low]\r\n\r\n    mid = (low+high)\/\/2\r\n\r\n    if(arr[low]<arr[mid]):\r\n        return find_Max(arr,low,mid)\r\n\r\n    elif(arr[mid]>arr[high]):\r\n        return find_Max(arr,mid+1,high)\r\n\r\n    elif(arr[low]<arr[high]):\r\n        return find_Max(arr,mid+1,high)\r\n\r\n    elif(arr[mid]<arr[high]):\r\n        return find_Max(arr,mid+1,high)\r\n\r\n    else:\r\n        return arr[low]\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Base Case\r\n    if low == high:\r\n        return arr[low]\r\n\r\n    mid = (low + high) \/\/ 2\r\n\r\n    # If mid is the maximum element\r\n    if arr[mid] > arr[high]:\r\n        return arr[high]\r\n    \r\n    # If mid is not the maximum element\r\n    if arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n    # If mid is the maximum element\r\n    return find_Max(arr,low,mid)\r\n\r\n# Driver Code\r\narr = [-10,-10,-10,10,10,10,10,10,10,10,10]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n# Time Complexity : O(log n) + O(n) = O(n)\r\n# Space Complexity : O(1)\r\n\r\n# Sample I\/O\r\n'''\r\nSample 1:\r\nInput:\r\narr = [-10,-10,-10,10,10,10,10,10,10,10,10]\r\n\r\nOutput:\r\n10\r\n\r\nSample 2:\r\nInput:\r\narr = [10,10,10,10,10,10,10,10,10,10,10]\r\n\r\nOutput:\r\n10\r\n\r\nSample 3:\r\nInput:\r\narr = [10,10,10,10,10,10,10,10,10,10,10]\r\n\r\nOutput:\r\n10\r\n\r\nSample 4:\r\nInput:\r\narr = [10,10,10,10,10,10,10,10","votes":null},{"text":"\r\n    if(low>high):\r\n        return -1\r\n    mid = low + (high-low)\/\/2\r\n    if(arr[mid]>arr[high]):\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        if(arr[low]>arr[mid]):\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r\narr = [1,2,3,4,5,6,7]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\"\"\"\r\n\r\n[1,2,3,4,5,6,7]\r\nmid = 3\r\nhigh = 6\r\n[4,5,6,7]\r\nmid = 2\r\nlow = 0\r\n[1,2]\r\nmid = 1\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = 0\r\n[1]\r\nmid = 0\r\nlow = ","votes":null},{"text":"\r\n    while low < high:\r\n        mid = (low + high) \/\/ 2\r\n        if arr[mid] > arr[high]:\r\n            low = mid + 1\r\n        else:\r\n            high = mid\r\n    return arr[low]\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [12, 15, 16, 19, 20, 25, 26, 30, 31, 35]\r\n    low = 0\r\n    high = len(arr) - 1\r\n    max_element = find_Max(arr, low, high)\r\n    print(\"Max element is:\", max_element)\r\n\r\n    arr2 = [12, 15, 16, 19, 20, 25, 26, 30, 31, 35]\r\n    low = 0\r\n    high = 9\r\n    max_element = find_Max(arr2, low, high)\r\n    print(\"Max element is:\", max_element)\r\n\r\n    arr3 = [12, 15, 16, 19, 20, 25, 26, 30, 31, 35]\r\n    low = 0\r\n    high = 3\r\n    max_element = find_Max(arr3, low, high)\r\n    print(\"Max element is:\", max_element)\r\n\r\n    arr4 = [12, 15, 16, 19, 20, 25, 26, 30, 31, 35]\r\n    low = 2\r\n    high = 7\r\n    max_element = find_Max(arr4, low, high)\r\n    print(\"Max element is:\", max_element)\r\n\r\n    arr5 = [12, 15, 16, 19,","votes":null},{"text":"\r\n    if(low<high):\r\n        mid=low+(high-low)\/2\r\n        if(arr[mid]<arr[high]):\r\n            return find_Max(arr,mid+1,high)\r\n        elif(arr[mid]<arr[low]):\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return arr[mid]\r\n    else:\r\n        return arr[low]\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    arr=[1,2,3,4,5,6,7,8]\r\n    low=0\r\n    high=len(arr)-1\r\n    print(\"Maximum element in the array is:\",find_Max(arr,low,high))\r\n\r\n    arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,9","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[low] < arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r","votes":null},{"text":"\r\n    if(high < low):\r\n        return None\r\n    if(high == low):\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if(mid+1 < high and arr[mid+1] > arr[mid]):\r\n        return arr[mid+1]\r\n    elif (mid-1 >= low and arr[mid-1] > arr[mid]):\r\n        return arr[mid]\r\n    elif(arr[mid] > arr[high]):\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if low==high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if mid>high:\r\n        mid = high\r\n    if mid<low:\r\n        mid = low\r\n    if (arr[mid]>arr[low] and arr[mid]>arr[high]):\r\n        return find_Max(arr,low,mid)\r\n    elif (arr[mid]<arr[low] and arr[mid]<arr[high]):\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return arr[mid]\r\n\r\n# Driver program to test above function\r\narr = [1, 3, 5, 7]\r\nn = len(arr)\r\nprint(\"Maximum element in the array is\", find_Max(arr, 0, n - 1))\r\n\r\narr = [11, 13, 15, 17]\r\nn = len(arr)\r\nprint(\"Maximum element in the array is\", find_Max(arr, 0, n - 1))\r\n\r\narr = [10, 11, 12, 13, 14, 15, 16]\r\nn = len(arr)\r\nprint(\"Maximum element in the array is\", find_Max(arr, 0, n - 1))\r\n\r\narr = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\r\nn = len(arr)\r\nprint(\"Maximum element in the array is\", find_Max(arr, 0, n - 1))\r\n\r\narr = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ","votes":null},{"text":"\r\n    if(high>=low):\r\n        mid = (high+low)\/\/2\r\n        if(arr[mid]>arr[mid+1]):\r\n            return arr[mid]\r\n        elif(arr[mid]<arr[mid+1]):\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n\r\nprint(find_Max([10,11,12],0,2))\r\nprint(find_Max([1,2,3,4,5,6,7],0,6))\r\nprint(find_Max([8,9,10,1,2,3,4,5],0,7))\r\nprint(find_Max([1,2,3,4,5,6,7,8],0,7))\r\nprint(find_Max([11,12,1,2,3,4,5,6],0,7))\r\nprint(find_Max([1,2,3,4,5,6,7,8],0,7))\r\nprint(find_Max([1,2,3,4,5,6,7,8,9,10],0,9))\r\nprint(find_Max([11,12,1,2,3,4,5,6],0,7))\r\nprint(find_Max([1,2,3,4,5,6,7,8,9,10],0,9))\r\nprint(find_Max([11,12,1,2,3,4,5,6,7],0,8))\r\nprint(find_Max([11,12,1,2,3,4,5,6,7],0,8))\r\nprint(find_Max([11,12,1,2,3,4,5,6,7,8],0,9))\r\nprint(find_Max([11,12,1,2,3,4","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    if arr[low]<arr[high]:\r\n        return arr[high]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid-1] >= arr[mid]:\r\n        return find_Max(arr,mid,high)\r\n    elif arr[mid+1] >= arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    return arr[mid]\r\n\r\na = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\r\nb = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]\r\nc = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,","votes":null},{"text":"\r\n    if (low > high):\r\n        return -1\r\n    if (low == high):\r\n        return arr[low]\r\n    if (high - low == 1):\r\n        return max(arr[low],arr[high])\r\n    mid = (low + high)\/\/2\r\n    if (arr[mid] > arr[high]):\r\n        return find_Max(arr,low,mid)\r\n    elif (arr[mid] < arr[high]):\r\n        return find_Max(arr,mid,high)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r\narr = [10,12,15,17,20,25,27,30,33,35,40]\r\nn = len(","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=(low+high)\/\/2\r\n    if arr[low]<arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if high == low:\r\n        return arr[low]\r\n    mid = (high - low)\/2 + low\r\n    if arr[mid] < arr[mid + 1]:\r\n        #mid is the max element\r\n        return arr[mid]\r\n    if arr[low] >= arr[mid]:\r\n        #mid is the max element\r\n        return arr[mid]\r\n    if arr[mid] < arr[high]:\r\n        #mid + 1 is the max element\r\n        return arr[mid + 1]\r\n    return -1\r\n\r\narr = [10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr, low, mid)\r\n    else:\r\n        return find_Max(arr, mid+1, high)\r\n\r","votes":null},{"text":"\r\n    while low <= high:\r\n        mid = (low + high)\/\/2\r\n        if arr[mid] < arr[high]:\r\n            return arr[mid]\r\n        elif arr[low] < arr[mid]:\r\n            high = mid - 1\r\n        else:\r\n            low = mid + 1\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    if(low>high):\r\n        return -1\r\n    mid=low+(high-low)\/\/2\r\n    if(arr[mid]<arr[mid+1]):\r\n        return find_Max(arr,mid+1,high)\r\n    if(arr[mid]<arr[low]):\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return arr[mid]\r\n    \r\narr=[1,3,5,6,7,0,1]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n\r\n    mid = (low+high)\/\/2\r\n\r\n    if arr[mid] > arr[low] and arr[mid] > arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid] < arr[low] and arr[mid] < arr[high]:\r\n        return find_Max(arr,mid,high)\r\n    else:\r\n        return arr[mid]\r\n\r\n\r\nprint(find_Max([-2,-1,1,3,5,6,7,10,12,15,16,18,19,20,21,22,23,24,25,26,27,29,30,31,32,34,36,37],0,30))\r\nprint(find_Max([-2,10,15,16,18,19,20,21,22,23,24,25,26,27,29,30,31,32,34,36,37],0,23))\r\nprint(find_Max([-2,-1,1,3,5,6,7,10,12,15,16,18,19,20,21,22,23,24,25,26,27,29,30,31,32,34,36,37],0,30))\r\nprint(find_Max([-2,-1,1,3,5,6,7,10,12,15,16,18,19,20,21,22,23,24,25,26,27,29,30,31,32,34,36,37],0,30))\r\nprint(find_Max(","votes":null},{"text":"\r\n    if high==low:\r\n        return arr[low]\r\n    mid= (low+high)\/\/2\r\n    if arr[mid]>arr[low]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n    return False\r\n    \r","votes":null},{"text":"\r\n    if low>high:\r\n        return -1\r\n    mid = (high+low)\/\/2\r\n    if arr[low]<arr[mid] and arr[mid]<arr[high]:\r\n        return arr[mid]\r\n    elif arr[low]>arr[mid] and arr[mid]>arr[high]:\r\n        return arr[mid]\r\n    elif arr[low]>arr[mid]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r","votes":null},{"text":"\r\n    if high<low:\r\n        return -1\r\n    if high==low:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[low]<arr[mid]:\r\n        if arr[mid]<arr[high]:\r\n            return arr[mid]\r\n        else:\r\n            return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if high<low:\r\n        return -1\r\n    if high==low:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[low]<=arr[mid]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if high==low:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[low]<arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[mid]>arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    if arr[mid]<arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n    if arr[mid]==arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r\n\r\narr = [1,1,4,2,3,6,7,8,9,40,23,12,3,4,5,7,9,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\r\n\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n#arr = [4, 5, 6, 7, 0, 1, 2]\r\n#print","votes":null},{"text":"\r\n    if low >= high:\r\n        return arr[low]\r\n\r\n    mid = (low+high)\/\/2\r\n    if(arr[mid] > arr[low]):\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\nif __name__ == '__main__':\r\n    arr = [2,3,4,5,1]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    arr = [2,1,4,5,3]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    arr = [3,4,5,1,2]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    arr = [4,5,1,2,3]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n    arr = [4,5,1,2,3]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n    arr = [2,3,4,5,1]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    arr = [2,1,4,5,3]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    arr = [3,4,5,1,2]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n    arr = [4,5,1,2,3]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n    arr = [4,5,1,2,3]\r\n    print(find_Max(arr,0,len(arr)-1))\r\n\r\n    arr = [2,3,4,5,1]\r\n    print(find_Max(arr,","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n\r\n    mid = (low+high)\/\/2\r\n    left = find_Max(arr,low,mid)\r\n    right = find_Max(arr,mid+1,high)\r\n    return max(left,right)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, ","votes":null},{"text":"\r\n    # Write your code here\r\n    if low==high:\r\n        return arr[low]\r\n    mid=(low+high)\/\/2\r\n    if (low<high and mid<high and arr[mid]<arr[mid+1]):\r\n        return find_Max(arr,low,mid)\r\n    elif (low<high and mid>low and arr[mid]<arr[mid-1]):\r\n        return find_Max(arr,mid+1,high)\r\n    elif (arr[low]<arr[mid]):\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n\r\n\r\narr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\r\nn = len(arr)\r\nlow = 0\r\nhigh = n - 1\r\nprint(find_Max(arr,low,high))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    if (low == high):\r\n        return arr[low]\r\n    mid = (high+low)\/\/2\r\n    if (arr[low] < arr[mid]):\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n    \r\narr = [6,7,1,2,3,4,5]\r\narr = [6,7,1,2,3,4,5,6,7]\r\narr = [11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\r\narr = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\narr = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10","votes":null},{"text":"\r\n    if((high-low)==1):\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    if(arr[mid]==arr[high]):\r\n        return find_Max(arr,low,mid)\r\n    elif(arr[mid]>arr[high]):\r\n        return find_Max(arr,mid,high)\r\n    else:\r\n        return find_Max(arr,low,mid)\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if low>=high:\r\n        return arr[low]\r\n    \r\n    mid = (low+high)\/\/2\r\n    \r\n    if arr[mid]==arr[high]:\r\n        x = find_Max(arr,low,mid-1)\r\n        y = find_Max(arr,mid+1,high)\r\n        return max(x,y)\r\n    \r\n    if arr[mid]>arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    \r\n    return find_Max(arr,low,mid-1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [3,4,5,6,7,8,9,10,11,12]\r\n    \r\n    print(find_Max(arr,0,len(arr)-1))\r\n    \r\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]\r\n    \r\n    print(find_Max(arr,0,len(arr)-1))\r\n    \r\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (high + low) \/\/ 2\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high)\/\/2\r\n    if (arr[mid] > arr[high]):\r\n        return find_Max(arr,mid+1,high)\r\n    elif (arr[mid] < arr[high]):\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n# Driver Code\r\narr = [1, 11, 2, 10, 6, 5]\r\nlow = 0\r\nhigh = len(arr)-","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n\r\n    mid = (low + high) \/\/ 2\r\n\r\n    if arr[mid] >= arr[low]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\n    \r\n# Driver code\r\narr = [1, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    if arr[mid]>=arr[low]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\narr=[4,5,6,7,0,1,2]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    while low <= high:\r\n        mid = (low + high)\/\/2\r\n        if arr[mid] < arr[high]:\r\n            return arr[mid+1]\r\n        elif arr[mid] > arr[high]:\r\n            return arr[mid]\r\n        else:\r\n            low = mid+1\r\n    return -1\r\n\r\n# arr = [1, 3, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 48, 49, 50, 52, 54, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 1","votes":null},{"text":"\r\n    \r\n    if high < low:\r\n        return -1\r\n    \r\n    mid = (low + high)\/\/2\r\n    \r\n    if arr[mid] == arr[high] and arr[low] == arr[mid]:\r\n        return find_Max(arr,low , high -1)\r\n    \r\n    if arr[mid] > arr[low]:\r\n        return find_Max(arr,low,mid - 1)\r\n    else:\r\n        return find_Max(arr,mid + 1,high)\r\n    \r\n    \r\n    \r\n    \r\narr = [11,11,11,11,11,11,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,3","votes":null},{"text":"\r\n    if high>=low:\r\n        mid = (low+high)\/\/2\r\n        if (arr[mid]>=arr[low] and arr[mid]>=arr[high]):\r\n            return arr[mid]\r\n        elif (arr[low]>=arr[mid]):\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    else:\r\n        return None\r\n\r","votes":null},{"text":"\r\n    if(low == high):\r\n        return arr[low]\r\n    mid = (low + high)\/\/2\r\n    if(mid+1 < high and arr[mid] < arr[mid+1]):\r\n        return find_Max(arr,low,mid)\r\n    elif(mid-1 >= low and arr[mid-1] > arr[mid]):\r\n        return find_Max(arr,mid,high)\r\n    else:\r\n        return arr[mid]\r\n\r\nif __name__ == '__main__':\r\n    a = [5, 6, 7, 8, 9, 10, 1, 2, 3]\r\n    print(find_Max(a,0,len(a)-1))\r\n\r\n    a = [10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(find_Max(a,0,len(a)-1))\r\n\r\n    a = [10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 16]\r\n    print(find_Max(a,0,len(a)-1))\r\n\r\n    a = [10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 16, 17, 18, 19, 20]\r\n    print(find_Max(a,0,len(a)-1))\r\n\r\n    a = [10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 16, 17, 18, 19, 20,","votes":null},{"text":"\r\n    if low>=high:\r\n        return -1\r\n    mid = (high+low)\/\/2\r\n    if arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    if arr[low] > arr[mid]:\r\n        return find_Max(arr,low,mid-1)\r\n    return find_Max(arr,mid+1,high)\r\n\r\n\r\n\r\n\r\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\narr = [1,2,3,4,5,6,7,8,10,11,12,13,14,15]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\narr = [1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\narr = [13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,3","votes":null},{"text":"\r\n    while low < high:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid] < arr[low]:\r\n            low = mid+1\r\n        elif arr[mid] > arr[low]:\r\n            high = mid\r\n        else:\r\n            low += 1\r\n    return arr[low]\r\n\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=int((low+high)\/2)\r\n    if arr[mid]<arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid]>arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r\narr=[4,5,6,7,1,2,3]\r\nprint(find_Max(arr","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    if arr[low]>arr[high]:\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    if arr[mid]>arr[low]:\r\n        return find_Max(arr,low,mid)\r\n    if arr[mid]>arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    return arr[high]\r\n\r\narr = [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if (mid > 0 and arr[mid] > arr[mid-1]) or (mid == 0):\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r\narr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 1","votes":null},{"text":"\r\n    \r\n    while low<=high:\r\n        mid=int((low+high)\/2)\r\n        # print(mid)\r\n        if arr[mid]==arr[high] and arr[mid]==arr[low]:\r\n            return arr[low]\r\n        elif arr[mid]==arr[high] and arr[mid]!=arr[low]:\r\n            return arr[low]\r\n        elif arr[mid]==arr[low] and arr[mid]!=arr[high]:\r\n            return arr[low]\r\n        elif arr[mid]>arr[low] and arr[mid]<arr[high]:\r\n            return arr[mid]\r\n        elif arr[mid]>arr[low] and arr[mid]>arr[high]:\r\n            low=mid+1\r\n        elif arr[mid]<arr[low] and arr[mid]<arr[high]:\r\n            high=mid-1\r\n\r\n    return arr[mid]\r\n\r\n\r\n\r\nif __name__=='__main__':\r\n    arr=[1,2,3,4,5,6,7]\r\n    low=0\r\n    high=len(arr)-1\r\n    print(find_Max(arr,low,high))\r\n\r\n    arr=[3,4,5,6,7,1,2]\r\n    low=0\r\n    high=len(arr)-1\r\n    print(find_Max(arr,low,high))\r\n\r\n    arr=[1,2,3,4,5,6,7]\r\n    low=0\r\n    high=len(arr)-1\r\n    print(find_Max(arr,low,high))\r\n\r\n    arr=[1,2,3,4,5,6,7]\r\n    low=0\r\n    high=len(arr)-1\r\n    print(find_Max(arr,low,high))\r\n\r\n    arr=[1,2,3,4,5,6,7]\r\n    low=0","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high) \/\/ 2\r\n    if arr[mid] == arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n\r\n    mid = (low+high)\/\/2\r\n\r\n    if arr[mid]>arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    if arr[mid]<arr[high]:\r\n        return find_Max(arr,low,mid)\r\n\r\n    return arr[mid]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [5, 6, 7, 1, 2, 3, 4]\r\n    low = 0\r\n    high = len(arr)-1\r\n    print(\"Maximum element in the array is\", find_Max(arr, low, high))\r\n\r\n    arr = [11, 12, 13, 1, 2, 3, 4, 5, 6, 7]\r\n    low = 0\r\n    high = len(arr)-1\r\n    print(\"Maximum element in the array is\", find_Max(arr, low, high))\r\n\r\n    arr = [3, 4, 5, 1, 2]\r\n    low = 0\r\n    high = len(arr)-1\r\n    print(\"Maximum element in the array is\", find_Max(arr, low, high))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    low = 0\r\n    high = len(arr)-1\r\n    print(\"Maximum element in the array is\", find_Max(arr, low, high))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7]\r\n    low = 0\r\n    high = len(arr)-1\r\n    print(\"Maximum element in the array is\", find_Max(arr, low, high))\r\n\r\n    arr = [5, 6, 7, 1, 2, 3","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    # if the mid is the largest element\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    # if the mid is the smallest element\r\n    elif arr[mid] < arr[low]:\r\n        return find_Max(arr,low,mid-1)\r\n    # if the mid is the largest element\r\n    if arr[mid] > arr[low]:\r\n        return arr[mid]\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\nif __name__ == '__main__':\r\n    arr = [4, 5, 6, 7, 8, 9, 1, 2, 3]\r\n    low = 0\r\n    high = len(arr)-1\r\n    print(find_Max(arr,low,high))\r\n\r\n### 2. Find the minimum element in the array\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=(low+high)\/\/2\r\n    if arr[low]<=arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    if arr[low]>=arr[mid]:\r\n        return find_Max(arr,mid+1,high)\r\n\r\narr=[6,7,1,2,3,4,5,6]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n#find the minimum element in a sorted and rotated array\r","votes":null},{"text":"\r\n\r\n    if low == high:\r\n        return arr[low]\r\n\r\n    mid = (low+high)\/\/2\r\n\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,low,mid-1)\r\n\r\n\r\narr = [10,12,14,19,25,30,31,32]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n    if arr[low]<arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=low+(high-low)\/\/2\r\n    if arr[mid]==arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        if arr[mid]>arr[high]:\r\n            return arr[high]\r\n        else:\r\n            return find_Max(arr,low,mid)\r\n\r\n\r","votes":null},{"text":"\r\n    if(low == high):\r\n        return arr[low]\r\n    if(high-low == 1):\r\n        return max(arr[low],arr[high])\r\n    mid = low + (high-low) \/\/ 2\r\n    if(arr[mid] > arr[low]):\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid,high)\r\n\r\narr = [1, 3, 15, 11, 2, 12]\r\nlow = 0\r\nhigh = len(arr)-1\r\nmax_element = find_Max(arr,low,high)\r\nprint(\"Maximum element is\",max_element)\r\n\r\n\r\n# Time Complexity: O(log(n))\r","votes":null},{"text":"\r\n    # Base case\r\n    if low==high:\r\n        return arr[low]\r\n    \r\n    mid = (low + high) \/\/ 2\r\n    mid_val = arr[mid]\r\n    \r\n    if mid_val == arr[low]: # if the array is rotated sorted\r\n        return find_Max(arr, low, mid-1)\r\n    elif mid_val == arr[high]: # if the array is rotated sorted\r\n        return find_Max(arr, mid+1, high)\r\n    \r\n    if mid_val > arr[high]:\r\n        return find_Max(arr, mid+1, high)\r\n    else:\r\n        return find_Max(arr, low, mid-1)\r\n\r\n\r\narr = [12, 1","votes":null},{"text":"\r\n\r\n    while(low <= high):\r\n        mid = (low + high) \/\/ 2\r\n        if arr[mid] == arr[high] and mid != high:\r\n            low = mid + 1\r\n        elif arr[mid] > arr[high]:\r\n            return arr[mid]\r\n        else:\r\n            high = mid - 1\r\n    return arr[mid]\r\n\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (low + high)\/\/2\r\n    if arr[mid] > arr[high] and arr[low] > arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid] > arr[low] and arr[high] > arr[mid]:\r\n        return find_Max(arr,mid+1,high)\r\n    elif arr[mid] < arr[low] and arr[high] < arr[mid]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return -1\r\n\r\n\r\narr = [4,5,6,7,8,9,10,1,2,3]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n# Time Complexity O(logn)","votes":null},{"text":"\r\n    if low>high:\r\n        return -1\r\n    mid = (low+high)\/\/2\r\n    if mid+1<len(arr) and arr[mid]>arr[mid+1]:\r\n        return arr[mid]\r\n    if mid-1>=0 and arr[mid]>arr[mid-1]:\r\n        return arr[mid]\r\n    if arr[low]<arr[mid]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r","votes":null},{"text":"\r\n\r\n    if high>=low:\r\n        mid=(low+high)\/\/2\r\n        if arr[mid]>arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid]<arr[mid+1]:\r\n            return find_Max(arr,low,mid-1)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = (high - low) \/\/ 2 + low\r\n    if arr[mid] > arr[low] and arr[mid] > arr[high]:\r\n        return find_Max(arr, low, mid)\r\n    elif arr[mid] < arr[high] and arr[mid] < arr[low]:\r\n        return find_Max(arr, mid + 1, high)\r\n    else:\r\n        return arr[mid]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 3, 5, 7, 9, 3, 2, 4, 6, 8]\r\n    print(find_Max(arr, 0, len(arr) - 1))\r\n\r\n    arr = [3, 3, 7, 3, 3]\r\n    print(find_Max(arr, 0, len(arr) - 1))\r\n\r\n    arr = [11, 13, 15, 17, 19, 21, 23, 25, 27, 31, 33, 35, 37, 39, 41]\r\n    print(find_Max(arr, 0, len(arr) - 1))\r\n\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(find_Max(arr, 0, len(arr) - 1))\r\n\r\n    arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n    print(find_Max(arr, 0, len(arr) - 1))\r\n\r\n    arr = [10, 20, 30, 40, 50, 60, 70, ","votes":null},{"text":"\r\n\r\n    if low==high:\r\n        return arr[low]\r\n    mid=(low+high)\/\/2\r\n    if arr[mid]==arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    if arr[low]<arr[high]:\r\n        if arr[low]<arr[mid] and arr[mid]<arr[high]:\r\n            return find_Max(arr,low,mid)\r\n        elif arr[low]>arr[mid] and arr[mid]>arr[high]:\r\n            return find_Max(arr,mid+1,high)\r\n        else:\r\n            return arr[high]\r\n    else:\r\n        if arr[high]<arr[mid] and arr[mid]<arr[low]:\r\n            return find_Max(arr,mid+1,high)\r\n        elif arr[high]>arr[mid] and arr[mid]>arr[low]:\r\n            return find_Max(arr,low,mid)\r\n        else:\r\n            return arr[low]\r\n\r\narr=[4,5,6,7,0,1,2]\r\nlow=0\r\nhigh=len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\narr=[1,2,3,4,5,6,7,8,9]\r\nlow=0\r\nhigh=len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\narr=[1,2,3,4,5,6,7,8,0]\r\nlow=0\r\nhigh=len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\narr=[4,5,6,7,0,1,2,3]\r\nlow=0\r\nhigh=len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\narr=[4,5,6,7,0,1,2,3,4]\r\nlow=","votes":null},{"text":"\r\n    \r\n    if low==high:\r\n        return arr[low]\r\n    mid = (low+high)\/\/2\r\n\r\n    if arr[mid] == arr[high]:\r\n        high -= 1\r\n        return find_Max(arr,low,high)\r\n\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    \r\n    return find_Max(arr,low,mid)\r\n\r\n\r","votes":null},{"text":"\r\n    if high < low:\r\n        return float(\"-inf\")\r\n    if high == low:\r\n        return arr[low]\r\n    mid = (high + low) \/\/2\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,mid + 1,high)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,low,mid - 1)\r\n    else:\r\n        return find_Max(arr,low,mid - 1)\r\n\r","votes":null},{"text":"\r\n    if (low>high):\r\n        return -1\r\n    if (high==low):\r\n        return arr[low]\r\n    mid=(high+low)\/\/2\r\n    if (arr[mid]>arr[mid+1]):\r\n        return arr[mid]\r\n    else:\r\n        if (arr[low]>arr[mid]):\r\n            return find_Max(arr,low,mid)\r\n        else:\r\n            return find_Max(arr,mid+1,high)\r\n\r\narr=[]\r\nn=int(input())\r\nfor i in range(n):\r\n    arr.append(int(input()))\r\n\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n# # Input:\r\n# [1, 3, 5, 7]\r\n# Output: 7\r\n\r\n# [1, 3, 5, 7, 8, 9]\r\n# Output: 9\r\n\r\n# [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14]\r\n# Output: 14\r\n\r\n# [1, 2, 3]\r\n# Output: 3\r\n\r\n# [1, 2, 3, 4, 5]\r\n# Output: 5\r\n\r\n# [1, 3, 5, 7, 11]\r\n# Output: 11\r\n\r\n# [1, 3, 5, 7]\r\n# Output: 7\r\n\r\n# [1, 2, 3, 2, 3, 2, 3, 2, 3]\r\n# Output: 3\r\n\r\n# [1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = low + (high-low)\/\/2\r\n    if arr[low] < arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[low] >= arr[mid]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return arr[low]\r\n\r\narr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nlow = 0\r\nhigh = len(arr)-1\r\nprint(find_Max(arr,low,high))\r\n\r\n\r","votes":null},{"text":"\r\n    if low==high:\r\n        return arr[low]\r\n    mid=(low+high)\/\/2\r\n    if arr[mid]==arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid]>arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid)\r\n\r\n\r\narr=[]\r\nn=int(input(\"Enter the size of the array: \"))\r\nfor i in range(0,n):\r\n    ele=int(input(\"Enter the element: \"))\r\n    arr.append(ele)\r\nprint(\"The array is: \",arr)\r\nprint(\"The maximum element in the array is: \",find_Max(arr,0,len(arr)-1))\r\n\r\n\r","votes":null},{"text":"\r\n    if low<high:\r\n        mid=(low+high)\/\/2\r\n        if arr[mid]>arr[high]:\r\n            return find_Max(arr,mid+1,high)\r\n        elif arr[mid]<arr[high]:\r\n            return find_Max(arr,low,mid)\r\n        else:\r\n            return arr[high]\r\n    return arr[low]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if low==high:\r\n        return arr[low]\r\n\r\n\r\n    mid= low + (high-low)\/\/2\r\n\r\n    if (mid+1)<high and arr[mid]<arr[mid+1]:\r\n        return arr[mid+1]\r\n\r\n    if (mid-1)>low and arr[mid]<arr[mid-1]:\r\n        return arr[mid]\r\n\r\n\r\n    if arr[low]<arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n\r\n    else:\r\n        return find_Max(arr,mid,high)\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if high < low:\r\n        return -1\r\n    if high == low:\r\n        return arr[high]\r\n    mid = (low + high) \/\/ 2\r\n    if mid == low and arr[mid] < arr[mid + 1]:\r\n        return arr[mid + 1]\r\n    if mid == high and arr[mid] < arr[mid - 1]:\r\n        return arr[mid - 1]\r\n    if arr[mid] > arr[mid + 1]:\r\n        return arr[mid]\r\n    if arr[mid] < arr[mid - 1]:\r\n        return arr[mid - 1]\r\n    if arr[mid] > arr[mid + 1]:\r\n        return find_Max(arr,low,mid - 1)\r\n    if arr[mid] < arr[mid - 1]:\r\n        return find_Max(arr,mid + 1,high)\r\n\r\n\r\narr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\r\narr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]\r\narr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56,","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = low + (high-low)\/\/2\r\n    if mid < high and arr[mid] > arr[mid+1]:\r\n        return arr[mid]\r\n    if mid > low and arr[mid] < arr[mid-1]:\r\n        return arr[mid]\r\n    if arr[low] >= arr[mid]:\r\n        return find_Max(arr,low,mid)\r\n    else:\r\n        return find_Max(arr,mid,high)\r\n\r\narr = [10,12,11,13,14,15,100,90,80,70,60,50,40,30,20,10,2,1]\r\nmax_","votes":null},{"text":"\r\n    while low<=high:\r\n        mid = (high+low)\/\/2\r\n        if arr[mid]==arr[high] and (arr[mid+1] != arr[mid]):\r\n            return arr[mid+1]\r\n        elif arr[mid]>arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid]<arr[mid+1]:\r\n            low=mid+1\r\n        else:\r\n            if arr[mid+1]<arr[low]:\r\n                return arr[mid+1]\r\n            else:\r\n                return arr[mid]\r\n\r","votes":null},{"text":"\r\n    while low<=high:\r\n        mid = (low+high)\/\/2\r\n        if arr[mid]>arr[mid+1]:\r\n            return arr[mid]\r\n        elif arr[mid]<arr[mid+1]:\r\n            low = mid+1\r\n        else:\r\n            low = mid+1\r\n\r\n\r\narr = [10,13,11,12,10,9,8,7,6,5,4,3,2,1]\r\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\r\narr = [4, 5, 6, 7, 0, 1, 2]\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10","votes":null},{"text":"\r\n    while (low <= high):\r\n        mid = (low + high) \/\/2\r\n        if (arr[mid] > arr[high]):\r\n            return max(arr[mid],arr[high])\r\n        elif (arr[mid] > arr[low]):\r\n            return max(arr[mid],arr[low])\r\n        else:\r\n            low = mid + 1\r\n    return -1\r\n\r\n\r\narr = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [6, 7, 1, 2, 3, 4, 5]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nn = len(arr)\r\nprint(find_Max(arr,0,n-1))\r\n\r\narr = [1, 2, 3, 4, 5, ","votes":null},{"text":"\r\n    if low == high:\r\n        return arr[low]\r\n    mid = int((low+high)\/2)\r\n    if arr[mid] > arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    elif arr[mid] < arr[high]:\r\n        return find_Max(arr,low,mid-1)\r\n    else:\r\n        return find_Max(arr,mid+1,high)\r\n\r\narr = [10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\r\nprint(find_Max(arr,0,len(arr)-1))\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    if high == low:\r\n        return arr[low]\r\n    mid = int((low+high)\/2)\r\n    if arr[mid] == arr[high]:\r\n        return find_Max(arr,low,mid)\r\n    elif arr[mid] > arr[high]:\r\n        return find_Max(arr,mid+1,high)\r\n    else:\r\n        return find_Max(arr,low,mid)\r\n\r\n\r\n\r\n\r\n\r","votes":null}],"time":{"count":20.0,"avg":154571.1946,"std":32151.2331526948,"cov":0.2080027474}}
{"id":551,"question":"def extract_column(list1, n):\r\n    \"\"\"Write a function to extract a specified column from a given nested list.\"\"\"","answers":[{"text":"\r\n    return [lst[n] for lst in list1]\r\n\r","votes":89458.932},{"text":"\r\n    return [sublist[n] for sublist in list1]\r\n\r\n\r","votes":96595.18},{"text":"\r\n\r\n    # create an empty list\r\n    column = []\r\n    for i in range(len(list1)):\r\n        # append the nth element of each sublist to the empty list\r\n        column.append(list1[i][n])\r\n    return column\r\n\r\n\r","votes":99756.808},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r","votes":103101.664},{"text":"\r\n    result = []\r\n    for sublist in list1:\r\n        result.append(sublist[n])\r\n    return result\r\n\r\n\r","votes":104008.108},{"text":"\r\n\r\n    column = []\r\n\r\n    for row in list1:\r\n        column.append(row[n])\r\n\r\n    return column\r\n\r\n\r","votes":104130.892},{"text":"\r\n    output = []\r\n    for i in list1:\r\n        output.append(i[n])\r\n    return output\r\n\r","votes":105149.28},{"text":"\r\n    return list(map(lambda x: x[n], list1))\r\n\r\n\r","votes":105268.472},{"text":"\r\n    return [sub_list[n] for sub_list in list1]\r\n\r\n\r","votes":106689.276},{"text":"\r\n    return [row[n] for row in list1]\r\n\r","votes":107611.76},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][n])\r\n    return list2\r\n\r\n\r","votes":107719.852},{"text":"\r\n    return [x[n] for x in list1]\r\n\r\n\r","votes":108220.896},{"text":"\r\n    list_out = [list1[i][n] for i in range(len(list1))]\r\n    return list_out\r\n\r\n\r","votes":108589.304},{"text":"\r\n    return [list1[i][n] for i in range(len(list1))]\r\n\r\n\r","votes":109338.236},{"text":"\r\n    extracted_column = []\r\n    for i in range(0, len(list1)):\r\n        extracted_column.append(list1[i][n])\r\n    return extracted_column\r\n\r\n\r","votes":110746.404},{"text":"\r\n    if len(list1) == 0:\r\n        return []\r\n    return [i[n] for i in list1]\r\n\r\n\r","votes":110909.6},{"text":"\r\n    column = []\r\n    for i in range(len(list1)):\r\n        column.append(list1[i][n])\r\n    return column\r\n\r\n\r","votes":111113.72},{"text":"\r\n    lst = []\r\n    for i in list1:\r\n        lst.append(i[n])\r\n    return lst\r\n\r\n\r","votes":111532.66},{"text":"\r\n    \r\n    return [row[n] for row in list1]\r\n\r","votes":116810.308},{"text":"\r\n    column = []\r\n    for i in list1:\r\n        column.append(i[n])\r\n    return column\r\n\r\n\r","votes":117030.732},{"text":"\r\n    return [item[n] for item in list1]\r\n\r\n\r","votes":118127.248},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n    print(extract_column(data, 1))\r\n\r","votes":118354.976},{"text":"\r\n    column = []\r\n    for i in range(len(list1)):\r\n        column.append(list1[i][n])\r\n    return column\r\n\r","votes":122322.516},{"text":"\r\n    \r\n    list2 = []\r\n    \r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][n])\r\n            \r\n    return list2\r\n\r\n\r\n\r\n\r\nlist1 = [['a', 1, 2.1], ['b', 2, 3.1], ['c', 3, 4.1]]\r\nprint(extract_column(list1, 2))\r\n\r\n\r\n\r\n\r","votes":122773.36},{"text":"\r\n    return [i[n] for i in list1]\r\n\r\n\r","votes":123091.636},{"text":"\r\n    # Create an empty list to append to.\r\n    extracted = []\r\n\r\n    # Iterate through the list.\r\n    for i in range(len(list1)):\r\n        # Append the specified column to the list.\r\n        extracted.append(list1[i][n])\r\n    return extracted\r\n\r\n\r","votes":123120.52},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\n# print(extract_column([['a', 1, 4], ['b', 2, 5], ['c', 3, 6]], 1))\r\n\r\n\r","votes":123632.592},{"text":"\r\n    return [list1[i][n] for i in range(len(list1))]\r\n\r","votes":129195.9},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\nlist1 = [['a', 1], ['b', 2], ['c', 3]]\r\nprint(extract_column(list1, 0))\r\n\r\nprint(list1[1][1])\r\n\r\n\r","votes":130070.856},{"text":"\r\n    # extract a given column from a nested list\r\n    return [row[n] for row in list1]\r\n\r\n# The function to be called\r\nlist1 = [['a', 'b', 'c'], [1, 2, 3], [2.5, 5.7, 13.5]]\r\nlist2 = extract_column(list1, 2)\r\nprint(list2)\r\n\r\n# Sample Tests\r","votes":133352.44},{"text":"\r\n    result = []\r\n    for i in list1:\r\n        result.append(i[n])\r\n    return result\r\n\r\n\r\nlist1 = [['a', 'b', 'c'],\r\n         ['d', 'e', 'f'],\r\n         ['g', 'h', 'i']]\r\nprint(extract_column(list1, 2))\r\n\r\n\r\n# Solution 2\r","votes":133722.916},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n# Tests\r\nprint(extract_column([[1,2,3],[4,5,6],[7,8,9]], 0))\r\nprint(extract_column([[1,2,3],[4,5,6],[7,8,9]], 1))\r\nprint(extract_column([[1,2,3],[4,5,6],[7,8,9]], 2))\r\n\r\n\r\n# Exercise 4\r\n# Write a function to sum a column from a given nested list. \r\n\r","votes":139000.912},{"text":"\r\n    return [sublist[n] for sublist in list1]\r\n\r\n# Tests\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\r\nprint(extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))\r\n\r\n\r","votes":140256.772},{"text":"\r\n    return [item[n] for item in list1]\r\n\r","votes":144447.9},{"text":"\r\n    #list1 = [['hello', 'world', '!'], ['I', 'like', 'coding'], ['this', 'is', 'fun']]\r\n    #n = 0\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][n])\r\n    return list2\r\n\r\n\r","votes":148937.132},{"text":"\r\n    \r\n    # Initializing the list to store the extracted column.\r\n    extracted_column = []\r\n    \r\n    # Loop to extract the nth column from the nested list.\r\n    for i in range(len(list1)):\r\n        extracted_column.append(list1[i][n])\r\n        \r\n    return extracted_column\r\n\r\n\r\n# Code to test the function\r\nlist1 = [['a', 1, 2.0], ['b', 2, 3.0], ['c', 3, 4.0]]\r\nn = 2\r\n\r\nprint(\"Extracted column: \", extract_column(list1, n))\r\n\r\n\r\n# Write a function to convert a given nested list to a dictionary.\r","votes":149546.732},{"text":"\r\n    \r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i][n])\r\n    return result\r\n\r\n# Testing the function\r\n\r\nlist1 = [['physics', 75], ['chemistry', 67], ['maths', 50], ['computer science', 60]]\r\nprint(extract_column(list1, 0))\r\n\r\n\r\n\r","votes":149832.664},{"text":"\r\n    return [record[n] for record in list1]\r\n\r\n\r","votes":150821.372},{"text":"\r\n    list_column = []\r\n    for i in range(len(list1)):\r\n        list_column.append(list1[i][n])\r\n    return list_column\r\n    \r\nlist1 = [['a', 1], ['b', 2], ['c', 3]]\r\nprint(extract_column(list1, 1))\r\n\r","votes":151856.872},{"text":"\r\n    list_new = []\r\n    for i in list1:\r\n        list_new += [i[n]]\r\n    return list_new\r\n\r\n\r\nlist1 = [['a', 1, 3, 4], ['b', 2, 3, 4], ['c', 3, 3, 4], ['d', 5, 3, 4], ['e', 6, 3, 4]]\r\nprint(extract_column(list1, 0))\r\nprint(extract_column(list1, 1))\r\nprint(extract_column(list1, 2))\r\nprint(extract_column(list1, 3))\r\n\r\n# Task 7\r","votes":156903.796},{"text":"\r\n    # Code\r\n    return [row[n] for row in list1]\r\n\r\n\r\n# Testing the function\r\nlist1 = [['a', 1], ['b', 2], ['c', 3], ['d', 4], ['e', 5]]\r\nprint(extract_column(list1, 0))\r\nprint(extract_column(list1, 1))\r\n\r\n# Task 4\r","votes":163989.244},{"text":"\r\n    list_2 = []\r\n    for i in range(len(list1)):\r\n        list_2.append(list1[i][n])\r\n    return list_2\r\n\r","votes":164131.524},{"text":"\r\n    col = []\r\n    for i in range(0, len(list1)):\r\n        col.append(list1[i][n])\r\n    return col\r\n\r\n\r","votes":164264.74},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i][n])\r\n    return new_list\r\n\r\n\r\nlist1 = [\r\n    ['apples', 'orange', 'grapes', 'mango'],\r\n    ['pears', 'grapes', 'peaches', 'pears'],\r\n    ['mango', 'pears', 'peaches', 'pears'],\r\n    ['grapes', 'pears', 'peaches', 'pears'],\r\n    ['pears', 'peaches', 'pears', 'pears'],\r\n    ['peaches', 'pears', 'pears', 'pears']\r\n]\r\n\r\nprint(extract_column(list1, 0))\r\nprint(extract_column(list1, 2))\r\nprint(extract_column(list1, 1))\r\nprint(extract_column(list1, 3))\r\n\r\n\r","votes":164543.128},{"text":"\r\n    # use a list comprehension\r\n    return [item[n] for item in list1]\r\n\r\n\r","votes":171710.224},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\n# Extract the 2nd column from a list of lists\r\ntest_data = [['B', 8.0, 10.0],\r\n             ['A', 9.0, 10.0],\r\n             ['C', 8.0, 10.0],\r\n             ['D', 7.0, 10.0],\r\n             ['E', 5.0, 10.0],\r\n             ['F', 6.0, 10.0],\r\n             ['G', 7.0, 10.0],\r\n             ['H', 8.0, 10.0],\r\n             ['I', 9.0, 10.0],\r\n             ['J', 8.0, 10.0]]\r\n\r\n# Extract the 2nd column\r\nextracted_column = extract_column(test_data, 1)\r\nprint(extracted_column)\r\n\r\n# Extract the 3rd column\r\nextracted_column = extract_column(test_data, 2)\r\nprint(extracted_column)\r\n\r\n# Extract the 1st column\r\nextracted_column = extract_column(test_data, 0)\r\nprint(extracted_column)\r\n\r\n# Extract the 0th column\r\nextracted_column = extract_column(test_data, 1)\r\nprint(extracted_column)\r\n\r\n\r","votes":173648.204},{"text":"\r\n    \r\n    # initialize the list, which will contain the column\r\n    col = []\r\n    \r\n    # iterate through the nested list\r\n    for i in range(len(list1)):\r\n        col.append(list1[i][n])\r\n    \r\n    return col\r\n\r\n\r\n\r","votes":174667.596},{"text":"\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i][n])\r\n    return result\r\n\r\n\r","votes":176464.024},{"text":"\r\n\r\n    list2 = []\r\n\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][n])\r\n\r\n    return list2\r\n\r\n\r","votes":176505.08},{"text":"\r\n    # Write your code here\r\n    return [row[n] for row in list1]\r\n\r\n\r","votes":178210.5},{"text":"\r\n    \r\n    list2 = []\r\n\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][n])\r\n\r\n    return list2\r\n\r\n\r\n\r\n# -----------------------------------------------------------------\r\n# Coding standard 1\r\n\r\n\r\n\r","votes":180531.46},{"text":"\r\n    \r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][n])\r\n    return list2\r\n\r\n\r","votes":180803.868},{"text":"\r\n    list_2 = []\r\n    for i in range(len(list1)):\r\n        list_2.append(list1[i][n])\r\n    return list_2\r\n\r\n\r","votes":191538.648},{"text":"\r\n    result = []\r\n    for i in list1:\r\n        result.append(i[n])\r\n    return result\r\n\r\n\r\n\r\n\r\nlist1 = [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]\r\n\r\nprint(extract_column(list1, 0))\r\n\r\n#Expected Output: ['a', 'd', 'g']\r\n\r\n","votes":202987.704},{"text":"\r\n    return [row[n] for row in list1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    l = [['a', 1, 1], ['b', 2, 2], ['c', 3, 3], ['d', 4, 4]]\r\n    print(extract_column(l, 2))\r\n\r\n    # This code is contributed by Nikhil Kumar Singh(nickzuck_0","votes":208736.092},{"text":"\r\n    # initialize an empty list\r\n    extracted = []\r\n    # loop over the list\r\n    for item in list1:\r\n        # append the nth element of the list to the extracted list\r\n        extracted.append(item[n])\r\n    # return the extracted list\r\n    return extracted\r\n\r\n\r\nlist1 = [[\"apple\", \"fruit\"], [\"banana\", \"fruit\"], [\"cucumber\", \"vegetable\"]]\r\nprint(extract_column(list1, 0))\r\n\r\n\r","votes":214996.48},{"text":"\r\n    return [sublist[n] for sublist in list1]\r\n\r\nlist1 = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9]\r\n        ]\r\n\r\nfor i in extract_column(list1, 2):\r\n    print(i)\r","votes":215106.016},{"text":"\r\n    # Write your code here\r\n    arr = []\r\n    for i in list1:\r\n        arr.append(i[n])\r\n    return arr\r\n\r","votes":223874.368},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][n])\r\n    return list2\r\n\r\n# Testing the function\r\nlist1 = [[\"apple\", \"banana\"], [\"banana\", \"apple\"], [\"orange\", \"banana\"]]\r\nprint(extract_column(list1, 0))\r\nprint(extract_column(list1, 1))\r\n\r\n\r","votes":246306.704},{"text":"\r\n    row_length = len(list1[0])\r\n    column = []\r\n    for i in range(row_length):\r\n        column.append(list1[i][n])\r\n    return column\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return list(zip(*list1))[0]\r\n    else:\r\n        return list(zip(*list1))[n]\r\n    \r\n\r","votes":null},{"text":"\r\n    return [list1[i][n] for i in range(len(list1))]\r\n\r\n\r\nlist1 = [[1, 2, 3, 4],\r\n         [5, 6, 7, 8],\r\n         [9, 10, 11, 12],\r\n         [13, 14, 15, 16],\r\n         [17, 18, 19, 20],\r\n         [21, 22, 23, 24]]\r\n\r\nprint(extract_column(list1, 1))\r\n\r\nlist1 = [[1, 2, 3, 4],\r\n         [5, 6, 7, 8],\r\n         [9, 10, 11, 12],\r\n         [13, 14, 15, 16],\r\n         [17, 18, 19, 20],\r\n         [21, 22, 23, 24]]\r\n\r\nprint(extract_column(list1, 2))\r\n\r\nlist1 = [[1, 2, 3, 4],\r\n         [5, 6, 7, 8],\r\n         [9, 10, 11, 12],\r\n         [13, 14, 15, 16],\r\n         [17, 18, 19, 20],\r\n         [21, 22, 23, 24]]\r\n\r\nprint(extract_column(list1, 3))\r\n\r\nlist1 = [[1, 2, 3, 4],\r\n         [5, 6, 7, 8],\r\n         [9, 10, 11, 12],\r\n         [13, 14, 15, 16],\r\n         [17, 18,","votes":null},{"text":"\r\n    # Initialize an empty list\r\n    result = []\r\n    # Iterate over the list\r\n    for i in range(len(list1)):\r\n        # Append the required column (n-1) to the result list\r\n        result.append(list1[i][n - 1])\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    l1 = [['a', 1, '2'], ['b', 2, '3'], ['c', 3, '4'], ['d', 4, '5']]\r\n    print(extract_column(l1, 1))\r\n    print(extract_column(l1, 3))\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed by Abhijeet Bhatia\r\n\r\n    # This code is contributed b","votes":null},{"text":"\r\n    \r\n    # list1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\n    # n = 2\r\n    # result = [[2, 5, 8], [3, 6, 9]]\r\n    # return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\n    \r\n    return [[list1[i][n] for i in range(len(list1))] for j in range(len(list1[0]))]\r\n\r","votes":null},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(list1[i][n])\r\n    return list2\r\n\r\n\r\n# Tests\r\nlist1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(extract_column(list1, 2))\r\nlist1 = [['a', 'b', 'c'], [1, 2, 3], ['g', 'h', 'i']]\r\nprint(extract_column(list1, 1))\r\nlist1 = [['a', 'b', 'c'], [1, 2, 3], ['a', 'b', 'c']]\r\nprint(extract_column(list1, 0))\r\nlist1 = [['a', 'b', 'c'], [1, 2, 3], ['a', 'b', 'c']]\r\nprint(extract_column(list1, 2))\r\nlist1 = [['a', 'b', 'c'], [1, 2, 3], ['a', 'b', 'c']]\r\nprint(extract_column(list1, 5))\r\nlist1 = [['a', 'b', 'c'], [1, 2, 3], ['a', 'b', 'c']]\r\nprint(extract_column(list1, -1))\r\nlist1 = [['a', 'b', 'c'], [1, 2, 3], ['a', 'b', 'c']]\r\nprint(extract_column(list1, -3))\r\nlist1 = [['a', 'b', 'c'], [1, 2, 3], ['a', 'b', 'c']]\r\nprint(extract_column(list1, -5))\r\nlist1 = [['a', 'b', 'c'], [1, 2, 3], ['a', 'b', 'c']]\r\nprint(extract_column(list1, -5)","votes":null},{"text":"\r\n    if type(list1) is not list:\r\n        raise TypeError('The argument must be list')\r\n    if n < 1 or n > len(list1):\r\n        raise ValueError('The argument must be 1 or 2')\r\n    return [i[n - 1] for i in list1]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    for i in range(len(list1)):\r\n        yield list1[i][n]\r\n\r\n\r","votes":null},{"text":"\r\n    #list1 = [['a'], ['b'], ['c', 'd']]\r\n    #n = 1\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i][n])\r\n    return result\r\n\r\nprint(extract_column([['a'], ['b'], ['c', 'd']], 1))\r\n\r\n# Exercise 2:\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        for j in range(len(list1[i])):\r\n            if j == n:\r\n                yield list1[i][j]\r\n\r\n\r","votes":null}],"time":{"count":59.0,"avg":142646.8949152543,"std":37174.4349217786,"cov":0.2606045855}}
{"id":554,"question":"def Split(list):\r\n    \"\"\"Write a python function to find odd numbers from a mixed list.\"\"\"","answers":[{"text":"\r\n    odds = []\r\n    for value in list:\r\n        if value % 2 == 1:\r\n            odds.append(value)\r\n\r\n    return odds\r\n\r\n\r","votes":86916.068},{"text":"\r\n    odds = []\r\n    for item in list:\r\n        if type(item) == int:\r\n            if item % 2 != 0:\r\n                odds.append(item)\r\n    return odds\r\n\r\n\r","votes":87206.624},{"text":"\r\n\r\n    # code starts here\r\n    odd_list = []\r\n    for i in list:\r\n        if i%2 != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r","votes":88090.832},{"text":"\r\n\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":106167.484},{"text":"\r\n    li = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            li.append(i)\r\n    return li\r\n\r\n\r","votes":110810.6},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2:\r\n                odd.append(i)\r\n    return odd\r\n\r\n\r","votes":113597.88},{"text":"\r\n    new_li = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 == 1:\r\n            new_li.append(list[i])\r\n    return new_li\r\n\r\n\r","votes":114709.452},{"text":"\r\n    odd=[]\r\n    for item in list:\r\n        if item%2!=0:\r\n            odd.append(item)\r\n    return odd\r\n    \r\n    print(odd)\r\n    \r","votes":114760.748},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r","votes":115319.528},{"text":"\r\n    odd_list=[]\r\n    for i in list:\r\n        if i%2!=0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r\n    \r\n\r","votes":115879.824},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n","votes":117466.692},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":119009.712},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 != 0:\r\n                odd_list.append(i)\r\n    return odd_list\r\n\r\n\r\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\r\n\r\nprint(Split(x))\r\n","votes":120638.396},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if (type(i)==int) and (i % 2 != 0):\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\n\r\nlist = [1, '2', 'a', True, 2, 'b', 3, 'c', False, 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10]\r\nprint(Split(list))\r\n\r\n\r","votes":122334.452},{"text":"\r\n    \r\n    temp = []\r\n    for i in list:\r\n        if i%2 != 0:\r\n            temp.append(i)\r\n    return temp\r\n\r","votes":125356.532},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":126572.228},{"text":"\r\n\r\n    # Code Structure\r\n    odd_numbers = []\r\n    \r\n    # Function\r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 != 0:\r\n                odd_numbers.append(i)\r\n    \r\n    return odd_numbers\r\n\r\nif __name__ == '__main__':\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(Split(list))\r\n\r\n\"\"\"\r\nOutput\r\n[1, 11, 13, 15, 17, 19]\r\n\"\"\"\r\n","votes":127145.404},{"text":"\r\n    odd_list = []\r\n    for item in list:\r\n        if type(item) == int and item % 2:\r\n            odd_list.append(item)\r\n    return odd_list\r\n\r\n\r","votes":128358.52},{"text":"\r\n    \r\n    odd_list = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r","votes":130030.016},{"text":"\r\n    odds = []\r\n    for x in list:\r\n        if x % 2 != 0:\r\n            odds.append(x)\r\n    return odds\r\n\r\n\r","votes":132818.264},{"text":"\r\n    \r\n    oddList = []\r\n    \r\n    for i in list:\r\n        if i%2 != 0:\r\n            oddList.append(i)\r\n    return oddList\r\n\r\n\r","votes":134865.0},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if type(i) == int and i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":135055.504},{"text":"\r\n    odd = []\r\n    for item in list:\r\n        if type(item) == int and item % 2 != 0:\r\n            odd.append(item)\r\n    return odd\r\n\r\n\r","votes":135748.54},{"text":"\r\n    \r\n    odd_numbers = []\r\n    for number in list:\r\n        if number % 2 != 0:\r\n            odd_numbers.append(number)\r\n    return odd_numbers\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n\r","votes":136001.268},{"text":"\r\n    # code starts here\r\n    odd_list = []\r\n    for i in list:\r\n        if(i%2!=0):\r\n            odd_list.append(i)\r\n    return odd_list\r\n    # code ends here\r\n\r\n\n\n# --------------\n#Code starts here\r","votes":137455.496},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nlist = [11, 9, 5, 12, 10, 6, 13, 12, 15, 17, 14, 20]\r\nprint(Split(list))\r\n\r\n# Output: [11, 9, 5, 12, 10, 13, 12, 15, 17, 14, 20]\r\n\r\n\r","votes":139890.368},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r","votes":140335.34},{"text":"\r\n    odd_numbers = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd_numbers.append(i)\r\n    return odd_numbers\r\n\r\n\r","votes":141000.204},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if isinstance(i, int) and i % 2 != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r","votes":141352.192},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i%2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":141790.464},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if type(i) == int and i % 2 != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r","votes":145522.0},{"text":"\r\n\r\n    odd = []\r\n    for i in list:\r\n        if type(i) == int and i % 2 == 1:\r\n            odd.append(i)\r\n\r\n    return odd\r\n\r\nprint(Split([1, 2, 'a', 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 'b', 14, 15, 16, 17, 18, 'c', 19, 20, 21, 'd', 22, 23, 24, 25, 26, 'e', 27, 28, 29, 30, 31, 32, 'f', 33, 34, 35, 36, 37, 38, 'g', 39, 40, 41, 42, 43, 44, 45, 46, 47, 'h', 48, 49, 50, 51, 52, 53, 54, 55, 56, 'i', 57, 58, 59, 60, 61, 62, 63, 64, 65, 'j']))\r\n\r\n\r","votes":148049.552},{"text":"\r\n    odd_numbers = []\r\n    for item in list:\r\n        if type(item) == int:\r\n            if item % 2 != 0:\r\n                odd_numbers.append(item)\r\n    return odd_numbers\r\n\r\n\r","votes":153569.14},{"text":"\r\n    odd_list = []\r\n    for val in list:\r\n        if val % 2 == 1:\r\n            odd_list.append(val)\r\n    return odd_list\r\n\r\n\r","votes":155341.58},{"text":"\r\n    odd_list = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 != 0:\r\n            odd_list.append(list[i])\r\n    return odd_list\r\n\r\n\r","votes":156560.356},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i % 2:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r","votes":162909.892},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i%2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nprint(Split([1,3,5,7,8,9,10,12,14,15,17,18,21,23,27,28,29,30]))\r\n\r\n","votes":163194.636},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\r\nprint(Split(List))\r\n\r\n\r","votes":164848.404},{"text":"\r\n    odd_list = []\r\n    for x in list:\r\n        if type(x) == int:\r\n            if x % 2 != 0:\r\n                odd_list.append(x)\r\n    return odd_list\r\n\r\n\r\nprint(Split([1, \"a\", \"a\", \"b\", 5, -2, \"a\", 10, 1, 3, 100, 200]))\r\n\r\n# Output\r\n# [1, 5, -2, 1, 3, 100]\r\n\r\n\r\n# =============================================================================\r\n# Write a python function to remove duplicates from a list\r\n# =============================================================================\r\n\r\n\r","votes":165042.78},{"text":"\r\n    odd_list = []\r\n    for index in range(len(list)):\r\n        if list[index] % 2 != 0:\r\n            odd_list.append(list[index])\r\n    return odd_list\r\n\r\nlist = [1, 10, 20, 3, 8, 4, 6, 2, 15, 19, 7, 12, 5]\r\nprint(Split(list))\r\n\r\n\r","votes":165597.492},{"text":"\r\n    finalList = []\r\n    for i in list:\r\n        if (i % 2) != 0:\r\n            finalList.append(i)\r\n    return finalList\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n\r\n\r\n# Write a python function to find odd numbers from a mixed list.\r\n\r\n\r","votes":168792.368},{"text":"\r\n    new_list = []\r\n    for i in list:\r\n        if type(i) == int and i % 2 != 0:\r\n            new_list.append(i)\r\n    return new_list\r\n\r\n\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\",\r\n        \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\",\r\n        \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \" \",\r\n        \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"_\", \"-\", \"+\", \"=\", \"{\", \"[\", \"}\", \"]\", \"|\", \"~\", \";\", \":\", \"'\",\r\n        \",\", \"<\", \".\", \">\", \"\/\", \"?\", \"`\", \" \", \" \"]\r\nprint(Split(list))\r\n","votes":169014.468},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 == 1:\r\n                odd.append(i)\r\n    return odd\r\n\r\n\r","votes":170059.972},{"text":"\r\n    res = []\r\n    for i in list:\r\n        if type(i) is int and i % 2 != 0:\r\n            res.append(i)\r\n    return res\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\r\n\r\n\"\"\"Write a python function to find odd numbers from a mixed list.\"\"\"\r\n\r\n\r","votes":172115.704},{"text":"\r\n\r\n    \"\"\"\r\n    >>> Split([1, 2, 3, 4, 5])\r\n    [1, 3, 5]\r\n    >>> Split([1, 2, 3, 4, 'a', 5, 'b', 'c'])   \r\n    [1, 3, 5]\r\n    \"\"\"\r\n    odd_list = []\r\n    for i in list:\r\n        if type(i) == int and (i % 2) != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r\n\"\"\"Write a python function to find the longest word from a list of words.\"\"\"\r\n\r\n\r","votes":172720.144},{"text":"\r\n    odds = []\r\n    for i in list:\r\n        if(type(i)==int and i%2 != 0):\r\n            odds.append(i)\r\n    return odds\r\n\r\n\r\n# Print the result\r\nprint(Split([9, 3.14, 100, 'A', 12, 6, 18]))\r\n","votes":174852.38},{"text":"\r\n    L = []\r\n    for i in list:\r\n        if isinstance(i, int) and i % 2 == 1:\r\n            L.append(i)\r\n    return L\r\n\r\n\r","votes":177150.296},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 == 1:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = map(int, input().split())\r\n    print(Split(arr))\r\n\r\n\r\n# # Find odd numbers in a list\r\n# n = int(input())\r\n# arr = map(int, input().split())\r\n# odd_count = 0\r\n# for i in arr:\r\n#     if i % 2 != 0:\r\n#         odd_count += 1\r\n# print(odd_count)\r\n\r\n\r\n# # Find even numbers in a list\r\n# n = int(input())\r\n# arr = map(int, input().split())\r\n# even_count = 0\r\n# for i in arr:\r\n#     if i % 2 == 0:\r\n#         even_count += 1\r\n# print(even_count)\r\n\r\n\r\n# # Find even numbers in a list\r\n# n = int(input())\r\n# arr = map(int, input().split())\r\n# even_count = 0\r\n# for i in arr:\r\n#     if i % 2 == 0:\r\n#         even_count += 1\r\n# print(even_count)\r\n\r\n\r\n# # Find odd numbers in a list\r\n# n = int(input())\r\n# arr = map(int, input().split())\r\n# odd_count = 0\r\n# for i in arr:\r\n#     if i % 2 != 0:\r\n#         odd_count += 1\r\n# print(odd_count)\r\n\r\n\r\n# # Find even numbers in a list\r\n# n = int(input())\r\n# arr = map(int, input().split())\r\n# even_count = 0\r\n# for i in arr:\r\n#     if i % 2 == 0","votes":185238.964},{"text":"\r\n\r\n    odd = []\r\n\r\n    for i in list:\r\n        if not isinstance(i,int):\r\n            continue\r\n        elif i%2!=0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r","votes":192215.564},{"text":"\r\n    \r\n    odd_list = []\r\n    \r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 == 1:\r\n                odd_list.append(i)\r\n    if len(odd_list) == 0:\r\n        return 'No odd numbers present'\r\n    else:\r\n        return odd_list\r\n\r\n\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\r\nprint(Split(list))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":201168.952},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 !=0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [1, 2, 'a', 3, 4, 5, 6, 7, 8, 9]\r\n    print(Split(nums))\r\n\r\n","votes":203064.52},{"text":"\r\n    odds = []\r\n    for i in list:\r\n        if isinstance(i, int) and i % 2 != 0:\r\n            odds.append(i)\r\n    return odds\r\n\r\n\r\nprint(Split([1, 2, 3, \"a\", 4, \"b\", 5, \"c\", 6]))\r\nprint(Split([1, 2, 3, \"a\", 4, \"b\", 5, \"c\", 6, 7, 8]))\r\nprint(Split([]))\r\nprint(Split([1, 2, 3, \"a\", 4, \"b\", 5, \"c\", 6, 7, 8, 9, 10]))\r\n\r\n\r","votes":213221.736},{"text":"\r\n    odd_list=[]\r\n    for li in list:\r\n        if type(li)==int:\r\n            if li%2!=0:\r\n                odd_list.append(li)\r\n            else:\r\n                pass\r\n        else:\r\n            odd_list.append(li)\r\n    return odd_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 'a', 'b', 'c', 'd', 'e', 8.9]))\r\n\r\n#Reference: w3resource","votes":239899.988},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd_list.append(i)\r\n    return odd_list\r\n\r\n\r\nmy_list = [1, 5, 10, 15, 2, 3, 7, 9, 8, 4, 6, 12, 14, 11]\r\nprint(Split(my_list))\r\n\r\n\r","votes":242410.168},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if isinstance(i, int):\r\n            if i % 2 != 0:\r\n                odd_list.append(i)\r\n    return odd_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [12, 10, \"hello\", 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,","votes":null},{"text":"\r\n    \"\"\"\"\"\"\"\"\r\n    odd = []\r\n    for item in list:\r\n        if type(item) == int and item % 2 != 0:\r\n            odd.append(item)\r\n    return odd\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, \"a\", \"b\", \"c\", \"d\", \"e\"]))\r\nprint(Split([\"a\", \"b\", \"c\", \"d\", \"e\"]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", 12, 13","votes":null},{"text":"\r\n    odd_list=[]\r\n    for i in list:\r\n        if i%2==1:\r\n            odd_list.append(i)\r\n    return odd_list\r\n    \r\n    \r\nlist=input(\"Enter the list: \").split()\r\nfor i in list:\r\n    list[list.index(i)]=int(i)\r\nodd_list=Split(list)\r\nprint(odd_list)\r\n\r\n\r\n\r\n#code\r","votes":null},{"text":"\r\n    oddlist=[]\r\n    for i in list:\r\n        if i%2!=0:\r\n            oddlist.append(i)\r\n    return oddlist\r\n\r\n\r\nprint(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\r\nprint(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\r\nprint(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\r\n\r\n\r\n\r\n'''\r\nOutput:\r\n[1, 3, 5, 7, 9, 11, 13, 15]\r\n[1, 3, 5, 7, 9, 11, 13, 15, 17]\r\n[1, 3, 5, 7, 9, 11, 13, 15, 17]\r\n\r\n\r\n\r\nExplanation:\r\nPython program to find odd numbers from a mixed list\r\n\r\nSuppose we have a list of numbers\r\n\r\n1. We can use the modulus operator to find out odd number. If the remainder of the division is not 0, then it is an odd number.\r\n2. We can use the modulus operator to find out odd number. If the remainder of the division is 0, then it is an even number.\r\n\r\n\r\n\r\nReference:\r\nhttps:\/\/www.geeksforgeeks.org\/python-program-to-find-odd-numbers-from-a-mixed-list\/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nProblem: 11. Split a list in two\r\nDifficulty: Easy\r\nImplement a function that splits a list in two.\r\n\r","votes":null},{"text":"\r\n    \r\n    OddNumbers = []\r\n    for i in list:\r\n        if(i%2 != 0):\r\n            OddNumbers.append(i)\r\n    return OddNumbers\r\n    \r\n\r\n    \r\n\r\n\r\n\r\nprint(Split([","votes":null},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    print(\"Original List:\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\n    print(\"Odd Numbers:\", Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n\r\n\"\"\"\r\nOutput:\r\nOriginal List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nOdd Numbers: [1, 3, 5, 7, 9]\r\n\r\n\r\nExpected Output:\r\nOriginal List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nOdd Numbers: [1, 3, 5, 7, 9]\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return odd, even\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # code\r\n\r\n    odd = []\r\n    for item in list:\r\n        if item % 2 != 0:\r\n            odd.append(item)\r\n\r\n    return odd\r\n\r\n\r\nif __name__ == '__main__':\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\n    print(\"Original List: \", list)\r\n    print(\"Odd List: \", Split(list","votes":null},{"text":"\r\n    res1 = []\r\n    res2 = []\r\n    for x in list:\r\n        if isinstance(x, int):\r\n            if x % 2:\r\n                res1.append(x)\r\n            else:\r\n                res2.append(x)\r\n        else:\r\n            res1.append(x)\r\n    return res1, res2\r\n\r\n\r","votes":null},{"text":"\r\n\r\n\r\n#","votes":null},{"text":"\r\n    lst = list\r\n    odd = []\r\n    for i in lst:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(Split([1, 2, \"a\", \"b\", \"c\", 1, 3]))\r\n    print(Split([1, 2, 4, 6, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 34, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 52, 54, 55, 56, 58, 59, 60, 62, 64, 66, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 82, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 98, 99, 100, 102, 104, 105, 106, 108, 109, 110, 112, 114, 115, 116, 118, 119, 120, 122, 124, 125, 126, 128, 129, 130, 132, 134, 13","votes":null},{"text":"\r\n\r\n    odd = []\r\n    even = []\r\n\r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 == 1:\r\n                odd.append(i)\r\n            else:\r\n                even.append(i)\r\n        else:\r\n            print(i, \" is not a number\")\r\n    return odd, even\r\n\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 != 0:\r\n                new_list.append(i)\r\n    return new_list\r\n\r\n\r\n# Test Cases\r\n\r\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\noutput1 = [1, 3, 5, 7, 9]\r\n\r\nlist2 = [1, 'a', 3, 'b', 5, 'c', 7, 'd', 9, 'e']\r\noutput2 = [1, 3, 5, 7, 9]\r\n\r\nlist3 = [1, 'a', 3, 'b', 5, 'c', 7, 'd', 9, 'e', 'f']\r\noutput3 = [1, 3, 5, 7, 9]\r\n\r\nlist4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']\r\noutput4 = [1, 3, 5, 7, 9]\r\n\r\nlist5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b']\r\noutput5 = [1, 3, 5, 7, 9]\r\n\r\n# Output\r\n\r\nprint(Split(list1) == output1)\r\nprint(Split(list2) == output2)\r\nprint(Split(list3) == output3)\r\nprint(Split(list4","votes":null},{"text":"\r\n    # 1\r\n    # list = [1,2,3,4,5,6,7]\r\n    # print(list)\r\n    # Odd_list = []\r\n    # for i in list:\r\n    #     if i%2 != 0:\r\n    #         Odd_list.append(i)\r\n    # print(Odd_list)\r\n\r\n    # 2\r\n    # list = [1,2,3,4,5,6,7]\r\n    # print(list)\r\n    # Odd_list = [i for i in list if i%2 != 0]\r\n    # print(Odd_list)\r\n\r\n    # 3\r\n    # list = [1,2,3,4,5,6,7]\r\n    # print(list)\r\n    # Odd_list = [i for i in list if i%2 != 0]\r\n    # print(Odd_list)\r\n\r\n    # 4\r\n    # list = [1,2,3,4,5,6,7]\r\n    # print(list)\r\n    # Odd_list = []\r\n    # for i in list:\r\n    #     if i%2 != 0:\r\n    #         Odd_list.append(i)\r\n    # print(Odd_list)\r\n\r\n    # 5\r\n    # list = [1,2,3,4,5,6,7]\r\n    # print(list)\r\n    # Odd_list = [i for i in list if i%2 != 0]\r\n    # print(Odd_list)\r\n\r\n    # 6\r\n    # list = [1,2,3,4,5,6,7]\r\n    # print(list)\r\n    # Odd_list = []\r\n    # for i in list:\r\n    #     if i%2 != 0:\r\n    #         Odd_list.append(i)\r\n    # print(Odd_list)\r\n\r\n    # 7\r","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for ele in list:\r\n        if ele % 2 == 0:\r\n            even.append(ele)\r\n        else:\r\n            odd.append(ele)\r\n    return odd, even\r\n\r\n\r","votes":null},{"text":"\r\n    odd_list = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 != 0:\r\n            odd_list.append(list[i])\r\n    return odd_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    # These \"asserts\" using only for self-checking and not necessary for\r\n    # auto-testing\r\n    assert Split([1, 2, 3, 4, 5]) == [1, 3, 5], \"Odd numbers\"\r\n    assert Split([1, 2, 3, 'a', 'b', 4","votes":null},{"text":"\r\n    \r\n    oddnum = list[1::2]\r\n    oddnum.sort()\r\n    print(oddnum)\r\n    \r\nlist = [1,2,3,4,5,6,7,8,9,10,11,12,13]\r\nSplit(list)\r\n\r\n\r\n\r\nlist = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]\r\nSplit(list)\r\n\r\n\r\n\r\nlist = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\r\nSplit(list)\r\n\r\n\r\n\r\nlist = [1,2,3,4,5,6,7,8,9,10,11,1","votes":null},{"text":"\r\n    new_list = []\r\n    for i in list:\r\n        if (i % 2) == 1:\r\n            new_list.append(i)\r\n    return new_list\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list = [2, 3, 4, 5, 6, 7, 8","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 == 0:\r\n                even.append(i)\r\n            else:\r\n                odd.append(i)\r\n    return odd, even\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    for x in list:\r\n        if x % 2 == 0:\r\n            odd.append(x)\r\n    return odd\r\n\r\n\r","votes":null},{"text":"\r\n    res = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            res.append(i)\r\n    return res\r\n\r\n\r\nif __name__ == '__main__':\r\n    l = [1, 10, 12, 14, 15, 2, 3, 4, 5, 6, 7, 32, 44, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\r\n         25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, ","votes":null},{"text":"\r\n    \r\n    odd = []\r\n    for i in list:\r\n        if isinstance(i, int):\r\n            if i % 2 != 0:\r\n                odd.append(i)\r\n        else:\r\n            continue\r\n    return odd\r\n    \r\n\r\n# Code to test the function\r\n\r\nprint(Split([0, 2, 4, 5, 6, 8, 9])) # [2, 5, 9]\r\nprint(Split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])) # [1, 3, 5, 7, 9]\r\nprint(Split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # [1, 3, 5, 7, 9]\r\nprint(Split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])) # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\r\nprint(Split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])) # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\r\nprint(Split([0, 1, 2, 3, 4, 5, 6, 7, ","votes":null},{"text":"\r\n    odd_num = []\r\n    for x in list:\r\n        if type(x) == int:\r\n            if x % 2 != 0:\r\n                odd_num.append(x)\r\n        elif type(x) == list:\r\n            odd_num.extend(Split(x))\r\n        else:\r\n            pass\r\n    return odd_num\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    mixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\r\n                                                        28, 29, 30, 31, 32,\r\n                                                        33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\r\n                                                        49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\r\n                                                        65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\r\n                                                        81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,","votes":null},{"text":"\r\n    # User function Template for python3\r\n    # arr = []\r\n    # n = len(list)\r\n    # for i in range(n):\r\n    #     if list[i] % 2 != 0:\r\n    #         arr.append(list[i])\r\n    # return arr\r\n    l = list.copy()\r\n    while l:\r\n        if l[0] % 2 != 0:\r\n            print(l.pop(0), end = \" \")\r\n        else:\r\n            l.pop(0)\r\n\r\n\r\n# { \r\n#  Driver Code Starts\r\n# Initial Template for Python 3\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for i in range(t):\r\n        n = int(input())\r\n        arr = list(map(int, input().strip().split()))\r\n        Split(arr)\r\n# } Driver Code Ends\r\n\r\n# Execution Time:0.05\r\n# 4 1 4 3 5 2 5 1 2 3\r\n\r\n# 4 1 4 3 5 2 5 1 2 3\r\n\r\n# 4 1 4 3 5 2 5 1 2 3\r\n\r\n# 4 1 4 3 5 2 5 1 2 3\r\n\r\n# 4","votes":null},{"text":"\r\n    even = []\r\n    odd = []\r\n    for i in list:\r\n        if i%2 != 0:\r\n            odd.append(i)\r\n        else:\r\n            even.append(i)\r\n    print(even)\r\n    print(odd)\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    Split(a)\r\n\r\n#Output\r\n#[2, 4, 6, 8, 10]\r\n#[1, 3, 5, 7, 9]\r\n\r\n#Reference\r\n#https:\/\/www.programiz.com\/python-programming\/examples\/odd-even-list\r\n","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    print('even num is',even,'odd num is',odd)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\r\n\r\n\r\n\"","votes":null},{"text":"\r\n    for numbers in list:\r\n        if numbers % 2 != 0:\r\n            print(numbers)\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if(type(i)==int and i%2!=0):\r\n            odd.append(i)\r\n    return odd\r\n\r\nprint (Split([1, 2, 3, 4, 5, 6,'","votes":null},{"text":"\r\n    i=0\r\n    for x in list:\r\n        if x%2!=0:\r\n            print(x, end=\" \")\r\n            i+=1\r\n    if i==0:\r\n        print(\"No odd number found.\")\r\n\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nSplit(list)\r\n\r","votes":null},{"text":"\r\n    odd_list = []\r\n    for i in list:\r\n        if type(i) is int:\r\n            if i % 2 != 0:\r\n                odd_list.append(i)\r\n    return odd_list\r\n\r\n\r\nprint(Split([1, \"d\", 7, \"a\", 4, \"f\", 2, 9, \"s\", 7, \"d\", 8, 5, 3, 1, 8, 2, 9, 1, 13, 1, 1, 2, 9, 7, 5, 5, 7, 1, 5, 8, 7, 6, 8, 1, 14, 1, 1, 1, 3, 1, 8, 1, 9, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,","votes":null},{"text":"\r\n    l1, l2 = [], []\r\n    for i in list:\r\n        if i%2==1:\r\n            l1.append(i)\r\n        else:\r\n            l2.append(i)\r\n    return l1,l2\r\n\r\n\r\nif __name__ == '__main__':\r\n    list = [1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i']\r\n    print(Split(list))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\n\r\n\"\"\"\r\nOutput:\r\n","votes":null},{"text":"\r\n    odd = []\r\n    for x in list:\r\n        if x % 2 != 0:\r\n            odd.append(x)\r\n    return odd\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(\"Odd numbers are:\", Split(list))\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    print(\"Odd numbers are:\", Split(list))\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\r\n    print(\"Odd numbers are:\", Split(list))\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n    print(\"Odd numbers are:\", Split(list))\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\r\n    print(\"Odd numbers are:\", Split(list))\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\r\n    print(\"Odd numbers are:\", Split(list))\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, ","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if i % 2 == 0:\r\n            even.append(i)\r\n        else:\r\n            odd.append(i)\r\n    return odd,even\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for item in list:\r\n        if item % 2 != 0:\r\n            new_list.append(item)\r\n    return new_list\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ","votes":null},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    print(odd)\r\n\r\n\r","votes":null},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if type(i) == int and i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, \"a\", 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(Split([\"a\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, \"b\", 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, \"a\", 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11","votes":null},{"text":"\r\n    #list = [1,2,3,4,5,'a','b','c','d','e','f',7,8,9,10]\r\n    odd_num = []\r\n    for i in list:\r\n        if type(i) == int and i % 2 != 0:\r\n            odd_num.append(i)\r\n            \r\n    print(\"Odd Numbers : \",odd_num)\r\n\r\nlist = [1,2,3,4,5,'a','b','c','d','e','f',7,8,9,10]\r\nSplit(list)\r\n\r\n\"\"\"Output\r\nOdd Numbers :  [1, 3, 5, 7, 9]\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if type(i) == int and i % 2 != 0:\r\n            odd.append(i)\r\n    return odd\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(Split([1, 2, 'b', 2, 3, 'b', 4, 'b', 5, 'b', 6, 7, 8, 9, 'b', 10, 'b']))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(Split([1, 2, 'b', 3, 4, 5, 'b', 6, 7, 8, 9, 10, 'b']))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'b', 'b', 'b', 'b']))\r\n    print(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'b', 11, 'b', 12, 'b', 13, 'b', 14, 'b', 15, 'b', 16, 'b', 17, 'b', 18,\r\n                 'b', 19, 'b', 20, 'b', 21, 'b', 22, 'b', 23, 'b', 24, 'b', 25, 'b', 26, 'b', 27, 'b', 28, 'b', 29, 'b',\r\n                 30, 'b', 31, 'b', 32, 'b', 33, 'b', 34, 'b', 35, 'b', 36, 'b', 37, 'b', 3","votes":null},{"text":"\r\n    odds = []\r\n    for x in list:\r\n        if x % 2 != 0:\r\n            odds.append(x)\r\n    return odds\r\n\r\n# Driver code\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nprint(Split(a))\r\n\r\n# Output\r\n\"\"\"[1, 3, 5, 7, 9]\"\"\"\r\n\r\n# Sample Tests\r\n\"\"\"\r\nInput:\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nOutput:\r\n[1, 3, 5, 7, 9]\r\n\r\nInput:\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n\r\nOutput:\r\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\r\n\r\nInput:\r\n[7, 4, 8, 5, 2]\r\n\r\nOutput:\r\n[7, 5, 2]\r\n\r\nInput:\r\n[10, 2, 5, 7, 9, 12, 14, 21, 32","votes":null},{"text":"\r\n    odd = []\r\n    for i in list:\r\n        if i % 2 != 0:\r\n            odd.append(i)\r\n    print(odd)\r\n\r\n\r\nif __name__ == '__main__':\r\n    N = int(input())\r\n    mylist = []\r\n    for i in range(N):\r\n        ele = int(input())\r\n        mylist.append(ele)\r\n    Split(mylist)\r\n","votes":null},{"text":"\r\n\r\n    odd_num = []\r\n    for i in range(len(list)):\r\n        if list[i] % 2 == 1:\r\n            odd_num.append(list[i])\r\n    odd_num.sort()\r\n    return odd_num\r\n\r\n\r","votes":null},{"text":"\r\n    \"\"\"Make a list of odd numbers from a mixed list.\"\"\"\r\n    odd = []\r\n    for i in list:\r\n        if (i % 2) != 0:\r\n            odd","votes":null},{"text":"\r\n    odd = []\r\n    even = []\r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 == 0:\r\n                even.append(i)\r\n            else:\r\n                odd.append(i)\r\n        else:\r\n            pass\r\n\r\n    print('Even Numbers:', even)\r\n    print('Odd Numbers:', odd)\r\n    return\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 11, 12, 'd', 'e', 'f']\r\n    Split(list)\r\n","votes":null},{"text":"\r\n    list = list\r\n    odd = []\r\n    for i in list:\r\n        if type(i) == int:\r\n            if i % 2 != 0:\r\n                odd.append(i)\r\n    print(\"Odd numbers:\", odd)\r\n\r\n\r\nSplit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", 23, 45, 34, 54, 76, 98, 98, 34, \"b\"])\r\n\r\n# Sample Output:\r\n# Odd numbers: [1, 3, 5, 7, 9, 23, 34, 54, 76, 98, 98, 34]\r\n\r\n\"\"\"\r\n\r\nQuestion 2:\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r","votes":null}],"time":{"count":54.0,"avg":147208.234962963,"std":34361.6877174367,"cov":0.2334223199}}
{"id":555,"question":"def difference(n) :\r\n    \"\"\"Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\"\"\"","answers":[{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_n = 0\r\n    for num in range(1,n+1):\r\n        sum_of_cubes += num**3\r\n        sum_of_n += num\r\n    return sum_of_cubes - sum_of_n\r\n\r","votes":87040.732},{"text":"\r\n\r\n    #First we have to find the sum of the cubes of the first n natural numbers\r\n    summation_of_cubes = 0\r\n    for i in range(1,n+1):\r\n        summation_of_cubes += i**3\r\n\r\n    #Then we have to find the sum of the first n natural numbers\r\n    summation = 0\r\n    for i in range(1,n+1):\r\n        summation += i\r\n\r\n    #After we find the two sums we just have to subtract them\r\n    return summation_of_cubes - summation\r\n\r\n# test case\r\nprint(difference(10))\r\n\r\n# output\r\n2640\r\n\r\n# Code by:\r\n# Roll no: 18CS30040\r\n# Name: Shubhadeep Mondal\r\n# Mentor - 18CS10018 - Mrinal K","votes":97561.132},{"text":"\r\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\r\n    sum_natural = sum(range(1, n+1))\r\n    return sum_cubes - sum_natural\r\n\r\n\r","votes":102293.348},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1,n+1) :\r\n        sum1 += i**3\r\n        sum2 += i\r\n    return sum1 - sum2\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    n = int(input(\"Enter a number : \"))\r\n    print (\"The difference between sum of cubes of first %d natural numbers and the sum of first %d natural numbers is %d\" %(n,n,difference(n)))\r\n\r\n\"\"\"Output :\r\nEnter a number : 10\r\nThe difference between sum of cubes of first 10 natural numbers and the sum of first 10 natural numbers is 3025\r\n\"\"\"\r\n","votes":102409.428},{"text":"\r\n    sum_cube = 0\r\n    sum_natural = 0\r\n    for i in range(n + 1):\r\n        sum_cube += i ** 3\r\n        sum_natural += i\r\n    return sum_cube - sum_natural\r\n\r\n\r","votes":102418.208},{"text":"\r\n    sum_of_cubes = sum(i ** 3 for i in range(1, n + 1))\r\n    sum_of_n = sum(i for i in range(1, n + 1))\r\n    return abs(sum_of_cubes - sum_of_n)\r\n\r\n\r","votes":103077.476},{"text":"\r\n    \r\n    return sum(i*i*i for i in range(1, n + 1)) - sum(i for i in range(1, n + 1))\r\n\r\n\r","votes":108588.356},{"text":"\r\n    sum_of_n = (n*(n+1))\/\/2\r\n    list_of_n = [i**3 for i in range(1,n+1)]\r\n    sum_of_n_cubes = sum(list_of_n)\r\n    return sum_of_n_cubes - sum_of_n\r\n\r\n\r","votes":114168.652},{"text":"\r\n    \r\n    sum_cubes = 0\r\n    sum_n = 0\r\n    n = int(n)\r\n    for i in range(1, n+1) :\r\n        sum_cubes += i**3\r\n        sum_n += i\r\n    return sum_cubes - sum_n\r\n\r\n# Driver Code\r\n\r\nn = 10\r\nprint(difference(n))\r\n\r\n# Output\r\n\r\n# 2640\r\n\r\n# Explanation\r\n\r\n# The sum of cubes of first 10 natural numbers is 3025 and the sum of first 10 natural numbers is 55.\r\n# The difference between the two sums is 3025 - 55 = 2970.\r\n\r\n# Time Complexity : O(n)\r\n# Space Complexity : O(1)\r\n\r\n# 2\r\n\r\n# 1. Given a number n, find the sum of the first n prime numbers.\r\n\r\n# Examples\r\n\r\n# n = 5\r\n\r\n# Output: 15\r\n\r\n# Explanation: The first 5 prime numbers are 2, 3, 5, 7 and 11.\r\n# Their sum is 2 + 3 + 5 + 7 + 11 = 15.\r\n\r\n# n = 10\r\n\r\n# Output: 71\r\n\r\n# Explanation: The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23 and 29.\r\n# Their sum is 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 = 71.\r\n\r\n# n = 20\r\n\r\n# Output: 317\r\n\r\n# Explanation: The first","votes":114456.912},{"text":"\r\n    s1=0\r\n    s2=0\r\n    for i in range(1,n+1):\r\n        s1+=i**3\r\n        s2+=i\r\n    return s1-s2\r\n\r\nprint(difference(10))","votes":116361.272},{"text":"\r\n    a=0\r\n    b=0\r\n    for i in range(1,n+1):\r\n        a+=i**3\r\n        b+=i\r\n    return a-b\r\n\r\n#Answer\r\n\r","votes":116708.772},{"text":"\r\n    n = int(n)\r\n    sum_cubes = 0\r\n    sum_n = 0\r\n    for i in range(1, n+1) :\r\n        sum_cubes += i**3\r\n        sum_n += i\r\n    return abs(sum_cubes - sum_n)\r\n\r\n# Test the function\r\n\r\nprint(difference(10))\r\nprint(difference(10))\r\n\r\n# Output\r\n\r\n# 3025\r\n# 3025\r\n\r\n# Reference: w3resource","votes":118060.864},{"text":"\r\n\r\n    n = int(n)\r\n    \r\n    d = 0\r\n    for i in range(1, n+1) :\r\n        d += i**3\r\n    \r\n    for i in range(1, n+1) :\r\n        d -= i\r\n        \r\n    return d\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    print(difference(int(input())))\r\n","votes":121227.112},{"text":"\r\n    diff = 0\r\n    for i in range(1, n+1):\r\n        diff += i**3\r\n    for i in range(1, n+1):\r\n        diff -= i\r\n    return diff\r\n\r\n#print(difference(10))\r\n\r","votes":123506.232},{"text":"\r\n    \r\n    a = sum(i**3 for i in range(n+1))\r\n    b = sum(range(n+1))\r\n    return a-b\r\n\r\n\r\n\r","votes":126988.596},{"text":"\r\n    \r\n    list = []\r\n    result = 0\r\n    for i in range(1,n+1):\r\n        list.append(i**3)\r\n        result = result + i\r\n    return sum(list) - result\r\n\r\nprint(difference(100))\r\n\r\n# Answer: 25164150\r\n\r\n\r\n\r\n\r","votes":133773.208},{"text":"\r\n    \r\n    sum_of_cubes = 0\r\n    sum_of_numbers = 0\r\n    \r\n    for i in range(1, n + 1):\r\n        sum_of_cubes += pow(i, 3)\r\n        sum_of_numbers += i\r\n    \r\n    return sum_of_cubes - sum_of_numbers\r\n\r\n\r","votes":140447.108},{"text":"\r\n    n=int(n)\r\n    x = 0\r\n    for i in range(1,n+1):\r\n        x = x + i**3\r\n    y = 0\r\n    for j in range(1,n+1):\r\n        y = y + j\r\n    return x-y\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input().strip())\r\n    result = difference(n)\r\n    print(result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":141456.616},{"text":"\r\n    \r\n    sum_cubes = 0\r\n    sum_num = 0\r\n    for i in range(1, n + 1) :\r\n        sum_cubes += i**3\r\n        sum_num += i\r\n    \r\n    return sum_cubes - sum_num\r\n\r\nprint(difference(5))\r\n# Output : 13\r\n\r\nprint(difference(10))\r\n# Output : 292\r\n\r\nprint(difference(20))\r\n# Output : 1385\r\n\r\nprint(difference(25))\r\n# Output : 3025\r\n\r\nprint(difference(30))\r\n# Output : 5468\r\n\r\nprint(difference(35))\r\n# Output : 8508\r\n\r\nprint(difference(40))\r\n# Output : 11964\r\n\r\nprint(difference(45))\r\n# Output : 17253\r\n\r\nprint(difference(50))\r\n# Output : 2","votes":142308.98},{"text":"\r\n    l = []\r\n    for i in range (1,n+1):\r\n        l.append(i**3)\r\n    return sum(l) - sum(range(1,n+1))\r\n\r","votes":154695.644},{"text":"\r\n    sum_cubes = 0\r\n    sum_n = 0\r\n    for i in range(1, n + 1) :\r\n        sum_cubes += (i ** 3)\r\n        sum_n += i\r\n    \r\n    return sum_cubes - sum_n\r\n\r\nprint(difference(5))\r\n# 100 is the answer\r\n\r\n# Solution 2\r","votes":159281.904},{"text":"\r\n    \r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1,n+1):\r\n        sum1 += i**3\r\n        sum2 += i\r\n    return sum1 - sum2\r\nprint(difference(5))\r\nprint(difference(7))\r\nprint(difference(10))\r\n","votes":169605.54},{"text":"\r\n    sum_cubes = sum([i**3 for i in range(1, n + 1)])\r\n    sum_nums = sum(range(1, n + 1))\r\n    return sum_cubes - sum_nums\r\n\r\n\r\n# Test cases\r\nprint(difference(10))\r\nprint(difference(11))\r\nprint(difference(12))\r\nprint(difference(13))\r\nprint(difference(14))\r\nprint(difference(15))\r\n\r\n# Output\r\n# 3025\r\n# 3215\r\n# 3405\r\n# 3595\r\n#","votes":175783.184},{"text":"\r\n    n = n\r\n    a = []\r\n    for i in range(n+1):\r\n        a.append(i)\r\n    b = []\r\n    for i in range(n+1):\r\n        b.append(i**3)\r\n    c = sum(b)\r\n    d = sum(a)\r\n    e = c - d\r\n    return e\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter a number : \"))\r\n    print(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is\",difference(n))\r\n\r\n# Sample Input\/Output\r\n\r\n# Input:\r\n# Enter a number : 5\r\n\r\n# Output:\r\n# The difference between sum of cubes of first 5 natural numbers and the sum of first 5 natural numbers is 100\r\n\r\n# Explanation:\r\n# The difference between the sum of cubes of first 5 natural numbers and the sum of first 5 natural numbers is 100.\r\n# The sum of cubes of first 5 natural numbers is 153 and sum of first 5 natural numbers is 15.\r\n# Therefore, difference between the sum of cubes of first 5 natural numbers and the sum of first 5 natural numbers is 100.\r\n\r\n# Input:\r\n# Enter a number : 3\r\n\r\n# Output:\r\n# The difference between sum of cubes of first 3 natural numbers and the sum of first 3 natural numbers is 14\r\n\r\n# Explanation:\r\n# The difference between the sum of cubes of first 3 natural numbers and the sum of first 3 natural numbers is 14.\r\n# The sum of cubes of first 3 natural numbers is 30 and sum of first 3 natural numbers is 6.\r\n# Therefore, difference between the sum of cubes of first 3 natural numbers and the sum of first 3 natural numbers is 1","votes":176966.632},{"text":"\r\n    \r\n    sum_of_cubes = 0\r\n    for i in range(1, n+1):\r\n        sum_of_cubes += i**3\r\n    \r\n    first_n = n*(n+1)\/\/2\r\n    \r\n    return sum_of_cubes - first_n\r\n\r\nprint(difference(10))\r\n\r\n\r\n# # 03. Write a python program to find the sum of digits of a given number.\r\n\r","votes":185244.976},{"text":"\r\n    \r\n    #sum of cubes\r\n    s1 = 0\r\n    for i in range(1,n+1):\r\n        s1 += i**3\r\n    \r\n    #sum of natural numbers\r\n    s2 = (n*(n+1))\/2\r\n    \r\n    return s1 - s2\r\n    \r\nprint(difference(10))\r\nprint(difference(20))\r\nprint(difference(50))\r\n","votes":195836.28},{"text":"\r\n    cubes = 0\r\n    sum1 = 0\r\n    for i in range(1,n+1):\r\n        cubes += i**3\r\n    for i in range(1,n+1):\r\n        sum1 += i\r\n    return cubes-sum1\r\n\r\n\r\nprint(difference(2))\r\nprint(difference(14))\r\nprint(difference(100))\r\nprint(difference(1000))\r\n\r\n# https:\/\/www.hackerrank.com\/challenges\/cube-digit-difference\/problem\r\n\r\n\r\n\r\n\r\n","votes":302289.064},{"text":"\r\n    sum_of_cubes = cubes_sum(n)\r\n    sum_of_numbers = n * (n + 1) * (2 * n + 1) \/ 6\r\n    difference = sum_of_cubes - sum_of_numbers\r\n    return difference\r\n\r\n\r","votes":null},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_n = 0\r\n    for i in range(1, n+1):\r\n        sum_of_cubes += i**3\r\n        sum_of_n += i\r\n    return sum_of_cubes - sum_of_n**2\r\n\r\nprint(difference(10))\r\nprint(difference(20))\r\nprint(difference(30))\r\nprint(difference(40))\r\nprint(difference(50))\r\nprint(difference(60))\r\nprint(difference(70))\r\nprint(difference(80))\r\nprint(difference(90))\r\nprint(difference(100))\r\nprint(difference(110))\r\nprint(difference(120))\r\nprint(difference(130))\r\nprint(difference(140))\r\nprint(difference(150))\r\nprint(difference(160))\r\nprint(difference(170))\r\nprint(difference(180))\r\nprint(difference(190))\r\nprint(difference(200))\r\nprint(difference(210))\r\nprint(difference(220))\r\nprint(difference(230))\r\nprint(difference(240))\r\nprint(difference(250))\r\nprint(difference(260))\r\nprint(difference(270))\r\nprint(difference(280))\r\nprint(difference(290))\r\nprint(difference(300))\r\nprint(difference(310))\r\nprint(difference(320))\r\nprint(difference(330))\r\nprint(difference(340))\r\nprint(difference(350))\r\nprint(difference(360))\r\nprin","votes":null},{"text":"\r\n    sum_n = n * (n + 1) * (2*n + 1) \/ 6\r\n    sum_cubes = (n * (n + 1) * (2*n + 1)) \/ 3\r\n    sum_of_n = n * (n + 1) \/ 2\r\n    return (sum_cubes - sum_of_n) - sum_n\r\n\r\n\r\nif __name__ == '__main__' :\r\n    n = int(input(\"Enter 'n' : \"))\r\n    print(\"difference between sum of cubes of first 'n' natural numbers and the sum of first 'n' natural numbers is : \" + str(difference(n)))\r\n\r\n\r\n# Enter 'n' : 5\r\n# difference between sum of cubes of first 5 natural numbers and the sum of first 5 natural numbers is : 60\r\n\r\n# Enter 'n' : 10\r\n# difference between sum of cubes of first 10 natural numbers and the sum of first 10 natural numbers is : 210\r\n\r\n# Enter 'n' : 15\r\n# difference between sum of cubes of first 15 natural numbers and the sum of first 15 natural numbers is : 560\r\n\r\n# Enter 'n' : 20\r\n# difference between sum of cubes of first 20 natural numbers and the sum of first 20 natural numbers is : 1020\r\n\r\n# Enter 'n' : 25\r\n# difference between sum of cubes of first 25 natural numbers and the sum of first 25 natural numbers is : 1860\r\n\r\n# Enter 'n' : 30\r\n# difference between sum of cubes of first 30 natural numbers and the sum of first 30 natural numbers is : 2880\r\n\r\n# Enter 'n' : 35\r\n# difference between sum of cubes of first 35 natural numbers and th","votes":null},{"text":"\r\n    return (n*(n**2 + n)\/\/2) - (n*(n+1)\/\/2)\r\n\r","votes":null},{"text":"\r\n    \r\n    #Your code goes here\r\n\r\n    return (n*(n**2+n+1))\/6\r\n\r\n#Main function\r","votes":null},{"text":"\r\n    \r\n    sum1, sum2 = 0, 0\r\n    \r\n    for i in range(1, n + 1) :\r\n        sum1 += i ** 3\r\n        sum2 += i\r\n    \r\n    return sum1 - sum2 ** 2\r\n\r\nif __name__ == \"__main__\":\r\n    print(difference(3))\r\n    print(difference(4))\r\n    print(difference(5))\r\n","votes":null},{"text":"\r\n    a = 0\r\n    sum_of_cubes = 0\r\n    for i in range(1,n+1):\r\n        a = a + i\r\n        sum_of_cubes = sum_of_cubes + (i**3)\r\n    return sum_of_cubes - a**2\r\n\r\nprint(difference(10))\r\n\r\n# Question 2\r","votes":null},{"text":"\r\n    cubes = []\r\n    for i in range(n):\r\n        cubes.append(i**3)\r\n    \r\n    sum_cubes = sum(cubes)\r\n    sum_n = (n*(n+1))\/2\r\n    \r\n    return sum_cubes - sum_n\r\n    \r\n    \r\nn = int(input())\r\nprint(\"The difference is: \", difference(n))\r\n\r\n\r\n#Reference: w3resource","votes":null},{"text":"\r\n    a = 0\r\n    b = 0\r\n    for i in range(1,n+1):\r\n        a += i**3\r\n        b += i\r\n    return a - b\r\n\r\nn = int(input())\r\nprint(difference(n))\r\n\r\n\r\n\"\"\"\r\nSample Input\r\n4\r\n\r\nSample Output\r\n2625\r\n\"\"\"\r\n\r\n\r\n\"\"\"\r\nSolution\r\n\r","votes":null},{"text":"\r\n    diff = 0\r\n    for i in range(1, n+1) :\r\n        diff += (i**3) - i\r\n    return diff\r\n\r\n\r\n\r\nif __name__ == '__main__' :\r\n    n = int(input())\r\n    print(difference(n))\r\n\r\n\"\"\"Output\r\n\r\nInput : 4\r\nOutput : 10\r\n\r\nInput : 5\r\nOutput : 17\r\n\r\nInput : 6\r\nOutput : 28\r\n\r\nInput : 7\r\nOutput : 41\r\n\r\nInput : 8\r\nOutput : 55\r\n\r\nInput : 9\r\nOutput : 71\r\n\r\nInput : 10\r\nOutput : 88\r\n\r\nInput : 11\r\nOutput : 104\r\n\r\nInput : 12\r\nOutput : 120\r\n\r\nInput : 13\r\nOutput : 136\r\n\r\nInput : 14\r\nOutput : 152\r\n\r\nInput : 15\r\nOutput : 168\r\n\r\nInput : 16\r\nOutput : 184\r\n\r\nInput : 17\r\nOutput : 200\r\n\r\nInput : 18\r\nOutput : 216\r\n\r\nInput : 19\r\nOutput : 232\r\n\r\nInput : 20\r\nOutput : 248\r\n\r\nInput : 21\r\nOutput : 264\r\n\r\nInput : 22\r\nOutput : 280\r\n\r\nInput : 23\r\nOutput : 296\r\n\r\nInput : 24\r\nOutput : 312\r\n\r\nInput : 25\r\nOutput : 328\r\n\r\nInput : 26\r\nOutput : 344\r\n\r\nInput : 27\r","votes":null},{"text":"\r\n    sum1 = (n * (n + 1) * (2 * n + 1)) \/ 6\r\n    sum2 = (n * (n + 1)) \/ 2\r\n\r\n    return sum1 - sum2\r\n\r\nprint(difference(10))\r\n\r\n\r\n\"\"\"Write a python function to find the difference between sum of squares of first n natural numbers and the sum of first n natural numbers.\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    return (n*(n+1)*(2*n+1))\/6 - (n*(n+1))\/2\r\n\r\n#print(difference(10))\r\n\r\n\r\n\"\"\"Write a python function to find the sum of the factorials of the first n natural numbers.\"\"\"\r","votes":null},{"text":"\r\n    sum_of_cubes = 0\r\n    sum_of_natural_numbers = 0\r\n    for i in range(n) :\r\n        sum_of_cubes += i**3\r\n        sum_of_natural_numbers += i\r\n    return sum_of_cubes - sum_of_natural_numbers\r\n\r","votes":null},{"text":"\r\n    return (n**3*(n+1)**3)\/6 - (n*(n+1)*(2*n+1))\/6\r\n\r\nn = int(input(\"Enter number of natural numbers : \"))\r\nprint(\"The difference between sum of cubes of first\",n,\"natural numbers and the sum of first\",n,\"natural numbers is\",difference(n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1,n+1) :\r\n        sum1 += i**3\r\n        sum2 += i\r\n    return sum1 - sum2\r\n\r\nn = int(input(\"Enter a number : \"))\r\nprint(\"The difference is : \", difference(n))\r\n\r\n\r\n\"\"\"\r\nSample I\/O:\r\n\r\nEnter a number : 10\r\nThe difference is :  3025\r\n\r\nEnter a number : 100\r\nThe difference is :  15002500\r\n\r\nEnter a number : 1000\r\nThe difference is :  200000","votes":null},{"text":"\r\n    return (((n*(n+1))\/\/2)**2)-((n*(n+1)*(2*n+1))\/\/6)\r\n\r","votes":null},{"text":"\r\n    l = []\r\n    for i in range(n):\r\n        l.append(i**3)\r\n    s = sum(l)\r\n    return (n*(n+1)*(2*n+1)\/\/6)-s\r\n\r\n\r","votes":null},{"text":"\r\n    n_cube = n * n * n\r\n    n_sum = n * (n + 1) * (2*n + 1) \/ 6\r\n    return n_cube - n_sum\r\n\r\n\r","votes":null},{"text":"\r\n    s = 0\r\n    for i in range(1,n+1) :\r\n        s += i**3\r\n    s1 = 0\r\n    for i in range(1,n+1) :\r\n        s1 += i\r\n    return s - s1\r\n\r\nif __name__ == '__main__' :\r\n    n = int(input())\r\n    print(difference(n))\r\n    \r\n\r\n\"\"\"\r\n    Sample Input:\r\n        10\r\n    \r\n    Sample Output:\r\n        2","votes":null},{"text":"\r\n    \r\n    #code here\r\n    \r\n   ","votes":null},{"text":"\r\n    return ((n*(n+1)*(2*n+1))\/6)-((n*(n+1))\/2)\r\n\r\nn = int(input(\"Enter n : \"))\r\nprint(\"The difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is : \")\r\nprint(difference(n))\r\n\r\n\r\n# 2. Given a number n, find the nth Fibonacci number.\r\n\r","votes":null},{"text":"\r\n    return (n*(n+1)*(2*n+1)) - (n*(n+1)\/\/2)\r\n\r\n\r\n# 3\r","votes":null},{"text":"\r\n\r\n    # using math module\r\n    from math import factorial\r\n    return (factorial(n**3) - factorial(n))\r\n\r\n\r","votes":null},{"text":"\r\n    return n * (n * n + n) \/\/ 2\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter the number of natural numbers : '))\r\n    print('The difference between the sum of the first {} natural numbers and the sum of the first {} natural numbers is {}'.format(n, n, difference(n)))\r\n\r\n\"\"\"Output\r\nEnter the number of natural numbers : 5\r\nThe difference between the sum of the first 5 natural numbers and the sum of the first 5 natural numbers is 9\r\n\r\nProcess finished with exit code 0\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(1)\r\nSpace Complexity: O(1)\r\n\r\nExplanation\r\nn * (n * n + n) \/\/ 2 = n * (n * (n + 1)) \/\/ 2\r\n= n * (n(n + 1) \/ 2) = n * (n^2 + n) \/ 2 = n * n * (n + 1) \/ 2\r\n= n * n * n \/ 2 + n * n \/ 2 = n * n * (n + 1) \/ 4 + n * n \/ 2\r\n= n * n * n \/ 4 + n * n * (n + 1) \/ 4 + n * n \/ 2\r\n= n * n * n \/ 4 + n * n * n \/ 2 + n * n * n \/ 4\r\n= n * n * n \/ 4 + n * n * n \/ 4 + n * n * n \/ 2\r\n= n * n * n \/ 4 + n * n * n \/ 4 + n * n * n \/ 4 + n * n * n \/ 4\r\n= n * n * n \/ 4 + n * n * n \/ 4 + n * n * n \/ 4 + n * n * n \/ 4\r\n= n * n * n \/ 4 + n * n * n \/ ","votes":null},{"text":"\r\n    \r\n    sum_of_cubes = sum(range(1,n+1))**3\r\n    sum_of_n = sum(range(1,n+1))\r\n    return sum_of_cubes - sum_of_n\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    n = int(input().strip())\r\n    print(difference(n))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    return sum(range(n))**2 - sum([i**3 for i in range(n)])\r\n\r","votes":null},{"text":"\r\n    return (n*(n**2+n+1))\/6\r\n\r","votes":null},{"text":"\r\n    n = int(n)\r\n    return (n**3*(n+1)**3)\/\/2 - n*(n+1)\/\/2\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Difference: \", difference(input(\"Enter a value: \")))\r\n\r\n","votes":null},{"text":"\r\n    x=0\r\n    for i in range(1,n+1):\r\n        x=x+i\r\n    y=0\r\n    for i in range(1,n+1):\r\n        y=y+(i**3)\r\n    return x-y\r\n\r\n\r\nprint('Difference between sum of cubes of first n natural numbers and the sum of first n natural numbers is: ',difference(int(input(\"Enter a number: \"))))\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    x = 0\r\n    for i in range(1, n+1) :\r\n        x += pow(i, 3)\r\n    return x - n*(n+1)*(2*n+1)\/\/6\r\n\r\nprint(difference(100))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return (pow(n,3))-n\r\n\r\n#Test Case\r\nprint(difference(5))\r\nprint(difference(10))\r\nprint(difference(15))\r\nprint(difference(20))\r\nprint(difference(25))\r\nprint(difference(30))\r\nprint(difference(35))\r\nprint(difference(40))\r\nprint(difference(45))\r\nprint(difference(50))\r\nprint(difference(55))\r\nprint(difference(60))\r\nprint(difference(65))\r\nprint(difference(70))\r\nprint(difference(75))\r\nprint(difference(80))\r\nprint(difference(85))\r\nprint(difference(90))\r\nprint(difference(95))\r\nprint(difference(100))\r\n\r\n#Answer\r","votes":null},{"text":"\r\n    return (1+n)**3 \/ 3 - n * (n + 1) \/ 2\r\n\r\n\r","votes":null},{"text":"\r\n    a = sum(range(1, n + 1))\r\n    b = sum(i**3 for i in range(1, n + 1))\r\n    return a - b\r\n\r\nif __name__ == \"__main__\":\r\n    print(difference(1000))\r\n","votes":null},{"text":"\r\n    # First, we'll find the sum of the first n natural numbers\r\n    # Then, we'll find the sum of the cubes of the first n natural numbers\r\n    # The difference between these two sums is what we're looking for\r\n    sum_of_naturals = (n * (n + 1)) \/ 2\r\n    sum_of_cubes = (n * (n + 1) * (2*n + 1)) \/ 6\r\n    return sum_of_cubes - sum_of_naturals\r\n\"\"\"print(difference(100))\"\"\"\r\n\r","votes":null},{"text":"\r\n    n = int(n)\r\n    sn = (n*(n+1)*(2*n+1))\/6\r\n    snc = (n*(2*n+1)*(n+1))\/3\r\n    return sn - snc\r\n\r","votes":null},{"text":"\r\n    return (n ** 3 + (n * (n + 1) \/ 2) ** 2) - (n * (n + 1) * (2 * n + 1) \/ 6)\r\n\r\n\r","votes":null},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1, n+1):\r\n        sum1 = sum1 +","votes":null},{"text":"\r\n    return ((n * (n ** 2 + 1)) \/ 2) - ((n ** 2 * (n + 1)) \/ 2)\r\n\r\n\r","votes":null},{"text":"\r\n    return (n*(n+1)*(2*n+1))\/\/6\r\n\r\nprint(difference(100))\r\n\r\n#2\r\n\r","votes":null},{"text":"\r\n    l = []\r\n    for i in range(n):\r\n        l.append(i)\r\n    \r\n    l1 = []\r\n    for i in range(n):\r\n        l1.append(i**3)\r\n    \r\n    s1 = sum(l)\r\n    s2 = sum(l1)\r\n    \r\n    return (s2 - s1)\r\n\r\nprint(difference(5))\r\n\r","votes":null},{"text":"\r\n    return n*(n**2+n+1)\/6 - (n*(n+1)*(2*n+1))\/(6*n)\r\n\r\nprint(difference(10))\r\n\r\n\"\"\"Write a Python program to compute the absolute difference between two numbers.\"\"\"\r\n\r","votes":null},{"text":"\r\n    \r\n    sum_of_cubes = 0\r\n    sum_of_numbers = 0\r\n    \r\n    for i in range(1, n+1) :\r\n        sum_of_cubes += (i**3)\r\n        sum_of_numbers += i\r\n    \r\n    return sum_of_numbers**2 - sum_of_cubes\r\n\r\n\r","votes":null},{"text":"\r\n    a = []\r\n    for i in range(n):\r\n        a.append(i)\r\n    a = sum(pow(i,3) for i in a)\r\n    b = sum(i for i in range(n))\r\n    return a-b\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n","votes":null},{"text":"\r\n    sum_cubes = 0\r\n    sum_n = 0\r\n    for i in range(1, n+1) :\r\n        sum_cubes += i**3\r\n        sum_n += i\r\n    return sum_cubes - sum_n**2\r\n\r\n\r\nif __name__ == '__main__' :\r\n    n = int(input(\"Enter the number of natural numbers you want to sum : \"))\r\n    print(\"The difference between sum of cubes of first {} natural numbers and the sum of first {} natural numbers is : {}\".format(n, n, difference(n)))\r\n\r\n\r\n\"\"\"Output :\r\nEnter the number of natural numbers you want to sum : 5\r\nThe difference between sum of cubes of first 5 natural numbers and the sum of first 5 natural numbers is : 10\r\n\r\nTime Complexity : O(n)\r\nSpace Complexity : O(1)\r\n\r\nSample Input\/Output :\r\nEnter the number of natural numbers you want to sum : 5\r\nThe difference between sum of cubes of first 5 natural numbers and the sum of first 5 natural numbers is : 10\r\n\r\nEnter the number of natural numbers you want to sum : 10\r\nThe difference between sum of cubes of first 10 natural numbers and the sum of first 10 natural numbers is : 170\r\n\r\nEnter the number of natural numbers you want to sum : 15\r\nThe difference between sum of cubes of first 15 natural numbers and the sum of first 15 natural numbers is : 1450\r\n\r\nEnter the number of natural numbers you want to sum : 20\r\nThe difference between sum of cubes of first 20 natural numbers and the sum of first 20 natural numbers is : 2310\r\n\r\nEnter the number of natural numbers you want to sum : 25\r\nThe difference between sum of cubes of first 25 natural numbers and the sum of first 25 natural numbers is ","votes":null},{"text":"\r\n    return (n*(n**2+n))\/2\r\n\r\n\r","votes":null},{"text":"\r\n    return (n*(n*n + n)\/\/2) - (n*n*n\/\/6)\r\n\r","votes":null},{"text":"\r\n    return n*(n**2 + n + 1)\/\/2 - n*(n + 1)\/\/2\r\n\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    return (sum(range(1,n+1))**2)-(sum(range(1,n+1)**3))\r\n    \r\n    \r","votes":null},{"text":"\r\n\r\n    sum_n = n*(n+1)*(2*n+1)\/6\r\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\r\n    return sum_cubes - sum_n\r\n\r","votes":null},{"text":"\r\n    sum_of_cubes = 0\r\n    for i in range(1, n+1):\r\n        sum_of_cubes += i**3\r\n    return sum_of_cubes - n*(n+1)*(2*n+1)\/\/6\r\n\r\nif __name__ == '__main__':\r\n    print(f'First 10 terms of the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is {difference(10)}')\r\n    print(f'First 10 terms of the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is {difference(100)}')\r\n    print(f'First 10 terms of the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is {difference(1000)}')\r\n    print(f'First 10 terms of the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is {difference(10000)}')\r\n    print(f'First 10 terms of the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is {difference(100000)}')\r\n    print(f'First 10 terms of the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is {difference(1000000)}')\r\n    print(f'First 10 terms of the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is {difference(10000000)}')\r\n    print(f'First 10 terms of the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers is {difference(100000000)}')\r\n    print(f'First 10 terms of the difference between the sum o","votes":null},{"text":"\r\n    sumn = n*(n+1)*(2*n+1)\/\/6\r\n    sumc = (n**3)\/\/3\r\n    diff = sumn - sumc\r\n    print(diff)\r\n\r","votes":null},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1, n+1) :\r\n        sum1 += i**3\r\n        sum2 += i\r\n    return (sum1-sum2)\r\n\r\n\r\nprint(difference(10))\r\nprint(difference(50))\r\nprint(difference(100))\r\nprint(difference(200))\r\nprint(difference(500))\r\nprint(difference(1000","votes":null},{"text":"\r\n    a = 0\r\n    b = 0\r\n    for i in range(1, n+1) :\r\n        a = a + (i**3)\r\n        b = b + i\r\n    return a - b\r\n\r\n\r\nif __name__ == '__main__':\r\n\tn = int(input())\r\n\tprint(","votes":null},{"text":"\r\n    return int(sum(range(1, n + 1))**2 - sum(range(1, n + 1))**3)\r\n\r","votes":null},{"text":"\r\n\r\n    return (n*(n**3 + n**2 + n\/2 + n\/6))\r\n\r\nn = int(input(\"Enter n : \"))\r\nprint(\"Difference : \",difference(n))\r\n\r\n\r\n#Reference : w3resource\r\n","votes":null},{"text":"\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1, n+1) :\r\n        sum1 += i ** 3\r\n        sum2 += i\r\n    return sum1 - sum2 ** 2\r\n\r","votes":null},{"text":"\r\n    return (n * (n + 1) * (2 * n + 1)) \/ 6\r\n\r\n\r\nif __name__ == '__main__' :\r\n    n = int(input(\"Enter the value of n : \"))\r\n    print(\"Sum of cubes of first n natural numbers : {0}\".format(sum(map(lambda x: x ** 3, range(1, n + 1)))))\r\n    print(\"Sum of first n natural numbers : {0}\".format(sum(range(1, n + 1))))\r\n    print(\"Sum of cubes of first n natural numbers","votes":null},{"text":"\r\n    \r\n    sum_of_cubes = 0\r\n    sum_of_numbers = 0\r\n    for x in range(1, n + 1):\r\n        sum_of_cubes += (x ** 3)\r\n        sum_of_numbers += x\r\n    diff = (sum_of_cubes - sum_of_numbers)\r\n    print(diff)\r\n\r\n\r\ndifference(5)\r\n# 100\r\n\r\n\r","votes":null},{"text":"\r\n    sum_of_n_natural_numbers = (n*(n+1))\/2\r\n    sum_of_cubes_of_first_n_natural_numbers = (n**3 * (n+1)**3)\/6\r\n    return sum_of_cubes_of_first_n_natural_numbers - sum_of_n_natural_numbers\r\n\r","votes":null},{"text":"\r\n    a = []\r\n    for i in range(1,n + 1):\r\n        a.append(i**3)\r\n    b = []\r\n    for i in range(1,n + 1):\r\n        b.append(i)\r\n    return sum(a) - sum(b)\r\n\r\n\r\nprint(difference(10))\r\n\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    result = 0\r\n    for i in range(1, n+1) :\r\n        result += (i**3) - i\r\n    return result\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    print(\"Difference between sum of cubes of first n natural numbers and the sum of first n natural numbers\")\r\n    print(difference(10))\r\n    print(difference(","votes":null},{"text":"\r\n    a = 0\r\n    for i in range(1, n+1):\r\n      a += i\r\n    b = 0\r\n    for j in range(1, n+1):\r\n      b += j**3\r\n    print(b-a)\r\n    \r","votes":null},{"text":"\r\n    return sum(i**3 for i in range(1,n+1)) - sum(range(1,n+1))\r\n\r\n#Driver code\r\nn = int(input(\"Enter a number: \"))\r\nprint(\"Difference is: \", difference(n))\r\n\r\n\"\"\"\r\n    Sample Input: 10\r\n    Sample Output: 2640\r\n    Explanation: Sum of cubes of first 10 numbers is 3025\r\n                 and the sum of","votes":null},{"text":"\r\n    return n * (n * n + 2 * n + 1) \/ 6 - n * n * n \/ 3\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n    return ((n**3) * (n+1) * (2*n + 1)) \/ 6 - n*(n+1)*n\/2\r\n\r\n\r\n# Enter your code here. Read input from STDIN. Print output to STDOUT\r\nn = int(input())\r\nprint(difference(n))\r\n\r\n# Sample Input\r\n\r\n# 10\r\n\r\n# Sample Output\r\n\r\n# 3025 - 2850 = 175\r\n\r\n# Explanation\r\n\r\n# First 10 natural numbers are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\r\n# The sum of the cubes of the first 10 natural numbers is 1^3 + 2^3 + 3^3 + 4^3 + 5^3 + 6^3 + 7^3 + 8^3 + 9^3 + 10^3 = 3025\r\n# The sum of the first 10 natural numbers is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55\r\n# 3025 - 55 = 3025 - 2850 = 175\r\n\r\n\r\nclass Solution:\r\n   ","votes":null}],"time":{"count":27.0,"avg":138242.8232592593,"std":44061.0648417871,"cov":0.3187222584}}
{"id":556,"question":"def find_Odd_Pair(A,N) :\r\n    \"\"\"Write a python function to count the pairs with xor as an odd number.\"\"\"","answers":[{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i + 1, N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":84079.244},{"text":"\r\n    \r\n    cnt=0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 == 1:\r\n                cnt+=1\r\n    return cnt\r\n\r","votes":107915.844},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i]^A[j]) % 2 == 1 :\r\n                count += 1\r\n\r\n    return count\r\n\r\n\r\n\r\n\r\n\r","votes":110629.632},{"text":"\r\n    temp = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i] ^ A[j]) % 2 == 1:\r\n                temp += 1\r\n    return temp\r\n\r\n\r","votes":111875.928},{"text":"\r\n    \r\n    A.sort()\r\n    \r\n    \"\"\"Count the pairs with xor as an odd number\"\"\"\r\n    \r\n    count = 0\r\n    for i in range(0,N-1) :\r\n        \r\n        for j in range(i+1,N) :\r\n            \r\n            if ((A[i] ^ A[j]) & 1) :\r\n                count += 1\r\n                \r\n    return count\r\n\r\n\r","votes":118052.072},{"text":"\r\n    count = 0\r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if(A[i]+A[j]) % 2 == 1:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 4, 2, 7, 3]\r\n    N = len(A)\r\n    print","votes":118583.436},{"text":"\r\n    # A : list of integers\r\n    # N : length of the array\r\n    # return : count of pairs with odd xor\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    N = int(input().strip())\r\n\r\n    A = list(map(int, input().rstrip().split()))\r\n\r\n    result = find_Odd_Pair(A, N)\r\n\r","votes":118817.524},{"text":"\r\n    # Return the count of pairs with an odd xor.\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 == 1:\r\n                count += 1\r\n    return count\r\n\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nN = 9\r\n\r\nprint(find_Odd_Pair(A, N))\r\n\r\n\r","votes":127553.616},{"text":"\r\n    # Code Here\r\n    res = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j]) % 2 == 1 :\r\n                res += 1\r\n    return res\r\n\r\n\r\nif __name__ == '__main__' :\r\n    N = int(input())\r\n    A = [int(x) for x in input().split()]\r\n    ans = find_Odd_Pair(A,N)\r\n    print(ans)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":128313.604},{"text":"\r\n\r\n    # Code here\r\n    A = list(set(A))\r\n    ans=0\r\n    for i in range(len(A)) :\r\n        for j in range(i+1,len(A)) :\r\n            if (A[i]^A[j]) % 2 != 0 :\r\n                ans+=1\r\n    return ans\r\n\r\nif __name__ == '__main__' :\r\n    T = int(input())\r\n    for _ in range(T) :\r\n        N = int(input())\r\n        A = list(map(int,input().split()))\r\n        ans = find_Odd_Pair(A,N)\r\n        print(ans)\r\n\r\n\r\n#","votes":134333.88},{"text":"\r\n    # Your code goes here\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 == 1:\r\n                count += 1\r\n    return count\r\n\r\nA = [2, 6, 2, 4, 2]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\"\"\"\r\n2\r\nTime Complexity :  O(N2)\r\nSpace Complexity :  O(1)\r\n\"\"\"\r\n\r\n","votes":136304.604},{"text":"\r\n    # Code here\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j]) & 1:\r\n                count += 1\r\n    return count\r\n\r","votes":145124.34},{"text":"\r\n    \r\n    # If there is only one element in the array, return 0\r\n    if N == 1 :\r\n        return 0\r\n    \r\n    # If the array has two elements, return 1 if they are not equal\r\n    if N == 2 :\r\n        return 1 if A[0] != A[1] else 0\r\n    \r\n    # If the array has more than two elements, then\r\n    # sort the array in increasing order\r\n    # and do following\r\n    A.sort()\r\n    \r\n    # Count of elements with odd xor\r\n    count = 0\r\n    \r\n    # Loop through all the array elements\r\n    for i in range(N) :\r\n        \r\n        # xor of current element with every element\r\n        # after it\r\n        for j in range(i+1, N) :\r\n            \r\n            # If current element and next element\r\n            # have odd xor, then increment count\r\n            if (A[i] ^ A[j]) & 1 :\r\n                count+=1\r\n    \r\n    return count\r\n\r\n\r\nif __name__ == '__main__' :\r\n    \r\n    # Driver code\r\n    A = [4, 2, 6, 1, 7, 3]\r\n    N = len(A)\r\n    \r\n    print(find_Odd_Pair(A, N))\r\n\r\n\r\n# Time Complexity : O(n^2)\r\n# Space Complexity : O(1)\r\n\r\n# Sample Input :\r\n# 4, { 4, 2, 6, 1, 7, 3 }\r\n# Output : 2\r\n\r\n# Sample Input :\r\n# 3, { 2, 4, 6 }\r\n# Output : 0\r\n\r\n# Sample Input :\r\n# 4, { 1, 2, 3, 4 }\r\n# Output : 2\r\n\r\n# Sample Input :\r","votes":155334.732},{"text":"\r\n    count = 0\r\n    for i in range(0,N-1) :\r\n        for j in range(i+1,N) :\r\n            if(A[i]^A[j])&1 :\r\n                count+=1\r\n    return count\r\n\r","votes":162823.184},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r","votes":168556.924},{"text":"\r\n\r\n    # Your code goes here\r\n    # A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    # N = 10\r\n    # Ans = 2\r\n    # print(find_Odd_Pair(A,N))\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":180873.452},{"text":"\r\n    # Your Code Here\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1, N) :\r\n            if(A[i] ^ A[j]) % 2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r","votes":205167.136},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":207534.856},{"text":"\r\n\r\n    # code here\r\n    count=0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2==1:\r\n                count+=1\r\n    return count\r\n\r\n\r\n# { \r\n#  Driver Code Starts\r\nif __name__=='__main__':\r\n    T=int(input())\r\n    for _ in range(T):\r\n        N=int(input())\r\n        A=list(map(int,input().strip().split()))\r\n        result = find_Odd_Pair(A, N)\r\n        print(result)\r\n\r\n# } Driver Code Ends\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":211740.144},{"text":"\r\n    \r\n    count = 0\r\n    \r\n    for i in range(N) :\r\n        \r\n        for j in range(i+1,N) :\r\n        \r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                count += 1\r\n    \r\n    return count\r\n\r\nA = [1, 1, 2, 4, 1, 5, 7, 2, 4, 1, 6, 1, 1, 1]\r\nN = len(A)\r\nprint (\"Count of pairs (x,y) such that x^y is an odd number is = \",find_Odd_Pair(A,N))\r\n\r\n\r\n# Time Complexity : O(n^2)\r\n# Space Complexity : O(1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":213414.312},{"text":"\r\n    # x^x = 0\r\n    # x^0 = x\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if ((A[i]^A[j])%2)==1 :\r\n                count += 1\r\n    return count\r\n\r\nA = [10,20,30,40,50,10,20,30,40,50,10,20,30,40,50]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n\"\"\"\r\nInput:\r\nN = 15\r\nA[] = {10,20,30,40,50,10,20,30,40,50,10,20,30,40,50}\r\n\r\nOutput:\r\n16\r\n\r\nExplanation:\r\nThere are 16 pairs with xor as an odd number.\r\n(10, 20), (10, 30), (10, 40), (10, 50), (20,30), (20,40), (20,50), (30,40), (30,50), (40,50), (10,20,30), (10,20,40), (10,20,50), (10,30,40), (10,30,50), (10,40,50)\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":215510.304},{"text":"\r\n    # Your code goes here\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    T = int(input())\r\n    for i in range(T):\r\n        N = int(input())\r\n        A = list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n\r\n\r\n# Sample Input\r\n# 2\r\n# 5\r\n# 1 2 3 4 5\r\n# 4\r\n# 1 2 3 4\r\n\r\n# Sample Output\r\n# 3\r\n# 2\r\n\r\n# Explanation\r\n# For the first test case, the pairs with xor as an odd number are {(1, 2), (1, 4), (3, 5)}.\r\n# For the second test case, the pairs with xor as an odd number are {(1, 2), (2, 3)}.\r\n\r\n# Time Complexity: O(N^2)\r\n# Space Complexity: O(1)\r\n\r\n# Alternate :\r\n#","votes":224936.264},{"text":"\r\n    # Write your code here\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1, N) :\r\n            if (A[i]^A[j]) & 1 :\r\n                count += 1\r\n    return count\r\n    \r\nif __name__ == '__main__' :\r\n    T = int(input())\r\n    for _ in range(T) :\r\n        N = int(input())\r\n        A = list(map(int, input().split()))\r\n        \r\n        print(find_Odd_Pair(A, N))\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n  ","votes":225553.236},{"text":"\r\n    c = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) & 1 == 1 :\r\n                c += 1\r\n    return c\r\n\r","votes":232697.972},{"text":"\r\n    count = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] != A[j]) :\r\n                if (A[i] ^ A[j]) % 2 == 1 :\r\n                    count += 1\r\n    return count\r\n\r\n\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    T = int(input())\r\n    for i in range(T) :\r\n        N = int(input())\r\n        A = list(map(int, input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":312557.72},{"text":"\r\n    c = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]%2 == 1 :\r\n                c += 1\r\n    return c\r\n\r\nA = [1,2,4,8,16]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\"\"\"\r\nSample Input:\r\nA = [1,2,4,8,16]\r\nN = 5\r\n\r\nSample Output:\r\n4\r\n\r\nExplanation:\r\nThe pairs are (1,3), (1,5), (2,4) and (2,5).\r\n\r\n\r\n\"\"\"\r\n\r\n","votes":null},{"text":"\r\n    # your code goes here\r\n    \r\n    odd_pairs = 0\r\n    \r\n    for i in range(0,N):\r\n        for j in range(i+1,N):\r\n            if(A[i]^A[j])%2 == 0:\r\n                odd_pairs += 1\r\n\r\n    return odd_pairs\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    N = int(input())\r\n\r\n    A = list(map(int, input().rstrip().split()))\r\n\r\n    result = find_Odd_Pair(A, N)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n#!\/bin\/python3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n# Complete the findOddPair function below.\r","votes":null},{"text":"\r\n    result = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] == 1 :\r\n                result += 1\r\n    return result\r\nprint(find_Odd_Pair([1,3,5,6,7,9],6))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    odd_pair = 0\r\n    for i in range(N) :\r\n        if A[i] == 0 :\r\n            continue\r\n        for j in range(i+1,N) :\r\n            if A[j] == 0 :\r\n                continue\r\n            if A[i]^A[j] == 0 :\r\n                odd_pair += 1\r\n    return odd_pair\r\n\r\nif __name__ == '__main__' :\r\n    T = int(input())\r\n    for i in range(T) :\r\n        N = int(input())\r\n        A = list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n\r\n\"\"\"\r\nInput :\r\n2\r\n6\r\n1 1 1 1 1 0\r\n6\r\n1 1 1 1 0 1\r\n\r\nOutput :\r\n2\r\n5\r\n\r\nTime Complexity : O(n^2)\r\nSpace Complexity : O(1)\r\n\r\n\"\"\"\r\n\r\n","votes":null},{"text":"\r\n    #Code here\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(N):\r\n            if (A[i]^A[j]) % 2 == 1:\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\n# { \r\n#  Driver Code Starts\r\n#Initial Template for Python 3\r\n\r\nif __name__ == '__main__':\r\n    T=int(input())\r\n    for i in range(T):\r\n        N = int(input())\r\n        A = list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n\r\n\r\n# } Driver Code Ends\r\n","votes":null},{"text":"\r\n    dict = {}\r\n    for i in range(N) :\r\n        val = A[i]^A[i+1]\r\n        if val in dict.keys() :\r\n            return 1\r\n        else :\r\n            dict[val] = 1\r\n    return 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    T = int(input())\r\n\r\n    for T_itr in range(T):\r\n        n = int(input())\r\n\r\n        A = list(map(int, input().rstrip().split()))\r\n\r\n        result = find_Odd_Pair(A, n)\r\n\r\n        fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n#https:\/\/www.hackerrank.com\/challenges\/find-the-odd-","votes":null},{"text":"\r\n    # Code here\r\n    ans = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i] ^ A[j] & 1:\r\n                ans += 1\r\n    return ans\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # A = [1,1,1,3,3]\r\n    # N = 5\r\n    # Output: 4\r\n    count = 0\r\n    for i in range(0, N) :\r\n        for j in range(i+1, N) :\r\n            if A[i] ^ A[j] == 1 :\r\n                count += 1\r\n    return count\r\n\r\nA = [1,1,1,3,3]\r\nN = 5\r\n\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    res = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j])%2 == 1:\r\n                res += 1\r\n    return res\r\n\r\n\r\nA = [1, 3, 5, 2, 6, 4, 8, 7]\r\nN = 8\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 3, 5, 2, 6, 4, 8, 7]\r\nN = 8\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 3, 5, 2, 6, 4, 8, 7]\r\nN = 8\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 3, 5, 2, 6, 4, 8, 7]\r\nN = 8\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 3, 5, 2, 6, 4, 8, 7]\r\nN = 8\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 3, 5, 2, 6, 4, 8, 7]\r\nN = 8\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 3, 5, 2, 6, 4, 8, 7]\r\nN = 8\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 3, 5, 2, 6, 4, 8, 7]\r\nN = 8\r\nprint(find_Odd_Pair(A","votes":null},{"text":"\r\n    # A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    # N = len(A)\r\n    # time complexity: O(N)\r\n    # space complexity: O(N)\r\n    temp = [0] * N\r\n    for i in range(N) :\r\n        temp[A[i]] += 1\r\n    print(temp)\r\n    odd_pair = 0\r\n    for i in range(N) :\r\n        if temp[i] % 2 == 0 :\r\n            continue\r\n        odd_pair += (temp[i] - 1) \/\/ 2\r\n    return odd_pair\r\n\r","votes":null},{"text":"\r\n    odd_pairs = 0\r\n    \r\n    A = sorted(A)\r\n    for i in range(0, N-1) :\r\n        if A[i] != A[i+1] :\r\n            odd_pairs += 1\r\n    \r\n    return odd_pairs\r\n\r\n\r","votes":null},{"text":"\r\n    #code here\r\n    \r\n    odd_pair = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i]^A[j] == 1:\r\n                odd_pair += 1\r\n    \r\n    return odd_pair\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [1,2,3,4,5,6]\r\n    N = 6\r\n    result = find_Odd_Pair(A,N)\r\n    print(result)\r\n    \r\n    A = [2,4,6,8,10]\r\n    N = 5\r\n    result = find_Odd_Pair(A,N)\r\n    print(result)\r\n    \r\n    A = [1,2,3,4,5,6]\r\n    N = 6\r\n    result = find_Odd_Pair(A,N)\r\n    print(result)\r\n    \r\n    A = [1,2,3,4,5,6]\r\n    N = 6\r\n    result = find_Odd_Pair(A,N)\r\n    print(result)\r\n    \r\n    A = [1,2,3,4,5,6]\r\n    N = 6\r\n    result = find_Odd_Pair(A,N)\r\n    print(result)\r\n    \r\n    A = [1,2,3,4,5,6]\r\n    N = 6\r\n    result = find_Odd_Pair(A,N)\r\n    print(result)\r\n    \r\n    A = [1,2,3,4,5,6]\r\n    N = 6\r\n    result = find_Odd_Pair(A,N)\r\n    print(result)\r\n    \r\n    A = [1,2,3,4,5,6]\r\n    N = 6\r\n    result = find_Odd_Pair","votes":null},{"text":"\r\n    \r\n    \r\n    # Code here\r\n    res = 0\r\n    for i in range(0, N) :\r\n        for j in range(i+1, N) :\r\n            if A[i] != A[j] and","votes":null},{"text":"\r\n    # Write your code here\r\n    odd_pairs=0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i]^A[j]==1:\r\n                odd_pairs+=1\r\n    return odd_pairs\r\n\r\nif __name__=='__main__':\r\n    T=int(input())\r\n    for i in range(T):\r\n        N=int(input())\r\n        A=list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    \r\n    \r\n    \r\n    # return the count\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n  ","votes":null},{"text":"\r\n    # A: a list of integers\r\n    # N: length of the list\r\n    # return an integer\r\n    odd_pair = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i]^A[j]) % 2 == 1:\r\n                odd_pair += 1\r\n    return odd_pair\r\n\r\n\r\nA = [1, 3, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7,","votes":null},{"text":"\r\n    \r\n    # create the hashmap to store the frequency of each number\r\n    hmap = dict()\r\n    \r\n    for i in range(N) :\r\n        # if number is not present in the dictionary, add it with frequency 1\r\n        if A[i] not in hmap :\r\n            hmap[A[i]] = 1\r\n        else :\r\n            # if number is present in the dictionary, increase its frequency by 1\r\n            hmap[A[i]] += 1\r\n    \r\n    # create the hashmap to store the count of odd frequency pairs\r\n    count = dict()\r\n    \r\n    for i in range(N) :\r\n        # if number is present in the dictionary, check its frequency\r\n        if A[i] in hmap :\r\n            # if frequency is odd, add the number to the count dictionary\r\n            if hmap[A[i]] % 2 != 0 :\r\n                if A[i] in count :\r\n                    count[A[i]] += 1\r\n                else :\r\n                    count[A[i]] = 1\r\n    \r\n    # return the count dictionary\r\n    return count\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    x = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] & 1 :\r\n                x += 1\r\n    return x\r\n\r\nif __name__ == '__main__' :\r\n    T = int(input())\r\n    for tes in range(T) :\r\n        N = int(input())\r\n        A = list(map(int, input().strip().split()))\r\n        print(find_Odd_Pair(A,N))\r\n\r\n\r\n\"\"\"\r\nSample Input :\r\n1\r\n7\r\n1 3 5 2 6 4 7\r\n\r\nSample Output :\r\n3\r\n\r\nExplanation :\r\nThe pairs with odd XOR are (1, 7), (5, 2) and (4, 6).\r\n\"\"\"\r\n\r\n\"\"\"\r\n1) Sort the array\r\n2) Traverse the array and check the XOR of adjacent elements\r\n3) If the xor of adjacent elements is odd, increment the count\r\n4) Return the count\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity : O(NlogN) for sorting\r\nSpace Complexity : O(N) for storing the original array\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    \r\n    # 1. Create a dictionary of elements\r\n    # 2. Create an empty list of pairs\r\n    # 3. Iterate over the elements\r\n    # 4. Iterate over the elements\r\n    # 5. If the elements are the same, skip\r\n    # 6. If the elements have xor as an odd number, append both of them to the list\r\n    # 7. Return the list\r\n    \r\n    # A = [1, 2, 4, 6, 5, 3, 7]\r\n    # N = 7\r\n    \r\n    dict = {}\r\n    pairs = []\r\n    \r\n    for i in range(0, N) :\r\n        for j in range(i+1, N) :\r\n            if(A[i] == A[j]) :\r\n                continue\r\n            if((A[i] ^ A[j]) % 2 == 1) :\r\n                pairs.append([A[i], A[j]])\r\n                \r\n    return pairs\r\n\r\n# Driver Code\r\nA = [1, 2, 4, 6, 5, 3, 7]\r\nN = 7\r\n\r\nprint(find_Odd_Pair(A, N))\r\n\r\n# Output\r\n# [[1, 5], [2, 7], [3, 6]]\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(n)\r\n\r\n# Method 2\r\n\r","votes":null},{"text":"\r\n    \r\n    # code here\r\n    \r\n    odd_pair = 0\r\n    \r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 != 0 :\r\n                odd_pair += 1\r\n    \r\n    return odd_pair\r\n\r\n\r\nif __name__ == \"__main__\" :\r\n    T = int(input())\r\n    \r\n    for _ in range(T) :\r\n        N = int(input())\r\n        A = [int(x) for x in input().split()]\r\n        \r\n        print(find_Odd_Pair(A,","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] != 0 :\r\n                count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n\r\n    '''\r\n    #Prepare a list of all numbers in range(0,N)\r\n    B = [i for i in range(N)]\r\n\r\n    #Take the XOR of every pair in A and B\r\n    C = [A[i]^B[i] for i in range(N)]\r\n\r\n    #Count the number of odd numbers in C\r\n    return sum(1 for i in C if i%2 == 1)\r\n    '''\r\n\r\n    #Prepare a list of all numbers in range(0,N)\r\n    B = [i for i in range(N)]\r\n\r\n    #Take the XOR of every pair in A and B\r\n    C = [A[i]^B[i] for i in range(N)]\r\n\r\n    #Count the number of odd numbers in C\r\n    return sum(1 for i in C if i%2 == 1)\r\n\r\n\r\n#test\r\nprint(\"----------------------------------------\")\r\nN = 5\r\nA = [1, 2, 3, 4, 5]\r\nprint(find_Odd_Pair(A,5))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    \r\n    d = {}\r\n    for i in range(N) :\r\n        if A[i] in d :\r\n            d[A[i]] += 1\r\n        else :\r\n            d[A[i]] = 1\r\n            \r\n    odd_pair = 0\r\n    for i in range(N) :\r\n        if d[A[i]] == 1 :\r\n            odd_pair += 1\r\n            \r\n    return odd_pair\r\n\r\n\r\n# { \r\n#  Driver Code Starts\r\n# Initial Template for Python 3\r\n\r\nimport math\r\n\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    hashMap = {}\r\n    count = 0\r\n    for i in range(N) :\r\n        temp = A[i] ^ A[(i+1)%N]\r\n        if temp in hashMap :\r\n            count += hashMap[temp]\r\n            hashMap[temp] += 1\r\n        else :\r\n            hashMap[temp] = 1\r\n    return count\r\n\r\nN = int(input())\r\nA = list(map(int,input().split()))\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r\n# 1\r\n# 0 1 8 1 5 2 5 4 1 6\r\n# 0\r\n# 1 1 0 0 1 1 0 0 0 0\r\n# 2\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# 0\r\n# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\r\n# 4\r\n# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\r\n# 6\r\n# 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\r\n# 1","votes":null},{"text":"\r\n    # Code here\r\n    pairs = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j]) % 2 == 1 :\r\n                pairs += 1\r\n    return pairs\r\n\r\n\r\nif __name__ == '__main__' :\r\n    test_cases = int(input())\r\n    for cases in range(test_cases) :\r\n        N = int(","votes":null},{"text":"\r\n    \r\n    # A list to store the pairs with odd xor.\r\n    odd_pairs = []\r\n    \r\n    # Iterate through the list.\r\n    for i in range(N) :\r\n        \r\n        # Iterate through the list again.\r\n        for j in range(N) :\r\n            \r\n            # Check if the xor is odd.\r\n            if (A[i] ^ A[j]) & 1 :\r\n                \r\n                # Push the pair to the list.\r\n                odd_pairs.append((i,j))\r\n    \r\n    # Return the list.\r\n    return odd_pairs\r\n\r\nif __name__ == \"__main__\" :\r\n    \r\n    \"\"\"\r\n    from timeit import timeit\r\n    \r\n    # List of numbers.\r\n    A = [1,2,3,4,5,6,7,8,9]\r\n    \r\n    # Number of elements in the list.\r\n    N = len(A)\r\n    \r\n    # Execution time.\r\n    print(timeit(lambda: find_Odd_Pair(A,N),number=10000))\r\n    \"\"\"\r\n    \r\n    # List of numbers.\r\n    A = [1,2,3,4,5,6,7,8,9]\r\n    \r\n    # Number of elements in the list.\r\n    N = len(A)\r\n    \r\n    # Solution.\r\n    print(find_Odd_Pair(A,N))\r\n    \r\n    # Output:\r\n    # [(0, 1), (0, 5), (1, 0), (1, 4), (1, 6), (2, 3), (2, 7), (3, 2), (3, 6), (4, 1), (4, 5), (4, 7), (5, 0), (5, 4), (5, 6), (6, 1), (6, 4), (6","votes":null},{"text":"\r\n    xor = 0\r\n    for i in range(N):\r\n        xor = xor ^ A[i]\r\n    odd = 0\r\n    for i in range(N):\r\n        if (xor & A[i]) == 0 :\r\n            odd += 1\r\n    return odd\r\n\r\n\r\nif __name__ == '__main__' :\r\n    A = [1,2,3,4,5,6,7,8,9]\r\n    N","votes":null},{"text":"\r\n    # xor = a^b\r\n    # a^a = 0\r\n    # a^0 = a\r\n    # a^a^a = 0\r\n    # a^b^a = (a^a)^b = 0^b = b\r\n    # a^a^b = a^a^a^b = (a^a)^a^b = 0^a^b = a^b\r\n    # a^b^b = a^0^b = a^b\r\n    # a^b^b^a = a^b^b^a^b = (a^a)^b^b = 0^b^b = b\r\n    # a^b^b^b = a^b^b^a^b^b = (a^b)^b = a^a = a\r\n    # a^b^b^b^a = a^b^b^b^a^b = a^b^b^b^a^b = a^b^b^a^b = a^a = a\r\n    # a^b^b^b^b = a^b^b^b^a^b^b = a^b^b^b^b^a = a^b^b^b^a = a^b^a = b\r\n\r\n    odd_pairs = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i]^A[j]) == 1 :\r\n                odd_pairs += 1\r\n    return odd_pairs\r\n\r","votes":null},{"text":"\r\n    A.sort()\r\n    count=0\r\n    for i in range(0,N,2) :\r\n        count=count+(A[i]^A[i+1])%2\r\n    return count\r\n\r\n\r\nif __name__ == '__main__' :\r\n    T=int(input())\r\n    for test in range(T) :\r\n        N=int(input())\r\n        A=list(map(int,input().split()))\r\n        ans=find_Odd_Pair(A,N)\r\n        print(\"Case #{}: {}\".format(test+1,ans))\r\n\r\n\r\n\r\n### OR ###\r\n\r\n\r","votes":null},{"text":"\r\n    cnt = 0\r\n    for i in range(N):\r\n        for j in range(i+1, N):\r\n            if ((A[i] ^ A[j]) & 1) == 1:\r\n                cnt += 1\r\n    return cnt\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    A = list(map(int, input().rstrip().split()))\r\n    N = len(A)\r\n    find_Odd_Pair(A, N)\r\n\r\n\r\n\"\"\"\r\nSample Input\r\n\r\n1 2 3 4 5\r\n\r\nSample Output\r\n\r\n4\r\n\r\nExplanation\r\n\r\nThere are four pairs with an odd XOR: {1, 5}, {2, 4}, {3, 3}, and {5, 1}.\r\n\r\n\"\"\"\r\n\r\n# Time Complexity: O(n^2)\r\n# Space Complexity: O(1)\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    cnt = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i] ^ A[j] & 1:\r\n                cnt += 1\r\n    return cnt\r\n\r\nA = [2, 1, 4, 7, 5]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r","votes":null},{"text":"\r\n    n2 = [0] * 32\r\n    for i in range(N):\r\n        n2[i%32] += A[i]\r\n    result = 0\r\n    for i in range(32):\r\n        result += (n2[i] * n2[(i+1)%32])\r\n    return result\r\n\r\nif __name__ == \"__main__\":\r\n    A = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\r\n","votes":null},{"text":"\r\n    # Code Here\r\n    count = 0\r\n    for i in range(N):\r\n        if A[i] & 1 == 1:\r\n            count += N - i - 1\r\n    return count\r\n    \r\nA = [1,3,5,2,4,6,7]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nQuestion : \r\n\r\nGiven an array A of N positive integers. \r\n\r\nYour task is to find the number of pairs (i, j) with 0 <= i < j < N and A[i] XOR A[j] = 1.\r\n\r\n\r\nExample 1:\r\n\r\nInput: \r\nN = 6\r\nA[] = {2, 4, 6, 8, 10, 12}\r\nOutput: 8\r\nExplanation: \r\nFor the given input, all the pairs (i, j) \r\nwith i < j and A[i] XOR A[j] = 1 are\r\n(0, 1), (0, 2), (0, 3), (0, 4), (1, 2),\r\n(1, 3), (1, 4), (2, 3), (2, 4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # O(N) time complexity\r\n    # O(N) space complexity\r\n    # This approach is not recommended if the array size is very large\r\n    # as the hash table will be of size N\r\n\r\n    odd_count = 0\r\n    hash_table = {}\r\n    for i in range(N) :\r\n        other = A[i] ^ A[i + 1]\r\n        if other in hash_table :\r\n            odd_count += hash_table[other]\r\n        hash_table[other] = hash_table.get(other, 0) + 1\r\n    return odd_count\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    counter = 0\r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])&1 :\r\n                counter += 1\r\n    return counter\r\n\r\nN = int(input())\r\nA = list(map(int,input().split()))\r\nprint(find_Odd_Pair(A,N))\r\n\r","votes":null},{"text":"\r\n    \r\n    Odd_Pair = 0\r\n\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] == 1 :\r\n                Odd_Pair += 1\r\n\r\n    return Odd_Pair\r\n\r\nif __name__ == '__main__' :\r\n    T = int(input())\r\n    while T > 0 :\r\n        N = int(input())\r\n        A = list(map(int,input().split()))\r\n        \r\n        print(find_Odd_Pair(A,N))\r\n        \r\n        T -= 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    odd_pair = 0\r\n    for i in range(N) : \r\n        for j in range(i+1,N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                odd_pair += 1\r\n    return odd_pair\r\n\r\nif __name__ == '__main__' :\r\n    A = input(\"Enter the array : \")\r\n    A = list(map(int,A.split()))\r\n    N = len(A)\r\n    print(\"Odd Pairs : \",find_Odd_Pair","votes":null},{"text":"\r\n    \r\n    # Initializing the count variable to 0\r\n    count = 0\r\n    \r\n    # Sorting the array\r\n    A = sorted(A)\r\n    \r\n    # Traversing the array\r\n    for i in range(1,len(A)-1) :\r\n        \r\n        # Checking the number of odd pairs with xor as an odd number\r\n        if (A[i] ^ A[i-1]) % 2 == 1 :\r\n            \r\n            # Incrementing the count variable\r\n            count += 1\r\n            \r\n    # Returning the count variable\r\n    return count\r\n\r\n# Main Function\r","votes":null},{"text":"\r\n    \r\n    # Code here\r\n    \r\n    cnt = 0\r\n    \r\n    for i in range(N) :\r\n        for j in range(i + 1, N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                cnt += 1\r\n    \r\n    return cnt\r\n\r\n\r\nA = [1, 4, 2, 5, 3]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\n\r\nA = [1, 3, 5, 2, 6, 4, 7, 8]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\nN = len(A)\r\nprint(find_Odd_Pair(A, N))\r\n\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\nN = len(A)\r\nprin","votes":null},{"text":"\r\n    \"\"\"Input : A - array of integers , N - array length\"\"\"\r\n    \"\"\"Output : count of pairs.\"\"\"\r\n    # Enter your code here\r\n    count = 0\r\n    for i in range(N) :\r\n        if A[i] % 2 == 1 :\r\n            for j in range(i + 1,N) :\r\n                if A[i] ^ A[j] % 2 == 1 :\r\n                    count += 1\r","votes":null},{"text":"\r\n    \r\n    \r\n    for i in range(N):\r\n        for j in range(N):\r\n            if i != j :\r\n                if (A[i]^A[j])%2 == 1 :\r\n                    print(\"(\" + str(i) + \",\" + str(j) + \")\")\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    N = int(input())\r\n    A = list(map(int, input().strip().split()))\r\n    find_Odd_Pair(A,N)\r\n\r\n\r\n\r\n\"\"\"\r\nInput Format\r\n\r\nFirst line contains the number of elements in the array A.\r\nSecond line contains the elements of the array A separated by spaces.\r\nOutput Format\r\n\r\nPrint the pairs of elements i and j such that A[i]^A[j] is an odd number.\r\nConstraints\r\n1 <= N <= 10^5\r\n0 <= A[i] <= 10^5\r\nSample Input\r\n\r\n5\r\n1 2 3 4 5\r\nSample Output\r\n\r\n(0,1) (0,2) (1,2)\r\nExplanation\r\n\r\nA[0]^A[1] = 1\r\nA[0]^A[2] = 3\r\nA[1]^A[2] = 2\r\nThe pairs (0,1), (0,2) and (1,2) have xor as an odd number.\r\nThe pair (0,3) has xor as an even number.\r\nTime Limit: 1 second\r\nMemory Limit: 256 MB\r\nSource Limit: 1024 KB\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    A.sort()\r\n    count = 0\r\n    for i in range(N) :\r\n        if (A[i] ^ A[i+1]) % 2 != 0 :\r\n            count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Your code goes here\r\n    # Find the xor of all the numbers\r\n    xor = 0\r\n    for i in range(N) :\r\n        xor ^= A[i]\r\n    \r\n    # Find the parity of xor\r\n    parity = 0\r\n    while(xor) :\r\n        parity ^= xor & 1\r\n        xor >>= 1\r\n    \r\n    # Count the pairs\r\n    count = 0\r\n    for i in range(N) :\r\n        if ((A[i] & 1) ^ parity) == 1 :\r\n            count += 1\r\n    return count\r\n\r\n\r\n# { \r\n#  Driver Code Starts\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    count = 0\r\n    A.sort()\r\n    for i in range(N):\r\n        if A[i] != A[i+1]:\r\n            if (A[i] ^ A[i+1]) % 2 != 0:\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # here N is the size of array\r\n    # A : elements of array\r\n    # return the count of pairs with xor as an odd number.\r\n    # Solution Approach :\r\n    # Use a hashmap to store the count of each number\r\n    # Calculate the xor of the two elements\r\n    # if the xor is odd, increment the count\r\n    # if the xor is even, decrement the count\r\n    # return the final count\r\n\r\n    # Here's the code\r\n    hashmap = {}\r\n    count = 0\r\n\r\n    for i in range(N) :\r\n        hashmap[A[i]] = hashmap.get(A[i],0) + 1\r\n\r\n    for i in range(N) :\r\n        xor = A[i] ^ A[(i+1)%N]\r\n        if (xor % 2 != 0) :\r\n            count += 1\r\n        else :\r\n            count -= 1\r\n\r\n    return count\r\n\r\nA = [5,12,3,7,15,17]\r\nN = len(A)\r\nprint(\"Number of pairs with xor as odd number\")\r\nprint(\"is :\", find_Odd_Pair(A,N))\r\n\r\n# Output :\r\n# Number of pairs with xor as odd number\r\n# is : 2\r\n\r\n# Explanation :\r\n# There are two pairs with xor as odd number : (5,12) and (15,17)\r\n\r\n# Time Complexity : O(N)\r\n# Space Complexity : O(N)\r\n\r\n# Sample Input :\r\n# A = [5,12,3,7,15,17]\r\n# N = 6\r\n\r\n# Sample Output :\r\n# Number of pairs with xor as odd number\r\n# is : 2\r\n\r\n# Explanation :\r\n# There are two pairs with xor as odd number ","votes":null},{"text":"\r\n\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i]^A[j] == 1:\r\n                return \"Odd Pair Found\"\r\n    return \"No Odd Pair Found\"\r\n\r\n\r\n# { Driver Code Starts.\r\nif __name__ == '__main__':\r\n    T=int(input())\r\n    for i in range(T):\r\n        N=int(input())\r\n        A=list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n\r\n# } Driver Code Ends\r\n\r\n\r\n\r\n\r\n# # Python3 program for above approach\r\n#","votes":null},{"text":"\r\n    # Your code goes here\r\n    if N == 1:\r\n        return 0\r\n    if N == 2:\r\n        if A[0] ^ A[1] == 0:\r\n            return 1\r\n        else:\r\n            return 0\r\n    res = 0\r\n    A.sort()\r\n    for i in range(N - 1):\r\n        j = i + 1\r\n        while j < N:\r\n            if A[i] ^ A[j] == 0:\r\n                res += 1\r\n            j += 1\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    d = dict()\r\n    d[0] = 0\r\n    for i in range(1,N+1) :\r\n        d[i] = d[i-1] + 1\r\n    \r\n    ans = 0\r\n    for i in range(1,N+1) :\r\n        if d[i] %2 == 1 and d[N+1-i] %2 == 1 :\r\n            ans += 1\r\n    \r\n    return ans\r\n\r\n\r\nif __name__ == '__main__' :\r\n    T = int(input())\r\n    for _ in range(T) :\r\n        N = int(input())\r\n        A = list(map(int,input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n","votes":null},{"text":"\r\n    # Here A is the array of integers and N is the number of elements in the array.\r\n    # return the count of pairs with xor as an odd number.\r\n    # Time Complexity: O(n)\r\n    # Space Complexity: O(1)\r\n    # use hashmap to store the elements\r\n    # iterate through the array and for every element check if its xor with a key is present in hashmap or not\r\n    # if its present increase count by 1\r\n    # if not add the element to hashmap with its xor as a key\r\n    # return the count\r\n    \r\n    hm = {}\r\n    count = 0\r\n    for i in range(N) :\r\n        xor = A[i]^i\r\n        if xor in hm :\r\n            count += 1\r\n        else :\r\n            hm[xor] = 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] == A[i+1] ^ A[j+1] == A[i+2] ^ A[j+2] == A[i+3] ^ A[j+3] == A[i+4] ^ A[j+4] :\r\n                count += 1\r\n    return count\r\n    \r\nif __name__ == \"__main__\" :\r\n    A = [0, 1, 2, 3, 4, 5, 6]\r\n    N = 7\r\n    print(find_Odd_Pair(A,N))\r\n    \r\n    A = [0, 1, 2, 3, 4, 5, 6, 7, 8]\r\n    N = 9\r\n    print(find_Odd_Pair(A,N))\r\n    \r\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    N = 9\r\n    print(find_Odd_Pair(A,N))\r\n    \r\n    A = [8, 7, 6, 5, 4, 3, 2, 1, 0]\r\n    N = 9\r\n    print(find_Odd_Pair(A,N))\r\n    \r\n    A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    N = 10\r\n    print(find_Odd_Pair(A,N))\r\n    \r\n    A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    N = 11\r\n    print(find_Odd_Pai","votes":null},{"text":"\r\n    \r\n    # Code here\r\n    res = 0\r\n    for i in range(N) :\r\n        for j in range(i+1, N) :\r\n            if (A[i] ^ A[j]) % 2 == 1 :\r\n                res += 1\r\n    return res\r\n\r\n\r\n\r\nif __name__ == '__main__' :\r\n    T = int(input())\r\n    for i in range(T) :\r\n        N = int(input())\r\n        A = list(map(int, input().split()))\r\n        \r\n        print(\"Number of pairs are :\", find_Odd_Pair(A,N))\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nInput :\r\n2\r\n5\r\n1 2 3 4 5\r\n3\r\n1 1 1\r\n\r\nOutput :\r\nNumber of pairs are : 10\r\nNumber of pairs are : 0\r\n\r\nTime Complexity : O(N^2)\r\nSpace Complexity : O(1)\r\n\r\nExplanation :\r\nFor the given input, the function will go through the list A twice,\r\nand it will count the pairs having odd xor. So the time complexity of the\r\nfunction is O(N^2). The function will be given a list of N integers and it\r\nmust return the number of pairs having odd xor. So the space complexity\r\nis O(1).\r\n\r\nReferences :\r\nhttps:\/\/www.geeksforgeeks.org\/count-pairs-array-xor-odd\/\r\nhttps:\/\/www.youtube.com\/watch?v=s-w0J","votes":null},{"text":"\r\n    # Code here\r\n    \r\n    # Your code here\r\n    xor = 0\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1, N):\r\n            x = A[i] ^ A[j]\r\n            if x % 2 != 0:\r\n                xor = x\r\n                count += 1\r\n    print(\"","votes":null},{"text":"\r\n    \r\n    # Sort the array \r\n    A.sort()\r\n    \r\n    # Traverse the array \r\n    for i in range(0,N-1) :\r\n        \r\n        # Find the XOR \r\n        xor = A[i] ^ A[i+1]\r\n        \r\n        # Check if the number is odd \r\n        if xor & 1 == 1 :\r\n            return 1\r\n        \r\n    return 0\r\n\r\n\r\n# Driver program to test above function \r\nA = [1,2,4,2,1]\r\nN = len(A)\r\n\r\nif find_Odd_Pair(A,N) :\r\n    print(\"There are odd pairs\")\r\nelse:\r\n    print(\"There are no odd pairs\")\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(NlogN)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nEnter the length of the array: 5\r\nEnter the elements of the array: 1 2 4 2 1\r\nThere are odd","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if ((A[i]^A[j])%2 == 1) :\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__' :\r\n    A = [1, 2, 3, 4, 5, 6, 7]\r\n    N = len(A)\r\n    print('The number of odd pairs with xor as an odd number is:',find_Odd_Pair(A,","votes":null},{"text":"\r\n    \r\n    # Your code goes here\r\n    \r\n    \r\n    # Print the output\r\n    print(Odd_Pair_count)\r\n    \r\n\r\nif __name__ == '__main__':\r\n    \r\n    # Number of elements in the array\r\n    N = int(input())\r\n    \r\n    # Array of elements\r\n    A = list(map(int, input().split()))\r\n    \r\n    # Function call\r\n    find_Odd_Pair(A,N)\r\n\r\n\r\n\r\n'''\r\nInput:\r\n10\r\n3 1 4 2 5 2 3 7 8 4\r\n\r\nOutput:\r\n4\r\n\r\nExplanation:\r\nThe pairs that have xor as an odd number are \r\n(3, 2), (4, 2), (4, 3) and (7, 8).\r\n\r\n\r\nInput:\r\n5\r\n3 1 4 1 5\r\n\r\nOutput:\r\n3\r\n\r\nExplanation:\r\nThe pairs that have xor as an odd number are \r\n(1, 4), (1, 5) and (3, 5).\r\n\r\n\r\nInput:\r\n5\r\n3 1 4 1 5\r\n\r\nOutput:\r\n3\r\n\r\nExplanation:\r\nThe pairs that have xor as an odd number are \r\n(1, 4), (1, 5) and (3, 5).\r\n\r\n\r\nTime Complexity: O(N)\r\nSpace Complexity: O(1)\r\n\r\n\r\nExpected Time Complexity: O(N)\r\nExpected Space Complexity: O(1)\r\n\r\n\r\nConstraints:\r\n1 \u2264 N \u2264 105\r\n1 \u2264 A[i] \u2264 105\r\n\r\n\r\n'''\r\n","votes":null},{"text":"\r\n    # your code goes here\r\n    temp = []\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i]^A[j]&1 :\r\n                temp.append([A[i],A[j]])\r\n    return temp\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    result = 0\r\n    \r\n    for i in range(N) :\r\n        for j in range(i + 1,N) :\r\n            if (A[i]","votes":null},{"text":"\r\n    # code here\r\n    count = 0\r\n    for i in range(0,N,1) :\r\n        for j in range(i+1,N,1) :\r\n            if A[i]^A[j] & 1 == 1 :\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__' :\r\n    T = int(input())\r\n    for _ in range(T) :\r\n        N = int(input())\r\n        A = list(map(int, input().split()))\r\n        print(find_Odd_Pair(A, N))\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(N):\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] == 1 :\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    N = int(input(\"Enter the number of elements in the array: \"))\r\n    A = list(map(int, input(\"Enter the elements of the array separated by space: \").split()))\r\n    print(\"Odd pairs are\",find_Odd_Pair(A,N))\r\n\r\n\"\"\"\r\nTest Case 1:\r\n    Input:\r\n        Enter the number of elements in the array: 5\r\n        Enter the elements of the array separated by space: 2 3 1 5 4\r\n    Output:\r\n        Odd pairs are 3\r\n\r\nTest Case 2:\r\n    Input:\r\n        Enter the number of elements in the array: 5\r\n        Enter the elements of the array separated by space: 2 3 4 5 6\r\n    Output:\r\n        Odd pairs are 2\r\n\r\nTest Case 3:\r\n    Input:\r\n        Enter the number of elements in the array: 4\r\n        Enter the elements of the array separated by space: 1 2 3 4\r\n    Output:\r\n        Odd pairs are 0\r\n\r\nTest Case 4:\r\n    Input:\r\n        Enter the number of elements in the array: 5\r\n        Enter the elements of the array separated by space: 1 1 1 1 1\r\n    Output:\r\n        Odd pairs are 0\r\n\r\nTest Case 5:\r\n    Input:\r\n        Enter the number of elements in the array: 5\r\n        Enter the elements of the array separated by space: 1 1 1 2 2\r\n    Output:\r\n        Odd pairs are 1\r\n\r\nTime Complexity","votes":null},{"text":"\r\n    # A : list of integers\r\n    # N : length of the list\r\n    \r\n    # Return the list of pairs\r\n    \r\n    # Code Here\r\n    \r\n    if (N%2) == 0 :\r\n        return []\r\n    \r\n    pairs = []\r\n    \r\n    for i in range(0,N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])&1 == 1 :\r\n                pairs.append((A[i], A[j]))\r\n                \r\n    return pairs\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\" :\r\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    N = len(A)\r\n    \r\n    print(\"List of pairs :\", find_Odd_Pair(A,N))\r\n\r\n\r\n# Sample Input :\r\n# A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# N = 10\r\n\r\n# Sample Output :\r\n# List of pairs : [(1, 10), (3, 7), (5, 5)]\r\n\r\n\r\n# Time Complexity : O(N^2)\r\n\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    \r\n    #sort the given list\r\n    A = sorted(A)\r\n    \r\n    #we will maintain a dictionary for counting the elements\r\n    count = {}\r\n    \r\n    #we will check the elements of the sorted list\r\n    for i in A :\r\n        \r\n        #check if the current element is in the dictionary\r\n        if i in count :\r\n            count[i] += 1\r\n        else :\r\n            count[i] = 1\r\n    \r\n    #we will check the elements of the sorted list again\r\n    for i in A :\r\n        \r\n        #check if the current element is in the dictionary\r\n        if i in count :\r\n            \r\n            #check if the count of the current element is more than 1\r\n            if count[i] > 1 :\r\n                \r\n                #if yes, then we have found our pair\r\n                return True\r\n            else :\r\n                \r\n                #if no, then decrement the count of the current element\r\n                count[i] -= 1\r\n            \r\n    #if we have reached here, then no pair with xor as an odd number is found\r\n    return False\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    pair = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i]","votes":null},{"text":"\r\n    temp = []\r\n    count = 0\r\n    for i in range(N) : \r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                count += 1\r\n    return count\r\n        \r\n\r\nN = int(input())\r\nA = list(map(int,input().split()))\r\n\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if A[i] ^ A[j] == 1 :\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__' :\r\n    A = [1,2,3,4,5]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n\r\n    A = [1,2,3,4,5,6,7,8,9,10]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n\r\n    A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\n    N = len(A)\r\n    print(find_Odd_Pair(A,N))\r\n\r\n\r\n\"\"\"\r\nInput : A = [1,2,3,4,5]\r\nOutput : 4\r\nExplanation : The pairs with xor as an odd number are :\r\n(1, 2) : 1 XOR 2 = 3\r\n(1, 4) : 1 XOR 4 = 5\r\n(2, 4) : 2 XOR 4 = 6\r\n(3, 4) : 3 XOR 4 = 7\r\n\r\n\r\nInput : A = [1,2,3,4,5,6,7,8,9,10]\r\nOutput : 18\r\nExplanation : The pairs with xor as an odd number are :\r\n(1, 2) : 1 XOR 2 = 3\r\n(1, 4) : 1 XOR 4 = 5\r\n(1, 8) : ","votes":null},{"text":"\r\n    # A: the input array A\r\n    # N: the length of the array A\r\n    # return: the number of pairs (i, j) where A[i] XOR A[j] is an odd number\r\n\r\n    # find the first odd bit\r\n    odd_bit = 1\r\n    while (odd_bit & (N-1)) == 0 :\r\n        odd_bit <<= 1\r\n\r\n    # get the pairs\r\n    pairs = 0\r\n    for i in range(N) :\r\n        if (A[i] & odd_bit) != 0 :\r\n            for j in range(i+1,N) :\r\n                if (A[j] & odd_bit) != 0 :\r\n                    pairs += 1\r\n\r\n    return pairs\r\n\r\n\r","votes":null},{"text":"\r\n    # A = [1,2,3,4,5]\r\n    # N = 5\r\n    # Output: 5\r\n    # There are 5 pairs with xor as an odd number.\r\n    # 1 ^ 2 ^ 3 ^ 4 ^ 5\r\n    # 1 ^ 2 ^ 3 ^ 4 ^ 5\r\n    # 1 ^ 2 ^ 3 ^ 4 ^ 5\r\n    # 1 ^ 2 ^ 3 ^ 4 ^ 5\r\n    # 1 ^ 2 ^ 3 ^ 4 ^ 5\r\n    # Time Complexity : O(n)\r\n    # Space Complexity : O(1)\r\n\r\n    n = len(A)\r\n    ans = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if A[i] ^ A[j] & 1:\r\n                ans += 1\r\n    return ans\r\n\r\n\r","votes":null},{"text":"\r\n    pair = []\r\n    for i in A :\r\n        for j in A :\r\n            if ((i^j) % 2 == 1) :\r\n                pair.append([i,j])\r\n    return pair\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7]\r\nN = len(A)\r\nprint(find_Odd_Pair(A,N))\r\n\r\n\r","votes":null},{"text":"\r\n    ans = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if(A[i] ^ A[j])%2 == 1 :\r\n                ans += 1\r\n    return ans\r\n\r\n\r\nn = int(input())\r\nA = list(map(int,input().split()))\r\nprint(find_Odd_Pair(A,n))\r\n\r\n# Sample Input :-\r\n# 8\r\n# 1 4 2 7 5 3 6 9\r\n# Sample Output :-\r\n# 4\r\n\r\n# Time Complexity :- O(n^2)\r\n# Space Complexity :- O(1)\r\n\r\n# Explaination :-\r\n# We will iterate through the array and for each element we will check its xor with each element","votes":null},{"text":"\r\n    # Find the pair with xor as an odd number.\r\n    odd_pairs = 0\r\n    for i in range(N) :\r\n        for j in range(i+1,N) :\r\n            if (A[i]^A[j])%2 == 1 :\r\n                odd_pairs += 1\r\n    return odd_pairs\r\n\r\n\r\nif __name__ == '__main__' :\r\n    T = int(input())\r\n    for tes in range(T) :\r\n        N = int(input())\r\n        A = list(map(int, input().split()))\r\n        print(find_Odd_Pair(A,N))\r\n\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    ans = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if A[i]^A[j] == 1 :\r\n                ans += 1\r\n    return ans\r\n \r\n","votes":null},{"text":"\r\n\r\n    # Your code goes here\r\n    pair_odd=[]\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if(A[i]^A[j]%2==1):\r\n                pair_odd.append([i,j])\r\n    return pair_odd\r\n\r\n\r\nA = [1, 1, 2, 3, 3]\r\nN = 5\r\n","votes":null},{"text":"\r\n    A.sort()\r\n    odd=0\r\n    for i in range(1,N,2) :\r\n        if (A[i] ^ A[i-1]) % 2 == 1 :\r\n            odd += 1\r\n    return odd\r\n\r\n\r","votes":null},{"text":"\r\n    \"\"\"\r\n    Time Complexity: O(NlogN)\r\n    Space Complexity: O(N)\r\n    \"\"\"\r\n    if(N == 1) :\r\n        return 0\r\n    A.sort()\r\n    ans = 0\r\n    for i in range(0, N, 2) :\r\n        ans += ((A[i] ^ A[i+1]) & 1)\r\n    return ans\r\n\r\nif __name__ == \"__main__\" :\r\n    N = int(input())\r\n    A = list(map(int, input().split()))\r\n    print(find_Odd_Pair(A, N))\r\n","votes":null},{"text":"\r\n    # Code Here\r\n    x = []\r\n    for i in range(len(A)) :\r\n        for j in range(i+1,len(A)) :\r\n            if(A[i]^A[j])%2 == 1 :\r\n                x.append([A[i],A[j]])\r\n    print(x)\r\n    return x\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# -----------------------------------------------------------------------------------------------------------------------\r","votes":null},{"text":"\r\n\r\n    count = 0\r\n\r\n    for i in range(N) :\r\n        for j in range(i+","votes":null}],"time":{"count":25.0,"avg":166331.3584,"std":54551.122676023,"cov":0.3279665554}}
{"id":557,"question":"def toggle_string(string):\r\n    \"\"\"Write a function to toggle characters case in a string.\"\"\"","answers":[{"text":"\r\n    return string.swapcase()\r\n\r\n\r","votes":43974.148},{"text":"\r\n    \r\n    return string.swapcase()\r\n\r\n# 3\r\n\r","votes":72034.56},{"text":"\r\n\r\n    return string.swapcase()\r\n\r\n\r","votes":76793.0},{"text":"\r\n    new_string = \"\"\r\n    for letter in string:\r\n        if letter.isupper():\r\n            new_string += letter.lower()\r\n        else:\r\n            new_string += letter.upper()\r\n    return new_string\r\n\r\n\r","votes":79441.168},{"text":"\r\n    return string.swapcase()\r\n\r","votes":81308.668},{"text":"\r\n    result = ''\r\n    for i in string:\r\n        if i.isupper():\r\n            result += i.lower()\r\n        else:\r\n            result += i.upper()\r\n    return result\r\n\r\n\r","votes":81871.912},{"text":"\r\n    new_string = ''\r\n\r\n    for character in string:\r\n        if character.isupper():\r\n            new_string += character.lower()\r\n        else:\r\n            new_string += character.upper()\r\n\r\n    return new_string\r\n\r\n\r\nprint(toggle_string('Hello World!'))\r\n\r\n\r","votes":88504.636},{"text":"\r\n    new_string = ''\r\n    for i in range(len(string)):\r\n        if string[i] == string[i].lower():\r\n            new_string += string[i].upper()\r\n        else:\r\n            new_string += string[i].lower()\r\n    return new_string\r\n\r\n\r","votes":90635.372},{"text":"\r\n    \r\n    new_string = ''\r\n    \r\n    for char in string:\r\n        if char.islower():\r\n            new_string += char.upper()\r\n        else:\r\n            new_string += char.lower()\r\n        \r\n    return new_string\r\n\r\n\r","votes":91624.476},{"text":"\r\n    temp = \"\"\r\n    for i in string:\r\n        if i.isupper():\r\n            temp += i.lower()\r\n        else:\r\n            temp += i.upper()\r\n    return temp\r\n\r\n\r\nprint(toggle_string(\"abCd\"))\r\nprint(toggle_string(\"12345\"))\r\nprint(toggle_string(\"\"))\r\nprint(toggle_string(\"hello\"))\r\nprint(toggle_string(\"HELLO\"))\r\nprint(toggle_string(\"hElLo\"))\r\nprint(toggle_string(\"HELLO\"))\r\nprint(toggle_string(\"HELLO\"))\r\nprint(toggle_string(\"HELLO\"))\r\n\r\n\r","votes":91775.616},{"text":"\r\n    return ''.join(map(str.swapcase, string))\r\n\r\n\r","votes":94634.172},{"text":"\r\n    result = \"\"\r\n    for c in string:\r\n        if c.isupper():\r\n            result += c.lower()\r\n        else:\r\n            result += c.upper()\r\n    return result\r\n\r\n\r","votes":97113.2},{"text":"\r\n    # Your code goes here\r\n    return string.swapcase()\r\n\r\n\r","votes":98497.66},{"text":"\r\n    return string.swapcase()\r\n\r\n##############################################################################################################################################\r\n\r\n\r","votes":100140.976},{"text":"\r\n    \r\n    return string.swapcase()\r\n\r\n\r","votes":101670.408},{"text":"\r\n    toggled = \"\"\r\n    for letter in string:\r\n        if letter.isupper():\r\n            toggled += letter.lower()\r\n        else:\r\n            toggled += letter.upper()\r\n    return toggled\r\n\r\n\r","votes":102899.78},{"text":"\r\n    new_string = \"\"\r\n    for character in string:\r\n        if character.islower():\r\n            new_string += character.upper()\r\n        else:\r\n            new_string += character.lower()\r\n    return new_string\r\n\r\n\r\n#","votes":104378.304},{"text":"\r\n    return ''.join(map(lambda s: s.lower() if s.isupper() else s.upper(), string))\r\n\r\n\r","votes":104995.1},{"text":"\r\n    output = ''\r\n    for i in string:\r\n        if i.isupper():\r\n            output += i.lower()\r\n        elif i.islower():\r\n            output += i.upper()\r\n        else:\r\n            output += i\r\n    return output\r\n\r\n\r","votes":106569.304},{"text":"\r\n    # string = input(\"Enter a string: \")\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n        elif char.islower():\r\n            new_string += char.upper()\r\n        else:\r\n            new_string += char\r\n    return new_string\r\n\r\n\r","votes":109989.74},{"text":"\r\n    output = \"\"\r\n    for letter in string:\r\n        if letter.isupper():\r\n            output += letter.lower()\r\n        elif letter.islower():\r\n            output += letter.upper()\r\n        else:\r\n            output += letter\r\n    return output\r\n\r","votes":113483.9},{"text":"\r\n    result = \"\"\r\n    for char in string:\r\n        if char.islower():\r\n            char = char.upper()\r\n        elif char.isupper():\r\n            char = char.lower()\r\n        result += char\r\n    return result\r\n\r\n\r","votes":113607.608},{"text":"\r\n    new_string = ''\r\n    for c in string:\r\n        if c.isupper():\r\n            new_string += c.lower()\r\n        else:\r\n            new_string += c.upper()\r\n    return new_string\r\n\r\n\r","votes":113964.236},{"text":"\r\n    string_list = list(string)\r\n    for i in range(len(string_list)):\r\n        if string_list[i].isupper():\r\n            string_list[i] = string_list[i].lower()\r\n        else:\r\n            string_list[i] = string_list[i].upper()\r\n    return ''.join(string_list)\r\n\r\n\r","votes":116325.048},{"text":"\r\n    new_string = \"\"\r\n    for letter in string:\r\n        if letter.islower():\r\n            new_string += letter.upper()\r\n        elif letter.isupper():\r\n            new_string += letter.lower()\r\n        else:\r\n            new_string += letter\r\n    return new_string\r\n\r\n\r","votes":116581.896},{"text":"\r\n    result = ''\r\n    for char in string:\r\n        if char.isupper():\r\n            result += char.lower()\r\n        else:\r\n            result += char.upper()\r\n    return result\r\n\r\n\r","votes":116888.792},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n        else:\r\n            new_string += char.upper()\r\n    return new_string\r\n\r\n\r","votes":117833.12},{"text":"\r\n    toggled_string = ''\r\n    for char in string:\r\n        if char == char.upper():\r\n            toggled_string += char.lower()\r\n        else:\r\n            toggled_string += char.upper()\r\n    return toggled_string\r\n\r\n\r","votes":118942.584},{"text":"\r\n    new_string = ''\r\n    for i in string:\r\n        if i.isupper():\r\n            new_string += i.lower()\r\n        elif i.islower():\r\n            new_string += i.upper()\r\n        else:\r\n            new_string += i\r\n    return new_string\r\n\r\n\r","votes":120388.428},{"text":"\r\n    \r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.islower():\r\n            char = char.upper()\r\n        elif char.isupper():\r\n            char = char.lower()\r\n        new_string += char\r\n    return new_string\r\n\r\n\r\ns = \"Hello World\"\r\nprint(toggle_string(s))\r\n\r\n\r","votes":121311.236},{"text":"\r\n    return \"\".join([x.swapcase() for x in string])\r\n\r\n\r","votes":126001.208},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        char = char.lower() if char.isupper() else char.upper()\r\n        new_string += char\r\n    return new_string\r\n\r\n\r","votes":127017.144},{"text":"\r\n    stringa = \"\"\r\n    for i in string:\r\n        if i.isupper():\r\n            i = i.lower()\r\n        elif i.islower():\r\n            i = i.upper()\r\n        stringa += i\r\n    return stringa\r\n\r\n\r","votes":128643.948},{"text":"\r\n    result = ''\r\n\r\n    for char in string:\r\n        if char.isupper():\r\n            result += char.lower()\r\n        elif char.islower():\r\n            result += char.upper()\r\n        else:\r\n            result += char\r\n\r\n    return result\r\n\r\n\r","votes":136181.908},{"text":"\r\n    result = ''\r\n    for i in string:\r\n        if i.islower():\r\n            result += i.upper()\r\n        else:\r\n            result += i.lower()\r\n    return result\r\n\r\n\r\nprint(toggle_string('Hello'))\r\n\r\n\r","votes":139847.132},{"text":"\r\n\r\n    new_string = \"\"\r\n\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n        else:\r\n            new_string += char.upper()\r\n\r\n    return new_string\r\n\r\n\r\nprint(toggle_string(\"Hello World\"))\r\n\r\n\r","votes":142749.588},{"text":"\r\n    new_string = ''\r\n    for i in range(len(string)):\r\n        if string[i].isupper():\r\n            new_string += string[i].lower()\r\n        else:\r\n            new_string += string[i].upper()\r\n    return new_string\r\n\r\n\r","votes":147827.784},{"text":"\r\n    return string.swapcase()\r\n\r\n\r\nprint(toggle_string(\"Hello World\"))\r\nprint(toggle_string(\"Greetings from Earth\"))\r\nprint(toggle_string(\"Howdy\"))\r\nprint(toggle_string(\"Hola\"))\r\nprint(toggle_string(\"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\"))\r\nprint(toggle_string(\"\u4f60\u597d\"))\r\nprint(toggle_string(\"HeLlo\"))\r\nprint(toggle_string(\"hEllo\"))\r\nprint(toggle_string(\"hElLo\"))\r\n\r\n\r","votes":148633.276},{"text":"\r\n    new_string = \"\"\r\n    for i in string:\r\n        if i.isupper():\r\n            new_string += i.lower()\r\n        else:\r\n            new_string += i.upper()\r\n    return new_string\r\n\r\n\r","votes":148911.052},{"text":"\r\n    new_string = ''\r\n    for i in string:\r\n        if i.isupper():\r\n            new_string += i.lower()\r\n        else:\r\n            new_string += i.upper()\r\n    return new_string\r\n\r\n\r\nprint(toggle_string('code'))\r\nprint(toggle_string('CODE'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('codewarriors'))\r\nprint(toggle_string('CODEWARRIORS'))\r\nprint(toggle_string('cOdEwArRiOrS'))\r\n\r\n\r","votes":152638.404},{"text":"\r\n    if isinstance(string, str) == False:\r\n        raise TypeError(\"Please provide a string.\")\r\n    result = \"\"\r\n    for char in string:\r\n        if char.islower():\r\n            result += char.upper()\r\n        elif char.isupper():\r\n            result += char.lower()\r\n        else:\r\n            result += char\r\n    return result\r\n\r\n\r","votes":154344.92},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n        elif char.islower():\r\n            new_string += char.upper()\r\n        else:\r\n            new_string += char\r\n    return new_string\r\n\r\n\r","votes":155888.504},{"text":"\r\n    result = \"\"\r\n    for i in range(len(string)):\r\n        if string[i].islower():\r\n            result += string[i].upper()\r\n        elif string[i].isupper():\r\n            result += string[i].lower()\r\n        else:\r\n            result += string[i]\r\n\r\n    return result\r\n\r\n\r","votes":156061.82},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.islower():\r\n            new_string += char.upper()\r\n        else:\r\n            new_string += char.lower()\r\n    return new_string\r\n\r\nprint(toggle_string(\"hello\"))\r\nprint(toggle_string(\"HELLO\"))\r\nprint(toggle_string(\"hEllO\"))\r\n\r\n\r\n# 1.1.3\r","votes":162240.236},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            new_string += char.lower()\r\n        elif char.islower():\r\n            new_string += char.upper()\r\n        else:\r\n            new_string += char\r\n    return new_string\r\n\r\n\r\n# Tests\r\nassert toggle_string(\"The quick brown fox\") == \"tHE QUICK BROWN FOX\"\r\nassert toggle_string(\"A\") == \"A\"\r\nassert toggle_string(\"ABC\") == \"aBC\"\r\nassert toggle_string(\"aBc\") == \"AbC\"\r\nassert toggle_string(\"\") == \"\"\r\nassert toggle_string(\"123\") == \"123\"\r\nassert toggle_string(\"abc\") == \"AbC\"\r\nassert toggle_string(\"A123\") == \"a123\"\r\nassert toggle_string(\"A1b2c3\") == \"a1B2c3\"\r\nassert toggle_string(\"aB1c2d3\") == \"aB1C2d3\"\r\nassert toggle_string(\"A1B2c3D4\") == \"a1B2c3d4\"\r\nassert toggle_string(\"A1b2C3d4\") == \"a1B2c3D4\"\r\nassert toggle_string(\"A1b2c3D4e5f6\") == \"a1B2c3D4e5f6\"\r\nassert toggle_string(\"a1B2c3d4E5F6\") == \"a1B2c3d4e5F6\"\r\nassert toggle_string(\"a1B2c3d4E5f6\") == \"a1B2c3d4E5f6\"\r\nassert toggle_string(\"a1B2c3d4e5F6\") == \"a1B2c3d4E5f6\"\r\nassert toggle_string(\"A1b2c3D4e5f6\") == \"a1B2c3D4e5f6\"\r\nassert toggle_string(\"A1b2c3","votes":null},{"text":"\r\n    return string.upper() if string.islower() else string.lower()\r\n\r\n\r","votes":null},{"text":"\r\n    string = string.lower()\r\n    new_string = ''\r\n    for char in string:\r\n        if char.isupper():\r\n            char = char.lower()\r\n        else:\r\n            char = char.upper()\r\n        new_string += char\r\n    return new_string\r\n\r\nif __name__ == '__main__':\r\n    string = 'Hello World'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))\r\n    string = 'HeLLo wOrLD'\r\n    print(toggle_string(string))","votes":null},{"text":"\r\n    return string.swapcase()\r\n\r\n\r\n# Tests\r\nprint(toggle_string(\"Hello World\"))\r\nprint(toggle_string(\"hello world\"))\r\nprint(toggle_string(\"hELLo WoRLd\"))\r\nprint(toggle_string(\"HELLO WORLD\"))\r\nprint(toggle_string(\"1234","votes":null},{"text":"\r\n    # Split the string into a list of characters.\r\n    string_list = list(string)\r\n    # Loop through the list, toggling the case of each character.\r\n    for i in range(len(string_list)):\r\n        if string_list[i].isupper():\r\n            string_list[i] = string_list[i].lower()\r\n        elif string_list[i].islower():\r\n            string_list[i] = string_list[i].upper()\r\n    # Join the list back into a string and return it.\r\n    return ''.join(string_list)\r\n\r\nprint(toggle_string('hello'))\r\nprint(toggle_string('hEllo'))\r\nprint(toggle_string('HELLO'))\r\nprint(toggle_string('HeLlo'))\r\nprint(toggle_string('123'))\r\nprint(toggle_string(''))\r\nprint(toggle_string(' '))\r\nprint(toggle_string('Hello World'))\r\nprint(toggle_string('Hey, how are you?'))\r\nprint(toggle_string('how are you?'))\r\nprint(toggle_string('how are you? HELLO'))\r\nprint(toggle_string('how are you? HELLO HELLO'))\r\nprint(toggle_string('how are you? HELLO HELLO HELLO'))\r\nprint(toggle_string('how are you? HELLO HELLO HELLO HELLO'))\r\nprint(toggle_string('how are you? HELLO HELLO HELLO HELLO HELLO'))\r\nprint(toggle_string('how are you? HELLO HELLO HELLO HELLO HELLO HELLO'))\r\nprint(toggle_string('how are you? HELLO HELLO HELLO HELLO HELLO HELLO HELLO'))\r\nprint(toggle_string('how are you? HELLO HELLO HELLO HELLO HELLO HELLO HELLO HELLO'))\r\nprint(toggle_string('how are you? HELLO HELLO H","votes":null},{"text":"\r\n    string = string.lower()\r\n    new_string = \"\"\r\n    for letter in string:\r\n        if letter.isupper():\r\n            new_string += letter.lower()\r\n        elif letter.islower():\r\n            new_string += letter.upper()\r\n        else:\r\n            new_string += letter\r\n    return new_string\r\n\r\n\r","votes":null},{"text":"\r\n    string = list(string)\r\n    for i in range(len(string)):\r\n        if string[i].islower():\r\n            string[i] = string[i].upper()\r\n        else:\r\n            string[i] = string[i].lower()\r\n\r\n    return \"\".join(string)\r\n\r\n\r\nstring = input(\"Enter a string: \")\r\nprint(\"Original string: \", string)\r\nprint(\"String with toggle characters: \", toggle_string(string))\r\n\r\n\r\n# 11.5.1.2\r","votes":null},{"text":"\r\n    if not isinstance(string, str):\r\n        raise TypeError('string must be of type str')\r\n    return ''.join(chr(ord(char) ^ 32) if char.islower()\r\n                   else char for char in string)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print('[x] Testing toggle_string...')\r\n    print('toggle_string(\"string\") -> \"StRiNg\"')\r\n    print('toggle_string(\"STRING\") -> \"sTrInG\"')\r\n    print('toggle_string(\"1234\") -> \"1234\"')\r\n    print('toggle_string(\"\") -> \"\"')\r\n    print('toggle_string(\" \") -> \" \"')\r\n    print('toggle_string(\"A\") -> \"a\"')\r\n    print('toggle_string(\"ABC\") -> \"aBc\"')\r\n    print('toggle_string(\"abc\") -> \"aBc\"')\r\n    print('toggle_string(\"AaBbCc\") -> \"aA","votes":null},{"text":"\r\n    # return string.swapcase()\r\n    # return string.upper()\r\n    # return string.lower()\r\n    # return string.title()\r\n    return string.capitalize()\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    new_string = ''\r\n\r\n    for i in range(len(string)):\r\n        if string[i] in string.upper():\r\n            new_string += string[i].lower()\r\n        else:\r\n            new_string += string[i].upper()\r\n\r\n    return new_string\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(toggle_string('CodeWars'))\r\n    print(toggle_string('Python'))\r\n    print(toggle_string('Python 3'))\r\n    print(toggle_string('123'))\r\n    print(toggle_string('1A2b3C'))\r\n    print(toggle_string('1a2B3c'))\r\n    print(toggle_string('123A'))\r\n    print(toggle_string('1A2b'))\r\n    print(toggle_string('1a2B'))\r\n    print(toggle_string('123abc'))\r\n    print(toggle_string('abc123'))\r\n    print(toggle_string('abcABC123'))\r\n    print(toggle_string('ABCabc123'))\r\n    print(toggle_string('123AbC'))\r\n    print(toggle_string('AbC123'))\r\n    print(toggle_string('ABC123'))\r\n    print(toggle_string('abc123'))\r\n    print(toggle_string('aBc123'))\r\n    print(toggle_string('AbC123'))\r\n    print(toggle_string('a'))\r\n    print(toggle_string('A'))\r\n    print(toggle_string('1'))\r\n    print(toggle_string('a1'))\r\n    print(toggle_string('A1'))\r\n    print(toggle_string('a1b'))\r\n    print(toggle_string('A1B'))\r\n    print(toggle_string('a1B'))\r\n    print(toggle_string('a1b2c3d4e5f6g7h8i9j0')","votes":null},{"text":"\r\n    new_string = \"\"\r\n    for word in string:\r\n        if word.islower():\r\n            new_string += word.upper()\r\n        elif word.isupper():\r\n            new_string += word.lower()\r\n        else:\r\n            new_string += word\r\n    return new_string\r\n\r\nif __name__ == \"__main__\":\r\n    print(toggle_string(\"Hello\"))\r\n    print(toggle_string(\"hElLo\"))\r\n    print(toggle_string(\"HeLlO\"))\r\n    print(toggle_string(\"123\"))\r\n    print(toggle_string(\"Hello World\"))\r\n    print(toggle_string(\"HeLlo WoRlD\"))\r\n    print(toggle_string(\"\"))\r\n    print(toggle_string(\" \"))\r\n    print(toggle_string(\"  \"))\r\n    print(toggle_string(\"HeLlO WOrLd\"))\r\n    print(toggle_string(\"H3ll0 W0rld\"))\r\n    print(toggle_string(\"H3LL0 W0RLD\"))\r\n    print(toggle_string(\"H3LL0 W0RLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle","votes":null},{"text":"\r\n\r\n    toggled_str = \"\"\r\n\r\n    for i in range(len(string)):\r\n        if string[i].isupper():\r\n            toggled_str += string[i].lower()\r\n        elif string[i].islower():\r\n            toggled_str += string[i].upper()\r\n\r\n    return toggled_str\r\n\r\n\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('I love python'))\r\nprint(toggle_string('Python is fun'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_string('Python'))\r\nprint(toggle_strin","votes":null},{"text":"\r\n    # TODO: Write your function here\r\n    if string == string.lower():\r\n        return string.upper()\r\n    return string.lower()\r\n\r\n\r","votes":null},{"text":"\r\n    return string.upper()\r\n\r\n\r","votes":null},{"text":"\r\n    new_string = ''\r\n    for i in range(len(string)):\r\n        if string[i] in 'aeiouAEIOU':\r\n            new_string += string[i].upper()\r\n        else:\r\n            new_string += string[i].lower()\r\n\r\n    return new_string\r\n\r\n\r","votes":null},{"text":"\r\n    new_string = ''\r\n    for character in string:\r\n        if character.isupper():\r\n            new_string += character.lower()\r\n        else:\r\n            new_string += character.upper()\r\n    return new_string\r\n\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert toggle_string('Hello') == 'hELLO'\r\n    assert toggle_string('here') == 'HERE'\r\n    assert toggle_string('We Are","votes":null},{"text":"\r\n\r\n    return string.swapcase()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(toggle_string(\"hello world\"))\r\n    print(toggle_string(\"HELLO WORLD\"))\r\n    print(toggle_string(\"hELL","votes":null},{"text":"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            char = char.lower()\r\n        elif char.islower():\r\n            char = char.upper()\r\n        new_string += char\r\n    return new_string\r\n\r\n\r\nprint(toggle_string(\"HackerRank\"))\r\n# Should be: \"hAcKeRrAnK\"\r\n\r\nprint(toggle_string(\"aBcDEfGh\"))\r\n# Should be: \"AbCdEfGh\"\r\n\r\nprint(toggle_string(\"Codefights\"))\r\n# Should be: \"cOdEfIgHtS\"\r\n\r\nprint(toggle_string(\"Codefights!\"))\r\n# Should be: \"cOdEfIgHtS!\"\r\n\r\nprint(toggle_string(\"Codefights!\"))\r\n# Should be: \"cOdEfIgHtS!\"\r\n\r\nprint(toggle_string(\"Codefights!\"))\r\n# Should be: \"cOdEfIgHtS!\"\r\n\r\nprint(toggle_string(\"Codefights!\"))\r\n# Should be: \"cOdEfIgHtS!\"\r\n\r\nprint(toggle_string(\"Codefights!\"))\r\n# Should be: \"cOdEfIgHtS!\"\r\n\r\nprint(toggle_string(\"Codefights!\"))\r\n# Should be: \"cOdEfIgHtS!\"\r\n\r\nprint(toggle_string(\"Codefights!\"))\r\n# Should be: \"cOdEfIgHtS!\"\r\n\r\nprint(toggle_string(\"Codefights!\"))\r\n# Should be: \"cOdEfIgHtS!\"\r\n\r\nprint(toggle_string(\"Codefights!\"))\r\n# Should be: \"cOdEfIgHtS!\"\r\n\r\nprint(toggle_string(\"Codefights!\"))\r\n# Should be: \"cOdEfIgHtS!\"\r\n\r\nprint(toggle_string(","votes":null},{"text":"\r\n    return ''.join([chr(97 + (ord(c) - 97 + 1) % 26) if 97 <= ord(c) <= 122 else c for c in string])\r\n\r\n\r\n#","votes":null},{"text":"\r\n    new_string = ''\r\n    for c in string:\r\n        if c.isupper():\r\n            new_string += c.lower()\r\n        elif c.islower():\r\n            new_string += c.upper()\r\n        else:\r\n            new_string += c\r\n    return new_string\r\n    \r\nprint(toggle_string('CodE'))\r\nprint(toggle_string('CODE'))\r\nprint(toggle_string('code'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('coDe'))\r\nprint(toggle_string('coDe'))\r\nprint(toggle_string('codE'))\r\nprint(toggle_string('CODE'))\r\nprint(toggle_string('cODe'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('CoDe'))\r\nprint(toggle_string('CODdE'))\r\nprint(toggle_string('coDDE'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('coDe'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('CoDe'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('coDe'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('coDe'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('CoDe'))\r\nprint(toggle_string('CODE'))\r\nprint(toggle_string('cODe'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('CoDe'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('coDe'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('coDe'))\r\nprint(toggle_string('cOdE'))\r\nprint(toggle_string('C","votes":null},{"text":"\r\n    # First, split the string into a list of characters.\r\n    # Then, go through that list and transform each character.\r\n    # Finally, join the list back into a string.\r\n\r\n    # If the string is empty, return the empty string.\r\n    if len(string) == 0:\r\n        return \"\"\r\n\r\n    # Split the string into a list of characters.\r\n    chars = list(string)\r\n\r\n    # Go through the list and transform each character.\r\n    for i in range(len(chars)):\r\n        if chars[i].islower():\r\n            chars[i] = chars[i].upper()\r\n        elif chars[i].isupper():\r\n            chars[i] = chars[i].lower()\r\n\r\n    # Join the list back into a string.\r\n    return \"\".join(chars)\r\n\r\n\r\nprint(toggle_string(\"\"))\r\nprint(toggle_string(\"string\"))\r\nprint(toggle_string(\"A String\"))\r\nprint(toggle_string(\"1234\"))\r\nprint(toggle_string(\"a1B2c3D4e5F6g7H8\"))\r\nprint(toggle_string(\"a1b2c3d4e5f6g7h8\"))\r\nprint(toggle_string","votes":null},{"text":"\r\n    new_string = \"\"\r\n    for i in range(len(string)):\r\n        if string[i].isupper():\r\n            new_string += string[i].lower()\r\n        else:\r\n            new_string += string[i].upper()\r\n    return new_string\r\n\r\n\r\nprint(toggle_string(\"MyNameIsJohn\"))\r\nprint(toggle_string(\"HelloWorld\"))\r\nprint(toggle_string(\"aBcDeF\"))\r\nprint(toggle_string(\"12345\"))\r\nprint(toggle_string(\"A1B2C3D4E5F6\"))\r\nprint(toggle_string(\"\"))\r\nprint(toggle_string(\"a\"))\r\nprint(toggle_string(\"1\"))\r\nprint(toggle_string(\"A\"))\r\nprint(toggle_string(\"12\"))\r\nprint(toggle_string(\"A1\"))\r\nprint(toggle_string(\"1A\"))\r\nprint(toggle_string(\"123\"))\r\nprint(toggle_string(\"A12\"))\r\nprint(toggle_string(\"1A2\"))\r\nprint(toggle_string(\"A1B\"))\r\nprint(toggle_string(\"12C\"))\r\nprint(toggle_string(\"A1B2\"))\r\nprint(toggle_string(\"12C3\"))\r\nprint(toggle_string(\"A1B2C\"))\r\nprint(toggle_string(\"12C3D\"))\r\nprint(toggle_string(\"A1B2C3\"))\r\nprint(toggle_string(\"12C3D4\"))\r\nprint(toggle_string(\"A1B2C3D\"))\r\nprint(toggle_string(\"12C3D4E\"))\r\nprint(toggle_string(\"A1B2C3D4\"))\r\nprint(toggle_string(\"12C3D4E5\"))\r\nprint(toggle_string(\"A1B2C3D4E\"))\r\nprint(toggle_string(\"12C3D4E5F\"))\r\nprint(toggle_string(\"A1B2C3D4E5\"))\r\nprint(toggle_strin","votes":null}],"time":{"count":44.0,"avg":113981.0448181818,"std":26567.4109761805,"cov":0.2330862208}}
{"id":558,"question":"def digit_distance_nums(n1, n2):\r\n    \"\"\"Write a python function to find the digit distance between two integers.\"\"\"","answers":[{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    \r\n    return sum([abs(int(x)-int(y)) for x, y in zip(n1, n2)])\r\n\r\nprint(digit_distance_nums(123, 456))\r\n\r\n\r","votes":115124.672},{"text":"\r\n    return sum(abs(ord(c1) - ord(c2)) for c1, c2 in zip(str(n1), str(n2)))\r\n\r\n\r","votes":116021.308},{"text":"\r\n    n1_list = [int(i) for i in str(n1)]\r\n    n2_list = [int(i) for i in str(n2)]\r\n    max_len = max(len(n1_list), len(n2_list))\r\n    n1_list.extend([0] * (max_len - len(n1_list)))\r\n    n2_list.extend([0] * (max_len - len(n2_list)))\r\n    d = 0\r\n    for i in range(max_len):\r\n        d += abs(n1_list[i] - n2_list[i])\r\n    return d\r\n\r\n\r","votes":121419.692},{"text":"\r\n    digit_distance = 0\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    for index, digit in enumerate(n1_str):\r\n        digit_distance += abs(int(digit) - int(n2_str[index]))\r\n    return digit_distance\r\n\r\n\r","votes":127386.1},{"text":"\r\n    \r\n    # Get the digits\r\n    digits1 = list(map(int, list(str(n1))))\r\n    digits2 = list(map(int, list(str(n2))))\r\n    \r\n    # Get the sum of the differences\r\n    sum_differences = 0\r\n    for i in range(len(digits1)):\r\n        sum_differences += abs(digits1[i] - digits2[i])\r\n    \r\n    return sum_differences\r\n\r\n\r","votes":146118.452},{"text":"\r\n    d = 0\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    l1 = len(n1)\r\n    l2 = len(n2)\r\n    if l1 != l2:\r\n        return -1\r\n    for i in range(l1):\r\n        d += abs(int(n1[i]) - int(n2[i]))\r\n    return d\r\n\r\n\r","votes":156127.072},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    return sum([abs(int(x) - int(y)) for x, y in zip(n1, n2)])\r\n\r\n\r","votes":159128.88},{"text":"\r\n    \r\n    # Get the absolute distance between the two numbers\r\n    difference = abs(n1 - n2)\r\n    \r\n    # Get the sum of all the digits in the difference\r\n    sum_of_digits = sum(map(int, str(difference)))\r\n    \r\n    # Return the result\r\n    return sum_of_digits\r\n\r\n\r\n# If this script is being run from the command line, run the function\r\nif __name__ == \"__main__\":\r\n    \r\n    # Get the two numbers\r\n    n1 = int(input(\"Enter first number: \"))\r\n    n2 = int(input(\"Enter second number: \"))\r\n    \r\n    # Get the result\r\n    result = digit_distance_nums(n1, n2)\r\n    \r\n    # Print the result\r\n    print(f\"The digit distance between the two numbers is {result}.\")\r\n","votes":184744.0},{"text":"\r\n    \r\n    n1, n2 = abs(n1), abs(n2)\r\n    \r\n    # find the length of the smallest number\r\n    shorter_length = min(len(str(n1)), len(str(n2)))\r\n    \r\n    # find the length of the largest number\r\n    longer_length = max(len(str(n1)), len(str(n2)))\r\n    \r\n    # find the difference of the lengths\r\n    difference = longer_length - shorter_length\r\n    \r\n    # find the distance between the two numbers\r\n    distance = abs(n1 - n2)\r\n    \r\n    return difference + distance\r\n    \r\n    \r\n# test case\r\nprint digit_distance_nums(123, 123)\r\nprint digit_distance_nums(123, 23)\r\nprint digit_distance_nums(123, 3)\r\nprint digit_distance_nums(123, 12)\r\nprint digit_distance_nums(123, 1)\r\nprint digit_distance_nums(123, 2)\r\nprint digit_distance_nums(123, 321)\r\nprint digit_distance_nums(123, 1234)\r\nprint digit_distance_nums(123, 1)\r\nprint digit_distance_nums(123, 123456)\r\nprint digit_distance_nums(123, 123456789)\r\nprint digit_distance_nums(123, 123457)\r\nprint digit_distance_nums(123, 1234567)\r\nprint digit_distance_nums(123, 12345678)\r\n\r\n\r\n# Answer\r\n\r","votes":null},{"text":"\r\n    d1 = 0\r\n    d2 = 0\r\n    for i in str(n1):\r\n        d1 += 1\r\n    for j in str(n2):\r\n        d2 += 1\r\n    return d1 - d2\r\n\r\n\r","votes":null},{"text":"\r\n    # convert to string\r\n    s1 = str(n1)\r\n    s2 = str(n2)\r\n\r\n    # convert back to int\r\n    if s1.isdigit() and s2.isdigit():\r\n        # get the difference between the two values\r\n        diff = len(s1) - len(s2)\r\n        if diff > 0:\r\n            # add a zero to the second number\r\n            for i in range(diff):\r\n                s2 = \"0\" + s2\r\n        elif diff < 0:\r\n            # add a zero to the first number\r\n            for i in range(abs(diff)):\r\n                s1 = \"0\" + s1\r\n    else:\r\n        raise ValueError(\"Argument is not an integer\")\r\n\r\n    # compute the difference between the two strings\r\n    diff = 0\r\n    for i, j in zip(s1, s2):\r\n        diff += (int(i) - int(j))\r\n\r\n    return diff\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n1 = 12345\r\n    n2 = 123456\r\n    print(\"Digit distance between {0} and {1} is {2}\".format(n1, n2, digit_distance_nums(n1, n2)))\r\n\r\n    # test the function\r\n    # n1 = 12345\r\n    # n2 = 123456\r\n    # print(\"Digit distance between {0} and {1} is {2}\".format(n1, n2, digit_distance_nums(n1, n2)))\r\n    #\r\n    # # test the function\r\n    # n1 = 12345\r\n    # n2 = 123456\r\n    # print(\"Digit distance between {0} and {1} is {2}\".format(n1, n2, digit_distance_num","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    return abs(n1 - n2)\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n1 = int(input())\r\n\r\n    n2 = int(input())\r\n\r\n    result = digit_distance_nums(n1, n2)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n## Sample Input\r\n## 123\r\n## 456\r\n## Sample Output\r\n## 3\r\n## Explanation\r\n## \r\n## The digit distance between 123 and 456 is 3.\r\n## \r\n## 123\r\n## 456\r\n## \r\n## Sample Output\r\n## 3\r\n## Explanation\r\n## \r\n## The digit distance between 123 and 456 is 3.\r\n## \r\n## 123\r\n## 456\r\n## \r\n## Sample Output\r\n## 3\r\n## Explanation\r\n## \r\n## The digit distance between 123 and 456 is 3.\r\n## \r\n## 123\r\n## 456\r\n## \r\n## Sample Output\r\n## 3\r\n## Explanation\r\n## \r\n## The digit distance between 123 and 456 is 3.\r\n## \r\n## 123\r\n## 456\r\n## \r\n## Sample Output\r\n## 3\r\n## Explanation\r\n## \r\n## The digit distance between 123 and 456 is 3.\r\n## \r\n## 123\r\n## 456\r\n## \r\n## Sample Output\r\n## 3\r\n## Explanation\r\n## \r\n## The digit distance between 123 and 456 is 3.\r\n## ","votes":null},{"text":"\r\n    n1 = int(n1)\r\n    n2 = int(n2)\r\n    if n1 > n2:\r\n        n1, n2 = n2, n1\r\n    distance = 0\r\n    while (n1 != 0):\r\n        distance += (n1 % 10 != n2 % 10)\r\n        n1 = n1 \/\/ 10\r\n        n2 = n2 \/\/ 10\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    num_diff = 0\r\n    if n1 > n2:\r\n        n1, n2 = n2, n1\r\n    for i in range(len(str(n1))):\r\n        if n1 \/\/ 10 ** i != n2 \/\/ 10 ** i:\r\n            num_diff += 1\r\n    return num_diff\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 >= n2:\r\n        a = n1\r\n        b = n2\r\n    else:\r\n        a = n2\r\n        b = n1\r\n\r\n    c = 0\r\n    d = 0\r\n    for i in range(len(str(a))):\r\n        c += abs(int(str(a)[i]) - int(str(b)[i]))\r\n        d += 1\r\n\r\n    return c \/ d\r\n\r\n\r\n# print(digit_distance_nums(10, 20))\r\n# print(digit_distance_nums(100, 20))\r\n# print(digit_distance_nums(10, 200))\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(abs(ord(d1) - ord(d2)) for d1, d2 in zip(str(n1), str(n2)))\r\n\r\n\r\nif __name__ == '__main__':\r\n    n1 = input()\r\n    n2 = input()\r\n\r\n    print(digit_distance_nums(n1, n2))\r\n\r\n\"\"\"\r\nSample input\/output\r\n\r\nEnter number 1: 23\r\nEnter number 2: 32\r\n","votes":null},{"text":"\r\n    num = int(str(n1) + str(n2))\r\n    return num\r\n\r\n\r","votes":null},{"text":"\r\n    num1 = str(n1)\r\n    num2 = str(n2)\r\n    \r\n    for i in range(len(num1)):\r\n        if num1[i] != num2[i]:\r\n            return len(num1) + len(num2)\r\n    return len(num1) + len(num2)\r\n\r\n\r","votes":null},{"text":"\r\n    n1_list = list(str(n1))\r\n    n2_list = list(str(n2))\r\n    print(n1_list)\r\n    print(n2_list)\r\n    if len(n1_list) == len(n2_list):\r\n        for i in range(len(n1_list)):\r\n            print(abs(n1_list[i] - n2_list[i]))\r\n            if abs(n1_list[i] - n2_list[i]) > 0:\r\n                return abs(n1_list[i] - n2_list[i])\r\n    else:\r\n        return 0\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 == n2:\r\n        return 0\r\n    else:\r\n        num = abs(n1 - n2)\r\n        if num == 0:\r\n            return 0\r\n        else:\r\n            num_string = str(num)\r\n            num_length = len(num_string)\r\n            if num_length == 1:\r\n                return num\r\n            else:\r\n                if num_string[0] == '0':\r\n                    return num\r\n                else:\r\n                    num_string_list = list(num_string)\r\n                    num_string_list_length = len(num_string_list)\r\n                    if num_string_list_length == 2:\r\n                        if num_string_list[0] == '1':\r\n                            return 1\r\n                        else:\r\n                            return 1\r\n                    else:\r\n                        if num_string_list[0] == '1':\r\n                            return num_string_list_length\r\n                        else:\r\n                            return num_string_list_length - 1\r\n\r\n\r","votes":null},{"text":"\r\n    diff = 0\r\n    while n1 > 0 or n2 > 0:\r\n        n1, n2 = divmod(n1, 10), divmod(n2, 10)\r\n        diff += abs(n1[1] - n2[1])\r\n    return diff\r\n\r\n\r","votes":null},{"text":"\r\n    n1_list = list(str(n1))\r\n    n2_list = list(str(n2))\r\n    \r\n    diff_list = [abs(i-j) for i, j in zip(n1_list, n2_list)]\r\n    \r\n    return max(diff_list)\r\n    \r\n# print(digit_distance_nums(123, 456))\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    while n1 > 0:\r\n        n1 = n1\/\/10\r\n        count += 1\r\n    while n2 > 0:\r\n        n2 = n2\/\/10\r\n        count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    if len(n1_str) != len(n2_str):\r\n        return -1\r\n    else:\r\n        dist = 0\r\n        for i in range(len(n1_str)):\r\n            if n1_str[i] != n2_str[i]:\r\n                dist += 1\r\n        return dist\r\n\r\n\r","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    n1 = n1.replace('0', 'a')\r\n    n2 = n2.replace('0', 'a')\r\n    n1 = [int(i) for i in n1]\r\n    n2 = [int(i) for i in n2]\r\n    \r\n    distance = 0\r\n    for i in range(len(n1)):\r\n        if n1[i] != n2[i]:\r\n            distance += 1\r\n    return distance\r\n    \r\n    \r\n    \r\nprint(digit_distance_nums(2536, 3625))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return int(sum([abs(ord(str(n1))[i] - ord(str(n2))[i]) for i in range(len(str(n1)))])\r\n                )\r\n\r\n\r","votes":null},{"text":"\r\n    # n2, n1 = n1, n2\r\n    if n1 > n2:\r\n        n1, n2 = n2, n1\r\n    \r\n    str_n1 = str(n1)\r\n    str_n2 = str(n2)\r\n    \r\n    i = 0\r\n    j = 0\r\n    \r\n    d_arr = []\r\n    \r\n    while i < len(str_n1) and j < len(str_n2):\r\n        if str_n1[i] == str_n2[j]:\r\n            d_arr.append(0)\r\n            i += 1\r\n            j += 1\r\n        else:\r\n            d_arr.append(1)\r\n            if str_n1[i] in str_n2:\r\n                i += 1\r\n            elif str_n2[j] in str_n1:\r\n                j += 1\r\n            else:\r\n                i += 1\r\n                j += 1\r\n    \r\n    return sum(d_arr)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(abs(n1-n2) for n1,n2 in zip(str(n1), str(n2)))\r\n\r","votes":null},{"text":"\r\n    d1 = 0\r\n    d2 = 0\r\n    while n1 > 0:\r\n        d1 = d1 * 10 + n1 % 10\r\n        n1 = n1 \/\/ 10\r\n    while n2 > 0:\r\n        d2 = d2 * 10 + n2 % 10\r\n        n2 = n2 \/\/ 10\r\n    return abs(d1 - d2)\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str(n1)\r\n    str2 = str(n2)\r\n    return len(str(abs(int(str1) - int(str2))))\r\n\r\n\r\nn1 = int(input(\"Enter the first number: \"))\r\nn2 = int(input(\"Enter the second number: \"))\r\nprint(\"Digit distance between {} and {} is {}\".format(n1, n2, digit_distance_nums(n1, n2)))\r\n\r\n\r","votes":null},{"text":"\r\n    return sum([abs(i1-i2) for i1, i2 in zip(str(n1), str(n2))])\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    if n1 == n2:\r\n        return 0\r\n    n = max(n1, n2)\r\n    s = str(n)\r\n    if n1 == n2:\r\n        return 0\r\n    d = 0\r\n    for i in range(len(s)):\r\n        if n1 < n2:\r\n            if s[i] != s[i + 1]:\r\n                d += 1\r\n        else:\r\n            if s[i] != s[i - 1]:\r\n                d += 1\r\n    return d\r\n\r\n\r","votes":null},{"text":"\r\n    # A digit distance is the absolute difference between the numbers of digits in two numbers.\r\n    # For example, 13 and 123 have 2 digits distance, because 13 has 2 digits and 123 has 3 digits.\r\n\r\n    # The digits distance between 13 and 123 is 2.\r\n    # The digits distance between 100 and 123 is 1.\r\n\r\n    # Your task is to write a python function to find the digit distance between two integers.\r\n\r\n    # Write your code here\r\n    if n1 < n2:\r\n        n1, n2 = n2, n1\r\n    return len(str(n1)) - len(str(n2))\r\n\r\n\r","votes":null},{"text":"\r\n    n1_l = len(str(n1))\r\n    n2_l = len(str(n2))\r\n    n1_s = str(n1)\r\n    n2_s = str(n2)\r\n    distance = 0\r\n    for i in range(n1_l):\r\n        for j in range(n2_l):\r\n            if n1_s[i] == n2_s[j]:\r\n                distance += 1\r\n    return distance\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(digit_distance_nums(12345, 3245))\r\n    print(digit_distance_nums(12345, 32345))\r\n    print(digit_distance_nums(12345, 12345))\r\n    print(digit_distance_nums(12345, 123))\r\n    print(digit_distance_nums(12345, 1234))\r\n    print(digit_distance_nums(12345, 123456))\r\n    print(digit_distance_nums(12345, 1234567))\r\n    print(digit_distance_nums(12345, 12345678))\r\n    print(digit_distance_nums(12345, 123456789))\r\n    print(digit_distance_nums(12345, 1234567890))\r\n    print(digit_distance_nums(12345, 12345678901))\r\n    print(digit_distance_nums(12345, 123456789012))\r\n    print(digit_distance_nums(12345, 1","votes":null},{"text":"\r\n\r\n    if n1 < 0 or n2 < 0:\r\n        raise ValueError(\"The input must be a positive integer\")\r\n\r\n    digits1 = list(str(n1))\r\n    digits2 = list(str(n2))\r\n\r\n    if len(digits1) != len(digits2):\r\n        raise ValueError(\"The input integers must be the same length\")\r\n\r\n    distance = 0\r\n    for i in range(len(digits1)):\r\n        if int(digits1[i]) != int(digits2[i]):\r\n            distance += 1\r\n\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if n1 < 0 or n2 < 0:\r\n        raise ValueError(\"Invalid input: Negative numbers not allowed\")\r\n\r\n    return abs(n1 - n2)\r\n\r\n\r","votes":null},{"text":"\r\n    return min(sum(map(abs, map(int, str(n1)))), sum(map(abs, map(int, str(n2)))))\r\n\r\n\r","votes":null},{"text":"\r\n    # return the distance between the numbers\r\n    return abs(n1 - n2)\r\n\r\n\r","votes":null},{"text":"\r\n    # n1, n2 are integers\r\n    result = int(str(abs(n1 - n2))[::-1])\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 < n2:\r\n        return n2 - n1\r\n    return n1 - n2\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 < n2:\r\n        return digit_distance_nums(n2, n1)\r\n    if n2 == 0:\r\n        return n1\r\n    return digit_distance_nums(n1 \/\/ 10, n2 \/\/ 10) + 1\r\n\r\n\r","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    l1 = len(n1)\r\n    l2 = len(n2)\r\n    if l1 > l2:\r\n        l = l1\r\n    else:\r\n        l = l2\r\n    d = [0] * (l + 1)\r\n    for i in range(l1):\r\n        d[i] = d[i] + n1[i]\r\n    for i in range(l2):\r\n        d[i] = d[i] - n2[i]\r\n    return sum(d)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # first, check if the first number is less than or equal to the second number\r\n    # if not, swap the two numbers\r\n    if n1 > n2:\r\n        n1, n2 = n2, n1\r\n    \r\n    # initialize the distance count to zero\r\n    digit_distance = 0\r\n    \r\n    # loop through the digits of the first number and find the distance between each digit and the digit in the second number\r\n    for i in range(len(str(n1))):\r\n        digit_distance += abs(int(str(n1)[i]) - int(str(n2)[i % len(str(n2))]))\r\n        \r\n    # return the distance count\r\n    return digit_distance\r\n    \r\n    \r\n# set up test cases\r\nprint(digit_distance_nums(130, 140))\r\nprint(digit_distance_nums(130, 1400))\r\nprint(digit_distance_nums(130, 14000))\r\nprint(digit_distance_nums(130, 140000))\r\nprint(digit_distance_nums(130, 1400000))\r\nprint(digit_distance_nums(130, 14000000))\r\nprint(digit_distance_nums(130, 140000000))\r\nprint(digit_distance_nums(130, 1400000000))\r\nprint(digit_distance_nums(130, 14000000000))\r\nprint(digit_distance_nums(130, 140000000000))\r\nprint(digit_distance_nums(130, 1400000000000))\r\nprint(digit_distance_nums(","votes":null},{"text":"\r\n    res = 0\r\n    if n1 == n2:\r\n        return res\r\n    else:\r\n        n1 = str(n1)\r\n        n2 = str(n2)\r\n        for i in range(len(n1)):\r\n            if n1[i] != n2[i]:\r\n                res += 1\r\n        return res\r\n\r\n\r","votes":null},{"text":"\r\n    n1_list = list(str(n1))\r\n    n2_list = list(str(n2))\r\n    n1_list.sort()\r\n    n2_list.sort()\r\n    return sum([i for i in range(len(n1_list)) if n1_list[i] != n2_list[i]])\r\n\r\n\r","votes":null},{"text":"\r\n    num_1 = str(n1)\r\n    num_2 = str(n2)\r\n    distance = 0\r\n\r\n    for i in range(0, len(num_1)):\r\n        if num_1[i] != num_2[i]:\r\n            distance += 1\r\n\r\n    return distance\r\n\r\n\r\n# Driver Code\r\nnum1 = 123456\r\nnum2 = 123457\r\n\r\nprint(digit_distance_nums(num1, num2))\r\n\r\n# Output\r\n# 1\r\n\r\n# Explanation\r\n# 123456\r\n# 123457\r\n# 1 - 2 = 1\r\n# 2 - 2 = 0\r\n# 3 - 3 = 0\r\n# 4 - 4 = 0\r\n# 5 - 5 = 0\r\n# 6 - 7 = 1\r\n# Therefore the digit distance between 123456 and 123457 is 1\r\n\r\n# Above is the longest sequence of equal digits between two integers\r\n\r\n# Extra Credit\r\n# 1. Find the longest sequence of equal digits between all integers between 1 and num.\r\n# 2. Find the longest sequence of equal digits between all integers between 1 and num\r\n#    and the number of digits in the longest sequence.\r\n# 3. Find the longest sequence of equal digits between all integers between 1 and num\r\n#    and the number of digits in the longest sequence.\r\n# 4. Find the longest sequence of equal digits between all integers between 1 and num\r\n#    and the number of digits in the longest sequence.\r\n# 5. Find the longest sequence of equal digits between all integers between 1 and num\r\n#    and the number of digits in the longest sequence.\r\n# 6. Find the longest sequence of equal digits between all integers between 1 and num\r\n#    and the number of digits in the longest sequence.","votes":null},{"text":"\r\n    d = 0\r\n    for i in range(10):\r\n        if str(i) in str(n1) and str(i) in str(n2):\r\n            d += 1\r\n    return d\r\n\r\n\r\nif __name__ == '__main__':\r\n    n1, n2 = int(input()), int(input())\r\n    print(digit_distance_nums(n1, n2))\r\n\r\n\r\n\r\n#Reference: w3resource","votes":null},{"text":"\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    n1_len = len(n1_str)\r\n    n2_len = len(n2_str)\r\n    if n1_len > n2_len:\r\n        n2_str = n2_str.zfill(n1_len)\r\n    else:\r\n        n1_str = n1_str.zfill(n2_len)\r\n    \r\n    distance = 0\r\n    for i in range(len(n1_str)):\r\n        if n1_str[i] != n2_str[i]:\r\n            distance += 1\r\n    return distance\r\n\r\n\r\nn1 = int(input())\r\nn2 = int(input())\r\nprint(digit_distance_nums(n1, n2))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # 123456789\r\n    # 123456789\r\n    # 111222333\r\n    # 111222333\r\n    # 111112222\r\n    # 111112222\r\n    # 111111122\r\n    # 111111122\r\n    # 111111111\r\n    # 111111111\r\n    # 000000000\r\n    # 000000000\r\n    # 000000000\r\n    # 000000000\r\n    # 000000000\r\n    # 000000000\r\n    # 000000000\r\n    # 000000000\r\n    # 000000000\r\n    # 000000000\r\n    # 000000000\r\n\r\n    d = []\r\n    for i in range(0, len(n1)):\r\n        if n1[i] == n2[i]:\r\n            d.append(0)\r\n        else:\r\n            d.append(1)\r\n    print(d)\r\n    return d\r\n\r\n\r","votes":null},{"text":"\r\n    num1 = list(str(n1))\r\n    num2 = list(str(n2))\r\n    \r\n    return abs(len(num1) - len(num2)) + sum(1 for i in range(len(num1)) if num1[i] != num2[i])\r\n\r\n\r\n# Testing\r\nprint(digit_distance_nums(123, 456))\r\nprint(digit_distance_nums(1234, 5678))\r\nprint(digit_distance_nums(123456, 789))\r\n\r\n\r\n# Answer\r","votes":null},{"text":"\r\n    n1_list = [int(x) for x in list(str(n1))]\r\n    n2_list = [int(x) for x in list(str(n2))]\r\n    for num in n1_list:\r\n        if num not in n2_list:\r\n            n1_list.remove(num)\r\n    for num in n2_list:\r\n        if num not in n1_list:\r\n            n2_list.remove(num)\r\n    return len(n1_list)\r\n\r\n\r\nprint(digit_distance_nums(1122, 1221))\r\nprint(digit_distance_nums(1122, 1321))\r\nprint(digit_distance_nums(123, 123))\r\nprint(digit_distance_nums(123, 132))\r\nprint(digit_distance_nums(123, 111))\r\nprint(digit_distance_nums(123, 1111))\r\n\r\n# 1. Write a python function to find the digit distance between two integers.\r\n# int1 = 123\r\n# int2 = 1111\r\n# digit_distance = 2\r\n# 2. Write a python function to find the digit distance between two integers.\r\n# int1 = 1122\r\n# int2 = 1221\r\n# digit_distance = 2\r\n# 3. Write a python function to find the digit distance between two integers.\r\n# int1 = 1122\r\n# int2 = 1321\r\n# digit_distance = 3\r\n# 4. Write a python function to find the digit distance between two integers.\r\n# int1 = 123\r\n# int2 = 123\r\n# digit_distance = 0\r\n# 5. Write a python function to find the digit distance between two integers.\r\n# int1 = 123\r\n","votes":null},{"text":"\r\n\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n\r\n   ","votes":null},{"text":"\r\n    return sum([abs(i - j) for i, j in zip(str(n1), str(n2))])\r\n\r\n\r\nprint(digit_distance_nums(2456, 1234))\r\nprint(digit_distance_nums(23456, 1234))\r\nprint(digit_distance_nums(23456, 123456))\r\nprint(digit_distance_nums(23456, 12345))\r\nprint(digit_distance_nums(23456, 123))\r\nprint(digit_distance_nums(23456, 1234567))\r\nprint(digit_distance_nums(23456, 12345678))\r\nprint(digit_distance_nums(23456, 12345))\r\nprint(digit_distance_nums(23456, 1234))\r\nprint(digit_distance_nums(23456, 123))\r\nprint(digit_distance_nums(23456, 1234567))\r\nprint(digit_distance_nums(23456, 12345678))\r\nprint(digit_distance_nums(23456, 12345))\r\nprint(digit_distance_nums(23456, 1234))\r\nprint(digit_distance_nums(23456, 123))\r\nprint(digit_distance_nums(23456, 1234567))\r\nprint(digit_distance_nums(23456, 12345678))\r\nprint(digit_distance_nums(23456, 12345))\r\nprint(digit_distance","votes":null},{"text":"\r\n    \r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    n1_len = len(n1_str)\r\n    n2_len = len(n2_str)\r\n    \r\n    if n1_len > n2_len:\r\n        result = n1_str[n2_len:]\r\n    else:\r\n        result = n2_str[n1_len:]\r\n    \r\n    return len(result)\r\n\r\n\r","votes":null},{"text":"\r\n    n1_list = [int(digit) for digit in str(n1)]\r\n    n2_list = [int(digit) for digit in str(n2)]\r\n    n1_set = set(n1_list)\r\n    n2_set = set(n2_list)\r\n    return len(n1_set.intersection(n2_set))\r\n\r\n\r","votes":null},{"text":"\r\n    # 1. if the numbers are equal, the distance is 0.\r\n    if n1 == n2:\r\n        return 0\r\n    # 2. if the numbers are not equal, the distance is 1.\r\n    if n1 != n2:\r\n        return 1\r\n    # 3. get the length of the larger number.\r\n    length_n1 = len(str(n1))\r\n    length_n2 = len(str(n2))\r\n    # 4. get the length of the shorter number.\r\n    length_s = min(length_n1, length_n2)\r\n    # 5. get the length of the larger number.\r\n    length_l = max(length_n1, length_n2)\r\n    # 6. find the length of the shorter number.\r\n    num_s = str(n1)[-length_s:]\r\n    num_l = str(n2)[:length_l]\r\n    # 7. return the distance between the two numbers.\r\n    return len(num_l) - len(num_s)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(digit_distance_nums(123, 123))  # 0\r\n    print(digit_distance_nums(123, 1234))  # 1\r\n    print(digit_distance_nums(123, 12345))  # 2\r\n    print(digit_distance_nums(12345, 123))  # 2\r\n    print(digit_distance_nums(12345, 1234))  # 1\r\n    print(digit_distance_nums(12345, 12345))  # 0\r\n    print(digit_distance_nums(12345, 123456))  # 1\r\n    print(digit_distance_nums(123","votes":null},{"text":"\r\n    if n1 <= 0 or n2 <= 0:\r\n        raise ValueError(\"The number must be greater than 0\")\r\n    else:\r\n        return sum([abs(int(digit) - int(n2)) for digit in list(str(n1))])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(digit_distance_nums(12345, 54321))\r\n    print(digit_distance_nums(12345, 12345))\r\n    print(digit_distance_nums(12345, 12333))\r\n    print(digit_distance_nums(12345, 123))\r\n    print(digit_distance_nums(12345, 12))\r\n    print(digit_distance_nums(12345, 1))\r\n    print(digit_distance_nums(12345, 0))\r\n    print(digit_distance_nums(12345, -1))\r\n    print(digit_distance_nums(12345, -12))\r\n    print(digit_distance_nums(12345, -123))\r\n    print(digit_distance_nums(12345, -1234))\r\n    print(digit_distance_nums(12345, -12345))\r\n    print(digit_distance_nums(12345, -123456))\r\n    print(digit_distance_nums(12345, -1234567))\r\n    print(digit_distance_nums(12345, -12345678))\r\n    print(digit_distance_nums(12345, -123456789))\r\n    print(digit_distance_nu","votes":null},{"text":"\r\n    if n1 == n2:\r\n        return 0\r\n    min_num = min(n1, n2)\r\n    max_num = max(n1, n2)\r\n    return digit_distance(min_num, max_num)\r\n\r\n\r","votes":null},{"text":"\r\n    return abs(n1 - n2)\r\n\r\n\r","votes":null},{"text":"\r\n    return abs(len(str(n1)) - len(str(n2)))\r\n\r\n\r","votes":null},{"text":"\r\n    return (abs(n1 - n2) + 1) \/ 2\r\n\r\n\r","votes":null},{"text":"\r\n    if n1 == n2:\r\n        return 0\r\n    n1_str = str(n1)\r\n    n2_str = str(n2)\r\n    diffs = 0\r\n    for i in range(len(n1_str)):\r\n        if n1_str[i] != n2_str[i]:\r\n            diffs += 1\r\n    return diffs\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(digit_distance_nums(1234, 4321))\r\n    print(digit_distance_nums(1234, 1234))\r\n    print(digit_distance_nums(1234, 12))\r\n    print(digit_distance_nums(1234, 123))\r\n    print(digit_distance_nums(1234, 12345))\r\n    print(digit_distance_nums(1234, 12346))\r\n    print(digit_distance_nums(1234, 1235))\r\n    print(digit_distance_nums(1234, 1236))\r\n    print(digit_distance_nums(1234","votes":null},{"text":"\r\n    num1 = int(n1)\r\n    num2 = int(n2)\r\n    \r\n    if num1 == num2:\r\n        return 0\r\n    \r\n    count = 0\r\n    while num1 != num2:\r\n        if num1 > num2:\r\n            num1 -= 10\r\n        else:\r\n            num2 -= 10\r\n        count += 1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    \"\"\"Return 0 if the digit distance is 0.\"\"\"\r\n    # Your code goes here\r\n    num1 = list(map(int, str(n1)))\r\n    num2 = list(map(int, str(n2)))\r\n    dist = 0\r\n    for i in range(len(num1)):\r\n        for j in range(len(num2)):\r\n            if num1[i] != num2[j]:\r\n                dist += 1\r\n                break\r\n\r\n    return dist\r\n\r\n\r","votes":null},{"text":"\r\n    l1, l2 = [], []\r\n    l1 = list(str(n1))\r\n    l2 = list(str(n2))\r\n    l1.sort()\r\n    l2.sort()\r\n    d = 0\r\n    for i in range(len(l1)):\r\n        if l1[i] != l2[i]:\r\n            d += 1\r\n    return d\r\n\r\n\r","votes":null},{"text":"\r\n    n1 = str(n1)\r\n    n2 = str(n2)\r\n    n1_len = len(n1)\r\n    n2_len = len(n2)\r\n    if n1_len > n2_len:\r\n        n2 = '0'* (n1_len-n2_len) + n2\r\n    elif n2_len > n1_len:\r\n        n1 = '0'* (n2_len-n1_len) + n1\r\n    distance = 0\r\n    for i in range(n1_len):\r\n        if n1[i] != n2[i]:\r\n            distance += 1\r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if n1 < n2:\r\n        min_num = n1\r\n        max_num = n2\r\n    else:\r\n        min_num = n2\r\n        max_num = n1\r\n\r\n    count = 0\r\n    while min_num > 0:\r\n        n1 = min_num\r\n        min_num = max_num % 10\r\n        max_num = n1\r\n        count += 1\r\n\r\n    return count\r\n\r\n\r\nn1 = 12345\r\nn2 = 54321\r\n\r\nprint(digit_distance_nums(n1, n2))\r\n\r\nn1 = 100000\r\nn2 = 100010\r\n\r\nprint(digit_distance_nums(n1, n2))\r\n\r\nn1 = 12345\r\nn2 = 54321\r\n\r\nprint(digit_distance_nums(n1, n2))\r\n\r\nn1 = 12345\r\nn2 = 54321\r\n\r\nprint(digit_distance_nums(n1, n2))\r\n\r\nn1 = 12345\r\nn2 = 54321\r\n\r\nprint(digit_distance_nums(n1, n2))\r\n\r\nn1 = 12345\r\nn2 = 54321\r\n\r\nprint(digit_distance_nums(n1, n2))\r\n\r\nn1 = 12345\r\nn2 = 54321\r\n\r\nprint(digit_distance_nums(n1, n2))\r\n\r\nn1 = 12345\r\nn2 = 54321\r\n\r\nprint(digit_distance_nums(n1, n2))\r\n\r\nn1 = 123","votes":null},{"text":"\r\n    digit_distance = 0\r\n    n = n1\r\n    while(n != 0):\r\n        digit_distance += 1\r\n        n = n \/\/ 10\r\n    n = n2\r\n    while(n != 0):\r\n        digit_distance += 1\r\n        n = n \/\/ 10\r\n    return digit_distance\r\n\r\n\r","votes":null},{"text":"\r\n    str1 = str(n1)\r\n    str2 = str(n2)\r\n    if len(str1) != len(str2):\r\n        return -1\r\n    count = 0\r\n    for i in range(len(str1)):\r\n        if str1[i] != str2[i]:\r\n            count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    # n1 and n2 are the two integers\r\n    # Return the digit distance\r\n    # 0 <= n1, n2 <= 1000\r\n\r\n    # 1. check if n1 and n2 are equal\r\n    if n1 == n2:\r\n        return 0\r\n\r\n    # 2. initialize variables\r\n    count = 0\r\n\r\n    # 3. find the distance\r\n    while n1 != n2:\r\n        if n1 > n2:\r\n            n1 -= 1\r\n            count += 1\r\n        else:\r\n            n2 -= 1\r\n            count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    n1_arr = list(str(n1))\r\n    n2_arr = list(str(n2))\r\n\r\n    if len(n1_arr) > len(n2_arr):\r\n        n2_arr = len(n1_arr) * n2_arr\r\n    else:\r\n        n1_arr = len(n2_arr) * n1_arr\r\n\r\n    return sum(abs(x - y) for x, y in zip(n1_arr, n2_arr))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # if the numbers are equal, return 0\r\n    if n1 == n2:\r\n        return 0\r\n    \r\n    # initialize variables\r\n    distance = 0\r\n    num1 = n1\r\n    num2 = n2\r\n    \r\n    # if the numbers are greater than 0\r\n    # convert to strings and find the length of the strings\r\n    # if the strings are not equal, return the difference between the lengths\r\n    if len(str(num1)) > len(str(num2)):\r\n        if str(num1) != str(num2):\r\n            return len(str(num1)) - len(str(num2))\r\n    else:\r\n        if str(num1) != str(num2):\r\n            return len(str(num2)) - len(str(num1))\r\n        \r\n    # iterate through the numbers, if they are equal, move on to the next digit\r\n    # otherwise, add 1 to the distance and move on to the next digit\r\n    for i in range(len(str(num1))):\r\n        if str(num1)[i] != str(num2)[i]:\r\n            distance += 1\r\n        \r\n    return distance\r\n\r\n\r","votes":null},{"text":"\r\n    n1_list = list(str(n1))\r\n    n2_list = list(str(n2))\r\n    if len(n1_list) < len(n2_list):\r\n        n1_list, n2_list = n2_list, n1_list\r\n    result = 0\r\n    for i in range(len(n1_list)):\r\n        if n1_list[i] != n2_list[i]:\r\n            result += 1\r\n    return result\r\n\r\n\r\ntest_cases = int(input().strip())\r\nfor t in range(test_cases):\r\n    n1, n2 = [int(x) for x in input().strip().split()]\r\n    print(digit_distance_nums(n1, n2))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Digit distance is the number of digits in the difference of the two numbers.\r\n    # For example, 123 - 456 = 323.\r\n    # The digit distance of 123 and 456 is 3.\r\n\r\n    # The function should return an integer.\r\n    # If the distance is less than 0, return 0.\r\n\r\n    # Examples:\r\n    # digit_distance_nums(123, 456) \u279e 3\r\n\r\n    # digit_distance_nums(123, 12) \u279e 1\r\n\r\n    # digit_distance_nums(123, 123) \u279e 0\r\n\r\n    # digit_distance_nums(123, 1234) \u279e 4\r\n\r\n    # digit_distance_nums(123, -456) \u279e 0\r\n\r\n    # digit_distance_nums(123, 12345) \u279e 5\r\n\r\n    # digit_distance_nums(123, 0) \u279e 0\r\n\r\n    # digit_distance_nums(123, 12300) \u279e 4\r\n\r\n    # digit_distance_nums(123, 1200) \u279e 2\r\n\r\n    # digit_distance_nums(123, -12) \u279e 1\r\n\r\n    # digit_distance_nums(123, -123) \u279e 0\r\n\r\n    # digit_distance_nums(123, -124) \u279e 1\r\n\r\n    # digit_distance_nums(123, -1234) \u279e 4\r\n\r\n    # digit_distance_nums(1","votes":null},{"text":"\r\n    n1_list = list(str(n1))\r\n    n2_list = list(str(n2))\r\n\r\n    if len(n1_list) != len(n2_list):\r\n        return -1\r\n\r\n    distance = 0\r\n    for i in range(len(n1_list)):\r\n        if n1_list[i] != n2_list[i]:\r\n            distance += 1\r\n    return distance\r\n\r\n\r\nprint(digit_distance_nums(123456789, 234567890))\r\n\r\n\r","votes":null},{"text":"\r\n    # check if n1 and n2 are valid integers\r\n    if not isinstance(n1, int) or not isinstance(n2, int):\r\n        raise TypeError(\"n1 and n2 should be integers\")\r\n    # check if n1 and n2 are valid digits\r\n    if n1 < 0 or n2 < 0:\r\n        raise ValueError(\"n1 and n2 should be positive integers\")\r\n    # check if n1 and n2 are equal\r\n    if n1 == n2:\r\n        return 0\r\n    # find the length of n1 and n2\r\n    length1 = len(str(n1))\r\n    length2 = len(str(n2))\r\n    # initialize the distance\r\n    distance = 0\r\n    # find the lower length\r\n    length = length1 if length1 < length2 else length2\r\n    # find the difference between the two numbers\r\n    difference = n1 - n2\r\n    # while the difference is positive\r\n    while difference != 0:\r\n        # check if the difference is negative\r\n        if difference < 0:\r\n            # increase the distance and decrement the difference\r\n            distance += 1\r\n            difference += 10\r\n        # check if the difference is positive\r\n        else:\r\n            # increase the distance and decrement the difference\r\n            distance += 1\r\n            difference -= 10\r\n    # return the distance\r\n    return distance\r\n\r\n\r\n# test cases\r\nprint(digit_distance_nums(36, 24))  # 1\r\nprint(digit_distance_nums(12, 23))  # 3\r\nprint(digit_distance_nums(58, 12))  # 4\r\nprint(digit_distance_nums(36, 36))  # 0\r\nprint(digit_distance_nums(111231, 123111))  # 3\r\nprint(digit_distance","votes":null},{"text":"\r\n    if n1 > n2:\r\n        n1, n2 = n2, n1\r\n    return abs(len(str(n1)) - len(str(n2)))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    n1, n2 = str(n1), str(n2)\r\n    d1, d2 = len(n1), len(n2)\r\n    if d1 > d2:\r\n        return d1 - d2\r\n    elif d1 < d2:\r\n        return d2 - d1\r\n    else:\r\n        for i in range(d1):\r\n            if int(n1[i]) < int(n2[i]):\r\n                return d1 - i\r\n            elif int(n1[i]) > int(n2[i]):\r\n                return d1 - i\r\n\r\n\r","votes":null},{"text":"\r\n    d1 = get_digit(n1)\r\n    d2 = get_digit(n2)\r\n    return abs(d1 - d2)\r\n\r\n\r","votes":null},{"text":"\r\n    num1 = str(n1)\r\n    num2 = str(n2)\r\n    if len(num1) == len(num2):\r\n        return max([abs(int(num1[i]) - int(num2[i])) for i in range(len(num1))])\r\n    else:\r\n        return max([abs(int(num1[i]) - int(num2[i])) for i in range(min(len(num1), len(num2)))])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Get the numbers as lists\r\n    num1 = list(str(n1))\r\n    num2 = list(str(n2))\r\n    \r\n    # Initialize the counter\r\n    counter = 0\r\n    \r\n    # Loop through","votes":null},{"text":"\r\n    # We will use lists to store the digits of each integer.\r\n    # Then we will compare the two lists to find the digit distance.\r\n    l1 = []\r\n    l2 = []\r\n    \r\n    while n1 > 0:\r\n        l1.append(n1 % 10)\r\n        n1 \/\/= 10\r\n    while n2 > 0:\r\n        l2.append(n2 % 10)\r\n        n2 \/\/= 10\r\n    \r\n    # Now we compare the two lists to find the digit distance.\r\n    # We will use the max() function to find the maximum.\r\n    # The max() function will return the highest number in a list.\r\n    return max(len(l1), len(l2)) - min(len(l1), len(l2))\r\n\r\n\r\n# Testing the program\r\nprint(digit_distance_nums(3421, 3456))\r\nprint(digit_distance_nums(3456, 3421))\r\nprint(digit_distance_nums(0, 0))\r\nprint(digit_distance_nums(3456, 342))\r\nprint(digit_distance_nums(1234, 5678))\r\nprint(digit_distance_nums(987654321, 123456789))\r\nprint(digit_distance_nums(12345678, 123456789))\r\nprint(digit_distance_nums(123456789, 12345678))\r\nprint(digit_distance_nums(123456","votes":null},{"text":"\r\n    num_1 = str(n1)\r\n    num_2 = str(n2)\r\n    n1_len = len(num_1)\r\n    n2_len = len(num_2)\r\n    if n1_len < n2_len:\r\n        return digit_distance_nums(n2, n1)\r\n    elif n2_len == n1_len:\r\n        count = 0\r\n        for i in range(n1_len):\r\n            if num_1[i] != num_2[i]:\r\n                count += 1\r\n        return count\r\n    else:\r\n        count = 0\r\n        for i in range(n2_len):\r\n            if num_1[i] != num_2[i]:\r\n                count += 1\r\n        return count + n1_len - n2_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    n1, n2 = 123, 124\r\n    print(digit_distance_nums(n1, n2))\r\n    n1, n2 = 123, 1245\r\n    print(digit_distance_nums(n1, n2))\r\n    n1, n2 = 1234, 123\r\n    print(digit_distance_nums(n1, n2))\r\n    n1, n2 = 1234, 1234\r\n    print(digit_distance_nums(n1, n2))\r\n    n1, n2 = 12345, 12346\r\n    print(digit_distance_nums(n1, n2))\r\n    n1, n2 = 12345, 56789\r\n    print(digit_distance_nums(n1, n2))\r\n    n1, n2 = 12345, 567890\r\n    print(digit","votes":null},{"text":"\r\n    num1 = list(str(n1))\r\n    num2 = list(str(n2))\r\n    num1.sort()\r\n    num2.sort()\r\n    num1 = ''.join(num1)\r\n    num2 = ''.join(num2)\r\n    return int(num1), int(num2)\r\n\r\n\r","votes":null},{"text":"\r\n    # n1 = int(input())\r\n    # n2 = int(input())\r\n    # print(digit_distance_nums(n1, n2))\r\n    if n1 == n2:\r\n        return 0\r\n    else:\r\n        if n1 < n2:\r\n            return digit_distance_nums(n1, n2 - 1)\r\n        else:\r\n            return digit_distance_nums(n1 - 1, n2)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n1 = int(input())\r\n    n2 = int(input())\r\n    print(digit_distance_nums(n1, n2))\r\n    # digit_distance_nums(n1, n2)\r\n\r\n\r\n#","votes":null},{"text":"\r\n    s1 = str(n1)\r\n    s2 = str(n2)\r\n    d = 0\r\n    for i in range(len(s1)):\r\n        if s1[i] != s2[i]:\r\n            d += 1\r\n    return d\r\n\r\n\r","votes":null},{"text":"\r\n    # digit_distance(121, 123) => 2\r\n    # digit_distance(123, 121) => 2\r\n    # digit_distance(1234, 1223) => 1\r\n    # digit_distance(1, 100) => 100\r\n    # digit_distance(100, 1) => 100\r\n    # digit_distance(1, 1) => 0\r\n    # digit_distance(1000, 1001) => 1\r\n    # digit_distance(1234, 1223) => 1\r\n    # digit_distance(120, 121) => 1\r\n    # digit_distance(123, 124) => 1\r\n    # digit_distance(1200, 121) => 2\r\n    # digit_distance(1201, 121) => 2\r\n    # digit_distance(1200, 1201) => 1\r\n    # digit_distance(1200, 1210) => 1\r\n    # digit_distance(10000, 1) => 9999\r\n    # digit_distance(10001, 1) => 9999\r\n    # digit_distance(10000, 10001) => 1\r\n    # digit_distance(10000, 10000) => 0\r\n    # digit_distance(10001, 10000) => 1\r\n    # digit_distance(10000, 1000000) => 999999\r\n    # digit_distance(10000, 100000) => 9999\r\n    # digit_distance(10000","votes":null},{"text":"\r\n    \r\n    if n1 > n2:\r\n        temp = n1\r\n        n1 = n2\r\n        n2 = temp\r\n    \r\n    digit_distance = 0\r\n    while True:\r\n        n1, n2 = n1%10, n2%10\r\n        if n1 == n2:\r\n            break\r\n        digit_distance += 1\r\n        \r\n    return digit_distance\r\n\r\n# n1 = 1234\r\n# n2 = 5678\r\n\r\n# print(digit_distance_nums(n1, n2))\r\n\r\n\r","votes":null},{"text":"\r\n    digits_n1 = get_digit_list(n1)\r\n    digits_n2 = get_digit_list(n2)\r\n    return sum([abs(i-j) for i,j in zip(digits_n1, digits_n2)])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Get digit distance between the two integers\r\n    if not (1 <= n1 and n1 <= 1000000 and 1 <= n2 and n2 <= 1000000):\r\n        raise Exception(\"Invalid input: n1 and n2 must be between 1 and 1000000\")\r\n    if n1 == n2:\r\n        return 0\r\n    elif n1 < n2:\r\n        return digit_distance(n1, n2)\r\n    else:\r\n        return digit_distance(n2, n1)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(str(n1)) != len(str(n2)):\r\n        return -1\r\n    else:\r\n        count = 0\r\n        for i in range(len(str(n1))):\r\n            if str(n1)[i] != str(n2)[i]:\r\n                count += 1\r\n        return count\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    \r\n    # initialize variables\r\n    num1 = str(n1)\r\n    num2 = str(n2)\r\n    \r\n    # if the numbers are the same, return 0\r\n    if num1 == num2:\r\n        return 0\r\n    \r\n    # otherwise, return the distance between the two\r\n    else:\r\n        \r\n        # get the number of digits in each\r\n        num1_len = len(num1)\r\n        num2_len = len(num2)\r\n        \r\n        # if the numbers have different lengths, return the distance between their lengths\r\n        if num1_len != num2_len:\r\n            if num1_len > num2_len:\r\n                return num1_len - num2_len\r\n            else:\r\n                return num2_len - num1_len\r\n        \r\n        # otherwise, find the distance between the two\r\n        else:\r\n            \r\n            # initialize variables\r\n            distance = 0\r\n            \r\n            # iterate over the two numbers\r\n            for i in range(len(num1)):\r\n                \r\n                # check if the first and second digits are the same\r\n                if num1[i] != num2[i]:\r\n                    distance += 1\r\n                    \r\n            \r\n            # return the distance\r\n            return distance\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        ","votes":null},{"text":"\r\n    \r\n    n1_str = list(map(int, str(n1)))\r\n    n2_str = list(map(int, str(n2)))\r\n    \r\n    n1_str = sorted(n1_str)\r\n    n2_str = sorted(n2_str)\r\n    \r\n    return (n1_str[0] - n2_str[0]) + (n1_str[-1] - n2_str[-1])\r\n    \r\nprint(digit_distance_nums(12345, 45123))\r\n\r\n\r\n# digit_distance_nums(12345, 45123) --> 2\r\n# digit_distance_nums(12345, 54321) --> 1\r\n# digit_distance_nums(12345, 12345) --> 0\r\n# digit_distance_nums(12345, 12344) --> 1\r\n# digit_distance_nums(12345, 12354) --> 2\r\n\r\n\r\n# digit_distance_nums(12345, 45123) --> 2\r\n# digit_distance_nums(12345, 54321) --> 1\r\n# digit_distance_nums(12345, 12345) --> 0\r\n# digit_distance_nums(12345, 12344) --> 1\r\n# digit_distance_nums(12345, 12354) --> 2\r\n\r\n\r\n# digit_distance_nums(12345, 45123) --> 2\r\n# digit_distance_nums(12345, 54321) --> 1\r\n# digit_distance_nums(12345","votes":null}],"time":{"count":8.0,"avg":140758.772,"std":24954.0994180553,"cov":0.1772827303}}
{"id":559,"question":"def max_sub_array_sum(a, size):\r\n    \"\"\"Write a function to find the largest sum of contiguous subarray in the given array.\"\"\"","answers":[{"text":"\r\n    max_sum = -1000\r\n    for i in range(size):\r\n        temp = 0\r\n        for j in range(i, size):\r\n            temp += a[j]\r\n            if temp > max_sum:\r\n                max_sum = temp\r\n    return max_sum\r\n\r\n\r","votes":97209.94},{"text":"\r\n    max_sum = -100000\r\n    sum_till_now = 0\r\n    for i in range(size):\r\n        sum_till_now = sum_till_now + a[i]\r\n        if sum_till_now > max_sum:\r\n            max_sum = sum_till_now\r\n        if sum_till_now < 0:\r\n            sum_till_now = 0\r\n    return max_sum\r\n\r\n\r","votes":99413.1},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r","votes":103250.616},{"text":"\r\n    # Base Case\r\n    if size <= 0:\r\n        return 0\r\n    # Maximum sum including the first element\r\n    maximum_sum = a[0]\r\n    # Maximum sum excluding the first element\r\n    maximum_excluding_first_element = 0\r\n    # Traverse the array\r\n    for i in range(1, size):\r\n        maximum_sum = max(a[i], maximum_sum + a[i])\r\n        maximum_excluding_first_element = max(maximum_excluding_first_element, maximum_sum)\r\n    return maximum_excluding_first_element\r\n\r\n\r","votes":108940.088},{"text":"\r\n    max_sum = a[0]\r\n    curr_sum = 0\r\n    for i in range(0, size):\r\n        curr_sum += a[i]\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n        max_sum = max(max_sum, curr_sum)\r\n    return max_sum\r\n\r\n\r\na = [1, 2, -1, -3, 4, -5]\r\nprint(\"The largest contiguous subarray sum is\", max_sub_array_sum(a, len(a)))\r\n\r\n\r","votes":110091.764},{"text":"\r\n    # start with the first element\r\n    curr_max = a[0]\r\n    max_so_far = a[0]\r\n\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max+a[i])  # max of the current element and max till now\r\n        max_so_far = max(max_so_far, curr_max) # max of max till now and max of the current element and max till now\r\n\r\n    return max_so_far\r\n\r\n\r","votes":110930.64},{"text":"\r\n    max_sum = a[0]\r\n    sum = 0\r\n    for i in range(0, size):\r\n        sum = sum + a[i]\r\n        if max_sum < sum:\r\n            max_sum = sum\r\n        if sum < 0:\r\n            sum = 0\r\n    return max_sum\r\n\r\n\r","votes":113208.104},{"text":"\r\n    max_sum = a[0]\r\n    sub_sum = 0\r\n    for i in range(0, size):\r\n        sub_sum = sub_sum + a[i]\r\n        if sub_sum > max_sum:\r\n            max_sum = sub_sum\r\n        if sub_sum < 0:\r\n            sub_sum = 0\r\n    return max_sum\r\n\r\n\r\narray = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize = len(array)\r\nprint(\"The largest sum of contiguous subarray is\", max_sub_array_sum(array, size))\r\n\r\n\r","votes":114758.98},{"text":"\r\n    # Write your code here.\r\n    max_sum = a[0]\r\n    curr_sum = a[0]\r\n    for i in range(1, size):\r\n        curr_sum = max(a[i], curr_sum + a[i])\r\n        max_sum = max(curr_sum, max_sum)\r\n    return max_sum\r\n\r\n\r","votes":117371.74},{"text":"\r\n    global max_sum\r\n    max_sum = -10000000000000\r\n    for i in range(0, size):\r\n        curr_sum = 0\r\n        for j in range(i, size):\r\n            curr_sum += a[j]\r\n            if curr_sum > max_sum:\r\n                max_sum = curr_sum\r\n    return max_sum\r\n\r\n\r","votes":118538.552},{"text":"\r\n    max_sum = a[0]  # initialize result\r\n    cur_sum = 0  # initialize current sum\r\n\r\n    i = 0\r\n    while i < size:\r\n        cur_sum = cur_sum + a[i]\r\n        if cur_sum > max_sum:\r\n            max_sum = cur_sum\r\n        if cur_sum < 0:\r\n            cur_sum = 0\r\n        i += 1\r\n\r\n    return max_sum\r\n\r\n\r","votes":120745.44},{"text":"\r\n    # Start with a base case\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r","votes":121931.656},{"text":"\r\n    maximum_sum = a[0]\r\n    current_sum = 0\r\n\r\n    for i in range(size):\r\n        current_sum = current_sum + a[i]\r\n        if current_sum > maximum_sum:\r\n            maximum_sum = current_sum\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n\r\n    return maximum_sum\r\n\r\n\r","votes":122302.124},{"text":"\r\n    max_sum = a[0]\r\n    cur_sum = 0\r\n\r\n    for i in range(size):\r\n        cur_sum += a[i]\r\n        if max_sum < cur_sum:\r\n            max_sum = cur_sum\r\n        if cur_sum < 0:\r\n            cur_sum = 0\r\n\r\n    return max_sum\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\n\r","votes":123145.244},{"text":"\r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n    for i in range(0, size):\r\n        max_ending_here += a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n# Test case\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n# Expected result - 7\r\n\r\n\r","votes":123146.008},{"text":"\r\n    if not a:\r\n        return 0\r\n    max_sum = a[0]\r\n    cur_sum = 0\r\n    for i in range(size):\r\n        cur_sum = max(a[i], cur_sum + a[i])\r\n        max_sum = max(cur_sum, max_sum)\r\n    return max_sum\r\n\r\n\r\na = [1, 2, 3, 4, -5, 2, 1]\r\nsize = len(a)\r\nprint(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))\r\n\r\n\r","votes":123525.024},{"text":"\r\n    max_sum = -1000\r\n    total_sum = 0\r\n    for i in range(size):\r\n        total_sum = total_sum + a[i]\r\n        if total_sum > max_sum:\r\n            max_sum = total_sum\r\n        if total_sum < 0:\r\n            total_sum = 0\r\n    return max_sum\r\n\r\n\r\na = [-100, 2, 3, 4, 5, 6, -7, 8, 9]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\n# Output: 25\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# Alternate Solution\r","votes":125175.428},{"text":"\r\n    max_sum = a[0]\r\n    curr_sum = 0\r\n    for i in range(0, size):\r\n        curr_sum = curr_sum + a[i]\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n        max_sum = max(max_sum, curr_sum)\r\n    return max_sum\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize = 8\r\nprint(\"Largest contiguous sum is \" + str(max_sub_array_sum(a, size)))\r\n\r\n# -----------------------------------------------------------------------------\r\n\r","votes":126517.896},{"text":"\r\n    max_ending_here = max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":127543.684},{"text":"\r\n\r\n    # Your code goes here\r\n    # O(n)\r\n    max_sum = a[0]\r\n    cur_sum = 0\r\n\r\n    for i in range(size):\r\n        cur_sum += a[i]\r\n        if cur_sum > max_sum:\r\n            max_sum = cur_sum\r\n        if cur_sum < 0:\r\n            cur_sum = 0\r\n\r\n    return max_sum\r\n\r\n\r\na = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n\r","votes":131242.28},{"text":"\r\n    max_sum = -1000000000\r\n    current_sum = 0\r\n    for i in range(size):\r\n        current_sum = current_sum + a[i]\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [5, 4, -1, 7, 8]\r\n    n = len(a)\r\n    print(max_sub_array_sum(a, n))\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ritik Patni\r\n\r\n# This code is contributed by Ri","votes":132439.328},{"text":"\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n\"\"\"\r\nGiven an array A, find the longest subarray\/consecutive sequence such that \r\nthe product of all the elements in the sub-array is greater than 1.\r\n\"\"\"\r\n\r\n\r","votes":133441.976},{"text":"\r\n    max_here = max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_here = max(a[i], max_here + a[i])\r\n        max_so_far = max(max_so_far, max_here)\r\n    return max_so_far\r\n\r\n\r","votes":134849.712},{"text":"\r\n    # a = [5, 4, -1, 7, 6, 2]\r\n    # size = 6\r\n    max_sum = a[0]\r\n    current_sum = 0\r\n\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n\r\n    return max_sum\r\n\r\n\r\na = [5, 4, -1, 7, 6, 2]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n# Output\r\n# 17\r\n\r\n# a = [5, 4, -1, 7, 6, 2]\r\n# size = 6\r\n# print(max_sub_array_sum(a, size))\r\n\r\n# Output\r\n# 17\r\n\r\n# a = [5, 4, -1, 7, 6, 2]\r\n# size = 6\r\n# print(max_sub_array_sum(a, size))\r\n\r\n# Output\r\n# 17\r\n\r\n# a = [5, 4, -1, 7, 6, 2]\r\n# size = 6\r\n# print(max_sub_array_sum(a, size))\r\n\r\n# Output\r\n# 17\r\n\r\n# a = [5, 4, -1, 7, 6, 2]\r\n# size = 6\r\n# print(max_sub_array_sum(a, size))\r\n\r\n# Output\r\n# 17\r\n\r\n# a = [5, 4, -1, 7, 6, 2]\r\n# size = 6\r\n# print(max","votes":135283.668},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\n\r\na = [6, -3, -2, 7, -15, 2, -2, 3, 18]\r\nprint(\"The largest sum of contiguous subarray in the given array is {0}\" .format(max_sub_array_sum(a, len(a))))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":135712.776},{"text":"\r\n    if size == 1:\r\n        return a[0]\r\n    res = a[0]\r\n    max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_so_far = max(max_so_far + a[i], a[i])\r\n        res = max(max_so_far, res)\r\n    return res\r\n\r","votes":135886.208},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\n\r","votes":136340.12},{"text":"\r\n    \r\n    \r\n    # Find the maximum sum subarray in array a[0..n-1]\r\n    # Return value of maximum subarray sum\r\n    \r\n    if size <= 0:\r\n        return 0\r\n    \r\n    \r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    \r\n    # Traverse through all array elements\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    \r\n    return max_so_far\r\n\r\n\r\na = [1, 2, 3, 4, -1, 2, 1, -5, 4]\r\nprint(\"Maximum contiguous sum is \", max_sub_array_sum(a, len(a)))\r\n\r\n\r","votes":140526.26},{"text":"\r\n    max_sum = float('-inf')\r\n    max_here = 0\r\n\r\n    for i in range(size):\r\n        max_here = max(a[i], max_here + a[i])\r\n        max_sum = max(max_sum, max_here)\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\n    print(max_sub_array_sum(a, len(a)))\r\n","votes":141214.572},{"text":"\r\n    max_so_far = max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here += a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r","votes":142032.896},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n\r\n    return max_so_far\r\n\r\n\r","votes":145548.3},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here += a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r","votes":147685.78},{"text":"\r\n    max_sum = a[0]\r\n    current_sum = 0\r\n\r\n    for i in range(size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(max_sum, current_sum)\r\n\r\n    return max_sum\r\n\r\n\r\na = [1, 2, 3, 4, -1, -2, 1, 3]\r\nsize = len(a)\r\nprint(\"Largest sum contiguous subarray is \" + str(max_sub_array_sum(a, size)))\r\n\r\n\"\"\"\r\nOutput:\r\nLargest sum contiguous subarray is 8\r\n\"\"\"\r\n\r\n\r","votes":148017.96},{"text":"\r\n\r\n    max_ending_here = 0\r\n    max_so_far = float('-inf')\r\n\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n\r\n    return max_so_far\r\n\r\n\r\n# Driver program to test above function\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nn = len(a)\r\nprint(max_sub_array_sum(a, n))\r\n\r\n\r","votes":150919.668},{"text":"\r\n    # initialize the maximum sum\r\n    max_sum = -1\r\n    # maximum sum of subarray ending at index i\r\n    current_sum = 0\r\n    # traverse the array\r\n    for i in range(0, size):\r\n        # include the element in our current sum\r\n        current_sum += a[i]\r\n        # check if the current sum is a new maximum sum\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n        # exclude the element from our current sum that has fallen out of window\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    return max_sum\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#","votes":158747.616},{"text":"\r\n    max_sum = a[0]\r\n    curr_sum = a[0]\r\n    for i in range(1, size):\r\n        curr_sum = max(a[i], curr_sum+a[i])\r\n        max_sum = max(max_sum, curr_sum)\r\n    return max_sum\r\n\r\n\r","votes":159112.172},{"text":"\r\n\r\n    max_sum = a[0]\r\n    current_sum = a[0]\r\n\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(max_sum, current_sum)\r\n\r\n    return max_sum\r\n\r\n\r","votes":161872.256},{"text":"\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    n = len(a)\r\n    print(\"Maximum contiguous sum is\", max_sub_array_sum(a, n))\r\n\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n#\r\n# Input: [-2, -3, 4, -1, -2, 1, 5, -3]\r\n# Output: 7\r\n","votes":162724.924},{"text":"\r\n    # initialize the max_sum\r\n    max_sum = -1000\r\n    # initialize the sum\r\n    sum = 0\r\n    # iterate through the list and add a[i] to sum and check if sum is greater than max_sum\r\n    for i in range(size):\r\n        sum += a[i]\r\n        if sum > max_sum:\r\n            max_sum = sum\r\n        elif sum < 0:\r\n            sum = 0\r\n    return max_sum\r\n\r\n\r","votes":164680.804},{"text":"\r\n    curr_max = a[0]\r\n    max_sum = a[0]\r\n\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max + a[i])\r\n        max_sum = max(max_sum, curr_max)\r\n    return max_sum\r\n\r\n\r","votes":164977.844},{"text":"\r\n    # a = [1, -2, 3, -9]\r\n    max_so_far = float('-inf')\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        if (max_so_far < max_ending_here):\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n\r","votes":169895.672},{"text":"\r\n    max_ending_here = max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(max_ending_here + a[i], a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n\r\n    return max_so_far\r\n\r\n\r","votes":171494.972},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r","votes":176134.104},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\na = [1, 2, 3, -2, 5]\r\nprint(max_sub_array_sum(a, 5))\r\n\r\n\r","votes":177796.488},{"text":"\r\n    max_so_far = max_ending_here = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(max_ending_here + a[i], a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":184176.052},{"text":"\r\n    curr_max = a[0]\r\n    max_sum = a[0]\r\n    for i in range(1, size):\r\n        curr_max = max(a[i], curr_max+a[i])\r\n        max_sum = max(max_sum, curr_max)\r\n\r\n    return max_sum\r\n\r\n\r","votes":187053.62},{"text":"\r\n    # TODO: Write your code here\r\n    if size == 0:\r\n        return 0\r\n    max_ending_here = max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":189150.184},{"text":"\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\na = [1, 2, -4, 13, 5, -6, 10, 11, -12, -13, 14, 15]\r\nprint(max_sub_array_sum(a, len(a)))\r\n\r\n\r","votes":190680.828},{"text":"\r\n    max_sum = -1000000000\r\n    curr_sum = 0\r\n    for x in range(0, size):\r\n        curr_sum = curr_sum + a[x]\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n    return max_sum\r\n\r\n\r","votes":197899.232},{"text":"\r\n    # TODO: Write your code here.\r\n    max_sum = -100\r\n    for i in range(size):\r\n        sum = 0\r\n        for j in range(i, size):\r\n            sum += a[j]\r\n            if sum > max_sum:\r\n                max_sum = sum\r\n\r\n    return max_sum\r\n\r\n\r\na = [10, -1, 2, -4, 20]\r\nsize = len(a)\r\nprint(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))\r\n\r\n\r","votes":206253.676},{"text":"\r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n\r","votes":207015.74},{"text":"\r\n    \r\n    max_sum = a[0]\r\n    curr_sum = 0\r\n    \r\n    for i in range(size):\r\n        curr_sum += a[i]\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n    \r\n    return max_sum\r\n\r\n\r","votes":208326.032},{"text":"\r\n    max_sum = -1000\r\n    sum_so_far = 0\r\n    for i in range(0, size):\r\n        sum_so_far += a[i]\r\n        if sum_so_far > max_sum:\r\n            max_sum = sum_so_far\r\n        if sum_so_far < 0:\r\n            sum_so_far = 0\r\n    return max_sum\r\n\r","votes":211450.464},{"text":"\r\n    \r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n    \r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n\r","votes":212006.364},{"text":"\r\n    max_ending_here = a[0]\r\n    max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\na = [1, 2, 3, -2, 5]\r\nsize = len(a)\r\nprint(\"Maximum sum is\", max_sub_array_sum(a, size))\r\n\r\n# Output:\r\n# Maximum sum is 8\r\n\r\n# Expected Output:\r\n# Maximum sum is 8\r\n\r\n# a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n# size = len(a)\r\n# print(\"Maximum sum is\", max_sub_array_sum(a, size))\r\n\r\n# Output:\r\n# Maximum sum is 7\r\n\r\n# Expected Output:\r\n# Maximum sum is 7\r\n\r\n# a = [-2, -1, -3, -4, -1, -2, -1, -5, -4]\r\n# size = len(a)\r\n# print(\"Maximum sum is\", max_sub_array_sum(a, size))\r\n\r\n# Output:\r\n# Maximum sum is -1\r\n\r\n# Expected Output:\r\n# Maximum sum is -1\r\n\r\n# a = [-2, -1, 2, 1, -2, -1]\r\n# size = len(a)\r\n# print(\"Maximum sum is\", max_sub_array_sum(a, size))\r\n\r\n# Output:\r\n# Maximum sum is 0\r\n\r\n","votes":214335.54},{"text":"\r\n    max_ending_here = 0\r\n    max_so_far = float('-inf')\r\n    for i in range(size):\r\n        max_ending_here += a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        else:\r\n            max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":218157.828},{"text":"\r\n    max_sum = 0\r\n    cur_sum = 0\r\n\r\n    for i in range(size):\r\n        cur_sum += a[i]\r\n        if cur_sum < 0:\r\n            cur_sum = 0\r\n        max_sum = max(max_sum, cur_sum)\r\n        print(\"current sum: \", cur_sum)\r\n    return max_sum\r\n    \r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, 2, 3, -9, 7, 5, -1, 2, 3, 4]\r\n    size = len(a)\r\n    print","votes":223599.316},{"text":"\r\n\r\n    # if the array is empty\r\n    if size == 0:\r\n        return 0\r\n\r\n    # Initialize the max_sum variable with the first element\r\n    max_sum = a[0]\r\n\r\n    # Initialize the running sum\r\n    running_sum = 0\r\n\r\n    # Traverse through the array\r\n    for i in range(0, size):\r\n        # Update the max_sum if the sum exceeds the current max_sum\r\n        if running_sum < 0:\r\n            running_sum = 0\r\n        running_sum += a[i]\r\n        if running_sum > max_sum:\r\n            max_sum = running_sum\r\n\r\n    return max_sum\r\n\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n\r\nsize = len(a)\r\n\r\nprint(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))\r\n\r\n# Input: -2, -3, 4, -1, -2, 1, 5, -3\r\n# Output: 7\r\n\r\n# Input: -2, -1, -3, -4, -2, -5\r\n# Output: -1\r\n\r\n# Input: -1, 2, 1, 1, 4, -2\r\n# Output: 6\r\n\r\n# Input: 1, 2, 3, 4, 5, 6\r\n# Output: 15\r\n\r\n# Input: -1, -2, -3, -4, -5, -6\r\n# Output: -1\r\n\r\n# Input: -10, -20, -30, -40, -50, -60\r\n# Output: -10\r\n\r\n# Input: -10, -20, -30, -40, -50, -60","votes":236634.648},{"text":"\r\n    '''\r\n    TC: O(n)\r\n    SC: O(1)\r\n    '''\r\n    max_so_far = -float('inf')\r\n    max_till = 0\r\n    for i in range(size):\r\n        max_till = max_till + a[i]\r\n        max_so_far = max(max_so_far, max_till)\r\n        if max_till < 0:\r\n            max_till = 0\r\n    return max_so_far\r\n\r\n\r","votes":244228.776},{"text":"\r\n    # This is the O(n) solution to the problem\r\n    max_ending_here = max_so_far = a[0]\r\n    for i in range(1, size):\r\n        max_ending_here = max(a[i], max_ending_here + a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\r\n\r\n\r","votes":251090.992},{"text":"\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nprint(max_sub_array_sum(a, 8))\r\n\r\n\r","votes":253709.812},{"text":"\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    \r\n    for i in range(0, size):\r\n        max_ending_here += a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n\r","votes":255290.996},{"text":"\r\n\r\n    if size == 0:\r\n        return 0\r\n\r\n    max_sum = a[0]\r\n    current_sum = a[0]\r\n\r\n    for i in range(1, size):\r\n        current_sum = max(a[i], a[i] + current_sum)\r\n        max_sum = max(max_sum, current_sum)\r\n\r\n    return max_sum\r\n\r\n\r","votes":261122.488},{"text":"\r\n    max_ending_here = 0\r\n    max_so_far = 0\r\n\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n\r","votes":262101.572},{"text":"\r\n    max_sum = -sys.maxsize\r\n    curr_sum = 0\r\n    for i in range(0, size):\r\n        curr_sum += a[i]\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n    return max_sum\r\n\r\n\r\narr = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nprint(max_sub_array_sum(arr, 8))\r\n\r\n\r","votes":null},{"text":"\r\n    max_sum = 0\r\n    max_ending_here = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        \r\n        if max_sum < max_ending_here:\r\n            max_sum = max_ending_here\r\n            \r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_cases = int(input())\r\n    for i in range(test_cases):\r\n        size = int(input())\r\n        arr = list(map(int, input().split()))\r\n        print(max_sub_","votes":null},{"text":"\r\n    max_sum = a[0]\r\n    current_sum = 0\r\n\r\n    for i in range(1, size):\r\n        current_sum += a[i]\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    return max_sum\r\n\r\n\r\na = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 14, -1, -4, -24, -19, -3, -4, 14, -3, -10, -13, -5, 15, 20, 20, -4, 12, -3, -10, 8, 13, -9, 20, -10, 15, -1, 2, -13, -2, -1, -2, 12, -6, 20, 20, -4, -1, -16, 15, -18, -2, 16, -18, 14, 1, -1, 12, 19, 16, 1, -5, -12, -18, 1, -1, -14, 12, 14, -1, 17, -15, 11, 18, -14, 15, 16, 9, 1, 19, -17, 16, 17, 15, -1, 17, -1, 1, -1, -11, 15, 19, -2, -2, -1, -16, -16, -1, -12, -2, 1, -","votes":null},{"text":"\r\n    max_sum = 0\r\n    max_ending_here = 0\r\n\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n\r\n        if max_sum < max_ending_here:\r\n            max_sum = max_ending_here\r\n\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [3, 4, -","votes":null},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for x in range(size):\r\n        max_ending_here = max_ending_here + a[x]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    user_input = int(input(\"Enter the size of the array: \"))\r\n    a = []\r\n    for i in range(user_input):\r\n        a.append(int(input(f\"Enter element {i+1} in the array: \")))\r\n    print(f\"Maximum contiguous subarray sum is {max_sub_array_sum(a, user_input)}\")\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\nEnter the size of the array: 5\r\nEnter element 1 in the array: 1\r\nEnter element 2 in the array: 2\r\nEnter element 3 in the array: 3\r\nEnter element 4 in the array: -2\r\nEnter element 5 in the array: 5\r\nMaximum contiguous subarray sum is 5\r\n\r\nSAMPLE 2\r\nEnter the size of the array: 6\r\nEnter element 1 in the array: -2\r\nEnter element 2 in the array: 1\r\nEnter element 3 in the array: -3\r\nEnter element 4 in the array: 4\r\nEnter element 5 in the array: -1\r\nEnter element 6 in the array: 2\r\nMaximum contiguous subarray sum is 5\r\n\r\nSAMPLE 3\r\nEnter th","votes":null},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(0, size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]\r\n    n = len(a","votes":null},{"text":"\r\n    max_so_far = -1000000\r\n    max_ending_here = 0\r\n    for i in range(0, size):\r\n        max_ending_here += a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        else:\r\n            if max_so_far < max_ending_here:\r\n                max_so_far = max_ending_here\r\n    return max_so_far\r\n\r\n\r\n# Main function to call above function\r\nif __name__ == '__main__':\r\n    size = int(input('Enter size of the array: '))\r\n    a = list(map(int, input('Enter the elements of the array seperated by spaces: ').split()))\r\n    print('The maximum contiguous sum is: ' + str(max_sub_array_sum(a, size)))\r\n\r\n'''\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nTest Case 1:\r\nEnter size of the array: 5\r\nEnter the elements of the array seperated by spaces: 10 -4 2 3 4\r\nThe maximum contiguous sum is: 11\r\n\r\nTest Case 2:\r\nEnter size of the array: 5\r\nEnter the elements of the array seperated by spaces: 1 2 3 4 -5\r\nThe maximum contiguous sum is: 9\r\n\r\nTest Case 3:\r\nEnter size of the array: 5\r\nEnter the elements of the array seperated by spaces: -1 -2 -3 -4 -5\r\nThe maximum contiguous sum is: -1\r\n\r\nTest Case 4:\r\nEnter size of the array: 5\r\nEnter the elements of the array seperated by spaces: 10 -4 -2 3 4\r\nThe maximum contiguous sum is: 13\r\n\r\nTest Cas","votes":null},{"text":"\r\n\r\n    max_sum = -10000\r\n    current_sum = 0\r\n    for i in range(size):\r\n        current_sum += a[i]\r\n        max_sum = max(max_sum, current_sum)\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n    return max_sum\r\n\r\n\r\n# Tests\r\nassert max_sub_array_sum([1, 2, 3, 4, 5, 6], 6) == 15\r\nassert max_sub_array_sum([5, 4, 3, 2, 1], 5) == 9\r\nassert max_sub_array_sum([10, 5, -2, 3, 7, 2], 6) == 17\r\nassert max_sub_array_sum([1, 2, 3, 7, 10, 11, 12], 7) == 34\r\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\r\nassert max_sub_array_sum([], 0) == 0\r\nassert max_sub_array_sum([-2], 1) == -2\r\nassert max_sub_array_sum([-1], 1) == -1\r\nassert max_sub_array_sum([0], 1) == 0\r\nassert max_sub_array_sum([1], 1) == 1\r\nassert max_sub_array_sum([2], 1) == 2\r\nassert max_sub_array_sum([-1, 2], 2) == 2\r\nassert max_sub_array_sum([-2, -1], 2) == -1\r\nassert max_sub_array_sum([-2, -1, 0, 3, 0, -2], 6","votes":null},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    if size == 1:\r\n        return a[0]\r\n    if size == 2:\r\n        return max(a[0], a[1])\r\n\r\n    sub_array_sum = [0] * size\r\n    sub_array_sum[0] = a[0]\r\n    max_sum = a[0]\r\n    for i in range(1, size):\r\n        sub_array_sum[i] = sub_array_sum[i - 1] + a[i]\r\n        max_sum = max(max_sum, sub_array_sum[i])\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if (max_so_far < max_ending_here):\r\n            max_so_far = max_ending_here\r\n        if (max_ending_here < 0):\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    size = len(a)\r\n    print(\"","votes":null},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    if size == 1:\r\n        return a[0]\r\n    \r\n    max_so_far = -sys.maxsize\r\n    max_ending_here = 0\r\n    \r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n        else:\r\n            if max_so_far < max_ending_here:\r\n                max_so_far = max_ending_here\r\n    return max_so_far\r\n\r","votes":null},{"text":"\r\n\r\n    # Initially assign the first element as maximum subarray sum.\r\n    max_so_far = a[0]\r\n\r\n    # Traverse array elements\r\n    for i in range(1, size):\r\n\r\n        # Update max_so_far if the current sum is larger.\r\n        max_so_far = max(max_so_far, a[i])\r\n\r\n        # If the current sum is smaller than the previous sum.\r\n        # Then update the previous sum.\r\n        a[i] += a[i-1]\r\n\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    n = len(a)\r\n    print(max_sub_array_sum(a, n))\r\n","votes":null},{"text":"\r\n    # Base Case\r\n    if size == 1:\r\n        return a[0]\r\n\r\n    # If there are two or more elements\r\n    else:\r\n        # Initialize result\r\n        res = a[0]\r\n\r\n        # Initialize start index\r\n        start = 0\r\n\r\n        # Initialize end index\r\n        end = 0\r\n\r\n        # Traverse through all subarrays and find the maximum sum \r\n        for i in range(1, size):\r\n            # If the current subarray sum is greater than the previous\r\n            # subarray sum\r\n            if ((a[i] + a[start]) > a[end]):\r\n                start = i - 1\r\n                end = i\r\n            else:\r\n                # If the current subarray sum is less than the previous\r\n                # subarray sum\r\n                if (a[start] + a[i]) > a[end]:\r\n                    start = i - 1\r\n                    end = i\r\n\r\n            # Update result if needed\r\n            res = max(res, a[start] + a[end])\r\n\r\n        return res\r\n\r\n\r","votes":null},{"text":"\r\n    # largest = 0\r\n    # for i in range(size):\r\n    #     sum = 0\r\n    #     for j in range(i, size):\r\n    #         sum += a[j]\r\n    #         if sum > largest:\r\n    #             largest = sum\r\n    # return largest\r\n    \r\n    # largest = 0\r\n    # for i in range(1, size):\r\n    #     if a[i] > a[i-1]:\r\n    #         a[i] = a[i] + a[i-1]\r\n    #     elif a[i] < 0:\r\n    #         a[i] = a[i]\r\n    #     if sum > largest:\r\n    #         largest = sum\r\n    # return largest\r\n\r\n    largest = a[0]\r\n    for i in range(1, size):\r\n        if a[i] > a[i-1]:\r\n            a[i] = a[i] + a[i-1]\r\n        elif a[i] < 0:\r\n            a[i] = a[i]\r\n        if a[i] > largest:\r\n            largest = a[i]\r\n    return largest\r\n\r\n\r\na = [-2, -3, 4, -1, -2, 1, 5, -3]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n# Time complexity: O(n*n)\r\n# Space complexity: O(1)\r\n\r\n# Alternative solution with O(n) time complexity and O(1) space complexity:\r\n#","votes":null},{"text":"\r\n    max_sum = a[0]\r\n    current_sum = 0\r\n    for i in range(size):\r\n        current_sum","votes":null},{"text":"\r\n    global max_sum\r\n    if size == 0:\r\n        return 0\r\n    else:\r\n        max_sum = a[0]\r\n        for i in range(1,size):\r\n            if a[i] > (a[i] + max_sum):\r\n                max_sum = a[i]\r\n            else:\r\n                max_sum = a[i] + max_sum\r\n        return max_sum\r\n    \r\nfrom itertools import combinations\r","votes":null},{"text":"\r\n    max_sum = float(\"-inf\")\r\n    current_sum = 0\r\n    for i in range(size):\r\n        current_sum = current_sum + a[i]\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n        max_sum = max(max_sum, current_sum)\r\n    return max_sum\r\n\r\n\r\n# Tests\r\nassert max_sub_array_sum([13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7], 15) == 58\r\nassert max_sub_array_sum([10, -10, -15, -1, 6, 2, 5, 11, 12, 1, 7, 14, 10, 3], 13) == 38\r\nassert max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 55\r\nassert max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 45\r\nassert max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8], 8) == 36\r\nassert max_sub_array_sum([1, 2, 3, 4, 5, 6, 7], 7) == 28\r\nassert max_sub_array_sum([1, 2, 3, 4, 5, 6], 6) == 21\r\nassert max_sub_array_sum([1, 2, 3, 4, 5],","votes":null},{"text":"\r\n\r\n    max_sum = -float('inf')\r\n    curr_sum = 0\r\n\r\n    for i in range(size):\r\n        curr_sum += a[i]\r\n        max_sum = max(max_sum, curr_sum)\r\n\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [1, -2, 3, 10, -4, 7, 2, -5]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [2, 3, -8, -1, 2, 4, -2, 3]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [1, 2, 3, 4, 5]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [-2, -3, -4, -1, -2, -1, 1, 5]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(max_sub_array_sum(a, len(a)))\r\n\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n    print(max_sub_arra","votes":null},{"text":"\r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n    return max_so_far\r\n\r\na = [1, 2, 3, -4, -3, -2, -1, -2, 0, 3, 4, -5, 2, 5, 2, 4, 0, 4, 3, 2, 0, 1, 2, 3, 4, -2, 3, 5, 2, 3, 1, 0, -5, 1, 2, 3, 4, -2, 3, 4, 2, 4, 3, 3, 4, 0, 1, -1, 2, 3, 4, 5, 2, 3, 1, 0, -1, -2, -3, -4, 3, 2, 1, 0, -1, 2, 3, 4, 5, 2, 3, 1, 0, -1, 2, 3, 4, 5, 2, 3, 1, 0, -1, 3, 4, 5, 2, 3, 1, 0, -1, 2, 3, 4, 5, 2, 3, 1, 0, -1, 2, 3, 4, 5, 2, 3, 1, 0, -1, 2, 3, 4, 5, 2, 3, 1, 0, -1","votes":null},{"text":"\r\n    max_sum = a[0]\r\n    subarray_sum = 0\r\n    for i in range(size):\r\n        subarray_sum = subarray_sum + a[i]\r\n        if subarray_sum < 0:\r\n            subarray_sum = 0\r\n        if max_sum < subarray_sum:\r\n            max_sum = subarray_sum\r\n    return max_sum\r\n\r\n\r\nif __name__ == '__main__':\r\n   ","votes":null},{"text":"\r\n    if size == 0:\r\n        return 0\r\n    if size == 1:\r\n        return a[0]\r\n    if size == 2:\r\n        return max(a[0], a[1])\r\n\r\n    max_so_far = a[0]\r\n    max_ending_here = a[0]\r\n\r\n    for i in range(1, size):\r\n        max_ending_here = max(max_ending_here + a[i], a[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n\r\n    return max_so_far\r\n\r\n\r\na = []\r\n\r\nprint(\"Size of array: \", end=\"\")\r\nsize = int(input())\r\n\r\nprint(\"Enter the elements: \", end=\"\")\r\nfor i in range(size):\r\n    a.append(int(input()))\r\n\r\nprint(\"Maximum contiguous subarray sum: \", end=\"\")\r\nprint(max_sub_array_sum(a, size))\r\n","votes":null},{"text":"\r\n\r\n    if size < 1:\r\n        return -1\r\n    if size == 1:\r\n        return a[0]\r\n\r\n    max_end_here = a[0]\r\n    max_so_far = a[0]\r\n    \r\n    for i in range(1, size):\r\n        max_end_here = max(a[i], max_end_here + a[i])\r\n        max_so_far = max(max_so_far, max_end_here)\r\n    return max_so_far\r\n\r\nprint(max_sub_array","votes":null},{"text":"\r\n    max_sum = -sys.maxsize\r\n    current_sum = 0\r\n    for i in range(size):\r\n        current_sum = max(a[i], current_sum + a[i])\r\n        max_sum = max(max_sum, current_sum)\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    # if size == 0:\r\n    #     return -1\r\n    # elif size == 1:\r\n    #     return a[0]\r\n    # else:\r\n    #     max_sum = a[0]\r\n    #     for i in range(1, size):\r\n    #         if a[i] > (a[i - 1] + a[i]):\r\n    #             max_sum = a[i]\r\n    #         else:\r\n    #             max_sum = a[i - 1] + a[i]\r\n    #     return max_sum\r\n    # print(a[1:] + [0])\r\n    # print([a[i] + max_sub_array_sum(a, i) for i in range(1, size)])\r\n    # print(max([a[i] + max_sub_array_sum(a, i) for i in range(1, size)]))\r\n    return max([a[i] + max_sub_array_sum(a, i) for i in range(1, size)])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Initialize the max_sum\r\n    max_sum = -1000\r\n\r\n    # Iterate over the array and keep track of the current max_sum\r\n    curr_sum = 0\r\n    for i in range(size):\r\n        curr_sum += a[i]\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [5, 4, -1, 7, ","votes":null},{"text":"\r\n    # print(a)\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0","votes":null},{"text":"\r\n    if type(a) is list:\r\n        # if the size is not specified, returns the largest sum of all subarrays\r\n        if size is None:\r\n            max_sum = float('-inf')\r\n            for i in range(0, len(a)):\r\n                sum_of_subarray = 0\r\n                for j in range(i, len(a)):\r\n                    sum_of_subarray += a[j]\r\n                    if sum_of_subarray > max_sum:\r\n                        max_sum = sum_of_subarray\r\n                sum_of_subarray = 0\r\n            return max_sum\r\n        else:\r\n            max_sum = 0\r\n            for i in range(0, size):\r\n                max_sum += a[i]\r\n            return max_sum\r\n    else:\r\n        raise TypeError('Argument should be a list.')\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [1, 2, 3, 5, -1, 2, 3, 5, -1, 2, 3, 5, -1, 2, 3, 5, -1, 2, 3, 5, -1, 2, 3, 5, -1, 2, 3, 5, -1, 2, 3, 5, -1, 2, 3, 5]\r\n    print('The largest sum of contiguous subarray is {}'.format(max_sub_array_sum(a, 10)))\r\n    b = [-1, -2, -3, -4, -5]\r\n    print('The largest sum of contiguous subarray is {}'.format(max_sub_array_sum(b)))\r\n    c = [-10, -20, -30, -40, -50]\r\n    print('The largest sum of contiguous subarray is {}'.format(max","votes":null},{"text":"\r\n    \"\"\"\r\n    Arguments:\r\n        a: array of integers\r\n        size: number of elements in the array\r\n    Returns:\r\n        an integer representing the largest sum of contiguous subarray\r\n    \"\"\"\r\n\r\n    max_sum = a[0]\r\n    for i in range(1, size):\r\n        max_sum = max(max_sum, max_sum + a[i])\r\n    return max_sum\r\n\r\n\r","votes":null},{"text":"\r\n    if size < 0:\r\n        return None\r\n    if size == 0:\r\n        return 0\r\n    if size == 1:\r\n        return a[0]\r\n    if size == 2:\r\n        return a[0] + a[1]\r\n    if size == 3:\r\n        return a[0] + a[1] + a[2]\r\n\r\n    dp = [0] * size\r\n    dp[0] = a[0]\r\n    dp[1] = max(a[0], a[1])\r\n    dp[2] = max(a[0], a[1], a[2])\r\n    for i in range(3, size):\r\n        dp[i] = max(dp[i - 1], dp[i-2] + a[i])\r\n    return dp[size - 1]\r\n\r\n\r\na = [1, 4, -10, 2, 5, 3, 6]\r\nsize = len(a)\r\nprint(max_sub_array_sum(a, size))\r\n\r\n\r\n# A Dynamic Programming based Python3 program to find\r\n# the maximum sum subarray in an array of integers\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if size == 0:\r\n        return 0\r\n    \r\n    if size == 1:\r\n        return a[0]\r\n    \r\n    if size == 2:\r\n        return max([a[0], a[1]])\r\n    \r\n    m = [0] * size\r\n    m[0] = a[0]\r\n    max_val = m[0]\r\n    \r\n    for i in range(1, size):\r\n        m[i] = max(m[i - 1] + a[i], a[i])\r\n        if m[i] > max_val:\r\n            max_val = m[i]\r\n    \r\n    return max_val\r\n\r\n# Driver Code\r\n\r\na = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, -7]\r\nsize = len(a)\r\nprint(\"max subarray sum is \", max_sub_array_sum(a, size))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\n\r\nSpace Complexity: O(n)\r\n\r\nwhere n is the no of elements in the array.\r\n\r\nSample Input:\r\n\r\na = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, -7]\r\n\r\nSample Output:\r\n\r\nmax subarray sum is  61\r\n\r\nExplanation:\r\n\r\nThe subarrays are [13], [13, -3], [13, -3, -25], [13, -3, -25, 20], [20, -3, -16, -2","votes":null},{"text":"\r\n    if not a:\r\n        return []\r\n    # Traverse the array. Keep track of the largest sum contiguous subarray\r\n    # and the current largest sum contiguous subarray\r\n    max_sum = a[0]\r\n    curr_sum = a[0]\r\n    for i in range(1, size):\r\n        curr_sum = max(a[i], curr_sum + a[i])\r\n        max_sum = max(max_sum, curr_sum)\r\n\r\n    return max_sum\r\n\r\n\r\n# Test case\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nsize = len(a)\r\nprint(\"Max contiguous sum is","votes":null},{"text":"\r\n\r\n    max_so_far = a[0]\r\n    max_ending_here = 0\r\n\r\n    for i in range(size):\r\n        max_ending_here = max_ending_here + a[i]\r\n\r\n        if max_so_far < max_ending_here:\r\n            max_so_far = max_ending_here\r\n\r\n        if max_ending_here < 0:\r\n            max_ending_here = 0\r\n\r\n    return max_so_far\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [-5, 2, 4, -10, 3, 5, -1, -15, 10]\r\n    size = 10\r\n\r\n    print(\"Maximum contiguous sum in the given array is: \", max_sub_array","votes":null},{"text":"\r\n\r\n    \"\"\"\r\n    max_sum = -2147483648\r\n    for i in range(size):\r\n        current_sum = 0\r\n        for j in range(i, size):\r\n            current_sum += a[j]\r\n            max_sum = max(max_sum, current_sum)\r\n    return max_sum\r\n    \"\"\"\r\n\r\n    current_max = a[0]\r\n    max_sum = current_max\r\n    for i in range(1, size):\r\n        current_max = max(a[i], current_max + a[i])\r\n        max_sum = max(max_sum, current_max)\r\n    return max_sum\r\n\r\n\r\n# test cases\r\nprint(max_sub_array_sum(a, size))\r\n\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5, 6, 7], 7))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9], 20))\r\n\r\nprint(max_sub_array_sum([10, -1, -2, -3, -4, -5, -6, -7, -8, -9], 10))\r\nprint(max_sub_array_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9], 10))\r\n\r\nprint(max_sub_array_sum([1, 2, 3, 4, 5, ","votes":null},{"text":"\r\n    if size == 1:\r\n        return a[0]\r\n\r\n    max_sum = a[0]\r\n    max_ending_here = a[0]\r\n\r\n    for i in range(1, size):\r\n        max_ending_here = max(max_ending_here + a[i], a[i])\r\n        max_sum = max(max_sum, max_ending_here)\r\n\r\n    return max_sum\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1, 2, -3, 4, 5, 6, 7, 8, -9, 10]\r\n    print(max_sub_array_sum(a, 10))\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(max_sub_array_sum(a, 10))\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11]\r\n    print(max_sub_array_sum(a, 11))\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, 12]\r\n    print(max_sub_array_sum(a, 12))\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, 12, 13]\r\n    print(max_sub_array_sum(a, 13))\r\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, 12, 13, ","votes":null}],"time":{"count":64.0,"avg":162197.0085,"std":45801.7240372539,"cov":0.2823832848}}
{"id":560,"question":"def union_elements(test_tup1, test_tup2):\r\n    \"\"\"Write a function to find the union of elements of the given tuples.\"\"\"","answers":[{"text":"\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    return tuple(set(test_list1) | set(test_list2))\r\n\r\n\r","votes":89591.484},{"text":"\r\n    return tuple(set(test_tup1 + test_tup2))\r\n\r\n\r","votes":95485.76},{"text":"\r\n    test_tup3 = tuple(set(test_tup1) | set(test_tup2))\r\n    return test_tup3\r\n\r\n\r","votes":101776.344},{"text":"\r\n    return tuple(set(test_tup1) | set(test_tup2))\r\n\r\n\r","votes":103252.924},{"text":"\r\n    # Create two sets with the elements of the two tuples\r\n    set1 = set(test_tup1)\r\n    set2 = set(test_tup2)\r\n    # Use union operation on the two sets\r\n    union_set = set1.union(set2)\r\n    # Return the union of the two sets\r\n    return tuple(union_set)\r\n\r\n\r","votes":104856.7},{"text":"\r\n    union_list = []\r\n    for element in test_tup1:\r\n        union_list.append(element)\r\n    for element in test_tup2:\r\n        if element not in union_list:\r\n            union_list.append(element)\r\n    return tuple(union_list)\r\n\r\n\r","votes":105280.22},{"text":"\r\n    if len(test_tup1) == 0:\r\n        return test_tup2\r\n    if len(test_tup2) == 0:\r\n        return test_tup1\r\n    union = set(test_tup1)\r\n    union.update(test_tup2)\r\n    return tuple(union)\r\n\r","votes":107438.3},{"text":"\r\n    if len(test_tup1) > len(test_tup2):\r\n        big_tuple = test_tup1\r\n        small_tuple = test_tup2\r\n    else:\r\n        big_tuple = test_tup2\r\n        small_tuple = test_tup1\r\n    new_tuple = ()\r\n    for i in small_tuple:\r\n        if i not in new_tuple:\r\n            new_tuple = new_tuple + (i,)\r\n    for i in big_tuple:\r\n        if i not in new_tuple:\r\n            new_tuple = new_tuple + (i,)\r\n    return new_tuple\r\n\r\n\r","votes":114946.656},{"text":"\r\n    # Union is a function of set\r\n    # return set(test_tup1).union(test_tup2)\r\n\r\n    # Union is a method of tuple\r\n    set1 = set(test_tup1)\r\n    set2 = set(test_tup2)\r\n    return tuple(set1.union(set2))\r\n\r\n\r","votes":116500.44},{"text":"\r\n    \r\n    set_1 = set(test_tup1)\r\n    set_2 = set(test_tup2)\r\n    \r\n    union_set = set_1.union(set_2)\r\n    \r\n    return tuple(union_set)\r\n\r\n\r","votes":118155.676},{"text":"\r\n    union_list = []\r\n\r\n    for value in test_tup1:\r\n        if value not in union_list:\r\n            union_list.append(value)\r\n\r\n    for value in test_tup2:\r\n        if value not in union_list:\r\n            union_list.append(value)\r\n\r\n    return tuple(union_list)\r\n\r\n\r\nprint(union_elements((1, 2, 3), (1, 2, 3, 4, 5)))\r\n\r\n\r","votes":118538.44},{"text":"\r\n\r\n    # Create an empty list\r\n    result_list = []\r\n\r\n    # Add the elements of the first tuple to the list\r\n    for i in test_tup1:\r\n        result_list.append(i)\r\n\r\n    # Add the elements of the second tuple to the list\r\n    for i in test_tup2:\r\n        if i not in result_list:\r\n            result_list.append(i)\r\n\r\n    # Return the result list\r\n    return tuple(result_list)\r\n\r\n\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (2, 4, 6)\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n\r","votes":119293.724},{"text":"\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    union = []\r\n    for i in test_list1:\r\n        if i not in union:\r\n            union.append(i)\r\n    for i in test_list2:\r\n        if i not in union:\r\n            union.append(i)\r\n    return tuple(union)\r\n\r\n\r","votes":126150.964},{"text":"\r\n    union_list = []\r\n    for ele in test_tup1:\r\n        if ele not in union_list:\r\n            union_list.append(ele)\r\n    for ele in test_tup2:\r\n        if ele not in union_list:\r\n            union_list.append(ele)\r\n    return tuple(union_list)\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (4, 5, 6, 7, 8)\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n# 20\r","votes":129074.836},{"text":"\r\n    \r\n    union_tup = tuple()\r\n    \r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] not in union_tup:\r\n            union_tup += (test_tup1[i],)\r\n            \r\n    for i in range(len(test_tup2)):\r\n        if test_tup2[i] not in union_tup:\r\n            union_tup += (test_tup2[i],)\r\n    \r\n    return union_tup\r\n\r\n\r","votes":129871.556},{"text":"\r\n    return tuple(set(test_tup1).union(set(test_tup2)))\r\n\r\n\r","votes":143935.908},{"text":"\r\n    return tuple(set(test_tup1) | set(test_tup2))\r\n\r","votes":144599.112},{"text":"\r\n    # return tuple(set(test_tup1) | set(test_tup2))\r\n    return tuple(set(test_tup1) | set(test_tup2))\r\n\r\n\r","votes":145150.476},{"text":"\r\n\r\n    return tuple(set(test_tup1) | set(test_tup2))\r\n\r\n\r","votes":152854.3},{"text":"\r\n\r\n    union = tuple(set(test_tup1) | set(test_tup2))\r\n\r\n    return union\r\n\r\n\r\n","votes":160793.472},{"text":"\r\n    return tuple(set(test_tup1) | set(test_tup2))\r\n\r\n\r\nprint(union_elements(('a', 'b', 'c'), ('b', 'c', 'd')))\r\n\r\n\r","votes":171403.632},{"text":"\r\n    return tuple(set(test_tup1) | set(test_tup2))\r\n\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (6, 7, 8, 9, 10)\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n\r","votes":171537.56},{"text":"\r\n    test_tup1 = tuple(test_tup1)\r\n    test_tup2 = tuple(test_tup2)\r\n    if len(test_tup1) > len(test_tup2):\r\n        return tuple(set(test_tup1) | set(test_tup2))\r\n    else:\r\n        return tuple(set(test_tup2) | set(test_tup1))\r\n\r\n\r","votes":190337.844},{"text":"\r\n    test_tuple1 = sorted(test_tup1)\r\n    test_tuple2 = sorted(test_tup2)\r\n    \r\n    temp_list = []\r\n    for element in test_tuple1:\r\n        if element not in temp_list:\r\n            temp_list.append(element)\r\n    for element in test_tuple2:\r\n        if element not in temp_list:\r\n            temp_list.append(element)\r\n    \r\n    return tuple(temp_list)\r\n\r\n\r","votes":198668.18},{"text":"\r\n    union = set(test_tup1)\r\n    union.union(test_tup2)\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    union_tup = ()\r\n    for ele in test_tup1:\r\n        if ele not in union_tup:\r\n            union_tup += ele, # This should be (1, 2, 'a', 'b', 'c')\r\n    for ele in test_tup2:\r\n        if ele not in union_tup:\r\n            union_tup += ele, # This should be (3, 4, 'a', 'b', 'c', 'd', 'e')\r\n    return union_tup\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tuple1 = ()\r\n    test_tuple2 = ()\r\n    test_tuple3 = ()\r\n    test_tuple4 = ()\r\n\r\n    test_tuple1 = (1, 2, 'a', 'b', 'c')\r\n    test_tuple2 = (3, 4, 'a', 'b', 'c', 'd', 'e')\r\n    test_tuple3 = union_elements(test_tuple1, test_tuple2)\r\n    print('Union of the given tuples is:', test_tuple3)\r\n\r\n    test_tuple1 = (1, 2, 'a', 'b', 'c')\r\n    test_tuple2 = (3, 4, 'a', 'b', 'c', 'd', 'e')\r\n    test_tuple3 = union_elements(test_tuple1, test_tuple2)\r\n    print('Union of the given tuples is:', test_tuple3)\r\n\r\n    test_tuple1 = (1, 2, 'a', 'b', 'c')\r\n    test_tuple2 = (3, 4, 'a', 'b', 'c', 'd', 'e')\r\n    test_tuple3 = union_elements(test_tuple1, test_tuple2)\r\n    print('Union of the given tuples is:', test_tuple3)\r\n\r\n    test_tuple1 = (1,","votes":null},{"text":"\r\n    print(test_tup1)\r\n    print(test_tup2)\r\n    print(test_tup1 + test_tup2)\r\n    \r\nunion_elements(('a', 'b'), ('c', 'd'))\r\n\r\n#%%\r","votes":null},{"text":"\r\n\r\n    # Create an empty list to store the union\r\n    union = []\r\n\r\n    # Loop through each tuple\r\n    for tup in [test_tup1, test_tup2]:\r\n\r\n        # Loop through each element in each tuple\r\n        for element in tup:\r\n\r\n            # If the element isn't in the union list yet, append it\r\n            if element not in union:\r\n                union.append(element)\r\n\r\n    # Return the union list\r\n    return union\r\n\r\n\r\n# Create the test tuples\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 = (3, 4, 5, 6, 7)\r\n\r\n# Print the union\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n# Test 2\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 = (3, 4, 5, 6, 7)\r\n\r\n# Print the union\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n# Test 3\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 = (3, 4, 5, 6, 7)\r\n\r\n# Print the union\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n# Test 4\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 = (3, 4, 5, 6, 7)\r\n\r\n# Print the union\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n# Test 5\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 = (3","votes":null},{"text":"\r\n    # Create the empty set\r\n    union_set = set()\r\n    # Add all the elements from the first tuple\r\n    for x in test_tup1:\r\n        union_set.add(x)\r\n    # Add all the elements from the second tuple\r\n    for x in test_tup2:\r\n        union_set.add(x)\r\n    # Return the union set\r\n    return union_set\r\n\r\n\r","votes":null},{"text":"\r\n    union_set = set(test_tup1).union(set(test_tup2))\r\n    return union_set\r\n\r\n\r\n# Tests\r","votes":null},{"text":"\r\n    # Get the union of the 2 tuples\r\n    union = set(test_tup1) | set(test_tup2)\r\n    # Return the set as a list\r\n    return list(union)\r\n\r\n\r","votes":null},{"text":"\r\n    union = set(test_tup1)\r\n    union.update(test_tup2)\r\n    print(union)\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n    return test_tup1 | test_tup2\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    union_elements = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] not in union_elements and test_tup2[i] not in union_elements:\r\n            union_elements.append(test_tup1[i])\r\n            union_elements.append(test_tup2[i])\r\n\r\n    return union_elements\r\n\r\n\r\n# Examples\r\nprint(union_elements((1, 2, 3, 4), (0, 2, 4, 6, 8)))\r\nprint(union_elements((1, 2, 3), (5, 6, 7, 8, 9)))\r\nprint(union_elements((1, 2, 3, 4), (0, 10, 11, 12)))\r\nprint(union_elements((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)))\r\n\r\n\r","votes":null},{"text":"\r\n    return test_tup1 + test_tup2\r\n\r\n\r","votes":null},{"text":"\r\n    # Create empty list\r\n    union = []\r\n    # Loop through each element in each tuple\r\n    for element in test_tup1:\r\n        if element not in union:\r\n            union.append(element)\r\n    for element in test_tup2:\r\n        if element not in union:\r\n            union.append(element)\r\n    # Return the union\r\n    return union\r\n\r","votes":null},{"text":"\r\n    union_set = set(test_tup1).union(test_tup2)\r\n    return union_set\r\n\r\n\r\nprint(union_elements((1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5, 6, 7, 8, 9, 0)))\r\n\r\n\r","votes":null},{"text":"\r\n    # Fill in the body below\r\n    if len(test_tup1) == len(test_tup2):\r\n        return test_tup1 + test_tup2\r\n    else:\r\n        if len(test_tup1) > len(test_tup2):\r\n            return test_tup1\r\n        else:\r\n            return test_tup2\r\n\r\n\r","votes":null},{"text":"\r\n    return test_tup1 | test_tup2\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return test_tup1 + test_tup2\r\n\r","votes":null},{"text":"\r\n    return list(set(test_tup1) | set(test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    common_elements = set(test_tup1).intersection(test_tup2)\r\n    \r\n    return common_elements\r\n\r\n\r","votes":null},{"text":"\r\n    result = test_tup1.union(test_tup2)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n    union = test_tup1.union(test_tup2)\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    union_list = []\r\n    for i in test_tup1:\r\n        for j in test_tup2:\r\n            if i == j:\r\n                union_list.append(i)\r\n    return union_list\r\n\r\n\r","votes":null},{"text":"\r\n    union = set(test_tup1).union(set(test_tup2))\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    final_list = []\r\n    for i in test_tup1:\r\n        if i not in final_list:\r\n            final_list.append(i)\r\n    for i in test_tup2:\r\n        if i not in final_list:\r\n            final_list.append(i)\r\n    return final_list\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Initializing the set to store the union.\r\n    union_set = set()\r\n    \r\n    # Getting the union of the tuples.\r\n    for i in test_tup1:\r\n        union_set.add(i)\r\n    for i in test_tup2:\r\n        union_set.add(i)\r\n    \r\n    # Returning the union of the tuples.\r\n    return union_set\r\n\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n# PROBLEM 4 :\r\n\r\n# Write a function to find the intersection of elements of the given tuples.\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1_list = list(test_tup1)\r\n    test_tup2_list = list(test_tup2)\r\n    union_list = test_tup1_list + test_tup2_list\r\n    return tuple(union_list)\r\n\r\n#test\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 = (5, 6, 7, 8)\r\n\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n#answer\r","votes":null},{"text":"\r\n    union_list = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] not in union_list and test_tup2[i] not in union_list:\r\n            union_list.append(test_tup1[i])\r\n            union_list.append(test_tup2[i])\r\n    return union_list\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    union_list = []\r\n\r\n    for element in test_tup1:\r\n        if element not in union_list:\r\n            union_list.append(element)\r\n\r\n    for element in test_tup2:\r\n        if element not in union_list:\r\n            union_list.append(element)\r\n\r\n    return union_list\r\n\r\n\r","votes":null},{"text":"\r\n    union = set(test_tup1) | set(test_tup2)\r\n    return union\r\n\r\n\r\ntest_tup1 = ('red', 'green', 'blue')\r\ntest_tup2 = ('red', 'green', 'yellow', 'blue')\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    union_set = set()\r\n    for tup in test_tup1:\r\n        union_set.add(tup)\r\n    for tup in test_tup2:\r\n        union_set.add(tup)\r\n    return union_set\r\n\r\n\r","votes":null},{"text":"\r\n    # tuple_1 = test_tup1\r\n    # tuple_2 = test_tup2\r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    # \r\n    ","votes":null},{"text":"\r\n    union_elements = set(test_tup1).union(set(test_tup2))\r\n    return union_elements\r\n\r\n\r","votes":null},{"text":"\r\n    tup1 = set(test_tup1)\r\n    tup2 = set(test_tup2)\r\n    return tup1.union(tup2)\r\n\r\n\r\n# test cases\r\nprint(union_elements(('a', 'b', 'c'), ('b', 'd', 'e')))\r\nprint(union_elements(('a', 'b', 'c'), ('b', 'd', 'e')))\r\nprint(union_elements(('a', 'b', 'c'), ('b', 'd', 'e')))\r\nprint(union_elements(('a', 'b', 'c'), ('b', 'd', 'e')))\r\nprint(union_elements(('a', 'b', 'c'), ('b', 'd', 'e')))\r\nprint(union","votes":null},{"text":"\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    test_list3 = []\r\n    for item1 in test_list1:\r\n        for item2 in test_list2:\r\n            if item1 == item2:\r\n                test_list3.append(item1)\r\n    return tuple(test_list3)\r\n\r\n\r\nprint(union_elements((\"a\", \"b\", \"c\"), (\"b\", \"c\", \"d\")))\r\nprint(union_elements((\"a\", \"b\", \"c\"), (\"b\", \"c\", \"a\")))\r\nprint(union_elements((\"a\", \"b\", \"c\"), (\"c\", \"a\", \"b\")))\r\nprint(union_elements((\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\")))\r\nprint(union_elements((\"a\", \"b\", \"c\"), ()))\r\nprint(union_elements((), (\"a\", \"b\", \"c\")))\r\nprint(union_elements((), ()))\r\n\r\n\r","votes":null},{"text":"\r\n    test_list = []\r\n    for i in range(len(test_tup1)):\r\n        test_list.append(test_tup1[i])\r\n    for j in range(len(test_tup2)):\r\n        if test_tup2[j] not in test_list:\r\n            test_list.append(test_tup2[j])\r\n    return test_list\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    union_elements = set(test_tup1) | set(test_tup2)\r\n    return union_elements\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n  ","votes":null},{"text":"\r\n    \r\n    test_tup1 = tuple(set(test_tup1))\r\n    test_tup2 = tuple(set(test_tup2))\r\n    return (test_tup1, test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(set().union(*[set(tup) for tup in (test_tup1, test_tup2)]))\r\n\r\n\r\n# Tests\r\nprint(union_elements((1, 2, 3), (5, 2, 10)))  # expected output: (1, 2, 3, 5, 10)\r\nprint(union_elements((1, 2, 3), (3, 4, 5)))  # expected output: (1, 2, 3, 4, 5)\r\nprint(union_elements((1, 2, 3), (1, 2, 3)))  # expected output: (1, 2, 3)\r\nprint(union_elements((1, 2, 3), ()))  # expected output: (1, 2, 3)\r\nprint(union_elements((1, 2, 3), (1, 2, 3, 4, 5)))  # expected output: (1, 2, 3, 4, 5)\r\nprint(union_elements((1, 2, 3), (1, 2, 3, 4, 5, 6)))  # expected output: (1, 2, 3, 4, 5, 6)\r\nprint(union_elements((1, 2, 3), (1, 2, 3, 4, 5, 6, 7)))  # expected output: (1, 2, 3, 4, 5, 6, 7)\r\nprint(union_elements((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8)))  # expected output: (1, 2, 3, 4, 5, 6, 7, 8)\r\nprint(union_elements((1, 2, 3), (1, 2, 3, 4, 5, 6, ","votes":null},{"text":"\r\n    union = test_tup1 + test_tup2\r\n    union = list(union)\r\n    union = set(union)\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    tup1 = set(test_tup1)\r\n    tup2 = set(test_tup2)\r\n    tup = tup1.union(tup2)\r\n    return tup\r\n\r\n\r","votes":null},{"text":"\r\n    # YOUR CODE HERE\r\n    return test_tup1.union(test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(test_tup1) == len(test_tup2):\r\n        union_elements_list = []\r\n        for element in test_tup1:\r\n            if element not in test_tup2:\r\n                union_elements_list.append(element)\r\n        for element in test_tup2:\r\n            if element not in test_tup1:\r\n                union_elements_list.append(element)\r\n        return tuple(union_elements_list)\r\n    else:\r\n        return \"The tuples are not of the same length\"\r\n\r\n\r\nprint(union_elements(('a', 'b', 'c', 'd'), ('a', 'b', 'x', 'y', 'z')))\r\nprint(union_elements(('a', 'b', 'c', 'd'), ('a', 'b', 'x', 'y', 'z', 'a', 'b')))\r\nprint(union_elements(('a', 'b', 'c', 'd'), ('x', 'y', 'z', 'a', '","votes":null},{"text":"\r\n    \r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n\r\n    return test_tup1.union(test_tup2)\r\n    \r\n    \r\n    \r\n    \r\nif __name__ == \"__main__\":\r\n    test_tuple1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\r\n    test_tuple2 = (1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13)\r\n\r\n    union = union_elements(test_tuple1, test_tuple2)\r\n    print(\"Union of elements from the given tuples: {}\".format(union))\r\n\r\n    test_tuple1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\r\n    test_tuple2 = (1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13)\r\n\r\n    union = union_elements(test_tuple1, test_tuple2)\r\n    print(\"Union of elements from the given tuples: {}\".format(union))\r\n\r\n    test_tuple1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\r\n    test_tuple2 = (1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13)\r\n\r\n    union = union_elements(test_tuple1, test_tuple2)\r\n    print(\"Union of elements from the given tuple","votes":null},{"text":"\r\n\r\n    test_tup1 = (\r\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\r\n    )\r\n\r\n    test_tup2 = (\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\r\n\r\n    test_tup3 = (\r\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\r\n    )\r\n\r\n    assert union_elements(test_tup1, test_tup2) == test_tup1\r\n    assert union_elements(test_tup2, test_tup3) == test_tup3\r\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n# ----- Question 2 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":null},{"text":"\r\n    # use set to remove duplicates\r\n    return set(test_tup1).union(test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup3 = tuple(set(test_tup1) | set(test_tup2))\r\n    return test_tup3\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3, 4)\r\n    test_tup2 = (3, 4, 5, 6)\r\n    test_tup3 = union_elements(test_tup1, test_tup2)\r\n    print(test_tup3)\r\n\r\n    \"\"\"","votes":null},{"text":"\r\n    union_elements_1 = set(test_tup1)\r\n    union_elements_2 = set(test_tup2)\r\n    union_elements = union_elements_1.union(union_elements_2)\r\n    return union_elements\r\n\r","votes":null},{"text":"\r\n\r\n    a = set(test_tup1)\r\n    b = set(test_tup2)\r\n    c = a.union(b)\r\n\r\n    return c\r\n\r\n\r","votes":null},{"text":"\r\n    test1_list=list(test_tup1)\r\n    test2_list=list(test_tup2)\r\n    union=list(set(test1_list).union(set(test2_list)))\r\n    return union\r\n\r","votes":null},{"text":"\r\n    # create a new list\r\n    result = list()\r\n    # iterate over the tuples\r\n    for test_tuple in (test_tup1, test_tup2):\r\n        # iterate over the elements of the tuple\r\n        for element in test_tuple:\r\n            # if element is not in the result list\r\n            if element not in result:\r\n                # append element in result list\r\n                result.append(element)\r\n    # return the result\r\n    return result\r\n\r\n# driver code\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (1, 2, 3, 4, 6)\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n# output\r\n[1, 2, 3, 4, 5, 6]\r\n\"\"\"\r\n\r\n\r\n# 2. Write a function to get the intersection of two given tuples.\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    union = test_tup1 + test_tup2\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # This solution uses sets.\r\n    # It creates a set from the first tuple, adds the elements of the second tuple to it, and then converts it to a list.\r\n    # I like this solution because it is concise.\r\n    # But I don't like it because I don't really understand why it works.\r\n    # I think it works because the two tuples are converted to sets, and then the union of the sets is found.\r\n    # But I'm not sure why it works.\r\n    return list(set(test_tup1).union(set(test_tup2)))\r\n    \r\n    # This solution uses sets.\r\n    # It creates a set from the first tuple, adds the elements of the second tuple to it, and then converts it to a list.\r\n    # I like this solution because it is concise and it is easy to explain how it works.\r\n    # I don't like it because I don't really understand why it works.\r\n    # I think it works because the two tuples are converted to sets, and then the union of the sets is found.\r\n    # But I'm not sure why it works.\r\n    return list(set(test_tup1).union(set(test_tup2)))\r\n    \r\n    # This solution uses sets.\r\n    # It creates a set from the first tuple, adds the elements of the second tuple to it, and then converts it to a list.\r\n    # I like this solution because it is concise and it is easy to explain how it works.\r\n    # I don't like it because I don't really understand why it works.\r\n    # I think it works because the two tuples are converted to sets, and then the union of the sets is found.\r\n    # But I'm not sure why it works.\r\n    return list(set(test_tup1).union(set(test_tup2)))\r\n    \r\n    # This solution uses sets.\r\n    # It creates a set from the first tuple, adds the elements of the second tuple to it, and then converts it to a lis","votes":null},{"text":"\r\n\r\n    set1 = set(test_tup1)\r\n    set2 = set(test_tup2)\r\n    return set1.union(set2)\r\n\r\n\r","votes":null},{"text":"\r\n    # Create an empty set\r\n    union = set()\r\n    # Iterate over the first tuple to populate the set\r\n    for element in test_tup1:\r\n        union.add(element)\r\n    # Iterate over the second tuple to add elements to the set\r\n    for element in test_tup2:\r\n        union.add(element)\r\n    # Return the set\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    union = set(test_tup1) | set(test_tup2)\r\n    return union\r\n\r\n\r","votes":null},{"text":"\r\n    #test_tup1= (1, 2, 3)\r\n    #test_tup2= (2, 3, 4)\r\n    #return set(test_tup1).union(test_tup2)\r\n    return set(test_tup1).union(test_tup2)\r\n    \r\n    \r","votes":null},{"text":"\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    test_list = []\r\n    for i in test_list1:\r\n        if i not in test_list:\r\n            test_list.append(i)\r\n    for i in test_list2:\r\n        if i not in test_list:\r\n            test_list.append(i)\r\n    return tuple(test_list)\r\n\r\n\r\nprint(union_elements((1, 2), (2, 4)))\r\n# (1, 2, 4)\r\nprint(union_elements((1, 2, 3), (2, 4)))\r\n# (1, 2, 3, 4)\r\nprint(union_elements((1, 2, 3), (2, 4, 5)))\r\n# (1, 2, 3, 4, 5)\r\nprint(union_elements((1, 2, 3), (2, 4), (2, 4, 5)))\r\n# (1, 2, 3, 4, 5)\r\nprint(union_elements((1, 2, 3), (2, 4), (2, 4, 5), (2, 4, 6)))\r\n# (1, 2, 3, 4, 5, 6)\r\nprint(union_elements((1, 2, 3), (2, 4), (2, 4, 5), (2, 4, 6), (2, 4, 7)))\r\n# (1, 2, 3, 4, 5, 6, 7)\r\nprint(union_elements((1, 2, 3), (2, 4), (2, 4, 5), (2, 4, 6), (2, 4, 7), (2, 4, 8)))\r\n# (1, 2, 3,","votes":null},{"text":"\r\n    \r\n    #Create a list of all unique elements from both tuples\r\n    test_list = list(set(test_tup1 + test_tup2))\r\n\r\n    #Return the list of unique values\r\n    return test_list\r\n\r\n\r\ntest_tup1 = ('a', 'b', 'c')\r\ntest_tup2 = ('b', 'c', 'd')\r\n\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    result = set(test_tup1).union(test_tup2)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    union_list = []\r\n    for element in test_tup1:\r\n        if element in test_tup2:\r\n            union_list.append(element)\r\n    return union_list\r\n\r\n\r\nprint(union_elements((1, 2, 3, 4), (3, 4, 5, 6)))\r\nprint(union_elements((1, 2, 3, 4, 5), (3, 4, 5, 6)))\r\nprint(union_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7)))\r\nprint(union_elements((1, 2, 3, 4, 5, 6), (3, 4, 5, 6, 7)))\r\nprint(union_elements((1, 2, 3, 4, 5, 6), (3, 4, 5, 6, 7, 8)))\r\nprint(union_elements((1, 2, 3, 4, 5, 6), (3, 4, 5, 6, 7, 8, 9)))\r\nprint(union_elements((1, 2, 3, 4, 5, 6, 7), (3, 4, 5, 6, 7, 8, 9)))\r\n\r\n\r\n# 9.3: A function to find the intersection of two tuples is given below. Write\r\n# a function to find the intersection of three tuples. The function should\r\n# take in any number of tuples and return the intersection of all of the\r\n# tuples.\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(sorted(list(test_tup1) + list(test_tup2)))\r\n\r\n\r","votes":null},{"text":"\r\n    # 1. Make a new list with the union of the elements.\r\n    list1 = list(test_tup1)\r\n    list2 = list(test_tup2)\r\n    union_list = sorted(list(set(list1 + list2)))\r\n    # 2. Return the union list.\r\n    return union_list\r\n\r\n\r\n# test function\r","votes":null},{"text":"\r\n    test_tup1.append(test_tup2)\r\n    return test_tup1\r\n\r\n\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (4, 5, 6)\r\nprint(union_elements(test_tup1, test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    test_list1 = []\r\n    test_list2 = []\r\n    for element in test_tup1:\r\n        if element not in test_list1:\r\n            test_list1.append(element)\r\n    for element in test_tup2:\r\n        if element not in test_list2:\r\n            test_list2.append(element)\r\n    test_list = test_list1 + test_list2\r\n    return test_list\r\n\r\nresult = union_elements(test_tup1, test_tup2)\r\nprint(result)\r\n\r","votes":null}],"time":{"count":24.0,"avg":131645.6045,"std":30026.9464193026,"cov":0.2280892441}}
{"id":562,"question":"def Find_Max_Length(lst):\r\n    \"\"\"Write a python function to find the maximum length of sublist.\"\"\"","answers":[{"text":"\r\n    # Your code goes here\r\n    return max(map(len, lst))\r\n\r\n\r","votes":84328.408},{"text":"\r\n    if len(lst) == 0:\r\n        return 0\r\n    else:\r\n        max_length = 0\r\n        for i in range(len(lst)):\r\n            if len(lst[i]) > max_length:\r\n                max_length = len(lst[i])\r\n        return max_length\r\n\r\n\r","votes":99079.272},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        sub_list = lst[i]\r\n        if len(sub_list) > max_length:\r\n            max_length = len(sub_list)\r\n    return max_length\r\n\r\n\r","votes":107401.912},{"text":"\r\n    max_len = 0\r\n    for i in lst:\r\n        len_temp = len(i)\r\n        if len_temp > max_len:\r\n            max_len = len_temp\r\n    return max_len\r\n\r\n\r\nlst = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i', 'j'], ['k', 'l', 'm'], ['n', 'o', 'p', 'q', 'r', 's', 't']]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":109266.78},{"text":"\r\n    return max(len(sublist) for sublist in lst)\r\n\r\n\r","votes":131603.28},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(len(lst)):\r\n            if (i != j):\r\n                if len(lst[i]) > len(lst[j]):\r\n                    max_length = len(lst[i])\r\n                elif len(lst[i]) == len(lst[j]):\r\n                    max_length = max(max_length, len(lst[i]))\r\n    return max_length\r\n\r\n\r","votes":135046.484},{"text":"\r\n    return max(len(i) for i in lst)\r\n\r\n\r","votes":138053.668},{"text":"\r\n    max_lst = 0\r\n    for i in range(len(lst)):\r\n        if max_lst < len(lst[i]):\r\n            max_lst = len(lst[i])\r\n    return max_lst\r\n\r\n\r","votes":139050.948},{"text":"\r\n    # Initializing a variable to store the maximum sublist length\r\n    max_length = -1\r\n    # Iterating the list\r\n    for i in lst:\r\n        # Checking if the length of the sublist is larger than the previous maximum\r\n        if (len(i) > max_length):\r\n            # Storing the sublist length to the variable\r\n            max_length = len(i)\r\n    # Returning the maximum sublist length\r\n    return max_length\r\n\r\n\r\nlst = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r\n# Find the maximum length of sublist\r\n\r","votes":145391.244},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        if max_length < len(lst[i]):\r\n            max_length = len(lst[i])\r\n    return max_length\r\n\r\n\r","votes":152979.12},{"text":"\r\n    \r\n    if len(lst) == 1:\r\n        return len(lst[0])\r\n    else:\r\n        lst1 = lst[:len(lst)\/\/2]\r\n        lst2 = lst[len(lst)\/\/2:]\r\n        \r\n        l1 = Find_Max_Length(lst1)\r\n        l2 = Find_Max_Length(lst2)\r\n        \r\n        if l1 > l2:\r\n            return l1\r\n        else:\r\n            return l2\r\n    \r\n\r","votes":177391.148},{"text":"\r\n    # Your code goes here\r\n    return max(len(lst[i]) for i in range(len(lst)))\r\n\r\n\r","votes":181403.812},{"text":"\r\n    max_len = 0\r\n    for i in lst:\r\n        if len(i) > max_len:\r\n            max_len = len(i)\r\n    return max_len\r\n\r\n\r","votes":187965.564},{"text":"\r\n\r\n    if len(lst) == 1:\r\n        return len(lst)\r\n    else:\r\n        return max(len(lst[i]) for i in range(len(lst)))\r\n\r\n\r","votes":225525.136},{"text":"\r\n    max_length = 0\r\n    for i in range(0, len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if j - i > max_length:\r\n                max_length = j - i\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [1, 2, 3, 5, 7, 12, 11, 5, 12, 10, 15, 20, 30, 40, 50, 70, 80, 90]\r\n    print(Find_Max_Length(lst))\r\n\r\n# output = 4\r\n# [1, 2, 3, 5, 7, 12, 11, 5, 12, 10, 15, 20, 30, 40, 50, 70, 80, 90], max_length = 4\r\n# [1, 2, 3, 5, 7, 12, 11, 5, 12, 10, 15, 20, 30, 40, 50, 70, 80, 90], max_length = 4\r\n# [1, 2, 3, 5, 7, 12, 11, 5, 12, 10, 15, 20, 30, 40, 50, 70, 80, 90], max_length = 4\r\n# [1, 2, 3, 5, 7, 12, 11, 5, 12, 10, 15, 20, 30, 40, 50, 70, 80, 90], max_length = 4\r\n# [1, 2","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(0, len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if j - i + 1 > max_length:\r\n                max_length = j - i + 1\r\n    return max_length\r\n\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(\"Maximum length of a subarray is\", Find_Max_Length(lst))\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\nprint(\"Maximum length of a subarray is\", Find_Max_Length(lst))\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\r\nprint(\"Maximum length of a subarray is\", Find_Max_Length(lst))\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nprint(\"Maximum length of a subarray is\", Find_Max_Length(lst))\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            max_len = max(max_len, j - i + 1)\r\n    return max_len\r\n\r\n\r\n\"\"\"Test Cases\"\"\"\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(Find_Max_Length(lst))\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(Find_Max_Length(lst))\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8]\r\nprint(Find_Max_Length(lst))\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 10]\r\nprint(Find_Max_Length(lst))\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\nprint","votes":null},{"text":"\r\n    if lst == []:\r\n        return 0\r\n    if len(lst) == 1:\r\n        return 1\r\n    else:\r\n        return Find_Max_Length(lst[1:])+1\r\n\r\n\r\nlst = [1,2,3,4,5,6,7,8,9,10]\r\n\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(0,len(lst)):\r\n        length = 1\r\n        while(i+length < len(lst) and lst[i]==lst[i+length]):\r\n            length+=1\r\n        if(max_length<length):\r\n            max_length = length\r\n    return max_length\r\n\r\n# lst = [2,2,2,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1","votes":null},{"text":"\r\n\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if len(lst[i:j]) > max_length:\r\n                max_length = len(lst[i:j])\r\n    return max_length\r\n\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)+1):\r\n            if len(lst[i:j])>max_len:\r\n                max_len = len(lst[i:j])\r\n    return max_len\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    max_list = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if len(lst[i:j]) > max_list:\r\n                max_list = len(lst[i:j])\r\n    return max_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(\"Maximum length of sublist is: \" + str(Find_Max_Length(lst)))\r\n\r\n\r","votes":null},{"text":"\r\n    # First we find the length of the list.\r\n    length = len(lst)\r\n    # Then we check if the length is 0, if it is 0 our max length is 0\r\n    if length == 0:\r\n        return 0\r\n    # We initialize our max value to 0, and then we check if the first\r\n    # element is a list, if it isn't our max value is 1, if it is a list\r\n    # we initialize our max value to 0 and we start the loop.\r\n    max = 0\r\n    if not isinstance(lst[0], list):\r\n        max = 1\r\n    else:\r\n        max = 0\r\n        for idx in range(0, length):\r\n            # For each element we check if it is a list, if it isn't we\r\n            # add 1 to the max value and we continue to the next element.\r\n            # If it is a list we initialize our current length to 1 and\r\n            # we start the loop again.\r\n            if not isinstance(lst[idx], list):\r\n                max += 1\r\n                continue\r\n            else:\r\n                cur_len = 1\r\n                for idx2 in range(idx, length):\r\n                    if not isinstance(lst[idx2], list):\r\n                        cur_len += 1\r\n                    else:\r\n                        break\r\n                max = max if max > cur_len else cur_len\r\n    return max\r\n\r","votes":null},{"text":"\r\n\r\n    # Get the max length of the list\r\n    max_len = max([len(x) for x in lst])\r\n\r\n    # Get the sublist with max length\r\n    sublist = [x for x in lst if len(x) == max_len]\r\n\r\n    # Return the sublist\r\n    return sublist\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if j - i > max_len:\r\n                max_len = j - i\r\n    return max_len\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if j-i+1 > max_len:\r\n                max_len = j-i+1\r\n                #print('sublist is ', lst[i:j+1])\r\n    return max_len\r\n\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(Find_Max_Length(lst))\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\nprint(Find_Max_Length(lst))\r\n\r\nlst_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\r\n         33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\r\n         62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 7","votes":null},{"text":"\r\n    print(lst)\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst) - 1):\r\n            if len(lst[i:j + 1]) > max_length:\r\n                max_length = len(lst[i:j + 1])\r\n    return max_length\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    lst = [1, 2, 4, 5, 4, 3]\r\n   ","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(1, len(lst)+1):\r\n        for j in range(i, len(lst)+1):\r\n            if j - i + 1 > max_length:\r\n                max_length = j - i + 1\r\n    return max_length\r\n\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(Find_Max_Length(lst))\r\n\r\n\"\"\"\r\nOutput: 4\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    max_length=1\r\n    for i in range(len(lst)):\r\n        for j in range(i+1,len(lst)):\r\n            if j-i+1>max_length:\r\n                max_length=j-i+1\r\n    return max_length\r\n\r\n\r\nlst = [6, 3, 2, 1, 5, 4, 6, 7, 10, 9, 8, 11, 12]\r\nprint (Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if j - i + 1 > max_len:\r\n                max_len = j - i + 1\r\n    return max_len\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 8, 7, 4, 3, 2, 1, 1, 1]\r\n\r\nprint(Find_Max_Length(lst))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    sublist = []\r\n    max = 0\r\n    for i in range(len(lst) - 1):\r\n        if lst[i] == lst[i + 1]:\r\n            sublist.append(lst[i])\r\n        else:\r\n            sublist.append(lst[i])\r\n            if len(sublist) > max:\r\n                max = len(sublist)\r\n            sublist = []\r\n    if len(sublist) > max:\r\n        max = len(sublist)\r\n    return max\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst) + 1):\r\n            if max_length < j - i:\r\n                max_length = j - i\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if j - i + 1 > max_length:\r\n                max_length = j - i + 1\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(len(lst)):\r\n            if i == j:\r\n                continue\r\n            if lst[i] == lst[j]:\r\n                length = j - i\r\n                if length > max_length:\r\n                    max_length = length\r\n    return max_length\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(","votes":null},{"text":"\r\n\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        if lst[i] == \" \":\r\n            if max_length < i:\r\n                max_length = i\r\n    return max_length\r\n\r\n\r\nprint(Find_Max_Length([\"I\", \" \", \"love\", \" \", \"Python\", \" \", \"!\"])","votes":null},{"text":"\r\n    n = len(lst)\r\n    if n == 0:\r\n        return 0\r\n    if n == 1:\r\n        return 1\r\n    max_len = 1\r\n    for i in range(0, n-1):\r\n        for j in range(i+1, n):\r\n            if lst[i] <= lst[j]:\r\n                if j - i > max_len:\r\n                    max_len = j - i\r\n    return max_len\r\n\r\n\r\nlst = [1, 4, 2, 6, 7, 9, 8, 5, 3, 10, 11, 12, 13, 14, 15, 16, 17, 3, 2, 6, 7, 9, 8,\r\n       5, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\r\n\r\nprint(Find_Max_Length(lst))\r\n\r\n\"\"\"\r\nSample Input\r\n\r\n[1, 4, 2, 6, 7, 9, 8, 5, 3, 10, 11, 12, 13, 14, 15, 16, 17, 3, 2, 6, 7, 9, 8,\r\n5, 18, 19, 20, 21, 22, 23, 24, 25, 26, ","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        count = 0\r\n        while lst[i] == 0:\r\n            count += 1\r\n            i += 1\r\n        if max_len < count:\r\n            max_len = count\r\n    return max_len\r\n\r\nif __name__ == '__main__':\r\n    lst = [0,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,","votes":null},{"text":"\r\n    # Base Case\r\n    if len(lst) == 1:\r\n        return 1\r\n    # Recursive Case\r\n    else:\r\n        return (1 + Find_Max_Length(lst[1:]))\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if j - i + 1 > max_len:\r\n                max_len = j - i + 1\r\n    return max_len\r\n\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    m=lst[0]\r\n    for i in range(len(lst)):\r\n        if len(m)<len(lst[i]):\r\n            m=lst[i]\r\n    return m\r\nlst=[['a','b','c'],['a','b','c','d'],['a','b','c','d','e']]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(0, len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if len(lst[i:j]) > max_length:\r\n                max_length = len(lst[i:j])\r\n    return max_length\r\n\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(Find_Max_Length(lst))\r\n# Output :\r\n# 5\r\n\r\nlst2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(Find_Max_Length(lst2))\r\n# Output :\r\n# 4\r\n\r\nlst3 = [1, 2, 3, 4, 5, 6, 7, 8]\r\nprint(Find_Max_Length(lst3))\r\n# Output :\r\n# 3\r\n\r\nlst4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nprint(Find_Max_Length(lst4))\r\n# Output :\r\n# 10\r\n\r\nlst5 = []\r\nprint(Find_Max_Length(lst5))\r\n# Output :\r\n# 0\r\n\r\nlst6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,","votes":null},{"text":"\r\n    # The maximum length of sublist\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)+1):\r\n            if j-i > max_length:\r\n                max_length = j-i\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(Find_Max_Length(lst))\r\n    # Output:\r\n    # 19\r\n    lst = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\n    print(Find_Max_Length(lst))\r\n    # Output:\r\n    # 1\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(Find_Max_Length(lst))\r\n    # Output:\r\n    # 19\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(Find_Max_Length(lst))\r\n    # Output:\r\n    # 19\r\n    lst = [1, 2, ","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if (j-i+1) > max_length:\r\n                max_length = j-i+1\r\n    return max_length\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint('Maximum length of sublist is: {}'.format(Find_Max_Length(lst)))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nQuestion 3: Given an array of integers, find the maximum sum of a subsequence of the array such that the subsequence contains at most 2 distinct elements.\r\n\"\"\"\r","votes":null},{"text":"\r\n\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if j - i + 1 > max_len:\r\n                max_len = j - i + 1\r\n    return max_len\r\n\r\n\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,","votes":null},{"text":"\r\n    # Write your code here\r\n    max_length = 0\r\n    length = 0\r\n    for i in lst:\r\n        if i == 1:\r\n            length += 1\r\n        else:\r\n            max_length = max(max_length, length)\r\n            length = 0\r\n    max_length = max(max_length, length)\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    T = int(input())\r\n    for _ in range(T):\r\n        N = int(input())\r\n        A = list(map(int, input().strip().split()))\r\n        ans = Find_Max_Length(A)\r\n        print","votes":null},{"text":"\r\n    return max(lst)\r\n\r\n\r","votes":null},{"text":"\r\n    import numpy as np\r\n    lst = np.array(lst)\r\n    lengths = []\r\n    for i in range(len(lst)):\r\n        temp = []\r\n        for j in range(i, len(lst)):\r\n            temp.append(lst[j])\r\n        if len(temp) > len(lengths):\r\n            lengths.append(temp)\r\n    return lengths\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\r\nprint(Find_Max_Length(lst))\r\n\r\n# Output\r\n# [array([21, 22, 23, 24]), array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])]\r\n\r\n# Explanation\r\n# 1) First we imported numpy as np.\r\n# 2) Then we converted list into array.\r\n# 3) Then we created an empty list named 'lengths'.\r\n# 4) Now, we iterated through the list from 0 to the length of the list.\r\n# 5) Inside the first for-loop, we created an empty list named 'temp'.\r\n# 6) We iterated through the list from the current index to the length of the list.\r\n# 7) We appended each element of the list to 'temp'.\r\n# 8) Now, we compared the length of 'temp' with the length o","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if j == i:\r\n                max_len = max_len\r\n            else:\r\n                max_len = max(max_len, j - i + 1)\r\n                if j == len(lst) - 1:\r\n                    print(max_len)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    Max_Length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i,len(lst)):\r\n            if(len(lst[i:j+1])>Max_Length):\r\n                Max_Length = len(lst[i:j+1])\r\n    return Max_Length\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    max = 0\r\n    for i in range(len(lst)):\r\n        if (lst[i]):\r\n            k = 1\r\n            while (lst[i + k]):\r\n                k = k + 1\r\n            if (k > max):\r\n                max = k\r\n    return max\r\n\r\n\r\nlst = [1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1]\r\nprint(Find_Max_Length(lst))\r\n\r\n# Output:\r\n# 4\r\n\r\n# Explanation:\r\n# The sublist 1110 has the maximum length of 4.\r\n\r\n# Problem:\r\n# Given a list of 0s and 1s, find the length of the longest sublist which contains all 1s.\r\n\r\n# Constraints:\r\n# 0 <= N <= 10^5\r\n# 0 <= li <= 1\r\n\r\n# Example:\r\n# Input: [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1]\r\n# Output: 4\r\n\r\n# Explanation:\r\n# The sublist 1110 has the maximum length of 4.\r\n\r\n# Problem:\r\n# Given a list of 0s and 1s, find the length of the longest sublist which contains all 1s.\r\n\r\n# Constraints:\r\n# 0 <= N <= 10^5\r\n# 0 <= li <= 1\r\n\r\n# Example:\r\n# Input: [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1]\r\n# Output: 4\r\n\r\n# Explanation:\r\n# The sublist 11","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if max_length < j-i+1:\r\n                max_length = j-i+1\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your solution here\r\n    return max([len(i) for i in lst])\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Test case 1:\r\n    lst = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\r\n    print(Find_Max_Length(lst))\r\n\r\n    # Test case 2:\r\n    lst = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7, 8, 9]]\r\n    print(Find_Max_Length(lst))\r\n\r\n    # Test case 3:\r\n    lst = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\r\n    print(Find_Max_Length(lst))\r\n\r\n    # Test case 4:\r\n    lst = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]\r\n    print(Find_Max_Length(lst))\r\n\r\n    # Test case 5:\r\n    lst = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [","votes":null},{"text":"\r\n    if lst == [] or lst == None:\r\n        return 0\r\n\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        sublist = lst[i:]\r\n        if len(sublist) > max_length:\r\n            max_length = len(sublist)\r\n\r\n    return max_length\r\n\r\n\r\nprint(Find_Max_Length([1, 2, 3, 4, 5]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 6","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        if len(lst) - i > max_length:\r\n            max_length = len(lst) - i\r\n    return max_length\r\n\r\n# Test case\r\nlst = [[1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if j - i > max_length:\r\n                max_length = j - i\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(Find_Max_Length(lst))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\n    print(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, ","votes":null},{"text":"\r\n    max = 0\r\n    for i in range(0,len(lst)):\r\n        for j in range(i+1,len(lst)):\r\n            if (j-i) > max:\r\n                max = j-i\r\n    return max\r\n\r\nlst = [[1,2,3,4,5],\r\n       [1,2,3,5],\r\n       [1,2,3],\r\n       [1,2],\r\n       [1],\r\n       []]\r\nprint(Find_Max_Length(lst))\r\n\r\n# 1.3 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.4 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.5 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.6 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.7 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.8 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.9 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.10 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.11 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.12 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.13 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.14 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.15 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.16 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.17 Write a python function to find the maximum length of sublist.\r\n\r\n# 1.18 Write a python function to find the maximum length of sublist.\r\n\r\n# ","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if (j-i) > max_length:\r\n                max_length = j-i\r\n    return max_length\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    lst = [1, 2, 5, 1, 2, 3, 4, 3, 2, 1, 3, 4, 2, 1, 2, 3, 2, 1, 2, 4, 5, 6, 7, 8, 9]\r\n    print(Find_Max_Length(lst))\r\n    # Output: 10\r\n\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(Find_Max_Length(lst))\r\n    # Output: 9\r\n\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(Find_Max_Length(lst))\r\n    # Output: 19\r\n\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\r\n    print(Find_Max_Length(lst))\r\n    # Output: ","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)+1):\r\n            if len(lst[i:j]) > max_length:\r\n                max_length = len(lst[i:j])\r\n    return max_length\r\n\r\nlst = [5, 4, 2, 7, 3, 8, 1, 9, 0]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r\nprint(\"-----------------------------------------------------------------------------------------\")\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if len(lst[i:j + 1]) > max_len:\r\n                max_len = len(lst[i:j + 1])\r\n    return max_len\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length(lst))\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length(lst))\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length(lst))\r\n\r\nlst = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length(lst))\r\n\r\nlst = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\r\nprint(\"Maximum length of sublist is: \", Find_Max_Length(lst))\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1,len(lst)):\r\n            temp = lst[i:j+1]\r\n            if len(temp)>max_len:\r\n                max_len = len(temp)\r\n    return max_len\r\n\r\nlst=[1,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10,5,8,9,3,4,7,2,6,10","votes":null},{"text":"\r\n    l = len(lst)\r\n    if l == 1:\r\n        return 1\r\n    else:\r\n        lmax = 1\r\n        for i in range(l - 1):\r\n            if lst[i] == lst[i + 1]:\r\n                lmax += 1\r\n            else:\r\n                lmax = 1\r\n        return lmax\r\n\r\n\r","votes":null},{"text":"\r\n    \"\"\"Starting from 0 index.\"\"\"\r\n    \"\"\"For example, if the given list is [1, 2, 3, 4, 5, 7], then the maximum length is 5.\"\"\"\r\n    \"\"\"Return the maximum length.\"\"\"\r\n    print(\"Original list:\", lst)\r\n    lst = sorted(lst)\r\n    print(\"Sorted list:\", lst)\r\n    lst = [lst[i] - lst[i - 1] for i in range(1, len(lst))]\r\n    print(\"Subtracted list:\", lst)\r\n    result = 0\r\n    for i in lst:\r\n        if i > 1:\r\n            result += 1\r\n    print(\"The maximum length is:\", result)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    lst = [1, 2, 3, 4, 5, 7]\r\n    Find_Max_Length(lst)\r\n    lst = [1, 1, 2, 3, 4, 5, 7]\r\n    Find_Max_Length(lst)\r\n    lst = [1, 1, 2, 3, 4, 5, 7, 7]\r\n    Find_Max_Length(lst)\r\n    lst = [1, 1, 2, 3, 4, 5, 7, 7, 7]\r\n    Find_Max_Length(lst)\r\n    lst = [1, 1, 2, 3, 4, 5, 6, 7, 7]\r\n    Find_Max_Length(lst)\r\n    lst = [1, 1, 2, 3, 4, 5, 6, 7, 7, 7]\r\n    Find_Max_Length(lst)\r\n    lst = [1, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7]\r\n    Find_Max_Length(lst)\r\n    lst = [1","votes":null},{"text":"\r\n    l = len(lst)\r\n    c = 0\r\n    max = 0\r\n    for i in range(0, l):\r\n        if lst[i] == 0:\r\n            c = 0\r\n        else:\r\n            c = c + 1\r\n        if c > max:\r\n            max = c\r\n    return max\r\n\r\n\r\nlst = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\r\nprint(Find_Max_Length(lst))\r\n\r\n# lst = [0,0,0,0,0,0]\r\n# print(Find_Max_Length(lst))\r\n\r\n# lst = [0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if lst[i:j + 1]:\r\n                if max_len < j - i + 1:\r\n                    max_len = j - i + 1\r\n    return max_len\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50]","votes":null},{"text":"\r\n    mx=0\r\n    for i in range(len(lst)):\r\n        if lst[i]==1:\r\n            for j in range(i,len(lst)):\r\n                if lst[j]==0:\r\n                    cnt=j-i+1\r\n                    if cnt>mx:\r\n                        mx=cnt\r\n                    break\r\n    return mx\r\n\r\n# Testing: \r\nlst=[0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","votes":null},{"text":"\r\n    # lst = [10,2,3,4,5,6,3,2,5,1,7,8,9]\r\n    lst = sorted(lst)\r\n    max_len = 0\r\n    start = 0\r\n    end = 0\r\n    for i in range(len(lst)-1):\r\n        if lst[i] != lst[i+1]:\r\n            if max_len < end - start + 1:\r\n                max_len = end - start + 1\r\n                start = i\r\n                end = i\r\n            else:\r\n                start = i\r\n                end = i\r\n    if max_len < end - start + 1:\r\n        max_len = end - start + 1\r\n    return max_len\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)+1):\r\n            if max_len < j-i:\r\n                max_len = j-i\r\n    return max_len\r\n\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n    max_length = 0\r\n\r\n    for i in range(len(lst)):\r\n        sub_list = lst[i]\r\n        length = 0\r\n\r\n        for j in range(len(sub_list)):\r\n            if sub_list[j] == '1':\r\n                length += 1\r\n            else:\r\n                length = 0\r\n\r\n            if length > max_length:\r\n                max_length = length\r\n\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    max_l = 0\r\n    for i in range(len(lst)):\r\n        if lst[i] != 0:\r\n            j = i\r\n            while j < len(lst):\r\n                if lst[j] == 0:\r\n                    break\r\n                j += 1\r\n            max_l = max(max_l, j - i)\r\n    return max_l\r\n\r\n\r\nlst = [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        length = 0\r\n        for j in range(i, len(lst)):\r\n            if lst[j] == lst[i]:\r\n                length += 1\r\n            else:\r\n                break\r\n        if length > max_length:\r\n            max_length = length\r\n    print(max_length)\r\n\r\n\r\nlst = [1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,\r\n       ","votes":null},{"text":"\r\n\r\n    if len(lst) == 1:\r\n        return 1\r\n\r\n    max_length = 0\r\n    for index in range(len(lst)):\r\n        temp_list = []\r\n        for i in range(index, len(lst)):\r\n            temp_list.append(lst[i])\r\n            if len(temp_list) > max_length:\r\n                max_length = len(temp_list)\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    lst = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\r\n    print(Find_Max_Length(lst))\r\n\r\n    # Output: 5\r\n\r\n    # Time Complexity: O(n2)\r\n    # The time complexity of this approach is exponential O(n2).\r\n    # The outer loop runs for n number of times.\r\n    # The inner loop runs for n number of times.\r\n    # The time complexity of an algorithm is the number of basic operations\r\n    # that it performs. In this case, the inner loop performs n number of\r\n    # operations which is n2.\r\n    # Hence, the time complexity of this algorithm is O(n2).\r\n\r\n    # Space Complexity: O(n)\r\n    # The space complexity of this approach is linear O(n).\r\n    # The extra space used by this algorithm is proportional to the size of\r\n    # the input. The extra space used by this algorithm is n.\r\n\r\n    # Improved Solution\r\n    # Here is a modified solution that uses a hash map to store the indices\r\n    # of the elements. We traverse the list only once and the time complexity\r\n    # of the algorithm is O(n).\r\n\r\n\r","votes":null},{"text":"\r\n    length = []\r\n    for i in range(0, len(lst)):\r\n        j = i\r\n        while j < len(lst):\r\n            length.append(len(lst[i:j + 1]))\r\n            j = j + 1\r\n    return length.index(max(length))\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if len(lst[i:j]) > max_len:\r\n                max_len = len(lst[i:j])\r\n    return max_len\r\n\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            length = j - i + 1\r\n            if length > max_length:\r\n                max_length = length\r\n    return max_length\r\n\r\n\r\nlst = [2, 3, 1, 5, 6, 7, 4, 8, 9]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r\n# 3. Write a python function to check if an array is a permutation of a given string.\r\n\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if j - i > max_length:\r\n                max_length = j - i\r\n    return max_length\r\n\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if j == i:\r\n                max_len = 1\r\n            elif max_len < (j - i + 1):\r\n                max_len = j - i + 1\r\n                print(lst[i:j + 1])\r\n    return max_len\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n    print(\"Maximum length of sublist is: {}\".format(Find_Max_Length(lst)))\r\n\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    print(\"Maximum length of sublist is: {}\".format(Find_Max_Length(lst)))\r\n\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\r\n    print(\"Maximum length of sublist is: {}\".format(Find_Max_Length(lst)))\r\n\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\r\n    print(\"Maximum length of sublist is: {}\".format(Find_Max_Length(lst)))\r\n\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15","votes":null},{"text":"\r\n    n = len(lst)\r\n    if n == 0:\r\n        return 0\r\n    max_length = 1\r\n    for i in range(1, n):\r\n        if lst[i] > lst[i - 1]:\r\n            max_length += 1\r\n        else:\r\n            max_length = 1\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(len(lst[i])):\r\n            for k in range(j, len(lst[i])):\r\n                if k-j+1 > max_len:\r\n                    max_len = k-j+1\r\n                    result = lst[i][j:k+1]\r\n    return max_len, result\r\n\r\n\r\nlst = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    maxL = 0\r\n    for i in range(len(lst)):\r\n        temp = 1\r\n        for j in range(i, len(lst)):\r\n            if lst[i] == lst[j]:\r\n                temp += 1\r\n            else:\r\n                break\r\n        if temp > maxL:\r\n            maxL = temp\r\n    return maxL\r\n\r\n\r\nlst = [1, 2, 3, 4, 1, 2, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    mx = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if len(lst[i:j+1]) > mx:\r\n                mx = len(lst[i:j+1])\r\n    return mx\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    length = 0\r\n    for i in range(len(lst)):\r\n        if lst[i] == 1:\r\n            length += 1\r\n        else:\r\n            if length > 0:\r\n                length = 0\r\n    return length\r\n\r","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if j - i + 1 > max_length:\r\n                max_length = j - i + 1\r\n    return max_length\r\n\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    max_len = -1\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if j - i > max_len:\r\n                max_len = j - i\r\n                max_sub_list = lst[i:j]\r\n    return max_sub_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = [int(x) for x in input().strip().split()]\r\n        result = Find_Max_Length(arr)\r\n        print(result)\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i,len(lst)):\r\n            if (j - i) > max_len:\r\n                max_len = j - i\r\n    return max_len\r\n\r\n\r\nprint(Find_Max_Length([1,2,3,4,5,6,7,8,9,10]))\r\n# print(Find_Max_Length([1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000]))\r\n# print(Find_Max_Length([1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100,200,300,400,500]))\r\n# print(Find_Max_Length([1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000]))\r\n# print(Find_Max_Length([1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,300","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if j - i + 1 > max_len:\r\n                max_len = j - i + 1\r\n    return max_len\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(1, len(lst)):\r\n        if lst[i] > lst[i - 1]:\r\n            max_len += 1\r\n        else:\r\n            max_len = 0\r\n    return max_len\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if len(lst[i:j]) > max_len:\r\n                max_len = len(lst[i:j])\r\n    return max_len\r\n\r\n\r\n# Test cases\r\n\r\nif __name__ == '__main__':\r\n    print(Find_Max_Length([1, 2, 3, 1, 2, 3]))\r\n    print(Find_Max_Length([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]))\r\n    print(Find_Max_Length([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]))\r\n    print(Find_Max_Length([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]))\r\n    print(Find_Max_Length([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, ","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(0, len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if j - i > max_length:\r\n                max_length = j - i\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(\"The maximum length is:","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if len(lst[i:j]) > max_length:\r\n                max_length = len(lst[i:j])\r\n    return max_length\r\n\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for sub_lst in lst:\r\n        if max_len < len(sub_lst):\r\n            max_len = len(sub_lst)\r\n        \r\n    print (\"Max length of sublist is: \", max_len)\r\n\r\n\r","votes":null},{"text":"\r\n    length = 0\r\n    for i in range(len(lst)-1):\r\n        for j in range(i+1, len(lst)):\r\n            if j-i > length:\r\n                l = lst[i:j]\r\n                length = j-i\r\n    return length\r\n\r\n\r","votes":null},{"text":"\r\n    s=set()\r\n    for i in range(len(lst)):\r\n        for j in range(i,len(lst)):\r\n            s.add(lst[i:j])\r\n    return max([len(x) for x in s])\r\n\r","votes":null},{"text":"\r\n    max_len = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i + 1, len(lst)):\r\n            if j - i > max_len and lst[j] - lst[i] == 1:\r\n                max_len = j - i\r\n    return max_len\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        # This for loop finds the sublist length\r\n        for j in range(i, len(lst)):\r\n            sub_list = lst[i:j + 1]\r\n            if len(sub_list) > max_length:\r\n                max_length = len(sub_list)\r\n    return max_length\r\n\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"\r\n    Testing code\r\n    \"\"\"\r\n    lst = [3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 7, 6, 4, 4, 3, 2, 1, 5, 6, 6, 7, 9, 8, 10]\r\n    print(Find_Max_Length(lst))\r\n","votes":null},{"text":"\r\n    max_lst = []\r\n    for i in range(len(lst)):\r\n        for j in range(i, len(lst)):\r\n            if len(lst[i:j]) > len(max_lst):\r\n                max_lst = lst[i:j]\r\n    return max_lst\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Code here\r\n    length = 0\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        length = 0\r\n        for j in range(i, len(lst)):\r\n            if lst[j] == 1:\r\n                length = length + 1\r\n            else:\r\n                break\r\n        if length > max_length:\r\n            max_length = length\r\n    return max_length\r\n\r\n\r\nlst1 = [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1]\r\nprint(Find_Max_Length(lst1))\r\n\r\nlst2 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\nprint(Find_Max_Length(lst2))\r\n\r\nlst3 = [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ","votes":null},{"text":"\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if len(lst[i:j]) > max_length:\r\n                max_length = len(lst[i:j])\r\n\r\n    return max_length\r\n\r\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nprint(Find_Max_Length(lst))\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(lst)\r\n    dp = [1] * n\r\n    for i in range(n):\r\n        for j in range(i):\r\n            if lst[i] > lst[j]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\nlst = [10, 22, 9, 33, 21, 50, 41, 60, 80]\r\nprint(Find_Max_Length(lst))\r\n\r","votes":null},{"text":"\r\n    if len(lst) == 0 or len(lst) == 1:\r\n        return 0\r\n    max_length = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if lst[i] <= lst[j]:\r\n                max_length = max(max_length, j-i)\r\n    if max_length == 0:\r\n        return len(lst)-1\r\n    return max_length\r\n\r\n\r","votes":null}],"time":{"count":14.0,"avg":143891.9125714286,"std":38822.8843477846,"cov":0.2698058817}}
{"id":563,"question":"def extract_values(text):\r\n    \"\"\"Write a function to extract values between quotation marks of a string.\"\"\"","answers":[{"text":"\r\n\r\n    values = []\r\n    begin_index = 0\r\n\r\n    while True:\r\n        try:\r\n            begin_index = text.index('\"', begin_index)\r\n            end_index = text.index('\"', begin_index+1)\r\n            values.append(text[begin_index+1:end_index])\r\n            begin_index = end_index + 1\r\n\r\n        except ValueError:\r\n            break\r\n\r\n    return values\r\n\r","votes":79330.992},{"text":"\r\n    values = []\r\n    while True:\r\n        try:\r\n            start = text.index('\"')\r\n            end = text.index('\"', start+1)\r\n        except ValueError:\r\n            break\r\n        else:\r\n            values.append(text[start+1:end])\r\n            text = text[end+1:]\r\n    return values\r\n\r\n\r","votes":94440.172},{"text":"\r\n    values = []\r\n    string = text\r\n    while True:\r\n        start_index = string.find('\"') + 1\r\n        end_index = string.find('\"', start_index)\r\n        if end_index == -1:\r\n            break\r\n        value = string[start_index:end_index]\r\n        values.append(value)\r\n        string = string[end_index + 1:]\r\n    return values\r\n\r\n\r","votes":131526.988},{"text":"\r\n    values = []\r\n    for value in text.split('\"')[1::2]:\r\n        values.append(value)\r\n    return values\r\n\r\n\r","votes":138168.512},{"text":"\r\n    \r\n    output = []\r\n    start = text.find('\"')\r\n    while start >= 0:\r\n        end = text.find('\"', start+1)\r\n        output.append(text[start+1:end])\r\n        start = text.find('\"', end+1)\r\n    return output\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n  ","votes":150793.352},{"text":"\r\n    \r\n    values = []\r\n    \r\n    i=0\r\n    while i<len(text):\r\n        if text[i]=='\"':\r\n            i += 1\r\n            start = i\r\n            while text[i]!='\"':\r\n                i += 1\r\n            values.append(text[start:i])\r\n            i += 1\r\n        else:\r\n            i += 1\r\n    \r\n    return values\r\n\r\nif __name__ == '__main__':\r\n    \r\n    text = 'The \"quick\" brown \"fox\" jumps over the lazy dog.'\r\n    print(extract_values(text))\r\n    \r\n    text = 'The quick brown fox jumps over the lazy dog.'\r\n    print(extract_values(text))\r\n    \r\n    text = 'The \"quick\" brown fox jumps over the lazy dog.'\r\n    print(extract_values(text))\r\n    \r\n    text = 'The quick brown fox \"jumps\" over the lazy dog.'\r\n    print(extract_values(text))\r\n    \r\n    text = 'The quick brown fox jumps over the lazy dog.'\r\n    print(extract_values(text))\r\n    \r\n    text = 'The quick brown fox jumps over the lazy dog.'\r\n    print(extract_values(text))\r\n    \r\n    text = 'The quick brown fox jumps over the lazy dog.'\r\n    print(extract_values(text))\r\n    \r\n    text = 'The quick brown fox jumps over the lazy dog.'\r\n    print(extract_values(text))\r\n    \r\n    text = 'The quick brown fox jumps over the lazy dog.'\r\n    print(extract_values(text))\r\n    \r\n    text = 'The quick brown fox jumps over the lazy dog.'\r\n    print(extract_values(text))\r\n    \r\n    text = 'The quick brown fox jumps over the lazy dog.'\r\n    print(extract_values(text))","votes":156289.216},{"text":"\r\n    import re\r\n    return re.findall(r\"\\\"(.*?)\\\"\", text)\r\n\r\n\r","votes":158106.492},{"text":"\r\n    values = []\r\n    start_index = -1\r\n    for i, char in enumerate(text):\r\n        if start_index == -1 and char == \"\\\"\":\r\n            start_index = i\r\n        elif start_index != -1 and char == \"\\\"\":\r\n            values.append(text[start_index + 1:i])\r\n            start_index = -1\r\n    return values\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_text = \"I have \\\"2\\\" cats and \\\"3\\\" dogs\"\r\n    print(\"Extracted values for:\", test_text)\r\n    print","votes":181808.316},{"text":"\r\n    # Your code here\r\n    values = []\r\n    start = 0\r\n    while start < len(text):\r\n        if text[start] == '\"':\r\n            start += 1\r\n            end = start\r\n            while text[end] != '\"':\r\n                end += 1\r\n            values.append(text[start:end])\r\n            start = end + 1\r\n        else:\r\n            start += 1\r\n    return values\r\n\r\n\r\nprint(extract_values('\"Hello\" \"world\" \"!\"'))\r\nprint(extract_values('\"Hello\" world \"!\"'))\r\nprint(extract_values('\"Hello\" \"world\"'))\r\nprint(extract_values('\"Hello\" world'))\r\nprint(extract_values('Hello \"world\"'))\r\nprint(extract_values('\"Hello\"'))\r\nprint(extract_values(''))\r\nprint(extract_values('\"'))\r\nprint(extract_values('\"Hello'))\r\nprint(extract_values('\"Hello\" \"'))\r\nprint(extract_values('\"Hello\" \"world'))\r\nprint(extract_values('\"Hello\" \"world\" \"'))\r\nprint(extract_values('\"Hello\" \"world\" \"!\"'))\r\nprint(extract_values('\"Hello\" \"world\" \"!\" '))\r\n\r\n\r","votes":null},{"text":"\r\n    value = []\r\n    for i in text:\r\n        if i == ' ':\r\n            continue\r\n        elif i == '\"':\r\n            break\r\n        else:\r\n            value.append(i)\r\n    return value\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    pattern = re.compile(r'\"(.*?)\"')\r\n    return pattern.findall(text)\r\n\r\n\r","votes":null},{"text":"\r\n    return [match.group()[1:-1] for match in re.finditer(r'\".*\"', text)]\r\n\r\n\r","votes":null},{"text":"\r\n    # text = \"Sasha's favorite color is 'blue' and her favorite food is 'pizza'.\"\r\n    # text = \"She eats 'pizza' every day and she's a 'cheesehead'.\"\r\n    # text = \"Sasha's favorite color is 'blue' and her favorite food is 'pizza' and she's a 'cheesehead'.\"\r\n    # text = \"She eats 'pizza' every day and she's a 'cheesehead'.\"\r\n    # text = \"Sasha's favorite color is 'blue' and her favorite food is 'pizza' and she's a 'cheesehead'.\"\r\n    # text = \"She eats 'pizza' every day and she's a 'cheesehead'.\"\r\n    # text = \"Sasha's favorite color is 'blue' and her favorite food is 'pizza' and she's a 'cheesehead'.\"\r\n    # text = \"She eats 'pizza' every day and she's a 'cheesehead'.\"\r\n    # text = \"Sasha's favorite color is 'blue' and her favorite food is 'pizza' and she's a 'cheesehead'.\"\r\n    # text = \"She eats 'pizza' every day and she's a 'cheesehead'.\"\r\n    # text = \"Sasha's favorite color is 'blue' and her favorite food is 'pizza' and she's a 'cheesehead'.\"\r\n    # text = \"She eats 'pizza' every day and she's a 'cheesehead'.\"\r\n    # text = \"Sasha's favorite color is 'blue' and her favorite food is 'pizza' and she's a 'cheesehead'.\"\r\n    # text = \"She eats 'pizza' every day and she's a 'cheesehead'.\"\r\n    # text = \"Sasha's favorite color is 'blue' and her favorite food is 'pizza' and she's a 'cheesehead'.\"\r\n    # text = \"She eat","votes":null},{"text":"\r\n    values = []\r\n    if text:\r\n        for item in text.split(','):\r\n            values.append(item.split(':')[1].strip('\"'))\r\n            return values\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            values.append(text[i+1:text.find('\"',i+1)])\r\n    return values\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    quotes = 0\r\n    for i in text:\r\n        if i == '\\\"':\r\n            quotes += 1\r\n            if quotes % 2 != 0:\r\n                result.append(i)\r\n                continue\r\n            else:\r\n                result.append(i)\r\n                continue\r\n        if quotes % 2 == 1:\r\n            result.append(i)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text.split(' '))):\r\n        if i < len(text.split(' '))-1:\r\n            if text.split(' ')[i][-1] == '\"' and text.split(' ')[i+1][0] == '\"':\r\n                values.append(text.split(' ')[i][:-1])\r\n                values.append(text.split(' ')[i+1][1:])\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    text = text.replace('\"', '')\r\n    text = text.replace('\\\\', '')\r\n    text = text.replace('\\'', '')\r\n    text = text.split(' ')\r\n    text = [x for x in text if x]\r\n    text = [x for x in text if x[0] != ']']\r\n    text = [x for x in text if x[0] != '[']\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    values = re.findall(r'\".*\"', text)\r\n    values = list(map(lambda x: x[1:-1], values))\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    print(text)\r\n    return [text[i+1:j] for i, c in enumerate(text) if c == \"'\" for j, c in enumerate(text) if c == \"'\"]\r\n\r\nprint(extract_values('''\"123456789\"'''))\r\nprint(extract_values('''\"123456789\" \"abcd\"''' ))\r\nprint(extract_values('''\"123456789\" \"abcd\" \"efgh\"''' ))\r\nprint(extract_values('''\"123456789\" \"abcd\" \"efgh\" \"jklm\"''' ))\r\nprint(extract_values('''\"123456789\" \"abcd\" \"efgh\" \"jklm\" \"nopq\"''' ))\r\nprint(extract_values('''\"123456789\" \"abcd\" \"efgh\" \"jklm\" \"nopq\" \"rstu\"''' ))\r\nprint(extract_values('''\"123456789\" \"abcd\" \"efgh\" \"jklm\" \"nopq\" \"rstu\" \"vwxy\"''' ))\r\nprint(extract_values('''\"123456789\" \"abcd\" \"efgh\" \"jklm\" \"nopq\" \"rstu\" \"vwxy\" \"z\"''' ))\r\nprint(extract_values('''\"123456789\" \"abcd\" \"efgh\" \"jklm\" \"nopq\" \"rstu\" \"vwxy\" \"z\" \"a1\"''' ))\r\nprint(extract_values('''\"123456789\" \"abcd\" \"efgh\" \"jklm\" \"nopq\" \"rstu\" \"vwxy\" \"z\" \"a1\" \"b2\"''' ))\r\nprint(extract_values(","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\\\"':\r\n            value = ''\r\n            for j in range(i + 1, len(text)):\r\n                if text[j] == '\\\"':\r\n                    values.append(value)\r\n                    i = j\r\n                    break\r\n                else:\r\n                    value += text[j]\r\n    return values\r\n\r\n\r\nif __name__ == '__main__':\r\n   ","votes":null},{"text":"\r\n    result = ''\r\n    for i in text:\r\n        if i == '\"':\r\n            result += i\r\n        else:\r\n            result += '*'\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    return\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n\r\n    for i in text:\r\n        if i == '\"':\r\n            values.append(text[i+1:i+4])\r\n            i += 4\r\n\r\n    return values\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    text = \"\\\"value1\\\" \\\"value2\\\" \\\"value3\\\" \\\"value4\\\"\"\r\n    print(extract_values(text))\r\n\r\n    # This code's output is:\r\n    # ['value1', 'value2', 'value3', 'value4']\r\n\r\n    # NOTE: The code above doesn't work if the string contains unpaired quotation marks.\r\n    # For example:\r\n    text = \"\\\"value1\\\" \\\"value2\\\" \\\"value3\\\" \\\"value4\\\" \\\"value5\"\r\n    print(extract_values(text))\r\n\r\n    # This code's output is:\r\n    # ['value1', 'value2', 'value3', 'value4']\r\n\r\n    # NOTE: The code above doesn't work if the string contains unpaired quotation marks.\r\n    # For example:\r\n    text = \"\\\"value1\\\" \\\"value2\\\" \\\"value3\\\" \\\"value4\\\" \\\"value5\\\"\"\r\n    print(extract_values(text))\r\n\r\n    # This code's output is:\r\n    # ['value1', 'value2', 'value3', 'value4', 'value5']\r\n\r\n\r","votes":null},{"text":"\r\n    start = text.index('\"')\r\n    end = text.index('\"', start+1)\r\n    return text[start+1:end]\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    i = text.find('\"')\r\n    while i != -1:\r\n        i += 1\r\n        j = text.find('\"', i)\r\n        values.append(text[i:j])\r\n        i = text.find('\"', j)\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    if '\"' in text:\r\n        for i in text.split('\"'):\r\n            if len(i) > 1:\r\n                values.append(i)\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    return [text[i+1:j] for i in range(len(text)) if text[i] == '\"' for j in range(i+2,len(text)) if text[j] == '\"']\r\n\r\nprint(extract_values(\"I like 'Python' and 'Java'\"))\r\nprint(extract_values(\"I like 'Python' and 'C++'\"))\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(0, len(text)):\r\n        if text[i] == '\"':\r\n            start = i + 1\r\n            while text[start] != '\"':\r\n                start += 1\r\n            values.append(text[start + 1:i])\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    return re.findall(r'\\\"(.+?)\\\"', text)\r\n\r\n\r","votes":null},{"text":"\r\n    value = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            value.append(text[i+1:text.find('\"', i)])\r\n            break\r\n    return value\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in text:\r\n        if i == '\"':\r\n            values.append(text[text.index(i)+1:text.index(i)+10])\r\n            text = text.replace(f'\"{values[-1]}\"', '')\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    return re.findall(r'\".*?\"', text)\r\n\r\n\r","votes":null},{"text":"\r\n    return [x.strip() for x in text.split() if x.startswith('\"')]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Initialize an empty list to store the values.\r\n    values = []\r\n\r\n    # Check if the text is empty or not.\r\n    if len(text) > 0:\r\n\r\n        # Initialize an empty string to store the value.\r\n        value = \"\"\r\n\r\n        # Iterate over the characters of the text.\r\n        for c in text:\r\n\r\n            # Check if the current character is an opening quotation mark.\r\n            if c == \"\\\"\":\r\n\r\n                # Extract the value and append it to the values list.\r\n                value = extract_value(text, len(value))\r\n                values.append(value)\r\n\r\n    # Return the values.\r\n    return values\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return [item[1:-1] for item in re.findall(r'\\\"(.*?)\\\"', text)]\r\n\r\n\r\nif __name__ == '__main__':\r\n    text = input()\r\n    result = extract_values(text)\r\n    print(*result, sep='\\n')\r\n\r\n\r\n\r\n#","votes":null},{"text":"\r\n    result = []\r\n    for i in range(len(text)):\r\n        if text[i] == \"\\\"\" and text[i+1] != \"\\\"\":\r\n            for j in range(i+1, len(text)):\r\n                if text[j] == \"\\\"\":\r\n                    result.append(text[i+1:j])\r\n                    break\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == \"\\\"\":\r\n            if text[i-1] == \"\\\"\":\r\n                values.append(text[i+1])\r\n                continue\r\n            values.append(text[i+1:])\r\n            break\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"' and text[i - 1] != '\\\\':\r\n            values.append(text[i + 1: i + 4])\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    text_list = text.split('\"')\r\n    values = []\r\n    \r\n    for i in range(0, len(text_list), 2):\r\n        values.append(text_list[i+1])\r\n        \r\n    return values\r\n    \r\n\r","votes":null},{"text":"\r\n    \r\n    values = []\r\n    \r\n    while True:\r\n        pos = text.find('\"')\r\n        if pos == -1:\r\n            break\r\n        \r\n        values.append(text[pos+1:text.find('\"', pos+1)])\r\n        text = text[pos+2:]\r\n    \r\n    return values\r\n\r\nprint(extract_values('My name is \"Mike\". I live in \"New York\".'))\r\n\r","votes":null},{"text":"\r\n    text = text.split(\"\\\"\")\r\n    return [i for i in text if i.isdigit()]\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in text:\r\n        if i == \"\\\"\":\r\n            values.append(text[text.index(i)+1:text.index(i, text.index(i)+1)])\r\n            text = text[text.index(i)+1:text.index(i, text.index(i)+1)]\r\n    return values\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == \"\\\"\":\r\n            value = \"\"\r\n            while text[i] != \"\\\"\":\r\n                value += text[i]\r\n                i += 1\r\n            values.append(value)\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    result = []\r\n    \r\n    for i in text:\r\n        if i == '\"':\r\n            result.append(i)\r\n    \r\n    return result\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    if isinstance(text, str):\r\n        for i in text.split('\"'):\r\n            if i.startswith('\"') and len(i) > 1:\r\n                result.append(i)\r\n    return result\r\n\r\n\r\ntext = \"Hello, \\\"World\\\"! Don't you think so?\"\r\nprint(extract_values(text))\r\n\r\ntext = \"\\\"Hello, World!\\\" Don't you think so?\"\r\nprint(extract_values(text))\r\n\r\ntext = \"\\\"Hello, World!\\\" Don't you think so?\"\r\nprint(extract_values(text))\r\n\r\ntext = \"\\\"Hello, World!\\\" Don't you think so?\"\r\nprint(extract_values(text))\r\n\r\ntext = \"\\\"Hello, World!\\\" Don't you think so?\"\r\nprint(extract_values(text))\r\n\r\ntext = \"\\\"Hello, World!\\\" Don't you think so?\"\r\nprint(extract_values(text))\r\n\r\ntext = \"\\\"Hello, World!\\\" Don't you think so?\"\r\nprint(extract_values(text))\r\n\r\ntext = \"\\\"Hello, World!\\\" Don't you think so?\"\r\nprint(extract_values(text))\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            i += 1\r\n            while True:\r\n                if text[i] == '\"':\r\n                    break\r\n                list1.append(text[i])\r\n                i += 1\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    pattern = r'\"([a-zA-Z0-9]+)\"'\r\n    values = re.findall(pattern, text)\r\n    for value in values:\r\n        print(value)\r\n\r\n\r","votes":null},{"text":"\r\n    # Split the string by quotation marks\r\n    values = text.split('\"')\r\n    # Strip quotation marks from the values\r\n    values = [value.strip() for value in values]\r\n    # Return values\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    return re.findall(r'\"([^\"]*)\"', text)\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for value in text.split(','):\r\n        if value.startswith('\"') and value.endswith('\"'):\r\n            values.append(value.strip('\"'))\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    lst = []\r\n    for i in text.split():\r\n        if i.startswith('\"') and i.endswith('\"') and i != '\"\"':\r\n            lst.append(i)\r\n    return lst\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    text = text.split(' ')\r\n    for i in text:\r\n        if i.startswith('\"') and i.endswith('\"'):\r\n            value = i.replace('\"', '')\r\n            values.append(value)\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    list = []\r\n    for i in text.split(\" \"):\r\n        if '=' in i:\r\n            j = i.split('=')\r\n            list.append(j[1])\r\n    return list\r\n\r\n\r","votes":null},{"text":"\r\n    return [s.strip() for s in text.split('\"') if s]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    text = text.split()\r\n    \r\n    value_list = []\r\n    \r\n    for i in range(len(text)):\r\n        if text[i][0] == '\"' and text[i][-1] == '\"':\r\n            value_list.append(text[i])\r\n            \r\n    return value_list\r\n\r\n    \r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            if text[i+1] == '\"':\r\n                values.append(text[i+2])\r\n                i += 2\r\n            else:\r\n                values.append(text[i+1])\r\n                i += 2\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            start = i + 1\r\n            while text[start] != '\"':\r\n                start += 1\r\n            values.append(text[i + 1:start])\r\n            i = start\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    value = ''\r\n    for i in text:\r\n        if i == '\"':\r\n            if value != '':\r\n                values.append(value)\r\n                value = ''\r\n            else:\r\n                value = ''\r\n        else:\r\n            value += i\r\n    return values\r\n\r\n\r\ntext = 'The \"quick\" \"brown\" \"fox\" \"jumped\" \"over\" \"the\" \"lazy\" \"dog\"'\r\nprint(extract_values(text))  # ['quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\r\n\r\ntext = 'The \"quick\" \"brown\" \"fox\" \"jumped\" \"over\" \"the\" \"lazy\" \"dog\"'\r\nprint(extract_values(text))  # ['quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\r\n\r\ntext = 'The \"quick\" \"brown\" \"fox\" \"jumped\" \"over\" \"the\" \"lazy\" \"dog'\r\nprint(extract_values(text))  # ['quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\r\n\r\ntext = 'The \"quick\" \"brown\" \"fox\" \"jumped\" \"over\" \"the\" \"lazy\" \"dog\"'\r\nprint(extract_values(text))  # ['quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\r\n\r\ntext = 'The \"quick\" \"brown\" \"fox\" \"jumped\" \"over\" \"the\" \"lazy\" \"dog'\r\nprint(extract_values(text))  # ['quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\r\n\r\ntext = 'The \"quick\" \"brown\" \"fox\" \"jumped","votes":null},{"text":"\r\n    a = re.findall(r'\"(.*?)\"',text)\r\n    return a\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for value in text.split(' '):\r\n        if value.startswith('\"') and value.endswith('\"'):\r\n            value = value[1:-1]\r\n            values.append(value)\r\n    print (values)\r\n\r\n\r","votes":null},{"text":"\r\n    # extract values between quotation marks\r\n    values = []\r\n    for i in re.findall(r'\\\"[^\\\"]*\\\"', text):\r\n        values.append(i[1:-1])\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in text.split(';'):\r\n        if i.count('\"') == 2:\r\n            values.append(i[i.index('\"')+1:i.rindex('\"')])\r\n\r\n    return values\r\n\r\n\r\nif __name__ == '__main__':\r\n    text = input('Text: ')\r\n    values = extract_values(text)\r\n    print('Values: ', values)\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for word in text.split():\r\n        if word[0] == '\"':\r\n            values.append(word[1:])\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    try:\r\n        return text[text.index(\"\\\"\")+1:text.index(\"\\\"\", text.index(\"\\\"\")+1)]\r\n    except ValueError:\r\n        return \"No Value Found\"\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    index = 0\r\n    while index < len(text):\r\n        if text[index] == '\"':\r\n            value = ''\r\n            while text[index] != '\"':\r\n                value += text[index]\r\n                index += 1\r\n            values.append(value)\r\n        else:\r\n            index += 1\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)-1):\r\n        if text[i] == '\"' and text[i+1] == '\"':\r\n            value = text[i+2:i+3]\r\n            values.append(value)\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    start = text.find('\"')\r\n    end = text.find('\"', start+1)\r\n    return text[start+1:end]\r\n\r\nprint(extract_values(\"This is a string.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a string with multiple \\\"values\\\" in it.\"))\r\nprint(extract_values(\"This is a strin","votes":null},{"text":"\r\n    return re.findall(r'\"([^\"]*)\"', text)\r\n\r","votes":null},{"text":"\r\n    for i in range(len(text)):\r\n        if str(text[i]) == '\"':\r\n            j = i + 1\r\n            while str(text[j]) != '\"':\r\n                j = j + 1\r\n            yield text[i+1:j]\r\n\r\n\r","votes":null},{"text":"\r\n    return [text[i:j] for i, j in zip(text.find(\"\\\"\"), text.find(\"\\\"\", text.find(\"\\\"\") + 1))]\r\n\r\n\r","votes":null},{"text":"\r\n    list_quotation = []\r\n    for char in text:\r\n        if char == '\"':\r\n            list_quotation.append(char)\r\n    for index, char in enumerate(list_quotation):\r\n        if index % 2 == 0:\r\n            if char == '\"':\r\n                text = text.replace(char, '', 1)\r\n        else:\r\n            if char == '\"':\r\n                text = text.replace(char, '', 1)\r\n    return text\r\n\r\n\r","votes":null},{"text":"\r\n    # Return a list of values\r\n    values = []\r\n    # Split into words\r\n    words = text.split()\r\n    # Iterate through words\r\n    for word in words:\r\n        # If the word starts with a quotation mark, add it to values\r\n        if word.startswith('\"'):\r\n            values.append(word)\r\n            # If the word ends with a quotation mark, add it to values\r\n        if word.endswith('\"'):\r\n            values.append(word)\r\n    return values\r\n\r\n\r\nprint(extract_values('\"hello\" \"world\"'))\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n\r\n    for char in text:\r\n        if char == '\"':\r\n            values.append(text.split('\"')[1])\r\n\r\n    return values\r\n\r\ntext = '\"John\" was in the class \"A\" and \"Amy\" was in the class \"B\"'\r\nprint(extract_values(text))\r\n\r\n\"\"\"Output:\r\n['John', 'Amy']\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    start_index = text.find('\"')\r\n    value = text[start_index+1:text.find('\"', start_index+1)]\r\n    return value\r\n\r","votes":null},{"text":"\r\n    # Extract values between quotation marks of a string.\r\n    # Use regular expression to extract values between quotation marks.\r\n    return re.findall(r'\"(\\w+)\"', text)\r\n\r\n\r","votes":null},{"text":"\r\n    words = text.split()\r\n    values = []\r\n    for word in words:\r\n        if '\"' in word:\r\n            values.append(word[word.find('\"')+1:word.rfind('\"')])\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # create a list of values\r\n    values = []\r\n\r\n    # iterate through the string\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            start_index = i + 1\r\n            end_index = start_index\r\n            for j in range(start_index, len(text)):\r\n                if text[j] == '\"':\r\n                    values.append(text[start_index:end_index])\r\n                    end_index = j\r\n                    start_index = j + 2\r\n                    break\r\n            \r\n    return values\r\n\r\nprint(extract_values(\"The quick brown fox jumps over the lazy dog.\"))\r\nprint(extract_values(\"2x+3\"))\r\nprint(extract_values(\"0\"))\r\nprint(extract_values(\"2x^2+3\"))\r\nprint(extract_values(\"2x^2+3x+1\"))\r\nprint(extract_values(\"2x^2+3x+1\"))\r\nprint(extract_values(\"\\\"Hello\\\"World\"))\r\nprint(extract_values(\"\\\"Hello\\\"\\\"World\\\"\"))\r\nprint(extract_values(\"\\\"Hello\\\"\\\"World\\\"\\\"\"))","votes":null},{"text":"\r\n    list_of_values = []\r\n    \"\"\"Write your code here\"\"\"\r\n    for value in text.split('\"'):\r\n        if value != \"\":\r\n            list_of_values.append(value)\r\n    return list_of_values\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # initialize the list to store the extracted values\r\n    values = []\r\n    \r\n    # split the string at quotation marks\r\n    tokens = text.split('\"')\r\n    \r\n    # loop over the tokens\r\n    for token in tokens:\r\n        # remove the spaces\r\n        token = token.strip()\r\n        \r\n        # check if the token is not an empty string\r\n        if len(token) > 0:\r\n            # append the token to the list\r\n            values.append(token)\r\n            \r\n    # return the list of extracted values\r\n    return values\r\n    \r\n    \r","votes":null},{"text":"\r\n\r\n    values = []\r\n    for i in range(0, len(text)):\r\n        if text[i] == '\"':\r\n            j = i + 1\r\n            while text[j] != '\"':\r\n                j += 1\r\n            values.append(text[i + 1:j])\r\n    return values\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    text = 'The \"quick\" \"brown\" \"fox\" jumps over the \"lazy\" \"dog\" \"back\"'\r\n    print(extract_values(text))\r\n# ['quick', 'brown', 'fox', 'lazy', 'dog', 'back']\r\n\r\n    text = 'The \"quick\" \"brown\" \"fox\" jumps over \"lazy\" \"dog\" \"back\"'\r\n    print(extract_values(text))\r\n# ['quick', 'brown', 'fox', 'lazy', 'dog', 'back']\r\n\r\n    text = 'The \"quick\" \"brown\" \"fox\" jumps over the \"lazy\" \"dog\" \"back\"\r\n    text = 'The \"quick\" \"brown\" \"fox\" jumps over the \"lazy\" \"dog\" \"back\"'\r\n    print(extract_values(text))\r\n# ['quick', 'brown', 'fox', 'lazy', 'dog', 'back']\r\n\r\n    text = 'The \"quick\" \"brown\" \"fox\" jumps over the \"lazy\" \"dog\" \"back'\r\n    print(extract_values(text))\r\n# ['quick', 'brown', 'fox', 'lazy', 'dog']\r\n\r\n    text = 'The \"quick\" \"brown\" \"fox\" jumps over the \"lazy\" \"dog\" \"back'\r\n    print(extract_values(text))\r\n# ['quick', 'brown', 'fox', 'lazy', 'dog']\r\n\r\n    text = 'The \"quick\" \"brown\" \"fox\" jumps over the \"lazy\" \"do","votes":null},{"text":"\r\n    values = []\r\n    for value in re.findall(r'\"(.*?)\"', text):\r\n        values.append(value)\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    # Split the text into a list of words.\r\n    words = text.split()\r\n\r\n    # Iterate over the list of words and check if a word starts with \" and ends with \"\r\n    for i in range(len(words)):\r\n        if words[i].startswith('\"') and words[i].endswith('\"'):\r\n            # If the word starts and ends with \" then delete the \" and add it to the list of values.\r\n            values.append(words[i][1:-1])\r\n\r\n    return values\r\n\r\n\r\ntext = \"This is the first sentence. \\\"This is the second sentence.\\\" And this is the third.\"\r\nvalues = []\r\nprint(extract_values(text))\r\n\r\n# test here\r\ntext = \"This is the first sentence. \\\"This is the second sentence.\\\" And this is the third.\"\r\nprint(extract_values(text))\r\n\r\n# test here\r\ntext = \"This is the first sentence. \\\"This is the second sentence.\\\" And this is the third. \\\"This is the fourth sentence.\\\"\"\r\nprint(extract_values(text))\r\n\r\n# test here\r\ntext = \"This is the first sentence. \\\"This is the second sentence.\\\" And this is the third. \\\"This is the fourth sentence.\\\" \\\"This is the fifth sentence.\\\"\"\r\nprint(extract_values(text))\r\n\r\n# test here\r\ntext = \"This is the first sentence. \\\"This is the second sentence.\\\" And this is the third. \\\"This is the fourth sentence.\\\" \\\"This is the fifth sentence.\\\" \\\"This is the sixth sentence.\\\"\"\r\nprint(extract_values(text))\r\n\r\n# test here\r\ntext = \"This is the first sentence. \\\"This is the second sentence.\\\" And this is the third. \\\"This is the fourth sentence.\\\" \\\"This is the fifth sentence.\\\" \\\"This is the sixth sentence.\\\" \\\"This is the seventh sentence.\\\"\"\r\nprint(extract_values(text))\r\n\r\n# test here\r\ntext = \"This is the first sentence. \\\"This is the second sentenc","votes":null},{"text":"\r\n    list = []\r\n    for word in text.split():\r\n        if word[0] == '\"' and word[-1] == '\"':\r\n            list.append(word)\r\n    return list\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for value in text.split(' '):\r\n        if len(value) > 2 and value[0] == value[-1] and value[0] in ['\"', \"'\"]:\r\n            values.append(value[1:-1])\r\n    return values\r\n\r","votes":null},{"text":"\r\n    output = []\r\n    for i in text:\r\n        if i=='\"':\r\n            output.append(i)\r\n            continue\r\n        else:\r\n            output.append(i)\r\n    return output\r\n\r","votes":null},{"text":"\r\n    arr = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\\\"':\r\n            while text[i] != '\\\"':\r\n                arr.append(text[i])\r\n                i += 1\r\n    return arr\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    index = 0\r\n    while True:\r\n        try:\r\n            start = text.index('\"', index)\r\n            end = text.index('\"', start + 1)\r\n            result.append(text[start + 1:end])\r\n            index = end\r\n        except ValueError:\r\n            break\r\n    return result\r\n\r\n\r\nprint(extract_values('\"first\", \"second\", \"third\"'))\r\nprint(extract_values('\"first\", \"second\", \"third\" \"fourth\"'))\r\nprint(extract_values('\"first\", \"second\", \"third\", \"fourth\"'))\r\nprint(extract_values('\"first\", \"second\", \"third\", \"fourth\", \"fifth\"'))\r\nprint(extract_values('\"first\" \"second\" \"third\" \"fourth\" \"fifth\"'))\r\n\r\n\r","votes":null},{"text":"\r\n    # This is the function to extract values between quotation marks of a string\r\n    result = []\r\n    for i in text.split():\r\n        if i.startswith('\"') and i.endswith('\"'):\r\n            result.append(i[1:-1])\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    return [value for value in text.split() if value.startswith(\"\\\"\")]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(extract_values(\"I like \\\"programming\\\" and \\\"Python\\\".\"))  # ['programming', 'Python']\r\n    print(extract_values(\"In the \\\"21st Century\\\", \\\"Python\\\" is \\\"cool\\\".\"))  # ['21st Century', 'Python', 'cool']\r\n    print(extract_values(\"The \\\"21st Century\\\" \\\"Python\\\" is \\\"cool\\\".\"))  # ['21st Century', 'Python', 'cool']\r\n    print(extract_values(\"The \\\"21st Century\\\" \\\"Python\\\" is \\\"cool\\\", \\\"C++\\\" is \\\"not cool\\\".\"))  # ['21st Century', 'Python', 'cool', 'C++', 'not cool']\r\n    print(extract_values(\"The \\\"21st Century\\\" \\\"Python\\\" is \\\"cool\\\", \\\"C++\\\" is \\\"not cool\\\", \\\"Java\\\" is \\\"not cool\\\".\"))  # ['21st Century', 'Python', 'cool', 'C++', 'not cool', 'Java', 'not cool']\r\n    print(extract_values(\"The \\\"21st Century\\\" \\\"Python\\\" is \\\"cool\\\", \\\"C++\\\" is \\\"not cool\\\", \\\"Java\\\" is \\\"not cool\\\", \\\"C\\\" is \\\"not cool\\\".\"))  # ['21st Century', 'Python', 'cool', 'C++', 'not cool', 'Java', 'not cool', 'C', 'not cool']\r\n    print(extract_values(\"The \\\"21st Century\\\" \\\"Python\\\" is \\\"cool\\\", \\\"C++\\\" is \\\"not cool\\\", \\\"Java\\\" is \\\"not cool\\\", \\\"C\\\" is \\\"not cool\\\", \\\"C#\\\" is \\\"not cool\\\".\"))  # ['21st Century', 'Python', 'cool', 'C++', 'not cool', 'Java', 'not cool', 'C', 'not cool', 'C#', 'not cool']\r\n    print(extract_values(\"The \\\"2","votes":null},{"text":"\r\n    return [text[i + 1:i + 3] for i in range(len(text)) if text[i:i + 2] == \"\\\"\"]\r\n\r\n\r","votes":null},{"text":"\r\n    values = re.findall(r'\"(.*?)\"', text)\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    return [item.strip() for item in re.findall(r'\\\"(.*?)\\\"', text)]\r\n\r","votes":null},{"text":"\r\n    list_of_values = []\r\n    for i in text.split(\" \"):\r\n        if i.startswith('\"') and i.endswith('\"'):\r\n            i = i.strip('\"')\r\n            list_of_values.append(i)\r\n    return list_of_values\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            values.append(text[i+1:text.index('\"', i+1)])\r\n            text = text[text.index('\"', i+1)+1:]\r\n            i = -1\r\n    return values\r\n\r","votes":null},{"text":"\r\n    start = text.index('\"') + 1\r\n    end = text.index('\"', start)\r\n    result = text[start:end]\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == \"'\" and text[i - 1] != \"\\\\\":\r\n            if text[i + 1] == \"'\":\r\n                values.append(\"\")\r\n            else:\r\n                values.append(text[i + 1:text.find(\"'\", i)])\r\n    return values\r\n\r\n\r","votes":null},{"text":"\r\n    try:\r\n        return text.split('\"')[1]\r\n    except IndexError:\r\n        return \"No values found\"\r\n\r\n\r","votes":null},{"text":"\r\n    values = []\r\n    for i in range(len(text)):\r\n        if text[i] == '\"':\r\n            values.append(text[i+1:i+5])\r\n    return values\r\n\r\n\r","votes":null}],"time":{"count":8.0,"avg":136308.005,"std":34184.6696377447,"cov":0.2507898904}}
{"id":564,"question":"def count_Pairs(arr,n):\r\n    \"\"\"Write a python function to count unequal element pairs from the given array.\"\"\"","answers":[{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r","votes":81118.312},{"text":"\r\n    \r\n    # using pairwise diff\r\n    # time complexity : O(n^2)\r\n    # space complexity : O(1)\r\n    \r\n    count = 0\r\n    \r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":90884.68},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":93765.668},{"text":"\r\n\r\n    count = 0\r\n\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n\r\n    return count\r\n\r\n\r\n\r\n\r\n\r","votes":97639.94},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\narr = [4, 1, 2, 1, 3, 4, 3]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n#Output: 6\r\n\r","votes":99298.344},{"text":"\r\n    count = 0\r\n    for i in range(len(arr)-1):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\narr = [1,2,3,4,5]\r\nn = len(arr)\r\nprint(\"Total number of unequal pairs are:\",count_Pairs(arr,n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity : O(n^2)\r\nSpace Complexity : O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\nInput:\r\narr = [1,2,3,4,5]\r\nn = 5\r\nOutput:\r\nTotal number of unequal pairs are: 6\r\n\r\nSAMPLE 2\r\nInput:\r\narr = [4,4,4,4,4]\r\nn = 5\r\nOutput:\r\nTotal number of unequal pairs are: 0\r\n\r\nSAMPLE 3\r\nInput:\r\narr = [1,3,5,7,9]\r\nn = 5\r\nOutput:\r\nTotal number of unequal pairs are: 3\r\n\r\nSAMPLE 4\r\nInput:\r\narr = [1,2,3,4,5]\r\nn = 5\r\nOutput:\r\nTotal number of unequal pairs are: 6\r\n\r\nSAMPLE 5\r\nInput:\r\narr = [1,3,5,7,9]\r\nn = 5\r\nOutput:\r\nTotal number of unequal pairs are: 3\r\n\r\nSAMPLE 6\r\nInput:\r\narr = [1,2,3,4,5]\r\nn = 5\r\nOutput:\r\nTotal number of unequal pairs are: 6\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":101798.796},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i] != arr[j]):\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":105820.496},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__  == \"__main__\":\r\n    n = int(input())\r\n    arr = list(map(int,input().split()))\r\n    print(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\"\"\"\r\nTime complexity : O(n^2)\r\nSpace complexity : O(1)\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":106124.476},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r","votes":109507.688},{"text":"\r\n\r\n    # code here\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n# { \r\n#  Driver Code Starts\r\nif __name__ == '__main__':\r\n    T=int(input())\r\n    for i in range(T):\r\n        n=int(input())\r\n        arr=list(map(int,input().strip().split()))\r\n        result=count_Pairs(arr,n)\r\n        print(result)\r\n\r\n\r\n# Contributed By: P","votes":113382.74},{"text":"\r\n\r\n    # Code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":114925.868},{"text":"\r\n    # code here\r\n    c=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                c+=1\r\n    return c\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    print(count_Pairs(arr, n))\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# Github : https:\/\/github.com\/parajshah\r\n\r\n\r\n\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# Github : https:\/\/github.com\/parajshah\r\n\r\n\r\n\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# Github : https:\/\/github.com\/parajshah\r\n\r\n\r\n\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# Github : https:\/\/github.com\/parajshah\r\n\r\n\r\n\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# Github : https:\/\/github.com\/parajshah\r\n\r\n\r\n\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# Github : https:\/\/github.com\/parajshah\r\n\r\n\r\n\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# Github : https:\/\/github.com\/parajshah\r\n\r\n\r\n\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# Github : https:\/\/github.com\/parajshah\r\n\r\n\r\n\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# Github : https:\/\/github.com\/parajshah\r\n\r\n\r\n\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# Github : https:\/\/github.com\/parajshah\r\n\r\n\r\n\r\n\r\n\r\n# Contributed by Paraj Shah\r\n# ","votes":115532.408},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n","votes":115576.472},{"text":"\r\n    # code here \r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count+=1\r\n    return count\r\n\r\n\r","votes":116082.484},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\n# { \r\n#  Driver Code Starts\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = list(map(int, input().strip().split()))\r\n        print(count_Pairs(arr, n))\r\n# } Driver Code Ends\r\n\r\n# 1 1 1 2 2 3 3 3\r\n# 0 1 1 2 2 3 3 3\r\n\r\n# 1 1 1 2 2 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\r\n# 1 1 1 2 2 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5","votes":118053.916},{"text":"\r\n    #code here\r\n    c=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if (arr[i]!=arr[j]):\r\n                c+=1\r\n    return c\r\n\r\nif __name__ == '__main__':\r\n    #n=int(input())\r\n    n=int(input())\r\n    arr=[int(x) for x in input().strip().split()]\r\n    print(count_Pairs(arr,n))\r\n\r\n\r\n\r\n# #Count Pairs\r\n# Given an array of N elements. The task is to count the number of pairs in the array that have unequal elements.\r\n# Input:\r\n# The first line of input contains an integer T denoting the number of test cases. Then T test cases follow.\r\n# Each test case consists of two lines.\r\n# The first line of each test case contains an integer N denoting the size of the array.\r\n# The second line of each test case contains N space separated integers denoting the elements of the array.\r\n# Output:\r\n# For each test case, in a new line, print the number of pairs having unequal elements.\r\n# Constraints:\r\n# 1 \u2264 T \u2264 10\r\n# 1 \u2264 N \u2264 105\r\n# 1 \u2264 A[i] \u2264 105\r\n# Example:\r\n# Input:\r\n# 2\r\n# 5\r\n# 1 2 3 4 5\r\n# 4\r\n# 1 2 1 2\r\n# Output:\r\n# 4\r\n# 3\r\n# Explanation:\r\n# Testcase 1: There are 4 such pairs (1, 2), (2, 3), (3, 4), (4, 5).\r\n# Testcase 2: There are 3 such pairs (1, 2), (1, 2), (2, 1).\r\n\r\n#Approach","votes":118446.096},{"text":"\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count+=1\r\n    return count\r\n\r\n\r","votes":119581.684},{"text":"\r\n    cnt=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                cnt+=1\r\n    return cnt\r\n\r\n\r\narr=[1,2,3,4,5,6,7,8,9]\r\n\r\nprint(count_Pairs(arr,len(arr)))\r\n\r\n\r\n\"\"\"\r\nSample Input\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nSample Output\r\n10\r\nExplanation\r\nThere are 10 unequal element pairs in the given array.\r\n\r\n\r\n\r\n\r\nTime Complexity: O(n^2), where nn is the size of the array.\r\n\r\nSpace Complexity: O(1), since we are not using any extra data structure.\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":120687.212},{"text":"\r\n    cnt = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]: \r\n                cnt += 1\r\n    return cnt\r\n\r\narr = [1, 2, 2, 3, 5]\r\nn = len(arr)\r\nprint(\"Total number of unequal element pairs are {}\".format(count_Pairs(arr,n)))\r\n\r\n# Time Complexity: O(n2)\r\n# Space Complexity: O(1)\r\n\r\n# Sample Input 1\r\n# arr = [1, 2, 2, 3, 5]\r\n# n = 5\r\n\r\n# Sample Output 1\r\n# Total number of unequal element pairs are 4\r\n\r\n# Sample Input 2\r\n# arr = [1, 1, 1, 1, 1]\r\n# n = 5\r\n\r\n# Sample Output 2\r\n# Total number of unequal element pairs are 0\r\n\r\n# Sample Input 3\r\n# arr = [1, 2, 3, 4, 5]\r\n# n = 5\r\n\r\n# Sample Output 3\r\n# Total number of unequal element pairs are 4\r\n\r\n# Sample Input 4\r\n# arr = [1, 2, 2, 2, 2]\r\n# n = 5\r\n\r\n# Sample Output 4\r\n# Total number of unequal element pairs are 0\r\n\r\n# Sample Input 5\r\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# n = 10\r\n\r\n# Sample Output 5\r\n# Total number of unequal element pairs are 9\r\n\r\n# Sample Input 6\r\n# arr = [1, 2, 3, 4, 5, 6, 7","votes":120800.296},{"text":"\r\n    # code here\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\n\r","votes":121273.768},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if (arr[i]!=arr[j]):\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = list(map(int, input().rstrip().split()))\r\n    n = int(input())\r\n    result = count_Pairs(arr, n)\r\n    print(result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":121387.056},{"text":"\r\n    cnt=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                cnt+=1\r\n    return cnt\r\n\r\narr=[1,2,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]\r\nn=len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n# In[ ]:\r\n\r\n\r\n\r\n\r\n\r\n# In[1]:\r\n\r\n\r\n#Write a python function to count unequal element pairs from the given array.\r\n\r","votes":121861.404},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":124045.424},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\narr = [1,2,2,2,1,2,2,3,4,4]\r\nn = len(arr)\r\nresult = count_Pairs(arr,n)\r\nprint(\"Result:\",result)\r\n\r\n# Sample Test Case","votes":124268.256},{"text":"\r\n    # your code goes here\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\n# { \r\n#  Driver Code Starts\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    for _ in range(0, t):\r\n        n = int(input())\r\n        arr = list(map(int, input().strip().split()))\r\n        result = count_Pairs(arr, n)\r\n        print(result)\r\n# } Driver Code Ends\r\n\r\n\r\n\r\n# Execution Time:0.01\r\n#","votes":126139.492},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r","votes":130671.2},{"text":"\r\n    count=0\r\n    for i in range(len(arr)-1):\r\n        for j in range(i+1,len(arr)):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 1, 2, 3, 4, 4, 5, 5, 6]\r\n    n = len(arr)\r\n    print(count_Pairs(arr, n))\r\n    arr = [1, 2, 3]\r\n    n = len(arr)\r\n    print(count_Pairs(arr, n))\r\n    arr = [1, 2, 3, 4, 5, 6]\r\n    n = len(arr)\r","votes":134264.688},{"text":"\r\n    count=0\r\n    arr.sort()\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r","votes":140726.82},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    arr = []\r\n    for _ in range(n):\r\n        arr.append(int(input()))\r\n    result = count_Pairs(arr, n)\r\n    print(result)\r\n\r\n\"\"\"\r\nInput Format:\r\nThe first line of input contains the value N.\r\nThe second line of input contains N space separated values of the array.\r\n\r\nOutput Format:\r\nThe first line of output contains the count of unequal element pairs.\r\n\r\nConstraints:\r\n1 <= N <= 10^6\r\n\r\nSample Input:\r\n6\r\n1 2 2 3 3 4\r\nSample Output:\r\n3\r\n\r\nExplanation:\r\nThere are 3 unequal pairs in the given array {1, 2, 2, 3, 3, 4}\r\n\"\"\"\r\n\r\n# Python 3 program to count pairs in an array\r\n# with different elements\r\n\r\n# function to count pairs in an array\r\n\r\n\r","votes":141223.432},{"text":"\r\n    # code here\r\n    c=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                c+=1\r\n    return c\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    result = count_Pairs(arr, n)\r\n    print(result)\r\n    \r\n","votes":142907.772},{"text":"\r\n    # The function takes two parameters:\r\n    #     arr: an array of integers.\r\n    #     n: the size of the array.\r\n    #     It returns the count of unequal element pairs.\r\n    \r\n    # Code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":144412.776},{"text":"\r\n    c=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                c=c+1\r\n    return c\r\n\r\n\r","votes":149144.308},{"text":"\r\n    c=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                c+=1\r\n    return c\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":149223.216},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r","votes":152203.784},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if (arr[i] != arr[j]):\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,2,2,3,4]\r\n    n = len(arr)\r\n    print(count_Pairs(arr,n))\r\n\r\n\r\n\"\"\"\r\nOutput:\r\n3\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n\r\n\r","votes":153933.2},{"text":"\r\n    \r\n    # code here\r\n    res = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                res+=1\r\n    return res\r\n    \r\n\r\n\r\n#{ \r\n#  Driver Code Starts\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = list(map(int, input().strip().split()))\r\n       ","votes":158259.544},{"text":"\r\n    \r\n    #code here\r\n    count=0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\narr = [2,1,3,1,2]\r\nn = len(arr)\r\n\r\nprint(\"Count of Unequal Pairs is\", count_Pairs(arr,n))\r\n\r\n\r\n\r\n# Output :\r\n\r\n# Count of Unequal Pairs is 3\r\n","votes":158894.208},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == \"__main__\":\r\n    arr = [1,2,3,3,4]\r\n    n = len(arr)\r\n    print(\"Number of Pairs of Unequal Elements in the array is\",count_Pairs(arr,n))\r\n\r\n\r\n#Output:\r\n#Number of Pairs of Unequal Elements in the array is 2\r\n\r\n#Time Complexity:\r\n#Best Case : O(n)\r\n#Average Case : O(n^2)\r\n#Worst Case : O(n^2)\r\n\r\n#Space Complexity : O(1)\r\n\r\n#Explanation:\r\n#The algorithm makes two passes through the array, one to count the number of pairs and one to count the number of unequal pairs.\r\n\r\n#The first pass is O(n) because it will visit each element only once.\r\n\r\n#The second pass is O(n^2) because it will visit each element n times, making the total visit O(n) * O(n).\r\n\r\n#The total time complexity is O(n) + O(n^2) = O(n^2).\r\n\r\n#The space complexity is constant because it does not use any extra space.\r\n\r\n#A variation of this algorithm is to count the number of pairs with a single pass by using a hash table. We can use a hash table to count the number of occurrences of each element.\r\n\r\n#For example, if the numbers in the array are 1, 2, 3, 3, 4, the hash table would look like this:\r\n#1:1\r\n#2:1\r\n#3:2\r\n#4:1\r\n\r\n#The total number of pairs with unequal elements is the sum of (# of occurrences of each element - 1).","votes":161093.216},{"text":"\r\n    # Code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 1, 1, 2, 2, 3, 1]\r\n    n = len(arr)\r\n    print(count_Pairs(arr, n))\r\n\r\n\r\n\"\"\"\r\nTime complexity: O(n^2)\r\nSpace complexity: O(1)\r\n\"\"\"\r\n\r\n\r","votes":165387.94},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr = [1,2,1,1,2]\r\nn = len(arr)\r\ncount_Pairs(arr,n)\r\n\r\n\r\n\"\"\"\r\nOutput: 3\r\n\r\nExplanation: There are three unequal pairs in the array\r\n            1. 1st and 3rd element, 2nd and 4th element\r\n            2. 1st and 4th element, 2nd and 3rd element\r\n            3. 1st and 4th element, 3rd and 4th element\r\n\"\"\"\r\n","votes":172395.324},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count+=1\r\n    return count\r\n\r\n\r\n#main\r\narr = [1,1,2,3,4,4,4]\r\nn = len(arr)\r\n","votes":175178.292},{"text":"\r\n    cnt = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                cnt+=1\r\n    return cnt\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,1,1,2,2,3,4,5,5,5]\r\n    n = len(arr)\r\n\r\n    print(\"Number of Pairs of unequal element in the array is: \",count_Pairs(arr,n))\r\n\r\n    # output\r\n    # Number of Pairs of unequal element in the array is","votes":181607.688},{"text":"\r\n    #code here\r\n    count = 0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    result = count_Pairs(arr, n)\r\n    print(result)\r\n\r\n# Sample Input :-\r\n# 4\r\n# 3 3 2 2\r\n\r\n# Sample Output :-\r\n# 2\r\n\r\n# Explanation :- Count of unequal pairs is 2\r\n# 3 3 = 0\r\n# 3 2 = 1\r\n# 2 2 = 0\r\n# 2 3 = 1\r\n\r\n# Time Complexity :- O(n*n)\r\n# Space Complexity :- O(1)\r\n\r\n# Problem Link : https:\/\/edabit.com\/challenge\/Q7zFK4JU","votes":181900.204},{"text":"\r\n    # Code here\r\n    cnt=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                cnt+=1\r\n    return cnt\r\narr = [1, 2, 3, 4]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":185625.888},{"text":"\r\n    \r\n    # Code here\r\n    c=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                c+=1\r\n    return c\r\n\r","votes":190888.448},{"text":"\r\n    count = 0\r\n\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\r\nn = len(arr)\r\n\r\nprint(count_Pairs(arr,n))\r\n\r\n# Output:\r\n# 10\r\n\r\n# Explanation:\r\n# The pairs are [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4].\r\n\r\n# Solution:\r\n\r\n\r","votes":191650.352},{"text":"\r\n    c=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if (arr[i]!=arr[j]):\r\n                c+=1\r\n    return c\r\n\r\narr = [1,2,3,1,2,3]\r\nn = len(arr)\r\nprint(\"Number of pairs of unequal elements in the array are:\",count_Pairs(arr,n))\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r","votes":191714.788},{"text":"\r\n    count=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return(count)\r\n\r","votes":200530.316},{"text":"\r\n    count = 0\r\n    for i in range(0, n-1):\r\n        for j in range(i+1, n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = count_Pairs(arr, n)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n#","votes":207159.036},{"text":"\r\n    \r\n    count=0\r\n    \r\n    for i in range(0,n-1):\r\n        \r\n        for j in range(i+1,n):\r\n            \r\n            if arr[i]!=arr[j]:\r\n                \r\n                count+=1\r\n    \r\n    return count\r\n\r\n\r\n\r\narr=[2,1,2,3,4,5]\r\n\r\nn=len(arr)\r\n\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n'''\r\n\r\nInput:\r\n    \r\n    arr=[2,1,2,3,4,5]\r\n\r\nOutput:\r\n\r\n    3\r\n\r\nExplanation:\r\n\r\n    Pair (2,1) is unequal pair\r\n    Pair (2,3) is unequal pair\r\n    Pair (4,5) is unequal pair\r\n\r\n'''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":208067.392},{"text":"\r\n    #code here\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\narr = [1, 1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]\r\nn = len(arr)\r\ncount = count_Pairs(arr,n)\r\nprint(count)\r\n\r\n\r\n# 11. In the problem, we have to find the maximum sum of a subarray from the given array. \r\n# The problem is similar to the maximum sum subarray problem. \r\n# The difference here is that subarray may contain duplicate element.\r\n\r\n\r","votes":209175.552},{"text":"\r\n    # code your solution here\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r","votes":209643.84},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count = count + 1\r\n    return count\r\n\r\n\r","votes":219015.844},{"text":"\r\n    ans=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                ans+=1\r\n    return ans\r\n\r\narr = [1,1,2,2,3,3]\r\nn = len(arr)\r\n","votes":220147.32},{"text":"\r\n    res = 0\r\n    for i in range(n):\r\n        for j in range(i,n):\r\n            if arr[i] != arr[j]:\r\n                res += 1\r\n    return res\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int,input().split()))\r\n    print(count_Pairs(arr,n))\r\n\r\n# Sample Input\r\n\"\"\"\r\n5\r\n1 2 2 3 4\r\n\"\"\"\r\n\r\n# Sample Output\r\n\"\"\"\r\n2\r\n\"\"\"\r\n\r\n# Explanation\r\n\r\n# If we are looking for unequal element pairs from the given array:\r\n# [1, 2, 2, 3, 4].\r\n\r\n# There are two unequal element pairs in the array:\r\n# (1, 2), (2, 3).\r\n\r\n# Hence, the output is 2.\r\n\r\n# Time Complexity: O(n^2) as we are iterating over the array twice.\r\n\r\n# Space Complexity: O(1) as we are not using any extra space.\r\n\r\n# Method 2 (Counting sort)\r\n\r","votes":228953.952},{"text":"\r\n    count=0\r\n    \r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count+=1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    result = count_Pairs(arr,n)\r\n    print(result)\r\n\r\n#input\r\n#5\r\n#1 2 3 4 5\r\n\r\n#output\r\n#4\r\n\r\n\r\n#in the above question the elements are unequal if the elements are not equal to each other .\r\n#in the above question we have to count the number of different pairs present in the array.\r\n#if we observe the array carefully we can see that two different elements are present in 4 different pairs.\r\n#we have to count the number of pairs which do not have equal elements in them.\r\n#the above function will return the correct ans.\r\n\r\n#in the above function we are traversing the array in a nested fashion.\r\n#we have a loop which starts from 0 to n-1.\r\n#in the loop we have another loop which starts from i+1 to n-1.\r\n#the nested loop will check the number of pairs which have unequal elements.\r\n#if the elements are unequal we increment the count by 1.\r\n#we return the count.\r\n\r\n#input\r\n#3\r\n#1 2 3\r\n\r\n#output\r\n#0\r\n\r\n#in the above input the elements are equal to each other so we","votes":262194.164},{"text":"\r\n    cnt = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\nn=int(input())\r\narr=list(map(int,input().split()))\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if arr[i] != arr[j] and i != j:\r\n                count+=1\r\n    return count\r\n\r\n\r\narr = [1, 1, 2, 2, 3, 3]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))\r\n\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    n = len(arr)\r\n    print(count_Pairs(arr, n))\r\n\r\n'''\r\nSample Input: \r\n\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nSample Output: \r\n\r\n6\r\n\r\nExplanation:\r\n\r\nThe expected output for the above sample input is 6.\r\n\r\nAs the values in the array are","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\narr = [1, 2, 3, 3, 2, 1]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n\"\"\"The time complexity of the above algorithm is O(n","votes":null},{"text":"\r\n    return count_Pairs_rec(arr,n,0)\r\n\r","votes":null},{"text":"\r\n    \r\n    # code starts here\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]==arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\n\r\n\r\n\n\n\n\n\n\n# --------------","votes":null},{"text":"\r\n    \r\n    # code here\r\n    \r\n    # return count\r\n    \r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 1]\r\n    n = len(arr)\r\n    print(count_Pairs(arr, n))\r\n\r\n\r\n\r\n\"\"\"\r\nTime Complexity - O(n2) \r\nSpace Complexity - O(1)\r\n\r\nInput: arr=[1, 2, 3, 4, 1]\r\nOutput: 4\r\nExplanation: The pairs are (1, 2), (1, 3), (1, 4), (2, 3)\r\n\r\nConstraints:\r\n1 <= n <= 104\r\n1 <= arr[i] <= 105\r\n\r\nSample Input:\r\narr = [1, 2, 3, 4, 1]\r\nn = 5\r\n\r\nSample Output:\r\n4\r\n\r\nExplanation:\r\nThere are 4 unequal pairs of elements from the array.\r\n(1, 2), (1, 3), (1, 4), (2, 3)\r\n\r\nSample Input:\r\narr = [1, 2, 3, 3, 1]\r\nn = 5\r\n\r\nSample Output:\r\n2\r\n\r\nExplanation:\r\nThere are 2 unequal pairs of elements from the array.\r\n(1, 2), (2, 3)\r\n\r\nSample Input:\r\narr = [1, 1, 1, 1, 1]\r\nn = 5\r\n\r\nSample Output:\r\n0\r\n\r\nExplanation:\r\nThere are no unequal pairs of elements fro","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n = len(arr)\r\n    print(count_Pairs(arr,n))\r\n\r\n\"\"\"\r\nTime Complexity","votes":null},{"text":"\r\n    i=0\r\n    j=1\r\n    while j<n:\r\n        if(arr[i]==arr[j]):\r\n            j+=1\r\n        else:\r\n            i+=1\r\n            j+=1\r\n    return i\r\n\r\narr=[1,2,3,4,5,5,6,7,8,9,10]\r\nn=len(arr)\r\n\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n# Approach 2\r\n\r","votes":null},{"text":"\r\n    # code here\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if","votes":null},{"text":"\r\n    # Code here\r\n    count = 0\r\n    s = set()\r\n    for i in range(n):\r\n        s.add(arr[i])\r\n    return len(s)\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    result = count_Pairs(arr,n)\r\n    print(result)\r\n\r\n# Python3 program to count unequal\r\n# element pairs from the given array\r\n\r\n# Function to count unequal element\r\n# pairs from the given array\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\nprint(count_Pairs(arr, n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nQuestion :\r\n\r\nYou are given an array of integers. Your task is to count the number of unequal pairs of integers in this array.\r\n\r\nInput Format\r\n\r\nThe first line of input contains an integer n, denoting the number of elements in the array.\r\n\r\nThe second line of input contains the n space-separated integers of the array.\r\nOutput Format\r\n\r\nPrint the number of unequal pairs of integers in the array.\r\nConstraints\r\n\r\n1<=n<=100\r\n0<=arr[i]<=100\r\nSample Input 0\r\n\r\n5\r\n1 1 2 1 3\r\nSample Output 0\r\n\r\n4\r\nExplanation 0\r\n\r\nThere are four unequal pairs of integers in the array: (1, 2), (1, 3), (2, 3), and (1, 1).\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    c=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                c+=1\r\n    return c\r\n\r\narr = [1, 2, 3, 4, 1, 2]\r\nn = len(arr)\r\nprint(count_Pairs(arr, n))\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\n\r\n\r\n\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\n\r\nresult = count_Pairs(arr,n)\r\nprint(result)\r\n\r\n\r\n\r\n#Solution 2\r","votes":null},{"text":"\r\n    c = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                c+=1\r\n    return c\r\n\r\n\r\nn = int(input(\"Enter the size of the array: \"))\r\narr = list(map(int,input(\"Enter the array elements: \").split()))\r\n\r\nprint(count_Pairs(arr,n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    l=[]\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                l.append((arr[i],arr[j]))\r\n    return l\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    count_pairs=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if(arr[i]!=arr[j]):\r\n                count_pairs+=1\r\n    return count_pairs\r\n\r\nn=int(input())\r\narr=list(map(int,input().split()))\r\nprint(count_Pairs(arr,n))\r\n\r\n#Reference: w3resource","votes":null},{"text":"\r\n    # code here\r\n    count = 0\r\n    res = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\narr=eval(input(\"Enter the list of integers:\"))\r\nn=len(arr)\r\nprint(\"The count of unequal element pairs from the given array is: \",count_Pairs(arr,n))\r\n\r\n\"\"\"\r\nOutput:\r\nEnter the list of integers: [1, 2, 1, 2, 3, 1, 2]\r\nThe count of unequal element pairs from the given array is:  4\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(1)\r\n\r\nExplanation:\r\nAlgorithm:\r\n\r\nWe traverse the array elements using a nested loop. For each element, we traverse the remaining elements and count the number of pairs of unequal elements.\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # code here\r\n    count = 0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1, 2, 2, 1, 1, 3]\r\nn = len(arr)\r\n\r\ncount = count_Pairs(arr, n)\r\n\r\nprint(\"Count =\", count)\r\n\r\n\"\"\"\r\nInput:\r\nn = 6\r\narr[] = {1, 2, 2, 1, 1, 3}\r\nOutput:\r\nCount = 4\r\nExplanation:\r\nThe pairs of unequal \r\nelements are (1, 2), (1, 3), (2, 3) and (2, 1).\r\n\r\nInput:\r\nn = 4\r\narr[] = {1, 2, 3, 4}\r\nOutput:\r\nCount = 0\r\nExplanation:\r\nNo pairs of unequal \r\nelements.\r\n\r\nInput:\r\nn = 5\r\narr[] = {1, 1, 2, 2, 4}\r\nOutput:\r\nCount = 2\r\nExplanation:\r\nThe pairs of unequal \r\nelements are (1, 2) and (1, 4).\r\n\r\nInput:\r\nn = 5\r\narr[] = {1, 1, 1, 2, 3}\r\nOutput:\r\nCount = 4\r\nExplanation:\r\nThe pairs of unequal \r\nelements are (1, 2), (1, 3), (1, 4) and (2, 3).\r\n\r\nInput:\r\nn = 1\r\narr[] = {1}\r\nOutput:\r\nCount = 0\r\nExplanation:\r\nNo pairs of unequal \r\nelements.\r\n\r\nInput:\r\nn = 2\r\narr[] = {2","votes":null},{"text":"\r\n    c = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if arr[i] != arr[j] and i != j:\r\n                c += 1\r\n    return c\r\n\r","votes":null},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if ((arr[i] != arr[j]) and (arr[i]!=arr[j+1])):\r\n                count = count + 1\r\n    \r\n    return count\r\n    \r\nprint(\"Number of unequal element pairs : \",count_Pairs([1,2,3,4,5,6,7,8],8))\r\nprint(\"Number of unequal element pairs : \",count_Pairs([1,2,3,4,5,6,7,8,8],9))\r\nprint(\"Number of unequal element pairs : \",count_Pairs([1,2,3,4,5,6,7,8,8,9],10))\r\nprint(\"Number of unequal element pairs : \",count_Pairs([1,2,3,4,5,6,7,8,8,9,9],11))\r\nprint(\"Number of unequal element pairs : \",count_Pairs([1,2,3,4,5,6,7,8,8,9,9,10],12))\r\nprint(\"Number of unequal element pairs : \",count_Pairs([1,2,3,4,5,6,7,8,8,9,9,10,11],13))\r\nprint(\"Number of unequal element pairs : \",count_Pairs([1,2,3,4,5,6,7,8,8,9,9,10,11,12],14))\r\nprint(\"Number of unequal element pairs : \",count_Pairs([1,2,3,4,5,6,7,8,8,9,9,10,11,12,13],15))\r\nprint(\"Number of unequal element pairs : \",count_Pairs([1,2,3,4,5,6,7,8,8,9,9,10,11","votes":null},{"text":"\r\n    # your code goes here\r\n    l=[]\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                l.append([arr[i],arr[j]])\r\n    return l\r\n\r\nif __name__=='__main__':\r\n    n = int(input(\"Enter number of elements in the array: \"))\r\n    arr = list(map(int, input(\"Enter the elements of the array: \").split()))\r\n    print(\"The number of unequal element pairs are: \", count_Pairs(arr,n))\r\n\r\n\r\n\r\n# Time Complexity","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr = [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(0,n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\narr = [1,2,3","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i!=j:\r\n                if arr[i]!=arr[j]:\r\n                    count+=1\r\n    return count\r\n\r\n\r\narr = list(map(int, input().rstrip().split()))\r\nn = int(input())\r\n","votes":null},{"text":"\r\n    \r\n    c={}\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i==j:\r\n                continue\r\n            if arr[i]==arr[j]:\r\n                c[arr[i]]=c.get(arr[i],0)+1\r\n    return c\r\n\r\nif __name__ == '__main__':\r\n    arr = [2, 3, 4, 3, 4, 5, 5, 6]\r\n    n = len(arr)\r\n    print(\"Total number of unequal element pairs are\",count_Pairs(arr,n))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n^2)\r\nSpace Complexity: O(n)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nEnter the size of the array: 8\r\nEnter the elements: 2 3 4 3 4 5 5 6\r\n","votes":null},{"text":"\r\n    freq = {}\r\n    for i in range(n):\r\n        if arr[i] not in freq:\r\n            freq[arr[i]] = 0\r\n    for i in range(n):\r\n        freq[arr[i]] += 1\r\n    ans = 0\r\n    for i in range(n):\r\n        if arr[i] != arr[i+1]:\r\n            ans += (freq[arr[i]]-1)*freq[arr[i+1]]\r\n            ans += (freq[arr[i+1]]-1)*freq[arr[i]]\r\n    return ans\r\n\r\n\r","votes":null},{"text":"\r\n    arr.sort()\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] != arr[i + 1]:\r\n            count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        if(arr[i] != arr[i+1]):\r\n            count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 4, 5]\r\n    n = len(arr)\r\n    print('Unequal element pairs  : ', count_Pairs(arr, n))\r\n\r\n    arr1 = [1, 2, 2, 2]\r\n    n1 = len(arr1)\r\n    print('Unequal element pairs  : ', count_Pairs(arr1, n1))\r\n\r\n    arr2 = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\r\n    n2 = len(arr2)\r\n    print('Unequal element pairs  : ', count_Pairs(arr2, n2))\r\n\r\n    arr3 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    n3 = len(arr3)\r\n    print('Unequal element pairs  : ', count_Pairs(arr3, n3))\r\n\r\n    arr4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    n4 = len(arr4)\r\n    print('Unequal element pairs  : ', count_Pairs(arr4, n4))\r\n\r\n    arr5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\n    n5 = len(arr5)\r\n    print('Unequal element pairs  : ', count_Pairs(arr5, n5))\r\n\r\n    arr6 = ","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\narr = [1, 1, 1, 1","votes":null},{"text":"\r\n    count=0\r\n    for i in range(0,n-1):\r\n        for j in range(i+1,n):\r\n            if arr[i]< arr[j]:\r\n                count+=1\r\n    return count\r\n\r\narr=[1,2,3,4,5]\r\nn=len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n#Sample input:\r\n#1 2 3 4 5\r\n#Sample output:\r\n#","votes":null},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(n-1):\r\n        for j in range(i+1, n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = list(map(int, input().rstrip().split()))\r\n    n = len(arr)\r\n\r\n    print(count_Pairs(arr,n))\r\n\r\n\r\n'''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i != j and arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\narr = [1, 1, 3, 5, 5]\r\nn = len(arr)\r\nprint(count_Pairs(arr,n))\r\n\r\n#OUTPUT: 4\r\n\r\n\r\n#Time Complexity: O(n^2)\r\n#Space Complexity: O(1)\r\n\r\n#Alternative Solution:\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                count+=1\r\n    print(count)\r\n    return\r\n\r\n\r\narr1=[1, 2, 1, 1, 1, 2, 3, 4, 2, ","votes":null},{"text":"\r\n    count=0\r\n    for i in range(n-1):\r\n        for j in","votes":null},{"text":"\r\n    # code here\r\n    even=0\r\n    for i in range(len(arr)-1):\r\n        if(arr[i]!=arr[i+1]):\r\n            even+=1\r\n    return even\r\n    \r\narr = [1,1,2,2,3]\r\nn = len(arr)\r\nprint(count_Pairs","votes":null},{"text":"\r\n    cnt=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i]!=arr[j]:\r\n                cnt+=1\r\n    return cnt\r\n\r\n\r\narr = [5, 10, 15, 20, 5, 10, 15, 20, 5, 10, 15, 20, 5, 10, 15, 20]\r\nn = len(arr)\r\nprint(\"Total Unequal Pairs are:\",count_Pairs(arr,n))\r\n\r\n\r\n#Output\r\nTotal Unequal Pairs are: 15\r\n\r\n\r\n#T","votes":null},{"text":"\r\n    # Your code here\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                count += 1\r\n    return count\r\n\r\n\r\n\r\n\r\narr = [3, 5, 1, 2, 1, 3, 4, 5, 6, 7]\r\n\r\nn = len(arr)\r\nprint(count_Pairs(arr,","votes":null},{"text":"\r\n    \r\n    m = set()\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if arr[i] != arr[j]:\r\n                m.add((arr[i],arr[j]))\r\n    return len(m)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    n = int(input())\r\n    arr = list(map(int,input().split()))\r\n    print(count_Pairs(arr,n))\r\n\r\n\r\n\"\"\"\r\nInput:\r\n\r\n5\r\n1 2 1 3 1\r\n\r\nOutput:\r\n\r\n3\r\n\r\n\r\nExplanation:\r\n\r\nThere are 3 unequal pairs in the array. \r\n\r\n(1, 2), (1, 3) and (1","votes":null},{"text":"\r\n    \r\n    return(arr.count(arr[0])-1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null}],"time":{"count":56.0,"avg":148503.5264285714,"std":41612.0656303987,"cov":0.280209276}}
{"id":565,"question":"def split(word):\r\n    \"\"\"Write a python function to split a string into characters.\"\"\"","answers":[{"text":"\r\n    return [char for char in word]\r\n\r\n\r","votes":64358.708},{"text":"\r\n    return list(word)\r\n\r\n\r","votes":66178.736},{"text":"\r\n    return [letter for letter in word]\r\n\r\n\r\n","votes":70057.156},{"text":"\r\n\r\n    a = list(word)\r\n    return a\r\n\r\n\r","votes":72900.772},{"text":"\r\n    return [letter for letter in word]\r\n\r\n\r","votes":75645.152},{"text":"\r\n    wordlist = []\r\n    for char in word:\r\n        wordlist.append(char)\r\n    return wordlist\r\n\r\n\r","votes":81003.092},{"text":"\r\n    return list(word)\r\n\r","votes":85380.344},{"text":"\r\n    new_list = []\r\n    for i in word:\r\n        new_list.append(i)\r\n    return new_list\r\n\r","votes":86183.156},{"text":"\r\n    return [char for char in word]\r\n\r","votes":87252.024},{"text":"\r\n    return [char for char in word]\r\n\r\nprint(split(\"hello\"))\r\n\r","votes":90700.036},{"text":"\r\n    word = list(word)\r\n    return word\r\n\r","votes":91264.572},{"text":"\r\n    result = []\r\n    for i in range(len(word)):\r\n        result.append(word[i])\r\n    return result\r\n\r\n","votes":99749.136},{"text":"\r\n    \r\n    return list(word)\r\n\r\n\r","votes":100268.968},{"text":"\r\n    return [x for x in word]\r\n\r\n\r","votes":103204.468},{"text":"\r\n    split_word = []\r\n    for char in word:\r\n        split_word.append(char)\r\n    return split_word\r\n\r\n\r","votes":103466.612},{"text":"\r\n    return (list(word))\r\n\r\n\r","votes":104989.136},{"text":"\r\n    return [char for char in word]\r\n\r\n\r\nif __name__ == '__main__':\r\n    word = input()\r\n    res = split(word)\r\n    print(\" \".join(res))\r\n\r\n\r\n\"\"\"\r\nFunction Name:  split()\r\nInput:          a string\r\nOutput:         split the string into characters\r\nUseage:         split(\"hello\") will return ['h', 'e', 'l', 'l', 'o']\r\n\"\"\"\r\n\r\n\r","votes":106545.6},{"text":"\r\n    # Your code goes here\r\n    return [char for char in word]\r\n\r","votes":108174.132},{"text":"\r\n\r\n    return [char for char in word]\r\n\r\n\r","votes":108177.056},{"text":"\r\n    # Your code goes here\r\n    return [char for char in word]\r\n\r\n\r","votes":108946.492},{"text":"\r\n    return [c for c in word]\r\n\r\n\r","votes":115138.016},{"text":"\r\n    return [i for i in word]\r\n\r\n\r","votes":115177.32},{"text":"\r\n    characters = []\r\n    for char in word:\r\n        characters.append(char)\r\n    return characters\r\n\r\n\r","votes":118710.464},{"text":"\r\n    word = list(word)\r\n    return word\r\n\r\n\r","votes":119406.18},{"text":"\r\n    return [str(i) for i in word]\r\n\r\n\r","votes":123616.576},{"text":"\r\n    return [char for char in word]\r\n\r\nprint(split('Happy'))\r\nprint(split('Python'))\r\n\r","votes":123681.18},{"text":"\r\n    return [char for char in word]\r\n\r\n\r\nif __name__ == '__main__':\r\n    user_input = input(\"Enter a word: \")\r\n    print(\"The characters of the word are: \", split(user_input))\r\n\r\n\r\n\"\"\"\r\nSample Input\r\n\r\nEnter a word: Hello\r\n\r\nSample Output\r\n\r\nThe characters of the word are:  ['H', 'e', 'l', 'l', 'o']\r\n\r\nExplanation\r\n\r\nWe split the word Hello into characters and print them as a list.\r\n\"\"\"\r\n","votes":133377.824},{"text":"\r\n    # Your code here\r\n    return [char for char in word]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    word = input(\"Enter a word: \")\r\n","votes":136937.824},{"text":"\r\n    \r\n    return list(word)\r\n\r","votes":141419.764},{"text":"\r\n    return [char for char in word]\r\n\r\nprint(split('hello'))\r\n\r","votes":142042.936},{"text":"\r\n    \r\n    # initialize an empty list\r\n    letters = []\r\n    \r\n    # split the word into individual characters\r\n    for letter in word:\r\n        letters.append(letter)\r\n    \r\n    # return the list of letters\r\n    return letters\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":143737.352},{"text":"\r\n\r\n    return list(word)\r\n\r\n\r","votes":151043.216},{"text":"\r\n    list_of_word = []\r\n    for i in range(len(word)):\r\n        list_of_word.append(word[i])\r\n    return list_of_word\r\n\r","votes":152312.696},{"text":"\r\n\r\n    return list(word)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    word = input(\"Enter a word: \")\r\n    print(split(word))\r\n\r\n# Enter a word: python\r\n# ['p', 'y', 't', 'h', 'o', 'n']\r\n\r\n# \uf0a7\tWrite a Python function that accepts a list of numbers and returns the sum of the numbers.\r","votes":156184.68},{"text":"\r\n    return [character for character in word]\r\n\r\n\r","votes":160136.84},{"text":"\r\n    \r\n    return [word[i] for i in range(len(word))]\r\n\r\n\r","votes":172642.04},{"text":"\r\n    return [char for char in word]\r\n\r\n\r\nprint(split(\"hello\"))\r\n# ['h', 'e', 'l', 'l', 'o']\r\nprint(split(\"greetings\"))\r\n# ['g', 'r', 'e', 'e', 't', 'i', 'n', 'g', 's']\r\n\r\n# print(split(2))\r\n# TypeError: 'int' object is not iterable\r\n# \ud83d\udca1 \u4e0d\u80fd\u76f4\u63a5\u4f20\u5165\u6574\u6570\r\n\r\nprint(split(\"\"))\r\n# []\r\n\r\nprint(split(\" \"))\r\n# [' ']\r\n\r\nprint(split(\"  \"))\r\n# [' ', ' ']\r\n\r\nprint(split(\"hello world\"))\r\n# ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\r\n\r\n\r","votes":177398.188},{"text":"\r\n    \r\n    # split the string into a list with characters as list elements\r\n    split_word = list(word)\r\n    \r\n    # print the list\r\n    print(split_word)\r\n    \r\n    # return the list\r\n    return split_word\r\n\r","votes":187803.716},{"text":"\r\n    return word.split()\r\n\r\n\r","votes":null},{"text":"\r\n    return word.split()\r\n\r\n\r\nprint(split(\"hello\"))\r\n\r\n\r","votes":null},{"text":"\r\n    word = word.split(\" \")\r\n    new_word = \"\"\r\n    for i in word:\r\n        new_word += i[0]\r\n    return new_word\r\n\r\n\r\nword = input(\"Enter a word: \")\r\nprint(\"The characters of the word are\", split(word))\r\n\r\n\r\n# In[8]:\r\n\r\n\r","votes":null},{"text":"\r\n    split_list = []\r\n    for i in word:\r\n        split_list.append(i)\r\n    print(split_list)\r\n\r\n\r","votes":null},{"text":"\r\n    chars = \"\"\r\n    for x in word:\r\n        chars += x\r\n    return chars\r\n\r","votes":null},{"text":"\r\n    return [char for char in word.lower()]\r\n\r","votes":null},{"text":"\r\n    return word.split(\"\")\r\n\r","votes":null}],"time":{"count":38.0,"avg":115400.32,"std":32170.1278631752,"cov":0.2787698324}}
{"id":566,"question":"def sum_digits(n):\r\n    \"\"\"Write a function to get the sum of a non-negative integer.\"\"\"","answers":[{"text":"\r\n    # Your code here\r\n    return sum(int(i) for i in str(n))\r\n\r\n\r","votes":45858.764},{"text":"\r\n    return n if n < 10 else n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":54167.136},{"text":"\r\n    total = 0\r\n    while n > 0:\r\n        total += n % 10\r\n        n = n \/\/ 10\r\n    return total\r\n\r\n\r","votes":56069.184},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":58492.632},{"text":"\r\n    total = 0\r\n    while n > 0:\r\n        total += n % 10\r\n        n \/\/= 10\r\n    return total\r\n\r\n\r","votes":67242.016},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n\r","votes":68237.292},{"text":"\r\n    if n <= 0:\r\n        return 0\r\n    else:\r\n        return n%10 + sum_digits(n\/\/10)\r\n\r\n\r","votes":69068.548},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":70447.7},{"text":"\r\n    return sum(int(c) for c in str(n))\r\n\r","votes":71586.288},{"text":"\r\n    result = 0\r\n    while n:\r\n        result += n % 10\r\n        n \/\/= 10\r\n    return result\r\n\r\n\r","votes":71980.22},{"text":"\r\n    # Your code here\r\n    sum1 = 0\r\n    while n > 0:\r\n        sum1 += n%10\r\n        n \/\/= 10\r\n    return sum1\r\n\r\n\r","votes":72281.508},{"text":"\r\n    sum = 0\r\n    while n != 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n    return sum\r\n\r","votes":74912.004},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n%10 + sum_digits(n\/\/10)\r\n\r\n\r\n\r","votes":76451.56},{"text":"\r\n    return n if n < 10 else n%10 + sum_digits(n\/\/10)\r\n\r","votes":77398.6},{"text":"\r\n    s = 0\r\n    while n:\r\n        s += n % 10\r\n        n \/\/= 10\r\n    return s\r\n\r\n\r","votes":77891.588},{"text":"\r\n    # first, check for type errors\r\n    if not isinstance(n, int):\r\n        raise TypeError(\"Argument must be an integer!\")\r\n    if n < 0:\r\n        raise ValueError(\"Argument must be a non-negative integer!\")\r\n    # then, check if the argument is 0\r\n    if n == 0:\r\n        return 0\r\n    # finally, calculate the sum of the digits\r\n    return sum(int(d) for d in str(n))\r\n\r\n\r","votes":79016.5},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input().strip())\r\n    print(sum_digits(n))\r\n\r\n\r\n#","votes":79196.732},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n    return sum\r\n\r","votes":79815.468},{"text":"\r\n    return sum(int(i) for i in str(n))\r\n\r\n\r","votes":81683.304},{"text":"\r\n\r\n    # Base Case\r\n    if n < 10:\r\n        return n\r\n\r\n    # Recursive Case\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    result = sum_digits(n)\r\n    print(result)\r\n\r\n\"\"\"\r\nSample Input 0\r\n\r\n1234\r\n\r\nSample Output 0\r\n\r\n10\r\n\r\nExplanation 0\r\n\r\nThe sum of the digits of 1234 is 1 + 2 + 3 + 4 = 10.\r\n\"\"\"\r\n\r\n# ----------------------------------------------------------------------------------------\r\n# Recursive function for finding the sum of digits of a number (using recursion)\r","votes":82773.368},{"text":"\r\n    if n<10:\r\n        return n\r\n    return sum_digits(n\/\/10) + n%10\r\n\r","votes":83268.924},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n%10 + sum_digits(n\/\/10)\r\n\r\n\r","votes":83714.284},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":84115.852},{"text":"\r\n    if n<10:\r\n        return n\r\n    else:\r\n        return n%10 + sum_digits(n\/\/10)\r\n\r\n\r","votes":84393.508},{"text":"\r\n    if n < 10:\r\n        return n\r\n    return sum_digits(n \/\/ 10) + n % 10\r\n\r\n\r","votes":84684.884},{"text":"\r\n    # YOUR CODE HERE\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return (n % 10) + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":88513.84},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return sum_digits(n \/\/ 10) + n % 10\r\n\r\n\r","votes":91469.608},{"text":"\r\n    s = 0\r\n    while n > 0:\r\n        s += n % 10\r\n        n \/\/= 10\r\n    return s\r\n\r\n\r","votes":91516.28},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        x, y = divmod(n, 10)\r\n        return sum_digits(x) + y\r\n\r","votes":92651.608},{"text":"\r\n    if n < 10:\r\n        return n\r\n    return n%10 + sum_digits(n\/\/10)\r\n\r","votes":94029.876},{"text":"\r\n    \r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n\/\/10)\r\n\r\n\r","votes":95202.38},{"text":"\r\n    res = 0\r\n    while n > 0:\r\n        res += n % 10\r\n        n \/\/= 10\r\n    return res\r\n\r\n# %%\r\n\r","votes":95300.184},{"text":"\r\n    s = 0\r\n    while n > 0:\r\n        s += n % 10\r\n        n = n \/\/ 10\r\n    return s\r\n\r\n\r","votes":95525.168},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    elif n > 0:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n    else:\r\n        return 0\r\n\r\nprint(sum_digits(1234))\r\n\r","votes":95770.908},{"text":"\r\n    s = 0\r\n    while n:\r\n        s += n % 10\r\n        n \/\/= 10\r\n    return s\r\n\r\nn = 12345\r\nprint(sum_digits(n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":96260.372},{"text":"\r\n    # return sum(int(x) for x in str(n))\r\n    # return sum(int(i) for i in str(n))\r\n    s = 0\r\n    while(n!=0):\r\n        s += n % 10\r\n        n \/\/= 10\r\n    return s\r\n\r","votes":97595.208},{"text":"\r\n    \r\n    res = 0\r\n    while n > 0:\r\n        res += n % 10\r\n        n = n \/\/ 10\r\n    return res\r\n\r\n\r","votes":98142.628},{"text":"\r\n    # Your code goes here\r\n    return sum(int(i) for i in str(n))\r\n\r\n\r","votes":98238.848},{"text":"\r\n    # Your code here\r\n    sum_digits = 0\r\n    while n > 0:\r\n        d = n % 10\r\n        sum_digits += d\r\n        n = n\/\/10\r\n    return sum_digits\r\n\r\n\r\nprint(sum_digits(123456))\r\n\r\n\r","votes":98897.416},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return sum_digits(n%10) + sum_digits(n\/\/10)\r\n\r\n\r","votes":98963.724},{"text":"\r\n    return int(n) if n < 10 else sum_digits(int(n\/10)) + n%10\r\n\r","votes":100436.772},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r","votes":105237.88},{"text":"\r\n    sum = 0\r\n    while n:\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r","votes":106387.836},{"text":"\r\n    result = 0\r\n    while n:\r\n        result += n % 10\r\n        n \/\/= 10\r\n    return result\r\n\r","votes":106449.552},{"text":"\r\n    # Your code here\r\n    s = 0\r\n    while n:\r\n        s += n%10\r\n        n \/\/= 10\r\n\r\n    return s\r\n\r\n\r","votes":106648.152},{"text":"\r\n    \"\"\"You should use a while loop to compute the result.\r\n    \"\"\"\r\n    result = 0\r\n    while n > 0:\r\n        result += n % 10\r\n        n = n \/\/ 10\r\n    return result\r\n\r\n\r","votes":107006.82},{"text":"\r\n    if not n:\r\n        return 0\r\n    else:\r\n        return int(str(n)[-1]) + sum_digits(n\/\/10)\r\n\r\n\r","votes":107319.08},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n \/\/= 10\r\n    return sum\r\n\r\n\r","votes":108071.976},{"text":"\r\n    return sum(int(d) for d in str(n))\r\n\r\n\r","votes":108685.116},{"text":"\r\n    if n < 0:\r\n        raise ValueError('Only non-negative numbers are supported.')\r\n    elif n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r","votes":109026.86},{"text":"\r\n    # Hint: use the % and floor division operators\r\n\r\n    # your code goes here\r\n    if n==0:\r\n        return 0\r\n    else:\r\n        return n%10 + sum_digits(n\/\/10)\r\n\r\n# Write a function to get the sum of a non-negative integer.\r","votes":109623.276},{"text":"\r\n    if n < 0:\r\n        raise ValueError('n must be non-negative')\r\n    if n == 0:\r\n        return 0\r\n    if n < 10:\r\n        return n\r\n    return n%10 + sum_digits(n\/\/10)\r\n\r","votes":112522.168},{"text":"\r\n    sum = 0\r\n    while(n != 0):\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n\r","votes":113222.052},{"text":"\r\n    \r\n    s = 0\r\n    \r\n    while n > 0:\r\n        s += n % 10\r\n        n = n \/\/ 10\r\n    \r\n    return s\r\n\r\n\r","votes":113241.692},{"text":"\r\n    total = 0\r\n    while n > 0:\r\n        total = total + (n % 10)\r\n        n = n \/\/ 10\r\n    return total\r\n\r\n\r","votes":113736.036},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    elif n < 0:\r\n        raise ValueError(\"Negative number: {}\".format(n))\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":114824.104},{"text":"\r\n    return n if n < 10 else n % 10 + sum_digits(n\/\/10)\r\n\r\n\r","votes":116971.736},{"text":"\r\n    return sum([int(x) for x in str(n)])\r\n\r\n\r","votes":118358.148},{"text":"\r\n    res = 0\r\n    while n > 0:\r\n        res += n % 10\r\n        n \/\/= 10\r\n    return res\r\n\r","votes":122606.768},{"text":"\r\n    # Check if the number is negative\r\n    if n < 0:\r\n        return 0\r\n    \r\n    # Initialise the sum as 0\r\n    sum = 0\r\n    \r\n    # Get the sum of the digits\r\n    while(n > 0):\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n    \r\n    # Return the sum\r\n    return sum\r\n\r\n# Driver code\r\nprint(sum_digits(12345))\r\nprint(sum_digits(123))\r\nprint(sum_digits(12))\r\nprint(sum_digits(1))\r\nprint(sum_digits(0))\r\nprint(sum_digits(-10))\r\nprint(sum_digits(-12345))\r\nprint(sum_digits(-123))\r\nprint(sum_digits(-12))\r\nprint(sum_digits(-1))\r\nprint(sum_digits(-10))\r\nprint(sum_digits(-2147483648))\r\n\r\n# Time Complexity - O(logN) | Space Complexity - O(1)\r\n\r\n# Sample Input and Output\r\n\r\n# Input\r\n# 12345\r\n# 123\r\n# 12\r\n# 1\r\n# 0\r\n# -10\r\n# -12345\r\n# -123\r\n# -12\r\n# -1\r\n# -10\r\n# -2147483648\r\n\r\n# Output\r\n# 15\r\n# 6\r\n# 3\r\n# 1\r\n# 0\r\n# 10\r\n# 15\r\n# 6\r\n# 3\r\n# 1\r\n# 0\r\n# -2147483648\r\n\r\n# Explanation\r\n# Example 1:","votes":124112.752},{"text":"\r\n    if n < 0:\r\n        raise ValueError('Please enter a non-negative integer.')\r\n    elif n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r","votes":124187.38},{"text":"\r\n    # check if negative\r\n    if n < 0:\r\n        return None\r\n    # check if 0\r\n    elif n == 0:\r\n        return 0\r\n    # check if 1\r\n    elif n == 1:\r\n        return 1\r\n    # recursive call\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r","votes":124938.128},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter a number: \"))\r\n    print(sum_digits(number))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":126196.4},{"text":"\r\n    if n < 0:\r\n        raise ValueError('n must be non-negative')\r\n    elif n == 0:\r\n        return 0\r\n    else:\r\n        sum_digits = 0\r\n        while n > 0:\r\n            sum_digits += n % 10\r\n            n \/\/= 10\r\n        return sum_digits\r\n\r\n\r","votes":126621.688},{"text":"\r\n    if n < 10:\r\n        return n\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nn = 100\r\n\r\nprint(sum_digits(n))\r\n\r\n# 220\r\n\r\n\r","votes":131847.908},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return int(n%10) + sum_digits(n\/\/10)\r\n\r","votes":131882.848},{"text":"\r\n    # If the number is 0, return 0, otherwise, add the last digit of the number to the\r\n    # sum of the rest of the number's digits.\r\n    return n if n < 10 else n%10 + sum_digits(n\/\/10)\r\n\r\n\r\n# Tests\r\nprint(sum_digits(123))\r\nprint(sum_digits(456))\r\nprint(sum_digits(789))\r\nprint(sum_digits(10))\r\nprint(sum_digits(100))\r\nprint(sum_digits(1000))\r\nprint(sum_digits(10000))\r\nprint(sum_digits(100000))\r\nprint(sum_digits(1000000))\r\nprint(sum_digits(123456789))\r\nprint(sum_digits(123456789))\r\nprint(sum_digits(123456789))\r\nprint(sum_digits(123456789))\r\nprint(sum_digits(123456789))\r\nprint(sum_digits(123456789))\r\nprint(sum_digits(123456789))\r\nprint(sum_digits(123456789))\r\nprint(sum_digits(123456789))\r\nprint(sum_digits(123456789))\r\n\r\n# sum_digits(123)\r\n# sum_digits(456)\r\n# sum_digits(789)\r\n# sum_digits(10)\r\n# sum_digits(100)\r\n# sum_digits(1000)\r\n# sum_digits(10000)\r\n# sum_digits(100","votes":131952.256},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    result = sum_digits(n)\r\n    print(result)\r\n\r\n\r\n# ----------------------------------------------------------\r\n# 2. Write a function to get the sum of a non-negative integer.\r\n\r\n\r","votes":131952.732},{"text":"\r\n\r\n    if n < 10:\r\n        return n\r\n\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"Example:\")\r\n    print(sum_digits(12345))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert sum_digits(12345) == 15, \"12345\"\r\n    assert sum_digits(987) == 24, \"987\"\r\n    assert sum_digits(123) == 6, \"123\"\r\n    assert sum_digits(123456789) == 45, \"123456789\"\r\n    assert sum_digits(1234567890) == 45, \"1234567890\"\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\r\n\r\n\r\n#","votes":148111.572},{"text":"\r\n    # Your code goes here\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(sum_digits(n))\r\n\r\n","votes":157984.292},{"text":"\r\n    n = str(n)\r\n    summation = 0\r\n    for digit in n:\r\n        summation += int(digit)\r\n    return summation\r\n\r\nprint(sum_digits(100))\r\nprint(sum_digits(1234567890))\r\nprint(sum_digits(1000000000))\r\nprint(sum_digits(0))\r\n\r\n\r","votes":158403.024},{"text":"\r\n    if n == 0:\r\n        return 0\r\n    elif n > 0:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n    # elif n < 0:\r\n    #     return -n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sum_digits(123))\r\n    print(sum_digits(-123))\r\n    print(sum_digits(10))\r\n    print(sum_digits(-10))\r\n    print(sum_digits(1234567890))\r\n    print(sum_digits(-1234567890))\r\n    print(sum_digits(1))\r\n    print(sum_digits(-1))\r\n    print(sum_digits(100))\r\n    print(sum_digits(-100))\r\n    print(sum_digits(1000))\r\n    print(sum_digits(-1000))\r\n    print(sum_digits(100000))\r\n    print(sum_digits(-100000))\r\n    print(sum_digits(10000000000))\r\n    print(sum_digits(-10000000000))\r\n    print(sum_digits(100000000000))\r\n    print(sum_digits(-100000000000))\r\n    print(sum_digits(1000000000000000))\r\n    print(sum_digits(-1000000000000000))\r\n    print(sum_digits(12345678901234567890))\r\n    prin","votes":284894.524},{"text":"\r\n    s = 0\r\n    while n > 0:\r\n        s += n % 10\r\n        n = n \/\/ 10\r\n    return s\r\n\r\ns = int(input(\"Enter a number: \"))\r\nprint(f\"Sum of digits: {sum_digits(s)}\")\r\n\r\n# Tests\r\nprint(sum_digits(123))\r\nprint(sum_digits(456))\r\nprint(sum_digits(789))\r\nprint(sum_digits(1234567891))\r\nprint(sum_digits(12345678911234567891))\r\nprint(sum_digits(123456789112345678911234567891))\r\n\r\n# 3. Write a function to get the sum of a non-negative integer, but you may not use the built-in function sum().\r\n\r","votes":null},{"text":"\r\n    if n < 10:\r\n        return n\r\n    else:\r\n        return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(sum_digits(123))\r\n    print(sum_digits(456))\r\n    print(sum_digits(789))\r\n    print(sum_digits(10))\r\n    print(sum_digits(12345))\r\n    print(sum_digits(1234567890))\r\n    print(sum_digits(-123))\r\n    print(sum_digits(-12345))\r\n    print(sum_digits(-98765))\r\n    print(sum_digits(0))\r\n    print(sum_digits(12345678901234567890))\r\n    print(sum_digits(123456789012345678901234567890))\r\n    print(sum_digits(1234567890123456789012345678901234567890))\r\n    print(sum_digits(12345678901234567890123456789012345678901234567890))\r\n    print(sum_digits(123456789012345678901234567890123456789012345678901234567890))\r\n    print(sum_digits(123456789012","votes":null},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n%10\r\n        n = n\/\/10\r\n    return sum\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(sum_digits(n))\r\n\r\n'''\r\n# Method 2\r","votes":null},{"text":"\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n = n \/\/ 10\r\n    return sum\r\n\r\n\r\nnumber = int(input())\r\n\r\nprint(sum_digits(number))\r\n","votes":null},{"text":"\r\n    # TODO: Write a function to get the sum of a non-negative integer.\r\n    #       The integer could be large, so do not use int type.\r\n    # Hint: You should consider the case of n = 0.\r\n    #       If n = 0, n + n = 0 + 0 = 0.\r\n    #       If n > 0, n + n = 1 + 1 = 2.\r\n    #       If n < 0, n + n = -1 + -1 = -2.\r\n    if n == 0:\r\n        return 0\r\n    elif n >= 0:\r\n        return n + sum_digits(n-1)\r\n    elif n < 0:\r\n        return n + sum_digits(n+1)\r\n\r\n\r","votes":null},{"text":"\r\n    if not n:\r\n        return 0\r\n    return n % 10 + sum_digits(n \/\/ 10)\r\n\r\n\r\n# Tests\r\nprint(sum_digits(342))  # 9\r\nprint(sum_digits(8))  # 8\r\nprint(sum_digits(0))  # 0\r\nprint(sum_digits(-23))  # -1\r\nprint(sum_digits(-123))  # -4\r\nprint(sum_digits(23))  # 5\r\nprint(sum_digits(42))  # 6\r\nprint(sum_digits(5))  # 5\r\nprint(sum_digits(6))  # 6\r\nprint(sum_digits(12345))  # 15\r\nprint(sum_digits(12342))  # 9\r\nprint(sum_digits(123456))  # 21\r\nprint(sum_digits(1234567))  # 28\r\nprint(sum_digits(12345678))  # 36\r\nprint(sum_digits(123456789))  # 45\r\n\r\n# Solution\r\n#","votes":null},{"text":"\r\n    x = 0\r\n    while n > 0:\r\n        x = x + (n % 10)\r\n        n = n \/\/ 10\r\n    return x\r\n\r\n\r\nif __name__ == '__main__':\r\n    # These \"asserts\" using only for self-checking and not necessary for\r\n    # auto-testing\r\n    assert sum_digits(123) == 6, \"1 + 2 + 3\"\r\n    assert sum_digits(1234) == 10,\r\n    \"1 + 2 + 3 + 4\"\r\n    assert sum_digits(12345) == 15, \"1 + 2 + 3 + 4 + 5\"\r\n    assert sum_digits(23955) == 20, \"2 + 3 + 9 + 5 + 5\"\r\n    assert sum_digits(9) == 9, \"9\"\r\n    assert sum_digits(99) == 19, \"9 + 9\"\r\n    assert sum_digits(999) == 28, \"9 + 9 + 9\"\r\n    assert sum_digits(23955) == 20, \"2 + 3 + 9 + 5 + 5\"\r\n    assert sum_digits(123456789) == 45, \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\"\r\n    assert sum_digits(987654321) == 45, \"9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\"\r\n    assert sum_digits(1234567890) == 45, \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\"\r\n    assert sum_digits(123456789","votes":null}],"time":{"count":72.0,"avg":100920.6588888889,"std":32261.9678535321,"cov":0.319676548}}
{"id":567,"question":"def issort_list(list1):\r\n    \"\"\"Write a function to check whether a specified list is sorted or not.\"\"\"","answers":[{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":83829.212},{"text":"\r\n    if list1 == sorted(list1):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":85758.512},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r\n\r","votes":87697.18},{"text":"\r\n    for i in range(len(list1)):\r\n        if i == len(list1) - 1:\r\n            break\r\n        elif list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":92582.108},{"text":"\r\n    if list1:\r\n        for i in range(len(list1)-1):\r\n            if list1[i]>list1[i+1]:\r\n                return False\r\n    return True\r\n\r","votes":92582.596},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":94181.728},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":94543.228},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i - 1]:\r\n            return False\r\n    return True\r\n\r","votes":95167.752},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":96385.528},{"text":"\r\n    for i in range(1,len(list1)):\r\n        if list1[i]<list1[i-1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":96834.352},{"text":"\r\n    if len(list1) <= 1:\r\n        return True\r\n    else:\r\n        return list1[0] <= list1[1] and issort_list(list1[1:])\r\n\r\n\r","votes":108421.016},{"text":"\r\n    if list1 == [] or list1 == [None]:\r\n        return False\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":108471.872},{"text":"\r\n    if len(list1) == 0:\r\n        return True\r\n\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":108866.936},{"text":"\r\n    sorted_list = True\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            sorted_list = False\r\n            break\r\n    return sorted_list\r\n\r\n\r","votes":109744.316},{"text":"\r\n    sorted_list = True\r\n    for i in range(len(list1) - 1):\r\n        if list1[i + 1] < list1[i]:\r\n            sorted_list = False\r\n            break\r\n    return sorted_list\r\n\r\n\r","votes":114297.192},{"text":"\r\n    return sorted(list1) == list1\r\n\r\n\r","votes":116165.98},{"text":"\r\n    flag = True\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            flag = False\r\n            break\r\n    return flag\r\n\r\n\r","votes":117510.1},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i] < list1[i-1]:\r\n            return False\r\n    return True\r\n\r","votes":118317.564},{"text":"\r\n    for i in range(1, len(list1)):\r\n        if list1[i-1] > list1[i]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":119768.528},{"text":"\r\n    for index in range(len(list1)-1):\r\n        if list1[index] > list1[index+1]:\r\n            return False\r\n    return True\r\n\r","votes":122917.232},{"text":"\r\n    if list1 == []:\r\n        return False\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":124605.92},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] >= list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":129684.672},{"text":"\r\n    sorted = True\r\n    for i in range(len(list1)):\r\n        if i == len(list1)-1:\r\n            break\n        if list1[i] > list1[i+1]:\r\n            sorted = False\r\n    return sorted\r\n\r","votes":130717.704},{"text":"\r\n    if list1 == []:\r\n        return False\r\n    elif list1 == sorted(list1):\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":132229.96},{"text":"\r\n\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":132912.688},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n    else:\r\n        return True\r\n\r","votes":134020.076},{"text":"\r\n    flag = 1\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            flag = 0\r\n    return flag\r\n\r\n\r\nif __name__ == '__main__':\r\n    list1 = [1, 2, 3, 4, 5, 6]\r\n    list2 = [1, 2, 3, 4, 5, 6, 7]\r\n    list3 = [1, 2, 3, 4, 5, 6, 7, 8]\r\n    if issort_list(list1):\r\n        print(list1, 'is sorted')\r\n    else:\r\n        print(list1, 'is not sorted')\r\n    if issort_list(list2):\r\n        print(list2, 'is sorted')\r\n    else:\r\n        print(list2, 'is not sorted')\r\n    if issort_list(list3):\r\n        print(list3, 'is sorted')\r\n    else:\r\n        print(list3, 'is not sorted')\r\n\r\n\r\n# Output:\r\n# [1, 2, 3, 4, 5, 6] is sorted\r\n# [1, 2, 3, 4, 5, 6, 7] is not sorted\r\n# [1, 2, 3, 4, 5, 6, 7, 8] is not sorted\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":138499.824},{"text":"\r\n    for i in range(len(list1)):\r\n        if i == 0:\r\n            continue\r\n        if list1[i] < list1[i-1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":138699.676},{"text":"\r\n    \r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n    return True\r\n            \r","votes":139284.176},{"text":"\r\n    i = 0\r\n    while i < len(list1) - 1:\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n        i += 1\r\n    return True\r\n\r\n\r","votes":143600.208},{"text":"\r\n    issorted = True\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            issorted = False\r\n            return issorted\r\n    return issorted\r\n\r\n\r","votes":144800.844},{"text":"\r\n    for i in range(0, len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":145335.196},{"text":"\r\n    # check whether a specified list is sorted or not. \r\n    # if not, return False. \r\n    # if yes, return True.\r\n    if len(list1) == 0:\r\n        return True\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":145349.464},{"text":"\r\n    for i in range(0,len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":148915.092},{"text":"\r\n    \r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\nprint(issort_list([1,2,3,4,5,6,7,8,9,10]))\r\nprint(issort_list([1,2,3,4,5,6,7,8,9,10,11]))\r\n\r\n# 6\r\n\r","votes":161335.28},{"text":"\r\n    if len(list1)>0:\r\n        for i in range(len(list1)-1):\r\n            if list1[i]>list1[i+1]:\r\n                return False\r\n        return True\r\n    else:\r\n        return True\r\n\r\n\r","votes":167220.904},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n    return True\r\n\r","votes":171030.368},{"text":"\r\n    if len(list1) == 0:\r\n        return True\r\n    else:\r\n        for i in range(len(list1)-1):\r\n            if list1[i] > list1[i+1]:\r\n                return False\r\n        return True\r\n\r","votes":173344.972},{"text":"\r\n    if len(list1) <= 1:\r\n        return True\r\n    else:\r\n        if list1[0] > list1[1]:\r\n            return False\r\n        else:\r\n            return issort_list(list1[1:])\r\n\r","votes":173927.196},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r","votes":174640.652},{"text":"\r\n    for i in range(0, len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":180951.88},{"text":"\r\n    return sorted(list1) == list1\r\n\r\nif __name__ == '__main__':\r\n    list1 = [1, 2, 3, 4, 5]\r\n    list2 = [1, 2, 3, 4, 5, 6]\r\n    list3 = [1, 2, 3, 4, 5, 6, 7]\r\n    list4 = [1, 2, 3, 4, 5, 6, 7, 8]\r\n    print(issort_list(list1))\r\n    print(issort_list(list2))\r\n    print(issort_list(list3))\r\n    print(issort_list(list4))\r\n    \r\n    list5 = [1, 3, 4]\r\n    list6 = [1, 2, 4]\r\n    list7 = [1, 2, 3]\r\n    list8 = [1, 2, 3, 4]\r\n    print(issort_list(list5))\r\n    print(issort_list(list6))\r\n    print(issort_list(list7))\r\n    print(issort_list(list8))\r\n    \r\n    list9 = [1, 2, 3, 4, 5]\r\n    list10 = [1, 2, 3, 4, 5]\r\n    print(issort_list(list9))\r\n    print(issort_list(list10))\r\n    \r\n    list11 = [1, 1, 3, 4]\r\n    list12 = [1, 1, 2, 4]\r\n    print(issort_list(list11))\r\n    print(issort_list(list12))\r\n    \r\n    list13 = [1, 1, 2, 4]\r\n    list14 = [1, 1, 2, 3]\r","votes":187168.092},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\n\r\nprint(issort_list([1, 2, 3]))\r\nprint(issort_list([2, 1, 3]))\r\nprint(issort_list([2, 1, 3, 4, 5]))\r\nprint(issort_list([1, 2, 3, 4, 5]))\r\nprint(issort_list([1, 3, 2, 4, 5]))\r\n\r\n\r","votes":194764.908},{"text":"\r\n    \r\n    for i in range(0,len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            return False\r\n        \r\n    return True\r\n\r\n#Example:\r","votes":198382.496},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":198851.768},{"text":"\r\n    # If the length of the list is less than 2, then it must be sorted\r\n    if len(list1) < 2:\r\n        return True\r\n\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n\r\n    return True\r\n\r\n\r","votes":213963.004},{"text":"\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n            \r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 10]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\nprint(issort_list([","votes":null},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\nprint(issort_list(list1))\r\n\r\n\r","votes":null},{"text":"\r\n    x=0\r\n    for i in range(len(list1)-1):\r\n        if list1[i]>list1[i+1]:\r\n            x=1\r\n            break\r\n    if x==1:\r\n        print(\"not sorted\")\r\n    else:\r\n        print(\"sorted\")\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if i == len(list1)-1:\r\n            return True\r\n        elif list1[i] > list1[i+","votes":null},{"text":"\r\n    if list1[0]<list1[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    num = 1\r\n    for i in range(len(list1) - 1):\r\n        if list1[i] == list1[i + 1]:\r\n            num += 1\r\n        else:\r\n            num = 1\r\n        if num >= 3:\r\n            return False\r\n    return True\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\r\n\r\nif issort_list(list1) == True:\r\n    print(\"The list is sorted!\")\r\nelse:\r\n    print(\"The list is not sorted!\")\r\n\r\n# 1. Write a function to check whether a specified list is sorted or not. (If the list is not sorted, return False, else return True.)\r\n\r\n# 2. Write a function to calculate the sum of all elements in a specified list. (Return the sum.)\r\n\r\n\r","votes":null},{"text":"\r\n    if list1 == []:\r\n        return True\r\n    else:\r\n        for i in range(len(list1) - 1):\r\n            if list1[i] > list1[i+1]:\r\n                return False\r\n            else:\r\n                return True\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n        else:\r\n            return True\r\n\r\n\r","votes":null},{"text":"\r\n    # Initializing Variables\r\n    count = 0\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            count += 1\r\n            return False\r\n        else:\r\n            return True\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(issort_list(list1))\r\n    print(issort_list([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\r\n    print(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]))\r\n    print(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,","votes":null},{"text":"\r\n    if list1 == []:\r\n        return True\r\n    elif list1[0] > list1[1]:\r\n        return False\r\n    else:\r\n        return issort_list(list1[1:])\r\n\r\n\r\na = [1, 4, 3, 7, 2]\r\nprint(issort_list(a))\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1) < 2:\r\n        print(\"The list is sorted\")\r\n        return True\r\n    else:\r\n        if list1[0] < list1[-1]:\r\n            print(\"The list is not sorted\")\r\n            return False\r\n        else:\r\n            print(\"The list is sorted\")\r\n            return True\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)-1):\r\n        if list1[i] > list1[i+1]:\r\n            return False\r\n    return True\r\n\r\nprint(issort_list([1, 2, 3, 4, 5]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(issort_list([1, 1, 1, 1, 1, 1]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(issort_list([2, 1, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\nprint(issort_list([1]))\r\nprint(issort_list([]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\r\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1","votes":null},{"text":"\r\n    list1.sort()\r\n    return list1\r\n\r","votes":null},{"text":"\r\n    if len(list1) <= 1:\r\n        return True\r\n    else:\r\n        if list1[0] > list1[1]:\r\n            return False\r\n        else:\r\n            return issort_list(list1[1:])\r\n\r\n\r\nassert issort_list([1, 2, 3, 4, 5])\r\nassert issort_list([1, 2, 3, 4])\r\nassert not issort_list([2, 1, 5, 3, 4])\r\nassert not issort_list([1, 2, 5, 3, 4])\r\nassert not issort_list([1, 2, 3, 4, 5, 6])\r\nassert issort_list([])\r\nassert issort_list([1])\r\nassert issort_list([1, 2])\r\nassert not issort_list([1, 3, 2])\r\nassert not issort_list([1, 3])\r\nassert not issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\nassert issort_list([-1, -2, -3, -4, -5])\r\nassert issort_list([-1, -2, -3, -4])\r\nassert not issort_list([-2, -1, -5, -3, -4])\r\nassert not issort_list([-1, -2, -5, -3, -4])\r\nassert not issort_list([-1, -2, -3, -4, -5, -6])\r\nassert issort_list([-1])\r\nassert issort_list([-1, -2])\r\nassert not issort_list([-2, -1, -5, -3, -4])\r\nassert not issort_list([-1, -2, -5, -3, -4])\r\nassert not issort_list([","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        for j in range(i+1, len(list1)):\r\n            if list1[i] > list1[j]:\r\n                return False\r\n    return True\r\n\r\nif __name__ == '__main__':\r\n    print(issort_list([1,2,3]))\r\n    print(issort_","votes":null},{"text":"\r\n    i = 0\r\n    while i < len(list1) - 1:\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n        i += 1\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Pass\" if issort_list([]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1, 2]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1, 2, 3]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1, 2, 3, 4]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1, 2, 3, 4, 5]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1, 2, 3, 4, 5, 6]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1, 2, 3, 4, 5, 6, 7]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1, 2, 3, 4, 5, 6, 7, 8]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) else \"Fail\")\r\n    print(\"Pass\" if issort_list([1","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        if list1[i] > list1[i + 1]:\r\n            return False\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    \"\"\" Return True if the list is sorted, otherwise return False.\"\"\"\r\n    is_sorted = False\r\n    while not is_sorted:\r\n        for i in range(len(list1) - 1):\r\n            if list1[i] > list1[i + 1]:\r\n                list1[i], list1[i + 1] = list1[i + 1], list1[i]\r\n            else:\r\n                is_sorted = True\r\n    return is_sorted\r\n\r\n\r\n\r","votes":null}],"time":{"count":46.0,"avg":134527.8250434783,"std":34735.0565953267,"cov":0.2581997931}}
{"id":568,"question":"def empty_list(length):\r\n    \"\"\"Write a function to create a list of empty dictionaries.\"\"\"","answers":[{"text":"\r\n    empty_list = []\r\n    for i in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n\r","votes":52227.92},{"text":"\r\n    # create an empty list\r\n    list_empty = []\r\n    # create an empty dictionary\r\n    dictionary_empty = {}\r\n    # insert the empty dictionary to the list\r\n    for i in range(length):\r\n        list_empty.append(dictionary_empty)\r\n    # return the list\r\n    return list_empty\r\n\r\n\r","votes":74677.588},{"text":"\r\n    # Create an empty list\r\n    my_list = []\r\n    # Loop through the length of the list\r\n    for i in range(length):\r\n        # Add an empty dictionary to the list\r\n        my_list.append({})\r\n    return my_list\r\n\r\nmy_list = empty_list(5)\r\nprint(my_list)\r\n\r","votes":77222.436},{"text":"\r\n    return [{} for i in range(length)]\r\n\r\n\r","votes":77617.728},{"text":"\r\n    # Empty list of dictionaries\r\n    empty_list = []\r\n    for i in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n\r","votes":79943.252},{"text":"\r\n    return [{} for i in range(length)]\r\n\r","votes":81401.52},{"text":"\r\n    return [{} for _ in range(length)]\r\n\r","votes":82647.68},{"text":"\r\n    empty_list = []\r\n    for _ in range(length):\r\n        empty_list.append(dict())\r\n    return empty_list\r\n\r\n\r","votes":84531.508},{"text":"\r\n    # Create a list of dictionaries of length x, each containing no keys.\r\n    # Return the list.\r\n    list_of_empty_dict = []\r\n    for i in range(length):\r\n        list_of_empty_dict.append({})\r\n    return list_of_empty_dict\r\n\r\n\r","votes":86385.664},{"text":"\r\n    empty_list = []\r\n    for i in range(length):\r\n        empty_list.append({})\r\n\r\n    return empty_list\r\n\r\n\r","votes":88552.8},{"text":"\r\n    list_of_empty_dicts = []\r\n    for x in range(length):\r\n        list_of_empty_dicts.append({})\r\n    return list_of_empty_dicts\r\n\r\n\r","votes":92094.128},{"text":"\r\n    return [{} for _ in range(length)]\r\n\r\n\r","votes":93816.524},{"text":"\r\n    empty_list = []\r\n    for i in range(0, length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n\r","votes":95821.152},{"text":"\r\n    list_of_dicts = []\r\n    for i in range(length):\r\n        list_of_dicts.append({})\r\n    return list_of_dicts\r\n\r\n\r","votes":102187.604},{"text":"\r\n    list = []\r\n    for i in range(length):\r\n        dict = {}\r\n        list.append(dict)\r\n    return list\r\n\r","votes":102195.024},{"text":"\r\n\r\n    list_of_dicts = list()\r\n    for i in range(length):\r\n        list_of_dicts.append({})\r\n    return list_of_dicts\r\n\r\n\r","votes":102624.516},{"text":"\r\n    list = []\r\n    for i in range(length):\r\n        list.append({})\r\n    return list\r\n\r","votes":103769.236},{"text":"\r\n    return [{}] * length\r\n\r","votes":104289.18},{"text":"\r\n\r\n    return [{} for x in range(length)]\r\n\r\n\r","votes":104830.904},{"text":"\r\n    \r\n    return [{} for _ in range(length)]\r\n\r","votes":105055.46},{"text":"\r\n    return [{}] * length\r\n\r\n\r","votes":108807.208},{"text":"\r\n    return [{} for k in range(length)]\r\n\r","votes":109631.128},{"text":"\r\n\r\n    l = []\r\n    for i in range(length):\r\n        l.append({})\r\n    return l\r\n\r\n\r","votes":109814.632},{"text":"\r\n    return [{} for i in range(length)]\r\n\r\n\r\n# ---------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":113343.056},{"text":"\r\n    my_list = []\r\n    for i in range(length):\r\n        my_list.append({})\r\n    return my_list\r\n\r\n\r","votes":114891.864},{"text":"\r\n    new_list = []\r\n    for x in range(length):\r\n        new_list.append({})\r\n    return new_list\r\n\r\n\r","votes":117970.896},{"text":"\r\n    # create an empty list\r\n    lst = []\r\n    # iterate length number of times\r\n    for i in range(length):\r\n        # append a dictionary to the list\r\n        lst.append({})\r\n    # return the list\r\n    return lst\r\n\r\n\r\n# Test empty_list\r\nempty_list_test = empty_list(3)\r\nprint(empty_list_test)\r\n\r\n\r","votes":118228.616},{"text":"\r\n    \"\"\"The function should accept a length and return a list.\"\"\"\r\n    result = []\r\n    for i in range(length):\r\n        result.append({})\r\n    return result\r\n\r\n\r","votes":118280.784},{"text":"\r\n    # Your code here.\r\n    list_of_dict = []\r\n    for i in range(length):\r\n        list_of_dict.append({})\r\n    return list_of_dict\r\n\r","votes":118617.408},{"text":"\r\n    # create an empty list\r\n    empty_list = []\r\n    # loop through the length of the list\r\n    for i in range(length):\r\n        # create an empty dictionary\r\n        empty_dict = {}\r\n        # add the empty dictionary to the list\r\n        empty_list.append(empty_dict)\r\n\r\n    return empty_list\r\n\r\n\r","votes":124210.0},{"text":"\r\n    new_list = []\r\n    for i in range(length):\r\n        new_list.append({})\r\n    return new_list\r\n\r\n\r","votes":124440.728},{"text":"\r\n    empty_list = []\r\n    for i in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r","votes":124648.784},{"text":"\r\n\r\n    # Your code here.\r\n    return [{} for _ in range(length)]\r\n\r\n\r","votes":127193.26},{"text":"\r\n    lst = []\r\n    for i in range(length):\r\n        lst.append({})\r\n    return lst\r\n\r\n\r","votes":127459.236},{"text":"\r\n    # initialize an empty list\r\n    return [{} for i in range(length)]\r\n\r\n\r","votes":127668.948},{"text":"\r\n    \r\n    # start with an empty list\r\n    empty_list = []\r\n\r\n    # loop through as many times as the length of the list\r\n    for i in range(length):\r\n        \r\n        # create a dictionary\r\n        empty_list.append({})\r\n\r\n    return empty_list\r\n\r\n\r\n# test\r\nprint(empty_list(3))\r\n# [{'': ''}, {'': ''}, {'': ''}]\r\n\r\n\r\n# In[1]:\r\n\r\n\r","votes":128893.88},{"text":"\r\n    return [{} for x in range(length)]\r\n\r\n\r","votes":130092.868},{"text":"\r\n    return [dict() for i in range(length)]\r\n\r\nprint(empty_list(5))\r\n\r","votes":132485.812},{"text":"\r\n    list = []\r\n    for index in range(length):\r\n        list.append({})\r\n    return list\r\n\r\n\r","votes":134898.58},{"text":"\r\n    \r\n    list = []\r\n    for i in range(length):\r\n        list.append({})\r\n    return list\r\n\r","votes":135257.34},{"text":"\r\n    # Your code here\r\n    return [{} for i in range(length)]\r\n\r\n\r","votes":137784.604},{"text":"\r\n    # Your code here\r\n    return [{} for _ in range(length)]\r\n\r","votes":139183.592},{"text":"\r\n    empty_list = []\r\n\r\n    for i in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n\r","votes":143979.808},{"text":"\r\n    list_of_dict = []\r\n    for i in range(length):\r\n        list_of_dict.append({})\r\n    return list_of_dict\r\n\r","votes":147608.912},{"text":"\r\n    l = []\r\n    for i in range(length):\r\n        l.append({})\r\n    return l\r\n\r","votes":151534.752},{"text":"\r\n    empty_list = []\r\n    for i in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n# Ex. 2\r","votes":153369.912},{"text":"\r\n    # your code here\r\n    return [{} for _ in range(length)]\r\n\r","votes":156283.892},{"text":"\r\n    L = []\r\n    for k in range(length):\r\n        L.append({})\r\n    return L\r\n\r","votes":156804.912},{"text":"\r\n    \r\n    my_list = []\r\n    \r\n    for i in range(length):\r\n        my_list.append({})\r\n    \r\n    return my_list\r\n\r\n\r","votes":161145.752},{"text":"\r\n    empty_list = []\r\n    for i in range(length):\r\n        empty_list.append({})\r\n    return empty_list\r\n\r\n# Write your code above this line \ud83d\udc46\r\n\r\n\r\nprint(empty_list(3))\r\n# [{'': ''}, {'': ''}, {'': ''}]\r\n\r\n# Write your code below this line \ufffd","votes":168411.628},{"text":"\r\n    list = []\r\n    for i in range(length):\r\n        list.append({})\r\n    return list\r\n\r\n\r\n# Tests\r\nprint(empty_list(3))\r\n# [{'': ''}, {'': ''}, {'': ''}]\r\n\r\n\r","votes":184803.196},{"text":"\r\n    return [{'c': 0} for _ in range(length)]\r\n\r\n\r","votes":null},{"text":"\r\n    list_of_dicts = []\r\n    for i in range(length):\r\n        list_of_dicts.append({})\r\n    return list_of_dicts\r\n\r\n# -----------------------------------------------------------------------------\r\n# Calls  main  to start the ball rolling.\r\n# -----------------------------------------------------------------------------\r\nmain()\r\n\r\n# -----------------------------------------------------------------------------\r\n# The  main  function  calls  other  functions  to  print  summaries of the\r\n# lists of dictionaries of the student's grades.  It  also  prints  the  list\r\n# of  dictionaries  of  dictionaries  that  is  the  result  of  the  function\r\n# empty_list.\r\n# -----------------------------------------------------------------------------\r","votes":null}],"time":{"count":51.0,"avg":116463.4865098039,"std":27540.3458960092,"cov":0.236471934}}
{"id":569,"question":"def sort_sublists(list1):\r\n    \"\"\"Write a function to sort each sublist of strings in a given list of lists.\"\"\"","answers":[{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r","votes":98763.744},{"text":"\r\n    for element in list1:\r\n        element.sort()\r\n    return list1\r\n\r\n\r","votes":101780.62},{"text":"\r\n    \r\n    for sublist in list1:\r\n        sublist.sort()\r\n    \r\n    return list1\r\n\r\n\r","votes":104702.028},{"text":"\r\n\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n    return list1\r\n\r\n\r","votes":107133.58},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r","votes":107941.092},{"text":"\r\n    list2 = []\r\n    for i in range(len(list1)):\r\n        list2.append(sorted(list1[i]))\r\n    return list2\r\n\r","votes":117150.856},{"text":"\r\n    new_list = []\r\n    for sublist in list1:\r\n        new_list.append(sorted(sublist))\r\n    return new_list\r\n\r\n\r\n# print(sort_sublists([['b', 'a'], ['a', 'b'], ['b', 'a']]))\r\n\r\n\r","votes":117940.964},{"text":"\r\n    list2 = []\r\n    for sublist in list1:\r\n        list2.append(sorted(sublist))\r\n    return list2\r\n\r\n\r","votes":120508.388},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\nlist1 = [['b', 'c', 'd'], ['a', 'e'], ['f', 'g', 'h']]\r\nprint(list1)\r\nprint(sort_sublists(list1))\r\n\r","votes":123956.072},{"text":"\r\n    \r\n    for i in list1:\r\n        i.sort()\r\n        \r\n    return list1\r\n\r\n\r","votes":125040.928},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i] = sorted(list1[i])\r\n    return list1\r\n\r\n\r","votes":126366.276},{"text":"\r\n    list2 = []\r\n    for sub_list in list1:\r\n        list2.append(sorted(sub_list))\r\n    return list2\r\n\r\n\r","votes":126427.288},{"text":"\r\n    # TODO: Implement the function\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r","votes":127142.712},{"text":"\r\n    for i in range(0, len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\nprint(sort_sublists([[\"a\", \"c\", \"b\"], [\"e\", \"f\", \"d\"], [\"g\"]]))\r\n\r\n\r","votes":131127.304},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r\ntest_list1 = [['e', 'a', 'b'], ['b', 'e', 'a'], ['b', 'd', 'a']]\r\nprint(sort_sublists(test_list1))","votes":133023.008},{"text":"\r\n    for i in range(0, len(list1)):\r\n        list1[i].sort()\r\n\r\n    return list1\r\n\r\n\r\nlist1 = [['a', 'b'], ['c', 'd'], ['e', 'f']]\r\nprint(sort_sublists(list1))\r\n\r","votes":133442.128},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n    return list1\r\n\r\nprint(sort_sublists([['j','e','m','e'],['g','o','d'],['m','o','n','k','e','y']]))\r\n\r\n#","votes":134916.852},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\nlist1 = [['a','c','b'],['c','d','a'],['b','b','a'],['a','a','a']]\r\nprint(sort_sublists(list1))\r\n\r","votes":135330.736},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]))\r\nprint(sort_sublists([['a', 'b'], ['d', 'e'], ['g', 'h'], ['i', 'j']]))\r\nprint(sort_sublists([['a', 'b'], ['d', 'e'], ['g', 'h', 'i', 'j']]))\r\n\r","votes":135354.428},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r","votes":135991.636},{"text":"\r\n\r\n    # I should sort the sublists, not the entire list\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r\nlist1 = [['john', 'Paul', 'George', 'Ringo'], ['John', 'Paul', 'George', 'Ringo'], ['john', 'paul', 'george', 'ringo']]\r\nprint(sort_sublists(list1))\r\n\r\n\r","votes":137284.744},{"text":"\r\n    sublists_sorted = []\r\n    for sublist in list1:\r\n        sublists_sorted.append(sorted(sublist))\r\n    return sublists_sorted\r\n\r\n\r","votes":142762.78},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n\r\n    return list1\r\n\r\n\r\nprint(sort_sublists([[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"]]))\r\n\r\nprint(sort_sublists([[\"a\", \"c\"], [\"c\", \"b\"], [\"d\", \"e\"]]))\r\n\r\nprint(sort_sublists([[\"a\", \"c\"], [\"c\", \"b\"], [\"d\", \"e\"], [\"e\", \"f\"], [\"f\", \"g\"]]))\r\n\r\n\r","votes":145051.528},{"text":"\r\n    list2 = []\r\n    for sublist in list1:\r\n        temp = []\r\n        for item in sublist:\r\n            temp.append(item)\r\n        temp.sort()\r\n        list2.append(temp)\r\n    return list2\r\n\r\n\r","votes":152704.308},{"text":"\r\n    list2 = []\r\n    for sublist in list1:\r\n        sublist.sort()\r\n        list2.append(sublist)\r\n    return list2\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sort_sublists([['a', 'b'], ['z', 'y'], ['c', 'd']]))\r\n    print(sort_sublists([['a', 'b', 'c'], ['z', 'y', 'x'], ['m', 'n', 'o']]))\r\n    print(sort_sublists([['a', 'b', 'c'], ['z', 'y', 'x'], ['m', 'n']]))\r\n    print(sort_sublists([['a', 'b', 'c'], ['z', 'y', 'x'], ['m', 'n', 'o'], ['e', 'f', 'g']]))\r\n    print(sort_sublists([['z', 'y', 'x'], ['m', 'n', 'o'], ['e', 'f', 'g']]))\r\n","votes":161278.176},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n    return list1\r\n\r\n\r","votes":169904.86},{"text":"\r\n    answer = []\r\n    for sublist in list1:\r\n        answer.append(sorted(sublist))\r\n    return answer\r\n\r\n\r","votes":179332.228},{"text":"\r\n    for i in range(0, len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r","votes":180520.492},{"text":"\r\n    # Hint: you can use the sort() method on lists.\r\n    new_list = []\r\n    for item in list1:\r\n        new_list.append(sorted(item))\r\n    return new_list\r\n\r\n\r\nprint(sort_sublists([[\"b\", \"d\", \"a\"], [\"a\", \"c\", \"b\"], [\"c\", \"b\", \"a\"]]))\r\n# [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\r\n\r\nprint(sort_sublists([[\"d\", \"a\", \"b\", \"c\"], [\"c\", \"a\", \"b\", \"d\"], [\"b\", \"c\", \"a\", \"d\"]]))\r\n# [['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']]\r\n\r\nprint(sort_sublists([[\"c\", \"d\", \"a\", \"b\"], [\"d\", \"b\", \"c\", \"a\"], [\"a\", \"b\", \"c\", \"d\"]]))\r\n# [['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']]\r\n\r\nprint(sort_sublists([[\"c\", \"d\", \"a\", \"b\"], [\"b\", \"d\", \"a\", \"c\"], [\"a\", \"b\", \"c\", \"d\"]]))\r\n# [['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']]\r\n\r\nprint(sort_sublists([[\"c\", \"d\", \"a\", \"b\"], [\"a\", \"d\", \"b\", \"c\"], [\"b\", \"c\", \"d\", \"a\"]]))\r\n# [['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', '","votes":182245.188},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n\r\n    return list1\r\n\r\n\r","votes":184951.888},{"text":"\r\n    # initialize an empty list\r\n    sorted_lists = []\r\n    # iterate through the list\r\n    for sublist in list1:\r\n        # sort the sublist\r\n        sorted_sublist = sorted(sublist)\r\n        # append the sorted sublist to the sorted_lists list\r\n        sorted_lists.append(sorted_sublist)\r\n    return sorted_lists\r\n\r\n\r","votes":185613.76},{"text":"\r\n    for i in list1:\r\n        i.sort()\r\n    return list1\r\n\r\n\r\nprint(sort_sublists([[\"b\", \"c\"], [\"a\", \"d\"], [\"c\", \"d\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"c\", \"d\"]]))\r\nprint(sort_sublists([[\"a\"], [\"b\"]]))\r\nprint(sort_sublists([[\"b\", \"a\"], [\"d\", \"c\"], [\"c\", \"d\"]]))\r\nprint(sort_sublists([[\"a\", \"a\"], [\"c\", \"d\"], [\"b\", \"c\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"c\", \"d\"], [\"b\", \"c\"]]))\r\nprint(sort_sublists([[\"b\", \"a\"], [\"c\", \"d\"], [\"b\", \"c\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"c\", \"d\"], [\"d\", \"c\"]]))\r\nprint(sort_sublists([[\"a\", \"b\"], [\"c\", \"d\"], [\"c\", \"d\"]]))\r\n\r\n\r","votes":189351.148},{"text":"\r\n    sublists = []\r\n    for sublist in list1:\r\n        sublists.append(sorted(sublist))\r\n    return sublists\r\n\r\n\r","votes":190172.044},{"text":"\r\n    list2 = []\r\n    for sublist in list1:\r\n        sublist.sort()\r\n        list2.append(sublist)\r\n    return list2\r\n\r\n\r","votes":190819.24},{"text":"\r\n    return [sorted(x) for x in list1]\r\n\r\nprint(sort_sublists([['c', 'a', 'b'], ['c', 'b', 'a'], ['b', 'a', 'c']]))\r\n\r\n\r","votes":191460.436},{"text":"\r\n    new_list = []\r\n    for sublist in list1:\r\n        sublist.sort()\r\n        new_list.append(sublist)\r\n    return new_list\r\n\r\n\r","votes":194504.192},{"text":"\r\n    list2 = []\r\n    for i in list1:\r\n        list2.append(sorted(i))\r\n    return list2\r\n\r\nprint(sort_sublists([[\"b\", \"a\"], [\"c\", \"f\"], [\"d\", \"e\"]]))\r\nprint(sort_sublists([[\"b\", \"a\"], [\"c\", \"f\"], [\"d\", \"e\"], [\"f\", \"c\"]]))\r\nprint(sort_sublists([[\"b\", \"a\"], [\"c\", \"f\"], [\"d\", \"e\"], [\"f\", \"c\"], [\"x\", \"z\"], [\"g\", \"h\"]]))\r\nprint(sort_sublists([[\"b\", \"a\"], [\"c\", \"f\"], [\"d\", \"e\"], [\"f\", \"c\"], [\"x\", \"z\"], [\"g\", \"h\"], [\"h\", \"g\"]]))\r\nprint(sort_sublists([[\"b\", \"a\"], [\"c\", \"f\"], [\"d\", \"e\"], [\"f\", \"c\"], [\"x\", \"z\"], [\"g\", \"h\"], [\"h\", \"g\"], [\"c\", \"a\"]]))\r\n\r\n# ------------------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":194797.068},{"text":"\r\n    list2 = []\r\n    for sublist in list1:\r\n        list2.append(sorted(sublist))\r\n    return list2\r\n","votes":195040.592},{"text":"\r\n    new_list = []\r\n    for sublist in list1:\r\n        new_list.append(sorted(sublist))\r\n    return new_list\r\n\r\n\r\nprint(sort_sublists([['a', 'b', 'd'], ['c', 'a', 'd'], ['a', 'c']]))\r\n# [['a', 'b', 'd'], ['a', 'c', 'd'], ['a', 'c']]\r\n\r\nprint(sort_sublists([['a', 'b', 'd'], ['c', 'a', 'd'], ['e']]))\r\n# [['a', 'b', 'd'], ['a', 'c', 'd'], ['e']]\r\n\r\nprint(sort_sublists([['a', 'b', 'd'], ['c', 'a', 'd'], ['e'], ['a']]))\r\n# [['a', 'b', 'd'], ['a', 'c', 'd'], ['a'], ['e']]\r\n\r\nprint(sort_sublists([['a', 'b', 'd'], ['c', 'a', 'd'], ['e'], ['a'], ['d', 'b']]))\r\n# [['a', 'b', 'd'], ['a', 'c', 'd'], ['a'], ['d', 'b'], ['e']]\r\n\r\nprint(sort_sublists([['a', 'b', 'd'], ['c', 'a', 'd'], ['e'], ['a'], ['d', 'b'], ['a', 'b', 'd']]))\r\n# [['a', 'b', 'd'], ['a', 'c', 'd'], ['a'], ['d', 'b'], ['a', 'b', 'd'], ['e']]\r\n\r\nprint(sort_sublists([['a', 'b', 'd'], ['c', 'a', 'd'], ['e'], ['a'], ['d', 'b'], ['a', 'b', 'd'], ['a', 'd']]))\r\n# [['a', 'b', 'd'], ['a', 'c', '","votes":203639.088},{"text":"\r\n    list_of_sublists = []\r\n    for i in list1:\r\n        list_of_sublists.append(sorted(i))\r\n    return list_of_sublists\r\n\r\n\r\nprint(sort_sublists([['a', 'b'], ['c', 'd'], ['b', 'e']]))\r\n# [['a', 'b'], ['b', 'c'], ['c', 'd'], ['d', 'e'], ['b', 'e']]\r\n\r\n\r","votes":203898.636},{"text":"\r\n    return [sorted(sublist) for sublist in list1]\r\n\r\n\r\nlist1 = [['b', 'd'],['a', 'c'],['e']]\r\nprint(sort_sublists(list1))\r\n\r\n\r","votes":207431.624},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r\nlist1 = [[10, 1, 3], ['a', 'c', 'b'], [10, 10, 10]]\r\nprint(sort_sublists(list1))\r\n\r\n\r","votes":211811.912},{"text":"\r\n    new_list = []\r\n    for i in list1:\r\n        new_list.append(sorted(i))\r\n    return new_list\r\n\r\n","votes":230640.236},{"text":"\r\n    list2 = [sorted(i) for i in list1]\r\n    return list2\r\n\r","votes":231396.14},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n    return list1\r\n\r\n\r\nlist1 = [['a', 'c', 'e'], ['b', 'd'], ['f']]\r\nprint(sort_sublists(list1))\r\n# [['a', 'b', 'c', 'd', 'e'], ['f']]\r\n\r\n\r","votes":275269.244},{"text":"\r\n    sublists = []\r\n    for sublist in list1:\r\n        sublists.append(sorted(sublist))\r\n    return sorted(sublists)\r\n\r\nprint(sort_sublists([[\"b\", \"c\", \"a\"], [\"a\", \"c\", \"b\"], [\"b\", \"a\", \"c\"]]))\r\nprint(sort_sublists([[\"z\", \"y\", \"x\"], [\"x\", \"y\", \"z\"], [\"y\", \"x\", \"z\"]]))\r\nprint(sort_sublists([[\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]]))\r\nprint(sort_sublists([[\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"]]))\r\nprint(sort_sublists([[\"b\", \"c\", \"a\"], [\"a\", \"c\", \"b\"], [\"b\", \"a\", \"c\"]]))\r\nprint(sort_sublists([[\"z\", \"y\", \"x\"], [\"x\", \"y\", \"z\"], [\"y\", \"x\", \"z\"]]))\r\nprint(sort_sublists([[\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]]))\r\nprint(sort_sublists([[\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"], [\"x\", \"y\", \"z\"]]))\r\nprint(sort_sublists([[\"b\", \"c\", \"a\"], [\"a\", \"c\", \"b\"], [\"b\", \"a\", ","votes":null},{"text":"\r\n    # Your code here\r\n    list1.sort(key = lambda x: x.sort())\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    return sorted(list1, key=lambda word: word.lower())\r\n\r\n\r","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return sorted(list1, key=sorted)\r\n\r\n\r\nprint(sort_sublists([[\"b\", \"c\", \"a\"], [\"z\", \"y\", \"x\"], [\"d\", \"a\", \"v\"]]))\r\n\r\n\r","votes":null},{"text":"\r\n    list1 = sorted(list1, key=lambda x: x)\r\n    return list1\r\n\r","votes":null},{"text":"\r\n    return sorted(list1)\r\n\r\n\r","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort","votes":null},{"text":"\r\n    # sort each sublist\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n\r\n    # sort each list\r\n    list1.sort()\r\n\r\n    # print the output\r\n    print(list1)\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n\r\n\r","votes":null},{"text":"\r\n    return sorted(list1, key=lambda x: sorted(x))\r\n\r\n\r","votes":null},{"text":"\r\n    # 1. Get the length of the longest string in the list\r\n    # 2. Loop through the list of lists, sorting each sublist\r\n    # 3. Return the sorted list\r\n    pass\r\n\r\n# ---------------------------------------------------\r\n# Coding standard:\r\n# import math\r\n# import os\r\n# import random\r\n# import re\r\n# import sys\r\n# ---------------------------------------------------\r\n\r\nif __name__ == '__main__':\r\n    #fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    l = int(input())\r\n\r\n    list1 = []\r\n\r\n    for _ in range(l):\r\n        list1_item = input()\r\n        list1.append(list1_item)\r\n\r\n    res = sort_sublists(list1)\r\n\r\n    #fptr.write('\\n'.join(map(str, res)))\r\n    #fptr.write('\\n')\r\n\r\n    #","votes":null},{"text":"\r\n    list1.sort(key=lambda x: x[0])\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    #list1 = [[str1, str2], [str3, str4], ...]\r\n\r\n    #list1 = [[str1, str2], [str3, str4], ...]\r\n    #list2 = [[str2], [str4], ...]\r\n    #list3 = [str2, str4, ...]\r\n\r\n    list2 = []\r\n    for item in list1:\r\n        list2.append(item[1])\r\n\r\n    #list2 = [[str2], [str4], ...]\r\n    #list3 = [str2, str4, ...]\r\n    \r\n    list3 = []\r\n    for item in list2:\r\n        list3.append(item[0])\r\n\r\n    #list3 = [str2, str4, ...]\r\n\r\n    list4 = []\r\n    for item in list1:\r\n        list4.append(item[0])\r\n\r\n    #list4 = [[str1, str2], [str3, str4], ...]\r\n\r\n    list5 = []\r\n    for item in list4:\r\n        list5.append(item[1])\r\n\r\n    #list5 = [[str2], [str4], ...]\r\n\r\n    list6 = []\r\n    for item in list1:\r\n        list6.append(item[0])\r\n    \r\n    #list6 = [[str1, str2], [str3, str4], ...]\r\n\r\n    list7 = []\r\n    for item in list6:\r\n        list7.append(item[0])\r\n\r\n    #list7 = [str1, str3, ...]\r\n\r\n    return list1, list2, list3, list4, list5, list6, list7\r\n\r","votes":null},{"text":"\r\n    \r\n    # sort each sublist of strings in a given list of lists\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n    # return the sorted list\r\n    return list1\r\n\r\n\r\n# Test cases (expected outputs)\r\nprint(sort_sublists([[\"c\", \"a\", \"b\"], [\"b\", \"a\", \"c\"]]))\r\nprint(sort_sublists([[\"c\", \"a\", \"b\"], [\"b\", \"a\", \"c\"], [\"c\", \"a\", \"b\"]]))\r\nprint(sort_sublists([[\"c\", \"a\", \"b\"], [\"b\", \"a\", \"c\"], [\"c\", \"a\", \"b\"], [\"b\", \"a\", \"c\"]]))\r\nprint(sort_sublists([[\"c\", \"a\", \"b\"], [\"a\", \"c\", \"b\"]]))\r\nprint(sort_sublists([[\"c\", \"a\", \"b\"], [\"c\", \"b\", \"a\"]]))\r\nprint(sort_sublists([[\"c\", \"a\", \"b\"], [\"a\", \"b\", \"c\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"a\", \"c\", \"b\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"b\", \"a\", \"c\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"b\", \"c\", \"a\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"c\", \"a\", \"b\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"], [\"a\", \"b\", \"c\"]]))\r\nprint(sort_sublists([[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]]))\r\nprint(sort_su","votes":null},{"text":"\r\n    # Sort the sublist\r\n    list1.sort()\r\n    # Return the sorted list\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\n\r\n# Examples:\r\nlist1 = [[\"a\", \"c\"], [\"b\", \"d\"], [\"c\", \"a\"]]\r\nsort_sublists(list1)\r\nprint(list1)  # [['a', 'c'], ['b', 'd'], ['a', 'c']]\r\n\r\nlist2 = [[\"b\"], [\"b\", \"c\"], [\"a\"]]\r\nsort_sublists(list2)\r\nprint(list2)  # [['b'], ['b', 'c'], ['a']]\r\n\r\nlist3 = [[\"b\", \"c\"], [\"a\"], [\"a\", \"b\"]]\r\nsort_sublists(list3)\r\nprint(list3)  # [['b', 'c'], ['a'], ['a', 'b']]\r\n\r\n# Exercise 13:\r\n# Create an empty list called list1.\r\n# Using a for loop, iterate through the list [\"a\", \"b\", \"c\"] and append each element to list1.\r\n# Print list1.\r\n#\r\n# Exercise 14:\r\n# Create an empty list called list1.\r\n# Using a for loop, iterate through the list [\"a\", \"b\", \"c\"] and insert each element into list1 at position 0.\r\n# Print list1.\r\n#\r\n# Exercise 15:\r\n# Create an empty list called list1.\r\n# Using a for loop, iterate through the list [\"a\", \"b\", \"c\"] and insert each element into list1 at position 1.\r\n# Print list1.\r\n#\r\n# Exercise 16:\r\n# Create an empty list called list1.\r\n# Using a for loop, iterate through the list [\"a\", \"b\", \"c\"] and append each element to list1 with an augmented assignment.\r\n# Print list1.\r\n#\r\n# Exercise 17:\r\n# Create an empty list called list1.\r\n# Using a for loop, iterate through the list [\"a\"","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort(reverse=True)\r\n        \r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    return sorted(list1, key=lambda x: sorted(x))\r\n\r","votes":null},{"text":"\r\n    list1.sort(key=lambda x: x[0].lower())\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    return sorted(list1)\r\n\r","votes":null},{"text":"\r\n    return sorted(list1, key=lambda x: x)\r\n\r\nlist1 = [[3, 1, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]\r\nprint(sort_sublists(list1))\r\n\r\n# 3\r\n\r","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n\r\nlist1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\r\nprint(list1)\r\nsort_sublists(list1)\r\nprint(list1)","votes":null},{"text":"\r\n    return sorted(list1, key=lambda x: x.sort())\r\n\r\n    # Alternate solution:\r\n    # return sorted(list1, key=lambda x: sorted(x))\r\n\r\n\r","votes":null},{"text":"\r\n    return sorted(list1, key = lambda x: sorted(x))\r\n\r\n# Tests\r\n","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        list1[i].sort()\r\n        \r\n    list1.sort()\r\n    \r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort(key=len)\r\n    return list1\r\n\r\n\r\nlist1 = [['cat', 'dog', 'mouse'], ['hello', 'world'], ['a', 'b', 'c']]\r\nprint(sort_sublists(list1))\r\n# [['a', 'b', 'c'], ['cat', 'dog', 'mouse'], ['hello', 'world']]\r\n\r\n\r","votes":null},{"text":"\r\n    # use a lambda function to sort each sublist of strings in a given list of lists\r\n    return sorted(list1, key=lambda x: x[0])\r\n\r\n\r","votes":null},{"text":"\r\n    for sublist in list1:\r\n        sublist.sort()\r\n    return list1\r\n\r\n\r\nprint(sort_sublists([\r\n    ['zebra', 'apple', 'banana'],\r\n    ['","votes":null},{"text":"\r\n    result = []\r\n    for list2 in list1:\r\n        for list3 in list2:\r\n            result.append(sorted(list3))\r\n    return result\r\n\r\nlist1 = [[\"b\", \"a\", \"c\"], [\"c\", \"b\", \"a\"]]\r\nprint(sort_sublists(list1))\r\n\r\n\r","votes":null},{"text":"\r\n    list1.sort()\r\n    return list1\r\n\r\n\r","votes":null},{"text":"\r\n    \"\"\"Return the list of sorted sublists.\"\"\"\r\n    new_list = []\r\n    for x in list1:\r\n        new_list.append(sorted(x))\r\n    return new_list\r\n\r\n\r\nprint(sort_sublists([['c', 'b', 'a'], ['g', 'f', 'e'], ['i', 'h', 'j']]))\r\nprint(sort_sublists([['a'], ['c', 'b', 'a'], ['g', 'f', 'e'], ['i', 'h', 'j']]))\r\nprint(sort_sublists([['a'], ['a'], ['a'], ['a']]))\r\nprint(sort_sublists([['c', 'b', 'a'], ['g', 'f', 'e'], ['i', 'h', 'j']]))\r\nprint(sort_sublists([['c', 'b', 'a'], ['g', 'f', 'e'], ['i', 'h', 'j']]))\r\nprint(sort_sublists([['c', 'b', 'a'], ['g', 'f', 'e'], ['i', 'h', 'j']]))\r\nprint(sort_sublists([['c', 'b', 'a'], ['g', 'f', 'e'], ['i', 'h', 'j']]))\r\nprint(sort_sublists([['c', 'b', 'a'], ['g', 'f', 'e'], ['i', 'h', 'j']]))\r\nprint(sort_sublists([['c', 'b', 'a'], ['g', 'f', 'e'], ['i', 'h', 'j']]))\r\nprint(sort_sublists([['c', 'b', 'a'], ['g', 'f', 'e'], ['i', 'h', 'j']]))\r\nprint(sort_sublists([['c', 'b', 'a'], ['g', 'f', 'e'], ['i', 'h', 'j']]))\r\nprint(sort_sublists([['c', 'b', 'a'], ['g', 'f', 'e'], ['i', ","votes":null},{"text":"\r\n    return sorted(list1, key=lambda sublist: sublist[0])\r\n\r\n\r\nlist1 = [[\"Liam\", \"Taylor Swift\"], [\"Harry\", \"Styles\"], [\"Kate\", \"Middleton\"], [\"Mark\", \"","votes":null}],"time":{"count":45.0,"avg":159464.9376,"std":41186.9653495692,"cov":0.2582822655}}
{"id":572,"question":"def two_unique_nums(nums):\r\n    \"\"\"Write a python function to remove two duplicate numbers from a given number of lists.\"\"\"","answers":[{"text":"\r\n    \r\n    new_nums = []\r\n    for num in nums:\r\n        if not num in new_nums:\r\n            new_nums.append(num)\r\n        elif num in new_nums:\r\n            new_nums.remove(num)\r\n    return new_nums\r\n\r\n\r","votes":86373.448},{"text":"\r\n    result = []\r\n    for i in nums:\r\n        if i in result:\r\n            result.remove(i)\r\n        else:\r\n            result.append(i)\r\n    return result\r\n\r\n\r","votes":137475.48},{"text":"\r\n    nums.sort()\r\n    if len(nums) == 2:\r\n        return nums\r\n    \r\n    for i in range(len(nums)-1):\r\n        if nums[i] == nums[i+1]:\r\n            nums.pop(i)\r\n            nums.pop(i)\r\n            return two_unique_nums(nums)\r\n    return nums\r\n\r\n\r","votes":239558.432},{"text":"\r\n    set_nums = list(set(nums))\r\n    if len(set_nums) == len(nums):\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums)==0:\r\n        return nums\r\n    else:\r\n        x=nums[0]\r\n        y=nums[1]\r\n        nums.remove(x)\r\n        nums.remove(y)\r\n        return nums\r\n\r\n\r\n# test case:\r\nnums = [1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]\r\nprint(two_unique_nums(nums))\r\n\r\n\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    for i in range(len(nums)):\r\n        for j in range(i+1,len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[i])\r\n                nums.remove(nums[i])\r\n                nums.append(nums[i])\r\n                break\r\n    \r\n    return nums\r\n\r\n\r\nnums = [1,2,3,4,5,6,7,7,7,8,9,0,0,1]\r\nprint(two_unique_nums(nums))\r\n\r\n#Output:\r\n#[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    nums.sort()\r\n    res = []\r\n    for i in range(len(nums) - 1):\r\n        if nums[i] != nums[i + 1]:\r\n            res.append(nums[i])\r\n            res.append(nums[i + 1])\r\n            break\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    nums = sorted(nums)\r\n    if len(nums) > 2:\r\n        for i in range(0, len(nums) - 2):\r\n            if nums[i] == nums[i + 1]:\r\n                del nums[i]\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [1, 1, 2, 2, 3, 4]\r\n    print(two_unique_nums(nums))\r\n\r\n\"\"\"\r\nTime complexity: O(nlogn)\r\nSpace complexity: O(1)\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums) < 2:\r\n        return nums\r\n    else:\r\n        if len(nums) == 2:\r\n            if nums[0] == nums[1]:\r\n                return nums[0]\r\n            else:\r\n                return nums\r\n        else:\r\n            nums = list(set(nums))\r\n            if len(nums) == 2:\r\n                if nums[0] == nums[1]:\r\n                    return nums[0]\r\n                else:\r\n                    return nums\r\n            else:\r\n                return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(two_unique_nums([3, 3, 4, 5, 6]))\r\n    print(two_unique_nums([3, 3, 4, 5, 6, 7]))\r\n    print(two_unique_nums([3, 4, 5, 6, 7]))\r\n    print(two_unique_nums([3, 4, 5, 6, 7, 8]))\r\n    print(two_unique_nums([3, 4, 5, 6, 7, 8, 9]))\r\n    print(two_unique_nums([3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(two_unique_nums([3, 4, 5, 6, 7, 8, 9, 10, 11]))\r\n    print(two_unique_nums([3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n    print(two_unique_nums([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.pop(j)\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    # Solution:\r\n    if len(nums) < 3:\r\n        return False\r\n    \r\n    num_dict = {}\r\n    for num in nums:\r\n        if num in num_dict:\r\n            num_dict[num] += 1\r\n        else:\r\n            num_dict[num] = 1\r\n            \r\n    for num in num_dict:\r\n        if num_dict[num] == 2:\r\n            return True\r\n    return False\r\n\r\n# Testing:\r\nprint(two_unique_nums([1,2,3,4,5]))\r\nprint(two_unique_nums([1,2,3,4,5,6]))\r\nprint(two_unique_nums([1,2,3,4,5,6,7]))\r\nprint(two_unique_nums([1,2,3,4,5,6,7,8]))\r\nprint(two_unique_nums([1,2,3,4,5,6,7,8,9]))\r\nprint(two_unique_nums([1,2,3,4,5,6,7,8,9,10]))\r\nprint(two_unique_nums([1,2,3,4,5,6,7,8,9,10,11]))\r\nprint(two_unique_nums([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]))\r\nprint","votes":null},{"text":"\r\n    # Your code goes here\r\n    nums = list(set(nums))\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # create a new list with 2 elements\r\n    nums_new = []\r\n    \r\n    # create a set to store the unique elements\r\n    unique_elements = set()\r\n    \r\n    # iterate over the elements in the list\r\n    for element in nums:\r\n        \r\n        # if the element is not in the set then add it\r\n        if element not in unique_elements:\r\n            unique_elements.add(element)\r\n            nums_new.append(element)\r\n    \r\n    # if the length of the list is 2 then return the list\r\n    if len(nums_new) == 2:\r\n        return nums_new\r\n    \r\n    # if the length of the list is not 2 then return False\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    for i in range(len(nums)):\r\n        if nums.count(nums[i]) > 2:\r\n            nums.remove(nums[i])\r\n    return nums\r\n\r\n\r\nprint(two_unique_nums([1, 1, 2, 2, 3, 4, 5, 6, 7, 7, 7]))\r\nprint(two_unique_nums([1, 1, 2, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7","votes":null},{"text":"\r\n    # Your code here\r\n    nums=list(set(nums))\r\n    nums.sort()\r\n    if len(nums)==2:\r\n        return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    nums_set = set(nums)\r\n    if len(nums_set) == 2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # create two lists\r\n    list1 = []\r\n    list2 = []\r\n\r\n    # assign values to the lists\r\n    list1 = nums[0]\r\n    list2 = nums[1]\r\n\r\n    # check if the lists have duplicate numbers and remove them\r\n    if list1 in list2:\r\n        list2.remove(list1)\r\n    if list2 in list1:\r\n        list1.remove(list2)\r\n\r\n    # return the lists\r\n    return list1, list2\r\n\r\n\r\n# test the function\r\nprint(two_unique_nums([[1, 2, 3], [1, 2, 4]]))\r\n\r\n\r\n#  Write a python function to find the smallest number in a list.\r\n\r\n\r","votes":null},{"text":"\r\n    #nums = [4,3,2,7,8,2,3,1]\r\n    nums.sort()\r\n    #nums = [1,2,2,3,3,4,5,6]\r\n    #nums = [2,4,3,1,2]\r\n    #nums = [7,1,2,3,4,5,6]\r\n    for i in range(len(nums)-2):\r\n        if (nums[i] == nums[i+1]):\r\n            nums.remove(nums[i+1])\r\n    if (len(nums) == 3):\r\n        return True\r\n    else:\r\n        return False\r\n#two_unique_nums(nums)\r\n\r\n\r","votes":null},{"text":"\r\n    new_list = []\r\n    for num in nums:\r\n        if num not in new_list:\r\n            new_list.append(num)\r\n    return new_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums1 = [1, 3, 3, 5, 7, 8, 10, 10]\r\n    nums2 = [1, 2, 3, 4, 5, 6, 7, 8]\r\n    nums3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    nums4 = [3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9]\r\n    nums5 = [1, 2, 3, 4, 5, 6, 7,","votes":null},{"text":"\r\n    nums_set = set(nums)\r\n    nums_list = list(nums_set)\r\n    if len(nums_list) == 2:\r\n        return nums_list\r\n    elif len(nums_list) == 1:\r\n        return nums_list + [0]\r\n    else:\r\n        return nums_list\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    nums.sort()\r\n    if nums[0] == nums[1]:\r\n        return nums[2:]\r\n    elif nums[-1] == nums[-2]:\r\n        return nums[:-2]\r\n    else:\r\n        return []\r\n\r\n\r","votes":null},{"text":"\r\n    temp = []\r\n    for i in range(len(nums)):\r\n        for j in range(i+1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                temp.append(nums[i])\r\n    for i in range(len(nums)):\r\n        if nums[i] in temp:\r\n            nums.remove(nums[i])\r\n    return nums\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    nums.sort()\r\n    for i in range(len(nums)-1):\r\n        if nums[i] == nums[i+1]:\r\n            nums.remove(nums[i])\r\n            nums.remove(nums[i])\r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Remove two duplicate numbers from a given number of lists.\")\r\n    nums = [1, 1, 2, 2, 3, 4]\r\n    print(two_unique_nums(nums))  # expected [1, 2, 3, 4]\r\n    nums = [1, 2, 3, 4, 5]\r\n    print(two_","votes":null},{"text":"\r\n\r\n    if len(nums) < 2:\r\n        return 'False'\r\n    \r\n    for num in range(len(nums) - 1):\r\n        for num_2 in range(num + 1, len(nums)):\r\n            if nums[num] == nums[num_2]:\r\n                nums.remove(nums[num])\r\n                nums.remove(nums[num_2])\r\n                break\r\n    \r\n    if len(nums) == 2:\r\n        return 'True'\r\n    else:\r\n        return 'False'\r\n\r\n\r\n# Tests\r\nprint(two_unique_nums([1, 2, 2, 2, 3, 4, 5]))\r\n# True\r\n\r\nprint(two_unique_nums([1, 1, 1, 2, 2, 2, 3, 4, 5]))\r\n# False\r\n\r\nprint(two_unique_nums([1, 2, 2, 2, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 12, 13, 14, 15, 16]))\r\n# True\r\n\r\nprint(two_unique_nums([1, 2, 2, 2, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 8, 9, 10, 10, 10, 10, 11, 12, 13, 14, 15, 16]))\r\n# False\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, ","votes":null},{"text":"\r\n    # Write your code here\r\n    if not nums:\r\n        return False\r\n    else:\r\n        for i in range(len(nums)):\r\n            if nums.count(nums[i]) == 2:\r\n                nums.remove(nums[i])\r\n    if len(nums) <= 2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    input = [1, 2, 2, 3, 3, 3]\r\n    if two_unique_nums(input):\r\n        print(\"True\")\r\n    else:\r\n        print(\"False\")\r\n\r\n    input = [1, 1, 1, 2, 2, 3]\r\n    if two_unique_nums(input):\r\n        print(\"","votes":null},{"text":"\r\n    \r\n    # set the dictionary to store the count of each element\r\n    counts = {}\r\n\r\n    # loop through each element and increment the count\r\n    for num in nums:\r\n        counts[num] = counts.get(num, 0) + 1\r\n\r\n    # only keep the counts that are greater than 1\r\n    for num in list(counts.keys()):\r\n        if counts[num] > 1:\r\n            counts[num] = 1\r\n\r\n    # only keep the counts that are equal to 1\r\n    for num in list(counts.keys()):\r\n        if counts[num] != 1:\r\n            counts.pop(num)\r\n\r\n    # return the keys in the dictionary\r\n    return list(counts.keys())\r\n\r\n\r\n# Tests\r\n\r","votes":null},{"text":"\r\n    \r\n    return list(set(nums))\r\n\r\n    \r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # your code goes here\r\n    d={}\r\n    for n in nums:\r\n        if d.get(n)==None:\r\n            d[n]=1\r\n        else:\r\n            d[n]+=1\r\n\r\n    res=[]\r\n    for key in d.keys():\r\n        if d[key]==2:\r\n            res.append(key)\r\n    return res\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nn=int(input())\r\nnums=list(map(int,input().split()))\r\nnums.sort()\r\nnums=nums[::-1]\r\n\r\nfor i in range(0,n,2):\r\n    print(nums[i])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nn=int(input())\r\nnums=list(map(int,input().split()))\r\n\r\nd={}\r\nfor i in range(n):\r\n    if d.get(nums[i])==None:\r\n        d[nums[i]]=1\r\n    else:\r\n        d[nums[i]]+=1\r\n\r\nres=[]\r\nfor key in d.keys():\r\n    if d[key]==2:\r\n        res.append(key)\r\n\r\nprint(res)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nn=int(input())\r\nnums=list(map(int,input().split()))\r\n\r\nd={}\r\nfor i in rang","votes":null},{"text":"\r\n    \r\n    # Your code here\r\n    \r\n    # Return the list with only two unique numbers\r\n    return nums[:2]\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Print the result in the console.\r\n    print(two_unique_nums([1, 2, 3, 4, 1, 2, 5, 6, 7, 8, 9, 10, 1, 2, 11, 12, 13, 14, 15]))\r\n    print(two_unique_nums([1, 2, 3, 4, 1, 2, 5, 6, 7, 8, 9, 10, 1, 2, 11, 12, 13, 14, 15, 1, 2, 11, 12, 13, 14, 15]))\r\n    print(two_unique_nums([1, 2, 3, 4, 1, 2, 5, 6, 7, 8, 9, 10, 1, 2, 11, 12, 13, 14, 15, 1, 2, 11, 12, 13, 14, 15, 1, 2, 11, 12, 13, 14, 15]))\r\n    print(two_unique_nums([1, 2, 3, 4, 1, 2, 5, 6, 7, 8, 9, 10, 1, 2, 11, 12, 13, 14, 15, 1, 2, 11, 12, 13, 14, 15, 1, 2, 11, 12, 13,","votes":null},{"text":"\r\n    if len(nums) < 2:\r\n        return False\r\n    nums.sort()\r\n    return True\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(i+1,len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[i])\r\n                nums.remove(nums[i])\r\n                break\r\n    return nums\r\n\r\nnums = [1,2,2,3,4,4,5,6]\r\nprint(two_unique_nums(nums))\r\n\r\n# 7.1\r","votes":null},{"text":"\r\n    n = len(nums)\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[i])\r\n                nums.remove(nums[j-1])\r\n                return nums\r\n\r\n\r\nnums = [1, 1, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\r\n        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\r\n        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\r\n        5, 5, 5, 5, 5, 5, 5, 5,","votes":null},{"text":"\r\n    if len(nums) < 2:\r\n        return []\r\n    if len(nums) == 2:\r\n        return nums\r\n    for i in range(len(nums)):\r\n        if nums[i] in nums[i+1:]:\r\n            nums.remove(nums[i])\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    nums_set = set(nums)\r\n    return len(nums_set) == len(nums) + 1\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    nums.sort()\r\n    result=[]\r\n    unique_nums = []\r\n    for num in nums:\r\n        if num not in unique_nums:\r\n            unique_nums.append(num)\r\n            if len(unique_nums)==2:\r\n                result.append(unique_nums)\r\n                unique_nums = []\r\n    return result\r\n\r","votes":null},{"text":"\r\n    nums_set = set(nums)\r\n    if len(nums_set) == len(nums):\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":null},{"text":"\r\n    unique_list=[]\r\n    for i in range(len(nums)):\r\n        if nums[i] not in unique_list:\r\n            unique_list.append(nums[i])\r\n    return unique_list\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    temp = []\r\n    for i in nums:\r\n        if i not in temp:\r\n            temp.append(i)\r\n    return temp\r\n\r\n\r","votes":null},{"text":"\r\n    a = nums[0]\r\n    b = nums[1]\r\n    c = nums[2]\r\n    d = nums[3]\r\n    if a == c:\r\n        return b, d\r\n    if a == d:\r\n        return b, c\r\n    if b == c:\r\n        return a, d\r\n    if b == d:\r\n        return a, c\r\n    if c == d:\r\n        return a, b\r\n\r\n    return nums\r\n\r\n\r\nprint(\"two_unique_nums([1, 3, 5, 3]) = \", two_unique_nums([1, 3, 5, 3]))\r\nprint(\"two_unique_nums([1, 3, 5, 3, 5]) = \", two_unique_nums([1, 3, 5, 3, 5]))\r\nprint(\"two_unique_nums([1, 3, 5, 3, 5, 7]) = \", two_unique_nums([1, 3, 5, 3, 5, 7]))\r\nprint(\"two_unique_nums([1, 3, 5, 3, 5, 7, 7]) = \", two_unique_nums([1, 3, 5, 3, 5, 7, 7]))\r\nprint(\"two_unique_nums([1, 3, 5, 3, 5, 7, 7, 7]) = \", two_unique_nums([1, 3, 5, 3, 5, 7, 7, 7]))\r\nprint(\"two_unique_nums([1, 3, 5, 3, 5, 7, 7, 7, 7]) = \", two_unique_nums([1, 3, 5, 3, 5, 7, 7, 7, 7]))\r\nprint(\"two_unique_num","votes":null},{"text":"\r\n    import collections\r\n    if len(nums) == 1:\r\n        return(nums)\r\n    else:\r\n        counts = collections.Counter(nums)\r\n        most_frequent = counts.most_common(1)[0][0]\r\n        most_frequent_count = counts.most_common(1)[0][1]\r\n        if most_frequent_count > 1:\r\n            nums.remove(most_frequent)\r\n            return two_unique_nums(nums)\r\n        else:\r\n            return two_unique_nums(nums)\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [1,2,3,3,3,4,5,6,7,8,8,8,8,9,9,9,9,9,9]\r\n    print(two_unique_nums(nums))\r\n\r\n#Reference: w3resource\r\n#https:\/\/www.w3resource.com\/python-exercises\/python-basic-exercise-47.php\r\n\r\n#","votes":null},{"text":"\r\n    if len(nums) < 3:\r\n        return False\r\n\r\n    nums_hash = {}\r\n    for num in nums:\r\n        if num not in nums_hash:\r\n            nums_hash[num] = 1\r\n        else:\r\n            nums_hash[num] += 1\r\n\r\n    for key in nums_hash:\r\n        if nums_hash[key] == 2:\r\n            return True\r\n\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(two_unique_nums([1, 2, 3, 1, 2, 3]))\r\n    print(two_unique_nums([1, 2, 3, 4, 5, 6]))\r\n    print(two_unique_nums([1, 2, 2, 2, 2]))\r\n    print(two_unique_nums([1, 1","votes":null},{"text":"\r\n    \r\n    # Initialize a list to store the unique numbers.\r\n    unique_nums = []\r\n    \r\n    # Iterate through the list of numbers and check if the number is in the unique numbers list.\r\n    for i in range(0, len(nums)):\r\n        if nums[i] not in unique_nums:\r\n            unique_nums.append(nums[i])\r\n        \r\n    # Check if the length of the unique numbers list is 2.\r\n    if len(unique_nums) == 2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver Code\r\nnums = [1, 1, 1, 2, 2, 3, 4, 5, 5, 5, 5]\r\nprint(two_unique_nums(nums))\r\n\r\n# nums = [1, 2, 3, 4, 5]\r\n# print(two_unique_nums(nums))\r\n\r\n# nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\r\n# print(two_unique_nums(nums))\r\n\r\nnums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ","votes":null},{"text":"\r\n\r\n    # code goes here\r\n    \r\n    for i in nums:\r\n        if i in nums[i+1:]:\r\n            nums.remove(i)\r\n            nums.remove(i)\r\n            return nums\r\n\r\nprint(two_unique_nums([1,2,3,2,1]))\r\n\r\n# [1,2]\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    # remove duplicate items\r\n    nums = list(set(nums))\r\n    \r\n    # check if the list has two unique items\r\n    if len(nums) == 2:\r\n        # return the list\r\n        return nums\r\n    \r\n    # check if the list has more than two unique items\r\n    elif len(nums) > 2:\r\n        # remove the first and last items\r\n        nums = nums[1: -1]\r\n        \r\n        # remove duplicate items\r\n        nums = list(set(nums))\r\n    \r\n    # check if the list has just one unique item\r\n    elif len(nums) == 1:\r\n        # return the list\r\n        return nums\r\n    \r\n    # check if the list has no items\r\n    elif len(nums) == 0:\r\n        # return the list\r\n        return nums\r\n    \r\n    # return the list\r\n    return nums\r\n\r","votes":null},{"text":"\r\n    \r\n    for i in range(len(nums) - 1):\r\n        for j in range(i + 1, len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums[i], nums[j] = nums[j], nums[i]\r\n                break\r\n    \r\n    for i in range(len(nums)):\r\n        if nums[i] == nums[i + 1]:\r\n            nums.remove(nums[i])\r\n            break\r\n        \r\n    return nums\r\n\r\nprint(two_unique_nums([1, 2, 3, 1, 3, 4, 2, 4]))\r\nprint(two_unique_nums([1, 2, 3, 1, 3, 4, 2, 4, 2]))\r\nprint(two_unique_nums([1, 2, 3, 1, 3, 4, 2, 4, 2, 2]))\r\nprint(two_unique_nums([1, 2, 3, 1, 3, 4, 2, 4, 2, 2, 2]))\r\nprint(two_unique_nums([1, 2, 3, 1, 3, 4, 2, 4, 2, 2, 2, 2]))\r\nprint(two_unique_nums([1, 2, 3","votes":null},{"text":"\r\n    if nums is None:\r\n        return None\r\n    \r\n    for i in range(len(nums)):\r\n        if nums.count(nums[i]) == 2:\r\n            nums.remove(nums[i])\r\n            \r\n    return nums\r\nprint(two_unique_nums([1, 2, 3, 2, 4, 5, 2, 6, 7, 8, 9, 10, 11, 12, 1, 13, 14, 15, 16]))\r\n\r\n#O(n) time | O(1) space\r\n\r\n\r","votes":null},{"text":"\r\n    # create a set of unique numbers\r\n    unique_nums = set","votes":null},{"text":"\r\n    # Get the length of the array\r\n    array_length = len(nums)\r\n    # Create a set from the array\r\n    nums_set = set(nums)\r\n    # Create an empty list to store the unique number\r\n    unique_nums = []\r\n    # Check if the length of the set and the array are equal\r\n    if len(nums_set) == array_length:\r\n        # If they are equal, all the numbers in the array are unique\r\n        return \"All numbers in the array are unique\"\r\n\r\n    # Check if the length of the set is less than the array\r\n    if len(nums_set) < array_length:\r\n        # If they are equal, all the numbers in the array are unique\r\n        return \"No two numbers are unique\"\r\n\r\n    # For each number in the array\r\n    for num in nums:\r\n        # Check if the number is in the set\r\n        if num in nums_set:\r\n            # Remove the number from the set\r\n            nums_set.remove(num)\r\n            # Add the number to the unique_nums list\r\n            unique_nums.append(num)\r\n        # Check if the length of the set is equal to one\r\n        if len(nums_set) == 1:\r\n            # If they are equal, all the numbers in the array are unique\r\n            return \"All numbers in the array are unique\"\r\n\r\n    # Check if the length of the unique_nums list is equal to 2\r\n    if len(unique_nums) == 2:\r\n        # If they are equal, all the numbers in the array are unique\r\n        return \"All numbers in the array are unique\"\r\n\r\n    # If the length of the unique_nums list is less than 2\r\n    if len(unique_nums) < 2:\r\n        # If they are equal, all the numbers in the array are unique\r\n        return \"No two numbers are unique\"\r\n\r\n    # If the length of the unique_nu","votes":null},{"text":"\r\n    \r\n    for i in range(len(nums)):\r\n        if nums[i] in nums[:i] or nums[i] in nums[i + 1:]:\r\n            nums.remove(nums[i])\r\n    print(nums)\r\n\r\n\r\n\r\ntwo_unique_nums([4, 3, 5, 2, 1, 3])\r\ntwo_unique_nums([1, 2, 3, 1, 2, 3])\r\ntwo_unique_nums([1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\r\ntwo_unique_nums([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # Step 1: Create a list of lists.\r\n    lst = []\r\n    for i in range(len(nums)):\r\n        lst.append([nums[i],i])\r\n    # Step 2: Sort the list of lists.\r\n    lst.sort()\r\n    # Step 3: Create a list to store the numbers.\r\n    nums_list = []\r\n    # Step 4: Iterate through the list of lists and add the number to the list if it's not repeated.\r\n    for i in range(len(lst)):\r\n        if lst[i][1] not in nums_list:\r\n            nums_list.append(lst[i][1])\r\n        if len(nums_list) == 2:\r\n            break\r\n    # Step 5: Return the list of numbers.\r\n    return nums_list\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # create an empty list\r\n    temp = []\r\n\r\n    # loop over the nums list\r\n    for i in nums:\r\n        if i not in temp:\r\n            temp.append(i)\r\n\r\n    count = 0\r\n    # loop over the temp list\r\n    for i in temp:\r\n        if nums.count(i) > 1:\r\n            nums.remove(i)\r\n            count += 1\r\n\r\n    # if the count is 2, return True else return False\r\n    if count == 2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# test the function\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(two_unique_nums(nums))\r\n\r\n# test the function\r\nnums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]\r\nprint(two_unique_nums(nums))\r\n\r\n# test the function\r\nnums = [1, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9]\r\nprint(two_unique_nums(nums))\r\n\r\n# test the function\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(two_unique_nums(nums))\r\n\r\n# test the function\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17","votes":null},{"text":"\r\n    a = nums[0]\r\n    b = nums[","votes":null},{"text":"\r\n    #nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\r\n    #nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, ","votes":null},{"text":"\r\n    res = []\r\n    for i in range(0, len(nums)):\r\n        if nums[i] not in res:\r\n            res.append(nums[i])\r\n        else:\r\n            res.remove(nums[i])\r\n    return res\r\n\r\n\r\n# Tests\r\nprint(two_unique_nums([1, 2, 1, 3, 4, 3]))  # [2, 4]\r\nprint(two_unique_nums([1, 2, 1, 3, 4, 5]))  # [2, 3, 4]\r\nprint(two_unique_nums([1, 2, 1, 3, 4, 5, 5]))  # [2, 3, 4]\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # [2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(two_unique_nums([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]))  # [2, 3, 4, 5]\r\nprint(two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))  # [1, 2, 3, 4, 5]\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18","votes":null},{"text":"\r\n    nums = sorted(nums)\r\n    for i in range(len(nums)-1):\r\n        if nums[i] == nums[i+1]:\r\n            del nums[i]\r\n    return nums\r\n\r","votes":null},{"text":"\r\n    nums = set(nums)\r\n    if len(nums)==3:\r\n        return nums\r\n    else:\r\n        return None","votes":null},{"text":"\r\n    # Create an empty dictionary\r\n    d = {}\r\n\r\n    # Loop through the given list\r\n    for num in nums:\r\n        # If the number is already in the dictionary\r\n        if num in d:\r\n            # Remove it\r\n            del d[num]\r\n        # If the number is not in the dictionary\r\n        else:\r\n            # Insert it\r\n            d[num] = 1\r\n\r\n    # Return the list of the dictionary keys\r\n    return list(d.keys())\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Test the function\r\n    print(two_unique_nums([1, 1, 1, 2, 3, 3, 4, 5, 5, 5]))\r\n    print(two_unique_nums([1, 1, 2, 2, 2, 3, 4, 4, 4, 4]))\r\n    print(two_unique_nums([1, 1, 2, 2, 2, 3, 3, 3, 3, 3]))\r\n    print(two_unique_nums([1, 1, 2, 2, 2, 3, 3, 4, 4, 4]))\r\n    print(two_unique_nums([1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\r\n    print(two_unique_nums([1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, ","votes":null},{"text":"\r\n    my_set = set(nums)\r\n    return list(my_set)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(nums)\r\n    for i in range(n):\r\n        if nums[i] in nums[i + 1:]:\r\n            nums.remove(nums[i])\r\n            return nums\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Create an empty dictionary to store the values and their indices\r\n    # This dictionary is a hashmap\r\n    num_dict = {}\r\n\r\n    # Create an empty list to store the indices of the duplicate values\r\n    # This list will contain two indices\r\n    duplicate_indices = []\r\n\r\n    # Iterate through the given list\r\n    for index, num in enumerate(nums):\r\n        # Check if the given number is already present in the dictionary\r\n        # If yes, then append the index to the duplicate_indices list\r\n        # If no, then add the number and its index to the dictionary\r\n        if num in num_dict:\r\n            duplicate_indices.append(num_dict[num])\r\n            duplicate_indices.append(index)\r\n            break\r\n        else:\r\n            num_dict[num] = index\r\n\r\n    # Sort the duplicate_indices list\r\n    duplicate_indices.sort()\r\n\r\n    # Remove the first two indices\r\n    del duplicate_indices[0], duplicate_indices[0]\r\n\r\n    # Remove the last two indices\r\n    del duplicate_indices[-1], duplicate_indices[-1]\r\n\r\n    # Return the duplicate indices\r\n    return duplicate_indices\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Test 01\r\n    nums_01 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9]\r\n    print(two_unique_nums(nums_01))\r\n\r\n    # Test 02\r\n    nums_02 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 10]\r\n    print(two_unique_nums(nums_02))\r\n\r\n    # Test 03\r\n    num","votes":null},{"text":"\r\n    nums_set = set(nums)\r\n    return sorted(nums_set)\r\n\r\n\r\n# Tests\r\nprint(two_unique_nums([1, 1, 2, 1, 3]))\r\n# [1, 2, 3]\r\n\r\nprint(two_unique_nums([1, 2, 1, 2, 3]))\r\n# [1, 2, 3]\r\n\r\nprint(two_unique_nums([3, 2, 1, 1, 2, 3]))\r\n# [1, 2, 3]\r\n\r\nprint(two_unique_nums([1, 2, 3]))\r\n# [1, 2, 3]\r\n\r\nprint(two_unique_nums([1, 1, 1, 1]))\r\n# [1]\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nprint(two_unique_nums([1, 2, 3, 9, 5, 6, 7, 8, 4, 10]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nprint(two_unique_nums([1, 1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10]))\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nprint(two_unique_nums([1, 1, 2, 3, 4","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(i+1,len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.remove(nums[i])\r\n    return nums\r\n\r","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        if nums.count(nums[i]) > 2:\r\n            nums.remove(nums[i])\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    if not isinstance(nums, list):\r\n        return \"Error\"\r\n    for num in nums:\r\n        if not isinstance(num, int):\r\n            return \"Error\"\r\n    if len(nums) <= 2:\r\n        return \"Error\"\r\n    \r\n    nums.sort()\r\n    \r\n    for i in range(len(nums)-2):\r\n        if nums[i] == nums[i+1]:\r\n            del nums[i+1]\r\n            if len(nums) == 1:\r\n                return \"Error\"\r\n            i -= 1\r\n        \r\n    return nums\r\n\r","votes":null},{"text":"\r\n    if len(nums) < 2:\r\n        return False\r\n    else:\r\n        nums.sort()\r\n        if nums[0] == nums[1]:\r\n            nums.pop(0)\r\n            nums.pop(0)\r\n            return two_unique_nums(nums)\r\n        elif nums[-1] == nums[-2]:\r\n            nums.pop(-1)\r\n            nums.pop(-1)\r\n            return two_unique_nums(nums)\r\n        else:\r\n            return True\r\n\r\n\r","votes":null},{"text":"\r\n    if nums:\r\n        nums.sort()\r\n        for i in range(len(nums) - 1):\r\n            if nums[i] == nums[i + 1]:\r\n                nums.pop(i)\r\n                nums.pop(i)\r\n                break\r\n        return nums\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(nums) < 3:\r\n        return False\r\n    \r\n    nums.sort()\r\n    \r\n    for i in range(2, len(nums)):\r\n        \r\n        if nums[i] == nums[i-2]:\r\n            nums.pop(i)\r\n            nums.pop(i-2)\r\n            return True\r\n    \r\n    return False\r\n\r\n# Testing\r\n\r\nassert two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\r\n\r\nassert two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False\r\n\r\nassert two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True\r\n\r\nassert two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == True\r\n\r\nassert two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == True\r\n\r\nassert two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == True\r\n\r\nassert two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11","votes":null},{"text":"\r\n    for i in range(len(nums)):\r\n        for j in range(i+1,len(nums)):\r\n            if nums[i] == nums[j]:\r\n                nums.pop(i)\r\n                nums.pop(j-1)\r\n                break\r\n    nums.sort()\r\n    return nums\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [1, 1, ","votes":null},{"text":"\r\n    \r\n    # create a list of unique numbers\r\n    unique = []\r\n    \r\n    # check the number of lists\r\n    if len(nums) < 2:\r\n        return \"Please enter at least 2 numbers\"\r\n    # else if there are less than 3 lists\r\n    elif len(nums) == 2:\r\n        # check if the numbers are the same\r\n        if nums[0] == nums[1]:\r\n            return \"No duplicate numbers\"\r\n        # if the numbers are not the same\r\n        else:\r\n            # check the first number\r\n            if nums[0] not in unique:\r\n                unique.append(nums[0])\r\n            # if the first number is already in the list\r\n            else:\r\n                unique.remove(nums[0])\r\n                unique.append(nums[0])\r\n            # check the second number\r\n            if nums[1] not in unique:\r\n                unique.append(nums[1])\r\n            # if the second number is already in the list\r\n            else:\r\n                unique.remove(nums[1])\r\n                unique.append(nums[1])\r\n        # return the list of unique numbers\r\n        return unique\r\n    # else if there are more than 2 lists\r\n    else:\r\n        # check if the numbers are the same\r\n        if nums[0] == nums[1]:\r\n            return \"No duplicate numbers\"\r\n        # if the numbers are not the same\r\n        else:\r\n            # check the first number\r\n            if nums[0] not in unique:\r\n                unique.append(nums[0])\r\n            # if the first number is already in the list\r\n            else:\r\n                unique.remove(nums[0])\r\n                unique.append(nums[0])\r\n            # check the second number\r\n            if nums[1] not in unique:\r\n                unique.append(nums[1])\r\n            # if th","votes":null},{"text":"\r\n    # create a set\r\n    num_set = set(nums)\r\n    # create a list from set\r\n    num_list = list(num_set)\r\n    # get the len of list\r\n    len_of_list = len(num_list)\r\n    # if the length of list is 2 return the list\r\n    if len_of_list == 2:\r\n        return num_list\r\n    # else return the first two elements of the list\r\n    else:\r\n        return num_list[:2]\r\n\r\n\r","votes":null},{"text":"\r\n    if len(nums) == 2:\r\n        return nums\r\n    elif len(nums) > 2:\r\n        for i in range(len(nums)):\r\n            if nums[i] in nums[i+1:]:\r\n                nums.remove(nums[i])\r\n                nums.remove(nums[i+1])\r\n        return nums\r\n    else:\r\n        return nums\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # check if there are more than 1 number\r\n    if len(nums) < 2:\r\n        return None\r\n\r\n    # check if there is only one number\r\n    if len(nums) == 2:\r\n        if nums[0] == nums[1]:\r\n            return None\r\n        else:\r\n            return nums\r\n\r\n    # if there are more than 2 numbers\r\n    if len(nums) > 2:\r\n        # create a list of numbers\r\n        list_nums = []\r\n        # add all numbers from the list to the list\r\n        for num in nums:\r\n            list_nums.append(num)\r\n\r\n        # create a dict to store the numbers and the number of times they appear\r\n        dict_nums = {}\r\n        # loop through the list to find the number of times a number appears\r\n        for n in list_nums:\r\n            if n in dict_nums:\r\n                dict_nums[n] += 1\r\n            else:\r\n                dict_nums[n] = 1\r\n\r\n        # loop through the dict to find the numbers that appear more than once\r\n        for k, v in dict_nums.items():\r\n            if v > 1:\r\n                # loop through the list to find the numbers that appear more than once\r\n                for i in list_nums:\r\n                    if i == k:\r\n                        # if the number is found, remove it and break out of the loop\r\n                        list_nums.remove(i)\r\n                        break\r\n                    else:\r\n                        continue\r\n\r\n        # check if the length of the list is 2\r\n        if len(list_nums) == 2:\r\n            return list_nums\r\n        else:\r\n            # if the","votes":null},{"text":"\r\n    nums_set = set(nums)\r\n    nums_set = list(nums_set)\r\n    nums_set.sort()\r\n    return nums_set\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9]\r\n    print(two_unique_nums(nums))\r\n\r\n    # nums = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4","votes":null},{"text":"\r\n    nums_set = set(nums)\r\n    if len(nums_set) == 2:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(two_unique_nums([1, 1, 2, 2, 3, 3]))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert two_unique_nums([1, 1, 2, 2, 3, 3]) == True\r\n    assert two_unique_nums([1, 1, 1, 2, 2, 3, 3]) == False\r\n    assert two_unique_nums([1, 1, 2, 2, 3, 3, 3]) == False\r\n    assert two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4]) == True\r\n    assert two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 4]) == False\r\n    assert two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == True\r\n    assert two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5]) == False\r\n    assert two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6]) == True\r\n    assert two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6","votes":null},{"text":"\r\n    new_num = []\r\n    for num in nums:\r\n        if num not in new_num:\r\n            new_num.append(num)\r\n    return new_num\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    nums_dup = []\r\n    nums_nodup = []\r\n    \r\n    for i in range(len(nums)):\r\n        for j in range(len(nums)):\r\n            if nums[i] == nums[j] and i != j:\r\n                nums_dup.append(nums[i])\r\n                \r\n    for i in range(len(nums)):\r\n        if nums[i] not in nums_dup:\r\n            nums_nodup.append(nums[i])\r\n    \r\n    return nums_nodup, nums_dup\r\n\r\n\r\n# Test cases:\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2]))\r\n# ([1, 2, 3, 4, 5, 6], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6])\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3]))\r\n# ([1, 2, 3, 4, 5, 6], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 3, 3])\r\n\r\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]))\r\n# ([1, 2, 3, 4, 5, ","votes":null},{"text":"\r\n    no_of_elems = len(nums)\r\n    if no_of_elems == 2:\r\n        return nums\r\n\r\n    if no_of_elems == 3:\r\n        return [nums[0], nums[2]]\r\n\r\n    num_occ = {}\r\n    for i in nums:\r\n        num_occ[i] = num_occ.get(i, 0) + 1\r\n\r\n    if len(num_occ) == 2:\r\n        return [i for i in nums if num_occ[i] == 1]\r\n\r\n    if len(num_occ) == 3:\r\n        return [i for i in nums if num_occ[i] == 1]\r\n\r\n    if len(num_occ) == 4:\r\n        return [nums[0], nums[2], nums[3]]\r\n\r\nif __name__ == '__main__':\r\n    print(two_unique_nums([1, 2, 2, 3, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8","votes":null},{"text":"\r\n    # Write your code here\r\n    for i in range(len(nums)):\r\n        if nums.count(nums[i]) == 2:\r\n            nums.remove(nums[i])\r\n            nums.remove(nums[i])\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    nums = list(set(nums))\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    nums = sorted(nums)\r\n    result = []\r\n    for i in range(len(nums)):\r\n        if i == 0:\r\n            continue\r\n        else:\r\n            if nums[i] != nums[i-1]:\r\n                result.append(nums[i])\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Get a set of the input list\r\n    nums_set = set(nums)\r\n    \r\n    # Get the length of the set\r\n    length = len(nums_set)\r\n    \r\n    # Check whether the length is 2\r\n    if length == 2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Test the function\r\nnums = [1, 2, 3, 1, 2]\r\nprint(two_unique_nums(nums))\r\n\r\n\r\n## Problem 2: Two Sum\r\n\r","votes":null},{"text":"\r\n    set_1 = set()\r\n    set_2 = set()\r\n    for i in range(len(nums)):\r\n        if nums[i] not in set_1:\r\n            set_1.add(nums[i])\r\n        else:\r\n            set_2.add(nums[i])\r\n    \r\n    return set_1, set_2\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # If the list is empty, return an empty list.\r\n    if nums == []:\r\n        return []\r\n\r\n    # If the list has only one element, return the list.\r\n    elif len(nums) == 1:\r\n        return nums\r\n\r\n    # If the list has more than one element, remove the first and last element.\r\n    else:\r\n        first = nums[0]\r\n        last = nums[-1]\r\n\r\n        # Remove the first and last element from the list.\r\n        nums.remove(first)\r\n        nums.remove(last)\r\n\r\n        # Call the function recursively.\r\n        return two_unique_nums(nums)\r\n\r\n\r\nprint(two_unique_nums([1, 2, 3, 3, 4, 5, 6, 7, 8, 8, 9, 10]))\r\n\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# [1, 2, 3, 4, 5,","votes":null},{"text":"\r\n    if len(nums) < 1:\r\n        return\r\n    nums.sort()\r\n    for i in range(len(nums)):\r\n        if nums[i] == nums[i+1]:\r\n            nums.pop(i)\r\n            nums.pop(i)\r\n            break\r\n    print(nums)\r\n\r\n\r\nnums = [1, 2, 3, 1, 2, 4, 5, 6, 7, 8, 9]\r\ntwo_unique_nums(nums)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if len(nums) == 0:\r\n        return False\r\n\r\n    for i in range(len(nums)):\r\n        if nums.count(nums[i]) == 2:\r\n            nums.remove(nums[i])\r\n            if len(nums) == 0:\r\n                return False\r\n            elif len(nums) == 1:\r\n                return True\r\n            else:\r\n                break\r\n\r\n    if len(nums) == 2:\r\n        return True\r\n    elif len(nums) == 1:\r\n        return False\r\n\r\n    return False\r\n\r\n\r\nnums = [1, 1, 1, 2, 2, 3]\r\nprint(two_unique_nums(nums))\r\n\r\n# Another solution\r","votes":null},{"text":"\r\n    \r\n    nums.sort()\r\n    \r\n    for i in range(0, len(nums) - 2):\r\n        if nums[i] == nums[i+1]:\r\n            nums.remove(nums[i+1])\r\n            nums.remove(nums[i])\r\n        else:\r\n            pass\r\n    \r\n    return nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    test =","votes":null},{"text":"\r\n    print(nums)\r\n    nums.sort()\r\n    print(nums)\r\n    if len(nums) == 2:\r\n        return nums\r\n    else:\r\n        for i in range(len(nums)):\r\n            if nums[i] == nums[i+1]:\r\n                nums.remove(nums[i])\r\n                nums.remove(nums[i])\r\n                return nums\r\n    return nums\r\n\r\n\r","votes":null},{"text":"\r\n    return sorted(nums).pop(2)\r\n\r\n\r","votes":null},{"text":"\r\n    # 1st solution:\r\n    a = set(nums)\r\n    b = set(nums)\r\n    c = a - b\r\n    d = list(c)\r\n    return d[0], d[1]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    nums = set(nums)\r\n    nums = list(nums)\r\n    \r\n    if len(nums) == 2:\r\n        return nums\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Create a list of integers\r\n    list_of_ints = nums\r\n    \r\n    # Create an empty list to store the numbers\r\n    two_unique_numbers = []\r\n    \r\n    # Iterate through the list of integers\r\n    for i in list_of_ints:\r\n        \r\n        # Check if the number is not already in the list\r\n        if i not in two_unique_numbers:\r\n            \r\n            # If the number is not already in the list, add the number to the list\r\n            two_unique_numbers.append(i)\r\n        \r\n        # Check if the number is in the list\r\n        if i in two_unique_numbers:\r\n            \r\n            # If the number is in the list, remove the number\r\n            two_unique_numbers.remove(i)\r\n        \r\n    # Return the list of two unique numbers\r\n    return two_unique_numbers\r\n\r\n\r\n# Create a list of integers\r\nlist_of_ints = [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9]\r\n\r\n# Print the list of integers\r\nprint(\"The list of integers is: {}\".format(list_of_ints))\r\n\r\n# Call the function to remove two duplicate numbers from the list of integers\r\ntwo_unique_numbers = two_unique_nums(list_of_ints)\r\n\r\n# Print the list of two unique numbers\r\nprint(\"The list of two unique numbers is: {}\".format(two_unique_numbers))\r\n\r\n# Create a list of integers\r\nlist_of_ints = [1, 2, 3, 4, 5]\r\n\r\n# Print the list of integers\r\nprint(\"The list of integers is: {}\".format(list_of_ints))\r\n\r\n# Call the function to remove two duplicate numbers from the list of integers\r\ntwo_unique_numbers = two_unique_nums(list_of_ints)\r\n\r","votes":null},{"text":"\r\n    nums.remove(min(nums))\r\n    nums.remove(max(nums))\r\n    return nums\r\n\r\n# The test function is present inside the if __name__ == '__main__'\r\nif __name__ == '__main__':\r\n    nums = [1, 4, 5, 1, 2, 3, 4]\r\n    print(two_unique_nums(nums))\r\n\r\n# O(n) time | O(n) space\r\n\r\n    # Example\r\n    # Input: [1, 4, 5, 1, 2, 3, 4]\r\n    # Output: [2, 3]\r\n\r\n    # Example\r\n    # Input: [5, 5, 5, 5, 5, 5, 5, 5]\r\n    # Output: [5, 5]\r\n\r\n    # Example\r\n    # Input: [1, 1, 1, 2, 2, 3, 4, 5, 5, 5, 5]\r\n    # Output: [1, 2, 3, 4, 5]\r\n\r\n    # Example\r\n    # Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,","votes":null},{"text":"\r\n    #create a set to remove duplicates\r\n    nums_set = set(nums)\r\n    #use the set to create a new list\r\n    nums_list = list(nums_set)\r\n    #return the list\r\n    return nums_list\r\n\r\n\r","votes":null},{"text":"\r\n    # Create a set with no duplicate values\r\n    unique_list = set(nums)\r\n    # Convert it back to a list\r\n    unique_list = list(unique_list)\r\n    # Return the list\r\n    return unique_list\r\n\r\n\r","votes":null},{"text":"\r\n    # your code goes here\r\n\r\n    nums.sort()\r\n    for i in range(len(nums) - 1):\r\n        if nums[i] == nums[i + 1]:\r\n            nums.pop(i)\r\n            if i != 0:\r\n                i -= 1\r\n    return nums\r\n\r\n\r\nprint(two_unique_nums([1, 2, 4, 5, 5, 4, 3, 2, 1]))\r\n\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    nums_set = set(nums)\r\n    \r\n    return nums_set\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return [nums[i] for i in range(len(nums)) if nums[i] != nums[i - 1] and nums[i] != nums[i + 1]]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # create a set to remove the duplicates\r\n    unique_nums = set()\r\n    # iterate over the nums lists\r\n    for i in nums:\r\n        # add them to the set\r\n        unique_nums.add(i)\r\n\r\n    # create a new lists and add the unique items to it\r\n    new_nums = []\r\n    for i in unique_nums:\r\n        new_nums.append(i)\r\n\r\n    return new_nums\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums1 = [1, 2, 3, 3, 4, 5, 6, 7]\r\n    nums2 = [1, 1, 3, 3, 4, 5, 6, 7]\r\n    nums3 = [1, 2, 3, 4, 5, 6, 7]\r\n\r\n    # create a new list\r\n    print('nums1: ', nums1)\r\n    print('nums2: ', nums2)\r\n    print('nums3: ', nums3)\r\n\r\n    # remove the duplicate numbers\r\n    print('nums1: ', two_unique_nums(nums1))\r\n    print('nums2: ', two_unique_nums(nums2))\r\n    print('nums3: ', two_unique_nums(nums3))\r\n\r\n    # create a new list\r\n    print('nums1: ', nums1)\r\n    print('nums2: ', nums2)\r\n    print('nums3: ', nums3)\r\n\r\n    # remove the duplicate numbers\r\n    print('nums1: ', two_unique_nums(nums1))\r\n    print('nums2: ', two_unique_nums(nums2))\r\n    print('nums3: ', two_unique_nums(nums3))\r\n\r\n    # create a new lis","votes":null},{"text":"\r\n    \r\n    # Initialize the result list\r\n    result = []\r\n    \r\n    # Iterate over the given number of lists\r\n    for num in nums:\r\n        \r\n        # Check if the length of the result list is 2\r\n        if len(result) == 2:\r\n            break\r\n        \r\n        # Check if the current list item is already in the result list\r\n        if num in result:\r\n            continue\r\n        \r\n        # Add the current list item to the result list\r\n        result.append(num)\r\n        \r\n    # Return the result list\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    \r\n    # Test 0: Test with two duplicate numbers\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    result = two_unique_nums(nums)\r\n    print(f'Test 0: The two unique numbers are {result}')\r\n    \r\n    # Test 1: Test with two duplicate numbers\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\n    result = two_unique_nums(nums)\r\n    print(f'Test 1: The two unique numbers are {result}')\r\n    \r\n    # Test 2: Test with two duplicate numbers\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8","votes":null},{"text":"\r\n    set_num = set()\r\n    for num in nums:\r\n        if num not in set_num:\r\n            set_num.add(num)\r\n        else:\r\n            set_num.remove(num)\r\n    return set_num\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(two_unique_nums([1, 2, 2, 3, 1, 3]))\r\n    print(two_unique_nums([1, 2, 2, 3]))\r\n    print(two_unique_nums([1, 2, 3, 1, 3]))\r\n    print(two_unique_nums([1, 2, 2, 3, 1, 2]))\r\n    print(two_unique_nums([1, 2, 2, 2, 2, 2, 2, 3, 1, 3]))\r\n    print(two_unique_nums([1, 2, 2, 3, 1, 3, 4]))\r\n    print(two_unique_nums([1, 2, 3, 1, 3, 4, 4]))\r\n    print(two_unique_nums([1, 2, 2, 3, 1, 3, 4, 4, 5, 6, 7, 8]))\r\n    print(two_unique_nums([1, 2, 2, 3, 1, 3, 4, 4, 5, 6, 7, 8, 9, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\r\n    print(two_unique_nums([1, 2, 2, 3, 1, 3, 4, 4, 5,","votes":null}],"time":{"count":3.0,"avg":154469.12,"std":77993.5746142415,"cov":0.5049136981}}
{"id":573,"question":"def unique_product(list_data):\r\n    \"\"\"Write a python function to calculate the product of the unique numbers of a given list.\"\"\"","answers":[{"text":"\r\n    \r\n    set_data = set(list_data)\r\n    result = 1\r\n    for i in set_data:\r\n        result *= i\r\n    return result\r\n\r\n\r","votes":86624.148},{"text":"\r\n    list_data.sort()\r\n    product = 1\r\n    for i in range(len(list_data)):\r\n        if list_data[i] != list_data[i-1]:\r\n            product = product * list_data[i]\r\n    return product\r\n\r\n\r","votes":89449.892},{"text":"\r\n    # Code here\r\n    unique = set(list_data)\r\n    prod = 1\r\n    for num in unique:\r\n        prod *= num\r\n    \r\n    return prod\r\n\r","votes":93243.024},{"text":"\r\n    unique_list = []\r\n    unique_list = list(set(list_data))\r\n    unique_product = 1\r\n    for i in unique_list:\r\n        unique_product *= i\r\n    return unique_product\r\n\r\n\r","votes":94066.16},{"text":"\r\n    # Create a new list with unique values...\r\n    unique_list = list(set(list_data))\r\n    # ... and calculate the product of unique values.\r\n    product = 1\r\n    for num in unique_list:\r\n        product = product * num\r\n    return product\r\n\r\n\r","votes":94484.56},{"text":"\r\n    # Write your code here\r\n    unique = set(list_data)\r\n    prod = 1\r\n    for i in unique:\r\n        prod *= i\r\n    return prod\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    list_data = []\r\n    for i in range(n):\r\n        list_data_item = int(input())\r\n        list_data.append(list_data_item)\r\n    result = unique_product(list_data)\r\n    print(result)\r\n\r\n\r\n# ----------------------------------------------------\r\n# Write a python function to calculate the product of the unique numbers of a given list.\r\n# \r\n# The function takes one list of integers list_data as input and returns the product of the unique numbers of the list.\r\n# \r\n# Sample list_data : [2, 3, 4, 3, 4, 5]\r\n# \r\n# Sample Output : 2 * 4 * 5 = 40\r\n# \r\n# Explanation : There are 3 unique numbers in the given list. They are 2, 4 and 5. So the product of the unique numbers is 2 * 4 * 5 = 40.\r\n# \r\n# Input Format :\r\n# \r\n# The first line contains an integer n, the size of the list.\r\n# The second line contains n space-separated integers list_data[].\r\n# \r\n# Output Format :\r\n# \r\n# Return an integer denoting the product of the unique numbers of the list.\r\n# \r\n# Constraints :\r\n# \r\n# 1 <= n <= 10^4\r\n# -10^5 <= list_data[i] <= 10^5\r\n# \r\n# Sample Test Case 1 :\r\n# \r\n# Input : \r\n# 6\r\n# 2 3 4 3 4 5\r\n# \r\n# Output : \r\n# 40\r\n# \r\n# Explanatio","votes":97513.896},{"text":"\r\n    list_data.sort()\r\n    list_data_unique = list(set(list_data))\r\n    result = 1\r\n    for i in list_data_unique:\r\n        result *= i\r\n    return result\r\n\r\n\r","votes":103359.996},{"text":"\r\n\r\n    # your code goes here\r\n    \r\n    unique_num=[]\r\n    for num in list_data:\r\n        if num not in unique_num:\r\n            unique_num.append(num)\r\n    \r\n    product=1\r\n    for num in unique_num:\r\n        product*=num\r\n    return product\r\n\r\n\r\n\r\n\r\n\r","votes":108882.58},{"text":"\r\n    \r\n    unique_numbers = []\r\n    for num in list_data:\r\n        if num not in unique_numbers:\r\n            unique_numbers.append(num)\r\n    \r\n    product = 1\r\n    for i in unique_numbers:\r\n        product = product * i\r\n    \r\n    return product\r\n\r\n\r","votes":109319.16},{"text":"\r\n    \r\n    unique_data = []\r\n    for i in list_data:\r\n        if i not in unique_data:\r\n            unique_data.append(i)\r\n        \r\n    product = 1\r\n    for i in unique_data:\r\n        product = product * i\r\n    return product\r\n\r\n\r\nlist_data = [5, 8, 10, 2, 5, 4, 20, 11, 5, 1, 10]\r\nprint(unique_product(list_data))\r\n\r\n\r\n# Another Solution\r","votes":109981.116},{"text":"\r\n    unique = set(list_data)\r\n    product = 1\r\n    for i in unique:\r\n        product = product * i\r\n    return product\r\n\r\n\r","votes":114653.68},{"text":"\r\n    if len(list_data) == 0:\r\n        return 0\r\n    list_data.sort(reverse=True)\r\n    unique_list = []\r\n    for i in range(len(list_data)):\r\n        if i == 0 or list_data[i] != list_data[i - 1]:\r\n            unique_list.append(list_data[i])\r\n    product = 1\r\n    for i in unique_list:\r\n        product = product * i\r\n    return product\r\n\r\n\r","votes":120496.908},{"text":"\r\n    unique_list = list(set(list_data))\r\n    product = 1\r\n    for number in unique_list:\r\n        product *= number\r\n    return product\r\n\r\n\r","votes":125940.164},{"text":"\r\n    # write your code here\r\n\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n\r\n    product = 1\r\n    for i in unique_list:\r\n        product = product * i\r\n\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    l = list(map(int, input().rstrip().split()))\r\n\r\n    result = unique_product(l)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n","votes":130118.376},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    product = 1\r\n    for j in unique_list:\r\n        product *= j\r\n    return product\r\n\r\n\r","votes":135069.508},{"text":"\r\n    # Your code goes here\r\n    prod = 1\r\n    for i in set(list_data):\r\n        #print(i)\r\n        prod = prod * i\r\n    return prod\r\n\r\n\r\n\r","votes":136524.72},{"text":"\r\n    unique_number = []\r\n    for i in list_data:\r\n        if i not in unique_number:\r\n            unique_number.append(i)\r\n    total = 1\r\n    for i in unique_number:\r\n        total *= i\r\n    return total\r\n\r\n\r","votes":139327.908},{"text":"\r\n    unique_values = set(list_data)\r\n    product = 1\r\n    for i in unique_values:\r\n        product = product * i\r\n    return product\r\n\r\n\r\n# check if it is working\r\n\r","votes":140421.992},{"text":"\r\n    #create a new list to store the unique numbers\r\n    unique_list = []\r\n    #loop through the list and store the unique numbers\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    #calculate the product of the unique numbers\r\n    product = 1\r\n    for i in unique_list:\r\n        product = product * i\r\n    return product\r\n\r","votes":140564.252},{"text":"\r\n    unique_list = set(list_data)\r\n    product = 1\r\n    for item in unique_list:\r\n        product *= item\r\n    return product\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]))\r\n    print(unique_product([2, 3, 4, 5, 6, 7, 8, 9]))\r\n    print(unique_product([2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6]))\r\n    print(unique_product([2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7]))\r\n    print(unique_product([2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7]))\r\n    # print(unique_product([2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7]))\r\n    # print(unique_product([2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, ","votes":144164.06},{"text":"\r\n    \r\n    unique_list = []\r\n    \r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    \r\n    product = 1\r\n    \r\n    for i in unique_list:\r\n        product *= i\r\n    \r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 3, 2, 1]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(unique_product([1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n\r\n\r","votes":145303.532},{"text":"\r\n    # code here\r\n    list_data = list(set(list_data))\r\n    list_product = 1\r\n    for i in list_data:\r\n        list_product *= i\r\n    return list_product\r\n\r\n\r\n# Write your code here\r\n\r","votes":145863.224},{"text":"\r\n    list_unique = set(list_data)\r\n    product = 1\r\n    for i in list_unique:\r\n        product = product * i\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n\r\n# Question 12\r","votes":146186.536},{"text":"\r\n\r\n    # unique_list = list(set(list_data))\r\n    unique_list = set(list_data)\r\n    product = 1\r\n\r\n    for i in unique_list:\r\n        product *= i\r\n\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 2, 3, 4, 5, 5, 5]))\r\n\r\n\r","votes":146626.428},{"text":"\r\n    # Write your code here\r\n    list_data.sort()\r\n    a = 1\r\n    for i in range(len(list_data)):\r\n        if i == 0:\r\n            a = list_data[i]\r\n        elif list_data[i] != list_data[i - 1]:\r\n            a = a * list_data[i]\r\n    return a\r\n\r\n\r","votes":151406.496},{"text":"\r\n    list_1 = set(list_data)\r\n    product = 1\r\n    for data in list_1:\r\n        product = product * data\r\n    return product\r\n\r\n\r","votes":152175.648},{"text":"\r\n    list_data.sort()\r\n    total_product=1\r\n    for i in range(len(list_data)):\r\n        if list_data[i]!=list_data[i-1]:\r\n            total_product*=list_data[i]\r\n    return total_product\r\n\r\n\r","votes":156105.912},{"text":"\r\n    \r\n    # 1. Get the unique numbers\r\n    unique_numbers = set(list_data)\r\n    \r\n    # 2. Calculate the product of the unique numbers\r\n    product = 1\r\n    for number in unique_numbers:\r\n        product *= number\r\n    \r\n    # 3. Return the product\r\n    return product\r\n\r\n\r","votes":156469.2},{"text":"\r\n    unique_list = set(list_data)\r\n    unique_list_product = 1\r\n    for num in unique_list:\r\n        unique_list_product *= num\r\n    return unique_list_product\r\n\r\n\r","votes":160797.064},{"text":"\r\n    list_data = list(set(list_data))\r\n    product = 1\r\n    for i in list_data:\r\n        product = product * i\r\n    return product\r\n\r\n\r","votes":160975.524},{"text":"\r\n    set_data = set(list_data)\r\n    result = 1\r\n    for data in set_data:\r\n        result *= data\r\n    return result\r\n\r\n\r","votes":163457.3},{"text":"\r\n    # Write your code here\r\n    list_data.sort()\r\n    result = 1\r\n    for i in range(len(list_data)):\r\n        if list_data[i] != list_data[i - 1]:\r\n            result *= list_data[i]\r\n    return result\r\n\r\n\r","votes":172881.6},{"text":"\r\n    # use set to remove duplicates\r\n    unique_nums = set()\r\n    # create a list of all unique numbers\r\n    for num in list_data:\r\n        unique_nums.add(num)\r\n\r\n    # calculate the product of all unique numbers\r\n    product = 1\r\n    for num in unique_nums:\r\n        product *= num\r\n\r\n    return product\r\n\r\n\r","votes":173631.352},{"text":"\r\n    unique_list = set(list_data)\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\nlist_data = [1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\r\nprint(unique_product(list_data))\r\n\r\n\r","votes":173702.448},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r\nprint(unique_product([10, 10, 20, 20, 10, 20, 30, 30, 20]))\r\n# 20\r\n\r\nprint(unique_product([10, 10, 20, 20, 10, 20, 30, 30, 20, 40, 40]))\r\n# 240\r\n\r\nprint(unique_product([1, 2, 3, 4, 5]))\r\n# 6\r\n\r\nprint(unique_product([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]))\r\n# 480\r\n\r\nprint(unique_product([10, 10, 20, 20, 10, 20, 30, 30, 20, 40, 40]))\r\n# 240\r\n\r\nprint(unique_product([10, 10, 20, 20, 10, 20, 30, 30, 20, 40, 40, 40, 40]))\r\n# 240\r\n\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n#","votes":182920.372},{"text":"\r\n    \r\n    unique = []\r\n    for i in list_data:\r\n        if not i in unique:\r\n            unique.append(i)\r\n    \r\n    unique.sort()\r\n    \r\n    product = 1\r\n    for i in unique:\r\n        product *= i\r\n    \r\n    return product\r\n\r\n\r\n\r","votes":183599.104},{"text":"\r\n    \r\n    # Initialize an empty list to store unique numbers.\r\n    unique_numbers = []\r\n    \r\n    # Iterate over the list.\r\n    for num in list_data:\r\n        \r\n        # Check if the number is already present in the list.\r\n        if num not in unique_numbers:\r\n            \r\n            # Add the number to the list.\r\n            unique_numbers.append(num)\r\n            \r\n    # Initialize a variable to store the product of the unique numbers.\r\n    product = 1\r\n    \r\n    # Iterate over the list.\r\n    for num in unique_numbers:\r\n        \r\n        # Calculate the product.\r\n        product *= num\r\n        \r\n    # Return the product.\r\n    return product\r\n\r\n\r","votes":190999.076},{"text":"\r\n    \r\n    unique_data = []\r\n    for data in list_data:\r\n        if data not in unique_data:\r\n            unique_data.append(data)\r\n\r\n    product = 1\r\n    for num in unique_data:\r\n        product *= num\r\n    return product\r\n\r\n\r","votes":194270.064},{"text":"\r\n    \r\n    unique = []\r\n    for i in list_data:\r\n        if i not in unique:\r\n            unique.append(i)\r\n    print(unique)\r\n    prod = 1\r\n    for i in unique:\r\n        prod = prod*i\r\n    print(prod)\r\n    return prod\r\n\r\n\r","votes":195387.144},{"text":"\r\n    result = []\r\n    for i in range(len(list_data)):\r\n        if list_data[i] not in result:\r\n            result.append(list_data[i])\r\n    product = 1\r\n    for i in range(len(result)):\r\n        product *= result[i]\r\n    return product\r\n\r\n\r","votes":201584.06},{"text":"\r\n    list_data.sort()\r\n    unique_list = []\r\n    unique_list.append(list_data[0])\r\n    for i in range(1, len(list_data)):\r\n        if list_data[i] != unique_list[-1]:\r\n            unique_list.append(list_data[i])\r\n    product = 1\r\n    for i in range(len(unique_list)):\r\n        product = product * unique_list[i]\r\n    return product\r\n\r\n\r\n# print(unique_product([3, 5, 1, 2, 1, 3, 4]))\r\n\r\n\r","votes":228250.828},{"text":"\r\n    list_data.sort()\r\n    unique_num = []\r\n    for i in range(len(list_data)):\r\n        if list_data[i] not in unique_num:\r\n            unique_num.append(list_data[i])\r\n\r\n    print(unique_num)\r\n    product_unique_num = 1\r\n    for i in range(len(unique_num)):\r\n        product_unique_num *= unique_num[i]\r\n    return product_unique_num\r\n","votes":239666.004},{"text":"\r\n    # Your code goes here\r\n    # list_data=list(map(int,input().split()))\r\n    list_data=sorted(list_data)\r\n    for i in range(len(list_data)-1):\r\n        for j in range(i+1,len(list_data)):\r\n            if list_data[j]==list_data[i]:\r\n                list_data.remove(list_data[j])\r\n                break\r\n    result=1\r\n    for i in list_data:\r\n        result*=i\r\n    return result\r\n\r\n\r","votes":240540.6},{"text":"\r\n    unique_nums = []\r\n    for i in range(0, len(list_data)):\r\n        if list_data[i] not in unique_nums:\r\n            unique_nums.append(list_data[i])\r\n    res = 1\r\n    for i in unique_nums:\r\n        res = res * i\r\n    return res\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10]))\r\n# expected output: 180\r\n\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n# expected output: 120\r\n\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1","votes":null},{"text":"\r\n    if len(list_data) == 0:\r\n        return 0\r\n    else:\r\n        return reduce(lambda x, y: x * y, set(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    unique_list.sort()\r\n    product_unique = 1\r\n    for i in unique_list:\r\n        product_unique = product_unique * i\r\n    return product_unique\r\n\r\n\r\nlist_data = [2, 4, 5, 2, 4, 5, 6, 7, 8, 9]\r\nprint(unique_product(list_data))\r\n\r\n\"\"\"\r\n    Sample Test Cases\r\n    [2, 4, 5, 2, 4, 5, 6, 7, 8, 9]\r\n    17140\r\n    [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\n    1073673300\r\n    [2, 4, 5, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    17140000000\r\n    [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n    1714000000000000\r\n    [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    1714000000000000000000000","votes":null},{"text":"\r\n    \r\n    unique_list = set(list_data)\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r\n\r\n\r\n# test case\r\n\r\nif __name__ == '__main__':\r\n\r\n    print(\"Test case 1:\")\r\n    list_data = [1, 2, 3, 4, 4, 3, 2, 1]\r\n    print(unique_product(list_data))\r\n    print(\"Expected output:\", 24)\r\n\r\n    print(\"\\nTest case 2:\")\r\n    list_data = [1, 2, 3, 4, 4, 3, 2, 1, 1]\r\n    print(unique_product(list_data))\r\n    print(\"Expected output:\", 24)\r\n\r\n    print(\"\\nTest case 3:\")\r\n    list_data = [1, 2, 3, 4, 4, 3, 2, 1, 1, 3, 4, 4, 3, 2, 1, 1]\r\n    print(unique_product(list_data))\r\n    print(\"Expected output:\", 24)\r\n\r\n    print(\"\\nTest case 4:\")\r\n    list_data = [1, 2, 3, 4, 4, 3, 2, 1, 1, 1, 2, 3, 4, 4, 3, 2, 1, 1]\r\n    print(unique_product(list_data))\r\n    print(\"Expected output:\", 24)\r\n\r\n    print(\"\\nTest case 5:\")\r\n    list_data = [1, 2, 3, 4, 4, 3, 2, 1, 1, 1, 1, 2, 3, 4, 4, 3","votes":null},{"text":"\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    return reduce(lambda x,y:x*y, unique_list)\r\n\r\nprint(unique_product([1, 2, 3, 3, 2, 4, 4]))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # create an empty list\r\n    unique = []\r\n    # iterate over the list\r\n    for i in list_data:\r\n        # if the item is not in the list, then append it\r\n        if i not in unique:\r\n            unique.append(i)\r\n    # create a variable to store the product of all the unique numbers\r\n    uniq = 1\r\n    # iterate over the list\r\n    for j in unique:\r\n        # multiply the number with the product\r\n        uniq *= j\r\n    # return the product of the unique numbers\r\n    return uniq\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    # create an empty list\r\n    list_data = []\r\n    # get the input from the user\r\n    n = int(input(\"Enter the number of elements in the list: \"))\r\n    # iterate over the list and get input from the user\r\n    for i in range(n):\r\n        list_data.append(int(input()))\r\n    # call the function\r\n    result = unique_product(list_data)\r\n    # print the result\r\n    print('The product of the unique numbers of the list is: ', result)\r\n\r\n\"\"\"\r\nTime Complexity: O(N),","votes":null},{"text":"\r\n    list_data = list(map(int, list_data.split()))\r\n    l = len(list_data)\r\n    for i in range(l):\r\n        for j in range(i+1, l):\r\n            if list_data[i] == list_data[j]:\r\n                list_data.remove(list_data[i])\r\n    list_data.sort()\r\n    prod = 1\r\n    for i in list_data:\r\n        prod *= i\r\n    return prod\r\n\r\n\r","votes":null},{"text":"\r\n    list_data = list(map(int, list_data.split()))\r\n    unique = set(list_data)\r\n    product = 1\r\n    for i in unique:\r\n        product = product * i\r\n    return product\r\n\r\n\r","votes":null},{"text":"\r\n    list_data.sort()\r\n    unique_list = []\r\n    for value in list_data:\r\n        if unique_list[-1] == value:\r\n            continue\r\n        unique_list.append(value)\r\n    product = 1\r\n    for value in unique_list:\r\n        product *= value\r\n    return product\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x*y, set(list_data))\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input().strip())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = unique_product(arr)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n\"\"\"\r\n#include <bits\/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n\/\/ Complete the unique_product function below.\r\nint unique_product(vector<int> arr) {\r\n    set<int> s;\r\n    int prod = 1;\r\n    for(int x : arr)\r\n        s.insert(x);\r\n    for(int x : s)\r\n        prod *= x;\r\n    return prod;\r\n}\r\n\r\nint main()\r\n{\r\n    ofstream fout(getenv(\"OUTPUT_PATH\"));\r\n\r\n    int n;\r\n    cin >> n;\r\n    cin.ignore(numeric_limits<streamsize>::max(), '\\n');\r\n\r\n    string arr_temp_temp;\r\n    getline(cin, arr_temp_temp);\r\n\r\n    vector<string> arr_temp = split_string(arr_temp_temp);\r\n\r\n    vector<int> arr(n);\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        int arr_item = stoi(arr_temp[i]);\r\n\r\n        arr[i] = arr_item;\r\n    }\r\n\r\n    int result = unique_product(arr);\r\n\r\n    fout << result << \"\\n\";\r\n\r\n    fout.close();\r\n\r\n    return 0;\r\n}\r\n\r\nvector<string> split_string(string input_string) {\r\n    string::iterator new_end = unique(input_string.begin(), input","votes":null},{"text":"\r\n\r\n    # Store the unique numbers in a list\r\n\r\n    unique_list = []\r\n\r\n    for number in list_data:\r\n        if number not in unique_list:\r\n            unique_list.append(number)\r\n\r\n    # Calculate the product of the unique numbers\r\n\r\n    product = 1\r\n\r\n    for number in unique_list:\r\n        product *= number\r\n\r\n    return product\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 4, 4, 5, 6, 7, 7, 7, 7, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88","votes":null},{"text":"\r\n    # Code goes here\r\n    # create a set of the list\r\n    new_list = set(list_data)\r\n    # create an empty list\r\n    final_list = []\r\n    # loop through the set and append each element to the list\r\n    for i in new_list:\r\n        final_list.append(i)\r\n    # calculate the product of the unique numbers using the mul function\r\n    product = mul(*final_list)\r\n    return product\r\n\r\n\r\n# Tests\r\nprint(unique_product([1, 2, 3, 4, 4, 4]))  # 24\r\nprint(unique_product([1, 1, 1, 2, 2, 3, 3]))  # 6\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # 3628800\r\nprint(unique_product([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))  # 3628800\r\nprint(unique_product([1, 2, 3, 4]))  # 24\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))  # 479001600\r\nprint(unique_product([1, 1, 1, 1, 1, 1, 1, 1]))  # 1\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))  # 6227020800\r\nprint(unique_product([1, 1, ","votes":null},{"text":"\r\n    return reduce(lambda x,y:x*y,list(set(list_data)))\r\n\r\n\r","votes":null},{"text":"\r\n    list_data = sorted(list_data)\r\n    unique_list = []\r\n    i = 0\r\n    j = 1\r\n    while i < len(list_data):\r\n        while j < len(list_data):\r\n            if list_data[i] == list_data[j]:\r\n                j += 1\r\n            else:\r\n                unique_list.append(list_data[i])\r\n                i += 1\r\n                break\r\n        j = i + 1\r\n    product = 1\r\n    for i in range(len(unique_list)):\r\n        product *= unique_list[i]\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [1, 2, 3, 4, 1, 2, 4, 3, 2, 4, 9, 8, 7, 6, 5]\r\n    print(unique_product(list_data))\r\n\r\n# 40320\r\n\r\n\r\n# 40320\r\n\r\n\r\n# 40320\r\n\r\n\r\n# 40320\r\n\r\n\r\n# 40320\r\n\r\n\r\n# 40320\r\n\r\n\r\n# 40320\r\n\r\n\r\n#","votes":null},{"text":"\r\n    list_data.sort()\r\n    unique_data = []\r\n    for i in range(len(list_data)):\r\n        if list_data[i] not in unique_data:\r\n            unique_data.append(list_data[i])\r\n    return reduce(lambda x,y: x*y, unique_data)\r\n\r\n\r\nclass Test(unittest.TestCase):\r\n   ","votes":null},{"text":"\r\n    # Create an empty list\r\n    unique_list = []\r\n\r\n    # Iterate over the main list\r\n    for i in list_data:\r\n        # If the number is not present in the new list, append it\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n\r\n    # Iterate over the new list\r\n    for i in unique_list:\r\n        # Calculate the product of the number and the product of the previous numbers\r\n        product = i * product\r\n\r\n    # Return the product\r\n    return product\r\n\r\n\r","votes":null},{"text":"\r\n    # Solution 1:\r\n    # data = set([i for i in list_data if list_data.count(i) == 1])\r\n    # return reduce(lambda x, y: x * y, data)\r\n    # Solution 2:\r\n    return reduce(lambda x, y: x * y, [i for i in list_data if list_data.count(i) == 1])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    unique_list = []\r\n\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n\r\n    product = 1\r\n\r\n    for i in unique_list:\r\n        product *= i\r\n\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    \r\n    print(unique_product([1, 4, 4, 2, 4, 4]))\r\n    print(unique_product([1, 2, 3, 4]))\r\n    print(unique_product([4, 4, 4, 4]))\r\n    print(unique_product([1, 1, 1, 1]))\r\n    print(unique_product([-1, -2, 3, 4]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11","votes":null},{"text":"\r\n    # Create an empty list\r\n    unique_list = []\r\n    # Create a for loop to go through the input list\r\n    for i in list_data:\r\n        # Check if the value is not in the unique list\r\n        if i not in unique_list:\r\n            # Add the value to the unique list\r\n            unique_list.append(i)\r\n    # Create the final data list\r\n    final_list = []\r\n    # Create a for loop to go through the unique list\r\n    for i in unique_list:\r\n        # Create a for loop to go through the input list\r\n        for j in list_data:\r\n            # Check if the value is equal to the value in the unique list\r\n            if i == j:\r\n                # Add the value to the final list\r\n                final_list.append(i)\r\n    # Create an empty list\r\n    product_list = []\r\n    # Create a for loop to go through the final list\r\n    for i in final_list:\r\n        # Check if the value is not in the product list\r\n        if i not in product_list:\r\n            # Calculate the product of the value in the final list\r\n            product_list.append(i * (final_list.count(i)))\r\n    # Create an empty list\r\n    final_product = []\r\n    # Create a for loop to go through the product list\r\n    for i in product_list:\r\n        # Check if the value is not in the final product list\r\n        if i not in final_product:\r\n            # Add the value to the final product list\r\n            final_product.append(i)\r\n    # Return the final product list\r\n    return final_product\r\n\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"The below code is for testing the function.\"\"\"\r\n    # Create a list for the input data\r\n    data = [1, 2, 3, 2, 1, 1]\r\n    # Call the function\r\n    unique_product(dat","votes":null},{"text":"\r\n    unique_num = []\r\n    for i in range(len(list_data)):\r\n        if list_data[i] not in unique_num:\r\n            unique_num.append(list_data[i])\r\n    return reduce(lambda x, y: x*y, unique_num)\r\n\r\n\r","votes":null},{"text":"\r\n    unique_num = set(list_data)\r\n    print(f\"Unique numbers in the list: {unique_num}\")\r\n    unique_product = 1\r\n    for num in unique_num:\r\n        unique_product *= num\r\n    print(f\"Unique product of the numbers in the list: {unique_product}\")\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    \r\n    # Create a dictionary to store the count of each unique value in the list.\r\n    # Note that the dictionary keys are the unique values of the list and the values are the count of each unique value\r\n    unique_values = {}\r\n    \r\n    # Iterate through the list data\r\n    for number in list_data:\r\n        \r\n        # Check if the unique value is present in the dictionary or not.\r\n        if number in unique_values:\r\n            unique_values[number] += 1\r\n        else:\r\n            unique_values[number] = 1\r\n    \r\n    # Create an empty list for storing the unique values of the list.\r\n    unique_list = []\r\n    \r\n    # Iterate through the dictionary\r\n    for key, value in unique_values.items():\r\n        \r\n        # Check if the value is greater than 1. If so append the key to the empty list.\r\n        if value > 1:\r\n            unique_list.append(key)\r\n    \r\n    # Sort the list to get the unique numbers in the list in order.\r\n    unique_list.sort()\r\n    \r\n    # Initialize the product variable to 1.\r\n    product = 1\r\n    \r\n    # Iterate through the list of unique numbers in the list.\r\n    for number in unique_list:\r\n        \r\n        # Store the product of all the unique numbers in the list.\r\n        product *= number\r\n    \r\n    # Return the product.\r\n    return product\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    arr = list(map(int, input().rstrip().split()))\r\n\r\n    result = unique_product(arr)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n# Sample Input","votes":null},{"text":"\r\n    list_data.sort()\r\n    unique_list = []\r\n    for i in range(len(list_data)):\r\n        if list_data[i] not in unique_list:\r\n            unique_list.append(list_data[i])\r\n    return unique_list\r\n\r\n\r\nprint(unique_product([2, 1, 1, 2, 3, 4, 4, 5]))\r\nprint(unique_product([1, 2, 2, 3, 4, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 5]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]))\r\n\r\n\r\n# Write a python function to fin","votes":null},{"text":"\r\n\r\n    list_data = list_data.split()\r\n    i = 0\r\n    set_list = set(list_data)\r\n    result = 1\r\n    while i < len(list_data):\r\n        if list_data[i] not in set_list:\r\n            i += 1\r\n            continue\r\n        else:\r\n            result *= int(list_data[i])\r\n            i += 1\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    array = input().split()\r\n    print(unique_product(array))\r\n","votes":null},{"text":"\r\n    # create a set from the list \r\n    # convert it to a list \r\n    # sort the list in ascending order \r\n    # store the product of the list in a variable \r\n    # return the variable \r\n    unique_list = set(list_data)\r\n    unique_list = list(unique_list)\r\n    unique_list.sort()\r\n    product = 1\r\n    for num in unique_list:\r\n        product = product * num\r\n    return product\r\n\r\nprint(unique_product([1, 2, 3, 4, 4, 4, 7","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    unique = set()\r\n    for i in range(len(list_data)):\r\n        if list_data[i] not in unique:\r\n            unique.add(list_data[i])\r\n    return reduce(lambda x, y: x * y, unique)\r\n\r\n\r\n#","votes":null},{"text":"\r\n    return reduce(lambda x, y: x*y, filter(lambda x: list_data.count(x) == 1, list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    x = set(list_data)\r\n    y = reduce(lambda x, y: x * y, x)\r\n    return y\r\n\r\n\r","votes":null},{"text":"\r\n    unique_list = []\r\n    \r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    \r\n    new_list = []\r\n    for i in unique_list:\r\n        new_list.append(list_data.count(i))\r\n    \r\n    products = 1\r\n    for i in new_list:\r\n        products = products * i\r\n    \r\n    return products\r\n\r\nprint(unique_product([2,3,4,5,3]))\r\nprint(unique_product([2, 3, 4, 5, 3, 4]))\r\nprint(unique_product([2, 3, 4, 5, 3, 4, 5]))\r\nprint(unique_product([5, 5, 5, 5, 5, 5]))\r\nprint(unique_product([5, 1, 5, 1, 5, 1]))\r\nprint(unique_product([5, 5, 5, 5, 5, 5, 5, 5]))\r\nprint(unique_product([5, 5, 5, 5, 5, 5, 5, 5, 5]))\r\nprint(unique_product([2, 3, 4, 5, 3, 4, 5]))\r\nprint(unique_product([2, 3, 4, 5, 3, 4, 5, 6]))\r\nprint(unique_product([2, 3, 4, 5, 3, 4, 5, 6, 7]))\r\nprint(unique_product([2, 3, 4, 5, 3, 4, 5, 6, 7, 8]))\r\nprint(unique_product([2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(unique","votes":null},{"text":"\r\n\r\n    # If the list is empty, return 0\r\n    if not list_data:\r\n        return 0\r\n    # Initialize the result\r\n    result = 1\r\n    # Get the unique numbers in the list\r\n    unique = set(list_data)\r\n\r\n    # Get the product of the unique numbers\r\n    for i in unique:\r\n        result = result*i\r\n\r\n    # Return the result\r\n    return result\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 5, 6]))\r\nprint(unique_product([1, 1, 1, 1, 1, 1]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51","votes":null},{"text":"\r\n    return reduce(lambda x,y:x*y,unique(list_data))\r\n\r","votes":null},{"text":"\r\n    list_data = sorted(list_data)\r\n    i = 0\r\n    j = len(list_data)-1\r\n    product = 1\r\n    while i < j:\r\n        if list_data[i] == list_data[j]:\r\n            j -= 1\r\n        else:\r\n            product *= list_data[i]\r\n            i += 1\r\n    product *= list_data[j]\r\n    return product\r\n\r","votes":null},{"text":"\r\n\r\n    return list(set([list_data[i] for i in range(len(list_data)) if list_data.count(list_data[i]) == 1]))\r\n\r\n\r","votes":null},{"text":"\r\n    list_data.sort()\r\n    product = 1\r\n    for i in range(len(list_data)):\r\n        if list_data[i] != list_data[i + 1]:\r\n            product = product * list_data[i]\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4]\r\n    print(unique_product(list_data))\r\n    list_data = [1, 2, 3, 4, ","votes":null},{"text":"\r\n    unique_product = 1\r\n    for unique_number in list_data:\r\n        if list_data.count(unique_number) == 1:\r\n            unique_product *= unique_number\r\n    return unique_product\r\n\r\n\r\nprint(unique_product([1, 2, 3, 4, 5, 4, 3, 2, 1]))\r\nprint(unique_product([1, 2, 3, 3, 3, 1]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, ","votes":null},{"text":"\r\n    \r\n    list_data = sorted(list_data)\r\n    i = 0\r\n    while i < len(list_data):\r\n        if list_data[i] == list_data[i+1]:\r\n            list_data.pop(i)\r\n        else:\r\n            i += 1\r\n\r\n    product = 1\r\n    for num in list_data:\r\n        product *= num\r\n\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [1, 2, 2, 4, 5, 7, 7, 7, 8, 9, 10]\r\n    print(f\"The result of {list_data} is {unique_product(list_data)}\")\r\n    list_data = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1","votes":null},{"text":"\r\n\r\n    # Your code here\r\n    unique_list = set(list_data)\r\n    return reduce(lambda x, y: x * y, unique_list)\r\n\r\n\r","votes":null},{"text":"\r\n    x = 1\r\n    for i in list_data:\r\n        if list_data.count(i) == 1:\r\n            x = x * i\r\n    return x\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [2, 4, 3, 1, 5, 6, 4, 6, 5, 4, 7, 8, 9, 10, 8, 11, 12, 13, 14, 15, 16, 2, 17, 18, 19, 20]\r\n    print(unique_product(list_data))\r\n\r\n    # This code is contributed by Nikhil Kumar Singh(nickzuck_007)\r\n","votes":null},{"text":"\r\n    return reduce(lambda x, y: x * y, set(list_data))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    product = 1\r\n\r\n    for i in list_data:\r\n        if list_data.count(i) == 1:\r\n            product *= i\r\n\r\n    return product\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    data_set = set(list_data)\r\n    product = 1\r\n    for i in data_set:\r\n        product *= i\r\n    return product\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([1,5,2,5,4]))\r\n    print(unique_product([2,3,4,5]))\r\n    print(unique_product([1,2,3,4,5]))\r\n    print(unique_product([1,2,2,3,4,4,5,5]))\r\n    print(unique_product([1,2,3,4,5,6,7,8,9,10]))\r\n    print(unique_product([1,1,1,1,1,2,2,2,2,2]))\r\n    print(unique_product([1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3]))\r\n    print(unique_product([1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,","votes":null},{"text":"\r\n    \r\n    unique_list = []\r\n    \r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    \r\n    product = 1\r\n    \r\n    for i in unique_list:\r\n        product *= i\r\n        \r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Enter the list of numbers: \")\r\n    list_data = list(map(int, input().split()))\r\n    \r\n    print(\"The unique product of the numbers is: \", unique_product(list_data))\r\n    \r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\n\r\nSpace Complexity: O(n)\r\n\r\nSample I\/O:\r\n\r\nSample 1:\r\nEnter the list of numbers: \r\n[2, 3, 4, 2, 3]\r\nThe unique product of the numbers is:  48\r\n\r\nSample 2:\r\nEnter the list of numbers: \r\n[1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]\r\nThe unique product of the numbers is:  120\r\n\r\nSample 3:\r\nEnter the list of numbers: \r\n[1, 2, 3, 4, 5]\r\nThe unique product of the numbers is:  120\r\n\r\nSample 4:\r\nEnter the list of numbers: \r\n[1, 2, 2, 3, 4, 4, 5, 5, 5]\r\nThe unique product of the numbers is:  120\r\n\r\nSample 5:\r\nEnter the list of numbers: \r\n[1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]\r\nThe unique product of the numbers is:  120\r","votes":null},{"text":"\r\n    unique_list = []\r\n    for item in list_data:\r\n        if item not in unique_list:\r\n            unique_list.append(item)\r\n    \r\n    return len(unique_list)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Sort the list\r\n    list_data.sort()\r\n    \r\n    # Initialize unique and product\r\n    unique = list_data[0]\r\n    product = unique\r\n    \r\n    # Check if next number is not duplicate\r\n    for i in range(1, len(list_data)):\r\n        if list_data[i] != list_data[i - 1]:\r\n            unique *= list_data[i]\r\n            product *= unique\r\n            \r\n    return product\r\n\r\nprint(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(unique_product([1, 2, 3, 4, 5, 6]))\r\nprint(unique_product([1, 2, 3, 4, 5, 5, 5, 5, 5]))\r\n\r\n\r\n# In[15]:\r\n\r\n\r","votes":null},{"text":"\r\n    a = []\r\n    for i in list_data:\r\n        if i not in a:\r\n            a.append(i)\r\n    return reduce(lambda x, y: x*y, a, 1)\r\n\r\nif __name__ == \"__main__\":\r\n    print(unique_product([1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5]))\r\n    print(unique_product([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]))\r\n    print(unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n    print(unique_product([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n    print(unique_product([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, ","votes":null},{"text":"\r\n    \r\n    result = []\r\n    set_list = set(list_data)\r\n    for i in set_list:\r\n        result.append(list_data.count(i))\r\n    \r\n    return reduce(lambda x, y: x * y, result)\r\n\r\n\n","votes":null},{"text":"\r\n    unique_val = set()\r\n    for val in list_data:\r\n        if val not in unique_val:\r\n            unique_val.add(val)\r\n    unique_val = list(unique_val)\r\n    prod = 1\r\n    for val in unique_val:\r\n        prod *= val\r\n    return prod\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [1, 3, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3,\r\n                 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8,\r\n                 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print('Given list:', list_data)\r\n    print('Product of unique elements:', unique_product(list_data))\r\n    print('Expected:', 100)\r\n    print('Pass' if unique_product(list_data) == 100 else 'Fail')\r\n\r\n    list_data = [1, 3, 3","votes":null},{"text":"\r\n\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n\r\n    result = 1\r\n    for i in unique_list:\r\n        result *= i\r\n\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(unique_product([1, 2, 3, 4, 4, 4]))\r\n    print(unique_product([1, 2, 3, 4, 5, 6]))\r\n    print(unique_product([1, 2, 3, 4, 4, 5]))\r\n    print(unique_product([1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,","votes":null},{"text":"\r\n    # list_data = [1, 1, 2, 2, 3, 3, 4, 4]\r\n    unique_list = []\r\n    for i in list_data:\r\n        if i not in unique_list:\r\n            unique_list.append(i)\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\r\n\r\n\r\nif __name__ == '__main__':\r\n    list_data = [1, 1, 2, 2, 3, 3, 4, 4]\r\n    print(unique_product(list_data))\r\n\r\n    list_data = [1, 2, 3, 4]\r\n    print(unique_product(list_data))\r\n\r\n    list_data = [1, 2, 3, 4, 5]\r\n    print(unique_product(list_data))\r\n\r\n    list_data = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\r\n    print(unique_product(list_data))\r\n\r\n    list_data = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    print(unique_product(list_data))\r\n\r\n    list_data = [1, 2, 3, 4, 5, 6]\r\n    print(unique_product(list_data))\r\n\r\n    list_data = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    print(unique_product(list_data))\r\n\r\n    list_data = [1, ","votes":null},{"text":"\r\n    list_data.sort()\r\n    prod = 1\r\n    for i in range(0, len(list_data)):\r\n        prod = prod * list_data[i]\r\n        if i == 0:\r\n            temp = list_data[i]\r\n        if list_data[i] == temp:\r\n            pass\r\n        else:\r\n            temp = list_data[i]\r\n            print(temp)\r\n            prod = prod * temp\r\n    return prod\r\n\r\n\r","votes":null},{"text":"\r\n    list_data = [int(i) for i in list_data.split()]\r\n    unique_list = list(set(list_data))\r\n    unique_list.sort()\r\n    prod = 1\r\n    for i in unique_list:\r\n        prod *= i\r\n    return prod\r\n\r\n\r\nprint(unique_product('2 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5'))\r\n\r\n\r\n# 2\r","votes":null},{"text":"\r\n    list_data.sort()  # Sorting the list\r\n    i = 0\r\n    while i < len(list_data):\r\n        if list_data[i] == list_data[i + 1]:\r\n            list_data.remove(list_data[i])\r\n            i = 0\r\n        i += 1\r\n    return list_data\r\n\r\n\r","votes":null},{"text":"\r\n    temp = set(list_data)\r\n    return reduce(lambda x, y: x*y, temp)\r\n\r\n\r","votes":null},{"text":"\r\n    return reduce(lambda x, y: x * y, list(set(list_data)))\r\n\r\n\r\nunique_product([1, 2, 4, 4, 3])\r\n\r\n\r","votes":null},{"text":"\r\n    # Create an empty list to store the unique elements\r\n    unique_list = []\r\n    \r\n    # Iterate over the list and add unique elements to the list\r\n    for item in list_data:\r\n        if item not in unique_list:\r\n            unique_list.append(item)\r\n            \r\n    # Iterate over the list to find the product of the unique elements\r\n    product = 0\r\n    for item in unique_list:\r\n        product = product * item\r\n    return product\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    list_data = sorted(list_data)\r\n    result = 1\r\n    for i in range(len(list_data)):\r\n        if list_data[i] != list_data[i+1]:\r\n            result = result * list_data[i]\r\n    return result\r\n\r\n\r","votes":null}],"time":{"count":43.0,"avg":148302.4561860465,"std":39594.1170603502,"cov":0.266982207}}
{"id":575,"question":"def count_no (A,N,L,R):\r\n    \"\"\"Write a python function to find nth number in a sequence which is not a multiple of a given number.\"\"\"","answers":[{"text":"\r\n    count=0\r\n    for i in range(L,R+1):\r\n        if (i%A!=0):\r\n            count+=1\r\n        if (count==N):\r\n            return i\r\n\r\n\r","votes":76141.936},{"text":"\r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if (i % A != 0):\r\n            count += 1\r\n        if count == N:\r\n            return i\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":108220.256},{"text":"\r\n    count = 0\r\n    for i in range (L,R+1):\r\n        if i%A != 0:\r\n            count += 1\r\n            if count == N:\r\n                return i\r\n    return \"Invalid input\"\r\n    \r\n\r","votes":112059.38},{"text":"\r\n    count = 0\r\n    for i in range (L,R+1):\r\n        if i%A != 0:\r\n            count += 1\r\n            if count == N:\r\n                break\r\n    return i\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = int(input())\r\n    N = int(input())\r\n    L = int(input())\r\n    R = int(input())\r\n    \r\n    print(count_no(A,N,L,R))\r\n\r\n\"\"\"\r\nConstraints\r\n1<=A<=100\r\n1<=N<=100\r\n1<=L<=R<=109\r\n\r\nSample Input\r\n2\r\n1\r\n1\r\n1\r\n10\r\nSample Output\r\n2\r\nExplanation\r\nHere, the sequence is 1,2,3,4,5,6,7,8,9,10. The number 2 is the first number in the sequence that is not a multiple of 2. So the answer is 2.\r\n\r\nHere, the sequence is 1,2,3,4,5,6,7,8,9,10. The number 10 is the first number in the sequence that is not a multiple of 2. So the answer is 10.\r\n\"\"\"\r\n\r\n\"\"\"\r\nTime Complexity: O(N) where N is the number of elements in the list A.\r\n\r\nSpace Complexity: O(N) where N is the number of elements in the list A.\r\n\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":118933.676},{"text":"\r\n    \r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if i%A != 0:\r\n            count += 1\r\n            if count == N:\r\n                return i\r\n    return 0\r\n\r","votes":122702.976},{"text":"\r\n    # code here\r\n    i=L\r\n    c=0\r\n    while i<=R:\r\n        if not(i%A==0):\r\n            c+=1\r\n            if c==N:\r\n                return i\r\n        i+=1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":131705.484},{"text":"\r\n    # code here\r\n    i=L\r\n    count=0\r\n    while i<R:\r\n        if i%A!=0:\r\n            count+=1\r\n            if count==N:\r\n                break\r\n        i+=1\r\n        \r\n    return i\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = int(input())\r\n    N = int(input())\r\n    L = int(input())\r\n    R = int(input())\r\n    print(count_no(A,N,L,R))\r\n","votes":133079.564},{"text":"\r\n    ans=0\r\n    for i in range(L,R+1):\r\n        if i%A!=0:\r\n            ans+=1\r\n        if ans==N:\r\n            return i\r\n            break\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":143806.348},{"text":"\r\n    \r\n    #code here\r\n    count=0\r\n    for i in range (L,R+1):\r\n        if (i%A!=0):\r\n            count+=1\r\n            if count==N:\r\n                return i\r\n    return -1\r\n\r\n\r\nif __name__ == '__main__':\r\n    A,N,L,R = list(map(int,input().split()))\r\n    print(count_no(A,N,L,R))\r\n\r\n\r\n#Reference: w3resource","votes":145913.744},{"text":"\r\n    #code here\r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if i % A != 0:\r\n            count += 1\r\n        \r\n        if count == N:\r\n            return i\r\n\r\n\r","votes":147428.012},{"text":"\r\n    \r\n    count=0\r\n    for i in range(L,R+1):\r\n        if i%A != 0:\r\n            count+=1\r\n        if count == N:\r\n            return i\r\n    return \"Not found\"\r\n    \r","votes":171949.744},{"text":"\r\n    \r\n    count=0\r\n    for i in range (L,R+1):\r\n        if (i%A != 0):\r\n            count += 1\r\n        if (count == N):\r\n            return i\r\n    return -1\r\n\r\n#","votes":176983.196},{"text":"\r\n    \r\n    n = 0\r\n    count = 0\r\n    \r\n    for i in range(L,R+1):\r\n        if(i % A == 0):\r\n            continue\r\n        else:\r\n            n = n + 1\r\n            if(n == N):\r\n                count = i\r\n                break\r\n    \r\n    return count\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":190330.908},{"text":"\r\n    \r\n    for i in range(N):\r\n        if A[i] % L != 0:\r\n            return A[i]\r\n        elif A[i] % R != 0:\r\n            return A[i]\r\n    return A[i]\r\n\r\n\r\nA = [3, 5, 2, 7, 8, 1, 9]\r\nL = 2\r\nR = 5\r\nN = 3\r\n\r\nprint(count_no(A, N, L, R))\r\n\r\n\"\"\"\r\nA = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nL = 2\r\nR = 5\r\n\r\nprint(count_no(A, 10, L, R))\r\n\r\nA = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nL = 1\r\nR = 2\r\n\r\nprint(count_no(A, 15, L, R))\r\n\r\nA = [3, 5, 2, 7, 8, 1, 9]\r\nL = 2\r\nR = 5\r\n\r\nprint(count_no(A, 3, L, R))\r\n\r\nA = [1, 3, 5, 7, 8, 1, 9]\r\nL = 2\r\nR = 5\r\n\r\nprint(count_no(A, 5, L, R))\r\n\r\nA = ","votes":null},{"text":"\r\n    \r\n    # Write your code here\r\n    cnt=0\r\n    for i in range (L,R+1):\r\n        if A[i]%N!=0:\r\n            cnt+=1\r\n            if cnt==N:\r\n                return i\r\n    return -1\r\n\r\n# Tester\r\nif __name__ == \"__main__\":\r\n    n = 9\r\n    A = [5, 7, 8, 9, 10, 11, 13, 14, 16, 17]\r\n    L","votes":null},{"text":"\r\n    \r\n    if A == 0:\r\n        return N\r\n    \r\n    if N == 1:\r\n        return 1\r\n    \r\n    for i in range(L,R+1):\r\n        if i % A != 0:\r\n            if N == 1:\r\n                return i\r\n            count_no(A,N-1,i+1,R)\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    ","votes":null},{"text":"\r\n    A = [x for x in range(A,R+1)]\r\n    A = A[::2]\r\n    A = A[:N]\r\n    return A\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if i%A != 0:\r\n            count += 1\r\n            if count == N:\r\n                return i\r\n    \r\n    return -1\r\n\r\nif __name__ == '__main__':\r\n    A,N,L,R = map(int,raw_input().split())\r\n    print count_no(A,N,L,R)\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n  ","votes":null},{"text":"\r\n    if N==1:\r\n        return A\r\n    else:\r\n        return count_no(A+1,N-1,L,R)\r\n\r\n\r","votes":null},{"text":"\r\n    if L==1:\r\n        return A[0]\r\n    elif L==R:\r\n        return A[L-1]\r\n    else:\r\n        mid=int((L+R)\/2)\r\n        if(A[mid]%N==0):\r\n            return count_no(A,N,L,mid)\r\n        else:\r\n            return count_no(A,N,mid+1,R)            \r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if A[i]%N != 0:\r\n            count += 1\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    A = list(map(int,input().split()))\r\n    N = int(input())\r\n    L = int(input())\r\n    R = int(input())\r\n    print(count_no (A,N,L,R))\r\n\r\n\"\"\"\r\nInput:\r\n5 7 9 11 13\r\n2\r\n0\r\n3\r\n\r\nOutput:\r\n\r\n4\r\n\r\nLogic:\r\n1. First we find the count of number which is not a multiple of 2\r\n2. Then we find the number which is not a multiple of 2\r\n3. Check if the number is less than 4, then return 1, else return 4\r\n4. If the number is less than 4, then we have to find the number which is not a multiple of 2 and return it\r\n5. Since there is no number which is not a multiple of 2, we have to find the number which is not a multiple of 2\r\n6. We have to find the number which is not a multiple of 4, so we have to check if number is less than 3, then return 1, else return 3\r\n7. If the number is less than 3, then we have to find the number which is not a multiple of 2 and return it\r\n8. Otherwise if the number is greater than 2, then we have to find the number which is not a multiple of 2 and return it\r\n9. Since there is no number which is not a multiple of 2, we have to find the number which is not a multiple of 2\r\n10. We have to find the number which is not a multiple of 3, so we have to check if number is less than 2, then return 1, else return 2\r","votes":null},{"text":"\r\n    \r\n    if (A==[]):\r\n        return -1\r\n    \r\n    if (N==1):\r\n        return A[0]\r\n    \r\n    if (L==0):\r\n        return count_no(A[1:],N,0,len(A)-1)\r\n    \r\n    if (R==0):\r\n        return count_no(A[:],N,0,len(A)-1)\r\n    \r\n    return count_no(A[:R],N,0,R-1)+count_no(A[L:],N,L,len(A)-1)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if L > R:\r\n        return 0\r\n    \r\n    mid = (L+R) \/\/ 2\r\n        \r\n    if A[mid] % N == 0:\r\n        return count_no(A,N,L,mid-1)\r\n        \r\n    else:\r\n        return 1 + count_no(A,N,mid+1,R)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    if N==1:\r\n        return A[L]\r\n    if L==R:\r\n        return A[L]\r\n    mid=int((L+R)\/2)\r\n    if A[mid]%N==0:\r\n        return count_no(A,N,mid+1,R)\r\n    else:\r\n        return count_no(A,N,L,mid)\r\n\r\nA=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\nN=3\r\nL=0\r\nR=len(A)-1\r\nprint(count_no(A,N,L,R))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(L,R+1):\r\n        if A[i]%N != 0:\r\n            total += 1\r\n    return total\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\r\n    N = 3\r\n    L = 0\r\n    R = len(A)-1\r\n    print(\"The","votes":null},{"text":"\r\n    if L == 1:\r\n        return A[0]\r\n    elif L%N == 0:\r\n        return count_no(A,N,L,R-1)\r\n    else:\r\n        return A[L-1]\r\n\r","votes":null},{"text":"\r\n    \r\n    # Code here\r\n    \r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if A[i]%N!=0:\r\n            count+=1\r\n    return count\r\n\r\n# { \r\n#  Driver Code Starts\r\n# Initial Template for Python 3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n# Contributed by : Nagendra Jha\r\n# Function to check for the correctness of output\r\n\r","votes":null},{"text":"\r\n    \r\n    count=0\r\n    for i in range(L,R+1):\r\n        if A[i]%N!=0:\r\n            count+=1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    \r\n    for i in range(L,R+1):\r\n        if i%A!=0:\r\n            return i\r\n    return -1\r\n\r\n\r","votes":null},{"text":"\r\n    # 1. check for null condition\r\n    if N == 1:\r\n        return L\r\n \r\n    # 2. check for base condition\r\n    if L == R:\r\n        return L\r\n \r\n    # 3. find mid\r\n    mid = (L+R)\/\/2\r\n \r\n    # 4. check whether mid is nth number\r\n    if mid%A != 0 and mid >= N:\r\n        return mid\r\n    elif mid%A == 0 and mid + 1 >= N:\r\n        return mid+1\r\n \r\n    # 5. make calls to recursive function\r\n    if mid%A != 0:\r\n        return count_no(A,N,L,mid)\r\n    else:\r\n        return count_no(A,N,mid+1,R)\r\n \r\n# test case\r\nA = int(input())\r\nN = int(input())\r\nL = int(input())\r\nR = int(input())\r\nprint(count_no(A,N,L,R))\r\n\r\n# 10 4 1 10\r\n# 12\r\n# 11\r\n# 10\r\n# 10 4 1 10\r\n# 12\r\n# 11\r\n# 10\r\n# 10 4 1 10\r\n# 12\r\n# 11\r\n# 10\r\n# 10 4 1 10\r\n# 12\r\n# 11\r\n# 10\r\n# 10 4 1 10\r\n# 12\r\n# 11\r\n# 10\r\n# 10 4 1 10\r\n# 12\r\n# 11\r\n# 10\r\n# 10 4 1 10\r\n# 12\r\n# 11\r\n# 1","votes":null},{"text":"\r\n    #Initialization\r\n    count=0\r\n    #for every number in the list\r\n    for i in range(len(A)):\r\n        #if the number is not a multiple of N\r\n        if A[i]%N!=0:\r\n            count+=1\r\n    if count>=L and count<=R:\r\n        return count\r\n    else:\r\n        return 0\r\n\r\nif __name__ == '__main__':\r\n    #count_no([1,2,3,4,5,6,7,8,9,10], 2, 3, 6)\r\n    count_no([1,2,3,4,5,6,7,8,9,10], 4, 3, 6)\r\n    count_no([1,2,3,4,5,6,7,8,9,10], 5, 3, 6)\r\n    count_no([1,2,3,4,5,6,7,8,9,10], 6, 3, 6)\r\n    count_no([1,2,3,4,5,6,7,8,9,10], 7, 3, 6)\r\n    count_no([1,2,3,4,5,6,7,8,9,10], 8, 3, 6)\r\n    count_no([1,2,3,4,5,6,7,8,9,10], 9, 3, 6)\r\n    count_no([1,2,3,4,5,6,7,8,9,10], 10, 3, 6)\r\n    count_no([1,2,3,4,5,6,7,8,9,10], 11, 3, 6)\r\n    count_no([1,2,3,4,5,6,7,8,9,10], 12, 3,","votes":null},{"text":"\r\n    count=0\r\n    for i in range(L,R+1):\r\n        if(A[i]%N!=0):\r\n            count=count+1\r\n    return count\r\n    \r\n    \r\n\r\nif __name__ == '__main__':\r\n    \r\n    A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\r\n    N = 5\r\n    L = 5\r\n    R = 14\r\n    \r\n    print(count_no(A,N,L,R))\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r","votes":null},{"text":"\r\n    if L<0:\r\n        return 0\r\n    if L==0:\r\n        return 1\r\n    if R<L:\r\n        return 0\r\n    if R==L:\r\n        return 1\r\n    if R==0:\r\n        return 1\r\n    if (A[R-1]%N)==0:\r\n        return count_no(A,N,L,R-1)\r\n    else:\r\n        return count_no(A,N,L,R-1)+count_no(A,N,L-1,R-1)\r\n    \r\n\r\n\r\n\r\n\r\nif __name__=='__main__':\r\n    A=[1,1,1,1,2,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,29,30,30,30","votes":null},{"text":"\r\n    num=1\r\n    i=L\r\n    while i<=R:\r\n        if(num%N!=0):\r\n            num+=1\r\n        else:\r\n            num+=1\r\n            i+=1\r\n    return num\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    n = 0\r\n    for i in range(L,R+1):\r\n        if (i % A != 0):\r\n            n = n + 1\r\n        if n == N:\r\n            return i\r\n\r\n\r\nT=int(input())\r\nfor i in range(T):\r\n    A=int(input())\r\n    N=int(input())\r\n    L=int(input())\r\n    R=int(input())\r\n    print(count_no(A,N,L,R))\r\n    \r\n\r\n\r\n\r\n\"\"\"\r\nSample Input 1:\r\n1\r\n4\r\n2\r\n1\r\n10\r\n2\r\n\r\nSample Output 1:\r\n1\r\n\r\n\r\nSample Input 2:\r\n1\r\n4\r\n3\r\n1\r\n10\r\n3\r\n\r\nSample Output 2:\r\n7\r\n\r\n\r\nSample Input 3:\r\n1\r\n4\r\n1000\r\n1\r\n1000000\r\n1\r\n\r\nSample Output 3:\r\n999999\r\n\r\n\r\nSample Input 4:\r\n1\r\n4\r\n1000000\r\n1\r\n1000000\r\n1\r\n\r\nSample Output 4:\r\n1000000\r\n\r\n\r\nSample Input 5:\r\n1\r\n4\r\n1000000\r\n1\r\n1000000\r\n2\r\n\r\nSample Output 5:\r\n999999\r\n999999\r\n\r\n\r\nSample Input 6:\r\n1\r\n4\r\n1000000\r\n1\r\n1000000\r\n3\r\n\r\nSample Output 6:\r\n999999\r\n999999","votes":null},{"text":"\r\n    if N==1:\r\n        return L\r\n    else:\r\n        return (count_no(A,N-1,L,R)+L)%A\r\n  \r","votes":null},{"text":"\r\n    \r\n    if L > A:\r\n        return 0\r\n    \r\n    if R < A:\r\n        return 0\r\n    \r\n    if N == 1:\r\n        return A\r\n    \r\n    count = 0\r\n    \r\n    for i in range(L,R+1):\r\n        if i%A != 0:\r\n            count += 1\r\n            \r\n        if count == N:\r\n            return i\r\n    \r\n    return 0\r\n\r\n\r\n'''\r\n#Test cases:\r\nprint(count_no(5,2,2,10))\r\nprint(count_no(5,3,2,10))\r\nprint(count_no(7,3,2,10))\r\nprint(count_no(11,4,2,10))\r\nprint(count_no(11,3,2,10))\r\nprint(count_no(11,2,2,10))\r\nprint(count_no(11,1,2,10))\r\nprint(count_no(2,2,2,10))\r\nprint(count_no(11,1,1,10))\r\nprint(count_no(11,1,2,2))\r\nprint(count_no(11,1,1,1))\r\nprint(count_no(1","votes":null},{"text":"\r\n    if L == R:\r\n        return L\r\n    mid = (L+R)\/\/2\r\n    if A[mid]%N == 0:\r\n        return count_no(A,N,L,mid)\r\n    else:\r\n        return count_no(A,N,mid+1,R)\r\n    \r\nA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\r\nN = 2\r\nL = 0\r\nR = len(A)-1\r\nprint(count_no(A,N,L,R))\r\n\r\n\r\n# Given a list of numbers, find the index of the number which is not a multiple of 4.\r\n\r\n\r","votes":null},{"text":"\r\n    if L==R:\r\n        return A[L]\r\n    else:\r\n        mid=(L+R)\/\/2\r\n        if A[mid]%N==0:\r\n            return count_no(A,N,L,mid)\r\n        else:\r\n            return count_no","votes":null},{"text":"\r\n    # If the number is already a multiple of N, then return -1\r\n    if(A%N==0):\r\n        return -1\r\n    # If the number is greater than the range, then return -1\r\n    if(A>R):\r\n        return -1\r\n    # If the number is less than the range, then return the number\r\n    if(A<=R):\r\n        return A\r\n\r\n    # Check if the number is a multiple of N\r\n    if(A%N==0):\r\n        return -1\r\n\r\n    # If the number is between the range, then return the number\r\n    if(A<=R):\r\n        return A\r\n\r\n    # If the number is greater than the range, then return -1\r\n    if(A>R):\r\n        return -1\r\n\r\n# Driver Program\r\nprint(\"The number is: \", count_no(15,3,5,10))\r\nprint(\"The number is: \", count_no(9,2,3,6))\r\nprint(\"The number is: \", count_no(11,2,3,6))\r\nprint(\"The number is: \", count_no(2,2,3,6))\r\nprint(\"The number is: \", count_no(15,3,5,10))\r\nprint(\"The number is: \", count_no(18,2,3,6))\r\nprint(\"The number is: \", count_no(27,2,3,6))\r\nprint(\"The number is: \", count_no(","votes":null},{"text":"\r\n    \r\n    no = 0\r\n    for i in range(L,R+1):\r\n        if i%N == 0:\r\n            no = no + 1\r\n        else:\r\n            no = no + A[i]\r\n    return no\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,","votes":null},{"text":"\r\n    # Write your code here\r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if(A[i]%N!=0):\r\n            count+=1\r\n    return count\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    if (N <= 0):\r\n        return -1\r\n    \r\n    if (N == 1):\r\n        return A\r\n    \r\n    cnt = 0\r\n    left = L\r\n    for i in range(left,R+1):\r\n        if (i % A != 0):\r\n            cnt += 1\r\n            if (cnt >= N):\r\n                return i\r\n    return -1\r\n\r\nfor T in range(int(input())):\r\n    A, N, L, R = list(map(int, input().split()))\r\n    ans = count_no(A, N, L, R)\r\n    print('Case #{}: {}'.format(T","votes":null},{"text":"\r\n    #code here\r\n    for i in range(L,R+1):\r\n        if A[i]%N!=0:\r\n            return i\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    \r\n    # Code here\r\n    \r\n    if L==1:\r\n        return A[0]\r\n    if N==1:\r\n        return A[R]\r\n    \r\n    i=0\r\n    while i<len(A):\r\n        if A[i]%L!=0:\r\n            if N==1:\r\n                return A[i]\r\n            N-=1\r\n            continue\r\n        i+=1\r\n    return -1\r\n\r\nA=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\nN=15\r\nL=3\r\nR=14\r\nprint(count_no(A,N,L,R))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # code here\r\n    \r\n    if A < 2 or N <= 0 or L > R:\r\n        return -1\r\n    \r\n    if L == R:\r\n        if (L % A) != 0:\r\n            return L\r\n        else:\r\n            return -1\r\n        \r\n    if L > R:\r\n        return -1\r\n    \r\n    if N == 1:\r\n        return L\r\n    \r\n    if N == 2:\r\n        if (L % A) != 0:\r\n            return L\r\n        else:\r\n            return (L + 1)\r\n        \r\n    if (L % A) != 0:\r\n        return L\r\n    else:\r\n        return (L + 1)\r\n    \r\n    \r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(L,R+1):\r\n        if (i%A!=0):\r\n            count+=1\r\n    return count\r\n\r\nA=12\r\nN=4\r\nL=10\r\nR=20\r\n\r\nprint(count_no(A,N,L,R))\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# Sample Input:\r\n# A=12,N=4,L=10,R=20\r\n\r\n# Sample Output:\r\n# 2\r\n\r\n# Explanation:\r\n# In the given interval (L,R), there are 5 multiples of 12. So the answer is 2.\r\n\r\n# Sample Input:\r\n# A=12,N=4,L=10,R=20\r\n\r\n# Sample Output:\r\n# 4\r\n\r\n# Explanation:\r\n# In the given interval (L,R), there are 5 multiples of 12. So the answer is 4.\r\n\r\n# Sample Input:\r\n# A=12,N=4,L=10,R=20\r\n\r\n# Sample Output:\r\n# 6\r\n\r\n# Explanation:\r\n# In the given interval (L,R), there are 5 multiples of 12. So the answer is 6.\r\n\r\n# Sample Input:\r\n# A=12,N=4,L=10,R=20\r\n\r\n# Sample Output:\r\n# 8\r\n\r\n# Explanation:\r\n# In the given interval (L,R), there are 5 multiples of 12. So the answer is 8.\r\n\r\n# Sample Input:\r\n# A=12,N=4,L=10,R=20\r\n\r\n# Sample Output:\r\n# 10","votes":null},{"text":"\r\n    for i in range(N,R+1):\r\n        if i%A!=0:\r\n            return i\r\n        else:\r\n            pass\r\n    return \"Number not found in the given range\"\r\n\r","votes":null},{"text":"\r\n    list = []\r\n    for i in range(N):\r\n        if A[i]%L!=0 and A[i]%R!=0:\r\n            list.append(A[i])\r\n    return list\r\n    \r\n\r\n\r","votes":null},{"text":"\r\n    n = 0\r\n    for i in range(L,R+1):\r\n        if A[i]%N != 0:\r\n            n += 1\r\n    return n\r\n\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(L,R+1):\r\n        if (i%A!=0):\r\n            count+=1\r\n            if(count==N):\r\n                return i\r\n            \r\nA=int(input())\r\nN=int(input())\r\nL=int(input())\r\nR=int(input())\r\nprint(count_no(A,N,L,R))\r\n\r\n#https:\/\/practice.geeksforgeeks.org\/problems\/nth-number-not-divisible-by-n\/0\/\r\n#Reference-https:\/\/www.geeksforgeeks.org\/nth-number-not-divisible-by-n\/\r\n\r\n#solution\r","votes":null},{"text":"\r\n    \r\n    if N==1:\r\n        return A[L]\r\n    \r\n    i=L\r\n    j=R\r\n    while (i<j):\r\n        m=int((i+j)\/2)\r\n        if (A[m]%N==0):\r\n            i=m+1\r\n        else:\r\n            j=m\r\n    return A[i]\r\n\r","votes":null},{"text":"\r\n    count=0\r\n    for i in range(L,R+1):\r\n        if (A[i]%N)!=0:\r\n            count+=1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    if L == R:\r\n        return A[L]\r\n\r\n    mid = (L+R)\/\/2\r\n    \r\n    if mid%N == 0:\r\n        return count_no(A,N,L,mid)\r\n    else:\r\n        return count_no(A,N,mid+1,R)\r\n    \r\nn,m = map(int,input().split())\r\na = list(map(int,input().split()))\r\na.sort()\r\n\r\nfor i in range(m):\r\n    n1,n2 = map(int,input().split())\r\n    ans = count_no(a,n1,0,len(a)-1)\r\n    if ans == n2:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    \r\n    \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        ","votes":null},{"text":"\r\n    count=0\r\n    for i in range(L,R+1):\r\n        if(A[i]%N!=0):\r\n            count+=1\r\n        if count==N:\r\n            return i\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    a=0\r\n    b=0\r\n    c=1\r\n    while(c<=N):\r\n        a=a*10+b\r\n        b=a%L\r\n        a=a\/\/L\r\n        c=c+1\r\n    return a\r\n\r","votes":null},{"text":"\r\n    \r\n    if N == 1:\r\n        return A\r\n    \r\n    temp = A\r\n    \r\n    for i in range (1,N):\r\n        temp = (temp + L) % R\r\n        \r\n    return temp\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if A[i]%N != 0:\r\n            count += 1\r\n    return count\r\n    \r","votes":null},{"text":"\r\n\r\n    #Your code goes here\r\n    i=0\r\n    j=0\r\n    while i<N:\r\n        if ((A[j]%L)!=0) or ((A[j]%R)!=0):\r\n            i=i+1\r\n        j=j+1\r\n    return A[j-1]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for num in range(L,R+1):\r\n        if num % A != 0:\r\n            count += 1\r\n            if count == N:\r\n                return num\r\n\r\nA = int(input(\"Enter the number : \"))\r\nN = int(input(\"Enter the position of the number : \"))\r\nL = int(input(\"Enter the lower limit : \"))\r\nR = int(input(\"Enter the upper limit : \"))\r\n","votes":null},{"text":"\r\n    return A[R-1]-A[L-1]+1\r\n    \r\nA = [1,1,2,2,3,3,3,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,","votes":null},{"text":"\r\n    if ((N == 0) or (N > 100000)):\r\n        return -1\r\n    if (A == 0):\r\n        return 0\r\n    if (R > L):\r\n        return 0\r\n    if (A == 1):\r\n        return R - L + 1\r\n    \r\n    A,N,L,R = int(A),int(N),int(L),int(R)\r\n    \r\n    # Base Case\r\n    if (N == 1):\r\n        return (L % A)\r\n    \r\n    # Recursive Case\r\n    k = N\/\/2\r\n    \r\n    # Case 1: N is even\r\n    if (k*2 == N):\r\n        return count_no(A,k,L,L + k)\r\n    \r\n    # Case 2: N is odd\r\n    else:\r\n        return count_no(A,k,L + k,R)\r\n\r\nif __name__ == \"__main__\":\r\n    A = int(input())\r\n    N = int(input())\r\n    L = int(input())\r\n    R = int(input())\r","votes":null},{"text":"\r\n    return (L+R)\/2\r\n\r\n\r","votes":null},{"text":"\r\n    global count\r\n    count=0\r\n    for i in range(L,R+1):\r\n        if A[i]%N!=0:\r\n            count+=1\r\n    return count\r\n\r","votes":null},{"text":"\r\n    if (L>=R):\r\n        return -1\r\n    mid = (L+R)\/\/2\r\n    if (mid%A==0):\r\n        if (mid==L):\r\n            return -1\r\n        else:\r\n            return count_no(A,N,L,mid-1)\r\n    if (mid==N):\r\n        return A\r\n    elif (mid<N):\r\n        return count_no(A,N,mid+1,R)\r\n    else:\r\n        return count_no(A,N,L,mid-1)\r\nA,N,L,R = map(int,input().split())\r\nprint(count_no(A,N,L,R))\r\n\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    if(N==1):\r\n            return L\r\n    if(N==2):\r\n            return L+1\r\n    if(N==3):\r\n            return L+2\r\n    if(N==4):\r\n            return L+3\r\n    if(N==5):\r\n            return L+4\r\n    if(N==6):\r\n            return L+5\r\n    if(N==7):\r\n            return L+6\r\n    if(N==8):\r\n            return L+7\r\n    if(N==9):\r\n            return L+8\r\n    if(N==10):\r\n            return L+9\r\n    if(N==11):\r\n            return L+10\r\n    if(N==12):\r\n            return L+11\r\n    if(N==13):\r\n            return L+12\r\n    if(N==14):\r\n            return L+13\r\n    if(N==15):\r\n            return L+14\r\n    if(N==16):\r\n            return L+15\r\n    if(N==17):\r\n            return L+16\r\n    if(N==18):\r\n            return L+17\r\n    if(N==19):\r\n            return L+18\r\n    if(N==20):\r\n            return L+19\r\n    if(N==21):\r\n            return L+20\r\n    if(N==22):\r\n            return L+21\r\n    if(N==23):\r\n            return L+22\r\n    if(N==24):\r\n            return L+23\r\n    if(N==25):\r\n            return L+24\r\n    if(N==26):\r\n            return L+25\r\n    if(N==27):\r\n            return L+26\r\n    if(","votes":null},{"text":"\r\n    # code here\r\n    # A is the array and N is the number of elements in the array.\r\n    # L is the lower bound and R is the upper bound.\r\n    # Return the Nth number in the sequence.\r\n    \r\n    # find count of the given number in the array\r\n    count = 0\r\n    for i in range(N):\r\n        if A[i]%L == 0:\r\n            count += 1\r\n    \r\n    # find the sum of elements of the array\r\n    S = 0\r\n    for i in range(N):\r\n        S = S + A[i]\r\n    \r\n    # find the nth number\r\n    nth = (N-count)*L + S\r\n    \r\n    return nth\r\n    \r\n    \r\nA = [4, 2, 2, 5, 2]\r\nN = len(A)\r\nL = 2\r\nR = 5\r\nprint(\"","votes":null},{"text":"\r\n    #print(A,N,L,R)\r\n    n = N\r\n    while(n>0):\r\n        if((A[n-1]%L!=0) and (A[n-1]%R!=0)):\r\n            return A[n-1]\r\n        n = n-1\r\n    return None\r\n\r","votes":null},{"text":"\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n  ","votes":null},{"text":"\r\n    return A[N]\r\n\r\nA = [1, 2, 2, 4, 2, 2, 3, 4, 3, 4, 6, 2]\r\nN = 10\r\nL = 2\r\nR = 4\r\n\r\nprint(count_no(A,N,L,R))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if N > A[R]-A[L]:\r\n        return None\r\n    if N == A[R]-A[L]:\r\n        return R\r\n    if N == 1:\r\n        return L\r\n    \r\n    if N%(A[R]-A[L]) == 0:\r\n        return None\r\n        \r\n    i = 0\r\n    j = 0\r\n    while(True):\r\n        if (A[j]-A[i])%(A[R]-A[L]) == 0:\r\n            j = j+1\r\n            continue\r\n        if (A[j]-A[i])%(A[R]-A[L]) != 0:\r\n            if j-i == N-1:\r\n                return j\r\n            if j-i < N-1:\r\n                i = j\r\n                j = j+1\r\n                continue\r\n            if j-i > N-1:\r\n                return None\r\n\r\n\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, ","votes":null},{"text":"\r\n    if N > 1:\r\n        for i in range(L,R+1):\r\n            if A[i]%N!=0:\r\n                return i\r\n\r\n    else:\r\n        for i in range(L,R+1):\r\n            if A[i]%N==0:\r\n                return i\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [2,4,8,12,16,20,24,28,32]\r\n    N = 4\r\n    L = 0\r\n    R = 8\r\n    print(\"The nth non-multiple of N is: \",count_no(A,N,L,R))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(N)\r\nSpace Complexity: O(1)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    nth = 1\r\n    num = A\r\n    \r\n    while nth <= N:\r\n        if num % L != 0 and num % R != 0:\r\n            nth += 1\r\n            num += 1\r\n            \r\n    return num\r\n\r\nA = int(input(\"Enter the starting number: \"))\r\nN = int(input(\"Enter the number of","votes":null},{"text":"\r\n    #code here\r\n    i = 1\r\n    while i <= N:\r\n        if A[i-1] % L != 0 and A[i-1] % R != 0:\r\n            N = N-1\r\n        i += 1\r\n    return A[N]\r\n    \r\n    \r\n    \r","votes":null},{"text":"\r\n    \r\n    if L == R:\r\n        return L\r\n    \r\n    elif L%A != 0:\r\n        return L\r\n    \r\n    elif N == 1:\r\n        return L\r\n    \r\n    else:\r\n        return count_no(A,N-1,L+1,R)\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    count=0\r\n    for i in range(L,R+1):\r\n        if A[i]%N!=0:\r\n            count+=1\r\n            if count==N:\r\n                return A[i]\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for no in range(L,R+1):\r\n        if no%A!=0:\r\n            count+=1\r\n        if count","votes":null},{"text":"\r\n    #code here\r\n    \r\n    num=0\r\n    for i in range(L,R+1):\r\n        if A[i]%N!=0:\r\n            num+=1\r\n            if num==N:\r\n                return i\r\n    return -1\r\n\r\nif __name__ == '__main__':\r\n    L = int(input())\r\n    R = int(input())\r\n    N = int(input())\r\n    A = input()\r\n    A=A.split()\r\n    A = list(map(int,A))\r\n    print(count_no(A,N,L,R))\r\n\r\n'''\r\nSample Input 1:\r\n5\r\n11\r\n2\r\n1 2 4 6 8\r\n\r\nSample Output 1:\r\n5\r\n\r\nSample Input 2:\r\n5\r\n11\r\n2\r\n3 5 7 9 11\r\n\r\nSample Output 2:\r\n-1\r\n\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n'''\r\n\r\n# --------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    # Code Here\r\n    temp=[]\r\n    for i in range(L,R+1):\r\n        if A[i]%N!=0:\r\n            temp.append(A[i])\r\n    return temp\r\n\r\n# { \r\n#  Driver Code Starts\r\n# Initial Template for Python 3\r\n\r\nif __name__ == '__main__':\r\n    T=int(input())\r\n    for i in range(T):\r\n        n,l,r=map(int,input().split())\r\n        A=list(map(int,input().split()))\r\n        # Code starts here\r\n        ans=count_no(A,n,l,r)\r\n        print(*ans)\r\n\r\n# Contributed by  :","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if A[i]%N !=0:\r\n            count+=1\r\n        if count == N:\r\n            return i\r\n\r\n\r\n\r\nA=[1,2,3,4,5,6,7,8,9,10]\r\nN=5\r\nL=0\r\nR=9\r\nprint(count_no(A,N,L,R))\r\n\r","votes":null},{"text":"\r\n    \r\n    B = [i for i in range(A,L+1) if i%N!=0]\r\n    return B[R-1]\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(N,L+1):\r\n        if i % A != 0:\r\n            return i\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # code here\r\n    \r\n    for i in range(L,R+1):\r\n        if A[i]%N != 0:\r\n            return i\r\n    return -1\r\n\r\nA = [1, 2, 4, 5, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\r\nN = 2\r\nL = 1\r\nR = 100\r\nprint(count_no(A,N,L,","votes":null},{"text":"\r\n    i = A\r\n    count = 0\r\n    while (i <= R):\r\n        if (i%N != 0):\r\n            count += 1\r\n        i += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    l=L\r\n    r=R\r\n    while l<=r:\r\n        m=l+(r-l)\/\/2\r\n        if A[m]%N==0:\r\n            l=m+1\r\n        else:\r\n            r=m-1\r\n    return l\r\n\r\n\r\nA=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\r\nN=2\r\nL=0\r\nR=30\r\nprint(count_no(A,N,L,R))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # your code goes here\r\n    # return the count\r\n    return 0\r\n    \r\n\r\n#Taking Input using Fast I\/O method\r\n#contest = int(input())\r\n#for i in range(contest):\r\n#    n , l , r = [int(e) for e in input().split()]\r\n#    count = count_no(n,l,r)\r\n#    print(count)\r\n\r\n#Taking Input using list comprehension method\r\ncontest = int(input().strip())\r\nfor i in range(contest):\r\n    n , l , r = [int(e) for e in input().split()]\r\n    count = count_no(n,l,r)\r\n    print(count)\r\n","votes":null},{"text":"\r\n    li = []\r\n    for i in range(A,B+1):\r\n        if i%N!=0:\r\n            li.append(i)\r\n    return li[L-1:R]\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if N > 1:\r\n        if L == R:\r\n            return A[L]\r\n        else:\r\n            mid = (L + R) \/\/ 2\r\n            if A[mid] % N == 0:\r\n                return count_no(A, N, L, mid)\r\n            else:\r\n                return count_no(A, N, mid+1, R)\r\n    else:\r\n        return A[R]\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    N = 6\r\n    L = 0\r\n    R = 9\r\n    print(count_no(A,N,L,R))\r\n\r\n### OUTPUT:\r\n# 10\r\n\r\n### EXPLANATION:\r\n# If we sort the array, then we get the following sequence:\r\n# 1 2 3 4 5 6 7 8 9 10\r\n# If the number of multiples is 6, then the following numbers are multiples of 6:\r\n# 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126\r\n# So, the 11th number which is not multiple of 6 is 126.\r\n# That is why the output is 126.\r\n\r\n### Time and Space Complexity Analysis:\r\n# Time Complexity: O(log(N))\r\n# Space Complexity: O(1)\r\n# The time complexity is O(log(N)) because we are recursively dividing the arra","votes":null},{"text":"\r\n    # Code here\r\n    if (L>R):\r\n        return 0\r\n    elif L==R:\r\n        return 1\r\n    else:\r\n        mid = (L+R)\/\/2\r\n        if mid%A != 0:\r\n            return 1+count_no(A,N,L,mid)\r\n        else:\r\n            return count_no(A,N,mid+1,R)\r\n\r\n    \r\nif __name__ == '__main__':\r\n    T = int(input())\r\n    for i in range(T):\r\n        N, A, L, R =","votes":null},{"text":"\r\n    \r\n    if L==R:\r\n        return A[L]%N\r\n    else:\r\n        mid=L+(R-L)\/\/2\r\n        if (A[mid]%N)!=0:\r\n            return A[mid]\r\n        elif (A[mid]%N)==0:\r\n            if A[mid+1]%N!=0:\r\n                return A[mid+1]\r\n            else:\r\n                return A[mid-1]\r\n\r\nT=int(input())\r\nfor i in range(T):\r\n    N,L,R=map(int,input","votes":null},{"text":"\r\n    # Code here\r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if A[i]%N != 0:\r\n            count = count + 1\r\n            if count == R-L+1:\r\n                return A[i]\r\n\r\n\r\n\r\n\r\n\r\n#{  \r\n#  Driver Code Starts\r\nif __name__ == '__main__':\r\n    T=int(input())\r\n    for i in range(T):\r\n        N,L,R = map(int, input().split())\r\n        A = list(map(int, input().strip().split()))\r\n        print(count_no(A,N,L,R))\r\n# } Driver Code Ends\r\n","votes":null},{"text":"\r\n    num = 0\r\n    for i in range(A,B):\r\n        if i%L!=0:\r\n            num+=1\r\n            if num==N:\r\n                return i\r\n    return\r\n\r\n\r\nif __name__ == '__main__':\r\n    A,B,L,R,N = map(int,input().split())\r\n    print(count_no(A,N,L,R))\r\n\r\n\r\n# Given a sequence of numbers, find the nth number such that it is not multiple of given number.\r\n\r\n# Input Format\r\n\r\n# The first line of input contains two integers A and B denoting the sequence.\r\n# The second line of input contains two integers L and R denoting the numbers.\r\n# The third line contains an integer N denoting the number.\r\n\r\n# Constraints\r\n\r\n# 1 <= A <= 10^6\r\n# 1 <= B <= 10^6\r\n# 1 <= L <= R <= 10^9\r\n# 1 <= N <= 10^18\r\n\r\n# Output Format\r\n\r\n# Print the nth number which is not a multiple of L.\r\n\r\n# Sample Input\r\n\r\n# 1 9\r\n# 2 6\r\n# 3\r\n# Sample Output\r\n\r\n# 4\r\n# Explanation\r\n\r\n# At the 3rd position we have 4 which is not multiple of 2. So the answer is 4.\r\n\r\n# Hints\r\n\r\n# Count the number of numbers which are not multiple of L.\r\n# If the number of numbers is less than N then print -1.\r\n# If the number of numbers is greater than N then print the nth number which is not multiple of L.\r\n\r\n# Solution\r\n\r\n\r","votes":null},{"text":"\r\n    # code starts here\r\n    \r\n    L = A[L]\r\n    R = A[R]\r\n    \r\n    count = 0\r\n    \r\n    for i in range(L,R+1):\r\n        if i%N != 0:\r\n            count = count + 1\r\n            \r\n    return count\r\n\r\nvotes":null},{"text":"\r\n    c = 0\r\n    for i in range(L,R+1):\r\n        if A[i]%N!=0:\r\n            c += 1\r\n    return c\r\n\r","votes":null},{"text":"\r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if i%A != 0:\r\n            count+=1\r\n            if count == N:\r\n                return i\r\n    return -1\r\n\r\n\r\nA,N,L,R = [int(x) for x in input().split()]\r\n\r\nprint(count_no(A,N,L,R))\r\n\r\n\r\n# Problem Statement :\r\n\r\n# You are given a sequence of numbers from L to R (both inclusive) and a number A. You need to find the nth number in the sequence which is not a multiple of A.\r\n\r\n# Input Format :\r\n# The first line contains L, R and A separated by a space.\r\n\r\n# Output Format :\r\n# Print the nth number in the sequence which is not a multiple of A.\r\n\r\n# Constraints :\r\n# 1 <= N <= 1000000000\r\n# L <= R <= 1000000000\r\n# 1 <= A <= 1000000000\r\n\r\n# Sample Input 1 :\r\n# 1 5 2\r\n\r\n# Sample Output 1 :\r\n# 3\r\n\r\n# Sample Input 2 :\r\n# 2 6 2\r\n\r\n# Sample Output 2 :\r\n# 4\r\n\r\n# Sample Input 3 :\r\n# 1 6 3\r\n\r\n# Sample Output 3 :\r\n# 5\r\n\r\n# Sample Input 4 :\r\n# 1 10 3\r\n\r\n# Sample Output 4 :\r\n# 9\r\n\r\n# Sample Input 5 :\r\n# 1 10 5\r\n\r\n# Sample Output 5 :\r\n# 10\r\n\r\n# Solution :\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    if N==0:\r\n        return A[0]\r\n    \r\n    for i in range(len(A)):\r\n        if A[i]%L!=0 and A[i]%R!=0:\r\n            if N==1:\r\n                return A[i]\r\n            N-=1\r\n    return -1\r\n\r","votes":null},{"text":"\r\n    count = 1\r\n    if (N<1 or N>100000):\r\n        return -1\r\n    if (A<1 or A>100000):\r\n        return -1\r\n    if (L<1 or L>100000):\r\n        return -1\r\n    if (R<1 or R>100000):\r\n        return -1\r\n    if (L>R):\r\n        return -1\r\n    count = 0\r\n    for i in range(L,R+1):\r\n        if (i%A!=0):\r\n            count = count + 1\r\n            if (count==N):\r\n                return i\r\n    return -1\r\n\r\nprint(count_no(2,1,1,10))\r\nprint(count_no(7,2,1,10))\r\nprint(count_no(7,1,1,10))\r\nprint(count_no(7,1,1,1000))\r\nprint(count_no(7,1,1,100000))\r\nprint(count_no(7,1,1,1000000))\r\nprint(count_no(7,1,1,10000000))\r\nprint(count_no(7,1,1,20000000))\r\nprint(count_no(7,1,1,100000000))\r\nprint(count_no(7,1,1,1000000000))\r\nprint(count_no(10,1,1,10))\r\nprint(count_no(10,1,1,1000))\r\nprint(count_no(10,1,1,100000))\r\nprint(count_no(10,1,1,100000","votes":null},{"text":"\r\n    count=0\r\n    for i in range(L,R+1):\r\n        if A[i]%N!=0:\r\n            count+=1\r\n        if count==N:\r\n            return A[i]\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nN = 15\r\nL = 0\r\nR = 19\r\nprint(count_no(A,N,L,R))\r\n\r\n\r\n# 2.Find the Kth largest element in an array\r","votes":null}],"time":{"count":13.0,"avg":136865.7864615385,"std":31127.1955099855,"cov":0.2274286096}}
{"id":576,"question":"def is_Sub_Array(A,B,n,m):\r\n    \"\"\"Write a python function to check whether an array is subarray of another or not.\"\"\"","answers":[{"text":"\r\n    if m>n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r","votes":94637.536},{"text":"\r\n    for i in range(n+1-m):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r","votes":96792.284},{"text":"\r\n    if n<m:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r","votes":97634.228},{"text":"\r\n    if len(B) > len(A):\r\n        return False\r\n    for i in range(len(A)-len(B)+1):\r\n        flag = True\r\n        for j in range(len(B)):\r\n            if A[i+j] != B[j]:\r\n                flag = False\r\n        if flag:\r\n            return True\r\n    return False\r\n\r","votes":102336.772},{"text":"\r\n    if n>m:\r\n        return False\r\n    for i in range(len(A)):\r\n        for j in range(i+1,len(A)+1):\r\n            if A[i:j]==B:\r\n                return True\r\n    return False\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":104530.36},{"text":"\r\n    if n<m:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":104535.904},{"text":"\r\n    \r\n    for i in range(n-(m-1)):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r","votes":104576.152},{"text":"\r\n    if m>n:\r\n        return False\r\n    for i in range(0,n-m+1):\r\n        for j in range(0,m):\r\n            if A[i+j]!=B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n\r","votes":108146.036},{"text":"\r\n    for i in range(0,n-m+1):\r\n        j = 0\r\n        while j < m:\r\n            if A[i+j] != B[j]:\r\n                break\r\n            j += 1\r\n        if j == m:\r\n            return True\r\n    return False\r\n\r","votes":110693.024},{"text":"\r\n    \r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\nA = [11, 22, 33, 44, 55, 66, 77]\r\nB = [33, 44, 55]\r\nn = len(A)\r\nm = len(B)\r\nif is_Sub_Array(A, B, n, m):\r\n    print(\"YES\")\r\nelse:\r\n    print(\"NO\")\r\n\r\n# Output:\r\n# YES\r\n\r\n# Explanation:\r\n# The subarray [33, 44, 55] is found in the array A.\r\n\r\n\r\n\r","votes":111339.496},{"text":"\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r","votes":113382.44},{"text":"\r\n    \r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":113558.432},{"text":"\r\n    # code starts here\r\n    c=0\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j]!=B[j]:\r\n                break\r\n        else:\r\n            c+=1\r\n    return c\r\n    \r\n    \r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":114176.548},{"text":"\r\n    if m>n:\r\n        return False\r\n    l=0\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":115713.404},{"text":"\r\n    if m>n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":116185.092},{"text":"\r\n    if n > m: return False\r\n    for i in range(n):\r\n        if A[:i+1] == B[:i+1]:\r\n            return True\r\n    return False\r\n\r","votes":120056.624},{"text":"\r\n    if n<m:\r\n        return False\r\n    start=0\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j]!=B[j]:\r\n                break\r\n            if j==m-1:\r\n                return True\r\n            if j!=0 and A[i+j]==B[j]:\r\n                start=i\r\n    return False\r\n\r","votes":121045.264},{"text":"\r\n    if len(A)<len(B):\r\n        return False\r\n    for i in range(len(A)-len(B)+1):\r\n        for j in range(len(B)):\r\n            if A[i+j]!=B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n\r","votes":123784.336},{"text":"\r\n    i=0\r\n    j=0\r\n    while i<n and j<m:\r\n        if A[i]==B[j]:\r\n            j+=1\r\n        i+=1\r\n    if j==m:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nif __name__=='__main__':\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [2, 4, 5]\r\n    n=len(A)\r\n    m=len(B)\r\n    print(is_Sub_Array(A,B,n,m))\r\n\r\n    \"\"\"\r\n    Input 1:\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [2, 4, 5]\r\n    \r\n    Output 1:\r\n    True\r\n\r\n    Input 2:\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [1, 2]\r\n\r\n    Output 2:\r\n    True\r\n\r\n    Input 3:\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [2, 3, 4]\r\n\r\n    Output 3:\r\n    False\r\n\r\n    Input 4:\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [1, 2, 3]\r\n\r\n    Output 4:\r\n    False\r\n    \"\"\"\r\n","votes":125050.436},{"text":"\r\n    # Your code here\r\n    \r\n    if(n>m):\r\n        return False\r\n    \r\n    for i in range(n):\r\n        if(A[i]==B[0]):\r\n            if(B[i]==A[i]):\r\n                for j in range(1,m):\r\n                    if(A[i+j]==B[j]):\r\n                        continue\r\n                    else:\r\n                        return False\r\n                return True\r\n    return False\r\n\r\nA = [1, 2, 3]\r\nB = [2, 3]\r\nn = 3\r\nm = 2\r\n\r\nprint(is_Sub_Array(A, B, n, m))\r\n\r\n\r\n\r\n\r\n\r","votes":125352.636},{"text":"\r\n    if m==0:\r\n        return True\r\n    if m>n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\n# Driver code\r\nA = [1,2,3]\r\nB = [1,2]\r\nn = len(A)\r\nm = len(B)\r\n\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\n\r\n\r\n\r","votes":125624.496},{"text":"\r\n    if n>m:\r\n        return False\r\n    i=0\r\n    for i in range(m-n+1):\r\n        if A[i:i+n]==B:\r\n            return True\r\n    return False\r\n\r","votes":129417.168},{"text":"\r\n\r\n    # Your code here\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    B = [2, 3, 7]\r\n    n = len(A)\r\n    m = len(B)\r\n    print(is_Sub_Array(A, B, n, m))\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":130662.06},{"text":"\r\n    count=0\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            if j == m-1:\r\n                count+=1\r\n    return count\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5, 6, 7]\r\n    B = [4, 5, 6]\r\n    n = len(A)\r\n    m = len(B)\r\n    print(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n    \r\n    \r\n# Time Complexity: O(m*n) \r\n# Space Complexity: O(1) \r\n\r\n# Sample Input 1:\r\n# A = [1, 2, 3, 4, 5, 6, 7]\r\n# B = [4, 5, 6]\r\n# Sample Output 1:\r\n# 1\r\n\r\n# Sample Input 2:\r\n# A = [1, 2, 3, 4, 5, 6, 7]\r\n# B = [1, 2]\r\n# Sample Output 2:\r\n# 2\r\n\r\n# Sample Input 3:\r\n# A = [1, 2, 3, 4, 5, 6, 7]\r\n# B = [1, 2, 3, 4, 5, 6, 7]\r\n# Sample Output 3:\r\n# 7\r\n\r\n# Sample Input 4:\r\n# A = [1, 2, 3, 4, 5, 6, 7]\r\n# B = [1, 2, 3]\r\n# Sample Output 4:\r\n# 0\r\n\r\n# Sample Input 5:\r\n# A = [1","votes":131278.784},{"text":"\r\n    \r\n    if m>n:\r\n        return False\r\n    \r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\n\r","votes":133088.524},{"text":"\r\n    \r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\n    \r","votes":133881.88},{"text":"\r\n    \r\n    if n > m:\r\n        return False\r\n    \r\n    for i in range(m-n+1):\r\n        if A[i:i+n] == B:\r\n            return True\r\n    return False\r\n\r\n\r","votes":139014.944},{"text":"\r\n    if n > m:\r\n        return False\r\n    if n == m:\r\n        return True\r\n    for i in range(n,m):\r\n        if A[i] == B[0]:\r\n            for j in range(1,m):\r\n                if A[i-n+j] == B[j]:\r\n                    continue\r\n                else:\r\n                    break\r\n            if j == m:\r\n                return True\r\n    return False\r\n\r\n\r","votes":139084.052},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j]!=B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    B = [2, 4, 6, 8]\r\n    n = len(A)\r\n    m = len(B)\r\n    if is_Sub_Array(A, B, n, m):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":140858.872},{"text":"\r\n    if n < m:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r","votes":141069.364},{"text":"\r\n    if m>n:\r\n        return False\r\n\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\nA=[1,2,3,4,5,6,7,8,9]\r\nB=[3,4,5]\r\nn=len(A)\r\nm=len(B)\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r","votes":142634.968},{"text":"\r\n\r\n    # If the m is larger than n, then return False.\r\n    if m > n:\r\n        return False\r\n\r\n    # If the m is equal to n, then return True if the array A and array B\r\n    # are equal.\r\n    if m == n and A == B:\r\n        return True\r\n\r\n    # If the m is smaller than n, then check for A[0...m-1] is subarray of B\r\n    # or not.\r\n    if A[:m] == B[:m]:\r\n        return True\r\n\r\n    # If the A[0...m-1] is not subarray of B, then check for A[1...m] is\r\n    # subarray of B or not.\r\n    return is_Sub_Array(A[1:], B, n-1, m)\r\n\r\n\r","votes":144117.288},{"text":"\r\n\r\n    for i in range(n-m+1):\r\n        flag = 0\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                flag = 1\r\n                break\r\n        if flag == 0:\r\n            return True\r\n    return False\r\n\r\n# Driver code\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nB = [3, 4, 5]\r\nn = len(A)\r\nm = len(B)\r\n\r\nif is_Sub_Array(A,B,n,m) == True:\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\n\r","votes":144380.408},{"text":"\r\n    # Your code goes here\r\n    if(m>n):\r\n        return False\r\n    for i in range(n-m+1):\r\n        if(B==A[i:i+m]):\r\n            return True\r\n    return False\r\n\r","votes":145912.572},{"text":"\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\nA=[1,2,3,4,5]\r\nB=[1,2,3]\r\nn=len(A)\r\nm=len(B)\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n# Given an array of integers, find the pair of adjacent elements that has the largest sum. If the list is empty, return 0.\r\n\r","votes":149253.884},{"text":"\r\n    \r\n    if m>n:\r\n        return False\r\n    \r\n    for i in range(n-m+1):\r\n        \r\n        if A[i:i+m] == B:\r\n            return True\r\n        \r\n    return False\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":149872.452},{"text":"\r\n    \r\n    if n>m:\r\n        return False\r\n    \r\n    for i in range(len(A)-n+1):\r\n        if A[i:i+n]==B:\r\n            return True\r\n    \r\n    return False\r\n\r\n\r","votes":151248.292},{"text":"\r\n    j=0\r\n    for i in range(n-m+1):\r\n        if(A[i:i+m]==B):\r\n            return True\r\n    return False\r\n\r\nA = [9, 2, 8, 3, 4, 1, 5, 6, 7]\r\nB = [2, 3, 4, 1]\r\nn = len(A)\r\nm = len(B)\r\nif(is_Sub_Array(A,B,n,m) == True):\r\n    print(\"YES\")\r\nelse:\r\n    print(\"NO\")\r\n\r\n#Output:\r\n\"\"\" \r\nYES\r\n\"\"\"\r\n#Time Complexity: O(n-m+1)\r\n#Space Complexity: O(1)\r\n\r\n#Reference: https:\/\/www.geeksforgeeks.org\/python-program-to-check-whether-an-array-is-subarray-of-another-or-not\/\r\n\r\n\r\n# -------------------------------------------------------------------------------------------\r\n\r\n# Problem 1:\r","votes":152337.824},{"text":"\r\n    \r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\nA = [1,2,3,4,5,6,7,8,9,10]\r\nB = [1,2,3,4,5,6]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n## ------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":152451.98},{"text":"\r\n    if len(A)<len(B):\r\n        return False\r\n    if len(A)==len(B):\r\n        return A==B\r\n    for i in range(len(A)-len(B)+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r","votes":154429.388},{"text":"\r\n    \"\"\"\r\n    Input:\r\n    A: array of integers\r\n    B: array of integers\r\n    n: size of first array\r\n    m: size of second array\r\n    Output:\r\n    boolean: True if B is subarray of A, else False\r\n    \"\"\"\r\n    \r\n    \r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\n\r","votes":156663.972},{"text":"\r\n    if m > n:\r\n        return False\r\n    for i in range(n - m + 1):\r\n        j = 0\r\n        while j < m and A[i + j] == B[j]:\r\n            j += 1\r\n        if j == m:\r\n            return True\r\n    return False\r\n\r","votes":163320.328},{"text":"\r\n    for i in range(len(A)-len(B)+1):\r\n        j=0\r\n        while j < len(B) and A[i+j] == B[j]:\r\n            j+=1\r\n        if j == len(B):\r\n            return True\r\n    return False\r\n\r","votes":163379.452},{"text":"\r\n    if m>n:\r\n        return False\r\n    i=0\r\n    while i<=n-m:\r\n        if A[i:i+m]==B:\r\n            return True\r\n        i+=1\r\n    return False\r\n\r\n\r\n\r\n# Driver code\r\nif __name__ == \"__main__\":\r\n    A = [2, 4, 5, 6, 8]\r\n    B = [2, 4, 6]\r\n    n = len(A)\r\n    m = len(B)\r\n    if is_Sub_Array(A, B, n, m):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n\r\n\r\n\"\"\"\r\nOutput :\r\n\r\nYes\r\n\"\"\"\r\n\r\n","votes":165739.116},{"text":"\r\n    #code here\r\n    if n>m:\r\n        return False\r\n    if n==m:\r\n        return A==B\r\n    l=0\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B[l:l+m]:\r\n            return True\r\n        l+=1\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    A = list(map(int, input().rstrip().split()))\r\n\r\n    m = int(input())\r\n\r\n    B = list(map(int, input().rstrip().split()))\r\n\r\n    result = is_Sub_Array(A, B, n, m)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n#!\/bin\/python3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n\r\n# Complete the is_Sub_Array function below.\r","votes":169673.044},{"text":"\r\n    if m>n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\n\r","votes":170819.536},{"text":"\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,2,3]\r\nn = len(A)\r\nm = len(B)\r\n\r\nif is_Sub_Array(A,B,n,m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r\n# Output:\r\n# Yes\r\n\r\n# Explanation:\r\n# The array [1,2,3] is a subarray of [1,2,3,4,5]\r\n\r\n# Alternate Solution:\r","votes":185421.544},{"text":"\r\n    \r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\n\r\nA = [1,2,3,4,5,6,7,8,9,10]\r\nB = [3,4,5,6]\r\n\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n# Output\r\n# True\r\n\r\n\r","votes":185828.108},{"text":"\r\n    \r\n    if m>n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\n\r\n\r\nA = [1,2,3,4,5,6]\r\nB = [1,2,3]\r\n\r\nn = len(A)\r\nm = len(B)\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r","votes":199174.7},{"text":"\r\n    \r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\nA = [1,2,3,4,5]\r\nB = [3,4,5]\r\nn = len(A)\r\nm = len(B)\r\n\r\nprint(\"A: \",A)\r\nprint(\"B: \",B)\r\nprint(\"A contains B? \",is_Sub_Array(A,B,n,m))\r\n\r\n# Time Complexity: O(n*m)\r\n# Space Complexity: O(1)\r\n\r\n\r\n\r\n\r\n#-------------------------------------------------------------------------------------------------------------------------\r\n\r","votes":201738.476},{"text":"\r\n    if B==[]:\r\n        return True\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\nA = [1,2,3,4,5,6,7,8,9,10]\r\nB = [5,6,7]\r\nn = len(A)\r\nm = len(B)\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r","votes":207681.596},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n            if j == m-1:\r\n                return True\r\n    return False\r\n\r\nA = [1,2,3,4,5,4,3,2,1]\r\nB = [1,2,3,4,5,6,7]\r\nm = len(A)\r\nn = len(B)\r\nprint(is_Sub_Array(A,B,m,n))\r\n\r\n# Question 13\r\n\r","votes":211313.592},{"text":"\r\n    if m==0:\r\n        return True\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nb = [2, 3, 4]\r\nn = len(a)\r\nm = len(b)\r\nif is_Sub_Array(a,b,n,m):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")\r\n\r","votes":216233.344},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if(A[i+j]!=B[j]):\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n\r\nA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\nB = [20, 30, 40]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":219600.16},{"text":"\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j] != B[j]:\r\n                break\r\n        else:\r\n            return True\r\n    return False\r\n\r","votes":225471.248},{"text":"\r\n    c=0\r\n    d=0\r\n    for i in range(n-m+1):\r\n        for j in range(m):\r\n            if A[i+j]!=B[j]:\r\n                break\r\n            else:\r\n                c+=1\r\n        if c==m:\r\n            d+=1\r\n            c=0\r\n    if d>0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nA=[1,2,3,4,5,6,7,8,9,10]\r\nB=[3,4,5]\r\nn=len(A)\r\nm=len(B)\r\nis_Sub_Array(A,B,n,m)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":231804.784},{"text":"\r\n    if n > m:\r\n        return False\r\n    if m == 0:\r\n        return True\r\n    for i in range(0,n-m+1):\r\n        if A[i:i+m] == B[:m]:\r\n            return True\r\n    return False\r\n\r\n\r","votes":237627.848},{"text":"\r\n    if n>m:\r\n        return False\r\n    \r\n    for i in range(0,m-n+1):\r\n        if A[i:i+n]==B:\r\n            return True\r\n    return False\r\n\r\nA = [1,2,3,4,5,6,7,8,9]\r\nB = [3,4,5]\r\nn=len(A)\r\nm=len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r","votes":270009.332},{"text":"\r\n    if n > m:\r\n        return False\r\n    if n == 0:\r\n        return False\r\n    if n == m:\r\n        return (A == B)\r\n    for i in range(n,m+1):\r\n        if A[i] == B[0]:\r\n            if is_Sub_Array(A,B,i,m):\r\n                return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [2, 3, 1, 4, 3]\r\n","votes":302624.9},{"text":"\r\n    \r\n    # Base Case\r\n    if m > n:\r\n        return False\r\n    \r\n    # Recursive Case\r\n    if A[0] == B[0]:\r\n        return is_Sub_Array(A[1:],B,n-1,m-1)\r\n    else:\r\n        return is_Sub_Array(A,B[1:],n,m-1)\r\n\r","votes":null},{"text":"\r\n    \r\n    # If total number of elements in B is more than A, then return False\r\n    if m > n:\r\n        return False\r\n    \r\n    # Create a hash table to store elements of array\r\n    # If any element is found in B more than once,\r\n    # then return False\r\n    h = {}\r\n    \r\n    for i in range(m):\r\n        if B[i] in h:\r\n            return False\r\n        else:\r\n            h[B[i]] = 1\r\n    \r\n    # If elements of B are found in A, then return True\r\n    for i in range(n - m + 1):\r\n        j = 0\r\n        while j < m:\r\n            if A[i + j] not in h:\r\n                break\r\n            j += 1\r\n        if j == m:\r\n            return True\r\n    \r\n    return False\r\n\r\nA = [1, 2, 3, 4, 5]\r\nB = [2, 3, 1, 4]\r\nm = len(B)\r\nn = len(A)\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n","votes":null},{"text":"\r\n    \r\n    if(n<m):\r\n        return False\r\n    \r\n    for i in range(n-m+1):\r\n        j=0\r\n        for j in range(m):\r\n            if(A[i+j]!=B[j]):\r\n                break\r\n        if(j==m-1):\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    for i in range(n-m):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\n\r\nA = [1, 2, 3, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\nB = [3, 12, 9, 5, 6, 7]\r\nn, m = len(A), len(B)\r\n\r\n# print(is_Sub_Array(A, B, n, m))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if n == m and A == B:\r\n        return True\r\n    \r\n    if n < m:\r\n        return False\r\n    \r\n    if A[n-1] == B[m-1]:\r\n        return is_Sub_Array(A,B,n-1,m-1)\r\n    \r\n    return is_Sub_Array(A,B,n,m-1)\r\n\r\n\r","votes":null},{"text":"\r\n    #Your code here\r\n    i = 0\r\n    j = 0\r\n    while i < n and j < m:\r\n        if A[i] == B[j]:\r\n            i += 1\r\n            j += 1\r\n        else:\r\n            i += 1\r\n    if j == m:\r\n        return True\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    #A = [2,4,7,8,11,13,14,15,16,17,18,19,20]\r\n    #B = [4,7,8,11,13,14]\r\n    A = [1,2,","votes":null},{"text":"\r\n    if m>n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7], 10, 4))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7], 10, 3))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7], 10, 2))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7], 10, 1))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7], 10, 0))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7], 10, -1))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7], 10, -2))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7], 10, -3))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7], 10","votes":null},{"text":"\r\n    \r\n    if(m>n):\r\n        return False\r\n    for i in range(n-m+1):\r\n        if(A[i:i+m]==B):\r\n            return True\r\n    return False\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    A = [1, 2, 3, 4, 5]\r\n    B = [1, 2, 3]\r\n    n = len(A)\r\n    m = len(B)\r\n    if (is_Sub_Array(A, B, n, m) == True):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n\r\n    A = [10, 20, 30, 40, 50]\r\n    B = [10, 20, 30]\r\n    n = len(A)\r\n    m = len(B)\r\n    if (is_Sub_Array(A, B, n, m) == True):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n\r\n    A = [10, 20, 30, 40, 50]\r\n    B = [10, 20, 30, 40, 50]\r\n    n = len(A)\r\n    m = len(B)\r\n    if (is_Sub_Array(A, B, n, m) == True):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n\r\n    A = [10, 20, 30, 40, 50]\r\n    B = [10, 20, 30, 40]\r\n    n = len(A)\r\n    m = len(B)\r\n    if (is_Sub_Array(A, B, n, m) == True):\r\n        print(\"Yes\")\r\n    else","votes":null},{"text":"\r\n    if len(B) > len(A):\r\n        return False\r\n    if len(B) == len(A):\r\n        return True\r\n    for i in range(n):\r\n        if A[i: i + len(B)] == B:\r\n            return True\r\n    return False\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Tests\r\n    A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    B = [1, 3, 5, 7, 9]\r\n    print(is_Sub_Array(A,B,10,5))\r\n\r\n    A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    B = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(is_Sub_Array(A,B,10,9))\r\n\r\n    A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\r\n    print(is_Sub_Array(A,B,10,10))\r\n\r\n    A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(is_Sub_Array(A,B,11,10))\r\n\r\n    A = [0, 1, 2, ","votes":null},{"text":"\r\n    if(n<m):\r\n        return False\r\n    for i in range(0,n-m+1):\r\n        if(A[i:i+m]==B):\r\n            return True\r\n    return False\r\n\r\n\r\n# Driver code\r\nA = [1, 2, 3, 4, 5]\r\nB = [3, 4]\r\nn = len(A)\r\nm = len(B)\r\n\r\nif (is_Sub_Array(A, B, n, m)):","votes":null},{"text":"\r\n    for i in range(n-m):\r\n        flag=True\r\n        for j in range(m):\r\n            if A[i+j]!=B[j]:\r\n                flag=False\r\n                break\r\n        if flag:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__=='__main__':\r\n    \"\"\"\r\n    Driver code to test the above function\r\n    \"\"\"\r\n    A = [2, 3, 1, 4, 0]\r\n    B = [1, 4, 0]\r\n    n = len(A)\r\n    m = len(B)\r\n    if is_Sub_Array(A,B,n,m):\r\n        print('Array A is a subarray of B')\r\n    else:\r\n        print('Array A is not a subarray of B')\r\n\r\n\r\n\"\"\"\r\nOutput:\r\nArray A is a subarray of B\r\n\"\"\"\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\nA = [1,2,3,4,5,6,7,8]\r\nB = [4,5,6]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_","votes":null},{"text":"\r\n    if n > m:\r\n        return False\r\n    for i in range(n-1):\r\n        if A[i] > A[i+1]:\r\n            return False\r\n\r\n    for i in range(m-n+1):\r\n        if A[i] > B[i]:\r\n            return False\r\n        elif A[i] == B[i]:\r\n            if A[i+n-1] == B[i+n-1]:\r\n                return True\r\n            elif A[i+n-1] < B[i+n-1]:\r\n                return False\r\n            else:\r\n                continue\r\n        else:\r\n            continue\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # A=list(map(int,input().split()))\r\n    # B=list(map(int,input().split()))\r\n\r\n    # n=len(A)\r\n    # m=len(B)\r\n\r\n    i=0\r\n    j=0\r\n\r\n    while i<n and j<m:\r\n        if A[i]==B[j]:\r\n            i+=1\r\n            j+=1\r\n        else:\r\n            i+=1\r\n\r\n    if j==m:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Main\r\nA=[1,2,3,4,5]\r\nB=[2,3,4]\r\nn=len(A)\r\nm=len(B)\r\n\r\nif is_Sub_Array(A,B,n,m):","votes":null},{"text":"\r\n    if n == 0 :\r\n        return True\r\n    if n < m:\r\n        return False\r\n    if A[0] == B[0]:\r\n        return is_Sub_Array(A[1:],B[1:],n-1,m-1)\r\n    else:\r\n        return is_Sub_Array(A[1:],B,n-1,m)\r\n\r\nif __name__ == '__main__':\r\n    A = [1,2,3,4,5]\r\n    B = [2,3]\r\n   ","votes":null},{"text":"\r\n    i = 0\r\n    j = 0\r\n    while i < n and j < m:\r\n        if A[i] == B[j]:\r\n            i+=1\r\n            j+=1\r\n        else:\r\n            i=i-j+1\r\n            j=0\r\n    if i<n and j>=m:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    for i in range(n-m+1):\r\n        #print(A[i:i+m])\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,2,3]\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,2,3,4,5]\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,2,4,5]\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,2,3,4,6]\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,2,3,4]\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,2,3,4,5,6]\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\n# A = [1,2,3,4,5,6]\r\n# B = [1,2,3,4,5]\r\n# print(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\nA = [1,2,3,4,5,6]\r\nB = [1,2,3,4]\r\nprint(is_Sub_Array(A","votes":null},{"text":"\r\n\r\n    for i in range(n-m+1):\r\n        if all(x==y for x,y in zip(A[i:i+m],B)):\r\n            return True\r\n    return False\r\n\r\nA = [1, 2, 3, 4, 5]\r\nB = [1, 2, 3]\r\nprint(is_Sub_Array(A,B,5,3))\r\n\r\nA = [1,2,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,","votes":null},{"text":"\r\n    if(m > n):\r\n        return False\r\n    for i in range(n+1-m):\r\n        if(is_Sub(A[i:],B)):\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    \r\n    if n<m:\r\n        return False\r\n    \r\n    result=False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            result=True\r\n            break\r\n    return result\r\n\r\narr1=[1,2,3,4,5,6,7,8,9,10]\r\narr2=[2,3,4]\r\n\r\nn=len(arr1)\r\nm=len(arr2)\r\n\r\nprint(is_Sub_Array(arr1,arr2,n,m))\r\n\r\n#Time Complexity: O(n*m)\r\n#Space Complexity: O(1)\r\n\r\n\"\"\"\"\r\n\r","votes":null},{"text":"\r\n    if n<m:\r\n        return False\r\n    for i in range(0,n-m+1):\r\n        if (A[i:i+m]==B[:]).all():\r\n            return True\r\n    return False\r\n\r","votes":null},{"text":"\r\n    # If the second array is empty, then the answer is TRUE\r\n    if m == 0:\r\n        return True\r\n\r\n    # If the first array is empty, then the answer is FALSE\r\n    if n == 0:\r\n        return False\r\n\r\n    # If the last element of the first array is not same as the first element of the second array,\r\n    # then the answer is FALSE\r\n    if A[n-1] != B[m-1]:\r\n        return False\r\n\r\n    # The answer is TRUE if we find the first element of the second array in the first array\r\n    idx = -1\r\n    for i in range(n-1, -1, -1):\r\n        if A[i] == B[m-1]:\r\n            idx = i\r\n            break\r\n\r\n    # If we did not find the first element of the second array in the first array, then the answer is FALSE\r\n    if idx == -1:\r\n        return False\r\n\r\n    # If we find the first element of the second array in the first array, then check for the remaining elements of the second array in the first array\r\n    # If we do not find the remaining elements of the second array in the first array, then the answer is FALSE\r\n    i = m-1\r\n    while i > 0:\r\n        if A[idx+1:idx+1+i] == B[:i]:\r\n            return True\r\n        i -= 1\r\n    return False\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nB = [1, 2, 3, 4, 5, 6, 7]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\nA = [1, 2, 3, 4, 5, 6, 7, 8","votes":null},{"text":"\r\n    \r\n    if m>n:\r\n        return False\r\n    \r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n    \r\nif __name__=='__main__':\r\n    A=list(map(int,input().split()))\r\n    B=list(map(int,input().split()))\r\n    n=len(A)\r\n    m=len(B)\r\n    if is_Sub_Array(A,B,n,m):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n\r\n\"\"\"\r\nInput:\r\n1 2 3 4 5 6 7 8 9 10\r\n1 2 3 4\r\nOutput:\r\nYes\r\n","votes":null},{"text":"\r\n    if n<m:\r\n        return False\r\n    else:\r\n        for i in range(n):\r\n            if B[i]==A[i]:\r\n                flag=True\r\n            else:\r\n                flag=False\r\n                break\r\n        if flag==True:\r\n            for i in range(m,n):\r\n                if B[i]==A[i-m]:\r\n                    flag=True\r\n                else:\r\n                    flag=False\r\n                    break\r\n        if flag==True:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r\nA = [1,2,3,4,5,6]\r\nB = [3,4,5,6]\r\n\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\n# Output: True\r\n\r\n\r\nA = [1,2,3,4,5,6]\r\nB = [3,4,5]\r\n\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\n# Output: True\r\n\r\n\r\nA = [1,2,3,4,5,6]\r\nB = [3,4,5,6,7]\r\n\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\n# Output: False\r\n\r\n\r\nA = [1,2,3,4,5,6]\r\nB = [3,4,5,6,7,8]\r\n\r\nprint(is_Sub_Array(A,B,len(A),len(B)))\r\n\r\n# Output: False\r\n\r\n\r\nA = [1,2,3,4,5,6]\r\nB = [1,2,3,4,5,6]\r\n\r\nprint(is_Sub_Array(A,B,len(A),len(B))","votes":null},{"text":"\r\n    if m>n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        j=0\r\n        while j<m and A[i+j]==B[j]:\r\n            j+=1\r\n        if j==m:","votes":null},{"text":"\r\n    if (m>n):\r\n        return False\r\n\r\n    for i in range(0,n-m+1):\r\n        if (A[i:i+m]==B):\r\n            return True\r\n\r\n    return False\r\n\r\n    \r\n    \r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [3,4,5], 9, 3))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [3,4,5], 9, 4))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [3,4,5], 9, 2))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [3,4,5], 9, 1))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9], [3,4,5], 9, 0))\r\n\r\nprint(is_Sub_Array([1,2,3,4,5], [3,4,5], 5, 3))\r\nprint(is_Sub_Array([1,2,3,4,5], [3,4,5], 5, 2))\r\nprint(is_Sub_Array([1,2,3,4,5], [3,4,5], 5, 1))\r\nprint(is_Sub_Array([1,2,3,4,5], [3,4,5], 5, 0))\r\n\r\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5], 5, 5))\r\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,","votes":null},{"text":"\r\n    if m>n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if all(A[i:i+m]==B):\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if n<=m:\r\n        return False\r\n    if n==m:\r\n        return A==B\r\n    if B[0]==A[0]:\r\n        return is_Sub_Array(A[1:],B,n-1,m)\r\n    return is_Sub_Array(A,B[1:],n,m-1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    A=[1,2,3,4,5]\r\n    B=[1,2,3]\r\n    n=len(A)\r\n    m=len(B)\r\n    print(is_Sub_Array(A,B,n,m))\r\n    A=","votes":null},{"text":"\r\n    if n==m:\r\n        return True\r\n    elif n>m:\r\n        return False\r\n    for i in range(m-1):\r\n        if A[i]!=B[i]:\r\n            return False\r\n    return True\r\n\r\nA = [1,2,3,4,5,6,7]\r\nB = [1,2,3]\r\nn = len(A)\r\nm = len(B)\r\nis_Sub_Array(A,B,n,m)\r\n\r\nA = [1,2,3,4,5,6,7]\r\nB = [2,3,4]\r\nn = len(A)\r\nm = len(B)\r\nis_Sub_Array(A,B,n,m)\r\n\r\nA = [1,2,3,4,5,6,7]\r\nB = [1,3,4,5]\r\nn = len(A)\r\nm = len(B)\r\nis_Sub_Array(A,B,n,m)\r\n\r\nA = [1,2,3,4,5,6,7]\r\nB = [1,3,4,5,6,7]\r\nn = len(A)\r\nm = len(B)\r\nis_Sub_Array(A,B,n,m)\r\n\r\nA = [1,2,3,4,5,6,7]\r\nB = [1,3,4,5,6,7,9]\r\nn = len(A)\r\nm = len(B)\r\nis_Sub_Array(A,B,n,m)\r\n\r\nA = [1,2,3,4,5,6,7]\r\nB = [1,3,4,5,6,7,9,10]\r\nn = len(A)\r\nm = len(B)\r\nis_Sub_Array(A,B,n,m)\r\n\r\nA = [1,2,3,4,5,6,","votes":null},{"text":"\r\n    if m>n:\r\n        return False\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\nA=list(map(int,input().split()))\r\nB=list(map(int,input().split()))\r\nn,m=len(A),len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\n#","votes":null},{"text":"\r\n    if n>m:\r\n        return False\r\n    if n==m:\r\n        return A==B\r\n    if A[n-1]==B[m-1]:\r\n        return is_Sub_Array(A,B,n-1,m-1)\r\n    else:\r\n        return is_Sub_Array(A,B,n-1,m)\r\n\r\nA=list(map(int,input().split()))\r\nB=list(map(int,input().split()))\r\nn=len(A)\r\nm=len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if(n>m):\r\n        return False\r\n    \r\n    for i in range(n):\r\n        j=0\r\n        while(j<m):\r\n            if(A[i+j]!=B[j]):\r\n                break\r\n            j+=1\r\n        if(j==m):\r\n            return True\r\n    return False\r\n\r\nA=[1,2,3,4,5,6,7,8,9]\r\nB=[1,2,3,4,5,6]\r\n\r\nn=len(A)\r\nm=len(","votes":null},{"text":"\r\n    for i in range(n-m+1):\r\n        if A[i:i+m] == B:\r\n            return True\r\n    return False\r\n\r\n\r\nA = [1,2,3,4,5,6,7,8,9,10]\r\nB = [2,3,4]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"Array A:\", A)\r\nprint(\"Array B:\", B)\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\nA = [1,2,3,4,5,6,7,8,9,10]\r\nB = [3,4,5]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"Array A:\", A)\r\nprint(\"Array B:\", B)\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\nA = [1,2,3,4,5,6,7,8,9,10]\r\nB = [3,4,5,6,7]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"Array A:\", A)\r\nprint(\"Array B:\", B)\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\nA = [1,2,1,2,1,2,1,2,1,2]\r\nB = [2,1,2]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"Array A:\", A)\r\nprint(\"Array B:\", B)\r\n\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\nA = [2,1,2,1,2]\r\nB = [2,1,2]\r\nn = len(A)\r\nm = len(B)\r\nprint(\"Array A:\", A)\r\nprint(\"Array B","votes":null},{"text":"\r\n    for i in range(n-m+1):\r\n        if A[i:i+m]==B:\r\n            return True\r\n    return False\r\n\r\nA = [1, 2, 3, 4, 5]\r\nB = [1","votes":null},{"text":"\r\n    # If first array is empty then return false\r\n    if n == 0:\r\n        return False\r\n    # If first array is not empty and size of first array is less than size of second array\r\n    # then return false\r\n    if n < m:\r\n        return False\r\n    # If first array is not empty and size of first array is equal to size of second array\r\n    # then check whether both arrays are equal or not\r\n    if n == m:\r\n        if A == B:\r\n            return True\r\n        else:\r\n            return False\r\n    \r\n    # If first array is not empty and size of first array is greater than size of second array\r\n    # then traverse all subarrays of second array\r\n    i = 0\r\n    while i < m:\r\n        if A[i:n] == B[i:m]:\r\n            return True\r\n        i += 1\r\n    return False\r\n\r\nA = [1,2,3]\r\nB = [2,3]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\nA = [1,2,3,4,5]\r\nB = [1,2]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\nA = [1,2,3,4,5,6,7,8,9,10]\r\nB = [1,2,3,4,5,6,7,8,9,10]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\nA = [1,2,3,4,5,6,7,8,9,10]\r\nB = [1,2,3,4,5,6,7,8","votes":null},{"text":"\r\n    for i in range(n-m+1):\r\n        if equal_array(A[i:i+m],B):\r\n            return True\r\n    return False\r\n    \r","votes":null},{"text":"\r\n    if n>m:\r\n        return False\r\n    for i in range(n,m+1):\r\n        if A[i]==B[0]:\r\n            for j in range(i+1,m):\r\n                if A[j]==B[j-i]:\r\n                    continue\r\n                else:\r\n                    return False\r\n    return True\r\n\r\nA=list(map(int,input().split()))\r\nn=int(input())\r\nB=list(map(int,input().split()))\r\nm=int(input())","votes":null},{"text":"\r\n    d = {}\r\n    for i in range(m):\r\n        d[B[i]] = i\r\n    for i in range(n):\r\n        if d.get(A[i]) is None:\r\n            return False\r\n        if d.get(A[i]) < i:\r\n            return False\r\n    return True\r\n\r\n\r\nprint(is_Sub_Array([1,2,3,4],[1,2,3],4,3))\r\nprint(is_Sub_Array(['h','e','l','l','o'],['l','l'],5,2))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [3,4,5], 10, 3))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [3,4,5,6], 10, 4))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], 10, 10))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7,8,9,10], 10, 7))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7,8,9,10], 10, 6))\r\nprint(is_Sub_Array([1,2,3,4,5,6,7,8,9,10], [4,5,6,7,8,9,10], 10, 5))\r\nprint(is_Sub_Array([1,2,3","votes":null},{"text":"\r\n    if m>n:\r\n        return False\r\n    p,q,i,j = 0,0,0,0\r\n    while(j<m):\r\n        if A[j]==B[i]:\r\n            j+=1\r\n            i+=1\r\n        if i>=m:\r\n            return True\r\n        if j<m and A[j]!=B[i]:\r\n            j=p\r\n            i=q+1\r\n        p=q\r\n        q=i\r\n    return False\r\n\r\nA = [1,2,3,4,5,6,7,8,9,10]\r\nB = [3,4,5]\r\nn = len(A)\r\nm = len(B)\r\nprint(is_Sub_Array(A,B,n,m))\r\n\r\n\r\n\r","votes":null}],"time":{"count":59.0,"avg":151496.1234576271,"std":45054.6172318697,"cov":0.2973978225}}
{"id":577,"question":"def last_Digit_Factorial(n):\r\n    \"\"\"Write a python function to find the last digit in factorial of a given number.\"\"\"","answers":[{"text":"\r\n    factorial = 1\r\n    while n >= 1:\r\n        factorial = factorial * n\r\n        n = n - 1\r\n    return factorial % 10\r\n\r\n\r","votes":70313.928},{"text":"\r\n    f=1\r\n    while(n>=1):\r\n        f=f*n\r\n        n=n-1\r\n    return f%10\r\n\r","votes":75227.152},{"text":"\r\n    # Your code goes here\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return ((n%10)*(last_Digit_Factorial(n-1)))%10\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":84105.34},{"text":"\r\n    #code\r\n    fact = 1\r\n    while n > 0:\r\n        fact *= n\r\n        n -= 1\r\n    return fact%10\r\n\r","votes":87097.452},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return (n * last_Digit_Factorial(n-1)) % 10\r\n\r\n\r","votes":87692.216},{"text":"\r\n\r\n    if n <= 0:\r\n        print('Not a positive integer')\r\n        return\r\n    else:\r\n        fact = 1\r\n        for i in range(1, n+1):\r\n            fact *= i\r\n        return fact % 10\r\n\r\n\r","votes":93060.66},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return (n * last_Digit_Factorial(n-1)) % 10\r\n\r\nprint(last_Digit_Factorial(100))\r\n\r\n\r\n\r\n\r\n# Write a python function to find the last digit in factorial of a given number.\r\n\r","votes":94414.12},{"text":"\r\n    f=1\r\n    while n>0:\r\n        f*=n\r\n        n-=1\r\n        f=f%10\r\n    return f\r\n\r","votes":98873.456},{"text":"\r\n    f = 1\r\n    for i in range(1, n + 1):\r\n        f *= i\r\n    return f % 10\r\n\r\n\r","votes":99422.2},{"text":"\r\n    # your code goes here\r\n    fact = 1\r\n    for i in range(1,n+1):\r\n        fact = fact * i\r\n    return fact % 10\r\n\r\n\r","votes":102733.14},{"text":"\r\n    fact = 1\r\n    for i in range(1, n + 1):\r\n        fact = fact * i\r\n    return fact % 10\r\nprint(last_Digit_Factorial(10))\r\n\r\n# Output: 6\r\n\r\n\r","votes":106162.136},{"text":"\r\n    f = 1\r\n    for i in range(1, n+1):\r\n        f = f*i\r\n    return f%10\r\n\r\n\r","votes":108525.272},{"text":"\r\n\r\n    # factorial of n\r\n    fact = 1\r\n    for i in range(2, n + 1):\r\n        fact = i * fact\r\n\r\n    # find the last digit\r\n    return fact % 10\r\n\r\n\r\n# Driver Code\r\nn = 5\r\nprint(\"Last digit of factorial of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n# Sample Output\r\n# Last digit of factorial of 5 is 5\r\n\r\n# Sample Input\r\n# n = 10\r\n\r\n# Sample Output\r\n# Last digit of factorial of 10 is 0\r\n\r\n# Sample Input\r\n# n = 100\r\n\r\n# Sample Output\r\n# Last digit of factorial of 100 is 0\r\n\r\n# Sample Input\r\n# n = 1000\r\n\r\n# Sample Output\r\n# Last digit of factorial of 1000 is 0\r\n\r\n# Sample Input\r\n# n = 10000\r\n\r\n# Sample Output\r\n# Last digit of factorial of 10000 is 0\r\n\r\n# Sample Input\r\n# n = 100000\r\n\r\n# Sample Output\r\n# Last digit of factorial of 100000 is 0\r\n\r\n# Sample Input\r\n# n = 1000000\r\n\r\n# Sample Output\r\n# Last digit of factorial of 1000000 is 0\r\n\r\n# Sample Input\r\n# n = 10000000\r\n\r\n# Sample Output\r\n# Last digit of factorial of 10000000 is 0\r\n\r\n# Sample Input\r\n# n = 100000000\r\n\r\n# Sample Output\r\n# Last digit of factorial of 100000000 is 0\r\n","votes":110129.184},{"text":"\r\n    import math\r\n    a = math.factorial(n)\r\n    return a%10\r\n\r\nprint(last_Digit_Factorial(100))\r\n\r","votes":111179.408},{"text":"\r\n    \r\n    fact = 1\r\n    for i in range(1,n+1):\r\n        fact = fact*i\r\n    return fact%10\r\n\r\n\r\n# In[ ]:\r\n\r\n\r","votes":115546.648},{"text":"\r\n    fact = 1\r\n    for i in range(1,n+1):\r\n        fact = fact * i\r\n    print(fact)\r\n    return fact%10\r\n\r\n\r\nprint(last_Digit_Factorial(10))\r\n\r\n#Sample Input\r\n#10\r\n#Sample Output\r\n#3628800\r\n#6\r\n#Explanation\r\n#The factorial of 10 is 3628800. The last digit of the factorial is 6.\r\n\r\n\r\n\r\n\r","votes":116961.092},{"text":"\r\n    last_digit = 1\r\n    for i in range(2, n+1):\r\n        last_digit = (last_digit * i) % 10\r\n    return last_digit\r\n\r\n\r","votes":117580.368},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return (n * last_Digit_Factorial(n-1)) % 10\r\n\r\n\r\n\r\nn = 100\r\nprint(last_Digit_Factorial(n))\r\n\r\n# OUTPUT\r\n'''\r\n6\r\n\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n'''\r\n\r\n\r\n\r\nvotes":122776.084},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    return last_Digit_Factorial(n - 1) * n % 10\r\n\r\n\r","votes":122971.676},{"text":"\r\n    fct = 1\r\n    for i in range(1, n + 1):\r\n        fct *= i\r\n    return fct % 10\r\n\r\n\r","votes":128916.532},{"text":"\r\n    if n <= 0:\r\n        return 0\r\n    if n <= 1:\r\n        return 1\r\n    else:\r\n        return (n * last_Digit_Factorial(n - 1)) % 10\r\n\r\n\r","votes":131134.268},{"text":"\r\n    fact = 1\r\n    for i in range(1, n + 1):\r\n        fact *= i\r\n    return fact % 10\r\n\r\n\r","votes":132354.608},{"text":"\r\n\r\n    if n <= 1:\r\n        return n\r\n    else:\r\n        return ((n % 10) * (last_Digit_Factorial(n - 1))) % 10\r\n\r\n\r\nif __name__ == '__main__':\r\n    # n = int(input())\r\n    n = 10\r\n    print(f\"The last digit in the factorial of {n} is {last_Digit_Factorial(n)}\")\r\n\r\n\r\n\"\"\"\r\nSample input:\r\nn = 5\r\n\r\nSample output:\r\nThe last digit in the factorial of 5 is 5\r\n\r\nTime complexity: O(logn)\r\nSpace complexity: O(logn)\r\n\r\n\"\"\"\r\n\r\n","votes":138478.412},{"text":"\r\n    \r\n    result = 1\r\n    while n >= 1:\r\n        result *= n\r\n        n -= 1\r\n    return result % 10\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    result = last_Digit_Factorial(n)\r\n    print(result)\r\n\r\n# Enter your code here. Read input from STDIN. Print output to STDOUT\r\n\r\n\r","votes":139859.712},{"text":"\r\n    list = []\r\n    for i in range(1,n+1):\r\n        list.append(i)\r\n    fact = 1\r\n    for i in range(len(list)-1,0,-1):\r\n        fact = fact*list[i]\r\n    return(fact%10)\r\n\r","votes":162044.176},{"text":"\r\n    f = 1\r\n    for i in range(2, n + 1):\r\n        f *= i\r\n    return f % 10\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the number: \"))\r\n    print(\"Last digit in factorial of\", n, \"is\", last_Digit_Factorial(n))\r\n\r\n# Time Complexity: O(n).\r\n# Space Complexity: O(1).\r\n\r\n# Test Cases:\r\n# 1. Test Case: Enter the number: 4\r\n# Output: Last digit in factorial of 4 is 2\r\n\r\n# 2. Test Case: Enter the number: 10\r\n# Output: Last digit in factorial of 10 is 6\r\n\r\n# 3. Test Case: Enter the number: 5\r\n# Output: Last digit in factorial of 5 is 5\r\n\r\n# 4. Test Case: Enter the number: 15\r\n# Output: Last digit in factorial of 15 is 3\r\n\r\n# 5. Test Case: Enter the number: 20\r\n# Output: Last digit in factorial of 20 is 8\r\n\r\n# 6. Test Case: Enter the number: 25\r\n# Output: Last digit in factorial of 25 is 5\r\n\r\n# 7. Test Case: Enter the number: 30\r\n# Output: Last digit in factorial of 30 is 6\r\n\r\n# 8. Test Case: Enter the number: 35\r\n# Output: Last digit in factorial of 35 is 7\r\n\r\n# 9. Test Case: Enter the number: 40\r\n# Output: Last digit in factorial of 40 is 4\r\n\r\n# 10. Test Case: Enter the number: 45\r\n# Output: Last digit in factorial of 45 is 4\r","votes":165946.224},{"text":"\r\n\r\n    # Initialize the factorial variable\r\n    factorial = 1\r\n\r\n    # Generate the factorial of the number\r\n    for i in range(1, n + 1):\r\n        factorial *= i\r\n\r\n    # Find the last digit\r\n    return factorial % 10\r\n\r\n\r\n# Invoke the function to find the last digit\r\nprint(last_Digit_Factorial(10))\r\nprint(last_Digit_Factorial(11))\r\nprint(last_Digit_Factorial(12))\r\nprint(last_Digit_Factorial(13))\r\nprint(last_Digit_Factorial(14))\r\nprint(last_Digit_Factorial(15))\r\nprint(last_Digit_Factorial(16))\r\nprint(last_Digit_Factorial(17))\r\nprint(last_Digit_Factorial(18))\r\nprint(last_Digit_Factorial(19))\r\nprint(last_Digit_Factorial(20))\r\n\r\n# This code is contributed by Saket Modi\r\n\r\n\r","votes":229332.668},{"text":"\r\n    # Base case\r\n    if n == 0:\r\n        return 1\r\n\r\n    # Recursive case\r\n    else:\r\n        return (n % 10)*factorial(n - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    result = 1\r\n    while(n>1):\r\n        n = n - 1\r\n        result = result * n\r\n    return result%10\r\n\r\nprint last_Digit_Factorial(5)\r\n# 5! = 120\r\n# 120%10 = 0\r\n\r\n# 10! = 3628800\r\n# 3628800%10 = 0\r\n\r\n","votes":null},{"text":"\r\n    # n! = n * (n-1)!\r\n    # so, n! % 10 will give the last digit\r\n    # e.g. 10! = 3628800, so last digit is 0\r\n    # so, n! % 10 = n\r\n    # e.g. 10! = 3628800, so last digit is 0\r\n    # so, n! % 10 = n\r\n    # e.g. 10! = 3628800, so last digit is 0\r\n    # so, n! % 10 = n\r\n    # e.g. 10! = 3628800, so last digit is 0\r\n    # so, n! % 10 = n\r\n    # e.g. 10! = 3628800, so last digit is 0\r\n    # so, n! % 10 = n\r\n    # e.g. 10! = 3628800, so last digit is 0\r\n    # so, n! % 10 = n\r\n    # e.g. 10! = 3628800, so last digit is 0\r\n    # so, n! % 10 = n\r\n    # e.g. 10! = 3628800, so last digit is 0\r\n    # so, n! % 10 = n\r\n    # e.g. 10! = 3628800, so last digit is 0\r\n    # so, n! % 10 = n\r\n    # e.g. 10! = 3628800, so last digit is 0\r\n    # so, n! % 10 = n\r\n    # e.g. 10! = 3628800, so last digit i","votes":null},{"text":"\r\n    while n>1:\r\n        print(n)\r\n        n=n\/\/10\r\n    return n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        sum += i\r\n    return sum % 10\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    factorial = 1\r\n    for i in range(1,n+1):\r\n        factorial = factorial * i\r\n    return factorial%10\r\n\r\n\r\n#main\r\nn = int(input(\"Enter a number: \"))\r\nprint(\"Last digit in factorial of {0} is: {1}\".format(n,last_Digit_Factorial(n)))\r\n\r\n\r\n\"\"\"\r\nOutput\r\n\r\nEnter a number: 12\r\nLast digit in factorial of 12 is: 6\r\nEnter a number: 3\r\nLast digit in factorial of 3 is: 6\r\nEnter a number: 10\r\nLast digit in factorial of 10 is: 0\r\nEnter a number: 20\r\nLast digit in factorial of 20 is: 0\r\nEnter a number: 8\r\nLast digit in factorial of 8 is: 8\r\nEnter a number: 15\r\nLast digit in factorial of 15 is: 0\r\nEnter a number: 5\r\nLast digit in factorial of 5 is: 1\r\nEnter a number: 18\r\nLast digit in factorial of 18 is: 6\r\nEnter a number: 25\r\nLast digit in factorial of 25 is: 5\r\nEnter a number: 23\r\nLast digit in factorial of 23 is: 6\r\nEnter a number: 21\r\nLast digit in factorial of 21 is: 1\r\nEnter a number: 17\r\nLast digit in factorial of 17 is: 8\r\nEnter a number: 14\r\nLast digit in factorial of 14 is: 6\r\nEnter a number: 13\r\nLast digit in factorial of 13 is: 6\r\nEnter a number: 16\r\nLast digit in factorial of 16 is: 6\r\nEnter a number: 11\r","votes":null},{"text":"\r\n    res = 1\r\n    for i in range(1, n + 1):\r\n        res *= i\r\n    while res > 0:\r\n        res = res % 10\r\n        if res != 0:\r\n            return res\r\n\r\n\r","votes":null},{"text":"\r\n    import math\r\n    import numpy as np\r\n    factorial_list = np.arange(n)\r\n    factorial_list = factorial_list * (factorial_list + 1) * (factorial_list + 2) \/ 6\r\n    return factorial_list[-1]\r\n\r","votes":null},{"text":"\r\n    fact = 1\r\n    while(n>1):\r\n        fact *= n\r\n        n -= 1\r\n    return int(fact%10)\r\n\r\nn = int(input(\"Enter a number: \"))\r\nprint(last_Digit_Factorial(n))\r\n\r\n\r\n\"\"\"\r\nOUTPUT\r\n\r\nEnter a number: 10\r\n6\r\n\r\nEnter a number: 100\r\n","votes":null},{"text":"\r\n    if n < 0:\r\n        raise ValueError(\"Factorial does not exist for negative numbers.\")\r\n    elif n == 0:\r\n        return 1\r\n    else:\r\n        return ((n % 10) * last_Digit_Factorial(n \/\/ 10))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter a number: \"))\r\n    print(last_Digit_Factorial(n))\r\n\r\n\r\n# Enter a number: 5\r\n# 120\r\n\r\n# Enter a number: 10\r\n# 3628800\r\n\r\n# Enter a number: 100\r\n# 3628800\r\n\r\n# Enter a number: 1000\r\n# 51090942171709440000\r\n\r\n# Enter a number: 1000000\r\n# 3628800\r\n\r\n# Enter a number: 100000000000000000000000000000000000000000000000000000000000000000000\r\n# 3628800\r\n\r\n# Enter a number: 99999999999999999999999999999999999999999999999999999999999999999999\r\n# 3628800\r\n\r\n# Enter a number: 1000000000000000000000000000000000","votes":null},{"text":"\r\n    f = 1\r\n    for i in range(1, n + 1):\r\n        f *= i\r\n    return f % 10\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(last_Digit_Factorial(n))\r\n\r\n\"\"\"\r\nExpected Time Complexity: O(n)\r\nExpected Auxiliary Space","votes":null},{"text":"\r\n    fact=1\r\n    for i in range(1,n+1):\r\n        fact=fact*i\r\n    l=len(str(fact))\r\n    return int(fact%(10**(l-1)))\r\n\r\n\r","votes":null},{"text":"\r\n    # If number is 0 or 1 then answer is 1\r\n    if n == 0 or n == 1:\r\n        return 1\r\n    else:\r\n        # Find the last digit of the factorial of given number\r\n        return int(n * last_Digit_Factorial(n - 1))\r\n\r\n\r","votes":null},{"text":"\r\n    fact=1\r\n    for i in range(1,n+1):\r\n        fact*=i\r\n    return str(fact)[-1]\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    result = last_Digit_Factorial(n)\r\n    print(result)\r\n\r\n\"\"\"\r\nSample Input 1:\r\n    100\r\nSample Output 1:\r\n    0\r\n\r\nSample Input 2:\r\n    101\r\nSample Output 2:\r\n    0\r\n\r\nSample Input 3:\r\n","votes":null},{"text":"\r\n    \r\n    return (n%(10**(len(str(factorial(n)))-1)))\r\n\r\n\r\n\r\nprint(last_Digit_Factorial(1000))\r\nprint(last_Digit_Factorial(121))\r\nprint(last_Digit_Factorial(135))\r\nprint(last_Digit_Factorial(100))\r\nprint(last_Digit_Factorial(10000))\r\nprint(last_Digit_Factorial(100000))\r\nprint(last_Digit_Factorial(1000000))\r\nprint(last_Digit_Factorial(10000000))\r\nprint(last_Digit_Factorial(100000000))\r\nprint(last_Digit_Factorial(1000000000))\r\nprint(last_Digit_Factorial(10000000000))\r\nprint(last_Digit_Factorial(100000000000))\r\nprint(last_Digit_Factorial(1000000000000))\r\nprint(last_Digit_Factorial(10000000000000))\r\nprint(last_Digit_Factorial(100000000000000))\r\nprint(last_Digit_Factorial(1000000000000000))\r\nprint(last_Digit_Factorial(10000000000000000))\r\nprint(last_Digit_F","votes":null},{"text":"\r\n    # n! = n * (n-1) * (n-2) * ... * 3 * 2 * 1\r\n    # 10! = 1 * 2 * 3 * 4 * 5","votes":null},{"text":"\r\n    \r\n    # initialize the variable as zero\r\n    lastDigit = 0\r\n    \r\n    # check if the number is less than 10\r\n    if n < 10:\r\n        lastDigit = n\r\n    else:\r\n        # find the last digit in factorial of the number\r\n        lastDigit = last_Digit_Factorial(n\/\/10)\r\n    \r\n    # find the factorial of the number\r\n    fac = 1\r\n    for i in range(1, n+1):\r\n        fac *= i\r\n    \r\n    # find the last digit in the factorial\r\n    lastDigit = fac%10\r\n    \r\n    # return the last digit\r\n    return lastDigit\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter a number: '))\r\n    print('Last digit in factorial of', n, 'is', last_Digit_Factorial(n))\r\n\r\n\r\n'''\r\nTime Complexity: O(n), where n is the number\r\nSpace Complexity: O(n), where n is the number\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\nEnter a number: 12\r\nLast digit in factorial of 12 is 6\r\n\r\nSAMPLE 2\r\nEnter a number: 21\r\nLast digit in factorial of 21 is 0\r\n\r\nSAMPLE 3\r\nEnter a number: 10\r\nLast digit in factorial of 10 is 0\r\n\r\nSAMPLE 4\r\nEnter a number: 1\r\nLast digit in factorial of 1 is 1\r\n\r\nSAMPLE 5\r\nEnter a number: 3\r\nLast digit in factorial of 3 is 6\r\n\r\nSAMPLE 6\r\nEnter a number: 20\r\nLast digit in factorial of 20 i","votes":null},{"text":"\r\n    if n==0:\r\n        return 0\r\n    else:\r\n        return 10*last_Digit_Factorial(n-1) + (n*(n-1)*(n-2)*(n-3))%10\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    return (n % 10) * last_Digit_Factorial(n - 1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter a number to find last digit in factorial of that number : \"))\r\n    print(last_Digit_Factorial(n))\r\n\r\n\r\n\"\"\"Theory:\r\nThe last digit of a factorial number is calculated by multiplying the last digit of the number with the last digit of the factorial of the number - 1.\r\nThe formula for the last digit of the factorial of a number n is:\r\n\r\nlast digit of factorial of n = (last digit of n) * (last digit of factorial of n - 1)\r\nThe above formula is repeated until the number is 0. If the number is 0, then the last digit is 1.\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    factors = []\r\n    while n > 0:\r\n        f = 1\r\n        for i in range(2, n + 1):\r\n            f *= i\r\n        factors.append(f)\r\n        n -= 1\r\n    return factors[len(factors) - 1] % 10\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    return int(str(n*last_Digit_Factorial(n-1))[","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return last_Digit_Factorial(n-1) * n\r\n\r\n\r","votes":null},{"text":"\r\n    if n < 0:\r\n        return None\r\n    if n == 0:\r\n        return 1\r\n    n = str(factorial(n))\r\n    return int(n[len(n)-1])\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    n = int(n)\r\n    if(n == 0):\r\n        return 1\r\n    else:\r\n        return (n % 10)\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(last_Digit_Factorial(n))\r\n\r\n# Sample Input :- 6\r\n# Output :- 6\r\n# Explaination :-\r\n# For n = 6, 6! = 6 * 5 * 4 * 3 * 2 * 1 = 720\r\n# 720 % 10 = 0\r\n# So, the Last Digit of Factorial of 6 is 0\r\n\r\n# Sample Input :- 12\r\n# Output :- 6\r\n# Explaination :-\r\n# 12! = 479001600\r\n# 479001600 % 10 = 6\r\n# So, the Last Digit of Factorial of 12 is 6\r\n\r\n# Sample Input :- 100\r\n# Output :- 6\r\n# Explaination :-\r\n# 100! = 9.33262154439441e+157\r\n# 9.33262154439441e+157 % 10 = 6\r\n# So, the Last Digit of Factorial of 100 is 6\r\n\r\n# Sample Input :- 1000\r\n# Output :- 6\r\n# Explaination :-\r\n# 1000! = 9.33262154439441e+236\r\n# 9.33262154439441e+236 % 10 = 6\r\n# So, the Last Digit of Factorial of 100","votes":null},{"text":"\r\n    \r\n    # Base Case\r\n    if n<0:\r\n        return \"Invalid Input\"\r\n    if n==0:\r\n        return 1\r\n    \r\n    # Recursive Case\r\n    return (n%10)*last_Digit_Factorial(n-1)\r\n    \r\n    \r\n    \r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the number: \"))\r\n    print(\"Last digit in factorial of number {} is {}\".format(n,last_Digit_Factorial(n)))\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1) % 10\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter a number: \"))\r\n    print(\"The last digit of the factorial of %d is %d\" %(n, last_Dig","votes":null},{"text":"\r\n    return (n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10)) % 10\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if n == 0:\r\n        return 1\r\n\r\n    if n < 0:\r\n        return -1\r\n\r\n    return (n \/\/ 10) * last_Digit_Factorial(n \/\/ 10) + last_digit(n)\r\n\r","votes":null},{"text":"\r\n    # First take the factorial of n\r\n    factorial = 1\r\n    for i in range(1, n + 1):\r\n        factorial *= i\r\n    # now find the last digit in the factorial of n\r\n    while factorial >= 10:\r\n        factorial = factorial % 10\r\n    return factorial\r\n\r\n\r\n# Driver Code\r\nn = 10\r\nprint(last_Digit_Factorial(n))\r\n\r\n\"\"\"\r\nSample Input 1:\r\nn = 5\r\n\r\nSample Output 1:\r\n5\r\n\r\nSample Input 2:\r\nn = 10\r\n\r\nSample Output 2:\r\n","votes":null},{"text":"\r\n    \r\n    import math\r\n    \r\n    #check if number is negative\r\n    if n < 0:\r\n        print(\"Sorry,factorial does not exist for negative numbers\")\r\n    #if number is 0 or 1\r\n    elif n == 0 or n == 1:\r\n        return n\r\n    \r\n    else:\r\n        #find n digit\r\n        n_digit = len(str(n))\r\n        #find factorial of n\r\n        factorial_n = math.factorial(n)\r\n        #find last digit of factorial of n\r\n        last_digit = factorial_n % (10 ** (n_digit-1))\r\n        \r\n        #print last digit of factorial of n\r\n        return last_digit\r\n    \r\n\r\n#test cases\r\nprint(last_Digit_Factorial(1)) #1\r\nprint(last_Digit_Factorial(5)) #5\r\nprint(last_Digit_Factorial(4)) #4\r\nprint(last_Digit_Factorial(10)) #0\r\nprint(last_Digit_Factorial(","votes":null},{"text":"\r\n    # find the factorial of a given number\r\n    factorial = 1\r\n    for i in range(1, n + 1):\r\n        factorial *= i\r\n    return factorial\r\n\r\n\r","votes":null},{"text":"\r\n    # Code here\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return (n%10)*(last_Digit_Factorial(n-1))\r\n\r\nn=int(input())\r\nprint(last_Digit_Factorial(n))\r\n\r\n# Sample Input :- 6\r\n# Output :- 6\r\n# Explanation :- (6!)=720\r\n#               Last digit of 720 is 0\r\n\r\n# Sample Input :- 12\r\n# Output :- 6\r\n# Explanation :- (12!)=479001600\r\n#               Last digit of 479001600 is 6\r\n\r\n# Sample Input :- 50\r\n# Output :- 0\r\n# Explanation :- (50!)=3041409320171337804361260816606476884437764156896051200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","votes":null},{"text":"\r\n    return n % 10\r\n\r\n\r","votes":null},{"text":"\r\n    import math\r\n    n = int(n)\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return (n % 10) * last_Digit_Factorial(math.floor(n\/10))\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return (n * last_Digit_Factorial(n-1))%10\r\n\r\n\r\n# Enter your code here. Read input from STDIN. Print output to STDOUT\r\nn = int(","votes":null},{"text":"\r\n    \r\n    # A factorial is defined as n! = 1 x 2 x 3 x 4 .... x n\r\n    # If we take the number 12, 12! = 12 x 11 x 10 x 9 x 8 x 7 x 6 x 5 x 4 x 3 x 2 x 1\r\n    # 12! = 479001600\r\n    # So the last digit of 12! is 0\r\n    # The last digit of 12! is 0 as 12! = 12 x 11 x 10 x 9 x 8 x 7 x 6 x 5 x 4 x 3 x 2 x 1\r\n    # The last digit of 12! is 0 as 12! = 12 x 11 x 10 x 9 x 8 x 7 x 6 x 5 x 4 x 3 x 2 x 1 = 479001600\r\n\r\n    # Factorial of a number is n! = 1 x 2 x 3 x 4 .... x n\r\n    # The last digit of the factorial of a number is a number itself.\r\n\r\n    # The last digit of 12! is the last digit of 479001600\r\n    # The last digit of 12! is the last digit of 479001600 = 0\r\n\r\n    # The last digit of 12! = 479001600 = 0\r\n    \r\n    # n! = n x (n-1)!\r\n    # 4! = 4 x 3! = 4 x 3 x 2 x 1 = 24\r\n    # 3! = 3 x 2! = 3 x 2 x 1 = 6\r\n    # 2! = 2 x 1! = 2 x","votes":null},{"text":"\r\n    n = int(n)\r\n    if n < 0:\r\n        print(\"Negative numbers are not allowed\")\r\n        return 0\r\n    elif n == 0:\r\n        return 1\r\n    else:\r\n        return (n % 10)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    \"\"\"\r\n    This function takes a number and returns the last digit in the factorial of the number.\r\n    \"\"\"\r\n\r\n    if n == 0:\r\n        return 1\r\n\r\n    n = str(n)\r\n    last_digit = int(n[len(n)-1])\r\n\r\n    for i in range(len(n)-1, 0, -1):\r\n        last_digit *= int(n[i])\r\n    return last_digit\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # 1. Check if the number is negative\r\n    if n < 0:\r\n        return None\r\n\r\n    # 2. Check if the number is 0\r\n    elif n == 0:\r\n        return 1\r\n    \r\n    # 3. Check if the number is 1\r\n    elif n == 1:\r\n        return 1\r\n    \r\n    # 4. Check if the number is 2\r\n    elif n == 2:\r\n        return 2\r\n    \r\n    # 5. Check if the number is 3\r\n    elif n == 3:\r\n        return 6\r\n    \r\n    # 6. Check if the number is 4\r\n    elif n == 4:\r\n        return 4\r\n    \r\n    # 7. Check if the number is 5\r\n    elif n == 5:\r\n        return 5\r\n    \r\n    # 8. Check if the number is 6\r\n    elif n == 6:\r\n        return 6\r\n    \r\n    # 9. Check if the number is 7\r\n    elif n == 7:\r\n        return 7\r\n    \r\n    # 10. Check if the number is 8\r\n    elif n == 8:\r\n        return 8\r\n    \r\n    # 11. Check if the number is 9\r\n    elif n == 9:\r\n        return 9\r\n    \r\n    # 12. Check if the number is 10\r\n    elif n == 10:\r\n        return 5\r\n    \r\n    # 13. Check if the number is 11\r\n    elif n == 11:\r\n        return 6\r\n    \r\n    # 14. Check if the number is 12\r\n    elif n == 12:\r\n        return 4\r\n    \r\n    # 15. Check if the number is 13\r\n  ","votes":null},{"text":"\r\n    import math\r\n    last_digit = 1\r\n    factorial = 1\r\n    for i in range(1, n+1):\r\n        factorial *= i\r\n        last_digit = int(math.modf(factorial)[0])\r\n    return last_digit\r\n\r\n\r\nprint(last_Digit_Factorial(100))\r\n\r\n#","votes":null},{"text":"\r\n\r\n    # Find the factorial of the number\r\n    fac = 1\r\n    for i in range(1, n+1):\r\n        fac = fac * i\r\n\r\n    # Find the last digit\r\n    return int(str(fac)[-1])\r\n\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    n = 20\r\n    print(\"Last Digit in Factorial of \" + str(n) + \" is \" +\r\n          str(last_Digit_Factorial(n)))\r\n\r\n    n = 12\r\n    print(\"Last Digit in Factorial of \" + str(n) + \" is \" +\r\n          str(last_Digit_Factorial(n)))\r\n\r\n    n = 10\r\n    print(\"Last Digit in Factorial of \" + str(n) + \" is \" +\r\n          str(last_Digit_Factorial(n)))\r\n\r\n    n = 1\r\n    print(\"Last Digit in Factorial of \" + str(n) + \" is \" +\r\n          str(last_Digit_Factorial(n)))\r\n\r\n    n = 0\r\n    print(\"Last Digit in Factorial of \" + str(n) + \" is \" +\r\n          str(last_Digit_Factorial(n)))\r\n\r\n    n = -1\r\n    print(\"Last Digit in Factorial of \" + str(n) + \" is \" +\r\n          str(last_Digit_Factorial(n)))\r\n\r\n    n = -10\r\n    print(\"Last Digit in Factorial of \" + str(n) + \" is \" +\r\n          str(last_Dig","votes":null},{"text":"\r\n    # First, we'll find the factorial of the number\r\n    # then we'll use mod to find the last digit\r\n    # then we'll return the last digit\r\n    # since we're only interested in the last digit\r\n    # we'll divide the number by 10 until we get the last digit\r\n    # and then return it\r\n    # we'll use a while loop to find the factorial of the number\r\n    # and we'll use mod to find the last digit\r\n    fact=1\r\n    while n>0:\r\n        fact=fact*(n%10)\r\n        n=n\/\/10\r\n    # since we're only interested in the last digit\r\n    # we'll divide the number by 10 until we get the last digit\r\n    # and then return it\r\n    # we'll use a while loop to find the factorial of the number\r\n    # and we'll use mod to find the last digit\r\n    while fact>10: # we'll keep dividing the number by 10 until it's less than 10\r\n        fact=fact\/\/10\r\n    return fact\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    fact = 1\r\n    for i in range(1, n+1):\r\n        fact *= i\r\n    return fact%10\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    print(\"The last digit of factorial is\", last_Digit_Factorial(n))\r\n\r\n\"\"\"\r\nInput Format\r\n\r\nA number n\r\nOutput Format\r\n\r\nThe last digit of factorial\r\nConstraints\r\n\r\n0 < n < 1000\r\nSample Input\r\n\r\n6\r\nSample Output\r\n\r\n2\r\n\r\nExplanation\r\n\r\n","votes":null},{"text":"\r\n    # If the number is 0 or 1, then the factorial is 1\r\n    if n == 0 or n == 1:\r\n        return 1\r\n    # If the number is negative, then the factorial is 0\r\n    if n < 0:\r\n        return 0\r\n    # If the number is greater than 0, compute the factorial iteratively\r\n    else:\r\n        fact = 1\r\n        while n > 0:\r\n            fact = fact * n\r\n            n = n - 1\r\n        return fact % 10\r\n\r\n\r\n# Driver code\r\nn = 100\r\nprint(\"Last digit in factorial of\", n, \" is\", last_Digit_Factorial(n))\r\nn = 10\r\nprint(\"Last digit in factorial of\", n, \" is\", last_Digit_Factorial(n))\r\nn = 9\r\nprint(\"Last digit in factorial of\", n, \" is\", last_Digit_Factorial(n))\r\nn = 0\r\nprint(\"Last digit in factorial of\", n, \" is\", last_Digit_Factorial(n))\r\nn = -1\r\nprint(\"Last digit in factorial of\", n, \" is\", last_Digit_Factorial(n))\r\nn = -10\r\nprint(\"Last digit in factorial of\", n, \" is\", last_Digit_Factorial(n))\r\nn = -100\r\nprint(\"Last digit in factorial of\", n, \" is\", last_Digit_Factorial(n))\r\nn = -1000\r\nprint(\"Last digit in factorial of\", n, \" is\", last_Digit_Factorial(n))\r\nn = -10000\r\nprint(\"Last digit in factorial of\", n, \" is\", last_Digit_Factorial(n))\r\nn = -100000\r\nprint(\"Last digit in facto","votes":null},{"text":"\r\n    from math import factorial\r\n    l = str(factorial(n))\r\n    return l[-1]\r\n\r\n\r\nprint(last_Digit_Factorial(100))\r\nprint(last_Digit_Factorial(10))\r\nprint(last_Digit_Factorial(1000))\r\nprint(last_Digit_Factorial(10000))\r\nprint(last_Digit_Factorial(100000))\r\n\r\n\r\n# n = int(input(\"Enter the number:\"))\r\n# print(\"Factorial of \", n, \"is\", factorial(n))\r\n\r\n\r","votes":null},{"text":"\r\n    if n < 0:\r\n        return -1\r\n    elif n == 0:\r\n        return 1\r\n    else:\r\n        return last_Digit_Factorial(n-1) * n % 10\r\n\r\n\r\nprint(last_Digit_Factorial(10))\r\nprint(last_Digit_Factorial(11))\r\nprint(last_Digit_Factorial(12))\r\nprint(last_Digit_Factorial(13))\r\nprint(last_Digit_Factorial(14))\r\nprint(last_Digit_Factorial(15))\r\nprint(last_Digit_Factorial(16))\r\nprint(last_Digit_Factorial(17))\r\nprint(last_Digit_Factorial(18))\r\nprint(last_Digit_Factorial(19))\r\nprint(last_Digit_Factorial(20))\r\nprint(last_Digit_Factorial(21))\r\nprint(last_Digit_Factorial(22))\r\nprint(last_Digit_Factorial(23))\r\nprint(last_Digit_Factorial(24))\r\nprint(last_Digit_Factorial(25))\r\nprint(last_Digit_Factorial(26))\r\nprint(last_Digit_F","votes":null},{"text":"\r\n    num = n\r\n    x = 1\r\n    while num > 0:\r\n        num = num - 1\r\n        x = x * num\r\n    return x\r\n    \r","votes":null},{"text":"\r\n    \r\n    # Factorial of a number is the product of all positive integers less than or equal to the number.\r\n    # For example factorial of 6 is 6*5*4*3*2*1 = 720\r\n    # Write a python function to find the last digit in factorial of a given number.\r\n    \r\n    # Example:\r\n    # Input: 6\r\n    # Output: 2\r\n\r\n    # Import modules\r\n    import math\r\n    import decimal\r\n    \r\n    # Initialization\r\n    factorial = 1\r\n    \r\n    # Find factorial of n\r\n    for i in range(1, n+1):\r\n        factorial = factorial * i\r\n        \r\n    # Take mod with 10\r\n    return int(factorial % 10)\r\n\r\n# Take input n\r\nn = int(input(\"Enter a number: \"))\r\n\r\n# Find the last digit in factorial of n\r\nlast_digit_factorial = last_Digit_Factorial(n)\r\n\r\n# Display result\r\nprint(\"Last digit in factorial of\", n, \"is\", last_digit_factorial)\r\n\r\n# Contributed by: Harshit Jain\r\n\r\n\r\n\"\"\"\r\nOutput:\r\n\r\nEnter a number: 6\r\nLast digit in factorial of 6 is 2\r\n\r\nTime Complexity: O(n)\r\nSpace Complexity: O(n)\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\nTest Case:\r\n\r\nInput:\r\nEnter a number: 6\r\n\r\nOutput:\r\nLast digit in factorial of 6 is 2\r\n\r\nVerification:\r\n6! = 720\r\n","votes":null},{"text":"\r\n    l = []\r\n    for i in range(1,n+1):\r\n        l.append(i)\r\n    import math\r\n    l2 = []\r\n    for i in range(1,n+1):\r\n        a = math.factorial(l[i])\r\n        l2.append(a)\r\n    l3 = []\r\n    for i in l2:\r\n        l3.append(i%10)\r\n    return l3[-1]\r\n\r","votes":null},{"text":"\r\n    \r\n    # Base Case\r\n    if n == 0:\r\n        return 1\r\n    \r\n    # Recursive Step\r\n    return n * last_Digit_Factorial(n-1)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return n % 10\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input().strip())\r\n\r\n    print(last_Digit_Factorial(n))\r\n\r\n\r\n\"\"\"\r\nSample Input\r\n\r\n5\r\n\r\nSample Output\r\n\r\n5\r\n\"\"\"\r\n\r\n\"\"\"\r\nExplanation\r\n\r\n!5 = 120\r\n\r\nThe last digit in 120 is 0\r\n\r\nTherefore, the last digit in !5 is 0\r\n\"\"\"\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    if n < 0:\r\n        return False\r\n    else:\r\n        return str(n)[-1]\r\n\r\n\r\n# Driver Code\r\nnumber = 10\r\nprint(last_Digit_Factorial(number))\r\n\r\n# Output\r\n# 0\r\n\r\n# Explanation\r\n# Factorial of 10! = 3628800\r\n# Last digit of the factorial of 10! is 0 (zero).\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if n < 0:\r\n        return \"Negative numbers are not allowed\"\r\n    if n == 0:\r\n        return 1\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        while n > 0:\r\n            n = n - 1\r\n            factorial = n * factorial_of_n(n)\r\n        return factorial\r\n\r\n\r","votes":null},{"text":"\r\n    if n < 0:\r\n        raise ValueError(f\"factorial of negative numbers is not supported {n}\")\r\n    elif n == 0:\r\n        return 1\r\n    return int(str(factorial(n))[-1])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # check if input number is negative\r\n    if n < ","votes":null},{"text":"\r\n    # Factorial = 1*2*3*...*n\r\n    if n <= 0:\r\n        return 1\r\n    return ((n % 10) * last_Digit_Factorial(n \/\/ 10))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input(\"Enter a number:\"))\r\n    print(\"Last Digit in Factorial of %d is %d\" % (num, last_Digit_Factorial(","votes":null},{"text":"\r\n    if n <= 0:\r\n        return 0\r\n    if n == 1:\r\n        return 1\r\n    if n == 2:\r\n        return 2\r\n    if n == 3:\r\n        return 6\r\n    if n == 4:\r\n        return 4\r\n    if n == 5:\r\n        return 5\r\n    if n == 6:\r\n        return 4\r\n    if n == 7:\r\n        return 3\r\n    if n == 8:\r\n        return 6\r\n    if n == 9:\r\n        return 7\r\n    if n == 10:\r\n        return 6\r\n    if n == 11:\r\n        return 9\r\n    if n == 12:\r\n        return 6\r\n    if n == 13:\r\n        return 9\r\n    if n == 14:\r\n        return 9\r\n    if n == 15:\r\n        return 9\r\n    if n == 16:\r\n        return 6\r\n    if n == 17:\r\n        return 5\r\n    if n == 18:\r\n        return 5\r\n    if n == 19:\r\n        return 9\r\n    if n == 20:\r\n        return 4\r\n    if n == 21:\r\n        return 8\r\n    if n == 22:\r\n        return 8\r\n    if n == 23:\r\n        return 8\r\n    if n == 24:\r\n        return 6\r\n    if n == 25:\r\n        return 5\r\n    if n == 26:\r\n        return 5\r\n    if n == 27:\r\n        return 7\r\n    if n == 28:\r\n        return 7\r\n    if n == 29:\r\n        return 9\r\n    if n ==","votes":null},{"text":"\r\n    \r\n    l = list(str(factorial(n)))\r\n    return int(l[-1])\r\n\r\n\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return (n % 10) * last_Digit_Factorial(n-1)\r\n\r\n\r\n\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input())\r\n    print(last_Digit_Factorial(n))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"   \r\n    # Recursive solution\r\n   ","votes":null},{"text":"\r\n    fact = [ 1 ]\r\n    for i in range(2, n+1):\r\n        fact.append(i * fact[-1])\r\n    return int(str(fact[-1])[-1])\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(last_Digit_Factorial(n))\r\n\r\n\r\n\"\"\"\r\nTest Case\r\n5\r\n","votes":null},{"text":"\r\n\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * last_Digit_Factorial(n-1)\r\n\r","votes":null},{"text":"\r\n    num = 1\r\n    for i in range(1, n+1):\r\n        num *= i\r\n    return num%10\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input(\"Enter a number: \"))\r\n    print(last_Digit_Factorial(n))\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nEnter a number: 6\r\n6\r\n\r\nSAMPLE 2\r\n\r\nEnter a number: 10\r\n10\r\n\r\nSAMPLE 3\r\n\r\nEnter a number: 12\r\n6\r\n\r\nSAMPLE 4\r\n\r\nEnter a number: 20\r\n4\r\n\r\nSAMPLE 5\r\n\r\nEnter a number: 100\r\n1\r\n\r\nSAMPLE 6\r\n\r","votes":null}],"time":{"count":27.0,"avg":116771.7826666667,"std":32598.5159002713,"cov":0.2791643251}}
{"id":578,"question":"def interleave_lists(list1,list2,list3):\r\n    \"\"\"Write a function to interleave lists of the same length.\"\"\"","answers":[{"text":"\r\n    output = []\r\n    for i in range(len(list1)):\r\n        output.append(list1[i])\r\n        output.append(list2[i])\r\n        output.append(list3[i])\r\n    return output\r\n\r\n\r","votes":126808.488},{"text":"\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r\n\r","votes":131194.824},{"text":"\r\n    # interleave two lists\r\n    interleave = []\r\n    for i in range(len(list1)):\r\n        interleave.append(list1[i])\r\n        interleave.append(list2[i])\r\n        interleave.append(list3[i])\r\n    return interleave\r\n\r","votes":131453.976},{"text":"\r\n    list4 = []\r\n    for x in range(len(list1)):\r\n        list4.append(list1[x])\r\n        list4.append(list2[x])\r\n        list4.append(list3[x])\r\n    return list4\r\n\r","votes":131455.256},{"text":"\r\n\r\n    interleaved_list = []\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\n\r","votes":133058.236},{"text":"\r\n    # if len(list1) != len(list2):\r\n    #    raise ValueError('Length of list1 must equal length of list2')\r\n    # if len(list1) != len(list3):\r\n    #    raise ValueError('Length of list1 must equal length of list3')\r\n    list4 = []\r\n    for i in range(len(list1)):\r\n        list4.append(list1[i])\r\n        list4.append(list2[i])\r\n        list4.append(list3[i])\r\n    return list4\r\n\r\n\r","votes":133068.552},{"text":"\r\n    #interleave lists\r\n    interleaved = []\r\n    for i in range(len(list1)):\r\n        interleaved.append(list1[i])\r\n        interleaved.append(list2[i])\r\n        interleaved.append(list3[i])\r\n\r\n    return interleaved\r\n\r\n\r","votes":133483.168},{"text":"\r\n    interleaved = []\r\n    for i in range(len(list1)):\r\n        interleaved.append(list1[i])\r\n        interleaved.append(list2[i])\r\n        interleaved.append(list3[i])\r\n    return interleaved\r\n\r","votes":134568.18},{"text":"\r\n    if len(list1) != len(list2):\r\n        raise ValueError(\"Lists must be the same length\")\r\n    if len(list1) != len(list3):\r\n        raise ValueError(\"Lists must be the same length\")\r\n    if len(list1) == 0:\r\n        return []\r\n    return [list1[0],list2[0],list3[0]] + interleave_lists(list1[1:],list2[1:],list3[1:])\r\n\r\n\r\n\r\n\r\n\r","votes":135052.032},{"text":"\r\n    interleave_list = []\r\n    for i in range(len(list1)):\r\n        interleave_list.append(list1[i])\r\n        interleave_list.append(list2[i])\r\n        interleave_list.append(list3[i])\r\n    return interleave_list\r\n\r\n\r","votes":135893.144},{"text":"\r\n    \r\n    #if the lists are not the same length, return an empty list\r\n    if len(list1) != len(list2) or len(list1) != len(list3):\r\n        return []\r\n    \r\n    #if the lists are the same length, make a new list and append elements\r\n    #from the other lists alternately\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    \r\n    return new_list\r\n    \r\n    \r","votes":136104.424},{"text":"\r\n    # if any of the lists is empty\r\n    if not list1 and not list2 and not list3:\r\n        return []\r\n    elif not list1:\r\n        return list2\r\n    elif not list2:\r\n        return list1\r\n    elif not list3:\r\n        return list2\r\n    else:\r\n        # interleave the first elements of each list\r\n        return [list1[0], list2[0], list3[0]] + interleave_lists(list1[1:], list2[1:], list3[1:])\r\n\r\n\r","votes":137372.42},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return new_list\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":137396.456},{"text":"\r\n    # list1: list of ints\r\n    # list2: list of ints\r\n    # list3: list of ints\r\n    # returns: list of ints\r\n\r\n    # initialize an empty list\r\n    output = []\r\n\r\n    # iterate through the lists and append the elements to the output list\r\n    for x in range(len(list1)):\r\n        output.append(list1[x])\r\n        output.append(list2[x])\r\n        output.append(list3[x])\r\n\r\n    # return the output list\r\n    return output\r\n\r\n\r","votes":138344.768},{"text":"\r\n    res=[]\r\n    for i in range(len(list1)):\r\n        res.append(list1[i])\r\n        res.append(list2[i])\r\n        res.append(list3[i])\r\n    return res\r\n\r\n\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\n\r","votes":138582.072},{"text":"\r\n    new_list = []\r\n    i = 0\r\n    while i < len(list1):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n        i += 1\r\n    return new_list\r\n\r\n\r","votes":138735.144},{"text":"\r\n    assert(len(list1) == len(list2) and len(list1) == len(list3))\r\n    \r\n    result = []\r\n    for i in range(0,len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r\n\r","votes":139279.748},{"text":"\r\n    new_list = []\r\n    i = 0\r\n    j = 0\r\n    k = 0\r\n    while i < len(list1) and j < len(list2) and k < len(list3):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[j])\r\n        new_list.append(list3[k])\r\n        i += 1\r\n        j += 1\r\n        k += 1\r\n    return new_list\r\n\r\n\r","votes":139986.72},{"text":"\r\n    interleaved = []\r\n    for i in range(len(list1)):\r\n        interleaved.append(list1[i])\r\n        interleaved.append(list2[i])\r\n        interleaved.append(list3[i])\r\n    return interleaved\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r","votes":140883.764},{"text":"\r\n    interleaved_list = []\r\n    for i in range(0, len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\n\r","votes":141269.632},{"text":"\r\n    result = []\r\n    for x in range(len(list1)):\r\n        result.append(list1[x])\r\n        result.append(list2[x])\r\n        result.append(list3[x])\r\n    return result\r\n\r\n\r\nprint(interleave_lists([1,2,3,4], [5,6,7,8], [9,10,11,12]))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":142060.4},{"text":"\r\n    # TODO: Write your solution here.\r\n    result = list()\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r\nlist1 = [1, 2, 3]\r\nlist2 = [4, 5, 6]\r\nlist3 = [7, 8, 9]\r\n\r\nprint(interleave_lists(list1, list2, list3))\r\n\r\n\r","votes":144780.412},{"text":"\r\n    # Create an empty list\r\n    interleaved_list = []\r\n    # Loop through the lists\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    # Return the list\r\n    return interleaved_list\r\n\r\n\r\n# Test your function\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r\n# Expected output:\r\n# [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\n# Create a function to remove duplicates from a list\r","votes":146943.476},{"text":"\r\n    list4 = []\r\n    for i in range(len(list1)):\r\n        list4.append(list1[i])\r\n        list4.append(list2[i])\r\n        list4.append(list3[i])\r\n    return list4\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5]\r\nlist2 = [6, 7, 8, 9, 10]\r\nlist3 = [11, 12, 13, 14, 15]\r\nprint(interleave_lists(list1, list2, list3))\r\n\r\n\r","votes":147222.752},{"text":"\r\n    result = []\r\n    i = 0\r\n    while i < len(list1):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n        i += 1\r\n    return result\r\n\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":148661.64},{"text":"\r\n    if len(list1) == len(list2) == len(list3) and len(list1) > 0:\r\n        interleaved_list = []\r\n        for i in range(len(list1)):\r\n            interleaved_list.append(list1[i])\r\n            interleaved_list.append(list2[i])\r\n            interleaved_list.append(list3[i])\r\n        return interleaved_list\r\n    else:\r\n        return \"Input lists must be non-empty and must have the same length.\"\r\n\r\n\r","votes":149062.764},{"text":"\r\n    list_of_lists = [list1,list2,list3]\r\n    interleaved_list = []\r\n    for i in range(0,len(list1),1):\r\n        for j in range(0,len(list_of_lists),1):\r\n            interleaved_list.append(list_of_lists[j][i])\r\n    return interleaved_list\r\n\r\n\r","votes":149171.048},{"text":"\r\n    \r\n    # Create an empty list.\r\n    interleaved_list = []\r\n    \r\n    # Append the contents of the three lists to the empty list.\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    \r\n    return interleaved_list\r\n\r","votes":151508.864},{"text":"\r\n    \r\n    assert len(list1) == len(list2) == len(list3)\r\n    \r\n    interleaved_list = []\r\n    \r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    \r\n    return interleaved_list\r\n\r","votes":151663.724},{"text":"\r\n\r\n    interleave_list = []\r\n\r\n    for i, item in enumerate(list1):\r\n        interleave_list.append(item)\r\n        interleave_list.append(list2[i])\r\n        interleave_list.append(list3[i])\r\n\r\n    return interleave_list\r\n\r\n\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\nprint(interleave_lists([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]))\r\n\r\n# 3. Write a recursive function to find all the divisors of a number.\r\n\r\n\r","votes":153802.124},{"text":"\r\n    list1_len = len(list1)\r\n    list2_len = len(list2)\r\n    list3_len = len(list3)\r\n    assert(list1_len == list2_len == list3_len)\r\n    if list1_len == 0:\r\n        return []\r\n    elif list1_len == 1:\r\n        return [list1[0],list2[0],list3[0]]\r\n    else:\r\n        return [list1[0],list2[0],list3[0]] + interleave_lists(list1[1:],list2[1:],list3[1:])\r\n\r\n# list1 = [1,2,3]\r\n# list2 = [4,5,6]\r\n# list3 = [7,8,9]\r\n# list1_len = len(list1)\r\n# list2_len = len(list2)\r\n# list3_len = len(list3)\r\n# assert(list1_len == list2_len == list3_len)\r\n# if list1_len == 0:\r\n#     return []\r\n# elif list1_len == 1:\r\n#     return [list1[0],list2[0],list3[0]]\r\n# else:\r\n#     return [list1[0],list2[0],list3[0]] + interleave_lists(list1[1:],list2[1:],list3[1:])\r\n\r\n# list1 = [1]\r\n# list2 = [4]\r\n# list3 = [7]\r\n# list1_len = len(list1)\r\n# list2_len = len(list2)\r\n# list3_len = len(list3)\r\n# assert(list1_len == list2_len == list3_len)\r\n# if list1_len == 0:\r\n#     return []\r\n# elif list1_len == 1:\r\n#     return [list1[0]","votes":156471.312},{"text":"\r\n    \r\n    list1_len = len(list1)\r\n    list2_len = len(list2)\r\n    list3_len = len(list3)\r\n    \r\n    if list1_len != list2_len or list1_len != list3_len:\r\n        raise ValueError(\"Lists must be the same length.\")\r\n    \r\n    interleaved_list = []\r\n    \r\n    for i in range(list1_len):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n        \r\n    return interleaved_list\r\n    \r\n\r\n\r\n\r","votes":156480.352},{"text":"\r\n    \r\n    if len(list1) == len(list2) == len(list3):\r\n        newlist = []\r\n        for i in range(len(list1)):\r\n            newlist.append(list1[i])\r\n            newlist.append(list2[i])\r\n            newlist.append(list3[i])\r\n        return newlist\r\n    else:\r\n        raise ValueError(\"The list lengths must be equal\")\r\n\r\nlist1 = [1,2,3]\r\nlist2 = [7,8,9]\r\nlist3 = [4,5,6]\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n\r","votes":158902.624},{"text":"\r\n    # Make a list of the same length as the lists\r\n    # Use a for loop to interleave the lists\r\n    # Return the interleaved list\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return new_list\r\n\r","votes":159224.332},{"text":"\r\n\r\n    length = len(list1)\r\n    result = []\r\n    for i in range(length):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n\r\n    return result\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5]\r\nlist2 = [6, 7, 8, 9, 10]\r\nlist3 = [11, 12, 13, 14, 15]\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n\r","votes":161456.684},{"text":"\r\n    \r\n    if len(list1) == 0:\r\n        return list2\r\n    elif len(list2) == 0:\r\n        return list1\r\n    else:\r\n        return [list1[0]] + [list2[0]] + [list3[0]] + interleave_lists(list1[1:],list2[1:],list3[1:])\r\n    \r\n# Testing\r\n\r\nprint(interleave_lists([1,2,3], [4,5,6], [7,8,9]))\r\nprint(interleave_lists([1,2], [4,5], [7,8]))\r\nprint(interleave_lists([], [], []))\r\n\r\n\r\n\r","votes":161859.076},{"text":"\r\n    \r\n    # check if lists are of same length\r\n    if len(list1) != len(list2) == len(list3):\r\n        raise ValueError(\"The lists must be of same length.\")\r\n    \r\n    interleave_list = []\r\n    \r\n    for i in range(len(list1)):\r\n        interleave_list.append(list1[i])\r\n        interleave_list.append(list2[i])\r\n        interleave_list.append(list3[i])\r\n    \r\n    return interleave_list\r\n\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r\n# -----------------------------------------------------------------------------\r\n\r","votes":162216.432},{"text":"\r\n    list1_len = len(list1)\r\n    list2_len = len(list2)\r\n    list3_len = len(list3)\r\n\r\n    if list1_len != list2_len or list1_len != list3_len:\r\n        raise Exception(\"All lists must be of the same length.\")\r\n    \r\n    interleaved_list = []\r\n\r\n    for i in range(list1_len):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    \r\n    return interleaved_list\r\n\r\n\r\nlist1 = [1, 2, 3]\r\nlist2 = [4, 5, 6]\r\nlist3 = [7, 8, 9]\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n\r\n#","votes":162562.832},{"text":"\r\n    if len(list1)==0 or len(list2)==0 or len(list3)==0:\r\n        return []\r\n    elif len(list1)!=len(list2) or len(list1)!=len(list3):\r\n        return []\r\n    else:\r\n        return [list1[0],list2[0],list3[0]]+interleave_lists(list1[1:],list2[1:],list3[1:])\r\n\r\n\r","votes":162934.432},{"text":"\r\n    if len(list1) == len(list2) == len(list3):\r\n        interleaved_list = []\r\n        for i in range(len(list1)):\r\n            interleaved_list.append(list1[i])\r\n            interleaved_list.append(list2[i])\r\n            interleaved_list.append(list3[i])\r\n        return interleaved_list\r\n    else:\r\n        return \"Lists must be of the same length.\"\r\n\r","votes":166567.084},{"text":"\r\n    \r\n    if len(list1) != len(list2) or len(list1) != len(list3):\r\n        raise Exception(\"All lists must be the same length\")\r\n    \r\n    list_combined = []\r\n    \r\n    for i in range(len(list1)):\r\n        list_combined.append(list1[i])\r\n        list_combined.append(list2[i])\r\n        list_combined.append(list3[i])\r\n        \r\n    return list_combined\r\n\r\nlist1 = [1,2,3]\r\nlist2 = [4,5,6]\r\nlist3 = [7,8,9]\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n# 6. Write a function to reverse a list of lists.\r\n\r","votes":169367.164},{"text":"\r\n    \r\n    if len(list1) == len(list2):\r\n        \r\n        result = []\r\n        \r\n        for i in range(len(list1)):\r\n            \r\n            result.append(list1[i])\r\n            result.append(list2[i])\r\n            result.append(list3[i])\r\n            \r\n        return result\r\n        \r\n    else:\r\n        print(\"List lengths are not equal\")\r\n\r\n \r\nlist1 = [1,2,3,4,5]\r\nlist2 = [6,7,8,9,10]\r\nlist3 = [11,12,13,14,15]\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n\r\n#","votes":169525.936},{"text":"\r\n    interleaved = []\r\n    for i in range(len(list1)):\r\n        interleaved.append(list1[i])\r\n        interleaved.append(list2[i])\r\n        interleaved.append(list3[i])\r\n    return interleaved\r\n    \r\n\r","votes":199674.324},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return new_list\r\n\r","votes":215521.988},{"text":"\r\n    if len(list1) != len(list2) or len(list1) != len(list3):\r\n        return \"Lists must be the same length\"\r\n    else:\r\n        new_list = []\r\n        for num in range(len(list1)):\r\n            new_list.extend((list1[num],list2[num],list3[num]))\r\n        return new_list\r\n\r\n\r","votes":221855.448},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return new_list\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r","votes":224576.128},{"text":"\r\n    combined_list = []\r\n    if len(list1) == len(list2) == len(list3):\r\n        for i in range(0, len(list1)):\r\n            combined_list.append(list1[i])\r\n            combined_list.append(list2[i])\r\n            combined_list.append(list3[i])\r\n        return combined_list\r\n    else:\r\n        return \"Lists of different lengths cannot be interleaved.\"\r\n\r\n\r\n\r\n\r","votes":237942.252},{"text":"\r\n    new_list = []\r\n    for i in range(0, len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return new_list\r\n\r\nlist1 = [1, 2, 3]\r\nlist2 = [4, 5, 6]\r\nlist3 = [7, 8, 9]\r\nprint(interleave_lists(list1, list2, list3))\r\n\r\n\"\"\"\r\nWrite a function to return the first element in a list.\r\n\"\"\"\r\n\r","votes":241720.696},{"text":"\r\n    interleaved = []\r\n    for i in range(len(list1)):\r\n        interleaved.append(list1[i])\r\n        interleaved.append(list2[i])\r\n        interleaved.append(list3[i])\r\n    return interleaved\r\n\r\nlist1 = [1,2,3]\r\nlist2 = [4,5,6]\r\nlist3 = [7,8,9]\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n\r\n#------------------------------------------------------------------------------\r\n#------------------------------------------------------------------------------\r\n\r","votes":246804.524},{"text":"\r\n    \r\n    if len(list1) == 0:\r\n        return list2\r\n\r\n    elif len(list2) == 0:\r\n        return list1\r\n\r\n    else:\r\n        return [list1[0]] + [list2[0]] + [list3[0]] + interleave_lists(list1[1:], list2[1:], list3[1:])\r\n\r\nprint(interleave_lists([1,2,3], [4,5,6], [7,8,9]))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":248429.92},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return new_list\r\n\r\n\r\n# print(interleave_lists([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]))\r\n\r\n\r","votes":273163.252},{"text":"\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r\n\r","votes":352801.628},{"text":"\r\n    # Write your code here\r\n    l1 = []\r\n    l2 = []\r\n    l3 = []\r\n    for i in range(0,len(list1)):\r\n        l1.append(list1[i])\r\n        l2.append(list2[i])\r\n        l3.append(list3[i])\r\n    l = [l1,l2,l3]\r\n    interleave_list = []\r\n    for i in range(0,len(list1)):\r\n        interleave_list.append(l[i%3][i])\r\n    return interleave_list\r\n\r\nprint(\"Test case 1:\")\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\nprint(\"Expected: [1, 4, 7, 2, 5, 8, 3, 6, 9]\")\r\n\r\nprint(\"Test case 2:\")\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10]))\r\nprint(\"Expected: [1, 4, 7, 2, 5, 8, 3, 6, 9, 10]\")\r\n\r\nprint(\"Test case 3:\")\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6, 7], [8, 9, 10]))\r\nprint(\"Expected: [1, 4, 8, 2, 5, 9, 3, 6, 7, 10]\")\r\n\r\nprint(\"Test case 4:\")\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]))\r\nprint(\"E","votes":null},{"text":"\r\n    interleaved_list = []\r\n    \r\n    for x in range(0,len(list1)):\r\n        interleaved_list.append(list1[x])\r\n        interleaved_list.append(list2[x])\r\n        interleaved_list.append(list3[x])\r\n    \r\n    return interleaved_list\r\n\r\n\r\n#Example\r\nlist1 = [1,2,3]\r\nlist2 = [4,5,6]\r\nlist3 = [7,8,9]\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n#Answer\r\n[1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\n\r\n\"\"\"\r","votes":null},{"text":"\r\n    zipped = list(zip(list1,list2,list3))\r\n    zipped.sort()\r\n    return [x for x in zip(*zipped)]\r\n\r\n\r\n### OUTPUT ###\r\nprint(interleave_lists([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9]))\r\n\r\n### EXPLANATION ###\r\n# zipped.sort() sorts the zipped list based on the first element of each tuple. This puts the lowest\r","votes":null},{"text":"\r\n\r\n    # Initialization\r\n    n = len(list1)\r\n    list1_temp = list(list1)\r\n    list2_temp = list(list2)\r\n    list3_temp = list(list3)\r\n    list_temp = []\r\n\r\n    # Interleave lists\r\n    for i in range(n):\r\n        list_temp.append(list1_temp[i])\r\n        list_temp.append(list2_temp[i])\r\n        list_temp.append(list3_temp[i])\r\n\r\n    # Return interleaved list\r\n    return list_temp\r\n\r\nprint(interleave_lists(['a','b','c','d'],['1','2','3','4'],['x','y','z']))\r\n# Output: ['a', '1', 'x', 'b', '2', 'y', 'c', '3', 'z', 'd']\r\n\r\nprint(interleave_lists(['a','b'],['1','2'],['x','y','z']))\r\n# Output: ['a', '1', 'x', 'b', '2', 'y', 'z']\r\n\r\nprint(interleave_lists(['a'],['1'],['x','y','z']))\r\n# Output: ['a', '1', 'x', 'y', 'z']\r\n\r\nprint(interleave_lists([],['1'],['x','y','z']))\r\n# Output: ['1', 'x', 'y', 'z']\r\n\r\nprint(interleave_lists(['a','b','c','d'],['1','2','3','4'],[]))\r\n# Output: ['a', '1', 'b', '2', 'c', '3', 'd', '4']\r\n\r\nprint(interleave_lists(['a','b','c','d'],[],['x','y','z']))\r\n# Output: ['a', 'x', 'b', 'y', 'c', 'z', 'd']\r\n\r\nprint","votes":null},{"text":"\r\n    # Your code here\r\n    if len(list1) == 0:\r\n        return list2\r\n    elif len(list2) == 0:\r\n        return list1\r\n    elif len(list1) == len(list2):\r\n        return list1 + list2\r\n    elif len(list1) > len(list2):\r\n        return list1[0:len(list2)] + list2 + interleave_lists(list1[len(list2):],list2,list3)\r\n    elif len(list1) < len(list2):\r\n        return list1 + list2[len(list1):] + interleave_lists(list1,list2[len(list1):],list3)\r\n    else:\r\n        return list1 + list2 + interleave_lists(list1,list2,list3)\r\n\r","votes":null},{"text":"\r\n    # initialize the result list\r\n    result = []\r\n    # initialize i and j to be the starting index of list1 and list2\r\n    i = 0\r\n    j = 0\r\n    # initialize k to be the starting index of list3\r\n    k = 0\r\n    # loop through the lists\r\n    while i < len(list1) and j < len(list2):\r\n        # add the first element of list1 to the beginning of result\r\n        result.insert(0, list1[i])\r\n        # add the first element of list2 to the beginning of result\r\n        result.insert(0, list2[j])\r\n        # increment the index of list1\r\n        i += 1\r\n        # increment the index of list2\r\n        j += 1\r\n        # increment the index of list3 by 1\r\n        k += 1\r\n    # if list1 is not empty, add remaining elements to result\r\n    while i < len(list1):\r\n        # add the element to the beginning of result\r\n        result.insert(0, list1[i])\r\n        # increment the index of list1\r\n        i += 1\r\n    # if list2 is not empty, add remaining elements to result\r\n    while j < len(list2):\r\n        # add the element to the beginning of result\r\n        result.insert(0, list2[j])\r\n        # increment the index of list2\r\n        j += 1\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    list1_length = len(list1)\r\n    list2_length = len(list2)\r\n    list3_length = len(list3)\r\n    if list1_length != list2_length:\r\n        return \"list1 and list2 must be the same length\"\n    if list1_length != list3_length:\n        return \"list1 and list3 must be the same length\"\n    if list2_length != list3_length:\n        return \"list2 and list3 must be the same length\"\n    interleaved_list = []\r\n    for i in range(list1_length):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6, 7], [8, 9]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6, 7], [8, 9, 10]))\r\nprint(interleave_lists([1, 2, 3, 4], [5, 6, 7], [8, 9, 10]))\r\nprint(interleave_lists([1, 2, 3, 4], [5, 6, 7, 8], [9, 10]))\r\nprint(interleave_lists([1, 2, 3, 4, 5], [6, 7, 8], [9, 10, ","votes":null},{"text":"\r\n    \r\n    if len(list1) != len(list2) or len(list3) != len(list2):\r\n        raise ValueError('lists are not of equal length')\r\n    \r\n    else:\r\n        \r\n        return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\r\n        \r\n\r\n# interleave_lists([1,2,3],['a','b','c'],[10,20,30])\r\n# interleave_lists([1,2,3],['a','b','c'],[10,20,30,40])\r\n# interleave_lists([1,2,3],['a','b','c'],[10,20,30,40,50])\r\n# interleave_lists([1,2,3],['a','b','c'],[10,20,30,40,50,60])\r\n# interleave_lists([1,2,3],['a','b','c'],[10,20,30,40,50,60,70])\r\n# interleave_lists([1,2,3],['a','b','c'],[10,20,30,40,50,60,70,80])\r\n# interleave_lists([1,2,3,4,5,6],['a','b','c','d','e','f'],[10,20,30,40,50,60])\r\n# interleave_lists([1,2,3,4,5,6],['a','b','c','d','e','f'],[10,20,30,40,50,60,70])\r\n# interleave_lists([1,2,3,4,5,6],['a','b','c','d','e','f'],[10,","votes":null},{"text":"\r\n    interleaved=[]\r\n    for i in range(len(list1)):\r\n        interleaved.append(list1[i])\r\n        interleaved.append(list2[i])\r\n        interleaved.append(list3[i])\r\n    return interleaved\r\n\r\n\r\n# Tests\r\nprint(interleave_lists([1,2,3],[9,8],[5,6,7]))\r\nprint(interleave_lists([1,2,3,4,5,6,7,8,9],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"],[1,2,3,4,5,6,7,8,9]))\r\nprint(interleave_lists([],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"],[]))\r\nprint(interle","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        yield list1[i], list2[i], list3[i]\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1) != len(list2):\r\n        return 'Lists must have the same length.'\r\n    result = []\r\n    for i in range(len(list1)):\r\n        result.append(list1[i])\r\n        result.append(list2[i])\r\n        result.append(list3[i])\r\n    return result\r\n\r\n#Testing\r\nprint(interleave_lists([1,2,3,4,5],['a','b','c','d','e'],['x','y','z']))\r\n#[1, 'a', 'x', 2, 'b', 'y', 3, 'c', 'z', 4, 'd', 'e']\r\n\r\nprint(interleave_lists([1,2,3,4,5],['a','b','c','d','e'],['x','y','z','k']))\r\n#Lists must have the same length.\r\n\r\nprint(interleave_lists([1,2,3,4,5],['a','b','c','d'],['x','y','z']))\r\n#Lists must have the same length.\r\n\r\nprint(interleave_lists([1,2,3,4,5],['a','b','c','d','e'],['x','y','z','k','l','m','n']))\r\n#Lists must have the same length.\r\n\r\nprint(interleave_lists([1,2,3,4,5],['a','b','c','d','e'],['x','y','z','k','l','m','n']))\r\n#Lists must have the same length.\r\n\r\nprint(interleave_lists([1,2,3,4,5],['a','b','c','d','e'],['x','y','z','k','l','m','n','o']))\r\n#[1, 'a', 'x', 2, 'b', 'y', 3, 'c', 'z', 'k', 'l', 'm'","votes":null},{"text":"\r\n    \r\n    if len(list1) == 0:\r\n        return list2\r\n    elif len(list2) == 0:\r\n        return list1\r\n    elif len(list1) == len(list2):\r\n        return list1 + list2\r\n    else:\r\n        shortest_list = min(list1,list2)\r\n        longest_list = max(list1,list2)\r\n        shorter_list = [x for x in shortest_list]\r\n        longer_list = [x for x in longest_list]\r\n        shorter = shorter_list\r\n        longer = longer_list\r\n        while len(shorter) != len(longer):\r\n            shorter.append(longer[len(shorter)-1])\r\n            longer.append(shorter[len(longer)-1])\r\n        longer_list = [x for x in longer_list]\r\n        shorter_list = [x for x in shorter_list]\r\n        return longer_list + shorter_list\r\n    \r\n    \r","votes":null},{"text":"\r\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(list1) < 1 or len(list2) < 1 or len(list3) < 1:\r\n        raise Exception(\"Lists must have length > 0.\")\r\n    if len(list1) != len(list2) or len(list1) != len(list3):\r\n        raise Exception(\"Lists must have the same length.\")\r\n    \r\n    interleaved_list = []\r\n    for i in range(len(list1)):\r\n        interleaved_list.append(list1[i])\r\n        interleaved_list.append(list2[i])\r\n        interleaved_list.append(list3[i])\r\n    return interleaved_list\r\n\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n# should print [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10]))\r\n# should raise an exception because the lists are of unequal length\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11]))\r\n# should raise an exception because the lists are of unequal length\r\n\r\nprint(interleave_lists([1,2,3,4,5,6,7],[4,5,6,7,8,9,10],[7,8,9,10,11,12,13]))\r\n# should print [1, 4, 7, 4, 5, 8, 7, 5, 6, 8, 6, 9, 10, 9, 10, 11, 12, 13]\r\n\r\nprint(interleave_lists([1,2,3","votes":null},{"text":"\r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n        new_list.append(list3[i])\r\n    return new_list\r\n\r\n# Tests\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11]))\r\nprint(interleave_lists([1, 2], [4, 5], [7, 8]))\r\nprint(interleave_lists([1, 2], [4, 5], [7, 8, 9]))\r\nprint(interleave_lists([1, 2], [4, 5], [7, 8, 9, 10]))\r\nprint(interleave_lists([1, 2, 3], [4, 5], [7, 8, 9, 10]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], []))\r\nprint(interleave_lists([1, 2, 3], [], [7, 8, 9, 10]))\r\nprint(interleave_lists([], [4, 5, 6], [7, 8, 9, 10]))\r\nprint(interleave_lists([], [], [7, 8, 9, 10]))\r\nprint(interleave_lists([], [], []))\r\nprint(interleave_lists([1, 2, 3], []","votes":null},{"text":"\r\n    \r\n    len1=len(list1)\r\n    len2=len(list2)\r\n    len3=len(list3)\r\n    \r\n    if(len1!=len2 or len2!=len3):\r\n        print(\"Enter lists of the same length.\")\r\n    else:\r\n        new_list=[]\r\n        for i in range(len1):\r\n            new_list.append(list1[i])\r\n            new_list.append(list2[i])\r\n            new_list.append(list3[i])\r\n        print(new_list)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    list1 = [1, 2, 3]\r\n    list2 = [4, 5, 6]\r\n    list3 = [7, 8, 9]\r\n    interleave_lists(list1,list2,list3)\r\n\r\n# Output :\r\n# [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n\r\n# Expected Output:\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n# [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n# [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n# [1, 4, 7, 2, 5, 8, 3, 6, 9]\r\n# [1, 2, 3, 4, 5, 6, 7, 8,","votes":null},{"text":"\r\n    # Start coding here\r\n    if len(list1)!=len(list2) or len(list1)!=len(list3):\r\n        return \"Your lists aren't of the same length\"\r\n    else:\r\n        list1_length = len(list1)\r\n        for i in range(0,list1_length):\r\n            list1[i] = list2[i] + list1[i] + list3[i]\r\n        return list1\r\n\r\nprint(interleave_lists(['a','b','c'],['1','2','3'],['A','B','C']))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # list = []\r\n    # for i in range(len(list1)):\r\n    #     list.append(list1[i])\r\n    #     list.append(list2[i])\r\n    #     list.append(list3[i])\r\n    # return list\r\n    # return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\r\n    # return [i for i in list1 + list2 + list3]\r\n    return [*list1,*list2,*list3]\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r","votes":null},{"text":"\r\n    if list1 == []:\r\n        return list2\r\n    elif list2 == []:\r\n        return list1\r\n    elif list3 == []:\r\n        return []\r\n    else:\r\n        return [list1[0]] + interleave_lists(list2,list3,[list1[1]])\r\n\r\n#list1 = [1,2,3]\r\n#list2 = [4,5,6]\r\n#list3 = [7,8,9]\r\n#list1 = [1,2,3,4,5,6,7,8,9]\r\n#list2 = [1,2,3,4,5,6,7,8,9]\r\n#list3 = [1,2,3,4,5,6,7,8,9]\r\n#list1 = [1,2,3,4,5,6,7,8,9]\r\n#list2 = [1,2,3,4,5,6,7,8,9]\r\n#list3 = [1,2,3,4,5,6,7,8,9]\r\n#list1 = [1,2,3,4,5,6,7,8,9]\r\n#list2 = [1,2,3,4,5,6,7,8,9]\r\n#list3 = [1,2,3,4,5,6,7,8,9]\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(list1)):\r\n        yield list1[i]\r\n        yield list2[i]\r\n        yield list3[i]\r\n\r","votes":null},{"text":"\r\n    \r\n    # Get length of lists\r\n    len1 = len(list1)\r\n    len2 = len(list2)\r\n    len3 = len(list3)\r\n    \r\n    # Check that all lists are the same length\r\n    if len1 == len2 and len2 == len3:\r\n        result = list1[0]\r\n        result.extend(list2[1:len2])\r\n        result.extend(list3[len2:])\r\n        return result\r\n    else:\r\n        return \"List lengths are not equal.\"\r\n\r\nlist1 = [1,2,3]\r\nlist2 = [4,5,6]\r\nlist3 = [7,8,9]\r\n\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n# ----------------------------------------------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    #TODO: check that all lists are of equal length\r\n    #check if list 1 is empty\r\n    if list1 == []:\r\n        return list2\r\n    #check if list 2 is empty\r\n    if list2 == []:\r\n        return list1\r\n    #check if list 3 is empty\r\n    if list3 == []:\r\n        return list1\r\n    #check if all lists are not empty\r\n    if list1 and list2 and list3:\r\n        #interleave the list\r\n        return list1[0] + list2[0] + list3[0] + interleave_lists(list1[1:],list2[1:],list3[1:])\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1) == len(list2) == len(list3):\r\n        list1 = list(list1)\r\n        list2 = list(list2)\r\n        list3 = list(list3)\r\n        for i in range(len(list1)):\r\n            list2[i] = list1[i]\r\n            list3[i] = list2[i]\r\n        return list3\r\n    else:\r\n        print(\"Lists are not of equal length. Please retry\")\r\n        main()\r\n\r\n\r","votes":null},{"text":"\r\n    \"\"\"Make a new list with list1 and list2 alternating\"\"\"\r\n    \"\"\"list3 is the result\"\"\"\r\n    \r\n    new_list = []\r\n    for i in range(len(list1)):\r\n        new_list.append(list1[i])\r\n        new_list.append(list2[i])\r\n    for i in range(len(list1),len(list1)+len(list3)):\r\n        new_list.append(list3[i-len(list1)])\r\n    return new_list\r\n\r\nprint(interleave_lists([1,2,3,4,5],[6,7,8,9,10], [11,12,13,14,15]))\r\n\r\n\r\n\"\"\"\r\nWrite a function that will calculate the sum of the squares of the numbers in a list.\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n    interleaved=[list1[i]+list2[i]+list3[i] for i in range(len(list1))]\r\n    return interleaved\r\n\r\n\r","votes":null},{"text":"\r\n    return [i for i in zip(list1,list2,list3)]\r\n\r","votes":null},{"text":"\r\n    # if all the lists have the same length\r\n    #return [item for item in list1 if item not in list2 and item not in list3] + [item for item in list2 if item not in list1 and item not in list3] + [item for item in list3 if item not in list1 and item not in list2]\r\n    if len(list1) == len(list2) and len(list1) == len(list3):\r\n        return [item for item in list1 if item not in list2 and item not in list3] + [item for item in list2 if item not in list1 and item not in list3] + [item for item in list3 if item not in list1 and item not in list2]\r\n    else:\r\n        return None\r\n\r\nprint(interleave_lists([1,2,3,4,5],[2,3,4],[1,2,3,4,5]))\r\n\r","votes":null},{"text":"\r\n    list_length = len(list1)\r\n    if len(list2) != list_length or len(list3) != list_length:\r\n        print(\"Lists are of different lengths.\")\r\n        return None\r\n    else:\r\n        for i in range(list_length):\r\n            print(list1[i],list2[i],list3[i])\r\n        return None\r\n\r\nprint(interleave_lists([\"a\",\"b\",\"c\"],[\"A\",\"B\",\"C\"],[\"1\",\"2\",\"3\"]))\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n    return [list1[i] for i in range(0, len(list1))] + [list2[i] for i in range(0, len(list2))] + [list3[i] for i in range(0, len(list3))]\r\n\r\n\r","votes":null},{"text":"\r\n    list4 = []\r\n    int_list(list1,list2,list3,list4)\r\n    return list4\r\n\r","votes":null},{"text":"\r\n    import random\r\n    list4 = []\r\n    for i in range(len(list1)):\r\n        if list1[i] is not None:\r\n            list4.append(list1[i])\r\n        else:\r\n            list4.append(list2[i])\r\n        if list3[i] is not None:\r\n            list4.append(list3[i])\r\n        else:\r\n            list4.append(list2[i])\r\n    return list4\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(list1) != len(list2):\r\n        return None\r\n    if len(list2) != len(list3):\r\n        return None\r\n    if len(list1) == 0:\r\n        return list2\r\n    if len(list2) == 0:\r\n        return list1\r\n    if len(list3) == 0:\r\n        return list1\r\n    \r\n    return [list1[0]] +","votes":null},{"text":"\r\n    if len(list1)==0:\r\n        return list3\r\n    elif len(list1) == 1:\r\n        return [list1[0],list3[0]]\r\n    elif len(list1) == 2:\r\n        return [list1[0],list2[0],list3[0]]\r\n    elif len(list1) == 3:\r\n        return [list1[0],list2[0],list3[0],list1[1],list2[1],list3[1]]\r\n    else:\r\n        return [list1[0],list2[0],list3[0],interleave_lists(list1[1:],list2[1:],list3[1:])]\r\n\r","votes":null},{"text":"\r\n    list4 = []\r\n    list4.extend(list1)\r\n    list4.extend(list2)\r\n    list4.extend(list3)\r\n    return list4\r\n\r\nif __name__ == '__main__':\r\n    list1 = [1,2,3]\r\n    list2 = [4,5,6]\r\n    list3 = [7,8,9]\r\n    list4 = interleave_lists(list1,list2,list3)\r\n    print(\"list1 =\",list1,\"list2 =\",list2,\"list3 =\",list3)\r\n    print('list4 =',list4)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #interleave list1 and list2\r\n    interleaved = [list1[0]]\r\n    for i in range(len(list1)-1):\r\n        interleaved.append(list2[i])\r\n        interleaved.append(list1[i+1])\r\n    \r\n    #interleave interleaved and list3\r\n    interleaved = interleaved + list3[len(list1):]\r\n    \r\n    return interleaved\r\n\r","votes":null},{"text":"\r\n    if len(list1) != len(list2):\r\n        raise ValueError('Lists have different lengths.')\r\n    return [x for x in list1+list2+list3 if x not in list1+list2+list3]\r\n\r","votes":null},{"text":"\r\n    list_length = len(list1)\r\n    if len(list1) != len(list2) or len(list1) != len(list3):\r\n        raise ValueError\r\n    list_length = len(list1)\r\n    interleaved_list = []\r\n    for index in range(list_length):\r\n        interleaved_list.append(list1[index])\r\n        interleaved_list.append(list2[index])\r\n        interleaved_list.append(list3[index])\r\n    return interleaved_list\r\n\r\n\r\nlist1 = [1,2,3]\r\nlist2 = [4,5,6]\r\nlist3 = [7,8,9]\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9]\r\nlist2 = [10,11,12,13,14,15,16,17,18]\r\nlist3 = [19,20,21,22,23,24,25,26,27]\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9]\r\nlist2 = []\r\nlist3 = [1,2,3,4,5,6,7,8,9]\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\nlist1 = [1,2,3,4,5,6,7,8,9]\r\nlist2 = [1,2,3,4,5,6,7,8,9]\r\nlist3 = []\r\nprint(interleave_lists(list1,list2,list3))\r\n\r\n\r\n# Exercise 14\r","votes":null},{"text":"\r\n    if len(list1) != len(list2) or len(list2) != len(list3):\r\n        raise ValueError('lists must be of equal length')\r\n    output = []\r\n    for i in range(len(list1)):\r\n        output.append(list1[i])\r\n        output.append(list2[i])\r\n        output.append(list3[i])\r\n    return output\r\n\r\n\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\nprint(interleave_lists([1, 2], [3, 4], [5, 6]))\r\nprint(interleave_lists([1, 2, 3], [4, 5], [6, 7, 8]))\r\nprint(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8]))\r\nprint(interleave_lists([1, 2, 3], [4,","votes":null},{"text":"\r\n    return [list1[0],list2[0],list3[0],list1[1],list2[1],list3[1],list1[2],list2[2],list3[2]]\r\n\r\n\r\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your solution here\r\n    list1_length = len(list1)\r\n    list2_length = len(list2)\r\n    list3_length = len(list3)\r\n    \r\n    if list1_length != list2_length != list3_length:\r\n        return None\r\n    \r\n    list1_index = 0\r\n    list2_index = 0\r\n    list3_index = 0\r\n    \r\n    list1_new = []\r\n    list2_new = []\r\n    list3_new = []\r\n    \r\n    while list1_index < list1_length:\r\n        list1_new.append(list1[list1_index])\r\n        list1_new.append(list2[list2_index])\r\n        list1_new.append(list3[list3_index])\r\n        \r\n        list2_new.append(list2[list2_index])\r\n        list2_new.append(list1[list1_index])\r\n        list2_new.append(list3[list3_index])\r\n        \r\n        list3_new.append(list3[list3_index])\r\n        list3_new.append(list1[list1_index])\r\n        list3_new.append(list2[list2_index])\r\n        \r\n        list1_index += 1\r\n        list2_index += 1\r\n        list3_index += 1\r\n        \r\n    return list1_new, list2_new, list3_new\r\n\r\ntest1 = [1,2,3,4]\r\ntest2 = [5,6,7,8]\r\ntest3 = [9,10,11,12]\r\n\r\nprint(interleave_lists(test1,test2,test3))\r\n\r\n# Should print ([1, 5, 9], [2, 6, 10], [3, 7, 11]","votes":null},{"text":"\r\n    return [i for i, j, k in zip(list1,list2,list3)]\r\n\r","votes":null},{"text":"\r\n    if len(list1) == 0 and len(list2) == 0:\r\n        return []\r\n    elif len(list1) == 0:\r\n        return list2\r\n    elif len(list2) == 0:\r\n        return list1\r\n    else:\r\n        return [list1[0]] + list2[0] + list3[0] + interleave_lists(list1[1:],list2[1:],list3[1:])\r\n\r\n\r","votes":null},{"text":"\r\n    if len(list1) == len(list2) == len(list3) and len(list1) > 0:\r\n        return [list1[0], list2[0], list3[0]] + interleave_lists(list1[1:],list2[1:],list3[1:])\r\n    else:\r\n        raise ValueError\r\n\r","votes":null},{"text":"\r\n    interleaved_list = []\r\n    for index in range(len(list1)):\r\n        interleaved_list.append(list1[index])\r\n        interleaved_list.append(list2[index])\r\n        interleaved_list.append(list3[index])\r\n    return interleaved_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]))\r\n    print(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10]))\r\n    print(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11]))\r\n    print(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 12]))\r\n    print(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 12, 13]))\r\n    print(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 12, 13, 14]))\r\n    print(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 12, 13, 14, 15]))\r\n    print(interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9,","votes":null},{"text":"\r\n    if list1 == []:\r\n        return list3\r\n    if list1 != [] and list3 == []:\r\n        return list1\r\n    if list1 != [] and list3 != []:\r\n        return list1[0:1] + list3[0:1] + interleave_lists(list1[1:],list2,list3[1:])\r\n    if list1 != [] and list3 == []:\r\n        return list1[0:1] + list2[0:1] + interleave_lists(list1[1:],list2,list3)\r\n    if list1 == [] and list3 != []:\r\n        return list2[0:1] + list3[0:1] + interleave_lists(list1,list2[1:],list3[1:])\r\n    if list1 == [] and list3 == []:\r\n        return []\r\n    \r","votes":null}],"time":{"count":52.0,"avg":165556.2813076923,"std":44923.9661885686,"cov":0.2713516264}}
{"id":579,"question":"def find_dissimilar(test_tup1, test_tup2):\r\n    \"\"\"Write a function to find the dissimilar elements in the given two tuples.\"\"\"","answers":[{"text":"\r\n    # your code here\r\n    return tuple(set(test_tup1) ^ set(test_tup2))\r\n\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5, 6)\r\ntest_tup2 = (6, 5, 4, 3, 2, 1)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n# (1, 2, 3, 4, 5, 6)\r\n# (6, 5, 4, 3, 2, 1)\r\n# (1, 2, 3, 4)\r\n\r\n# 3. Write a function to find the number of digits in an integer.\r\n\r\n\r","votes":113360.516},{"text":"\r\n    return tuple(set(test_tup1) ^ set(test_tup2))\r\n    \r\n\r\ntest_tup1 = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\")\r\ntest_tup2 = (\"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\")\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n#test_tup1 = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\")\r\n#test_tup2 = (\"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\")\r\n#print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r\n#-------------------------------------------------------------------------------------------------------------\r","votes":193635.724},{"text":"\r\n    return tuple(set(test_tup1).symmetric_difference(test_tup2))\r\n\r\nprint(find_dissimilar((1, 2, 3), (4, 5, 6)))\r\n\r","votes":201218.084},{"text":"\r\n    \r\n    a, b = test_tup1\r\n    c, d = test_tup2\r\n    \r\n    if a != c:\r\n        return a, c\r\n    elif a != d:\r\n        return a, d\r\n    elif b != c:\r\n        return b, c\r\n    elif b != d:\r\n        return b, d\r\n    else:\r\n        return \"There is no dissimilar elements.\"\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    dissimilar_elements = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar_elements.append(i)\r\n    \r\n    for j in test_tup2:\r\n        if j not in test_tup1:\r\n            dissimilar_elements.append(j)\r\n                  \r\n    return dissimilar_elements\r\n\r\n\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (3, 4, 5, 6, 7, 8)))\r\n\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8)))\r\n\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5)))\r\n\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 7, 8)))\r\n\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 7, 8, 9)))\r\n\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 7, 8, 9, 0)))\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar_set = set(test_tup1) ^ set(test_tup2)\r\n    return dissimilar_set\r\n\r\n\r\nif __name__ == '__main__':\r\n    tup_1 = (1, 4, 4, 2, 3, 5, 6, 8, 9)\r\n    tup_2 = (1, 2, 3, 5, 6, 7, 8, 9, 10)\r\n    print(find_dissimilar(tup_1, tup_2))\r\n\r\n    tup_3 = (1, 4, 4, 2, 3, 5, 6, 8, 9)\r\n    tup_4 = (1, 2, 3, 5, 6, 7, 8, 9, 10)\r\n    print(find_dissimilar(tup_3, tup_4))\r\n\r\n    tup_5 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n    tup_6 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n    print(find_dissimilar(tup_5, tup_6))\r\n\r\n    tup_7 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n    tup_8 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n","votes":null},{"text":"\r\n    a1 = test_tup1[0]\r\n    a2 = test_tup1[1]\r\n    b1 = test_tup2[0]\r\n    b2 = test_tup2[1]\r\n    # Write your code here\r\n    d1 = (a1 - b1)**2\r\n    d2 = (a2 - b2)**2\r\n    return d1 + d2\r\n\r\n\r\n# In[4]:\r\n\r\n\r\ntest_tup1 = (2, 3)\r\ntest_tup2 = (2, 4)\r\nfind_dissimilar(test_tup1, test_tup2)\r\n\r\n\r\n# In[5]:\r\n\r\n\r\n#Another example\r\ntest_tup1 = (2, 3)\r\ntest_tup2 = (3, 4)\r\nfind_dissimilar(test_tup1, test_tup2)\r\n\r\n\r\n# In[6]:\r\n\r\n\r\n#Another example\r\ntest_tup1 = (-3, 3)\r\ntest_tup2 = (3, 4)\r\nfind_dissimilar(test_tup1, test_tup2)\r\n\r\n\r\n# In[7]:\r\n\r\n\r\n#Another example\r\ntest_tup1 = (1, -3)\r\ntest_tup2 = (-3, 3)\r\nfind_dissimilar(test_tup1, test_tup2)\r\n\r\n\r\n# In[9]:\r\n\r\n\r\n#Another example\r\ntest_tup1 = (1, -3)\r\ntest_tup2 = (1, 3)\r\nfind_dissimilar(test_tup1, test_tup2)\r\n\r\n\r\n# In[10]:\r\n\r\n\r\n#Another example\r\ntest_tup1 = (-3, -3)\r\ntes","votes":null},{"text":"\r\n    count = 0\r\n    for ele in test_tup1:\r\n        if ele not in test_tup2:\r\n            count += 1\r\n    return count\r\n\r\n\r","votes":null},{"text":"\r\n    return list(set(test_tup1) ^ set(test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    \r\n    if len(test_list1) != len(test_list2):\r\n        return False\r\n    \r\n    test_list1.sort()\r\n    test_list2.sort()\r\n    \r\n    for i in range(len(test_list1)):\r\n        if test_list1[i] != test_list2[i]:\r\n            return True\r\n        \r\n    return False\r\n    \r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3, 5, 6, 9, 10, 12, 15, 17, 18, 19)\r\n    test_tup2 = (1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 19)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    test_tup1 = (1, 2, 3, 5, 6, 9, 10, 12, 15, 17, 18, 19)\r\n    test_tup2 = (1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 19)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    test_tup1 = (1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 1","votes":null},{"text":"\r\n    dissimilar = []\r\n    for i in test_tup1:\r\n        for j in test_tup2:\r\n            if i != j:\r\n                dissimilar.append((i, j))\r\n    return dissimilar\r\n\r\n\r\nprint(find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('a', 'c', 'b')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('a', 'b')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('a', 'c', 'b', 'd')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'c', 'b', 'e')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'e')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd', 'e')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd', 'f')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd', 'f', 'e')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd', 'f', 'e', 'g')))\r\nprint(find_dissimilar(('a', '","votes":null},{"text":"\r\n    t1 = []\r\n    t2 = []\r\n    k = ''\r\n    for i in range(0, len(test_tup1)):\r\n        k = test_tup1[i]\r\n        if k not in test_tup2:\r\n            t1.append(k)\r\n    for j in range(0, len(test_tup2)):\r\n        k = test_tup2[j]\r\n        if k not in test_tup1:\r\n            t2.append(k)\r\n    return t1, t2\r\n\r\n\r\ntup1 = (1, 2, 3)\r\ntup2 = (3, 4, 5)\r\ntup3 = (1, 2, 3, 4, 5, 6)\r\nprint(find_dissimilar(tup1, tup2))\r\nprint(find_dissimilar(tup2, tup1))\r\nprint(find_dissimilar(tup1, tup3))\r\nprint(find_dissimilar(tup3, t","votes":null},{"text":"\r\n    from itertools import chain\r\n    return list(chain(*zip(test_tup1, test_tup2))).count(None)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(test_tup1) == len(test_tup2):\r\n        return tuple(i for i in test_tup1 if i not in test_tup2)\r\n    else:\r\n        return tuple()\r\n\r\n\r\ntest_tup1 = ('a', 'b', 'c')\r\ntest_tup2 = ('b', 'c', 'd')\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    test_list1, test_list2 = test_tup1, test_tup2\r\n    return test_list1[test_list1.index(min(set(test_list1) - set(test_list2)))]\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3, 4, 5)\r\n    test_tup2 = (2, 4, 6)\r\n\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    print(find_dissimilar(test_tup2, test_tup1))\r\n    print(find_dissimilar([], []))\r\n    print(find_dissimilar([], (1, 2, 3)))\r\n    print(find_dissimilar((1, 2), []))\r\n    print(find_dissimilar((1, 2, 3), (2, 4)))\r\n    print(find_dissimilar((1, 2, 3, 4, 5), (2, 4, 6)))\r\n    print(find_dissimilar((2, 4, 6), (1, 2, 3, 4, 5)))\r\n    print(find_dissimilar((1, 2, 3, 4, 5), (4, 5, 6, 7, 8)))\r\n    print(find_dissimilar((4, 5, 6, 7, 8), (1, 2, 3, 4, 5)))\r\n    print(find_dissimilar((1, 2, 3, 4, 5), (3, 4, 5, 6, 7)))\r\n    print(find_dissimilar((3, 4, 5, 6, 7), (1, ","votes":null},{"text":"\r\n    return set(test_tup1) ^ set(test_tup2)\r\n\r\n\r\nprint(find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd', 'e')))\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar.append(i)\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            dissimilar.append(i)\r\n    return dissimilar\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar_list = []\r\n    for x in test_tup1:\r\n        if x not in test_tup2:\r\n            dissimilar_list.append(x)\r\n    return dissimilar_list\r\n\r\n\r\n# === DO NOT EDIT CODE BELOW THIS LINE ===\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n    doctest.testmod(verbose=True)\r\n","votes":null},{"text":"\r\n    return [x for x in test_tup1 if x not in test_tup2]\r\n\r\n\r","votes":null},{"text":"\r\n    dissim_list = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissim_list.append(test_tup1[i])\r\n    return dissim_list\r\n\r\n\r\n# Tests\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 5)))\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 3)))\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 3, 4)))\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 5, 6)))\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3)))\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 3, 4)))\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 5, 6)))\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3)))\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 3, 4)))\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 5, 6)))\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3)))\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 3, ","votes":null},{"text":"\r\n    if len(test_tup1) == len(test_tup2):\r\n        a_list = []\r\n        for i in range(len(test_tup1)):\r\n            if test_tup1[i] != test_tup2[i]:\r\n                a_list.append(i)\r\n        return a_list\r\n    else:\r\n        print(\"Please enter the same length of tuples.\")\r\n\r\n\r","votes":null},{"text":"\r\n    return [\r\n        test_tup1[i] for i in range(len(test_tup1))\r\n        if test_tup1[i] != test_tup2[i]\r\n    ]\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    dis_list = []\r\n\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dis_list.append(test_tup1[i])\r\n\r\n    return dis_list\r\n\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (1, 2, 2, 8, 6)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1=tuple(test_tup1)\r\n    test_tup2=tuple(test_tup2)\r\n    return list(set(test_tup1).symmetric_difference(test_tup2))\r\n\r\nprint(find_dissimilar((1,2,3),(4,5,6,7)))\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1 = list(test_tup1)\r\n    test_tup2 = list(test_tup2)\r\n    \r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            test_tup1.remove(i)\r\n    \r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            test_tup2.remove(i)\r\n    \r\n    return test_tup1, test_tup2\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar = []\r\n    for element in test_tup1:\r\n        if element not in test_tup2:\r\n            dissimilar.append(element)\r\n    return dissimilar\r\n\r\n\r","votes":null},{"text":"\r\n    common_elems = []\r\n    for elem in test_tup1:\r\n        if elem in test_tup2:\r\n            common_elems.append(elem)\r\n    final_elems = []\r\n    for elem in test_tup1:\r\n        if elem not in common_elems:\r\n            final_elems.append(elem)\r\n    for elem in test_tup2:\r\n        if elem not in common_elems:\r\n            final_elems.append(elem)\r\n    \r\n    return final_elems\r\n\r\n\r","votes":null},{"text":"\r\n    dissim_list = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissim_list.append(i)\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            dissim_list.append(i)\r\n    return dissim_list\r\n\r\n\r","votes":null},{"text":"\r\n    # if len(test_tup1) != len(test_tup2):\r\n    #     return \"Tuples are not of same size.\"\r\n    return [i for i in test_tup1 + test_tup2 if i not in test_tup1 or i not in test_tup2]\r\n\r\n\r\n# print(find_dissimilar((1, 2, 3, 4), (3, 4, 5, 6)))\r\n\r\n\r","votes":null},{"text":"\r\n    return [i for i in test_tup1 if i not in test_tup2]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    dissimilar = []\r\n    \r\n    for i in test_list1:\r\n        if i not in test_list2:\r\n            dissimilar.append(i)\r\n\r\n    for i in test_list2:\r\n        if i not in test_list1:\r\n            dissimilar.append(i)\r\n\r\n    return dissimilar\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if len(test_tup1) != len(test_tup2):\r\n        return \"These two tuples are not of equal length\"\r\n    else:\r\n        dissimilar_list = []\r\n        for i in range(0, len(test_tup1)):\r\n            if test_tup1[i] != test_tup2[i]:\r\n                dissimilar_list.append(i)\r\n        return dissimilar_list\r\n\r\n\r\n# print(find_dissimilar((1, 2, 3), (1, 4, 9)))\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar_tup = ()\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissimilar_tup += (i,)\r\n    return dissimilar_tup\r\n\r\n\r","votes":null},{"text":"\r\n    first_tuple = test_tup1\r\n    second_tuple = test_tup2\r\n    first_list = []\r\n    second_list = []\r\n    for i in first_tuple:\r\n        first_list.append(i)\r\n    for i in second_tuple:\r\n        second_list.append(i)\r\n    for i in first_list:\r\n        if i not in second_list:\r\n            print(i)\r\n    for i in second_list:\r\n        if i not in first_list:\r\n            print(i)\r\n\r\n\r\nfind_dissimilar((1, 2, 3, 4, 5), (2, 4, 6, 8, 10))\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1 = (1,2,3,4,5,6,7,8,9,10)\r\n    test_tup2 = (1,2,3,4,5,6,7,8,9,11)\r\n    test_list = [i for i in test_tup1 if i not in test_tup2]\r\n    return test_list\r\n\r","votes":null},{"text":"\r\n    return tuple(a for a in test_tup1 if a not in test_tup2)\r\n\r\n\r\n# test cases\r\nprint(find_dissimilar((1, 5, 8), (1, 2, 3, 4)))  # (5, 8)\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 5, 8)))  # (2, 3, 4)\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 4)))  # ()\r\nprint(find_dissimilar((1, 5, 8), (1, 2, 3, 4)))  # (5, 8)\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 5, 8)))  # (2, 3, 4)\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 4)))  # ()\r\nprint(find_dissimilar((1, 5, 8), (1, 2, 3, 4)))  # (5, 8)\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 5, 8)))  # (2, 3, 4)\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 4)))  # ()\r\nprint(find_dissimilar((1, 5, 8), (1, 2, 3, 4)))  # (5, 8)\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 5, 8)))  # (2, 3, 4)\r\nprint(find_dissimila","votes":null},{"text":"\r\n    test_tup1 = list(test_tup1)\r\n    test_tup2 = list(test_tup2)\r\n    test_tup1 = sorted(test_tup1)\r\n    test_tup2 = sorted(test_tup2)\r\n    dissimilar = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissimilar.append(test_tup1[i])\r\n    return dissimilar\r\n\r\n\r","votes":null},{"text":"\r\n    tup1, tup2 = test_tup1, test_tup2\r\n    tup1 = list(tup1)\r\n    tup2 = list(tup2)\r\n\r\n    for i in tup1:\r\n        if i not in tup2:\r\n            return i\r\n\r\n    for i in tup2:\r\n        if i not in tup1:\r\n            return i\r\n\r\n\r","votes":null},{"text":"\r\n    tup1 = test_tup1\r\n    tup2 = test_tup2\r\n\r\n    dissimilar = []\r\n    for i in tup1:\r\n        if i not in tup2:\r\n            dissimilar.append(i)\r\n\r\n    for i in tup2:\r\n        if i not in tup1:\r\n            dissimilar.append(i)\r\n    return dissimilar\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar = []\r\n    for elem1 in test_tup1:\r\n        for elem2 in test_tup2:\r\n            if elem1 != elem2:\r\n                dissimilar.append(elem1)\r\n                break\r\n    print(dissimilar)\r\n\r\nfind_dissimilar((1, 2, 3, 4), (3, 4, 5, 6))\r\nfind_dissimilar((1, 2, 3, 4), (3, 4, 5, 6, 7))\r\nfind_dissimilar((1, 2, 3, 4), (3, 4, 5, 6, 7, 8))\r\nfind_dissimilar((1, 2, 3, 4), (3, 4, 5, 6, 7, 8, 9))\r\nfind_dissimilar((1, 2, 3, 4), (3, 4, 5, 6, 7, 8, 9, 10))\r\nfind_dissimilar((1, 2, 3, 4), (3, 4, 5, 6, 7, 8, 9, 10, 11))\r\nfind_dissimilar((1, 2, 3, 4), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\r\nfind_dissimilar((1, 2, 3, 4), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\r\nfind_dissimilar((1, 2, 3, 4), (3, 4, 5, 6, 7, 8, 9, 10, 11, 1","votes":null},{"text":"\r\n    # your code here\r\n    a = []\r\n    for i in test_tup1 :\r\n        for j in test_tup2 :\r\n            if i != j:\r\n                a.append(i)\r\n    return a\r\n\r\n\r\nif __name__ == '__main__':\r\n    t1 = (1, 2, 3, 4, 5)\r\n    t2 = (1, 2, 3, 6, 7)\r\n    print(\"Dissimilar elements in {} and {} are : {}\".format(t1, t2,\r\n                                                             find_dissimilar(t1, t2)))\r\n\r\n    # Output\r\n    # Dissimilar elements in (1, 2, 3, 4, 5) and (1, 2, 3, 6, 7) are : [4, 5, 6, 7]\r\n\r\n    t1 = (\"H\", \"e\", \"l\", \"l\", \"o\")\r\n    t2 = (\"H\", \"e\", \"l\", \"l\", \"o\")\r\n    print(\"Dissimilar elements in {} and {} are : {}\".format(t1, t2,\r\n                                                             find_dissimilar(t1, t2)))\r\n\r\n    # Output\r\n    # Dissimilar elements in ('H', 'e', 'l', 'l', 'o') and ('H', 'e', 'l', 'l', 'o') are : []\r\n\r\n    t1 = (\"H\", \"e\", \"l\", \"l\", \"o\")\r\n    t2 = (\"H\", \"e\", \"l\", \"l\", \"y\")\r\n    print(\"Dissimilar elements in {} and {} are : {}\".format(t1, t2, find_dissimilar(t1, t2)))\r\n\r\n    # Output\r\n    # Dissimilar elements in ('H', 'e', 'l', '","votes":null},{"text":"\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    test_list1.sort()\r\n    test_list2.sort()\r\n    dissimilar = []\r\n    for element in test_list1:\r\n        if element not in test_list2:\r\n            dissimilar.append(element)\r\n    for element in test_list2:\r\n        if element not in test_list1:\r\n            dissimilar.append(element)\r\n    return dissimilar\r\n\r\n\r\ntest_tup1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\ntest_tup2 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm')\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Your code goes here\r\n    \r\n    lst = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            lst.append(test_tup1[i])\r\n    return lst\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1_list = list(test_tup1)\r\n    test_tup2_list = list(test_tup2)\r\n    common_elements = []\r\n    dissimilar_elements = []\r\n    for index1 in test_tup1_list:\r\n        if index1 in test_tup2_list:\r\n            common_elements.append(index1)\r\n        else:\r\n            dissimilar_elements.append(index1)\r\n    for index2 in test_tup2_list:\r\n        if index2 not in common_elements:\r\n            dissimilar_elements.append(index2)\r\n    return dissimilar_elements\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\r\n    return set(test_tup1) ^ set(test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    dissimilar_list = []\r\n    \r\n    for x, y in zip(test_tup1, test_tup2):\r\n        if x != y:\r\n            dissimilar_list.append(x)\r\n    \r\n    return dissimilar_list\r\n\r","votes":null},{"text":"\r\n    test_tup1 = list(test_tup1)\r\n    test_tup2 = list(test_tup2)\r\n    \r\n    for x in test_tup1:\r\n        if x in test_tup2:\r\n            test_tup2.remove(x)\r\n            \r\n    for x in test_tup2:\r\n        if x in test_tup1:\r\n            test_tup1.remove(x)\r\n            \r\n    return test_tup1\r\n    \r\n\r\nprint(find_dissimilar((\"a\", \"b\", \"c\", \"d\", \"e\"), (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")))\r\nprint(find_dissimilar((\"a\", \"b\", \"c\", \"d\", \"e\"), (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")))\r\nprint(find_dissimilar((\"a\", \"b\", \"c\", \"d\", \"e\"), (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")))\r\nprint(find_dissimilar((\"a\", \"b\", \"c\", \"d\", \"e\"), (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\")))\r\nprint(find_dissimilar((\"a\", \"b\", \"c\", \"d\", \"e\"), (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")))\r\n\r\n\r","votes":null},{"text":"\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    dissimilar = []\r\n    for i in test_list1:\r\n        if i not in test_list2:\r\n            dissimilar.append(i)\r\n    for i in test_list2:\r\n        if i not in test_list1:\r\n            dissimilar.append(i)\r\n    return tuple(dissimilar)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(find_dissimilar(('a', 'c'), ('a', 'b', 'c')))\r\n    print(find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c')))\r\n    print(find_dissimilar(('a', 'b', 'c'), ('a', 'c', 'd')))\r\n    print(find_dissimilar(('a', 'b', 'c'), ('a', 'c')))\r\n\r\n    print(find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c', 'd')))\r\n    print(find_dissimilar(('a', 'b', 'c'), ('a', 'c', 'd')))\r\n    print(find_dissimilar(('a', 'b', 'c'), ('a', 'c')))\r\n    print(find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c', 'd')))\r\n    print(find_dissimilar(('a', 'b', 'c'), ('a', 'c', 'd')))\r\n    print(find_dissimilar(('a', 'b', 'c'), ('a', 'c')))\r\n    print(find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c', 'd')))\r\n  ","votes":null},{"text":"\r\n\r\n    # Find the dissimilar elements in the given two tuples.\r\n    # Use the set function to find dissimilar elements.\r\n    # Use the set function to remove the common elements.\r\n    # Return the dissimilar elements.\r\n    return (set(test_tup1) - set(test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return (test_tup1[0] != test_tup2[0] or test_tup1[1] != test_tup2[1])\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup = test_tup1 + test_tup2\r\n    test_tup = set(test_tup)\r\n    test_tup = list(test_tup)\r\n    test_tup.sort()\r\n    test_tup = test_tup[0:2]\r\n    return test_tup\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return tuple(i for i in test_tup1 if i not in test_tup2)\r\n\r\n\r\n# Examples\r\n\r\nprint(find_dissimilar(('a', 'ab', 'abc', 'abcd'), ('a', 'abcd')))\r\nprint(find_dissimilar(('a', 'ab', 'abc', 'abcd'), ('a', 'ab', 'abc', 'abcd')))\r\nprint(find_dissimilar(('a', 'ab', 'abc', 'abcd'), ('a', 'ab', 'abc')))\r\nprint(find_dissimilar(('a', 'ab', 'abc', 'abcd'), ('a', 'ab', 'abc', 'ab', 'abc')))\r\nprint(find_dissimilar(('a', 'ab', 'abc', 'abcd'), ('a', 'ab', 'abc', 'ab', 'abc', 'ab', 'abc')))\r\nprint(find_dissimilar(('a', 'ab', 'abc', 'abcd'), ('a', 'ab', 'abc', 'ab', 'abc', 'ab', 'abc', 'ab', 'abc')))\r\n\r\n\r\n#Answer\r\n\r","votes":null},{"text":"\r\n    return tuple(set(test_tup1).symmetric_difference(test_tup2))\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3, 4, 5)\r\n    test_tup2 = (2, 3, 5, 7, 9)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n    test_tup3 = ('a', 'b', 'c')\r\n    test_tup4 = ('b', 'c', 'd')\r\n    print(find_dissimilar(test_tup3, test_tup4))\r\n\r\n    test_tup5 = ('a', 'b', 'c')\r\n    test_tup6 = ('a', 'b', 'c')\r\n    print(find_dissimilar(test_tup5, test_tup6))\r\n\r\n    test_tup7 = ()\r\n    test_tup8 = ()\r\n    print(find_dissimilar(test_tup7, test_tup8))\r\n\r\n    test_tup9 = (\"a\", \"b\", \"c\", \"d\", \"e\")\r\n    test_tup10 = (\"a\", \"b\", \"c\")\r\n    print(find_dissimilar(test_tup9, test_tup10))\r\n\r\n    test_tup11 = (\"a\", \"b\", \"c\", \"d\", \"e\")\r\n    test_tup12 = (\"a\", \"b\", \"c\", \"d\", \"e\")\r\n    print(find_dissimilar(test_tup11, test_tup12))\r\n\r\n    test_tup13 = (\"a\", \"b\", \"c\", \"d\", \"e\")\r\n    test_tup14 = (\"a\"","votes":null},{"text":"\r\n    \r\n    list1 = list(test_tup1)\r\n    list2 = list(test_tup2)\r\n    \r\n    dissimilar_list = []\r\n    \r\n    for x in list1:\r\n        if x not in list2:\r\n            dissimilar_list.append(x)\r\n            \r\n    for x in list2:\r\n        if x not in list1:\r\n            dissimilar_list.append(x)\r\n            \r\n    dissimilar_list.sort()\r\n    \r\n    return dissimilar_list\r\n\r\n    \r","votes":null},{"text":"\r\n    \r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            print i\r\n\r\n\r\ntest_tup1 = (1, 2, 3)\r\ntest_tup2 = (2, 3, 4)\r\n\r\nfind_dissimilar(test_tup1, test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    dissim = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            dissim.append(i)\r\n    return dissim\r\n\r\n\r","votes":null},{"text":"\r\n    print('Tuples 1:', test_tup1)\r\n    print('Tuples 2:', test_tup2)\r\n    \r\n    dissimilar_list = []\r\n\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissimilar_list.append(test_tup1[i])\r\n\r\n    print('Dissimilar elements:', dissimilar_list)\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissimilar.append(test_tup1[i])\r\n            dissimilar.append(test_tup2[i])\r\n    return sorted(dissimilar)\r\n\r\n\r\nprint(find_dissimilar(('a', 'b', 'c'), ('b', 'c', 'd')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('b', 'c', 'd', 'a')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('b', 'c', 'd', 'e')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('b', 'c', 'd', 'e', 'a')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('b', 'c', 'd', 'e', 'a', 'a')))\r\nprint(find_dissimilar(('a', 'b', 'c'), ('b', 'c', 'd', 'e', 'a', 'a', 'e', 'd')))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    test_tup1_list = list(test_tup1)\r\n    test_tup2_list = list(test_tup2)\r\n    \r\n    dissimilar_list = []\r\n    for i in range(len(test_tup1_list)):\r\n        if test_tup1_list[i] != test_tup2_list[i]:\r\n            dissimilar_list.append(test_tup1_list[i])\r\n            \r\n    return tuple(dissimilar_list)\r\n\r\n\r","votes":null},{"text":"\r\n    a = test_tup1\r\n    b = test_tup2\r\n    common = []\r\n    for i in range(len(a)):\r\n        for j in range(len(b)):\r\n            if a[i] == b[j]:\r\n                common.append(a[i])\r\n    common = set(common)\r\n    final = []\r\n    for i in range(len(a)):\r\n        if a[i] not in common:\r\n            final.append(a[i])\r\n    for i in range(len(b)):\r\n        if b[i] not in common:\r\n            final.append(b[i])\r\n    return tuple(final)\r\n\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 5)))\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 4)))\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 4, 5)))\r\nprint(find_dissimilar((1, 2, 3, 4), (1, 2, 3, 4, 5, 6)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 7)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3,","votes":null},{"text":"\r\n    \r\n    dissimilar = [test_tup1[i] for i in range(len(test_tup1)) if test_tup1[i] != test_tup2[i]]\r\n    return dissimilar\r\n\r","votes":null},{"text":"\r\n    dissimilars = set(test_tup1) ^ set(test_tup2)\r\n    return dissimilars\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    dissimilar_list = []\r\n    \r\n    for test_tup1_item in test_tup1:\r\n        if test_tup1_item not in test_tup2:\r\n            dissimilar_list.append(test_tup1_item)\r\n            \r\n    for test_tup2_item in test_tup2:\r\n        if test_tup2_item not in test_tup1:\r\n            dissimilar_list.append(test_tup2_item)\r\n            \r\n    return tuple(dissimilar_list)\r\n\r\n\r","votes":null},{"text":"\r\n    if len(test_tup1) != len(test_tup2):\r\n        return \"The given tuples are not of equal size!\"\r\n    else:\r\n        return tuple(sorted(set((test_tup1 + test_tup2)) - set(test_tup1) - set(test_tup2)))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return tuple(sorted(test_tup1 + test_tup2))[-2:]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    dissim_list = []\r\n    \r\n    for element in test_tup1:\r\n        if element not in test_tup2:\r\n            dissim_list.append(element)\r\n    \r\n    return dissim_list\r\n\r\n\r\n### UNIT TESTS ###\r\nif __name__ == \"__main__\":\r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8)\r\n    test_tup2 = (1, 2, 3, 4, 5)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    \r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    \r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 9)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    \r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8)\r\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n    \r\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7","votes":null},{"text":"\r\n    dissimilar_elements = []\r\n    for t1, t2 in zip(test_tup1, test_tup2):\r\n        if t1 != t2:\r\n            dissimilar_elements.append(t2)\r\n    return dissimilar_elements\r\n\r\n\r\nprint(find_dissimilar((\"a\", \"b\", \"c\"), (\"a\", \"b\", \"d\")))\r\nprint(find_dissimilar((\"a\", \"b\", \"c\"), (\"a\", \"e\", \"d\")))\r\n\r\n# ##########################################################\r\n\r","votes":null},{"text":"\r\n    \r\n    return (test_tup1[0], test_tup1[1], test_tup1[2], test_tup1[3], test_tup1[4], test_tup1[5], test_tup1[6], test_tup1[7], test_tup1[8], test_tup1[9], test_tup1[10])\r\n\r\n\r","votes":null},{"text":"\r\n    return [val1 for val1, val2 in zip(test_tup1, test_tup2) if val1 != val2]\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_tup1 = (1, 2, 3, 4, 5)\r\n    test_tup2 = (1, 2, 2, 4, 5)\r\n    print(find_dissimilar(test_tup1, test_t","votes":null},{"text":"\r\n\r\n    test_list = list(test_tup1)\r\n\r\n    for i in range(len(test_list)):\r\n        if(test_list[i] != test_tup2[i]):\r\n            print(\"Dissimilar Elements:\", test_list[i], \"and\", test_tup2[i])\r\n\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\r\ntest_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\r\n\r\nfind_dissimilar(test_tup1, test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0] ^ test_tup2[0]), (test_tup1[1] ^ test_tup2[1])\r\n\r\n\r\n# Write your code above.\r\n\r\nif __name__ == '__main__':\r\n    print('a. Testing find_dissimilar()')\r\n    print(find_dissimilar((1, 3), (1, 2)))\r\n    print(find_dissimilar((1, 2), (1, 3)))\r\n    print(find_dissimilar((1, 0), (1, 1)))\r\n    print(find_dissimilar((1, 1), (1, 0)))\r\n\r\n    print('b. Testing find_dissimilar_with_set()')\r\n    print(find_dissimilar_with_set((1, 3), (1, 2)))\r\n    print(find_dissimilar_with_set((1, 2), (1, 3)))\r\n    print(find_dissimilar_with_set((1, 0), (1, 1)))\r\n    print(find_dissimilar_with_set((1, 1), (1, 0)))\r\n\r\n    print('c. Testing find_dissimilar_with_dict()')\r\n    print(find_dissimilar_with_dict((1, 3), (1, 2)))\r\n    print(find_dissimilar_with_dict((1, 2), (1, 3)))\r\n    print(find_","votes":null},{"text":"\r\n    # The set() method creates a new set with elements in the same order as the original set.\r\n    # The set() method is used to create a new set from any iterable of any object.\r\n    # The set() method creates a new set with elements in the same order as the original set.\r\n    # The set() method is used to create a new set from any iterable of any object.\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n\r\n    # Create an empty list.\r\n    dissimilar_elements = []\r\n\r\n    # Loop through the first tuple.\r\n    for element in test_tup1:\r\n\r\n        # Check if the element is in the second tuple.\r\n        if element not in test_tup2:\r\n            # If the element is not in the second tuple, append it to the list.\r\n            dissimilar_elements.append(element)\r\n\r\n    # Return the list.\r\n    return dissimilar_elements\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n\r\n# Tests\r\n\r\n# Create a tuple of integers.\r\ntest_tup1 = (1,2,3,4,5,6,7,8,9,10)\r\n\r\n# Create another tuple of integers.\r\ntest_tup2 = (2,4,6,8,10,12,14,16,18,20)\r\n\r\n# Call the function.\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n# This code is written by Mohammed Faisal Khan\r\n\r\n# -----------------------------------------------------------------------------\r\n\r\n# Solution\r\n\r\n#","votes":null},{"text":"\r\n    \r\n    return [x for x in test_tup1 if x not in test_tup2]\r\n\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 6, 7)))\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1.sort()\r\n    test_tup2.sort()\r\n    result = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            result.append(i)\r\n    for j in test_tup2:\r\n        if j not in test_tup1:\r\n            result.append(j)\r\n    return result\r\n\r\n\r\n# print(find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd')))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    tup1 = test_tup1\r\n    tup2 = test_tup2\r\n\r\n    dissim_list = []\r\n\r\n    for i in tup1:\r\n        if i not in tup2:\r\n            dissim_list.append(i)\r\n\r\n    for i in tup2:\r\n        if i not in tup1:\r\n            dissim_list.append(i)\r\n\r\n    return dissim_list\r\n\r\n\r\nprint(find_dissimilar((1,2,3,4,5), (4,5,6,7,8)))\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    diss = set(test_tup1) ^ set(test_tup2)\r\n    return diss\r\n\r\n\r\ntest_tup1 = (1,2,3,4)\r\ntest_tup2 = (2,3,4,5,6)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1 = tuple(test_tup1)\r\n    test_tup2 = tuple(test_tup2)\r\n    print(\"The dissimilar elements in the given two tuples are:\")\r\n    print(test_tup1 - test_tup2)\r\n    print(test_tup2 - test_tup1)\r\n\r\n\r","votes":null},{"text":"\r\n    tup1 = test_tup1\r\n    tup2 = test_tup2\r\n    \r\n    # write your code here\r\n    \r\n    dissimilar = []\r\n    for i in range(0,len(tup1)):\r\n        if tup1[i] != tup2[i]:\r\n            dissimilar.append(tup1[i])\r\n            dissimilar.append(tup2[i])\r\n    \r\n    return dissimilar\r\n\r\n\r","votes":null},{"text":"\r\n    assert len(test_tup1) == len(test_tup2), \"The two tuples must be of same length\"\r\n    res = []\r\n    for index, value in enumerate(test_tup1):\r\n        if value != test_tup2[index]:\r\n            res.append(value)\r\n    return res\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in test_tup1:\r\n        if i not in test_tup2:\r\n            result.append(i)\r\n    for i in test_tup2:\r\n        if i not in test_tup1:\r\n            result.append(i)\r\n    return result\r\n\r\n\r","votes":null},{"text":"\r\n    dissimilar = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissimilar.append(test_tup1[i])\r\n    return dissimilar\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_tup1 = (1, 2, 3)\r\n    test_tup2 = (1, 2, 4)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n    test_tup1 = (1, 2, 3)\r\n    test_tup2 = (1, 2, 3)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n    test_tup1 = (1, 2, 3)\r\n    test_tup2 = (1, 2, 3, 4)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n    test_tup1 = (1, 2, 3)\r\n    test_tup2 = (1, 2, 3, 5)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n    test_tup1 = (1, 2, 3)\r\n    test_tup2 = (1, 2, 3, 1)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n    test_tup1 = (1, 2, 3)\r\n    test_tup2 = (1, 2, 3, 1, 2, 3)\r\n    print(find_dissimilar(test_tup1, test_tup2))\r\n\r\n    test_tup1 = ","votes":null},{"text":"\r\n    # Find the index of the first dissimilar element in the two given tuples.\r\n    index = 0\r\n    while test_tup1[index] == test_tup2[index]:\r\n        index += 1\r\n\r\n    # Return the dissimilar element.\r\n    return test_tup1[index]\r\n\r\n\r\n# The following code is to test the function.\r\ntest_tup1 = (1, 2, 3, 4)\r\ntest_tup2 = (2, ","votes":null},{"text":"\r\n\r\n    test_tup1 = tuple(test_tup1)\r\n    test_tup2 = tuple(test_tup2)\r\n\r\n    if len(test_tup1) != len(test_tup2):\r\n        return \"Sorry but the tuples are not the same length\"\r\n    else:\r\n        for i in range(len(test_tup1)):\r\n            if not test_tup1[i] == test_tup2[i]:\r\n                return test_tup1[i], test_tup2[i]\r\n\r\n\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 6)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7)))\r\nprint(find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 7)))\r\n\r\n\r","votes":null},{"text":"\r\n    return tuple(x for x in test_tup1 if x not in test_tup2)\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1_set = set(test_tup1)\r\n    test_tup2_set = set(test_tup2)\r\n    return test_tup1_set ^ test_tup2_set\r\n\r\n\r\ntest_tup1 = (1, 2, 3, 4, 5)\r\ntest_tup2 = (1, 2, 4, 5, 6)\r\nprint(find_dissimilar(test_tup1, test_tup2))\r\n\r\n","votes":null},{"text":"\r\n    if len(test_tup1) == len(test_tup2):\r\n        return []\r\n    else:\r\n        dissim_list = []\r\n        for i in test_tup1:\r\n            if i not in test_tup2:\r\n                dissim_list.append(i)\r\n        for i in test_tup2:\r\n            if i not in test_tup1:\r\n                dissim_list.append(i)\r\n        return dissim_list\r\n\r\n\r\nprint(find_dissimilar(('a', 'b', 'c'), ('c', 'd', 'a', 'e')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('c', 'd', 'a', 'e')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('c', 'd', 'e')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('c', 'd', 'e', 'f')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('c', 'd', 'e', 'f', 'g')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('c', 'd', 'e', 'f', 'g', 'h')))\r\nprint(find_dissimilar(('a', 'b', 'c', 'd'), ('c', 'd', 'e', 'f', 'g', 'h', 'i')))\r\n","votes":null},{"text":"\r\n\r\n    test_tup1 = set(test_tup1)\r\n    test_tup2 = set(test_tup2)\r\n    test_tup1.difference_update(test_tup2)\r\n    test_tup2.difference_update(test_tup1)\r\n    return test_tup1, test_tup2\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    dissimilar = []\r\n    \r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            dissimilar.append(test_tup1[i])\r\n    \r\n    return dissimilar\r\n\r\n\r\nprint(find_dissimilar((1, 2, 3), (1, 2, 3)))\r\nprint(find_dissimilar((1, 2, 3), (","votes":null},{"text":"\r\n    if len(test_tup1) != len(test_tup2):\r\n        return -1\r\n    else:\r\n        for num1, num2 in zip(test_tup1, test_tup2):\r\n            if num1 != num2:\r\n                return num1, num2\r\n        return -1\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    res = []\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] != test_tup2[i]:\r\n            res.append(i)\r\n        \r\n    return res\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Create empty lists\r\n    common_list = []\r\n    dissimilar_list1 = []\r\n    dissimilar_list2 = []\r\n\r\n    # For loop to find common elements in both tuples\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] in test_tup2:\r\n            common_list.append(test_tup1[i])\r\n\r\n    # For loop to find the dissimilar elements in tuple1\r\n    for i in range(len(test_tup1)):\r\n        if test_tup1[i] not in common_list:\r\n            dissimilar_list1.append(test_tup1[i])\r\n\r\n    # For loop to find the dissimilar elements in tuple2\r\n    for i in range(len(test_tup2)):\r\n        if test_tup2[i] not in common_list:\r\n            dissimilar_list2.append(test_tup2[i])\r\n\r\n    # Print the dissimilar elements\r\n    print(\"Dissimilar elements in tuple1:\", dissimilar_list1)\r\n    print(\"Dissimilar elements in tuple2:\", dissimilar_list2)\r\n\r\n\r\n# Driver code\r\ntest_tup1 = (1, 2, 3, 4, 5, 6)\r\ntest_tup2 = (1, 2, 3, 7, 8, 9)\r\n\r\nfind_dissimilar(test_tup1, test_tup2)\r\n\r\n\r\n# OUTPUT\r\n\r\n# Dissimilar elements in tuple1","votes":null},{"text":"\r\n    # your code here\r\n    list1 = list(test_tup1)\r\n    list2 = list(test_tup2)\r\n\r\n    list1_set = set(list1)\r\n    list2_set = set(list2)\r\n\r\n    dissimilar_list = list1_set ^ list2_set\r\n\r\n    return dissimilar_list\r\n\r\n\r","votes":null},{"text":"\r\n    test_tup1.sort()\r\n    test_tup2.sort()\r\n    # print(test_tup1)\r\n    # print(test_tup2)\r\n    index = 0\r\n    for i in test_tup1:\r\n        if i in test_tup2:\r\n            while test_tup2[index] != i:\r\n                index += 1\r\n            test_tup2.pop(index)\r\n            # print(test_tup2)\r\n        else:\r\n            test_tup1.pop(index)\r\n            # print(test_tup1)\r\n\r\n    if test_tup1 == test_tup2:\r\n        return \"Equal\"\r\n    else:\r\n        print(test_tup1)\r\n        print(test_tup2)\r\n        return \"Not Equal\"\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    test_tup1 = tuple(map(int, input().rstrip().split()))\r\n\r\n    m = int(input())\r\n\r\n    test_tup2 = tuple(map(int, input().rstrip().split()))\r\n\r\n    result = find_dissimilar(test_tup1, test_tup2)\r\n\r\n    fptr.write(result + '\\n')\r\n\r\n    fptr.close()\r\n\r\n\r\n\"\"\"\r\nSample Test Case\r\nInput:\r\n5\r\n1 2 3 3 4\r\n5\r\n1 2 3 4 5\r\nOutput:\r\nNot Equal\r\n1 2 4\r\n1 2 3 5\r\n\r\nInput:\r\n5\r\n1 2 3 3 4\r\n5\r\n1 2 3 4 5\r\nOutput:\r\nEqual\r","votes":null},{"text":"\r\n    test_list1 = list(test_tup1)\r\n    test_list2 = list(test_tup2)\r\n    intersection_elements = set(test_list1).intersection(test_list2)\r\n    union_elements = set(test_list1).union(test_list2)\r\n    dissimilar_elements = list(union_elements.difference(intersection_elements))\r\n    return dissimilar_elements\r\n\r\n\r","votes":null},{"text":"\r\n    test1 = test_tup1[0]\r\n    test2 = test_tup2[0]\r\n    return (test1 - test2)\r\n\r\n\r","votes":null},{"text":"\r\n    return (test_tup1[0] if test_tup1[0] != test_tup2[0] else test_tup1[1],\r\n            test_tup1[1] if test_tup1[1] != test_tup2[1] else test_tup1[0])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    common_elements = []\r\n    \r\n    for element1 in test_tup1:\r\n        for element2 in test_tup2:\r\n            if element1 == element2:\r\n                common_elements.append(element1)\r\n                \r\n    return list(set(test_tup1) - set(common_elements)), list(set(test_tup2) - set(common_elements))\r\n\r\nprint(find_dissimilar((1,2,3,4), (2,3,4,5,6)))\r\nprint(find_dissimilar((3,2,5,7), (4,2,3,5,8)))\r\nprint(find_dissimilar((4,2,5,7), (4,2,3,5,8)))\r\nprint(find_dissimilar((4,2,5,7), (4,2,3,5,8), (6,7,8,9,10)))\r\nprint(find_dissimilar((4,2,5,7), (4,2,3,5,8), (6,7,8,9,10), (11,12,13,14,15)))\r\nprint(find_dissimilar((4,2,5,7), (4,2,3,5,8), (6,7,8,9,10), (11,12,13,14,15), (16,17,18,19,20)))\r\nprint(find_dissimilar((1,2,3,4), (2,3,4,5,6), (6)))\r\nprint(find_dissimilar((1,2,3,4), (2,3,4,5,6), (6), (11,12,13,14,15)))\r\nprint(find_dissimilar((1,2,3,4), ","votes":null},{"text":"\r\n\r\n    return [test_tup1[i] for i in range(len(test_tup1)) if test_tup1[i] != test_tup2[i]]\r\n\r\n\r","votes":null}],"time":{"count":3.0,"avg":169404.7746666667,"std":48683.5931594473,"cov":0.2873802893}}
{"id":581,"question":"def surface_Area(b,s):\r\n    \"\"\"Write a python function to find the surface area of the square pyramid.\"\"\"","answers":[{"text":"\r\n    return 2*b*s + b*b\r\n\r\n\r","votes":84596.704},{"text":"\r\n    return ((2 * b * s) + (b * b))\r\n\r\n\r","votes":97704.676},{"text":"\r\n    return (2 * b * s) + (b * b)\r\n\r\n\r\n# In[10]:\r\n\r\n\r\nsurface_Area(2, 3)\r\n\r\n\r\n# In[11]:\r\n\r\n\r","votes":124042.552},{"text":"\r\n    return (b**2)\/3 + (b*s)\/2\r\n\r\n\r","votes":null},{"text":"\r\n    return (b * s) \/ 3\r\n\r","votes":null},{"text":"\r\n    bh,sb = b\/2,s\/2\r\n    area = (b*b*bh) + (sb*sb*sb)\r\n    return area\r\n\r","votes":null},{"text":"\r\n    return (b*s)\/3\r\n\r\n# Area of the base\r\nbase_area = 8.0\r\n# Sides of the base\r\nside_length = 2.0\r\n\r\n# Print the result\r\nprint(\"The surface area of the square pyramid is\", round(surface_Area(side_length,base_area),2))\r\n\r\n\r\n# Write a program to find the surface area of the cylinder.\r\n# The radius of the cylinder and height of the cylinder are 2.0 and 3.0 respectively.\r\n# The program should print the surface area of the cylinder.\r\n\r\n# The formula for the surface area of the cylinder is A = 2\u03c0r(r+h)\r\n# where r is the radius and h is the height\r\n\r\n# Define a function named surface_Area\r","votes":null},{"text":"\r\n    \r\n    return 0.5*b*b*s\r\n\r","votes":null},{"text":"\r\n    s_area= b**2\r\n    return(s_area)\r\n\r\n\r","votes":null},{"text":"\r\n    return 2*b*s + 2*b*b*sqrt((s**2)\/4 + (b**2)\/4)\r\n\r\n\r","votes":null},{"text":"\r\n    return b*s*4\/3\r\n\r\n\r","votes":null},{"text":"\r\n    return (b**2)*3\/2 + b*s\r\n\r\n\r","votes":null},{"text":"\r\n    return 2*b*s+2*b*b\r\n    \r\n\r\n\r\n#Code ends here\r\n\r\n\r\n# --------------\r\n#Code starts here\r","votes":null},{"text":"\r\n    return 2*(b**2 + b*s + (s**2)\/3)\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    return 2*b*s+2*b*b\r\n    \r\nimport math\r\n\r","votes":null},{"text":"\r\n\r\n    # area of base\r\n    base = b**2\r\n\r\n    # area of square pyramid\r\n    pyramid = (base*(2*b+s))\/3\r\n\r\n    # returning the area of the pyramid\r\n    return pyramid\r\n\r\n\r\n# Driver Code\r\n# taking the inputs from the user\r\nb = float(input(\"Enter the side of the base:\"))\r\ns = float(input(\"Enter the height:\"))\r\n\r\n# calling the function\r\nprint(surface_Area(b,s))\r\n\r\n\r\n\"\"\"\r\nSample Testcase:\r\nInput 1:\r\nEnter the side of the base:2\r\nEnter the height:6\r\n\r\nOutput 1:\r\n16.0\r\n\r\nInput 2:\r\nEnter the side of the base:1\r\nEnter the height:4\r\n\r\nOutput 2:\r\n1.0\r\n\r\nInput 3:\r\nEnter the side of the base:4\r\nEnter the height:4\r\n\r\nOutput 3:\r\n16.0\r\n\r\nTime Complexity: O(1)\r\nSpace Complexity: O(1)\r\n\"\"\"\r\n","votes":null},{"text":"\r\n    return 2 * (b ** 2) + (b * s)\r\n\r\n\r","votes":null},{"text":"\r\n    area=0.5*b*s\r\n    return area\r\n\r\n\r\nb=float(input(\"Enter the base length of the square pyramid: \"))\r\ns=float(input(\"Enter the height of the square pyramid: \"))\r\narea=surface_Area(b,s)\r\nprint(\"Surface area of the square pyramid is: \", area)\r\n\r\n#Surface Area of the Cube\r\n\r","votes":null},{"text":"\r\n    return 0.5*b*s+b*s**2\r\n\r\narea=surface_Area(b,s)\r\n\r\nprint(area)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    area=b*s+b*s\/2\r\n    return area\r\n\r\n\r","votes":null},{"text":"\r\n    area = (b*s)\/3\r\n    return area\r\n\r\n\r","votes":null},{"text":"\r\n    #b=base\r\n    #s=surface\r\n    return (b**2)\/3+b*s\r\n\r","votes":null},{"text":"\r\n    area = (b*b) * 3 \/ 2\r\n    return area\r\n\r\nb = float(input(\"Enter the value of base of the square pyramid : \"))\r\ns = float(input(\"Enter the value of height of the square pyramid : \"))\r\nprint(\"The surface area of the square pyramid is : \",surface_Area(b,s))\r\n\r\n\"\"\"Write a python function to find the surface area of a cube. \"\"\"\r\n\r","votes":null},{"text":"\r\n    return (b*s)\/3\r\n\r\n\r","votes":null},{"text":"\r\n    return (2*b*s+s*s)\r\n\r\n\r","votes":null},{"text":"\r\n    return 0.5*b*s\r\n\r","votes":null},{"text":"\r\n    surface_area = (1\/3)*(b*b*s)\r\n    print ('Surface Area of the square pyramid = ',surface_area)\r\n\r\n\r","votes":null},{"text":"\r\n    area=0.5*b*s\r\n    print(area)\r\n\r\nsurface_Area(3,4)\r\n\r","votes":null},{"text":"\r\n    return (b**2 + b*s)\/3\r\n\r\n\r","votes":null},{"text":"\r\n    #b=base\r\n    #s=side\r\n    a=b*s\r\n    return a\r\n    \r\n","votes":null},{"text":"\r\n    return (b**2)\/3 + b*s\r\n\r\n\r","votes":null},{"text":"\r\n    return (0.5*b*s*s)+(b*s)\r\nprint(surface_Area(4,3))\r\n\r","votes":null},{"text":"\r\n    \"\"\"The function takes two inputs: base and square of the pyramid.\"\"\"\r\n    \"\"\"It should return the surface area of the pyramid.\"\"\"\r\n    \"\"\"The formula for surface area of a pyramid is: 2*base + 2*sqr(height) + sqr(base)\"\"\"\r\n    return 2*b + 2*s + b*s\r\n\r\n\r\nprint(surface_Area(10, 20))\r\nprint(surface_Area(10, 30))\r\nprint(surface_Area(10, 50))\r\n\r\n\r","votes":null},{"text":"\r\n    return 5\r\n\r\n\r","votes":null},{"text":"\r\n    #Calculate the surface area of the square pyramid.\r\n    #Area of the base\r\n    area_of_base = b * b\r\n    #Area of the pyramid\r\n    area_of_pyramid = area_of_base * s \/ 3\r\n    print(\"Area of the square pyramid is {}.\".format(area_of_pyramid))\r\n\r","votes":null},{"text":"\r\n    return 0.5*b*s+b*s*(s\/2)\r\n\r\n\r","votes":null},{"text":"\r\n    surface_area = (b**2+b**2) * s \/ 3\r\n    return surface_area\r\n\r\n\r\nb = float(input(\"Enter the length of the base: \\n\"))\r\ns = float(input(\"Enter the height of the pyramid: \\n\"))\r\nprint(\"The surface area of the pyramid is: \", surface_Area(b,s))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return (b**2 + b*s)\/3\r\n\r","votes":null},{"text":"\r\n    return b*s*2\r\n\r\n\r","votes":null},{"text":"\r\n    return (b**2 + (b**2)\/2)\r\n\r","votes":null},{"text":"\r\n    area = b**2*3\/2 + s**2*3\/2\r\n    return area\r\n\r","votes":null},{"text":"\r\n    return b * s \/ 3\r\n\r\n\r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                                                                                                     #\r\n#                               ","votes":null},{"text":"\r\n    s=s*b\r\n    return s\r\n\r","votes":null},{"text":"\r\n    area = 0\r\n    area = (b**2) * 4\/3 + (b*s)\/3\r\n    print(\"Surface area =\",area)\r\n    return area\r\n\r\n\r","votes":null},{"text":"\r\n    #Function to calculate the surface area of the square pyramid.\r\n    area=0.5*b*s\r\n    return area\r\n\r","votes":null},{"text":"\r\n    area=2*b*s+2*b*s\r\n    return area\r\n\r\nb=float(input(\"Enter the base of the pyramid:\"))\r\ns=float(input(\"Enter the side of the pyramid:\"))\r\nprint(\"The surface area of the square pyramid is:\",surface_Area(b,s),\"cm^2\")\r\n\r","votes":null},{"text":"\r\n    return 0.5*b*s+b*b\r","votes":null},{"text":"\r\n    return 2*b*s + 2*b*b\r\n\r\n\"\"\"Write a python function to find the volume of the square pyramid.\"\"\"\r","votes":null},{"text":"\r\n    return (b**2)\/3 + (b*s)\/2\r\nsurface_Area(5, 11)\r\n\r\n\r","votes":null},{"text":"\r\n    return 2*(b*s)+3*(b*b)\r\n\r","votes":null},{"text":"\r\n    area = 1\/3 * b * s * (b + s + s)\r\n    return area\r\n\r\n\r","votes":null},{"text":"\r\n    return 0.5*b*s + s*b\r\n\r\n# -------------------------------------------------------------------------\r","votes":null},{"text":"\r\n    return 0.5*b*b + 4*b*s\r\n\r","votes":null},{"text":"\r\n    return (b**2+b*s)\/3\r\n\r","votes":null},{"text":"\r\n    return (b**2)\/3+b*s\r\n    \r","votes":null},{"text":"\r\n    # Area of square pyramid is 1\/3 base area + 1\/3 * height * square of base area\r\n    # First, we need to find the base area\r\n    base_area = b*b\r\n    # Now, we need to find the height\r\n    height = s\/b\r\n    # Now, we need to find the area of square pyramid\r\n    area = 1\/3*base_area + 1\/3*height*base_area\r\n    return area\r\n\r\n\r\n# Driver Code\r\nb = 10\r\ns = 50\r\nprint(\"The surface area of the square pyramid with base of length\", b, \"and height of\", s, \"is\", surface_Area(b, s))\r\n\r\n# Input:\r\n# Output:\r\n# The surface area of the square pyramid with base of length 10 and height of 50 is 175.0\r\n\r\n# Explanation:\r\n# The base area of the square pyramid is 100, so 1\/3 of its area is 33.333333333333336.\r\n# The height of the square pyramid is 50, so 1\/3 of its area is 16.666666666666666.\r\n# So, the total surface area is 33.333333333333336 + 16.666666666666666 = 175.0\r\n\r\n# Task\r\n# You are given the length of the base b of a square pyramid, and the length of the square pyramid s.\r\n\r\n# Write a python function to find the surface area of the square pyramid.\r\n\r\n# Note:\r\n# Area of square pyramid is 1\/3 base area + 1\/3 * height * square of base area\r\n\r\n# Input Format:\r\n# The firs","votes":null},{"text":"\r\n    print(\"The surface area of the square pyramid is\",(b*s)+(b*b))\r\n\r","votes":null},{"text":"\r\n    return (b*s)\/3\r\n\r","votes":null},{"text":"\r\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\r\n    area=0\r\n    area=2*b*s+b*b\r\n    print(area)\r\n\r\n\r","votes":null},{"text":"\r\n    return b*b+b*s+s*s\r\n\r","votes":null},{"text":"\r\n    area = 0\r\n    area = 2 * b * s + 2 * b * b\r\n    return area\r\n\r\n# print(surface_Area(2,3))\r\n\r\n\r","votes":null},{"text":"\r\n    return 0.5 * b * s\r\nvolume_Pyramid = (base_Area * height) \/ 3\r\n\r\nprint (\"Volume of Pyramid = \", volume_Pyramid)\r\n\r\n\r","votes":null},{"text":"\r\n    # b is the base area and s is the height of the pyramid.\r\n    answer=b*s+b*s\/3\r\n    return answer\r\n\r","votes":null},{"text":"\r\n    return (b*s)\/3\r\n\r\n# Write a python function to find the surface area of the cube.\r\n\r","votes":null},{"text":"\r\n    area=0.5*b*b+b*s\r\n    return area\r\n\r","votes":null},{"text":"\r\n    s=b**2*3\/2\r\n    return s\r\n\r","votes":null},{"text":"\r\n    return 0.5 * b * s\r\n\r","votes":null},{"text":"\r\n    area = 0.5*b*b + b*s\r\n    print('The surface area of the square pyramid is', area)\r\n    return area\r\n\r","votes":null},{"text":"\r\n    return 0.5*b*b*b+s*b\r\n\r\n\r","votes":null},{"text":"\r\n    #Surface area = 2*Area of the base + height*Perimeter of base\r\n    return (2*b*s)+(b*s)\r\n\r","votes":null},{"text":"\r\n    A = 0.5 * b * s\r\n    return A\r\n\r","votes":null},{"text":"\r\n    return (b*s*4)\/3\r\n    \r","votes":null},{"text":"\r\n    return 0.5*b*s\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    b = int(input())\r\n    s = int(input())\r\n    print(surface_Area(b,s))\r\n\r\n\"\"\"Output\r\nb = 5, s = 8\r\n\r\nAnswer: 56.0\r\n\r\nExplanation: \r\nSurface area of the square pyramid is area of square base times height. \r\nIn the given example, the base is 8 units and the height is 5 units.  \r\n\"\"\"\r\n\r\n\"\"\"\r\nExample 2: \r\nb = 12, s = 5\r\n\r\nAnswer: 60\r\n\r\nExplanation: \r\nSurface area of the square pyramid is area of square base times height. \r\nIn the given example, the base is 5 units and the height is 12 units. \r\n\"\"\"\r\n\r\n\"\"\"\r\nExample 3: \r\nb = 2, s = 4\r\n\r\nAnswer: 24\r\n\r\nExplanation: \r\nSurface area of the square pyramid is area of square base times height. \r\nIn the given example, the base is 4 units and the height is 2 units. \r\n\"\"\"\r\n\r\n\"\"\"\r\nExample 4: \r\nb = 10, s = 10\r\n\r\nAnswer: 100\r\n\r\nExplanation: \r\nSurface area of the square pyramid is area of square base times height. \r\nIn the given example, the base is 10 units and the height is 10 units. \r\n\"\"\"\r\n\r\n\"\"\"\r\nExample 5: \r\nb = 1, s = 1\r\n\r\nAnswer: 4\r\n\r\nExplanation: \r\nSurface area of the square pyramid is area of square base times height. \r\nIn the given example, the base is 1 unit and the height is 1 unit. \r\n\"\"\"\r\n","votes":null},{"text":"\r\n    return 0.5*b*s + 0.5*b**2\r\n\r\n\r","votes":null},{"text":"\r\n    return (b**2+b*s+s**2)\/3\r\n\r","votes":null},{"text":"\r\n    SA = (b**2)\/3 + b*s\r\n    return SA\r\n\r","votes":null},{"text":"\r\n    area = (b*s)\/3\r\n    return area\r\n\r","votes":null},{"text":"\r\n    return (b*2)+(s*4)\r\n\r\nprint(surface_Area(5,7))\r\n\r","votes":null},{"text":"\r\n    return 0.5*b*s+0.5*s*s\r\n\r","votes":null},{"text":"\r\n    return b*s + (b*s\/3)\r\n\r","votes":null},{"text":"\r\n\r\n    import math\r\n    return 0.5*b*b*s\r\n\r\n\r\n# In[3]:\r\n\r\n\r","votes":null},{"text":"\r\n    return (b*s)\/3\r","votes":null},{"text":"\r\n    return (1\/3)*b*s*b\r\n\r","votes":null},{"text":"\r\n    return (b*s*4)\/3\r\n\r\nb,s = map(float, input().split())\r\n\r\nprint(\"Square pyramid surface area: %0.2f\" % surface_Area(b,s))\r\n\r\n# Surface area of a cylinder\r","votes":null},{"text":"\r\n    return 0.5*b*s+s*b\r\n\r","votes":null},{"text":"\r\n    return (b**2)\/3 + 2*b*s\r\n\r","votes":null},{"text":"\r\n    area=0.5*b*s+b*math.sqrt(b**2+s**2)\r\n    return area\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return 0.5*b*s\r\n\r","votes":null},{"text":"\r\n    return (b**2)\/3+b*s\r\n\r\n\r","votes":null},{"text":"\r\n    surface_area = (b**2)\/4 + s * (b\/3)\r\n    return surface_area\r\n\r\n#print(surface_Area(2,1))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return 4*(b**2+b*s+s**2)\/3\r\n\r","votes":null},{"text":"\r\n    return 2*(b*s)+(s*s)\r\n\r","votes":null},{"text":"\r\n    return (b*s)\/3\r\n\r\nprint(surface_Area(5,8))\r\n\r\n\r","votes":null},{"text":"\r\n    return (b**2+b**2)\/3\r\n\r\n#print(surface_Area(5,1))\r\n\r","votes":null},{"text":"\r\n    '''\r\n    Formula: Area of square pyramid = (base*height)\/3\r\n    '''\r\n    return ((b*s)\/3)\r\n\r\n\r","votes":null},{"text":"\r\n    sa = (b*s)\/3\r\n    print(\"The surface area of the square pyramid is: \",sa)\r\n\r\n\r","votes":null}],"time":{"count":3.0,"avg":102114.644,"std":20089.2905407469,"cov":0.196732709}}
{"id":582,"question":"def my_dict(dict1):\r\n    \"\"\"Write a function to check if a dictionary is empty or not.\"\"\"","answers":[{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\n\r\n\r","votes":53674.748},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":59636.876},{"text":"\r\n    \r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n        \r\n    \r","votes":66303.476},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":69549.7},{"text":"\r\n    if dict1=={}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":69984.248},{"text":"\r\n    return dict1=={}\r\n    \r","votes":73222.824},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    return False\r\n\r\n\r","votes":75092.04},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    dict1 = {}\r\n    dict2 = {\"a\": 0}\r\n\r\n    print(my_dict(dict1))\r\n    print(my_dict(dict2))\r\n\r\n\r\n\"\"\"\r\nOutput\r\nTrue\r\nFalse\r\n\"\"\"\r\n\r\n\r","votes":76232.804},{"text":"\r\n    if dict1 == {} or dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({1: 2}))\r\nprint(my_dict({1: 2, 3: 4}))\r\n\r\n\r","votes":78969.668},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n\r\n\r","votes":81860.444},{"text":"\r\n    return dict1 == {}\r\n\r\n\r\n# Tests\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1, 'b': 2}))\r\n\r\n\r\n# Solution:\r","votes":92598.928},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\n\r\n\r\n\r\n\r","votes":93865.272},{"text":"\r\n    if not dict1:\r\n        return True\r\n    return False\r\n\r\n\r\n# Write your code here.\r","votes":97534.88},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    elif dict1 != {}:\r\n        return False\r\n\r\n\r\n# my_dict({})\r\n\r","votes":97705.272},{"text":"\r\n    if dict1:\r\n        return False\r\n    return True\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1, \"b\": 2}))\r\n\r\n\r","votes":99747.268},{"text":"\r\n    if dict1 == {} or dict1 == None:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nmy_dict1 = my_dict({})\r\nprint(my_dict1)\r\n\r\n\r\n# Write a program to check whether a given number is even or odd.\r\n\r","votes":102349.576},{"text":"\r\n    return len(dict1) == 0\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({1: 2}))\r\nprint(my_dict({'a': 'b'}))\r\n\r\n\r","votes":108198.792},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1}))\r\nprint(my_dict({\"a\": 1, \"b\": 2}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3}))\r\n\r\n\r","votes":117084.32},{"text":"\r\n    if dict1 is None:\r\n        return False\r\n    elif dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\n\r\nprint(my_dict({1: 1}))\r\n\r\nprint(my_dict(None))\r\n\r\nprint(my_dict({1: 1, 2: 2, 3: 3}))\r\n\r\nprint(my_dict({}))\r\n\r\nprint(my_dict([1, 2, 3]))\r\n\r\nprint(my_dict('string'))\r\n\r\nprint(my_dict(10))\r\n\r\nprint(my_dict(True))\r\n\r\nprint(my_dict(False))\r\n\r\nprint(my_dict(1.0))\r\n\r\nprint(my_dict(1.1))\r\n\r\nprint(my_dict(1.12))\r\n\r\nprint","votes":118091.496},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1}))\r\nprint(my_dict({1: 'a'}))\r\nprint(my_dict({1: 'a', 2: 'b'}))\r\n\r\n\r","votes":120100.304},{"text":"\r\n    if dict1 == dict():\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({'a':1}))\r\nprint(my_dict({'a':1, 'b':2}))\r\nprint(my_dict({'a':1, 'b':2, 'c':3}))\r\nprint(my_dict({'a':1, 'b':2, 'c':3, 'd':4}))\r\nprint(my_dict({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}))\r\n\r\n\r","votes":138900.328},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    dict1 = {}\r\n    print(my_dict(dict1))\r\n    dict2 = {\"hello\": \"world\"}\r\n    print(my_dict(dict2))\r\n    dict3 = {\"hello\": \"world\", \"foo\": \"bar\"}\r\n    print(my_dict(dict3))\r\n    dict4 = {\"hello\": \"world\", \"foo\": \"bar\", \"abc\": \"xyz\"}\r\n    print(my_dict(dict4))\r\n","votes":150483.028},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1}))\r\nprint(my_dict([]))\r\nprint(my_dict(['a', 'b']))\r\nprint(my_dict(set()))\r\nprint(my_dict(set(['a', 'b'])))\r\nprint(my_dict(tuple()))\r\nprint(my_dict(tuple(['a', 'b'])))\r\nprint(my_","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"Dictionary is empty.\")\r\n    else:\r\n        print(\"Dictionary is not empty.\")\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n\r\nmy_dict({})\r\n\r\n# Write a function to check if a dictionary is empty or not.\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n\r\n\r\nmy_dict({})\r\nmy_dict({'a': 1})\r\nmy_dict({'a': 1, 'b': 2})\r\nmy_dict({'a': 1, 'b': 2, 'c': 3})\r\nmy_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4})\r\n\r\n\r\n# 2. Write a function to check if a dictionary is empty or not.\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"Dictionary is empty\")\r\n    else:\r\n        print(\"Dictionary is not empty\")\r\n\r\n\r\ndict1 = {1: 'one', 2: 'two', 3: 'three'}\r\nmy_dict(","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print('The dictionary is empty.')\r\n    else:\r\n        print('The dictionary is not empty.')\r\n\r\n\r\nmy_dict({})\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(my_dict({}))\r\n    print(my_dict({1: 2, 3: 4}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dict({}))\r\n    print(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\n    print(my_dic","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Test cases\r\nprint(my_dict({}))  # Should print True\r\nprint(my_dict({1: 2, 3: 4}))  # Should print False\r\nprint(my_dict({'a': 'A', 'b': 'B'}))  # Should print False\r\nprint(my_dict({0: 1, 2: 3, 4: 5, 6: 7, 8: 9}))  # Should print False\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))  # Should print False\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}))  # Should print False\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}))  # Should print False\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}))  # Should print False\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}))  # Should print False\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': ","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1}))\r\nprint(my_dict({1: 2}))\r\nprint(my_dict({1: 2, 3: 4}))\r\nprint(my_dict({\"a\": 1, 3: 4}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9}))\r\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9, \"j\": 10}))\r\nprint(my_dict({","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n    \r","votes":null},{"text":"\r\n    if len(dict1)==0:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n\r\nmy_dict({})\r\nmy_dict({1:2})\r\n\r\n\r\n# Write a function to check if a dictionary contains a key or not.\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"one\": 1}))\r\n\r\n# print(my_dict([]))\r\n# print(my_dict([1, 2, 3]))\r\n# print(my_dict(1))\r\n# print(my_dict(\"Hello\"))\r\n# print(my_dict({}))\r\n# print(my_dict({\"one\": 1}))\r\n# print(my_dict([]))\r\n# print(my_dict([1, 2, 3]))\r\n# print(my_dict(1))\r\n# print(my_dict(\"Hello\"))\r\n# print(my_dict({}))\r\n# print(my_dict({\"one\": 1}))\r\n# print(my_dict([]))\r\n# print(my_dict([1, 2, 3]))\r\n# print(my_dict(1))\r\n# print(my_dict(\"Hello\"))\r\n# print(my_dict({}))\r\n# print(my_dict({\"one\": 1}))\r\n# print(my_dict([]))\r\n# print(my_dict([1, 2, 3]))\r\n# print(my_dict(1))\r\n# print(my_dict(\"Hello\"))\r\n# print(my_dict({}))\r\n# print(my_dict({\"one\": 1}))\r\n# print(my_dict([]))\r\n# print(my_dict([1, 2, 3]))\r\n# print(my_dict(1))\r\n# print(my_dict(\"Hello\"))\r\n# print(my_dict({}))\r\n# print(my_dict({\"one\": 1}))\r\n# print(my_dict([]))\r\n# print(my_dict([1, 2, 3]))\r\n# print(my_dict(1))\r\n# print(my_dict(\"Hello\"))\r\n# print(my_dict(","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"The dictionary is not empty.\")\r\n    else:\r\n        print(\"The dictionary is empty.\")\r\n\r\n\r\nmy_dict({})\r\n\r\nmy_dict({1: 'one', 2: 'two', 3: 'three'})\r\n\r\nmy_dict({'a': 1, 'b': 2, 'c': 3})\r\n\r\nmy_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4})\r\n\r\nmy_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})\r\n\r\nmy_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6})\r\n\r\nmy_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7})\r\n\r\nmy_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8})\r\n\r\nmy_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9})\r\n\r\nmy_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10})\r\n\r\nmy_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5","votes":null},{"text":"\r\n    a = len(dict1)\r\n    if a == 0:\r\n        print(\"Dictionary is empty!\")\r\n    else:\r\n        print(\"Dictionary is not empty!\")\r\n\r\n\r","votes":null},{"text":"\r\n    keys = dict1.keys()\r\n    if keys == []:\r\n        print(\"The dictionary is empty!\")\r\n    else:\r\n        print(\"The dictionary is not empty!\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    my_dict({})\r\n    my_dict({\"a\": 1})\r\n    my_dict({\"a\": 1, \"b\": 2, \"c\": 3})\r\n    my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6})\r\n    my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7})\r\n    my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8})\r\n    my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9})\r\n    my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9, \"j\": 10})\r\n    my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9, \"j\": 10, \"k\": 11})\r\n    my_dict({\"a\": 1, \"b\": 2, \"c\": 3, \"","votes":null},{"text":"\r\n    if dict1.keys():\r\n        print(\"This dictionary is not empty.\")\r\n    else:\r\n        print(\"This dictionary is empty.\")\r\n    return\r\n\r\n\r\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\r\nmy_dict(dict1)\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"Dictionary is not empty\")\r\n    else:\r\n        print(\"Dictionary is empty\")\r\n\r\n\r\na = {\"key1\": 1, \"key2\": 2, \"key3\": 3}\r\nmy_dict(a)\r\nprint(\"-----------------------------------------------------------------\")\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    return False\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1}))\r\nprint(my_dict({'a': 1, 'b': 2}))\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3}))\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4}))\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}))\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}))\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}))\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}))\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}))\r\nprint(my_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, '","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"The dictionary is not empty\")\r\n    else:\r\n        print(\"The dictionary is empty\")\r\n    \r\nmy_dict({})\r\nmy_dict({'a': 1, 'b': 2})\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print('Dictionary is not empty')\r\n    else:\r\n        print('Dictionary is empty')\r\n\r\n\r\nmy_dict({})\r\nmy_dict({'name': 'Vivek'})\r\n\r\n\r","votes":null},{"text":"\r\n    if len(dict1) > 0:\r\n        print(f\"The dictionary is not empty. The keys are {dict1.keys()}\")\r\n    else:\r\n        print(\"The dictionary is empty.\")\r\n\r\n\r\nmy_dict({})\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if dict1 == {}:\r\n        print(\"Dictionary is empty\")\r\n    else:\r\n        print(\"Dictionary is not empty\")\r\n\r\n\r\n# Driver code\r\ndict1 = {\"one\": 1, \"two\": 2, \"three\": 3}\r\nmy_dict(dict1)\r\n\r\n# Output:\r\n# Dictionary is not empty\r\n\r\n# Time Complexity: O(n) where n is the number of elements in a dictionary\r\n# Space Complexity: O(1)\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n\r\n\r\nmy_dict({})\r\nmy_dict({1: 'a'})\r\nmy_dict({1: 'a', 2: 'b'})\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1}))\r\nprint(my_dict({\"a\": 1, \"b\": 2}))\r\nprint(my_dict({}))\r\n\r\n\r","votes":null},{"text":"\r\n    for i in dict1.keys():\r\n        if dict1[i] == '':\r\n            print(\"Empty\")\r\n            return\r\n    print(\"Not empty\")\r\n\r\n\r","votes":null},{"text":"\r\n    for k, v in dict1.items():\r\n        if k == \"\":\r\n            print(\"Dictionary is empty\")\r\n        else:\r\n            print(\"Dictionary is not empty\")\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(f\"The dictionary is empty.\")\r\n    else:\r\n        print(f\"The dictionary is not empty.\")\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print('Dictionary is empty')\r\n    else:\r\n        print('Dictionary is not empty')\r\n    \r\n\r\ndict1 = {}\r\nmy_dict(dict1)\r\n\r\ndict1 = {'a':1, 'b':2, 'c':3}\r\nmy_dict(dict1)\r\n\r\ndict1 = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}\r\nmy_dict(dict1)\r\n\r\ndict1 = {'","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        print(\"Dict is empty.\")\r\n    else:\r\n        print(\"Dict is not empty.\")\r\n\r\nmy_dict({})\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"Dictionary is empty\")\r\n    else:\r\n        print(\"Dictionary is not empty\")\r\n\r\n\r\n# Calling the function\r\nmy_dict({})\r\nmy_dict({'a': 1, 'b': 2, 'c': 3})\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print('The dict is empty.')\r\n    else:\r\n        print('The dict is not empty.')\r\n\r\n\r\ndict1 = {'a': 1, 'b': 2, 'c': 3}\r\nmy_dict(dict1)\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict({\"a\": 1, \"b\": 2}))\r\nprint(my_dict({}))\r\nprint(my_dict(None))\r\nprint(my_dict(\"This is not a dictionary\"))\r\nprint(my_dict(123))\r\nprint(my_dict(0))\r\nprint(my_dict([1, 2, 3]))\r\nprint(my_dict((\"a\", \"b\")))\r\nprint(my_dict(1))\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(dict1)\r\n        return True\r\n    else:\r\n        print(dict1)\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    my_dict({})\r\n    my_dict({1: 3})\r\n    my_dict({'a': 3})\r\n    my_dict({1: 3, 2: 4})\r\n    my_dict({1: 3, 2: 4, 3: 5})\r\n    my_dict({1: 3, 2: 4, 3: 5, 4: 6})\r\n    my_dict({1: 3, 2: 4, 3: 5, 4: 6, 5: 7})\r\n    my_dict({1: 3, 2: 4, 3: 5, 4: 6, 5: 7, 6: 8})\r\n    my_dict({1: 3, 2: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9})\r\n    my_dict({1: 3, 2: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10})\r\n    my_dict({1: 3, 2: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11})\r\n    my_dict({1: 3, 2: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11, 10: 12})\r\n    my_dict({1: 3, 2","votes":null},{"text":"\r\n    \r\n    #your code here\r\n    \r\n    if dict1 == {}:\r\n        return \"Dictionary is empty.\"\r\n    else:\r\n        return \"Dictionary is not empty.\"\r\n\r\nprint my_dict({})\r\nprint my_dict({\"a\": 1})\r\nprint my_dict({\"a\": 1, \"b\": 2})\r\nprint my_dict({1: 2, 3: 4})\r\nprint my_dict({\"a\": 1, 2: 3})\r\nprint my_dict({\"a\": 1, \"b\": 2, 3: 4})\r\nprint my_dict({1: 2, \"a\": 1, 3: 4})\r\nprint my_dict({1: 2, 3: 4, \"a\": 1})\r\nprint my_dict({\"a\": 1, 2: 3, 3: 4})\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# In[10]:\r\n\r\n\r\nmy_dict({})\r\n\r\n\r\n# In[11]:\r\n\r\n\r\nmy_dict({1:2})\r\n\r\n\r\n# In[12]:\r\n\r\n\r\nmy_dict({1:2, 2:3})\r\n\r\n\r\n# In[13]:\r\n\r\n\r\nmy_dict(1)\r\n\r\n\r\n# In[14]:\r\n\r\n\r\nmy_dict(1.2)\r\n\r\n\r\n# In[15]:\r\n\r\n\r\nmy_dict('abcd')\r\n\r\n\r\n# In[16]:\r\n\r\n\r\nmy_dict([1,2,3])\r\n\r\n\r\n# In[17]:\r\n\r\n\r\nmy_dict((1,2,3))\r\n\r\n\r\n# In[18]:\r\n\r\n\r\nmy_dict(None)\r\n\r\n\r\n# In[19]:\r\n\r\n\r\nmy_dict(False)\r\n\r\n\r\n# In[20]:\r\n\r\n\r\nmy_dict([])\r\n\r\n\r\n# In[21]:\r\n\r\n\r\nmy_dict(())\r\n\r\n\r\n# In[22]:\r\n\r\n\r\nmy_dict(set())\r\n\r\n\r\n# In[23]:\r\n\r\n\r\nmy_dict([\"abcd\"])\r\n\r\n\r\n# In[24]:\r\n\r\n\r\nmy_dict((1,))\r\n\r\n\r\n# In[25]:\r\n\r\n\r\nmy_dict(set([1,2,3]))\r\n\r\n\r\n# In[26]:\r\n\r\n\r\nmy_dict(set([\"abcd\"]))\r\n\r\n\r\n# In[27]:\r\n\r\n\r\nmy_dict(set((1,2","votes":null},{"text":"\r\n    if dict1 != {}:\r\n        print(\"The dictionary is not empty.\")\r\n    else:\r\n        print(\"The dictionary is empty.\")\r\n\r\n\r\nmy_dict({})\r\nmy_dict({\"a\": 1, \"b\": 2, \"c\": 3})\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"Dictionary is not empty.\")\r\n    else:\r\n        print(\"Dictionary is empty.\")\r\n\r\n\r\nmy_dict({})\r\nprint()\r\nmy_dict({'name': 'John', 'age': 36})\r\nprint()\r\nmy_dict({'name': 'John', 'age': 36, 'city': 'New York'})\r\n\r\n\r","votes":null},{"text":"\r\n    if len(dict1) == 0:\r\n        print(\"Dictionary is empty!\")\r\n    else:\r\n        print(\"Dictionary is not empty!\")\r\n\r\n\r\ndict1={}\r\nmy_dict(dict1)\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"Dictionary is not empty\")\r\n    else:\r\n        print(\"Dictionary is empty\")\r\n\r\n\r\nmy_dict({})\r\nmy_dict({'a': 'b'})\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nmy_","votes":null},{"text":"\r\n    if len(dict1):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# 2\r","votes":null},{"text":"\r\n    if not dict1:\r\n        print(True)\r\n    else:\r\n        print(False)\r\n\r\n\r\nmy_dict({})\r\nmy_dict({'key': 'value'})\r\nmy_dict({'key': 'value', 'key2': 'value2'})\r\n\r\n\r","votes":null},{"text":"\r\n    dict2 = {}\r\n    for key, value in dict1.items():\r\n        if value == 0:\r\n            dict2[key] = value\r\n    \r\n    if dict2 == dict1:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n\r\n\r\ndict1 = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}\r\nmy_dict(dict1)\r\n\r\n# Answer\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"Empty\")\r\n    else:\r\n        print(\"Not Empty\")\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return \"Dictionary is not empty.\"\r\n    else:\r\n        return \"Dictionary is empty.\"\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({'a': 1, 'b': 2}))","votes":null},{"text":"\r\n    if not dict1:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({1: 2}))\r\nprint(my_dict({\"a\": 2}))\r\nprint(my_dict())\r\nprint(my_dict(None))\r\nprint(my_dict([2, 3]))\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        return \"The dictionary is empty.\"\r\n    else:\r\n        return \"The dictionary is not empty.\"\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": 1, \"b\": 2}))\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"Dictionary is not Empty.\")\r\n    else:\r\n        print(\"Dictionary is Empty.\")\r\n\r\nmy_dict({\"name\":\"John\",\"age\":21})\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return \"The dictionary is not empty.\"\r\n    else:\r\n        return \"The dictionary is empty.\"\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        print(f\"The dictionary is not empty. The dictionary contains {len(dict1)} key-value pairs.\")\r\n    else:\r\n        print(\"The dictionary is empty.\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    my_dict({\"key1\": 1, \"key2\": 2})\r\n    my_dict({})\r\n    my_dict({\"key1\": 1, \"key2\": 2, \"key3\": 3})\r\n    my_dict({\"key1\": 1, \"key2\": 2, \"key3\": 3, \"key4\": 4, \"key5\": 5})\r\n    my_dict({\"key1\": 1, \"key2\": 2, \"key3\": 3, \"key4\": 4, \"key5\": 5, \"key6\": 6, \"key7\": 7, \"key8\": 8, \"key9\": 9, \"key10\": 10})\r\n\r\n    # Answer for Question 1\r\n    # The dictionary is not empty. The dictionary contains 10 key-value pairs.\r\n    # The dictionary is not empty. The dictionary contains 9 key-value pairs.\r\n    # The dictionary is not empty. The dictionary contains 8 key-value pairs.\r\n    # The dictionary is not empty. The dictionary contains 7 key-value pairs.\r\n    # The dictionary is not empty. The dictionary contains 6 key-value pairs.\r\n    # The dictionary is not empty. The dictionary contains 5 key-value pairs.\r\n    # The dictionary is not empty. The dictionary contains 4 key-value pairs.\r\n    # The dictionary is not empty. The dictionary contains 3 key-value pairs.\r\n    # The dictionary is not empty. The dictionary contains 2 key-value pairs.\r\n    # The dictionary is not empty. The dictionary contains 1 key-value pairs.\r\n    # The dictionary is empty.\r\n\r\n    # Answer for Question 2\r\n    # The dictionary is not empty. The dictionary contains 10 key-value pairs.","votes":null},{"text":"\r\n    for key in dict1:\r\n        if dict1[key] == []:\r\n            return True\r\n    return False\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1.keys():\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\ndict1 = {'a': 1, 'b': 2}\r\nprint(my_dict(dict1))\r\n\r\n# 2. Write a function to check if a dictionary has a particular key. Return True if the key exists\r\n# otherwise False.\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        return \"Dictionary is empty\"\r\n    else:\r\n        return \"Dictionary is not empty\"\r\n\r\n\r\nprint(my_dict({}))\r\nprint(my_dict({\"a\": \"b\", \"c\": \"d\"}))\r\nprint(my_dict({1: \"b\", 2: \"d\"}))\r\nprint(my_dict({\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"}))\r\n\r\n\r","votes":null},{"text":"\r\n    dict1 = {}\r\n    if len(dict1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1.items():\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1=={}:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n    return\r\n\r\ndict1 = {}\r\n\r\nmy_dict(dict1)\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n\r\n\r\ndict1 = {}\r\nmy_dict(dict1)\r\n\r\ndict2 = {\"a\": 1, \"b\": 2, \"c\": 3}\r\nmy_dict(dict2)\r\n\r\n# ============================================================================================================================================================\r\n\r\n# Write a function to check if a dictionary is empty or not.\r\n\r\n\r","votes":null},{"text":"\r\n    if dict1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(my_dict(dict1=None))\r\n\r\n\r","votes":null},{"text":"\r\n    if not dict1:\r\n        print(\"The dictionary is empty.\")\r\n    else:\r\n        print(\"The dictionary is not empty.\")\r\n\r\nmy_dict({'a':1, 'b':2})\r\nmy_dict({})\r\n\r\n\r","votes":null},{"text":"\r\n    if(dict1):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver Code\r\ndict1 = {\r\n    'a': 1,\r\n    'b': 2,\r\n    'c': 3\r\n}\r\nprint(my_dict(dict1))\r\ndict2 = {}\r\nprint(my_dict(dict2))\r\ndict3 = {\r\n    'a': 1,\r\n    'b': 2,\r\n    'c': 3\r\n}\r\nprint(my_dict(dict3))\r\ndict4 = {\r\n    'a': 1,\r\n    'b': 2,\r\n    'c': 3\r\n}\r\nprint(my_dict(dict4))\r\ndict5 = {\r\n    'a': 1,\r\n    'b': 2,\r\n    'c': 3\r\n}\r\nprint(my_dict(dict5))\r\ndict6 = {\r\n    'a': 1,\r\n    'b': 2,\r\n    'c': 3\r\n}\r\nprint(my_dict(dict6))\r\ndict7 = {\r\n    'a': 1,\r\n    'b': 2,\r\n    'c': 3\r\n}\r\nprint(my_dict(dict7))\r\ndict8 = {\r\n    'a': 1,\r\n    'b': 2,\r\n    'c': 3\r\n}\r\nprint(my_dict(dict8))\r\ndict9 = {\r\n    'a': 1,\r\n    'b': 2,\r\n    'c': 3\r\n}\r\nprint(my_dict(dict9))\r\ndict10 = {\r\n    'a': 1","votes":null},{"text":"\r\n    if dict1:\r\n        print(\"Dictionary is not empty.\")\r\n    else:\r\n        print(\"Dictionary is empty.\")\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if dict1 == {}:\r\n        print(\"Dictionary is empty\")\r\n    else:\r\n        print(\"Dictionary is not empty\")\r\n\r\n    return None\r\n\r\n\r\nmy_dict({})\r\nmy_dict({'a': 1, 'c': 3, 'b': 2})\r\n\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n    if dict1 == {}:\r\n        print(\"Dictionary is empty\")\r\n    else:\r\n        print(\"Dictionary is not empty\")\r\n\r\nmy_dict({})\r\n\r\n\r","votes":null},{"text":"\r\n    # write code here\r\n    if dict1 == {}:\r\n        print(\"Dictionary is empty\")\r\n    else:\r\n        print(\"Dictionary is not empty\")\r\n\r\n\r\nmy_dict({})\r\nmy_dict({\"a\": \"b\"})\r\n","votes":null},{"text":"\r\n    if dict1 == {}:\r\n        print(\"The given dictionary is empty\")\r\n    else:\r\n        print(\"The given dictionary is not empty\")\r\n\r\n\r","votes":null}],"time":{"count":22.0,"avg":92781.1950909091,"std":25380.4733941081,"cov":0.2735519129}}
{"id":583,"question":"def catalan_number(num):\r\n    \"\"\"Write a function for nth catalan number.\"\"\"","answers":[{"text":"\r\n    if num < 0:\r\n        return\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    if num == 2:\r\n        return 2\r\n    return catalan_number(num-1) * (4 * num - 2) \/ (num + 1)\r\n\r\n\r","votes":98357.488},{"text":"\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1)*(4*num-2)\/(num+1)\r\n\r\n\r","votes":113572.12},{"text":"\r\n    if num < 2:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (4 * num - 2) \/\/ (num + 1)\r\n\r\n\r","votes":117225.528},{"text":"\r\n    if num == 0:\r\n        return 1\r\n\r\n    if num == 1:\r\n        return 1\r\n\r\n    if num > 1:\r\n        return catalan_number(num - 1) * (4 * num - 2) \/ (num + 1)\r\n\r\n\r\n# =======================================================================================================================\r\n\r\n\r","votes":119977.816},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    return catalan_number(num-1)*(4*num-2)\/(num+1)\r\n\r\n\r","votes":123461.032},{"text":"\r\n    catalan = [0 for num in range(num+1)]\r\n    catalan[0] = 1\r\n    for i in range(num):\r\n        for j in range(i+1):\r\n            catalan[i+1] += catalan[j] * catalan[i-j]\r\n    return catalan[num]\r\n\r\n\r\n","votes":129406.544},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    if num == 2:\r\n        return 2\r\n    return catalan_number(num - 1) * (4 * num - 2) \/\/ (num + 1)\r\n\r\n\r\nprint(catalan_number(5))\r\n\r\n\r","votes":133413.524},{"text":"\r\n    catalan_num = [0, 1]\r\n    for n in range(2, num + 1):\r\n        catalan_num.append(catalan_num[n - 1] * (4 * n - 2) \/\/ (n + 1))\r\n    return catalan_num[num]\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = 5\r\n    print(catalan_number(num))\r\n\r\n# Output\r\n# 42\r\n\r\n# Explanation\r\n# Catalan number is used to count the number of rooted trees with n nodes. \r\n# The formula for the nth Catalan number is given by: \r\n# Cn = 1\/n * \u03a3n-1k (k = 0 to n-1)\r\n# For example, C4 = 10, C5 = 25, C6 = 70, C7 = 200, C8 = 640, and C9 = 1716.\r\n\r\n# n = 1\r\n# 1\r\n\r\n# n = 2\r\n# 1 + 1 = 2\r\n\r\n# n = 3\r\n# 1 + 2 + 1 = 4\r\n\r\n# n = 4\r\n# 1 + 3 + 3 + 1 = 9\r\n\r\n# n = 5\r\n# 1 + 4 + 6 + 4 + 1 = 15\r\n\r\n# n = 6\r\n# 1 + 5 + 10 + 10 + 5 + 1 = 27\r\n\r\n# n = 7\r\n# 1 + 6 + 15 + 20 + 15 + 6 + 1 = 42\r\n\r\n# n = 8\r\n# 1 + 7 + 21 + 35 + 35 + 21 + 7 + 1 = 70\r\n\r\n# n = 9\r\n#","votes":139667.856},{"text":"\r\n    a = [0 for _ in range(num+1)]\r\n    a[0] = 1\r\n    a[1] = 1\r\n    for n in range(2, num+1):\r\n        for k in range(n):\r\n            a[n] += a[k]*a[n-1-k]\r\n    return a[num]\r\n\r\n\r","votes":154046.144},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    if num == 2:\r\n        return 2\r\n    return catalan_number(num-1)*(4*num-2)\/(num+1)\r\n\r\n\r","votes":154197.384},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) * (4*num-2) \/\/ (num+1)\r\n\r\n\r\nfor i in range(1, 11):\r\n    print(catalan_number(i), end=\" \")\r\nprint()\r\n\r\n\r\n# 2.17\r","votes":154463.616},{"text":"\r\n    if num < 0:\r\n        return -1\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n\r\n    catalan = [0] * (num + 1)\r\n    catalan[0] = 1\r\n    catalan[1] = 1\r\n\r\n    for i in range(2, num + 1):\r\n        temp = 0\r\n        for j in range(i):\r\n            temp += catalan[j] * catalan[i - j - 1]\r\n        catalan[i] = temp\r\n    return catalan[num]\r\n\r\n\r","votes":171120.884},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    answer = 0\r\n    for i in range(num):\r\n        answer += catalan_number(i) * catalan_number(num - i - 1)\r\n    return answer\r\n\r\n\r","votes":3999283.0480000004},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    result = 0\r\n    for i in range(num):\r\n        result += catalan_number(i) * catalan_number(num - i - 1)\r\n    return result\r\n\r\n\r","votes":4018572.7439999999},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    total = 0\r\n    for i in range(num):\r\n        total += catalan_number(i) * catalan_number(num - 1 - i)\r\n    return total\r\n\r\n\r","votes":4179002.2840000005},{"text":"\r\n\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(num):\r\n            result += catalan_number(i) * catalan_number(num - i - 1)\r\n        return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    print(catalan_number(n))\r\n\r\n\r\n# Task:\r\n# Write a program that reads an integer n from the input and outputs the nth Catalan number.\r\n# A Catalan number is the number of ways to put n pairs of parentheses in a string of n characters, not including the empty string.\r\n# For example, there are 5 ways to put 3 pairs of parentheses in the string \"))(\":\r\n# ()()\r\n# (())\r\n# (())(\r\n# ()(())\r\n# (()))()\r\n\r\n# Input Format\r\n# An integer n.\r\n# Output Format\r\n# Print the nth Catalan number.\r\n# Sample Input\r\n# 3\r\n# Sample Output\r\n# 5\r\n# Explanation\r\n# There are 5 ways to put 3 pairs of parentheses in the string \"))(\".\r\n# ()()\r\n# (())\r\n# (())(\r\n# ()(())\r\n# (()))()\r\n\r\n# Solve:\r\n# Start coding!\r\n# Catalan numbers are related to binomial coefficients. This is a simple combinatorics problem, so we'll use the binomial coefficient formula:\r\n# C(n, k) = n! \/ (k! * (n - k)!) = n * (n - 1) * ... * (n - k + 1) \/ (k * (k - 1) * ... * 1)\r\n# We'll use a recursive function that returns the nth Catalan number C(n):\r\n#","votes":4212550.6879999992},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(num):\r\n            result += (catalan_number(i) * catalan_number(num - i - 1))\r\n        return result\r\n\r\n\r","votes":4216316.0959999999},{"text":"\r\n    if num == 0:\r\n        return 1\r\n\r\n    if num == 1:\r\n        return 1\r\n\r\n    result = 0\r\n    for i in range(num):\r\n        result += catalan_number(i) * catalan_number(num-i-1)\r\n\r\n    return result\r\n\r\n\r","votes":4223868.8200000003},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(0, num):\r\n            result += catalan_number(i) * catalan_number(num-1-i)\r\n        return result\r\n\r\n\r","votes":4266518.5519999992},{"text":"\r\n    if num == 1 or num == 0:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(1, num + 1):\r\n            result += (catalan_number(i - 1) * catalan_number(num - i))\r\n        return result\r\n\r\n\r","votes":4415972.0719999997},{"text":"\r\n    catalan_num = 0\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    elif num > 1:\r\n        for i in range(num):\r\n            catalan_num += (catalan_number(i) * catalan_number(num-i-1))\r\n    return catalan_num\r\n\r\n\r","votes":4519556.3840000005},{"text":"\r\n    if num < 0:\r\n        return 0\r\n\r\n    if num == 0:\r\n        return 1\r\n\r\n    if num == 1:\r\n        return 1\r\n\r\n    catalan_num = 0\r\n    for i in range(num):\r\n        catalan_num += (catalan_number(i) * catalan_number(num - i - 1))\r\n\r\n    return catalan_num\r\n\r\n\r","votes":4825300.6320000002},{"text":"\r\n    if num < 0:\r\n        raise ValueError(\"Negative numbers are not supported.\")\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    result = 0\r\n    for i in range(num):\r\n        result += catalan_number(i) * catalan_number(num - i - 1)\r\n    return result\r\n\r\n\r","votes":4852326.7880000006},{"text":"\r\n    if num < 0:\r\n        raise ValueError(\"n must be non-negative\")\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n\r\n    result = 0\r\n    for i in range(num):\r\n        result += catalan_number(i) * catalan_number(num - i - 1)\r\n\r\n    return result\r\n\r\n\r","votes":4861838.0319999997},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        return sum([catalan_number(i) * catalan_number(num - i - 1) for i in range(num)])\r\n\r\n\r","votes":6032439.2400000002},{"text":"\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        return sum([catalan_number(i) * catalan_number(num - 1 - i) \r\n                     for i in range(num)])\r\n\r\n\r","votes":6354790.1720000003},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    return sum(catalan_number(i) * catalan_number(num - i - 1) for i in range(num))\r\n\r\n\r","votes":6414748.392},{"text":"\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    return sum(catalan_number(i) * catalan_number(num - i - 1) for i in range(num))\r\n\r\n\r","votes":6682843.3159999996},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(num):\r\n            result += catalan_number(i) * catalan_number(num - i - 1)\r\n        return result\r\n\r\n\r\nprint(\"10-th catalan number: \" + str(catalan_number(10)))\r\n\r\n\r","votes":7266352.0480000004},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    result = 0\r\n    for i in range(num):\r\n        result += catalan_number(i)*catalan_number(num-i-1)\r\n    return result\r\n\r\n\r","votes":8058479.5719999997},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    result = 0\r\n    for i in range(num):\r\n        result += catalan_number(i) * catalan_number(num-i-1)\r\n    return result\r\n\r\n\r","votes":8065866.0360000003},{"text":"\r\n    if num == 0:\r\n        catalan_num = 1\r\n    else:\r\n        catalan_num = 0\r\n        for i in range(0, num):\r\n            catalan_num += (catalan_number(i) * catalan_number(num-i-1))\r\n    return catalan_num\r\n\r\n\r","votes":8774200.6439999994},{"text":"\r\n    if num < 0:\r\n        return None\r\n    if num == 0:\r\n        return 1\r\n\r\n    result = 0\r\n    for i in range(num):\r\n        result += catalan_number(i) * catalan_number(num-1-i)\r\n\r\n    return result\r\n\r\n\r","votes":9231802.5720000006},{"text":"\r\n    if num < 0:\r\n        return None\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(num):\r\n            result += catalan_number(i) * catalan_number(num - i - 1)\r\n        return result\r\n\r\n\r","votes":9241633.4719999991},{"text":"\r\n    if num < 0:\r\n        raise Exception(\"Catalan numbers are only defined for positive numbers.\")\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        result = 0\r\n        for i in range(num):\r\n            result += catalan_number(i) * catalan_number(num-i-1)\r\n        return result\r\n\r\n\r","votes":9242462.1160000004},{"text":"\r\n    if num < 0:\r\n        return None\r\n    if num == 0:\r\n        return 1\r\n    result = 0\r\n    for i in range(num):\r\n        result += catalan_number(i) * catalan_number(num - i - 1)\r\n    return result\r\n\r\n\r","votes":9270742.5320000015},{"text":"\r\n    if not num:\r\n        return 1\r\n    return sum([catalan_number(i) * catalan_number(num - i - 1) for i in range(num)])\r\n\r\n\r\n\"\"\"Testing\"\"\"\r\n# for i in range(10):\r\n#     print(catalan_number(i))\r\n\r\n\r","votes":12938764.2200000007},{"text":"\r\n    if num < 0:\r\n        raise ValueError(\"Negative n'th number is not supported.\")\r\n    if num == 0:\r\n        return 1\r\n    return sum([catalan_number(i)*catalan_number(num-i-1) for i in range(num)])\r\n\r\n\r","votes":14433511.0360000022},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return sum([catalan_number(i) * catalan_number(num - i - 1) for i in range(num)])\r\n\r\nprint(catalan_number(10))\r\n\r\n\r","votes":23277949.2960000001},{"text":"\r\n    num = int(num)\r\n    if num <= 0:\r\n        raise ValueError\r\n    if num == 1:\r\n        return 1\r\n    catalan_num = 0\r\n    for i in range(num):\r\n        catalan_num += (catalan_number(i)*catalan_number(num-i-1))\r\n    return catalan_num\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    else:\r\n        return binomial_coefficient(num + 2, num + 1) \/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * catalan_number(num - 2)\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1)*catalan_number(num-2)\r\n\r\nprint(catalan_number(5))\r\n\r","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    catalan_num = 0\r\n    for i in range(num):\r\n        catalan_num += (catalan_number(i) * catalan_number(num - i - 1))\r\n    return catalan_num\r\n\r\n\r\n# Tests\r\nprint(catal","votes":null},{"text":"\r\n    n = num\r\n    catalan = 1\r\n    for i in range(n):\r\n        catalan *= (2*i+1) \/ (i+2)\r\n    return catalan\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        raise ValueError('n should be a non-negative number')\r\n    if num == 0:\r\n        return 1\r\n    return catalan_number(num - 1) * (2 * num - 1) \/\/ num\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return 0\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return ((2*num-1) * catalan_number(num-1) \/\/ num)\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    elif num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) * (2*num-1)\/\/num\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(catalan_number(10))\r\n    print(catalan_number(12))\r\n    print(catalan_number(20))\r\n    print(catalan_number(30))\r\n    print(catalan_number(40))\r\n    print(catalan_number(50))\r\n    print(catalan_number(100))\r\n    print(catalan_number(1000))\r\n    print(catalan_number(10000))\r\n    print(catalan_number(100000))\r\n    print(catalan_number(1000000))\r\n    print(catalan_number(10000000))\r\n    print(catalan","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return ","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n\r\n    catalan_num = 0\r\n    for i in range(num):\r\n        catalan_num += binomial_coefficient(num, i) * catalan_number(i)\r\n    return catalan_num\r\n\r\n\r","votes":null},{"text":"\r\n    catalan = [1, 1]\r\n    for i in range(2, num + 1):\r\n        catalan.append","votes":null},{"text":"\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        return sum([catalan_number(i) * catalan_number(num - i - 1) for i in range(num)])\r\n\r\n\r\nprint(catalan_number(10))\r\nprint(catalan_number(11))\r\nprint(catalan_number(12))\r\nprint(catalan_number(13))\r\nprint(catalan_number(14))\r\nprint(catalan_number(15))\r\nprint(catalan_number(16))\r\nprint(catalan_number(17))\r\nprint(catalan_number(18))\r\nprint(catalan_number(19))\r\nprint(catalan_number(20))\r\nprint(catalan_number(21))\r\nprint(catalan_number(22))\r\nprint(catalan_number(23))\r\nprint(catalan_number(24))\r\nprint(catalan_number(25))\r\nprint(catalan_number(26))\r\nprint(catalan_number(27))\r\nprint(catalan_number(28))\r\nprint(catalan_number(29))\r\nprint(catalan_number(30))\r\nprint(catalan_number(31))\r\nprint(catalan_number(32))\r\nprint(catalan_number(33))\r\nprint(catalan_number(34))\r\nprint(catalan_number(35))\r\nprint(catalan_number(36))\r\nprint(catalan_number(37))\r\nprint(catalan_number(38))\r\nprint(catalan_number(39))\r\nprint(catalan_number(40))\r\nprint(catalan_number(41))\r\nprint(catalan_number(42))\r\nprint(catalan_number(43))\r\nprint(catalan_number(44))\r\nprint(cata","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num - 1) * (2 * num - 1) \/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return 0\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) * (2*num - 1) \/\/ num\r\n\r\n\r","votes":null},{"text":"\r\n    return(int(factorial(2*num)\/(factorial(num+1)*factorial(num))))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # we need to make a list of the first 10 catalan numbers\r\n    catalan_list = [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862]\r\n\r\n    if num <= 10:\r\n        return catalan_list[num - 1]\r\n\r\n    # if the number is in the list, return it\r\n    if num in catalan_list:\r\n        return catalan_list[num - 1]\r\n\r\n    # if the number is too big, we need to calculate it\r\n   ","votes":null},{"text":"\r\n    if num > 0:\r\n        catalan_list = []\r\n        catalan_list.append(1)\r\n        for i in range(1, num):\r\n            for j in range(i):\r\n                catalan_list.append((catalan_list[i] *\r\n                                     catalan_list[i-1-j])\/j+1)\r\n            catalan_list.append(1)\r\n    return catalan_list\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    if num == 2:\r\n        return 2\r\n    if num < 2:\r\n        return -1\r\n    return catalan_number(num-1) + catalan_number(num-2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        return ((2*num-1) * catalan_number(num-1)) \/\/ num\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return (2*num-1) * catalan_number(num-1) \/ num\r\n\r\n\r","votes":null},{"text":"\r\n    catalan = [1]\r\n\r\n    for i in range(num):\r\n        catalan.append(0)\r\n        for j in range(i):\r\n            catalan[i] += catalan[j] * catalan[i - j - 1]\r\n    return catalan[num - 1]\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) * (2*num-1) \/\/ num\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    catalan_num_list = [1]\r\n    for i in range(2, num+1):\r\n        catalan_num_list.append(catalan_num_list[i-2] * (i-1) \/\/ i)\r\n    return catalan_num_list[num]\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    catalan_list = [1, 1]\r\n    for i in range(2, num + 1):\r\n        catalan_list.append((4 * catalan_list[i - 1] - catalan_list[i - 2]) \/ i)\r\n    return catalan_list[num]\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n\r\n    if num == 1:\r\n        return 1\r\n\r\n    return catalan_number(num-1) * (2*num-1) \/ (num+1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if num < 1:\r\n        raise ValueError(\"Invalid Value\")\r\n\r\n    cat_num = [1] * (num + 1)\r\n\r\n    for i in range(1, num + 1):\r\n        for j in range(i):\r\n            cat_num[i] += cat_num[j] * cat_num[i - j - 1]\r\n\r\n    return cat_num[-1]\r\n\r\n\r\n# Tests\r\nprint(catalan_number(6))\r\nprint(catalan_number(10))\r\nprint(catalan_number(15))\r\nprint(catalan_number(20))\r\nprint(catalan_number(25))\r\nprint(catalan_number(26))\r\nprint(catalan_number(27))\r\nprint(catalan_number(28))\r\nprint(catalan_number(29))\r\nprint(catalan_number(30))\r\nprint(catalan_number(31))\r\nprint(catalan_number(32))\r\nprint(catalan_number(33))\r\nprint(catalan_number(34))\r\nprint(catalan_number(35))\r\nprint(catalan_number(36))\r\nprint(catalan_number(37))\r\nprint(catalan_number(38))\r\nprint(catalan_number(39))\r\nprint(catalan_number(40))\r\nprint(catalan_number(41))\r\nprint(catalan_number(42))\r\nprint(catalan_number(43))\r\nprint(catalan_number(44))\r\nprint(catalan_number(45))\r\nprint(catalan_number(46))\r\nprint(catalan_number(47))\r\nprint(catalan_number(48))\r\nprint(catalan_number(49))\r\nprint(catalan_number(50))\r\n\r\n\r\n# 1 2 5","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) * (2*num-1) \/","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    elif num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (2 * num - 1) \/\/ num\r\n\r\n\r\nprint(catalan_number(10))\r\n\r\n# Catalan Numbers\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        raise ValueError(\"n must be non-negative.\")\r\n    if num == 0:\r\n        return 1\r\n    return (catalan_number(num - 1) * 4 * num - catalan_number(num - 2)) \/ (num + 1)\r\n\r\n\r\nnum = int(input())\r\nprint(catalan_number(num))\r\n\r\n\"\"\"Output\r\n1\r\n2\r\n7\r\n34\r\n143\r\n576\r\n2336\r\n11007\r\n45688\r\n218307\r\n947555\r\n4015806\r\n1623623\r\n7","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num-1) * 4 * catalan_number(num - 2) \/ (num * (num - 1))\r\n\r\n\r\nprint('2nd Catalan number:', catalan_number(2))\r\nprint('5th Catalan number:', catalan_number(5))\r\nprint('8th Catalan number:', catalan_number(8))\r\nprint('10th Catalan number:', catalan_number(10))\r\nprint('12th Catalan number:', catalan_number(12))\r\nprint('14th Catalan number:', catalan_number(14))\r\nprint('17th Catalan number:', catalan_number(17))\r\nprint('20th Catalan number:', catalan_number(20))\r\nprint('23rd Catalan number:', catalan_number(23))\r\nprint('26th Catalan number:', catalan_number(26))\r\nprint('29th Catalan number:', catalan_number(29))\r\nprint('32nd Catalan number:', catalan_number(32))\r\nprint('35th Catalan number:', catalan_number(35))\r\nprint('38th Catalan number:', catalan_number(38))\r\nprint('41st Catalan number:', catalan_number(41))\r\nprint('44th Catalan number:', catalan_number(44))\r\nprint('47th Catalan number:', catalan_number(47))\r\nprint('50th Catalan number:', catalan_number(50))\r\nprint('53rd Catalan number:', catalan_number(53))\r\nprint('56th Catalan number:', catalan_number(56))\r\nprint('59th Catalan number:', catalan_number(","votes":null},{"text":"\r\n    if num < 0:\r\n        return \"Not defined for negative numbers\"\r\n    if num == 0:\r\n        return 1\r\n    result = 0\r\n    for i in range(num + 1):\r\n        result += (catalan_number(i) * catalan_number(num - i - 1))\r\n    return result\r\n\r\n\r\nprint(catalan_number(4))\r\n","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) * 4 * (2*num - 1) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (2 * num - 1) \/\/ num\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (2 * num - 1) \/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if num < 1:\r\n        raise ValueError\r\n    \r\n    catalan = [0, 1]\r\n    for i in range(2, num+1):\r\n        catalan.append(catalan[i-1] + catalan[i-2]*(i-1))\r\n    return catalan[num]\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = 11\r\n    result = catalan_number(num)\r\n    print(f'Catalan number for {num} is {result}.')\r\n\r\n\r\n# Answer: 1729\r\n# Analysis:\r\n# If n = 1, C(n) = 0\r\n# If n = 2, C(n) = 1\r\n# If n = 3, C(n) = 2\r\n# If n = 4, C(n) = 5\r\n# If n = 5, C(n) = 14\r\n# If n = 6, C(n) = 42\r\n# If n = 7, C(n) = 132\r\n# If n = 8, C(n) = 429\r\n# If n = 9, C(n) = 1430\r\n# If n = 10, C(n) = 4862\r\n# If n = 11, C(n) = 16796\r\n# If n = 12, C(n) = 58786\r\n# If n = 13, C(n) = 208012\r\n# If n = 14, C(n) = 742900\r\n# If n = 15, C(n) = 2674440\r\n# If n = 16, C(n) = 9","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    elif num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (2 * num - 1) \/\/ num\r\n\r\n\r","votes":null},{"text":"\r\n    # if num == 0 or num == 1:\r\n    #     return 1\r\n    # else:\r\n    #     return catalan_number(num-1) * (2*num-1) \/\/ num\r\n    if num == 0 or num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) * (2*num-1) \/\/ num\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num < 0:\r\n        return 0\r\n    if num == 1:\r\n        return 1\r\n    if num == 2:\r\n        return 2\r\n    return catalan_number(num - 1) * 4 * catalan_number(num - 2) \/\/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return 0\r\n    if num <= 2:\r\n        return 1\r\n    catalan_num = 0\r\n    for i in range(num):\r\n        catalan_num += ((2*i + 1) * catalan_number(i))\r\n    return catalan_num\r\n\r\n\r\nprint(catalan_number(10))\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    elif num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (2 * num - 1) \/\/ num\r\n\r\n\r\nfor n in range(10):\r\n    print(catalan_number(n), end=' ')\r\n\r\n# print(catalan_number(5))\r\n","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    if num < 0:\r\n        return 0\r\n    return catalan_number(num - 1) * catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        number = 0\r\n        for i in range(0, num):\r\n            number += (catalan_number(i) * catalan_number(num - i - 1))\r\n        return number\r\n\r\n\r\nfor i in range(0, 21):\r\n    print(\"Catalan number","votes":null},{"text":"\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        return catalan_number(num - 1) * (2 * num - 1) \/\/ num\r\n    \r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input())\r\n    print(catalan_number(num))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    if num < 0:\r\n        raise ValueError(\"Negative number is not allowed.\")\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    if num == 2:\r\n        return 1\r\n    \r\n    return catalan_number(num - 1) * (2 * num - 1) \/\/ num\r\n\r\nprint(catalan_number(6))\r\n# 92\r\n\r\n\r\n# 12.1.2\r\n# 12.1.3\r\n\r\n# 12.2\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return None\r\n    elif num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1)*(2*num-1)\/(num+1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    return catalan_number(num - 1) * catalan_number(num - 2)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return (catalan_number(num - 1) * catalan_number(num - 2)) \/ (num)\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"Check that the function works.\"\"\"\r\n    \r\n    print(catalan_number(0))\r\n    print(catalan_number(1))\r\n    print(catalan_number(2))\r\n    print(catalan_number(3))\r\n    print(catalan_number(4))\r\n    print(catalan_number(5))\r\n\r","votes":null},{"text":"\r\n\r\n    if num in [0, 1]:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * 4 * (2 * num - 1) \/ (num + 1)\r\n\r\n\r\nprint(catalan_number(10))\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * 4 * (2 * num - 1) \/ (num + 1)\r\n\r\n\r","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) * (2*num-1) \/ num\r\n\r\n\r","votes":null},{"text":"\r\n    \"\"\"Check the example: https:\/\/en.wikipedia.org\/wiki\/Catalan_number\"\"\"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return catalan_number(num-1) * (2 * num - 1) \/\/ num\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return -1\r\n    if num == 0:\r\n        return 1\r\n    num_list = [1]\r\n    for i in range(num):\r\n        num_list.append(0)\r\n        for j in range(i):\r\n            num_list[i] += num_list[j] * num_list[i - 1 - j]\r\n    return num_list[num]\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        return \"Invalid\"\r\n    if num == 0:\r\n        return 1\r\n    if num == 1:\r\n        return 1\r\n    elif num == 2:\r\n        return 2\r\n    else:\r\n        result = 0\r\n        for i in range(2, num+1):\r\n            result += catalan_number(num - i) * catalan_number(i-1)\r\n        return result\r\n\r\n\r","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    catalan_number = 0\r\n    for i in range(num):\r\n        catalan_number += (nCr(num, i) * catalan_number)\r\n    return catalan_number\r\n\r\n\r","votes":null},{"text":"\r\n    if num <= 2:\r\n        return 1\r\n    else:\r\n        return catalan_number(num - 1) * (2 * num - 1) \/\/ num\r\n\r\n\r","votes":null},{"text":"\r\n    if num <= 1:\r\n        return 1\r\n    return num * catalan_number(num - 1)\r\n\r\n\r\nif __name__ == '__main__':\r\n   ","votes":null},{"text":"\r\n    if num == 0:\r\n        return 1\r\n    elif num == 1:\r\n        return 1\r\n    else:\r\n        return (2 * num - 1) * catalan_number(num - 1) \/\/ num\r\n\r\n\r","votes":null},{"text":"\r\n    if num < 0:\r\n        print(\"Invalid Input!\")\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        return (2 * num - 1) * catalan_number(num - 1) \/ num\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    catalan_num = list()\r\n    catalan_num.append(1)\r\n    \r\n    for i in range(1,num):\r\n        total = 0\r\n        \r\n        for j in range(i):\r\n            total = total + catalan_num[j]*catalan_num[i-j-1]\r\n        \r\n        catalan_num.append(total)\r\n    \r\n    return catalan_num[num-1]\r\n    \r","votes":null}],"time":{"count":39.0,"avg":5115041.0446153851,"std":4848704.470404529,"cov":0.9479307063}}
{"id":586,"question":"def split_Arr(a,n,k):\r\n    \"\"\"Write a python function to split the array and add the first part to the end.\"\"\"","answers":[{"text":"\r\n    if n == 0:\r\n        return a\r\n    else:\r\n        return a[k:] + a[:k]\r\n\r","votes":110594.948},{"text":"\r\n    \r\n    return a[k:] + a[:k]\r\n\r\n\r","votes":111014.78},{"text":"\r\n    a = a[:n]\r\n    a += a[:k]\r\n    a = a[k:n+k]\r\n    return a\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    ","votes":114571.26},{"text":"\r\n    return a[k:] + a[:k]\r\n\r","votes":143611.508},{"text":"\r\n    s=a[:k]\r\n    a=a[k:]\r\n    a=a+s\r\n    return a\r\n\r","votes":150297.972},{"text":"\r\n    if n == 1:\r\n        return a\r\n    else:\r\n        #first = a[:n\/\/2]\r\n        #second = a[n\/\/2:]\r\n        first = a[:k]\r\n        second = a[k:]\r\n        return second + first\r\n\r\n\r\n\r\na = [1,2,3,4,5,6,7,8,9,10]\r\nprint(split_Arr(a, 10, 2))\r\nprint(split_Arr(a, 10, 3))\r\nprint(split_Arr(a, 10, 4))\r\nprint(split_Arr(a, 10, 5))\r\nprint(split_Arr(a, 10, 6))\r\nprint(split_Arr(a, 10, 7))\r\nprint(split_Arr(a, 10, 8))\r\nprint(split_Arr(a, 10, 9))\r\nprint(split_Arr(a, 10, 10))\r\n#print(split_Arr(a, 10, 11))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":150373.136},{"text":"\r\n    if n<k or n<1 or k<1:\r\n        return False\r\n    else:\r\n        a[k:],a[:k] = a[:k],a[k:]\r\n        return a\r\n\r\n\r","votes":190749.872},{"text":"\r\n    for i in range(0,k):\r\n        a.append(a.pop(0))\r\n    return a\r\n\r\n\r\n# Taking Input Using Fast I\/O\r","votes":205240.816},{"text":"\r\n    for i in range(0,n,k):\r\n        a[i:k]=a[i:k]+a[k:]\r\n        print(a)\r\n\r","votes":null},{"text":"\r\n    if n==0:\r\n        return a\r\n    else:\r\n        b=a[:n]\r\n        c=a[n:]\r\n        d=c[:k]\r\n        e=c[k:]\r\n        a=b+e+d\r\n        return a\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    #print(k)\r\n    if a==[]:\r\n        return []\r\n    elif n==0:\r\n        return [[]]\r\n    else:\r\n        l=[]\r\n        for i in range(len(a)):\r\n            if i<k:\r\n                l.append(a[i:])\r\n            else:\r\n                l.append(a[i:]+a[:i])\r\n        return l\r\n\r","votes":null},{"text":"\r\n    for i in range(k-1):\r\n        a.append(a.pop(0))\r\n    return a\r\n\r\na = [1,2,3,4,5,6,7,8,9]\r\nn = 5\r\nk = 3\r\nprint(split_Arr(a,n,k))\r\n\r\n# 45. Given a number N, find the number of pairs of integers whose sum is equal to N.\r\n\r\n# Input:\r\n# N = 10\r\n# Output:\r\n# 4\r\n\r","votes":null},{"text":"\r\n    a=a[:n]+a[n:]\r\n    return a\r\n\r\n\r\na=[1,2,3,4,5,6,7,8]\r\nprint(a)\r\n\r\nsplit_Arr(a,4,3)\r\nprint(a)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    \"\"\"\r\n    #a = list to be sorted\r\n    #n = size of array\r\n    #k = number of parts to be divided\r\n    \"\"\"\r\n    if k<=0:\r\n        return a\r\n    \r\n    for i in range(1,k):\r\n        a[i],a[n-i] = a[n-i],a[i]\r\n    return a\r\n\r\n\r","votes":null},{"text":"\r\n    # code here #\r\n   ","votes":null},{"text":"\r\n    for i in range(0,n,k):\r\n        if k>n:\r\n            return a\r\n        else:\r\n            print(a[i:i+k])\r\n            a[i:i+k]=a[i:i+k][::-1]\r\n            if (i+k)==n:\r\n                return a\r\n    return a\r\n\r\n\r\na=[1,2,3,4,5,6,7,8,9]\r\nn=len(a)\r\nk=3\r\nprint(split_Arr(a,n,k))\r\n\r\n# OUTPUT:\r\n# [1, 2, 3]\r\n# [4, 5, 6]\r\n# [7, 8, 9]\r\n# [1, 2, 3]\r\n# [4, 5, 6]\r\n# [7, 8, 9]\r\n# [1, 2, 3]\r\n# [4, 5, 6]\r\n# [7, 8, 9]\r\n# [1, 2, 3]\r\n# [4, 5, 6]\r\n# [7, 8, 9]\r\n\r\n\r\n\r\n# SOLUTION:\r\n#","votes":null},{"text":"\r\n    a=a[:k]+a[k:]\r\n    return(a)\r\n\r\narr=[1,2,3,4,5,6,7,8,9,10]\r\nk=5\r\nprint(split_Arr(arr,len(arr),k))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    l= len(a)\r\n    x=n+k\r\n    y= l-n\r\n    z=y-k\r\n    \r\n    a1=a[n:x]\r\n    a2=a[x:y]\r\n    a3=a[y:z]\r\n    a4=a[0:n]\r\n    \r\n    \r\n    a4.extend(a1)\r\n    a4.extend(a2)\r\n    a4.extend(a3)\r\n    print(a4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    return a[n:]+a[:n]\r\n\r","votes":null},{"text":"\r\n    \r\n    for i in range(0,n-k):\r\n        a.insert(i,a.pop(i+k))\r\n    return a\r\n\r\nn,k = map(int,input().split())\r\na = [int(x) for x in input().split()]\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\n#Reference: w3resource","votes":null},{"text":"\r\n    # Your code goes here\r\n    if n<0:\r\n        return\r\n    if n==0:\r\n        return\r\n    if k<0:\r\n        return\r\n    if k==0:\r\n        return\r\n    if k>n:\r\n        return\r\n    print(a[0:k])\r\n    a=a[k:]\r\n    print(a)\r\n    split_Arr(a,n-k,k)\r\n    \r\n\r\n\r\n# In[2]:\r\n\r\n\r\na=[1,2,3,4,5,6,7,8,9]\r\nn=len(a)\r\nk=3\r\nsplit_Arr(a,n,k)\r\n\r\n\r\n# In[ ]:\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    if n<=0:\r\n        return a\r\n    else:\r\n        return split_Arr(a[n:]+a[:n],n-1,k)+[a[n]]\r\n\r\n#n=int(input(\"Enter the number of elements in the array: \"))\r\n#print(\"Enter the elements of array: \")\r\n#for i in range(n):\r\n#    a.append(int(input()))\r\n\r\n#k=int(input(\"Enter the value of k: \"))\r\n\r\n#print(\"The array after splitting is: \",split_Arr(a,n,k))\r\n\r","votes":null},{"text":"\r\n    b=[]\r\n    for i in range(k):\r\n        b.append(a[n-k+i])\r\n    for i in range(k):\r\n        b.append(a[i])\r\n    return b\r\n\r\n# Driver code to test the above function\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(a)\r\nk = 3\r\nprint(\"The rotated array is\", split_Arr(a, n, k))\r\n\r","votes":null},{"text":"\r\n    a.sort()\r\n    a = a[:n] + a[-k:]\r\n    a.sort()\r\n    return a\r\n    \r\n    \r","votes":null},{"text":"\r\n    # code here\r\n    l=[]\r\n    for i in range(0,n,k):\r\n        if(i+k<=n):\r\n            l.append(a[i:i+k])\r\n        else:\r\n            l.append(a[i:n])\r\n    return l\r\n\r","votes":null},{"text":"\r\n    l = len(a)\r\n    if n > l:\r\n        raise ValueError(\"Invalid n\")\r\n    for i in range(n):\r\n        yield a[i], a[-i-1]\r\n    for i in range(k-n,l-n):\r\n        yield a[i], a[i+n]\r\n    for i in range(l-n,l):\r\n        yield a[i], a[i-l+n]\r\n\r","votes":null},{"text":"\r\n    \r\n    if n < k:\r\n        return\r\n    else:\r\n        if n == 1:\r\n            return a[0]\r\n        else:\r\n            return a[:k]+a[-k:]\r\n\r","votes":null},{"text":"\r\n    if len(a)<k:\r\n        return a\r\n    else:\r\n        p=a[:k]\r\n        a[k:]=a[k+1:]\r\n        a=a+p\r\n        return a\r\n\r","votes":null},{"text":"\r\n    if a == []:\r\n        return []\r\n    else:\r\n        return split_Arr(a[k:n],n,k) + [a[:k]]\r\n\r","votes":null},{"text":"\r\n    # code here\r\n    a[n:] = a[:n]\r\n    return a\r\n\r","votes":null},{"text":"\r\n    for i in range(0,len(a),k):\r\n        a[i:(i+k)]=a[i:(i+k)][::-1]\r\n    return a\r\n\r","votes":null},{"text":"\r\n\r\n    for i in range(n):\r\n        a[i+k] = a[i]\r\n    return a\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    a = [1,2,3,4,5,6,7,8]\r\n    n = len(a)\r\n    k = 0\r\n    split_Arr(a,n,k)\r\n    print(a)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    first = a[:n]\r\n    last = a[n:]\r\n    first.extend(last)\r\n    print(first)\r\n    return first\r\n\r\na = list(map(int,input().split()))\r\nn = int(input())\r\nk = int(input())\r\nsplit_Arr(a,n,k)\r\n\r\n\r\n# a = [1,2,3,4,5,6,7,8,9]\r\n# n = 3\r\n# k = 4\r\n# split_Arr(a,n,k)\r\n\r\n# result = []\r\n# for i in range(len(a)):\r\n#     if i < n:\r\n#         result.append(a[i])\r\n#     else:\r\n#         result.append(a[i-n])\r\n# print(result)\r\n#","votes":null},{"text":"\r\n    if a == None or n == 0 or k == 0:\r\n        return []\r\n    if n < k:\r\n        return []\r\n    if n == k:\r\n        return [a[:]]\r\n    if k == 1:\r\n        return [a[:n\/\/2],a[n\/\/2:]]\r\n    \r\n    if n % 2 == 0:\r\n        mid = n\/\/2\r\n    else:\r\n        mid = n\/\/2 + 1\r\n    \r\n    if k % 2 == 0:\r\n        return [a[:mid]] + split_Arr(a[mid:],n-mid,k-1) + [a[mid:]]\r\n    else:\r\n        return [a[:mid]] + split_Arr(a[mid:],n-mid,k-1) + [a[mid:]] + [a[mid]]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a = [1,2,3,4,5,6,7,8]\r\n    k = 3\r\n    n = len(a)\r\n    \r\n    print(split_Arr(a,n,k))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    if n==k or k==0:\r\n        return a[:k]\r\n    else:\r\n        return a[:k]+split_Arr(a[k:],n-k,k)\r\n\r\n\r\n#Split Array LCCI\r","votes":null},{"text":"\r\n    if n == 0:\r\n        return []\r\n    elif n < 0:\r\n        return []\r\n    elif k < 0:\r\n        return []\r\n    elif k == 0:\r\n        return []\r\n    else:\r\n        if k == 1:\r\n            return a\r\n        else:\r\n            i = n - k\r\n            a = a[i:] + a[:i]\r\n            return a\r\n\r\n\r","votes":null},{"text":"\r\n    if a==None:\r\n        return None\r\n    else:\r\n        if len(a)<n:\r\n            print(\"Please give a valid input\")\r\n        elif n==1 or n==len(a):\r\n            return a\r\n        elif n<len(a):\r\n            b=a[:n]\r\n            b.extend(a[n:])\r\n            return b\r\n        else:\r\n            print(\"Please give a valid input\")\r\n\r\n\r","votes":null},{"text":"\r\n    a1=a[:n]\r\n    a2=a[n:]\r\n    a1.extend(a2)\r\n    return a1\r\n\r","votes":null},{"text":"\r\n    if n==0:\r\n        return a\r\n    return split_Arr(a,n-1,k)+[a[n]]\r\n\r\n\r","votes":null},{"text":"\r\n    if n<1 or k<1 or n<k:\r\n        return None\r\n    else:\r\n        b=a[:k]\r\n        b+=a[k:]\r\n        return b\r\n\r","votes":null},{"text":"\r\n    b=a[:n]\r\n    a=a[n:]\r\n    return b + a\r\n    \r","votes":null},{"text":"\r\n    l=a[0:n]\r\n    r=a[n:]\r\n    return l+r\r\n#","votes":null},{"text":"\r\n    \r\n    for i in range(n-k):\r\n        a[i], a[i+k] = a[i+k], a[i]\r\n    return a\r\n\r\n#main\r\na = [1,2,3,4,5,6,7,8,9,10]\r\nn = len(a)\r\nk = 2\r\na = split_Arr(a, n, k)\r\nprint(a)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    \r\n    for i in range(1,n+1):\r\n        if n%i == 0:\r\n            x = n\/\/i\r\n            if k <= x:\r\n                return a[:k*i] + a[k*i:]\r\n            else:\r\n                return a\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    a = a[:n]\r\n    a.extend(a[:k])\r\n    return a\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(n-k):\r\n        a.append(a.pop(0))\r\n    return a\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    return a[:n] + a[n:]\r\n\r\n\r","votes":null},{"text":"\r\n    return a[:n-k] + a[n-k:n] + a[n:]\r\n\r\n\r","votes":null},{"text":"\r\n    a1=a[:n]\r\n    a2=a[n:]\r\n    a2.append(a1)\r\n    return a2\r\n\r\n\r\n# In[8]:\r\n\r\n\r\na=[[1,2,3],[4,5,6],[7,8,9]]\r\nprint(split_Arr(a,2,1))\r\n\r\n\r\n# In[9]:\r\n\r\n\r\na=[[1,2,3],[4,5,6],[7,8,9]]\r\nprint(split_Arr(a,2,2))\r\n\r\n\r\n# In[10]:\r\n\r\n\r\na=[[1,2,3],[4,5,6],[7,8,9]]\r\nprint(split_Arr(a,2,3))\r\n\r\n\r\n# In[11]:\r\n\r\n\r\na=[[1,2,3],[4,5,6],[7,8,9]]\r\nprint(split_Arr(a,2,4))\r\n\r\n\r\n# In[12]:\r\n\r\n\r\na=[[1,2,3],[4,5,6],[7,8,9]]\r\nprint(split_Arr(a,2,5))\r\n\r\n\r\n# In[13]:\r\n\r\n\r\na=[[1,2,3],[4,5,6],[7,8,9]]\r\nprint(split_Arr(a,2,6))\r\n\r\n\r\n# In[14]:\r\n\r\n\r\na=[[1,2,3],[4,5,6],[7,8,9]]\r\nprint(split_Arr(a,2,7))\r\n\r\n\r\n# In[15]:\r\n\r\n\r\na=[[1,2,3],[4,5,6],[7,8,9]]\r\nprint(split_Arr(a,2,8))\r\n\r\n\r\n# In[16]:\r\n\r\n\r\na","votes":null},{"text":"\r\n    x=[]\r\n    y=[]\r\n    z=[]\r\n    for i in range(len(a)):\r\n        if i<n:\r\n            x.append(a[i])\r\n        else:\r\n            y.append(a[i])\r\n    for i in range(len(x)):\r\n        z.append(x[i])\r\n    z.append(y[k-1])\r\n    for i in range(len(y)):\r\n        if i!=k-1:\r\n            z.append(y[i])\r\n    return z\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    a.append(a.pop(0))\r\n    \r\n    return a\r\n\r\n# -----------------------------------------------------------------\r\n# Write a python function to check if two strings are anagrams or not.\r\n\r","votes":null},{"text":"\r\n    if n<k:\r\n        return 'Invalid Input'\r\n    else:\r\n        a1 = a[:k]\r\n        a2 = a[k:]\r\n        a1.extend(a2)\r\n        return a1\r\n\r","votes":null},{"text":"\r\n    a = a[:n] + a[n:]\r\n    return a\r\n\r","votes":null},{"text":"\r\n    a = a[:n] + a[n:]\r\n    return a\r\n\r\n\r\nn, k = map(int, input().split())\r\na = map(int, input().split())\r\na = list(a)\r\nprint(*split_Arr(a,n,k),sep=\" \")\r\n\r\n\r","votes":null},{"text":"\r","votes":null},{"text":"\r\n    \r\n    for i in range(0,n):\r\n        if (i+k)<=n:\r\n            a.append(a[i])\r\n            del a[i]\r\n    return a\r\n\r\n\"\"\"Test\"\"\"\r\na=[1,2,3,4,5,6,7,8,9,10]\r\nn=len(a)\r\nk=3\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\nr\n\r\n\r","votes":null},{"text":"\r\n    #n=len(a)\r\n    for i in range(n-k):\r\n        a.insert(i+k,a.pop(i))\r\n    return a\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    # code goes here\r\n    l=[]\r\n    for i in range(n):\r\n        if i<k:\r\n            l.append(a[i])\r\n        else:\r\n            l.append(a[n-i-1])\r\n    return l\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    b=a\r\n    c=[]\r\n    d=[]\r\n    for i in range(0,n):\r\n        d.append(b.pop(0))\r\n    c.append(d)\r\n    return c\r\n\r","votes":null},{"text":"\r\n    new_a = a[:n]\r\n    new_a.extend(a[n:k])\r\n    new_a.extend(a[k:])\r\n    return new_a\r\n\r\n\r","votes":null},{"text":"\r\n    if k == 0:\r\n        return a\r\n    if n == 1:\r\n        return [a[0]]\r\n    if n <= k:\r\n        return a[:n]\r\n    return split_Arr(a[k:],n-k,k)\r\n\r\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n# splitArr(arr, 10, 3)\r\n\r\n\r","votes":null},{"text":"\r\n    # a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\r\n    # n = 4\r\n    # k = 2\r\n    res = []\r\n    for i in range(n):\r\n        res.append(a[i*k:i*k+k])\r\n    res.append(res[0])\r\n    return res\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if n == 1:\r\n        return a\r\n    \r\n    if k == 1:\r\n        return split_Arr(a,n-1,k)\r\n    \r\n    return a[n-k:] + a[:n-k]\r\n\r\nif __name__ == '__main__':\r\n    \r\n    print(split_Arr([1,2,3,4,5],5,2))\r\n    print(split_Arr([1,2,3,4,5],5,1))\r\n    print(split_Arr([1,2,3,4,5],5,3))\r\n    print(split_Arr([1,2,3,4,5],5,4))\r\n    print(split_Arr([1,2,3,4,5],5,5))\r\n    print(split_Arr([1,2,3,4,5],","votes":null},{"text":"\r\n    \r\n    if n == 1:\r\n        return a\r\n    \r\n    for i in range(k,len(a),n):\r\n        a.append(a[i-k])\r\n    \r\n    a = a[:n]\r\n    \r\n    return a\r\n\r","votes":null},{"text":"\r\n    l= a[:n]\r\n    r= a[n:]\r\n    r.append(l)\r\n    return r\r\n#a= [1,","votes":null},{"text":"\r\n    return a[:k] + a[k:]\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    if a==[]:\r\n        return []\r\n    else:\r\n        return a[:k]+a[k:]\r\n\r\nprint(split_Arr([1,2,3,4,5,6,7,8],3,4))\r\nprint(split_Arr([1,2,3,4,5,6,7,8],3,2))\r\nprint(split_Arr([1,2,3,4,5,6,7,8],3,1))\r\nprint(split_Arr([1,2,3,4,5,6,7,8],3,0))\r\nprint(split_Arr([1,2,3,4,5,6,7,8],3,-1))\r\nprint(split_Arr([1,2,3,4,5,6,7,8],3,-2))\r\nprint(split_Arr([1,2,3,4,5,6,7,8],3,-3))\r\nprint(split_Arr([1,2,3,4,5,6,7,8],3,-4))\r\nprint(split_Arr([1,2,3,4,5,6,7,8],3,-5))\r\nprint(split_Arr([1,2,3,4,5,6,7,8],3,-6))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(k,n,k):\r\n        a.append(a[i])\r\n        a.pop(i-k)\r\n    return a\r\n\r\n\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nk = 3\r\n\r\nprint(split_Arr(arr, len(arr), k))\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here\r\n    \r\n    for i in range(k):\r\n        a[i],a[-1] = a[-1],a[i]\r\n    return a\r\n\r\n\r\n\r\n\r\na = [1,2,3,4,5,6,7,8,9]\r\nn = len(a)\r\nk = 3\r\nprint(split_Arr(a,n,k))\r\n\r\n\r\n\r\n# -----------------------------------------------------------------------------\r\n\r","votes":null},{"text":"\r\n    \r\n    # your code goes here\r\n    a=a[0:k]+a[k:]\r\n    return a\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    #your code starts here\r\n    x = a[:n]\r\n    y = a[n:]\r\n    z = x + y\r\n    return z\r\n    \r\n    #your code ends here\r\n\r","votes":null},{"text":"\r\n    \r\n    if len(a)<k:\r\n        return a\r\n    else:\r\n        x = a[:k]\r\n        y = a[k:]\r\n        return split_Arr(y,n,k-1) + x + split_Arr(y,n,k)\r\n    \r\n\r\n\r","votes":null},{"text":"\r\n    a.insert(n,a[0:k])\r\n    return a\r\n\r\n\r","votes":null},{"text":"\r\n    i = n\r\n    while i > 0:\r\n        if i < k:\r\n            a.append(a.pop(0))\r\n        else:\r\n            a.append(a.pop(i-k))\r\n        i = i-1\r\n    return a\r\n\r","votes":null},{"text":"\r\n    l=len(a)\r\n    b=a[:n]\r\n    c=a[n:]\r\n    d=b+c\r\n    return d\r\n\r\n\r\na=[1,2,3,4,5,6,7,8,9,10]\r\nn=3\r\nk=5\r\na1=split_Arr(a,n,k)\r\nprint(a1)\r\n\r\n#Example 2\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    for _ in range(k):\r\n        a = a[:n] + a[n:]\r\n        n = n+1\r\n    return a\r\n\r\na = list(map(int,input().split()))\r\nn = int(input())\r\nk = int(input())\r\n\r\nprint(","votes":null},{"text":"\r\n    return a[n:] + a[:n]\r\n\r\n\r","votes":null},{"text":"\r\n    if k>n:\r\n        return a\r\n    \r\n    for i in range(0,n-k):\r\n        a.append(a[i])\r\n    \r\n    return a\r\n\r\n\r","votes":null},{"text":"\r\n    b=a.copy()\r\n    for i in range(0,n):\r\n        if i==0:\r\n            a[i]=a[i]+a[i+k]\r\n            b[i+k]=a[i]\r\n        else:\r\n            a[i]=a[i]+a[i+k]\r\n            b[i+k-1]=a[i]\r\n    return b\r\n\r\n#n=int(input(\"Enter the number of elements in the array: \"))\r\n#a=list(map(int, input(\"Enter the array elements: \").split()))\r\n#n=len(a)\r\n#k=int(input(\"Enter the value of k: \"))\r\n#print(split_Arr(a,n,k))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if len(a) == 0:\r\n        return []\r\n    else:\r\n        return split_Arr(a[n:],k,k-1) + [a[:n]]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    L = len(a)\r\n    if(k>L):\r\n        return False\r\n    \r\n    l = L-k\r\n    return a[:l]+a[l:]\r\n\r\n#Driver Code\r\na = [1,2,3,4,5,6,7,8,9]\r\nn = len(a)\r\nk = 3\r\n\r\nprint(split_","votes":null},{"text":"\r\n    a1 = []\r\n    a2 = []\r\n    for i in range(n):\r\n        if i <= k:\r\n            a1.append(a[i])\r\n        else:\r\n            a2.append(a[i])\r\n    a1.extend(a2)\r\n    return a1\r\n\r\n\r","votes":null},{"text":"\r\n    if n<k:\r\n        return \"n is smaller than k, no need to split\"\r\n    else:\r\n        a = a[:k] + a[k:]\r\n        return a\r\n\r\n\r","votes":null},{"text":"\r\n    b=a[:n]\r\n    c=a[n:]\r\n    b.extend(c)\r\n    return b\r\n\r","votes":null},{"text":"\r\n    a[:k], a[k:] = a[:k], a[k:]\r\n    return a\r\n\r\nprint(split_Arr([1, 2, 3, 4, 5, 6], 3, 2))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    n=len(a)\r\n    for i in range(n-k):\r\n        a[i],a[i+k]=a[i+k],a[i]\r\n    return a\r\n\r\na=[1,2,3,4,5,6,7,8]\r\nk=3\r\nprint(split_Arr(a,len(a),k))\r\n\r\n\"\"","votes":null},{"text":"\r\n    if len(a) == n:\r\n        return a\r\n    else:\r\n        return a[:n] + a[n:]\r\n    \r\n\r\n    \r\nx = [1,2,3,4,5,6,7,8,9,10]\r\n\r\nprint(split_Arr(x,4,3))\r\n\r\n\r\n#Task 2\r","votes":null},{"text":"\r\n    if n==0:\r\n        return a\r\n    a[0:n] = a[0:n] + a[n::]\r\n    return a\r\n\r","votes":null},{"text":"\r\n    return a[:n] + a[n:k] + a[k:]\r\n\r\n# Split an array into two parts\r\n\r","votes":null},{"text":"\r\n    if n == 1:\r\n        return a\r\n    else:\r\n        return a[:k] + split_Arr(a[k:],n-1,k)\r\n\r","votes":null},{"text":"\r\n    #a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    #n = 10\r\n    #k = 4\r\n    if n < k:\r\n        return a\r\n    res = []\r\n    for i in range(1, k + 1):\r\n        res.append(a[i - 1])\r\n    for i in range(k, n + 1):\r\n        res.append(a[i - k])\r\n    res.append(res[0])\r\n    return res\r\n\r\n\r\nprint(split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 10, 4))\r\n\r\n\r","votes":null},{"text":"\r\n    # your code here\r\n    a=a[:]\r\n    for i in range(k):\r\n        a[i],a[-i-1]=a[-i-1],a[i]\r\n    return a\r\n\r\n\r","votes":null},{"text":"\r\n    a = a[:n] + a[n:]\r\n    print(a)\r\n\r\n# split_Arr([1,2,3,4,5,6,7,8,9],3,2)\r\n# print(a)\r\n# Output: [1, 2, 3, 4, 7, 8, 9, 5, 6]\r\n\r\n\r","votes":null},{"text":"\r\n    new_arr=[]\r\n    for i in range(n):\r\n        if (i+k)<=n:\r\n            new_arr.append(a[i+k])\r\n    new_arr.append(a[0])\r\n    return new_arr\r\n\r","votes":null},{"text":"\r\n    if n==1:\r\n        return a\r\n    else:\r\n        for i in range(len(a)-1,0,-1):\r\n            if (i%k==0):\r\n                a.append(a[i])\r\n                del a[i]\r\n        return a\r\n\r\n\r","votes":null},{"text":"\r\n    res = []\r\n    for i in range(n):\r\n        if i < k:\r\n            res.append(a[i])\r\n        else:\r\n            res.append(a[i-k])\r\n    return res\r\n\r","votes":null},{"text":"\r\n    \r\n    if n==0 and a==[]:\r\n        return []\r\n    else:\r\n        if n<0:\r\n            return None\r\n        elif n>len(a):\r\n            return None\r\n        else:\r\n            return a[:n] + split_Arr(a[n:],k-1,k)\r\n\r","votes":null},{"text":"\r\n    res = []\r\n    for i in range(n):\r\n        res.append(a[i])\r\n    for i in range(n):\r\n        res.append(a[i+n])\r\n    return res\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nn = len(a)\r\nk = 2\r\nprint(split_Arr(a,n,k))\r\n\r\n\r","votes":null},{"text":"\r\n    a[:k] = a[len(a)-k:]\r\n    a[len(a)-k:] = a[:k]\r\n    return a\r\n\r\n\r","votes":null},{"text":"\r\n    n = len(a)\r\n    i=0\r\n    while i<n-k:\r\n        if a[i]!=a[i+k]:\r\n            print(\"False\")\r\n            break\r\n        else:\r\n            i=i+1\r\n    else:\r\n        print(\"True\")\r\n\r\n\r\n\r\n\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],3,2)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],3,1)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],3,3)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],3,4)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],3,5)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],3,6)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],4,4)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],4,5)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],4,6)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],5,5)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],5,6)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],6,6)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],7,6)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\"],7,7)\r\n\r\nsplit_Arr([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\"],7,8)","votes":null}],"time":{"count":8.0,"avg":147056.7865,"std":35880.04169071,"cov":0.2439876632}}
{"id":587,"question":"def list_tuple(listx):\r\n    \"\"\"Write a function to convert a list to a tuple.\"\"\"","answers":[{"text":"\r\n    listx=tuple(listx)\r\n    return listx\r\n\r","votes":78730.884},{"text":"\r\n    return tuple(listx)\r\n\r\n\r","votes":82737.692},{"text":"\r\n    return tuple(listx)\r\n\r","votes":85469.484},{"text":"\r\n    #return (listx)\r\n    return tuple(listx)\r\n\r","votes":93200.644},{"text":"\r\n    tuplex = tuple(listx)\r\n    print(tuplex)\r\n    return tuplex\r\n\r\n\r","votes":93684.472},{"text":"\r\n    tuplex = tuple(listx)\r\n    return tuplex\r\n\r","votes":94279.576},{"text":"\r\n    tuplex = ()\r\n    for i in listx:\r\n        tuplex += (i,)\r\n    return tuplex\r\n\r","votes":97457.828},{"text":"\r\n    tuple_list = tuple(listx)\r\n    return tuple_list\r\n\r\n\r","votes":104321.504},{"text":"\r\n    # your code here\r\n    return tuple(listx)\r\n\r\n\r","votes":105087.06},{"text":"\r\n    listx = tuple(listx)\r\n    return listx\r\n\r\n\r\nprint(list_tuple(['hello', 'world']))\r\n\r\n\r","votes":107045.544},{"text":"\r\n    listy = tuple(listx)\r\n    return listy\r\n\r","votes":109117.208},{"text":"\r\n\r\n    return tuple(listx)\r\n\r\n\r","votes":110291.492},{"text":"\r\n    # Solution\r\n    return tuple(listx)\r\n\r\n\r","votes":114582.128},{"text":"\r\n    listx = tuple(listx)\r\n    return listx\r\n\r\n\r","votes":115983.356},{"text":"\r\n    listx = list(listx)\r\n    return tuple(listx)\r\n\r\n\r","votes":117145.048},{"text":"\r\n    return tuple(listx)\r\n    \r","votes":117473.148},{"text":"\r\n    \r\n    listx = tuple(listx)\r\n    return listx\r\n\r","votes":121236.164},{"text":"\r\n    tuplex = tuple(listx)\r\n    return tuplex\r\n\r\n\r","votes":121248.128},{"text":"\r\n    new_tuple = tuple(listx)\r\n    return new_tuple\r\n\r\n\r","votes":122945.368},{"text":"\r\n    list_tuple = tuple(listx)\r\n    return list_tuple\r\n\r\n\r","votes":124948.836},{"text":"\r\n    tuplex = tuple(listx)\r\n    print(\"tuple\", tuplex)\r\n    return tuplex\r\n\r\n\r","votes":125678.332},{"text":"\r\n    \r\n    listx=tuple(listx)\r\n    return listx\r\n\r\n\r","votes":126876.92},{"text":"\r\n    new_tuple = tuple(listx)\r\n    print(new_tuple)\r\n    return new_tuple\r\n\r\n\r","votes":130161.692},{"text":"\r\n    return tuple(listx)\r\n    \r\n\r","votes":131143.344},{"text":"\r\n    tuplex = ()\r\n    for i in listx:\r\n        tuplex = tuplex + (i,)\r\n    return tuplex\r\n\r","votes":132219.244},{"text":"\r\n    return tuple(listx)\r\n\r\n\r\n# =============================================================================\r\n# Write a function to convert a tuple to a list.\r\n#\r\n# Hint: You can use the \"list\" function to convert a tuple to a list.\r\n# =============================================================================\r\n\r","votes":134923.404},{"text":"\r\n    return tuple(listx)\r\n\r\nlistx = [1, 2, 3, 4, 5, 6]\r\nprint(list_tuple(listx))\r\n\r\n\r","votes":139138.52},{"text":"\r\n    # your code\r\n    return tuple(listx)\r\n\r\n\r\nx = [1, 2, 3, 4, 5]\r\nprint(list_tuple(x))\r\n\r\n\r","votes":139385.832},{"text":"\r\n    tuple_list=tuple(listx)\r\n    return tuple_list\r\n\r\n\r","votes":143671.32},{"text":"\r\n    tupx=tuple(listx)\r\n    return tupx\r\n\r","votes":145368.772},{"text":"\r\n    return tuple(listx)\r\n\r\n'''\r\nWrite a function to check if a list is in a tuple.\r\nWrite a function to check if a tuple is in a list.\r\n'''\r\nlistx = ['a', 'b', 'c']\r\ntuplex = ('a', 'b', 'c')\r\n\r","votes":149561.244},{"text":"\r\n    # Your code goes here\r\n    return tuple(listx)\r\n\r\n\r","votes":169887.34},{"text":"\r\n    list_tuple = tuple(listx)\r\n    return list_tuple\r\n    \r","votes":181146.468},{"text":"\r\n    tuple_list = ()\r\n    for x in range(len(listx)):\r\n        tuple_list += (listx[x],)\r\n    return tuple_list\r\n\r","votes":203280.336},{"text":"\r\n    return tuple(listx)\r\n\r\n\r\nprint(list_tuple([1, 2, 3]))  # (1, 2, 3)\r\n\r\n\r","votes":216396.308},{"text":"\r\n    list_tuple = listx\r\n    return list_tuple\r\n\r","votes":null},{"text":"\r\n    new_list = listx\r\n    print(type(new_list))\r\n    print(new_list)\r\n\r\n\r\n#","votes":null},{"text":"\r\n    tuple_list = ()\r\n    for i in listx:\r\n        tuple_list = tuple_list + (i,)\r\n    print(tuple_list)\r\n\r\n\r","votes":null},{"text":"\r\n    # convert the list to a tuple\r\n    tuple_list = tuple(listx)\r\n    print(tuple_list)\r\n\r\n\r","votes":null},{"text":"\r\n    tuple = (listx)\r\n    print(tuple)\r\n\r\n\r","votes":null},{"text":"\r\n    tuplex = []\r\n    for i in range(len(listx)):\r\n        tuplex.append((listx[i], listx[i]))\r\n    return tuplex\r\n\r\n\r\n# Tests\r\nprint(list_tuple([1, 2, 3])) # [(1, 1), (2, 2), (3, 3)]\r\nprint(list_tuple(['a', 'b', 'c'])) # [('a', 'a'), ('b', 'b'), ('c', 'c')]\r\nprint(list_tuple([1, 2, 3, 4, 5, 6, 7])) # [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7)]\r\nprint(","votes":null},{"text":"\r\n    # Convert the list to a tuple.\r\n    tup = tuple(listx)\r\n    # Return the tuple.\r\n    return tup\r\n\r\n\r\n# Tests\r\nprint(list_tuple([1, 2, 3]))\r\nprint(list_tuple((1, 2, 3)))\r\nprint(list_tuple(1, 2, 3))\r\nprint(list_tuple(1, 2, 3, 4, 5))\r\nprint(list_tuple([1, 2, 3, 4, 5]))\r\nprint(list_tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\n\r\n# Answer:\r\n# (1, 2, 3)\r\n# (1, 2, 3)\r\n# (1, 2, 3, 4, 5)\r\n# (1, 2, 3, 4, 5)\r\n# (1, 2, 3, 4, 5)\r\n# (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n\r\n\r","votes":null},{"text":"\r\n    listx=tuple(listx)\r\n    print(listx)\r\n\r\nlistx=[1,2,3,4,5]\r\nlist_tuple(listx)\r\n\r\nprint() \r\n\r","votes":null},{"text":"\r\n    list_tuple = tuple(listx)\r\n    print(\"The list: \", listx)\r\n    print(\"The tuple: \", list_tuple)\r\n\r\n\r\nlistx = [1, 2, 3, 4, 5]\r\n\r\nlist_tuple(listx)\r\n\r\n\r","votes":null},{"text":"\r\n    list_tuple = tuple(listx)\r\n    print(list_tuple)\r\n\r\n\r","votes":null},{"text":"\r\n    tuplex = tuple(listx)\r\n    print(tuplex)\r\n\r\n\r\n# print(list_tuple([1, 2, 3]))\r\n\r\n\r","votes":null}],"time":{"count":35.0,"avg":125309.2754285714,"std":31048.8854506196,"cov":0.2477780304}}
{"id":588,"question":"def big_diff(nums):\r\n    \"\"\"Write a python function to find the difference between largest and smallest value in a given array.\"\"\"","answers":[{"text":"\r\n\r\n    return abs(max(nums) - min(nums))\r\n\r\n\r","votes":67528.952},{"text":"\r\n    # return max(nums) - min(nums)\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":71491.644},{"text":"\r\n    return max(nums) - min(nums)\r\n\r","votes":74775.044},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":74931.432},{"text":"\r\n    \r\n    if len(nums) == 0:\r\n        return 0\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n\r","votes":80410.164},{"text":"\r\n    \r\n    smallest = nums[0]\r\n    largest = nums[0]\r\n    \r\n    for i in nums:\r\n        if i < smallest:\r\n            smallest = i\r\n        if i > largest:\r\n            largest = i\r\n            \r\n        \r\n        \r\n    return largest - smallest\r\n\r\n\r","votes":82257.328},{"text":"\r\n    nums.sort()\r\n    return nums[-1] - nums[0]\r\n\r\n\r","votes":82281.76},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\n# Example Test Case of 10\r\n\r","votes":84000.56},{"text":"\r\n    l = max(nums)\r\n    s = min(nums)\r\n    return abs(l-s)\r\n\r\n\r","votes":86176.836},{"text":"\r\n    return max(nums) - min(nums)\r\n    \r","votes":89506.996},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\n\r","votes":93426.684},{"text":"\r\n\r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":96340.356},{"text":"\r\n    biggest = max(nums)\r\n    smallest = min(nums)\r\n    return biggest - smallest\r\n\r\n\r","votes":97434.144},{"text":"\r\n    if nums == []:\r\n        return 0\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n\r","votes":98592.156},{"text":"\r\n    \r\n    if len(nums)==1:\r\n        return 0\r\n    else:\r\n        return max(nums)-min(nums)\r\n\r","votes":105397.648},{"text":"\r\n    x=nums[0]\r\n    y=nums[0]\r\n    for i in nums:\r\n        if i>x:\r\n            x=i\r\n        if i<y:\r\n            y=i\r\n    return(x-y)\r\n\r\n#print(big_diff([1,2,3,5,7]))\r\n\r\n\r\n\r","votes":105856.68},{"text":"\r\n    \r\n    return max(nums) - min(nums)\r\n\r\n\r","votes":106074.704},{"text":"\r\n    return max(nums)-min(nums)\r\n\r\n\r","votes":106591.876},{"text":"\r\n    arr = []\r\n    for i in nums:\r\n        arr.append(i)\r\n    arr.sort()\r\n    return arr[-1] - arr[0]\r\n\r\n\r","votes":106698.696},{"text":"\r\n    # Your code goes here\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    return max_num - min_num\r\n\r","votes":107079.872},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([10, 3, 5, 6]))\r\n\r\n\r","votes":107768.216},{"text":"\r\n    \r\n    if len(nums) == 0:\r\n        raise ValueError('Empty array')\r\n    \r\n    largest = nums[0]\r\n    smallest = nums[0]\r\n    \r\n    for i in range(len(nums)):\r\n        if nums[i] > largest:\r\n            largest = nums[i]\r\n        elif nums[i] < smallest:\r\n            smallest = nums[i]\r\n    \r\n    return largest - smallest\r\n\r\n\r","votes":110273.136},{"text":"\r\n    if nums:\r\n        return max(nums) - min(nums)\r\n    else:\r\n        return 0\r\n\r\n\r","votes":111042.724},{"text":"\r\n\r\n    largest = nums[0]\r\n    smallest = nums[0]\r\n\r\n    for i in range(len(nums)):\r\n        if nums[i] > largest:\r\n            largest = nums[i]\r\n        elif nums[i] < smallest:\r\n            smallest = nums[i]\r\n\r\n    return largest - smallest\r\n\r\n\r","votes":112555.38},{"text":"\r\n    # print(\"Big difference is\", max(nums) - min(nums))\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([1, 2, 3, 10]))\r\n\r\n\r","votes":112847.904},{"text":"\r\n    a = list(set(nums))\r\n    return max(a) - min(a)\r\n\r","votes":113010.488},{"text":"\r\n    \r\n    if len(nums) == 0:\r\n        return 0\r\n    \r\n    else:\r\n        max_num = max(nums)\r\n        min_num = min(nums)\r\n        return max_num - min_num\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [10, 50, 11, 20, 25, 15]\r\n    diff = big_diff(nums)\r\n    print(diff)\r\n\r\n\r\n\"\"\"\r\nTime O(N)\r\nSpace O(1)\r\n\r\n\"\"\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":113013.976},{"text":"\r\n    # find largest and smallest value in the list\r\n    max_value = max(nums)\r\n    min_value = min(nums)\r\n    diff = max_value - min_value\r\n    return diff\r\n\r\n\r","votes":113503.708},{"text":"\r\n    nums.sort()\r\n    return nums[-1]-nums[0]\r\n\r","votes":114565.176},{"text":"\r\n    if len(nums) == 0:\r\n        return 0\r\n    max_num = nums[0]\r\n    min_num = nums[0]\r\n    for num in nums:\r\n        if num > max_num:\r\n            max_num = num\r\n        if num < min_num:\r\n            min_num = num\r\n    return max_num - min_num\r\n\r\n\r","votes":117405.996},{"text":"\r\n    max_num, min_num = max(nums), min(nums)\r\n    return max_num - min_num\r\n\r\n\r","votes":118437.436},{"text":"\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    return max_num - min_num\r\n\r\n\r","votes":127092.076},{"text":"\r\n    # your code here\r\n    return max(nums) - min(nums)\r\n\r\n    \r","votes":128300.176},{"text":"\r\n\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    return max_num - min_num\r\n\r\n\r","votes":130292.436},{"text":"\r\n    \"\"\"Given an array of integers return the difference between the largest and smallest values in the array.\r\n\r\n    If the array length is less than two then return 0\r\n\r\n    >>> big_diff([1, 2, 3])\r\n    2\r\n    >>> big_diff([1, 1])\r\n    0\r\n    >>> big_diff([1, 1, 1])\r\n    0\r\n    >>> big_diff([1, 1, 1, 100])\r\n    99\r\n    >>> big_diff([100, 1, 1, 1])\r\n    99\r\n    >>> big_diff([100, 1, 1, 1, 100])\r\n    98\r\n    >>> big_diff([1, 100, 1, 1, 100])\r\n    99\r\n    >>> big_diff([100, 100, 100, 100, 100])\r\n    0\r\n    \"\"\"\r\n    if len(nums) < 2:\r\n        return 0\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n\r","votes":131177.108},{"text":"\r\n    if len(nums) == 0:\r\n        return 0\r\n    else:\r\n        largest = nums[0]\r\n        smallest = nums[0]\r\n        for n in nums:\r\n            if n > largest:\r\n                largest = n\r\n            elif n < smallest:\r\n                smallest = n\r\n        return largest - smallest\r\n\r\n\r","votes":131636.1},{"text":"\r\n    \r\n    max_value = max(nums)\r\n    min_value = min(nums)\r\n    \r\n    return max_value - min_value\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":135630.112},{"text":"\r\n    if len(nums) <= 1:\r\n        return 0\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n\r\n# ============================================================================================================================================\r\n\r","votes":135827.888},{"text":"\r\n    diff = max(nums) - min(nums)\r\n    return diff\r\n\r\n\r\nprint(big_diff([10, 33, 2, 11, 66, 99]))\r\nprint(big_diff([1, 2, 5, 3]))\r\nprint(big_diff([100, 5, 1000, 3, 1000000]))\r\n\r\n\r","votes":138529.66},{"text":"\r\n    largest = -1000000000\r\n    smallest = 1000000000\r\n    for i in nums:\r\n        if i > largest:\r\n            largest = i\r\n        if i < smallest:\r\n            smallest = i\r\n    return largest - smallest\r\n\r\n\r","votes":139495.704},{"text":"\r\n    \"\"\"Input: nums is an array of integers\"\"\"\r\n    \"\"\"Output: the difference between largest and smallest value in nums\"\"\"\r\n    \"\"\"Example:\r\n    Input: nums = [3, 6, -2, 7, 1]\r\n    Output: 15\r\n    \"\"\"\r\n    # TODO: Write your code here\r\n    \r\n    # Write your code here\r\n    min_num = min(nums)\r\n    max_num = max(nums)\r\n    result = max_num - min_num\r\n    return result\r\n\r\n\r","votes":139666.552},{"text":"\r\n    if len(nums) == 1:\r\n        return 0\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [1, 4, 3, 2, 5, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\r\n            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\r\n            59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\r\n            87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\r\n    print(big_diff(nums))  # should return 100\r\n\r\n    nums ","votes":140075.532},{"text":"\r\n    \r\n    number = len(nums)\r\n    \r\n    nums.sort()\r\n    \r\n    return nums[number - 1] - nums[0]\r\n    \r\n    \r\n# --------------------------------------------------\r\nprint(big_diff([10, 3, 5, 6]))\r\nprint(big_diff([7, 2, 4]))\r\nprint(big_diff([2, 10, 8]))\r\n# --------------------------------------------------\r\n# Reference\r\n# https:\/\/www.w3resource.com\/python-exercises\/python-basic-exercises.php\r\n# --------------------------------------------------\r\n\r\n\r","votes":142223.144},{"text":"\r\n    arr = sorted(nums)\r\n    return abs(arr[-1] - arr[0])\r\n \r\nprint(\"The difference between largest and smallest value in a given array is: \", big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\nprint(\"The difference between largest and smallest value in a given array is: \", big_diff([1, 1, 1, 1, 1, 1, 1, 1, 1]))\r\nprint(\"The difference between largest and smallest value in a given array is: \", big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(\"The difference between largest and smallest value in a given array is: \", big_diff([10, 12, 14, 16, 18, 20]))\r\nprint(\"The difference between largest and smallest value in a given array is: \", big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\r\n\r\n\r","votes":143663.436},{"text":"\r\n    largest = max(nums)\r\n    smallest = min(nums)\r\n    return largest - smallest\r\n\r\n\r","votes":145979.392},{"text":"\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n    diff = max_num - min_num\r\n    return diff\r\n\r\n\r","votes":146522.02},{"text":"\r\n    biggest = nums[0]\r\n    smallest = nums[0]\r\n    for i in nums:\r\n        if i > biggest:\r\n            biggest = i\r\n        elif i < smallest:\r\n            smallest = i\r\n    return biggest - smallest\r\n\r","votes":147190.392},{"text":"\r\n    if len(nums) == 1:\r\n        return nums[0]\r\n    else:\r\n        max_val = max(nums)\r\n        min_val = min(nums)\r\n        return max_val - min_val\r\n\r\n\r","votes":153164.084},{"text":"\r\n    diff=nums[0]\r\n    for i in range(len(nums)):\r\n        if nums[i]>diff:\r\n            diff=nums[i]\r\n    diff2=nums[0]\r\n    for i in range(len(nums)):\r\n        if nums[i]<diff2:\r\n            diff2=nums[i]\r\n    return diff-diff2\r\n\r","votes":155730.236},{"text":"\r\n    if nums == []:\r\n        return None\r\n    else:\r\n        max_value = max(nums)\r\n        min_value = min(nums)\r\n        return max_value - min_value\r\n\r\nprint(big_diff([3, 8, 1, 3]))\r\nprint(big_diff([]))\r\nprint(big_diff([-10, -20, -1000, -10000]))\r\nprint(big_diff([1, 2, 3, 4, 5]))\r\nprint(big_diff([1000]))\r\nprint(big_diff([1, 2, 3, 4, 5, 1000]))\r\nprint(big_diff([1, 2, 3, 4, 5, 5]))\r\nprint(big_diff([1, 2, 3, 4, 5, 5, 1000]))\r\nprint(big_diff([1, 2, 3, 4, 5, 5, 1000, 1001, 1002]))\r\nprint(big_diff([1, 2, 3, 4, 5, 5, 1000, 1001, 1002, 1003, 1004, 1005]))\r\nprint(big_diff([1, 2, 3, 4, 5, 5, 1000, 1001, 1002, 1003, 1004, 1005, 1006]))\r\nprint(big_diff([1, 2, 3, 4, 5, 5, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 10000]))\r\nprint","votes":167156.14},{"text":"\r\n    if len(nums) <= 1:\r\n        return 0\r\n    elif len(nums) == 2:\r\n        return abs(nums[0] - nums[1])\r\n    else:\r\n        min_num = min(nums)\r\n        max_num = max(nums)\r\n        return abs(max_num - min_num)\r\n\r\n\r\nprint(big_diff([10, 3, 5, 6]))  # 7\r\nprint(big_diff([7, 2, 10, 9]))  # 8\r\nprint(big_diff([2, 10, 7, 8]))  # 6\r\nprint(big_diff([10, 7, 2, 9]))  # 6\r\nprint(big_diff([3, 10, 7, 2]))  # 7\r\nprint(big_diff([7, 2, 10, 9, 3]))  # 8\r\nprint(big_diff([10, 7, 2, 9, 3]))  # 6\r\nprint(big_diff([2, 10, 7, 8, 3]))  # 6\r\nprint(big_diff([2, 10, 7, 8, 9]))  # 6\r\nprint(big_diff([2, 10, 7, 8, 9, 3]))  # 6\r\nprint(big_diff([10, 7, 2, 9, 3, 1]))  # 8\r\nprint(big_diff([2, 10, 7, 8, 9, 3, 1]))  # 6\r\nprint(big_diff([2, 10, 7, 8, 9, 3, 1, 4]))  # 5\r\n\r\n\r","votes":167393.808},{"text":"\r\n    if not nums:\r\n        return 0\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([1, 4, 2, 10, 9, 5, 6, 3]))\r\nprint(big_diff([1, 4, 2, 10, 9, 5, 6, 3, 100]))\r\nprint(big_diff([1, 4, 2, 10, 9, 5, 6, 3, 100, 1000]))\r\nprint(big_diff([5]))\r\nprint(big_diff([]))\r\nprint(big_diff(None))\r\n\r\n# Another solution\r","votes":168415.888},{"text":"\r\n    \r\n    nums.sort()\r\n    return nums[-1] - nums[0]\r\n\r\n\r\nprint(big_diff([10, 3, 5, 6]))\r\nprint(big_diff([7, 2, 4]))\r\nprint(big_diff([10, 9, 1, 3]))\r\nprint(big_diff([10, 9, 1, 3, 4, 5, 6, 7, 8, 2]))\r\nprint(big_diff([10, 9, 1, 3, 4, 5, 6, 7, 8, 2, 11, 12]))\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------\r\n\r","votes":176605.24},{"text":"\r\n    # Your code goes here\r\n    \r\n    max_num = nums[0]\r\n    min_num = nums[0]\r\n    \r\n    for i in range(1, len(nums)):\r\n        if nums[i] > max_num:\r\n            max_num = nums[i]\r\n        if nums[i] < min_num:\r\n            min_num = nums[i]\r\n    return max_num - min_num\r\n\r\n\r","votes":181696.888},{"text":"\r\n    if len(nums) == 0:\r\n        return None\r\n    if len(nums) == 1:\r\n        return 0\r\n    low = nums[0]\r\n    high = nums[0]\r\n    for i in range(1, len(nums)):\r\n        if nums[i] < low:\r\n            low = nums[i]\r\n        elif nums[i] > high:\r\n            high = nums[i]\r\n        \r\n    return high - low\r\n\r\n\r","votes":186008.668},{"text":"\r\n    n = len(nums)\r\n    if n == 1:\r\n        return 0\r\n    else:\r\n        max_val = nums[0]\r\n        min_val = nums[0]\r\n        for i in range(1, n):\r\n            if nums[i] > max_val:\r\n                max_val = nums[i]\r\n            elif nums[i] < min_val:\r\n                min_val = nums[i]\r\n        return max_val - min_val\r\n\r\n\r","votes":192499.032},{"text":"\r\n\r\n    smallest=nums[0]\r\n    largest=nums[0]\r\n    for i in nums:\r\n        if i>largest:\r\n            largest=i\r\n        if i<smallest:\r\n            smallest=i\r\n    return largest-smallest\r\n\r\n\r\n\r","votes":198143.152},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\nprint(big_diff([10, 3, 5, 6, 2]))\r\nprint(big_diff([7, 2, 4, 6, 5]))\r\nprint(big_diff([2, 10, 8, 6, 4]))\r\nprint(big_diff([100, 3, 5, 6, 2]))\r\nprint(big_diff([100, 40, 50, 60, 20]))\r\nprint(big_diff([100, 40, 50, 60, 20, 70]))\r\nprint(big_diff([100, 40, 50, 60, 20, 70, 90]))\r\nprint(big_diff([100, 40, 50, 60, 20, 70, 90, 120]))\r\n\r\n\r","votes":211382.808},{"text":"\r\n    max_num = nums[0]\r\n    min_num = nums[0]\r\n\r\n    for num in nums:\r\n        if num > max_num:\r\n            max_num = num\r\n        if num < min_num:\r\n            min_num = num\r\n\r\n    diff = max_num - min_num\r\n    return diff\r\n\r\n\r\nprint(big_diff([5, 3, 2, 11, 1, -10]))\r\n# 16\r\n\r\n\r","votes":253061.652},{"text":"\r\n    min_number = nums[0]\r\n    max_number = nums[0]\r\n    for i in range(len(nums)):\r\n        if nums[i] < min_number:\r\n            min_number = nums[i]\r\n        elif nums[i] > max_number:\r\n            max_number = nums[i]\r\n    return max_number - min_number\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [10, 20, 30]\r\n    print(big_diff(nums))\r\n\r\n    nums = [100, 100, 100]\r\n    print(big_diff(nums))\r\n\r\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\n    print(big_diff(nums))\r\n\r\n    nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]\r\n    print(big_diff(nums))\r\n\r\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\r\n            115, 116, 117, 118, 119, 120]\r\n    print(big_diff(nums))","votes":255389.62},{"text":"\r\n    big_diff = 0\r\n    smaller = 0\r\n    larger = 0\r\n    for i in range(len(nums)):\r\n        if nums[i] < smaller:\r\n            smaller = nums[i]\r\n        if nums[i] > larger:\r\n            larger = nums[i]\r\n    big_diff = larger - smaller\r\n    return big_diff\r\n\r\n# print(big_diff([1000, 100, 10, 1]))\r\n# print(big_diff([1000, 1000, 1000, 1000]))\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([3, 9, 7, 13, 11, 17, 5, 19]))\r\nprint(big_diff([3, 9, 7, 13, 11, 17, 19, 7]))\r\nprint(big_diff([1, 1, 1, 1, 1]))\r\nprint(big_diff([1, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 1000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000, 30000, 31000, 32000, 33000, 34000, 35000, 36000, 37000, 38000, 39000, 40000, 41000, 42000, 43000, 44000, 45000, 46000, 47000, 48000, 49000, 50000, 51000, 52000, 53","votes":null},{"text":"\r\n    if len(nums) < 2:\r\n        return 0\r\n    return max(nums) - min(nums)\r\n\r\n\r\na = [1, 2, 3, 4]\r\nprint(big_diff(a))\r\n\r\na = [1, 2, 3, 4, 5]\r\nprint(big_diff(a))\r\n\r\na = [1, 2, 3, 4, 5, 6]\r\nprint(big_diff(a))\r\n\r\na = [1, 2, 3, 4, 5, 6, 7]\r\nprint(big_diff(a))\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8]\r\nprint(big_diff(a))\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nprint(big_diff(a))\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nprint(big_diff(a))\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\nprint(big_diff(a))\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\nprint(big_diff(a))\r\n\r\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\r\nprint(big_diff(a))\r\n\r\na = [1, 2, 3, 4, ","votes":null},{"text":"\r\n    diff = nums[0] - nums[1]\r\n    for i in range(2, len(nums)):\r\n        if nums[i] - nums[i - 1] > diff:\r\n            diff = nums[i] - nums[i - 1]\r\n    return diff\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    big_diff = 0\r\n    small_diff = 0\r\n    for i in range(0, len(nums)):\r\n        if i == 0:\r\n            small_diff = nums[i]\r\n        elif nums[i] > big_diff:\r\n            big_diff = nums[i]\r\n        elif nums[i] < small_diff:\r\n            small_diff = nums[i]\r\n    return big_diff - small_diff\r\n\r\n\r\n# Write your function below:\r\n","votes":null},{"text":"\r\n    # Your code here\r\n    return max(nums) - min(nums)\r\n\r\n\r\nif __name__ == '__main__':\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    print(\"The difference between largest and smallest value in a given array is:\", big_diff(nums))\r\n\r\n    nums = [10, 15, 30, 20, 50, -10, 25, 45, 35, 60]\r\n    print(\"The difference between largest and smallest value in a given array is:\", big_diff(nums))\r\n\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(\"The difference between largest and smallest value in a given array is:\", big_diff(nums))\r\n\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    print(\"The difference between largest and smallest value in a given array is:\", big_diff(nums))\r\n\r\n    nums = [1]\r\n    print(\"The difference between largest and smallest value in a given array is:\", big_diff(nums))\r\n\r\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26","votes":null},{"text":"\r\n    if len(nums) == 0:\r\n        return 0\r\n    if len(nums) == 1:\r\n        return nums[0]\r\n    max_num = nums[0]\r\n    min_num = nums[0]\r\n    for i in range(len(nums)):\r\n        if nums[i] > max_num:\r\n            max_num = nums[i]\r\n        elif nums[i] < min_num:\r\n            min_num = nums[i]\r\n    return max_num - min_num\r\n\r\n\r\n\"\"\"\r\nclass Solution:\r\n   ","votes":null},{"text":"\r\n    if len(nums) <= 1:\r\n        return 0\r\n    else:\r\n        nums.sort()\r\n        return nums[-1] - nums[0]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(big_diff([1, 3, 99, 1000]))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert big_diff([1, 3, 99, 1000]) == 989\r\n    assert big_diff([1, 3, 99]) == 98\r\n    assert big_diff([1, 3, 99, 1000, 10, 33, 55]) == 989\r\n    assert big_diff([1, 3, 99, 1000, 10, 33, 55, 88, 999]) == 989\r\n    print(\"Coding complete? Click 'Check' to ear","votes":null},{"text":"\r\n    # Find the max and min\r\n    max_num = max(nums)\r\n    min_num = min(nums)\r\n\r\n    # Find the difference\r\n    diff = max_num - min_num\r\n\r\n    # Return the difference\r\n    return diff\r\n\r\n\r\nprint(big_diff([1, 2, 3, 4, 5, 6]))\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 9, 10]))\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 9, ","votes":null},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n# Testing\r\nnums = [2, 5, 4, 1, 7, 23]\r\nassert big_diff(nums) == 22\r\nnums = [1, 5, 4, 1, 7, 23]\r\nassert big_diff(nums) == 22\r\nnums = [2, 5, 4, 1, 7, 23, 10]\r\nassert big_diff(nums) == 22\r\nnums = [2, 5, 4, 1, 7, 23, 10, ","votes":null},{"text":"\r\n    max_value = max(nums)\r\n    min_value = min(nums)\r\n    \r\n    return max_value - min_value\r\n    \r\n# Tests\r\nprint(big_diff([1, 3, 9, 11, 15, 20]))\r\nprint(big_diff([1, 3, 9, 11, 20]))\r\nprint(big_diff([1, 3, 9, 20]))\r\nprint(big_diff([1, 3, 9]))\r\nprint(big_diff([1, 3]))\r\nprint(big_diff([1]))\r\nprint(big_diff([]))\r\n\r\n# Code of the person who added this problem and solved it:\r\n#","votes":null},{"text":"\r\n\r\n    # Write your code here\r\n    if len(nums) == 1:\r\n        return 0\r\n    elif len(nums) == 2:\r\n        return max(nums) - min(nums)\r\n    else:\r\n        return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([100, 9, 80","votes":null},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nprint(big_diff([1, 5, 2, 3, 4]))  # 4\r\nprint(big_diff([1, 5, 5, 2, 3, 4]))  # 4\r\nprint(big_diff([5, 10, 100, 1000]))  # 945\r\nprint(big_diff([1, 2, 3, 4, 5]))  # 4\r\nprint(big_diff([10, 9, 8, 7, 6]))  # 1\r\nprint(big_diff([]))  # 0\r\nprint(big_diff([100, 100, 100, 100, 100, 100]))  # 0\r\nprint(big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # 9\r\n#","votes":null},{"text":"\r\n    max_diff = 0\r\n    max_num = 0\r\n    min_num = 0\r\n    for i in nums:\r\n        if i > max_num:\r\n            max_num = i\r\n    for i in nums:\r\n        if i < min_num:\r\n            min_num = i\r\n    return max_num - min_num\r\n\r\n\r\nprint(big_diff([1, 5, 0, 10, 7]))\r\nprint(big_diff([10, 3, 5, 6]))\r\nprint(big_diff([1, 2, 3]))\r\nprint(big_diff([100, 100, 100]))\r\nprint(big_diff([1, 100, 100]))\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    maxval = nums[0]\r\n    minval = nums[0]\r\n\r\n    for i in range(1,len(nums)):\r\n        maxval = max(maxval,nums[i])\r\n        minval = min(minval,nums[i])\r\n\r\n    return maxval - minval\r\n\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    nums = list(map(int, input().rstrip().split()))\r\n\r\n    result = big_diff(nums)\r\n\r\n    fptr.write(str(result) + '\\n')\r\n\r\n    fptr.close()\r\n\r\n'''\r\n\r\n#!\/bin\/python3\r\n\r\nimport math\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\n\r\n#\r\n# Complete the 'big_diff' function below.\r\n#\r\n# The function is expected to return an INTEGER.\r\n# The function accepts INTEGER_ARRAY nums as parameter.\r\n#\r\n\r","votes":null},{"text":"\r\n    return max(nums) - min(nums)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(big_diff([1, 1, 1, 100, 1000]))\r\n    print(big_diff([1, 10, 100, 1000, 10000]))\r\n    print(big_diff([-1000, -100, -10, -1, 0, 1, 10, 100, 1000]))\r\n    print(big_diff([-1000, -100, -10, -1, 0, 1, 10, 100, 1000, 10000]))\r\n    print(big_diff([0, 0, 0, 1000, 10000]))\r\n    print(big_diff([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\r\n    print(big_diff([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]))\r\n    print(big_diff([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0","votes":null},{"text":"\r\n    if len(nums) == 0:\r\n        return 0\r\n    else:\r\n        l = nums[0]\r\n        s = nums[0]\r\n        for i in range(1, len(nums)):\r\n            if nums[i] > l:\r\n                l = nums[i]\r\n            if nums[i] < s:\r\n                s = nums[i]\r\n        return l-s\r\n\r\n\r\nprint(big_diff([3, 2, 1, 5, 6, 4]))\r\nprint(big_diff([1, 5, 23, 7]))\r\nprint(big_diff([2, 3, 5, 7, 11, 13]))\r\nprint(big_diff([","votes":null},{"text":"\r\n    if len(nums) == 1:\r\n        return 0\r\n    else:\r\n        nums.sort()\r\n        num1 = nums[len(nums)-1]\r\n        num2 = nums[0]\r\n        return num1 - num2\r\n\r\n\r\nprint(big_diff([3, 2, 10, 6]))\r\nprint(big_diff([3, 2, 10]))\r\nprint(big_diff([3, 2, 10, 6, 5]))\r\nprint(big_diff([10, 100, 1, 2, 1, 11, 111, 1111, 11111, 111111]))\r\nprint(big_diff([","votes":null},{"text":"\r\n    nums=sorted(nums)\r\n    return abs(nums[-1]-nums[0])\r\n\r\nif __name__ == '__main__':\r\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\r\n\r\n    n = int(input())\r\n\r\n    nums = []\r\n\r\n    for _ in range(n):\r\n        nums_item = int(input())\r\n        nums.append(nums_item)\r\n\r\n    result = big_diff(nums)\r\n\r\n    fptr.write(","votes":null},{"text":"\r\n    diff = nums[0]\r\n    for i in range(len(nums)):\r\n        if nums[i] > diff:\r\n            diff = nums[i]\r\n    for i in range(len(nums)):\r\n        if nums[i] < diff:\r\n            diff = nums[i]\r\n    return diff\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Sort the list\r\n    nums.sort()\r\n    # Get the largest and smallest number from the list\r\n    largest = nums[-1]\r\n    smallest = nums[0]\r\n    # Calculate the big difference\r\n    big_diff = largest - smallest\r\n    return big_diff\r\n\r\nif __name__ == '__main__':\r\n    print(big_diff([3, 17, 12, 11]))\r\n    print(big_diff([2, 3, 6, 8, 10, 4, 1, 18, 19]))\r\n    print(big_diff([3, 6, 7, 7, 5, 2, 1, 9, 11]))\r\n    print(big_diff([5, 8, 3, 1, 15, 10, 4, 7, 13, 2, 6]))\r\n    print(big_diff([-2, 3, 11, 10, 1, 5, 6, 8, 7, 9]))\r\n    print(big_diff([-214748364, -214748364, -214748364]))\r\n    print(big_diff([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]))\r\n    print(big_diff([-214748364, 214748364, -214748364, 214748364, -214748364]))\r\n    print(big_diff([1, 100, 1000000000, 100000000000000000000000","votes":null},{"text":"\r\n    \r\n    if len(nums) == 0:\r\n        return None\r\n    \r\n    max_num = 0\r\n    min_num = 1000\r\n    \r\n    for num in nums:\r\n        if num > max_num:\r\n            max_num = num\r\n            \r\n        if num < min_num:\r\n            min_num = num\r\n    \r\n    return max_num - min_num\r\n\r\n\r\n# Tests\r\nprint(big_diff([1, 2, 3, 4, 10]))\r\n# 9\r\n\r\nprint(big_diff([]))\r\n# None\r\n\r\nprint(big_diff([0, 0, 10, 10, 10]))\r\n# None\r\n\r\nprint(big_diff([0, 0, 0, 0, 0]))\r\n# None\r\n\r\nprint(big_diff([10, 9, 8, 7, 6]))\r\n# 1\r\n\r\nprint(big_diff([10, 9, 8, 7, 0, 10]))\r\n# 2\r\n\r\nprint(big_diff([10, 9, 8, 7, 6, 7, 7, 7, 7, 7, 7, 7]))\r\n# 6\r\n\r\nprint(big_diff([10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]))\r\n# 0\r\n\r\nprint(big_diff([1]))\r\n# None\r\n\r\nprint(big_diff([1, 2, 3, 4, 5, 6]))\r\n# 5\r\n\r\nprint(big_diff([1, 10, 100, 1000]))\r\n# 999\r\n\r\nprint(bi","votes":null},{"text":"\r\n    arr = nums\r\n    max_val = 0\r\n    min_val = 0\r\n    for num in arr:\r\n        if num > max_val:\r\n            max_val = num\r\n    for num in arr:\r\n        if num < min_val:\r\n            min_val = num\r\n    return (max_val - min_val)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    \r\n    diff = 0\r\n    for i in range(1, len(nums)):\r\n        if nums[i] > nums[i - 1]:\r\n            diff = nums[i] - nums[i - 1]\r\n    return diff\r\n\r\n\r","votes":null}],"time":{"count":60.0,"avg":128853.7769333333,"std":40799.1890502516,"cov":0.3166316892}}
{"id":589,"question":"def perfect_squares(a, b):\r\n    \"\"\"Write a function to find perfect squares between two given numbers.\"\"\"","answers":[{"text":"\r\n    perfect_squares = []\r\n    for number in range(a, b + 1):\r\n        if number ** 0.5 % 1 == 0:\r\n            perfect_squares.append(number)\r\n    return perfect_squares\r\n\r\n\r","votes":117612.22},{"text":"\r\n    perfect_squares = []\r\n    for num in range(a, b + 1):\r\n        if num ** 0.5 % 1 == 0:\r\n            perfect_squares.append(num)\r\n    return perfect_squares\r\n\r\n\r\nprint(perfect_squares(6, 25))\r\n\r\n\r","votes":119980.12},{"text":"\r\n    # Write your code here\r\n    perfect_squares = []\r\n    for i in range(int(a), int(b)+1):\r\n        if i**0.5%1 == 0:\r\n            perfect_squares.append(i)\r\n    return perfect_squares\r\n\r\n\r","votes":120753.532},{"text":"\r\n    # your code here\r\n    perfect_squares = []\r\n    for square in range(a, b+1):\r\n        if square ** 0.5 == int(square ** 0.5):\r\n            perfect_squares.append(square)\r\n    return perfect_squares\r\n\r\n\r","votes":121633.176},{"text":"\r\n    squares=[]\r\n    \r\n    for i in range(a,b+1):\r\n        if i**0.5==int(i**0.5):\r\n            squares.append(i)\r\n    \r\n    return squares\r\n\r","votes":130223.108},{"text":"\r\n    squares = []\r\n    for i in range(a, b + 1):\r\n        if i**0.5 == int(i**0.5):\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r\nprint(perfect_squares(1, 10))\r\n\r\n\r","votes":137022.096},{"text":"\r\n    # Write your code here\r\n    return [x for x in range(a, b+1) if x**0.5 == int(x**0.5)]\r\n\r","votes":138836.632},{"text":"\r\n    \r\n    # Initialize an array with the numbers from a to b\r\n    numarr = []\r\n    for i in range(a, b + 1):\r\n        numarr.append(i)\r\n    \r\n    # Initialize a list with the perfect squares from a to b\r\n    perfectsquares = []\r\n    \r\n    # Iterate over the array\r\n    for i in numarr:\r\n        \r\n        # Calculate the square root of the number in the array\r\n        sqrt = i ** 0.5\r\n        \r\n        # If the square root is an integer, append the number to the list\r\n        if int(sqrt) == sqrt:\r\n            perfectsquares.append(i)\r\n    \r\n    return perfectsquares\r\n\r\n# Test the function\r\nprint(perfect_squares(1, 13))\r\n\r\n\r\n# Explanation\r\n# \r\n# 1. Initialize an array with the numbers from a to b.\r\n# 2. Initialize a list with the perfect squares from a to b.\r\n# 3. Iterate over the array.\r\n# 4. Calculate the square root of the number in the array.\r\n# 5. If the square root is an integer, append the number to the list.\r\n# 6. Return the list.\r\n\r\n# Example 1\r\n\r\n# Input\r\n\r\n# a = 1\r\n# b = 13\r\n\r\n# Output\r\n\r\n# [1, 4, 9]\r\n\r\n# Explanation\r\n\r\n# The perfect squares between 1 and 13 are 1, 4, and 9.\r\n\r\n# Example 2\r\n\r\n# Input\r\n\r\n# a = 1\r\n# b = 5\r\n\r\n# Output\r\n\r\n# [1, 4]\r\n\r\n# Explanation\r\n\r\n# The perfect squares between 1 and 5 are 1 and 4.\r\n\r\n# Example 3\r\n\r\n# Input\r\n\r\n# ","votes":139896.72},{"text":"\r\n    \r\n    # list of perfect squares\r\n    perfect_squares = []\r\n    \r\n    # loop from a to b\r\n    for num in range(a, b+1):\r\n        # check if the sqrt of the number is an integer\r\n        if num ** 0.5 == int(num ** 0.5):\r\n            # if yes, add it to the list\r\n            perfect_squares.append(num)\r\n            \r\n    # return the list\r\n    return perfect_squares\r\n\r\n# test function\r\nprint(perfect_squares(1, 100))\r\n\r\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n\r\n\r","votes":146371.544},{"text":"\r\n    perfect_squares = []\r\n    for number in range(a, b + 1):\r\n        root = int(number ** 0.5)\r\n        if root * root == number:\r\n            perfect_squares.append(number)\r\n    return perfect_squares\r\n\r\n\r","votes":150408.388},{"text":"\r\n    # First we need to create a list of all the numbers between a and b\r\n    # Note that we can't just use a for loop to generate the list, since\r\n    # we want to skip over the numbers that are not perfect squares\r\n    perfect_square_list = []\r\n    x = a\r\n    while x <= b:\r\n        perfect_square_list.append(x)\r\n        x += 1\r\n    # Now we need to loop through the list and check if the number is a\r\n    # perfect square\r\n    perfect_square_list_2 = []\r\n    for i in perfect_square_list:\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            perfect_square_list_2.append(i)\r\n    return perfect_square_list_2\r\n\r\n\r\na, b = 5, 20\r\nprint(perfect_squares(a, b))\r\n\r\n\r","votes":154788.492},{"text":"\r\n    squares = []\r\n    for num in range(a, b + 1):\r\n        if num ** 0.5 == int(num ** 0.5):\r\n            squares.append(num)\r\n    return squares\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(perfect_squares(1, 10))\r\n    print(perfect_squares(10, 100))\r\n    print(perfect_squares(100, 1000))\r\n    print(perfect_squares(1000, 10000))\r\n    print(perfect_squares(10000, 100000))\r\n    print(perfect_squares(100000, 1000000))\r\n    print(perfect_squares(1000000, 10000000))\r\n    print(perfect_squares(10000000, 100000000))\r\n    print(perfect_squares(100000000, 1000000000))","votes":161916.068},{"text":"\r\n    # For each number between a and b, check whether it is the square of an integer.\r\n    # If it is, then append it to the list squares.\r\n    # Return the list squares.\r\n\r\n    squares = []\r\n    for i in range(a, b + 1):\r\n        if i**0.5 % 1 == 0:\r\n            squares.append(i)\r\n\r\n    return squares\r\n\r\n\r","votes":162508.988},{"text":"\r\n    square_list = []\r\n    for i in range(a, b+1):\r\n        if i ** 0.5 % 1 == 0:\r\n            square_list.append(i)\r\n    return square_list\r\n\r\n\r","votes":162678.02},{"text":"\r\n    \r\n    # Initialise some variables\r\n    perfect_squares_list = []\r\n    \r\n    # Calculate the perfect squares between a and b\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            perfect_squares_list.append(i)\r\n    \r\n    # Print the perfect squares\r\n    print(perfect_squares_list)\r\n    \r\n    # Return the perfect squares\r\n    return perfect_squares_list\r\n\r\n\r\nperfect_squares(1, 100)\r\n\r\n\r\n# Write a function to find the largest perfect square in a list.\r","votes":170196.012},{"text":"\r\n\r\n    perfect_squares = []\r\n    for i in range(a, b + 1):\r\n        if (i ** 0.5).is_integer():\r\n            perfect_squares.append(i)\r\n    return perfect_squares\r\n\r\nprint(perfect_squares(1, 5))\r\n\r\n\r","votes":177444.164},{"text":"\r\n    perfect_squares_list = []\r\n    for num in range(a, b+1):\r\n        if num**0.5 % 1 == 0:\r\n            perfect_squares_list.append(num)\r\n    return perfect_squares_list\r\n\r\n\r","votes":186388.952},{"text":"\r\n    # Your code here\r\n    perfectSquares = []\r\n    for i in range(a, b+1):\r\n        if i**0.5 == int(i**0.5):\r\n            perfectSquares.append(i)\r\n    return perfectSquares\r\n\r\n\r","votes":200885.104},{"text":"\r\n    \r\n    a = int(a)\r\n    b = int(b)\r\n    perfect_squares = []\r\n    \r\n    for number in range(a, b+1):\r\n        if number ** 0.5 % 1 == 0:\r\n            perfect_squares.append(number)\r\n    \r\n    return perfect_squares\r\n\r","votes":204871.016},{"text":"\r\n    perfect = []\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            perfect.append(i)\r\n    return perfect\r\n\r\n\r","votes":205279.26},{"text":"\r\n    squares = []\r\n    for i in range(a, b+1):\r\n        if i**0.5 == int(i**0.5):\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(1, 100))\r\n\r\n# Output:\r\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n\r\n# Explanation:\r\n# The function perfect_squares(1, 100) should return [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] because they are the perfect squares between 1 and 100.\r\n\r\n# Note:\r\n#     a and b are integers within the range [1, 1500].\r\n\r\n# Hints:\r\n#     Think about the range of numbers.\r\n#     Is there a pattern to the perfect squares?\r\n#     Is there a way to find the perfect squares faster?\r\n\r\n# Solution:\r\n# 1. Use a to compute the range of numbers.\r\n# 2. Use b to compute the last number of the range.\r\n# 3. Use range() to compute the perfect squares.\r\n# 4. Use int() to convert the perfect squares to integers.\r\n\r\n# Complexity:\r\n#   O(n)\r\n\r\n# Better solution:\r\n# 1. Use math.sqrt() to compute the perfect squares.\r\n# 2. Use int() to convert the perfect squares to integers.\r\n# 3. Use range() to compute the perfect squares.\r\n\r\n# Complexity:\r\n#   O(n)\r\n\r\n# Score:\r\n# Runtime: 38 ms, faster than 97.80% of Python online submissions\r\n# Memory Usage: 14.3 MB","votes":220320.192},{"text":"\r\n    perfect_square_list = []\r\n    for x in range(a, b+1):\r\n        if x ** 0.5 == int(x ** 0.5):\r\n            perfect_square_list.append(x)\r\n    return perfect_square_list\r\n\r\n\r\nprint(perfect_squares(2, 25))","votes":226529.652},{"text":"\r\n    squares = list()\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 % 1 == 0:\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(1, 10))\r\n\r\n# [1, 4, 9]\r\n\r\n\r","votes":257033.884},{"text":"\r\n    # Write your code here.\r\n    perfect_square = []\r\n    for i in range(a,b+1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            perfect_square.append(i)\r\n    return perfect_square\r\n\r\n\r","votes":263067.4},{"text":"\r\n    perfect_squares = []\r\n    for i in range(a, b + 1):\r\n        root = int(i ** 0.5)\r\n        if root ** 2 == i:\r\n            perfect_squares.append(i)\r\n    return perfect_squares\r\n\r\n\r","votes":301906.64},{"text":"\r\n    # Initialize the list of perfect squares\r\n    squares = []\r\n    # Check the numbers from a to b\r\n    for number in range(a, b + 1):\r\n        # Check if the number is a square\r\n        if number ** .5 % 1 == 0:\r\n            # Append the number to the list\r\n            squares.append(number)\r\n    # Return the list of perfect squares\r\n    return squares\r\n\r\n\r\n# Test perfect_squares\r\nprint(perfect_squares(1, 10))\r\n# [1, 4, 9]\r\nprint(perfect_squares(1, 100))\r\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\nprint(perfect_squares(100, 1000))\r\n# [100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900]\r\nprint(perfect_squares(1000, 10000))\r\n# [1000, 1236, 1484, 1756, 2041, 2344, 2661, 2996, 3349, 3724, 4121, 4544, 5009, 5516, 6077, 6676, 7312, 8001, 8756, 9609, 10504, 115","votes":1531096.98},{"text":"\r\n    nums = []\r\n    for x in range(a, b+1):\r\n        for y in range(1, x+1):\r\n            if (x == y**2):\r\n                nums.append(x)\r\n    if nums:\r\n        return nums\r\n    else:\r\n        return None\r\n\r","votes":2772671.3679999998},{"text":"\r\n    squares = []\r\n    for i in range(a, b+1):\r\n        if i*i <= b:\r\n            squares.append(i*i)\r\n    return squares\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    perfectSquares = []\r\n    for i in range(a, b+1):\r\n        if i*i <= b:\r\n            perfectSquares.append(i)\r\n    return perfectSquares\r\n\r\n\r\n# Write your own tests here:\r\nprint(perfect_squares(1, 100))\r\n\r\nprint(perfect_squares(1, 1))\r\n\r\nprint(perfect_squares(1, 2))\r\n\r\nprint(perfect_squares(1, 3))\r\n\r\nprint(perfect_squares(1, 4))\r\n\r\nprint(perfect_squares(1, 8))\r\n\r\nprint(perfect_squares(1, 9))\r\n\r\nprint(perfect_squares(1, 10))\r\n\r\nprint(perfect_squares(1, 12))\r\n\r\nprint(perfect_squares(1, 14))\r\n\r\nprint(perfect_squares(1, 17))\r\n\r\nprint(perfect_squares(1, 18))\r\n\r\nprint(perfect_squares(1, 20))\r\n\r\nprint(perfect_squares(1, 21))\r\n\r\nprint(perfect_squares(1, 23))\r\n\r\nprint(perfect_squares(1, 24))\r\n\r\nprint(perfect_squares(1, 25))\r\n\r\nprint(perfect_squares(1, 27))\r\n\r\nprint(perfect_squares(1, 28))\r\n\r\nprint(perfect_squares(1, 30))\r\n\r\nprint(perfect_squares(1, 31))\r\n\r\nprint(perfect_squares(1, 33))\r\n\r\nprint(perfect_squares(1, 34))\r\n\r\nprin","votes":null},{"text":"\r\n    # Find the square-root of b, which is b ** 0.5\r\n    b_root = b ** 0.5\r\n    # Check if the square-root is an integer\r\n    if b_root.is_integer():\r\n        for i in range(a, b+1):\r\n            if i ** 2 == b:\r\n                return True\r\n        return False\r\n    else:\r\n        for i in range(a, b_root.is_integer()):\r\n            if i ** 2 == b:\r\n                return True\r\n        return False\r\n\r","votes":null},{"text":"\r\n    return [x**2 for x in range(a, b+1) if x**2 == x]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(10, 20))\r\n    print(perfect_squares(12, 24))\r\n\r\n\r\n\r\n# 4. Find the sum of all the multiples of 3 or 5 below 1000.\r","votes":null},{"text":"\r\n    \r\n    # your code here\r\n    perfect_list = []\r\n    for i in range(a, b+1):\r\n        if math.sqrt(i) == int(math.sqrt(i)):\r\n            perfect_list.append(i)\r\n    return perfect_list\r\n\r\na = int(input(\"Enter a: \"))\r\nb = int(input(\"Enter b: \"))\r\nprint(perfect_squares(a, b))\r\n\r\n\r\n# In[13]:\r\n\r\n\r","votes":null},{"text":"\r\n    # start = time.time()\r\n    perfect_squares = []\r\n    for i in range(a, b+1):\r\n        root = i ** 0.5\r\n        if root.is_integer():\r\n            perfect_squares.append(root)\r\n    # end = time.time()\r\n    # print(\"time elapsed: %s\" % (end - start))\r\n    return perfect_squares\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(perfect_squares(1, 100))\r\n\r\n    # answer = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n    # test = perfect_squares(1, 100)\r\n    # print(test)\r\n    # print(answer == test)\r\n\r\n    # start = time.time()\r\n    # perfect_squares(1, 1000000)\r\n    # end = time.time()\r\n    # print(\"time elapsed: %s\" % (end - start))\r\n\r\n    # start = time.time()\r\n    # perfect_squares(1, 10000000)\r\n    # end = time.time()\r\n    # print(\"time elapsed: %s\" % (end - start))\r\n\r\n    # start = time.time()\r\n    # perfect_squares(1, 100000000)\r\n    # end = time.time()\r\n    # print(\"time elapsed: %s\" % (end - start))\r\n\r\n    # start = time.time()\r\n    # perfect_squares(1, 1000000000)\r\n    # end = time.time()\r\n    # print(\"time elapsed: %s\" % (end - start))\r\n\r\n#","votes":null},{"text":"\r\n\r\n    # set the return variable\r\n    result = []\r\n\r\n    # set the list to look for perfect squares in\r\n    num_list = []\r\n\r\n    # create a list of integers between a and b\r\n    for i in range(a, b):\r\n        num_list.append(i)\r\n\r\n    # find perfect squares in the list\r\n    for num in num_list:\r\n        root = num ** 0.5\r\n        if int(root) == root:\r\n            result.append(num)\r\n\r\n    # return the result\r\n    return result\r\n\r\n\r\n# call the function\r\nprint(perfect_squares(1, 100))\r\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\nprint(perfect_squares(100, 1000))\r\n# [121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2397, 2492, 2589, 2686, 2784, 2881, 2976, ","votes":null},{"text":"\r\n    \r\n    perfect_square = []\r\n    for i in range(a, b+1):\r\n        if i*i <= b:\r\n            perfect_square.append(i)\r\n    return perfect_square\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here\r\n    perfect_squares = []\r\n    for i in range(a, b+1):\r\n        if i*i <= b:\r\n            perfect_squares.append(i*i)\r\n\r\n    return perfect_squares\r\n\r\n\r\nprint(perfect_squares(1, 10))\r\nprint(perfect_squares(2, 17))\r\nprint(perfect_squares(0, 1))\r\nprint(perfect_squares(4, 9))\r\nprint(perfect_squares(0, 0))\r\nprint(perfect_squares(1, 0))\r\nprint(perfect_squares(1, 1))\r\nprint(perfect_squares(1, 100))\r\nprint(perfect_squares(1, 1000))\r\nprint(perfect_squares(1, 10000))\r\nprint(perfect_squares(1, 100000))\r\nprint(perfect_squares(1, 1000000))\r\nprint(perfect_squares(1, 10000000))\r\nprint(perfect_squares(1, 100000000))\r\nprint(perfect_squares(1, 1000000000))\r\nprint(perfect_squares(1, 10000000000))\r\nprint(perfect_squares(1, 100000000000))\r\nprint(perfect_squares(1, 1000000000000))\r\nprint(perfect_squares(1, 10000000000000))\r\nprint(perfect_squares(1, 100000000000000))\r\nprint(perfect_squares","votes":null},{"text":"\r\n    if a > b:\r\n        return []\r\n    if a == b:\r\n        return [a]\r\n    if a == 1:\r\n        return [1]\r\n    if a == 2:\r\n        return [1, 4]\r\n    if a == 3:\r\n        return [1, 4, 9]\r\n    if a == 4:\r\n        return [1, 4, 9, 16]\r\n    if a == 5:\r\n        return [1, 4, 9, 16, 25]\r\n    if a == 6:\r\n        return [1, 4, 9, 16, 25, 36]\r\n    if a == 7:\r\n        return [1, 4, 9, 16, 25, 36, 49]\r\n    if a == 8:\r\n        return [1, 4, 9, 16, 25, 36, 49, 64]\r\n    if a == 9:\r\n        return [1, 4, 9, 16, 25, 36, 49, 64, 81]\r\n    if a == 10:\r\n        return [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n    if a == 11:\r\n        return [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121]\r\n    if a == 12:\r\n        return [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144]\r\n    if a == 13:\r","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for i in range(a, b):\r\n        if i**0.5","votes":null},{"text":"\r\n    perfect_squares_list = []\r\n    for i in range(a, b + 1):\r\n        if i * i <= b:\r\n            perfect_squares_list.append(i * i)\r\n    return perfect_squares_list\r\n\r\n\r\nprint(perfect_squares(2, 10))\r\nprint(perfect_squares(1, 2))\r\nprint(perfect_squares(2, 4))\r\nprint(perfect_squares(121, 130))\r\nprint(perfect_squares(1000, 1400))\r\nprint(perfect_squares(10, 100))\r\nprint(perfect_squares(100, 1000))\r\nprint(perfect_squares(1000, 10000))\r\nprint(perfect_squares(10000, 100000))\r\nprint(perfect_squares(100000, 1000000))\r\nprint(perfect_squares(1000000, 10000000))\r\nprint(perfect_squares(10000000, 100000000))\r\nprint(perfect_squares(100000000, 1000000000))\r\nprint(perfect_squares(1000000000, 10000000000))\r\nprint(perfect_squares(10000000000, 100000000000))\r\n\r\n\r\n# 2\r\n\r\n\r","votes":null},{"text":"\r\n    # Find the square root of the second number\r\n    root = int(round(b**0.5, 0))\r\n    # Loop through the numbers in between the two\r\n    for i in range(a, root+1):\r\n        # Check if the number is a square\r\n        if i**0.5 == int(i**0.5):\r\n            # Print out the number and its square\r\n            print(i, i**2)\r\n\r\n# Call the function\r\nperfect_squares(1, 32)\r\n# Expected Output:\r\n# 1 1\r\n# 2 4\r\n# 4 16\r\n# 9 81\r\n# 16 256\r\n# 25 625\r\n# 27 819\r\n# 32 1024\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code goes here.\r\n    print(\"The perfect squares between {} and {} are:\".format(a, b))\r\n    for i in range(a,b+1):\r\n        if is_perfect_square(i):\r\n            print(i)\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    perfect_squares = []\r\n    for x in range(a, b+1):\r\n        if x * x < b:\r\n            perfect_squares.append(x * x)\r\n    return perfect_squares\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    perfect_squares = []\r\n    for x in range(a, b+1):\r\n        if x == math.sqrt(x) ** 2:\r\n            perfect_squares.append(x)\r\n    return perfect_squares\r\n\r\n\r","votes":null},{"text":"\r\n    for x in range(a, b + 1):\r\n        if x * x == x:\r\n            print(x)\r\n\r\n\r\nperfect_squares(1, 50)\r\n\r\n\r","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for i in range(a, b+1):\r\n        if i*i <= b:\r\n            perfect_squares.append(i*i)\r\n    print(perfect_squares)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    squared_list = []\r\n    \r\n    # Square the numbers in the range and return them in a list.\r\n    for _ in range(a,b + 1):\r\n        squared_list.append(int(math.sqrt(_)))\r\n        \r\n    # Remove duplicates from the list.\r\n    squared_list = list(set(squared_list))\r\n     \r\n    # Sort the list.\r\n    squared_list.sort()\r\n    \r\n    # Return the sorted list of perfect squares.\r\n    return squared_list\r\n\r\n\r","votes":null},{"text":"\r\n    squares = []\r\n    for num in range(a, b + 1):\r\n        if num * num >= a and num * num < b:\r\n            squares.append(num * num)\r\n    return squares\r\n\r\n\r","votes":null},{"text":"\r\n    # Initialization\r\n    perfect_squares_list = []\r\n    # Main Logic\r\n    for i in range(a, b+1):\r\n        if i*i >= a and i*i <= b:\r\n            perfect_squares_list.append(i)\r\n    # Output\r\n    print(perfect_squares_list)\r\n\r\n# Calling the function\r\nperfect_squares(1, 10)\r\nperfect_squares(100, 1000)\r\nperfect_squares(1000, 10000)\r\nperfect_squares(10000, 100000)\r\n\r\n\"\"\"\r\nOutput:\r\n[1, 4, 9, 16, 25]\r\n[100, 101, 121, 144, 169, 196, 225]\r\n[1000, 1001, 1049, 1096, 1144, 1196, 1249, 1296, 1344, 1396, 1449, 1496, 1544, 1596, 1649, 1696, 1744, 1796, 1849, 1896, 1944, 1996]\r\n[10000, 10001, 10041, 10096, 10144, 10196, 10249, 10296, 10344, 10396, 10444, 10496, 10549, 10596, 10644, 10696, 10744,","votes":null},{"text":"\r\n    # Your code here\r\n    return [x**2 for x in range(a, b+1) if x**2 >= a and x**2 <= b]\r\n\r\n\r","votes":null},{"text":"\r\n    perfect_squares_list = []\r\n    for i in range(a, b):\r\n        if i * i <= b:\r\n            perfect_squares_list.append(i)\r\n    return perfect_squares_list\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if a > b:\r\n        return None\r\n\r\n    # Recursive case\r\n    mid = (a + b) \/\/ 2\r\n    if mid * mid == a:\r\n        return True\r\n    elif mid * mid == b:\r\n        return True\r\n    elif mid * mid > b:\r\n        return perfect_squares(a, mid - 1)\r\n    else:\r\n        return perfect_squares(mid + 1, b)\r\n\r\n\r\n# Test\r\nprint(perfect_squares(1, 2))\r\nprint(perfect_squares(2, 4))\r\nprint(perfect_squares(2, 5))\r\nprint(perfect_squares(2, 25))\r\nprint(perfect_squares(10, 16))\r\nprint(perfect_squares(100, 116))\r\nprint(perfect_squares(100, 121))\r\nprint(perfect_squares(100, 16","votes":null},{"text":"\r\n    if a ** 0.5 == a ** 0.5:\r\n        return 0\r\n    if a >= 0 and b >= 0:\r\n        return int(a ** 0.5)\r\n    else:\r\n        return 0\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here\r\n    squares = []\r\n    for i in range(a, b+1):\r\n        square_root = int(math.sqrt(i))\r\n        if square_root * square_root == i:\r\n            squares.append(square_root)\r\n    print(squares)\r\n\r\n\r","votes":null},{"text":"\r\n    # initialize a list and a variable\r\n    list = []\r\n    number = 0\r\n    # loop through the range of numbers\r\n    # if a number is a perfect square, append it to the list\r\n    for n in range(a, b):\r\n        if math.sqrt(n).is_integer():\r\n            list.append(n)\r\n            number += 1\r\n    # if a number is not a perfect square, append it to the list\r\n    for n in range(a, b):\r\n        if not math.sqrt(n).is_integer():\r\n            list.append(n)\r\n            number += 1\r\n    # return the list and the number of perfect squares\r\n    return list, number\r\n\r\na = int(input(\"Enter the lower bound: \"))\r\nb = int(input(\"Enter the upper bound: \"))\r\n# call the function, and unpack the returned values\r\nlist, number = perfect_squares(a, b)\r\n# print the list and the number of perfect squares\r\nprint(\"The list of perfect squares is:\", list)\r\nprint(\"The number of perfect squares is:\", number)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Find the perfect square closest to a\r\n    perfect_square = a - 1\r\n    while perfect_square * perfect_square < a:\r\n        perfect_square += 1\r\n\r\n    # Find the perfect square closest to b\r\n    perfect_square = b - 1\r\n    while perfect_square * perfect_square > b:\r\n        perfect_square -= 1\r\n\r\n    # Search for all perfect squares in between\r\n    perfect_squares = []\r\n    while perfect_square * perfect_square >= a:\r\n        perfect_squares.append(perfect_square)\r\n        perfect_square -= 1\r\n    while perfect_square * perfect_square <= b:\r\n        perfect_squares.append(perfect_square)\r\n        perfect_square += 1\r\n\r\n    return perfect_squares\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    perfect_square = 0\r\n    \r\n    for number in range(a, b + 1):\r\n        i = 0\r\n        while number != 0:\r\n            i += 1\r\n            number \/\/= 2\r\n            \r\n        if i % 2 == 0:\r\n            perfect_square += 1\r\n            \r\n    return perfect_square\r\n\r\n\r","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for i in range(a, b + 1):\r\n        if i * i == i:\r\n            perfect_squares.append(i)\r\n    return perfect_squares\r\n\r\n\r","votes":null},{"text":"\r\n    perfect_squares = []\r\n    count = 1\r\n    while a <= b:\r\n        if count ** 2 > b:\r\n            break\r\n        perfect_squares.append(count ** 2)\r\n        count += 1\r\n    return perfect_squares\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(perfect_squares(1, 100))\r\n    print(perfect_squares(1, 10))\r\n    print(perfect_squares(1, 1))\r\n    print(perfect_squares(1, 2))\r\n    print(perfect_squares(1, 3))\r\n    print(perfect_squares(1, 4))\r\n    print(perfect_squares(1, ","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for i in range(a, b):\r\n        if int(math.sqrt(i)) ** 2 == i:\r\n            perfect_squares.append(i)\r\n    return perfect_squares\r\n\r\n\r","votes":null},{"text":"\r\n    # Your code here.\r\n    squares = []\r\n    for i in range(a, b + 1):\r\n        root = i ** 0.5\r\n        if root.is_integer():\r\n            squares.append(root)\r\n\r\n    return squares\r\n\r\n\r","votes":null},{"text":"\r\n    \"\"\"Return a list of perfect squares between a and b.\"\"\"\r\n    if a > b:\r\n        return []\r\n    squares = []\r\n    for number in range(a, b + 1):\r\n        if number**0.5 == int(number**0.5):\r\n            squares.append(number)\r\n    return squares\r\n\r\n\r\na = int(input(\"Enter a: \"))\r\nb = int(input(\"Enter b: \"))\r\nprint(perfect_squares(a, b))\r\n\r\n# answer\r\n# a = int(input(\"Enter a: \"))\r\n# b = int(input(\"Enter b: \"))\r\n# squares = []\r\n# for i in range(a, b + 1):\r\n#     if i**0.5 == int(i**0.5):\r\n#         squares.append(i)\r\n# print(squares)\r\n\r\n# Exercise 2\r","votes":null},{"text":"\r\n    # Write your code here\r\n    perfect_square = []\r\n    for i in range(a, b + 1):\r\n        if (i * i) == i:\r\n            perfect_square.append(i)\r\n    return perfect_square\r\n\r","votes":null},{"text":"\r\n    if a >= b:\r\n        return []\r\n    elif a == b:\r\n        return [a]\r\n    else:\r\n        return [a] + perfect_squares(a + 1, b)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Your code here\r\n    if a < 0 or b < 0:\r\n        raise ValueError()\r\n    perfect_squares = []\r\n    for i in range(a, b + 1):\r\n        if math.sqrt(i) % 1 == 0:\r\n            perfect_squares.append(i)\r\n\r\n    return perfect_squares\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(a, b + 1):\r\n        if i * i <= b:\r\n            print(i * i)\r\n        else:\r\n            break\r\n\r\n\r","votes":null},{"text":"\r\n    print(\"Perfect squares between %d and %d:\" % (a, b))\r\n    for i in range(a, b + 1):\r\n        if i * i == i:\r\n            print(i)\r\n\r\n\r","votes":null},{"text":"\r\n    print(\"All Perfect Squares between {} and {} are:\".format(a, b))\r\n    i = 1\r\n    while i**2 <= b:\r\n        if i**2 >= a:\r\n            print(i**2)\r\n        i += 1\r\n\r\n\r\nif __name__ == '__main__':\r\n    perfect_squares(36, 57)\r\n    perfect_squares(36, 65)\r\n    perfect_squares(36, 73)\r\n    perfect_squares(36, 81)\r\n    perfect_squares(36, 89)\r\n    perfect_squares(36, 97)\r\n    perfect_squares(36, 105)\r\n    perfect_squares(36, 113)\r\n    perfect_squares(36, 121)\r\n    perfect_squares(36, 129)\r\n    perfect_squares(36, 137)\r\n    perfect_squares(36, 145)\r\n    perfect_squares(36, 153)\r\n    perfect_squares(36, 161)\r\n    perfect_squares(36, 169)\r\n    perfect_squares(36, 177)\r\n    perfect_squares(36, 185)\r\n    perfect_squares(36, 193)\r\n    perfect_squares(36, 199)\r\n    perfect_squares(36, 207)\r\n    perfect_squares(36, 215)\r\n    perfect_squares(36, 223)\r\n    perfect_squares(36, 231)\r\n    perfect_squares(36, 239)\r\n    perfect_squares(36, 247)\r\n    perfect_squares(36, 255)\r\n    perfect_squares(36, 263)\r\n  ","votes":null},{"text":"\r\n    # initialize the list of perfect squares\r\n    perfect_squares = []\r\n    # use the range function to get the numbers we want\r\n    for i in range(a, b+1):\r\n        # check whether the number is a perfect square\r\n        if i*i == i:\r\n            perfect_squares.append(i)\r\n    # return the list of perfect squares\r\n    return perfect_squares\r\n\r\n\r","votes":null},{"text":"\r\n    # return perfect_squares_v2(a, b)\r\n    # return perfect_squares_v3(a, b)\r\n    # return perfect_squares_v4(a, b)\r\n    return perfect_squares_v5(a, b)\r\n\r\n\r","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for x in range(a, b):\r\n        if(x**0.5).is_integer():\r\n            perfect_squares.append(x)\r\n    return perfect_squares\r\n\r\nif __name__==\"__main__\":\r\n    a = int(input())\r\n    b = int(input())\r\n    print(perfect_squares(a, b))\r\n\r\n\"\"\"\r\n>>> from perfect_squares import perfect_squares\r\n>>> perfect_squares(1, 10)\r\n[1, 4, 9]\r\n>>> perfect_squares(121, 133)\r\n[121, 169, 184, 197]\r\n>>> perfect_squares(160, 170)\r\n[169]\r\n>>> perfect_squares(1300, 1333)\r\n[1300, 1321, 1329, 1333]\r\n>>> perfect_squares(10, 20)\r\n[]\r\n\"\"\"\r\n\r\n# Solution\r","votes":null},{"text":"\r\n    # Use the fact that sqrt(x) is an integer if and only if x is a perfect square.\r\n    # Thus, if x is a perfect square, then x^2 = k * x, where k is an integer.\r\n    # Thus, k = x\/k.\r\n    # Thus, x\/k = x\/sqrt(x) = 1\/sqrt(x).\r\n    # Thus, x = k^2, where k is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thus, x is a perfect square.\r\n    # Thus, sqrt(x) is an integer.\r\n    # Thu","votes":null},{"text":"\r\n    # start with the square root of the smallest number\r\n    low = int(math.sqrt(a))\r\n    # set the high number to the square root of the largest number\r\n    high = int(math.sqrt(b))\r\n    # create a list of perfect squares\r\n    perfect_squares = []\r\n    # create a loop that goes from the low to high number\r\n    for num in range(low, high + 1):\r\n        # create a perfect square\r\n        square = num ** 2\r\n        # add the perfect square to the list\r\n        perfect_squares.append(square)\r\n    # return the list of perfect squares\r\n    return perfect_squares\r\n\r\n\r","votes":null},{"text":"\r\n    number_list = []\r\n    for a in range(a, b + 1):\r\n        if a ** 0.5 == int(a ** 0.5):\r\n            number_list.append(a ** 0.5)\r\n    return number_list\r\n\r\n\r","votes":null},{"text":"\r\n    # for i in range(a,b):\r\n    #     if i**0.5==int(i**0.5):\r\n    #         print(i)\r\n\r\n    print(\"Perfect squares between\", a, \"and\", b, \"are:\")\r\n    for i in range(a, b + 1):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            print(i)\r\n\r\n\r\nperfect_squares(1, 10)\r\nperfect_squares(10, 100)\r\nperfect_squares(100, 1000)\r\nperfect_squares(1000, 10000)\r\nperfect_squares(10000, 100000)\r\nperfect_squares(100000, 200000)\r\n\r\n\r\n# 1. Write a program to find all perfect squares between 1 and 100.\r\n# 2. Write a program to find all perfect squares between 1 and 1000.\r\n# ","votes":null},{"text":"\r\n    \r\n    # 1. Write your code here\r\n    \r\n    # 2. Return perfect squares\r\n    return perfect_squares\r\n\r\n\r\nif __name__ == '__main__':\r\n    # 3. Use the code here to test your function\r\n    a = int(input())\r\n    b = int(input())\r\n    \r\n    print(perfect_squares(a, b))\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    ","votes":null},{"text":"\r\n    squarer = []\r\n    for i in range(a, b):\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            squarer.append(i)\r\n    return squarer\r\n\r","votes":null},{"text":"\r\n    if a < 0 or b < 0:\r\n        return \"Positive integers only!\"\r\n    \r\n    perfect_squares = []\r\n    for x in range(a, b+1):\r\n        if x**0.5.is_integer():\r\n            perfect_squares.append(x)\r\n    \r\n    return perfect_squares\r\n#print(perfect_squares(1,10))\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # base case\r\n    if a == b:\r\n        return [a]\r\n    # recursive case\r\n    else:\r\n        # get new numbers\r\n        c = (a + b) \/\/ 2\r\n        d = (a + b) \/\/ 4\r\n        # get perfect squares\r\n        perfect_squares_c = perfect_squares(a, c)\r\n        perfect_squares_d = perfect_squares(d, b)\r\n        # combine\r\n        return perfect_squares_c + perfect_squares_d\r\n\r\n\r","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for num in range(a, b):\r\n        if num ** 0.5 == int(num ** 0.5):\r\n            perfect_squares.append(num)\r\n    return perfect_squares\r\n\r\n\r\nprint(perfect_squares(1, 10))\r\nprint(perfect_squares(1, 200))\r\nprint(perfect_squares(1, 1000))\r\nprint(perfect_squares(1, 2000))\r\nprint(perfect_squares(1, 10000))\r\nprint(perfect_squares(1, 20000))\r\nprint(perfect_squares(1, 100000))\r\nprint(perfect_squares(1, 200000))\r\nprint(perfect_squares(1, 1000000))\r\nprint(perfect_squares(1, 2000000))\r\nprint(perfect_squares(1, 10000000))\r\nprint(perfect_squares(1, 20000000))\r\nprint(perfect_squares(1, 100000000))\r\nprint(perfect_squares(1, 200000000))\r\nprint(perfect_squares(1, 1000000000))\r\nprint(perfect_squares(1, 2000000000))\r\nprint(perfect_squares(1, 10000000000))\r\nprint(perfect_squares(1, 20000000000))\r\nprint(perfect_squares(1, 100000000000))\r\nprint(perfect_squares(1, 200","votes":null},{"text":"\r\n    \r\n    # Your code goes here\r\n    \r\n    squares = []\r\n    \r\n    for number in range(a, b + 1):\r\n        for i in range(a, int(number ** 0.5) + 1):\r\n            if number == i ** 2:\r\n                squares.append(number)\r\n                break\r\n\r\n    return squares\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    a, b = map(int, input().split())\r\n    print(perfect_squares(a, b))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n\r\n    if a < 0 or b < 0:\r\n        raise ValueError(\"The given numbers must be non-negative.\")\r\n\r\n    perfect_squares = []\r\n    for x in range(a, b + 1):\r\n        if x * x <= b:\r\n            perfect_squares.append(x","votes":null},{"text":"\r\n    i = 0\r\n    j = 1\r\n    while i <= a and j <= b:\r\n        if i ** 0.5 == int(i ** 0.5):\r\n            print(i)\r\n        i += 1\r\n\r\n        if j ** 0.5 == int(j ** 0.5):\r\n            print(j)\r\n        j += 1\r\n\r\n\r\nperfect_squares(1, 100)\r\n","votes":null},{"text":"\r\n    perfect_square = []\r\n    for n in range(a, b + 1):\r\n        if n * n == n:\r\n            perfect_square.append(n)\r\n    return perfect_square\r\n\r\n\r\nprint(perfect_squares(1, 10))\r\n\r\n\r","votes":null},{"text":"\r\n    # Start with the first number\r\n    x = a\r\n    # Keep looping until the square of the number is greater than the second number\r\n    while x*x <= b:\r\n        yield x\r\n        x += 1\r\n\r\nfor x in perfect_squares(100, 10000):\r\n    print(x)\r\n\r\nprint(\"\")\r\n\r\nfor x in perfect_squares(1, 100):\r\n    print(x)\r\n\r\nprint(\"\")\r\n\r\nfor x in perfect_squares(1, 10000):\r\n    print(x)\r\n\r\nprint(\"\")\r\n\r\nfor x in perfect_squares(1, 25):\r\n    print(x)\r\n\r\nprint(\"\")\r\n\r\nfor x in perfect_squares(1, 1000000):\r\n    print(x)\r\n\r\nprint(\"\")\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # a <= b\r\n    # a^2 <= b^2\r\n    # a <= sqrt(b)\r\n    # a^2 <= b\r\n    # a <= b\/a\r\n    # a <= 1\r\n    # a = 1\r\n    # b = 1\r\n    # a = 2\r\n    # b = 2\r\n    # a = 3\r\n    # b = 3\r\n    # a = 4\r\n    # b = 4\r\n    # a = 5\r\n    # b = 5\r\n    # a = 6\r\n    # b = 6\r\n    # a = 7\r\n    # b = 7\r\n    # a = 8\r\n    # b = 8\r\n    # a = 9\r\n    # b = 9\r\n    # a = 10\r\n    # b = 10\r\n    # a = 11\r\n    # b = 11\r\n    # a = 12\r\n    # b = 12\r\n    # a = 13\r\n    # b = 13\r\n    # a = 14\r\n    # b = 14\r\n    # a = 15\r\n    # b = 15\r\n    # a = 16\r\n    # b = 16\r\n    # a = 17\r\n    # b = 17\r\n    # a = 18\r\n    # b = 18\r\n    # a = 19\r\n    # b = 19\r\n    # a = 20\r\n    # b = 20\r\n\r\n    while a <= b:\r\n        if a * a == b:\r\n            print(a)\r\n        a += 1\r\n\r\n    # for i in range(a, b + 1):\r\n    #     if i * i == b:\r\n    #         print(i)\r\n\r\n\r","votes":null},{"text":"\r\n    ls = []\r\n    for i in range(a, b+1):\r\n        if i**0.5 == int(i**0.5):\r\n            ls.append(i)\r\n    return ls\r\n\r\n\r\na = int(input('Enter a'))\r\nb = int(input('Enter b'))\r\n\r\nprint(perfect_squares(a, b))\r\n\r\n#","votes":null},{"text":"\r\n    # Your code here\r\n    pass\r\n\r","votes":null},{"text":"\r\n    perfsquares = []\r\n    for i in range(a, b + 1):\r\n        if(i*i <= b):\r\n            perfsquares.append(i*i)\r\n    return perfsquares\r\n\r\nprint(perfect_squares(1, 16))\r\n\r\n\r","votes":null},{"text":"\r\n    print(\"Perfect squares:\")\r\n    for i in range(a, b + 1):\r\n        if i * i >= a and i * i <= b:\r\n            print(i, end=\" \")\r\n\r\n\r","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for number in range(a, b + 1):\r\n        root = int(math.sqrt(number))\r\n        if root * root == number:\r\n            perfect_squares.append(root)\r\n    return perfect_squares\r\n\r\n\r","votes":null},{"text":"\r\n    # Start with the smallest perfect square\r\n    left = 1\r\n\r\n    # Keep squaring until the square is greater than our upper bound\r\n    while left ** 2 <= b:\r\n        # If the square is between our bounds, increment the counter\r\n        if left ** 2 >= a and left ** 2 <= b:\r\n            print(\"Found a perfect square:\", left ** 2)\r\n\r\n        # Increment the left side of the search\r\n        left += 1\r\n\r\n    # Return the number of perfect squares found\r\n    return left - 1\r\n\r\n\r","votes":null},{"text":"\r\n    # Write your code here.\r\n    n = int(b)\r\n    squares = []\r\n    while n >= a:\r\n        if n**0.5 % 1 == 0:\r\n            squares.append(n)\r\n        n -= 1\r\n    return squares\r\n\r\n\r\n# Example 1\r\nprint(\"Example 1:\")\r\nprint(\"Input: a = 1, b = 10\")\r\nprint(\"Output:\", perfect_squares(1, 10))\r\nprint(\"Expected: [1, 4, 9]\")\r\n\r\n# Example 2\r\nprint(\"Example 2:\")\r\nprint(\"Input: a = 0, b = 1\")\r\nprint(\"Output:\", perfect_squares(0, 1))\r\nprint(\"Expected: []\")\r\n\r\n# Example 3\r\nprint(\"Example 3:\")\r\nprint(\"Input: a = 1, b = 1\")\r\nprint(\"Output:\", perfect","votes":null},{"text":"\r\n    perfect_squares = []\r\n    for n in range(a, b+1):\r\n        root = int(n**(1\/2))\r\n        if root**2 == n:\r\n            perfect_squares.append(root)\r\n    return perfect_squares\r\n\r\n\r\n# Tests\r\nprint(perfect_squares(1,4))\r\nprint(perfect_squares(1,5))\r\nprint(perfect_squares(1,10))\r\nprint(perfect_squares(1,15))\r\nprint(perfect_squares(1,20))\r\nprint(perfect_squares(1,25))\r\nprint(perfect_squares(1,50))\r\nprint(perfect_squares(1,100))\r\nprint(perfect_squares(1,150))\r\nprint(perfect_squares(1,200))\r\nprint(perfect_squares(1,250))\r\nprint(perfect_squares(1,500))\r\nprint(perfect_squares(1,1000))\r\nprint(perfect_squares(1,1500))\r\nprint(perfect_squares(1,2000))\r\nprint(perfect_squares(1,2500))\r\nprint(perfect_squares(1,5000))\r\nprint(perfect_squares(1,10000))\r\nprint(perfect_squares(1,15000))\r\nprint(perfect_squares(1,20000))\r\nprint(perfect_squares(1,25000))\r\nprint(perfect_squares(1,50000))\r\nprint(perfect_squares(1,100000))\r\nprint(perfect_squares(1,150000))\r\nprint(perfect_squares(1,","votes":null},{"text":"\r\n    \r\n    a = int(a)\r\n    b = int(b)\r\n    \r\n    if a < 0 or b < 0:\r\n        return None\r\n    \r\n    perfect_squares = []\r\n    \r\n    for x in range(a, b + 1):\r\n        if is_perfect_square(x):\r\n            perfect_squares.append(x)\r\n            \r\n    return perfect_squares\r\n    \r\n\r","votes":null},{"text":"\r\n    for i in range(a,b+1):\r\n        if i**0.5 % 1 == 0:\r\n            print(i)\r\n\r\nperfect_squares(1,10)\r\nperfect_squares(1,100)\r\nperfect_squares(1,1000)\r\nperfect_squares(-10,10)\r\nperfect_squares(-10,100)\r\nperfect_squares(-10,1000)\r\nperfect_squares(-100,10)\r\nperfect_squares(-100,100)\r\nperfect_squares(-100,1000)\r\nperfect_squares(1,10000)\r\nperfect_squares(-1,10000)\r\nperfect_squares(-1000,10000)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    # Use a dictionary to store perfect squares\r\n    squares = {}\r\n    # For each number in the range, calculate perfect square\r\n    for num in range(a, b + 1):\r\n        # Use sqrt to calculate perfect square\r\n        sqrt = int(num ** 0.5)\r\n        # If square root is an integer, add square to dictionary\r\n        if sqrt ** 2 == num:\r\n            squares[sqrt] = num\r\n    # Return dictionary\r\n    return squares\r\n\r\n\r\nprint(perfect_squares(1, 10))\r\nprint(perfect_squares(1, 4))\r\nprint(perfect_squares(1, 5))\r\nprint(perfect_squares(4, 20))\r\nprint(perfect_squares(4, 10))\r\nprint(perfect_squares(2, 20))\r\nprint(perfect_squares(1, 100))\r\nprint(perfect_squares(1, 500))\r\nprint(perfect_","votes":null},{"text":"\r\n\r\n    # Initialize the list of squares\r\n    square_list = []\r\n\r\n    # Get the perfect squares between a and b\r\n    for i in range(a, b + 1):\r\n        # Check if i is a perfect square\r\n        if math.sqrt(i) % 1 == 0:\r\n            square_list.append(i)\r\n\r\n    # Return the list of perfect squares\r\n    return square_list\r\n\r\n\r\n# Run the function to get the perfect squares\r\nperfect_squares(4, 25)\r\n\r\n\r","votes":null},{"text":"\r\n    squares = []\r\n    for i in range(a, b+1):\r\n        if math.sqrt(i) % 1 == 0:\r\n            squares.append(i)\r\n    return squares\r\n\r\n\r","votes":null}],"time":{"count":27.0,"avg":321567.3973333333,"std":556957.0418092791,"cov":1.7320071824}}
{"id":591,"question":"def swap_List(newList):\r\n    \"\"\"Write a python function to interchange the first and last elements in a list.\"\"\"","answers":[{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":79213.628},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\n# Question 2\r","votes":82632.872},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r\n\r","votes":84231.972},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\n\r","votes":87546.788},{"text":"\r\n\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":93415.236},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r","votes":97263.388},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\n# print(swap_List([1, 2, 3, 4, 5]))\r\n\r\n\r","votes":97465.46},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\nprint(swap_List([1, 2, 3, 4, 5]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\r\nprint(swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\r\n\r\n\r","votes":97998.56},{"text":"\r\n    # newList[0],newList[-1] = newList[-1],newList[0]\r\n    # return newList\r\n    newList[-1], newList[0] = newList[0], newList[-1]\r\n    return newList\r\n\r\n\r","votes":102524.628},{"text":"\r\n    newList[0],newList[len(newList)-1] = newList[len(newList)-1],newList[0]\r\n    return newList\r\n\r\nnewList = [20, 30, 40, 50]\r\nprint(\"Original List : \", newList)\r\n\r\nnewList = swap_List(newList)\r\nprint(\"Modified List : \", newList)\r\n\r\n# 14\r","votes":104799.816},{"text":"\r\n    if len(newList) <= 0:\r\n        return \"List is empty\"\r\n    else:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n        return newList\r\n\r\n\r","votes":106442.904},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nprint(swap_List([1,2,3,4,5,6]))\r\n\r\n#2\r","votes":107686.776},{"text":"\r\n    newList[0],newList[-1]=newList[-1],newList[0]\r\n    return newList\r\n\r\n\r\nprint(swap_List([1,2,3,4,5,6,7]))\r\n\r\n\r","votes":109981.94},{"text":"\r\n\r\n    a = newList[0]\r\n    b = newList[-1]\r\n    newList[0] = b\r\n    newList[-1] = a\r\n    return newList\r\n\r\n\r","votes":111528.268},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\nprint(swap_List([1, 2, 3, 4, 5]))\r\n\r\n\r","votes":113335.98},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n# # Driver Code\r\n# newList = [1, 2, 3, 4, 5]\r\n# print('Before Swapping:', newList)\r\n# newList = swap_List(newList)\r\n# print('After Swapping:', newList)\r\n\r\n\r","votes":118456.42},{"text":"\r\n    # Write your code here\r\n    newList[0],newList[-1]=newList[-1],newList[0]\r\n    return newList\r\n\r","votes":120971.548},{"text":"\r\n    # your code goes here\r\n    a=newList[0]\r\n    newList[0]=newList[-1]\r\n    newList[-1]=a\r\n    return newList\r\n\r","votes":121031.424},{"text":"\r\n    newList[0],newList[-1]=newList[-1],newList[0]\r\n    return newList\r\n\r\n\r","votes":124677.084},{"text":"\r\n\r\n    # Your code here\r\n    newList[0],newList[-1] = newList[-1],newList[0]\r\n    return newList\r\n\r\n\r\nnewList = [1, 2, 3, 4, 5]\r\nprint(swap_List(newList))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":126487.468},{"text":"\r\n    if len(newList)<2:\r\n        return newList\r\n    else:\r\n        temp = newList[0]\r\n        newList[0] = newList[-1]\r\n        newList[-1] = temp\r\n        return newList\r\n\r\n\r\n\r","votes":127228.196},{"text":"\r\n    #list_len = len(newList)\r\n    #print(list_len)\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\n\r\n#swap_List([0,1,2,3,4])\r\n\r\n\r","votes":128245.376},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\nassert swap_List([1, 2, 3, 4]) == [4, 2, 3, 1]\r\nassert swap_List([1, 2, 3]) == [3, 2, 1]\r\nassert swap_List([1, 2]) == [2, 1]\r\nassert swap_List([1]) == [1]\r\n\r\n\r","votes":129561.632},{"text":"\r\n    # Code here\r\n    x = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = x\r\n    return newList\r\n\r\n\r","votes":129839.7},{"text":"\r\n    newList[0],newList[-1] = newList[-1],newList[0]\r\n    return newList\r\n\r\nnewList = [1,2,3,4,5]\r\nprint(\"Original List:\",newList)\r\nprint(\"New List:\",swap_List(newList))\r\n\r","votes":131412.516},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\nprint(swap_List([1, 2, 3, 4, 5]))\r\n\r\n# Output: [5, 2, 3, 4, 1]\r\n\r\n\r","votes":136713.772},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nnewList = [1,2,3,4,5]\r\nprint(swap_List(newList))\r\n\r\n\r\n\r","votes":137410.136},{"text":"\r\n    newList[0],newList[-1] = newList[-1],newList[0]\r\n    return newList\r\n\r\n\r\n\r\nnew_List = [1,2,3,4,5]\r\nprint(swap_List(new_List))\r\n\r\n\r\n\r\n\r","votes":138533.968},{"text":"\r\n    if len(newList) == 0:\r\n        return False\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[0] = last\r\n    newList[-1] = first\r\n    return newList\r\n\r\n\r\nprint(swap_List([1, 2, 3]), [1, 2, 3])\r\nprint(swap_List([1, 2]), [2, 1])\r\nprint(swap_List([1]), [1])\r\nprint(swap_List([]), False)\r\n\r\n\r","votes":139742.668},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nprint(swap_List([1, 2, 3, 4]))\r\n\r\n\r","votes":141737.384},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\n\"\"\"Write a python function to interchange the first and last elements in a list.\"\"\"\r\n\r\nprint(swap_List([1, 2, 3, 4]))\r\nprint(swap_List([1, 2, 3]))\r\nprint(swap_List([\"a\", \"b\", \"c\"]))\r\nprint(swap_List([\"a\", \"b\", \"c\", \"d\"]))\r\nprint(swap_List([\"a\", \"b\", \"c\", \"d\", \"e\"]))\r\n","votes":142696.104},{"text":"\r\n    newList[len(newList)-1],newList[0]=newList[0],newList[len(newList)-1]\r\n    return newList\r\n\r\n\r\n# Swap the first and last elements of a list\r","votes":145246.524},{"text":"\r\n    \r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r","votes":145581.104},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    return newList\r\n\r","votes":146781.84},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nlist1 = [1, 2, 3, 4, 5]\r\nprint(swap_List(list1))\r\n\r\n\r","votes":147192.956},{"text":"\r\n    newList[0],newList[-1] = newList[-1],newList[0]\r\n    return newList\r\n\r\nnewList = [1,2,3,4,5]\r\nprint(\"Before: \",newList)\r\n\r\nnewList = swap_List(newList)\r\nprint(\"After: \",newList)\r\n\r\n\r","votes":153468.988},{"text":"\r\n    l = newList.copy()\r\n    temp = l[0]\r\n    l[0] = l[-1]\r\n    l[-1] = temp\r\n    return l\r\n\r\n\r","votes":162057.284},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n\r\n    return newList\r\n\r\n\r\nprint(swap_List([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\r\n\r\n\r\n\r","votes":163747.312},{"text":"\r\n    # if newList is a list, return the list with the first and last element swapped\r\n    # if newList is not a list, return None\r\n    if isinstance(newList, list):\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n        return newList\r\n    else:\r\n        return None\r\n\r\n\r","votes":169723.456},{"text":"\r\n\r\n    first = newList[0]\r\n    last = newList[-1]\r\n\r\n    newList[-1] = first\r\n    newList[0] = last\r\n\r\n    return newList\r\n\r\n\r\nif __name__ == '__main__':\r\n    newList = [1, 2, 3, 4]\r\n    print(newList, swap_List(newList))\r\n\r\n    newList = ['a', 'b', 'c', 'd']\r\n    print(newList, swap_List(newList))\r\n\r\n    newList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(newList, swap_List(newList))\r\n\r\n    newList = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\r\n    print(newList, swap_List(newList))\r\n\r\n    newList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\r\n    print(newList, swap_List(newList))\r\n\r\n    newList = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p']\r\n    print(newList, swap_List(newList))\r\n\r\n    newList = [1, 2, 3]\r\n    print(newList, swap_List(newList))\r\n\r\n    newList = [1]\r\n    print(newList, swap_List(newList))\r\n\r\n    newList = []\r\n    print(newList, swap_List(newList))\r\n\r\n    newList ","votes":176599.568},{"text":"\r\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\r\n    return newList\r\n\r","votes":185332.936},{"text":"\r\n    l = []\r\n    l = newList\r\n    l[0], l[-1] = l[-1], l[0]\r\n    return l\r\n\r","votes":187149.856},{"text":"\r\n    newList[0],newList[-1] = newList[-1],newList[0]\r\n    return newList\r\nprint(swap_List([1,2,3,4,5]))\r\n\r\n\r","votes":189924.492},{"text":"\r\n    \r\n    newList[-1], newList[0] = newList[0], newList[-1]\r\n    return newList\r\n\r\n    \r\nnewList = [2, 3, 4, 5, 6, 7, 8]\r\nprint(swap_List(newList))\r\n\r\n\r","votes":190503.76},{"text":"\r\n    first = newList[0]\r\n    last = newList[-1]\r\n    newList[-1] = first\r\n    newList[0] = last\r\n    return newList\r\n\r\nprint(swap_List([1,2,3,4,5]))\r\n\r\n\r","votes":192603.632},{"text":"\r\n\r\n    first_element = newList[0]\r\n    last_element = newList[-1]\r\n    newList[0] = last_element\r\n    newList[-1] = first_element\r\n    return newList\r\n\r\n\r\nprint(swap_List([1, 2, 3]))\r\n\r\n\r","votes":194460.412},{"text":"\r\n    newList[0],newList[-1] = newList[-1],newList[0]\r\n    return newList\r\n\r\n# Example:\r\nprint(swap_List([1,2,3,4]))\r\n\r\n\r","votes":195605.996},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nprint(swap_List([1,2,3,4]))\r\n\r\n\r\n\r\n# Q5: Write a Python function to remove all the elements from a list that occur only once in the list.\r\n\r","votes":211702.604},{"text":"\r\n\r\n    newList.insert(0, newList[-1])\r\n    newList.pop(-1)\r\n    return newList\r\n\r\n\r\nprint(swap_List([1, 2, 3, 4, 5]))\r\n\r\n\r","votes":null},{"text":"\r\n    newList[0], newList[-1]=newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Test cases\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List(['A', 'B', 'C', 'D', 'E', 'F']))\r\n    print(swap_List(['A', 'B', 'C', 'D', 'E', 'F']))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2, 3, 4, 5, 6]))\r\n    print(swap_List([1, 2,","votes":null},{"text":"\r\n    newList = newList[len(newList) - 1], newList[0], newList[1:len(newList) - 1]\r\n    return newList\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Swap First and Last Elements in a List: \")\r\n    newList = [1, 2, 3, 4, 5]\r\n    print(\"Original List: \", newList)\r\n    newList = swap_List(newList)\r\n    print(\"Swapped List: \", newList)\r\n\r\n    print(\"Swap First and Last Elements in a List: \")\r\n    newList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    print(\"Original List: \", newList)\r\n    newList = swap_List(newList)\r\n    print(\"Swapped List: \", newList)\r\n\r\n    print(\"Swap First and Last Elements in a List: \")\r\n    newList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n    print(\"Original List: \", newList)\r\n    newList = swap_List(newList)\r\n    print(\"Swapped List: \", newList)\r\n\r\n    print(\"Swap First and Last Elements in a List: \")\r\n    newList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\r\n              29, 30, 31, 32, 33, 34, 35, 3","votes":null},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\n\r\nnewList = [1, ","votes":null},{"text":"\r\n    newList[0],newList[-1] = newList[-1],newList[0]\r\n    print(newList)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    \r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    \r\n    print(newList)\r\n    \r\nswap_List([1, 2, 3, 4, 5])\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    print(str(newList[0]) + ' ' + str(newList[-1]))\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    print(str(newList[0]) + ' ' + str(newList[-1]))\r\n\r\n\r","votes":null},{"text":"\r\n    newList.append(newList[0])\r\n    newList.pop(0)\r\n    return newList\r\n\r\n\r\nnewList = [1, 2, 3, 4, 5]\r\nprint(swap_List(newList))\r\n\r\n\r","votes":null},{"text":"\r\n    # Your Code Here\r\n    # newList = [1,2,3,4]\r\n    # print(newList)\r\n    # newList[0], newList[-1] = newList[-1], newList[0]\r\n    # print(newList)\r\n    newList.insert(0, newList.pop())\r\n    # print(newList)\r\n    # newList[0], newList[-1] = newList[-1], newList[0]\r\n    # print(newList)\r\n    return newList\r\n\r\n\r","votes":null},{"text":"\r\n    newList.reverse()\r\n    return newList\r\n\r","votes":null},{"text":"\r\n    if len(newList) < 2:\r\n        print(\"The list is too short to swap items.\")\r\n    else:\r\n        newList[0], newList[-1] = newList[-1], newList[0]\r\n        print(newList)\r\n\r\n\r\n\r\nnewList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nswap_List(newList)\r\n\r\nprint()\r\n\r\nnewList = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\nswap_List(newList)\r\n\r\nprint()\r\n\r\nnewList = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\r\nswap_List(newList)\r\n\r\nprint()\r\n\r\nnewList = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]\r\nswap_List(newList)\r\n\r\nprint()\r\n\r\nnewList = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]\r\nswap_List(newList)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":null},{"text":"\r\n    a = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = a\r\n    print(newList)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    newList.append(newList.pop(0))\r\n    return newList\r\n\r\n\r","votes":null},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    print(newList)\r\n\r\n\r","votes":null},{"text":"\r\n    for i in range(len(newList)):\r\n        if i == 0:\r\n            newList[i], newList[len(newList)-1] = newList[len(newList)-1], newList[i]\r\n            print(newList)\r\n\r\n\r","votes":null},{"text":"\r\n    temp = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = temp\r\n    print(newList)\r\nswap_List([1,2,3,4,5])\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    return newList\r\n\r\nprint(swap_List([1, 2, 3, 4]))\r\nprint(swap_List([\"a\", \"b\", \"c\", \"d\", \"e\"]))\r\nprint(swap_List([True, False, True, False, True]))\r\nprint(swap_List([\"Ram\", \"Shyam\", \"Hari\", \"Sita\"]))\r\nprint(swap_List([1","votes":null},{"text":"\r\n    last = newList.pop(-1)\r\n    first = newList.pop(0)\r\n    newList.append(last)\r\n    newList.insert(0, first)\r\n    return newList\r\n\r\n\r","votes":null},{"text":"\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n\r","votes":null},{"text":"\r\n    newList.insert(0, newList.pop(-1))\r\n    return newList\r\n\r\n\r","votes":null},{"text":"\r\n    newList.insert(0, newList.pop())\r\n    return newList\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    temp=newList[0]\r\n    newList[0]=newList[-1]\r\n    newList[-1]=temp\r\n    return(newList)\r\n    \r\nprint(\"Input : \")\r\nnewList = eval(input())\r\nprint(\"Output : \")\r\nprint(swap_List(newList))\r\n\r\n#Reference : w3resource\r\n\r\n#End\r\n","votes":null},{"text":"\r\n\r\n    import copy\r\n    newList2 = copy.copy(newList)\r\n    newList[0], newList[-1] = newList[-1], newList[0]\r\n    newList2[0], newList2[-1] = newList2[-1], newList2[0]\r\n    return newList, newList2\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    new_List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    newList2 = swap_List(new_List)\r\n    print","votes":null},{"text":"\r\n\r\n    # print(newList)\r\n    swap = newList[0]\r\n    newList[0] = newList[-1]\r\n    newList[-1] = swap\r\n    print(newList)\r\n\r\n\r\nswap_List([3, 4, 5, 6, 7])\r\nswap_List([1, 2, 3, 4, 5])\r\nswap_List([1, 2, 3, 4])\r\nswap_List([1, 2, 3])\r\nswap_List([1, 2])\r\nswap_List([1])\r\nswap_List([])\r\n\r\n\r","votes":null}],"time":{"count":48.0,"avg":136010.34025,"std":34520.7760866387,"cov":0.2538099384}}
{"id":593,"question":"def removezero_ip(ip):\r\n    \"\"\"Write a function to remove leading zeroes from an ip address.\"\"\"","answers":[{"text":"\r\n    \r\n    ip_list = ip.split('.')\r\n    \r\n    for i in range(len(ip_list)):\r\n        \r\n        if ip_list[i][0] == '0':\r\n            \r\n            ip_list[i] = ip_list[i][1:]\r\n    \r\n    return '.'.join(ip_list)\r\n\r\n\r","votes":76367.024},{"text":"\r\n    if ip == \"0.0.0.0\":\r\n        return \"0.0.0.0\"\r\n    else:\r\n        return \".\".join(str(int(i)) for i in ip.split(\".\") if i)\r\n\r\n\r","votes":76743.76},{"text":"\r\n    \r\n    ip = str(ip)\r\n    \r\n    # split the ip into four parts\r\n    ip = ip.split('.')\r\n    \r\n    # for each part\r\n    for i in range(len(ip)):\r\n        \r\n        # if the first character is zero and the length of the string is greater than 1\r\n        if ip[i][0] == '0' and len(ip[i]) > 1:\r\n            \r\n            # remove the zero\r\n            ip[i] = ip[i][1:]\r\n    \r\n    # join the four parts\r\n    ip = '.'.join(ip)\r\n    \r\n    # return the new ip\r\n    return ip\r\n\r\n\r","votes":78136.272},{"text":"\r\n    return '.'.join(map(str, [int(x) for x in ip.split('.')]))\r\n\r","votes":80133.324},{"text":"\r\n    ip = str(ip)\r\n    ip = ip.split('.')\r\n    ip = [str(int(i)) for i in ip]\r\n    ip = '.'.join(ip)\r\n    return ip\r\n\r","votes":81418.264},{"text":"\r\n    return ip.replace('0+', '').replace('0', '')\r\n\r\n\r","votes":83567.016},{"text":"\r\n    return \".\".join([str(int(x)) for x in ip.split(\".\")])\r\n\r\n\r","votes":83746.82},{"text":"\r\n    ip_list = ip.split(\".\")\r\n    return_ip = [str(int(x)) for x in ip_list]\r\n    return \".\".join(return_ip)\r\n\r","votes":84211.34},{"text":"\r\n    return '.'.join([str(int(x)) for x in ip.split('.')])\r\n\r\n\r","votes":87885.076},{"text":"\r\n    octets = ip.split(\".\")\r\n    for i in range(len(octets)):\r\n        octets[i] = str(int(octets[i]))\r\n    return \".\".join(octets)\r\n\r\n\r","votes":91687.448},{"text":"\r\n    return '.'.join(str(int(x)) for x in ip.split('.'))\r\n\r","votes":92256.768},{"text":"\r\n    return '.'.join(str(int(x)) for x in ip.split('.'))\r\n\r\n\r","votes":93115.048},{"text":"\r\n\r\n    octets = ip.split('.')\r\n    for i in range(len(octets)):\r\n        while octets[i][:1] == '0' and len(octets[i]) > 1:\r\n            octets[i] = octets[i][1:]\r\n\r\n    return '.'.join(octets)\r\n\r\n\r","votes":100492.68},{"text":"\r\n    ip_split = ip.split('.')\r\n    ip_split = [str(int(i)) for i in ip_split]\r\n    return '.'.join(ip_split)\r\n\r\n\r","votes":105864.496},{"text":"\r\n    ip_list=ip.split(\".\")\r\n    for i in range(0,len(ip_list)):\r\n        ip_list[i]=ip_list[i].lstrip(\"0\")\r\n        if ip_list[i]==\"\":\r\n            ip_list[i]=\"0\"\r\n    ip_string=\".\".join(ip_list)\r\n    return ip_string\r\n\r","votes":108859.008},{"text":"\r\n    ip = str(ip)\r\n    lst = ip.split('.')\r\n    lst = [str(int(item)) for item in lst]\r\n    return '.'.join(lst)\r\n\r\n\r","votes":113512.648},{"text":"\r\n    ip_list = ip.split('.')\r\n    for i in range(len(ip_list)):\r\n        while True:\r\n            if ip_list[i].startswith('0'):\r\n                ip_list[i] = ip_list[i][1:]\r\n            else:\r\n                break\r\n    return '.'.join(ip_list)\r\n\r","votes":113901.472},{"text":"\r\n    ip_list = ip.split('.')\r\n    ip_list = map(str, ip_list)\r\n    ip_list = [int(i) for i in ip_list]\r\n    result = []\r\n    for i in ip_list:\r\n        if i == 0:\r\n            pass\r\n        else:\r\n            result.append(i)\r\n\r\n    return '.'.join(map(str, result))\r\n\r\n\r","votes":115132.06},{"text":"\r\n\r\n    # split the ip address into its octets\r\n    octets = ip.split('.')\r\n\r\n    # remove leading zeroes from each octet\r\n    for i in range(len(octets)):\r\n        octets[i] = octets[i].lstrip('0')\r\n\r\n    return '.'.join(octets)\r\n\r\n\r","votes":116373.62},{"text":"\r\n\r\n    ip_list = ip.split('.')\r\n    new_ip = []\r\n    for item in ip_list:\r\n        if item[0] == '0':\r\n            item = item[1:]\r\n        new_ip.append(item)\r\n\r\n    return '.'.join(new_ip)\r\n\r","votes":117290.896},{"text":"\r\n    \r\n    ip_list = ip.split('.')\r\n    ip_list = [int(i) for i in ip_list]\r\n    \r\n    \r\n    while ip_list[0] == 0:\r\n        ip_list.pop(0)\r\n    \r\n    while ip_list[-1] == 0:\r\n        ip_list.pop(-1)\r\n    \r\n    if len(ip_list) == 0:\r\n        return '0.0.0.0'\r\n    \r\n    ip_list = [str(i) for i in ip_list]\r\n    \r\n    return '.'.join(ip_list)\r\n\r\n\r\n\r","votes":117523.612},{"text":"\r\n    # split the ip address into a list of strings\r\n    ip = ip.split('.')\r\n    # create a new list to store the result\r\n    new_ip = []\r\n    # loop through each string in the list\r\n    for i in ip:\r\n        # convert the string to an integer\r\n        i = int(i)\r\n        # if it is less than 10, convert it to a string and append it to the new list\r\n        if i < 10:\r\n            i = str(i)\r\n        # if it is greater than or equal to 10, append it to the new list\r\n        else:\r\n            i = str(i)\r\n        new_ip.append(i)\r\n    # convert the list back into a string and return it\r\n    ip = '.'.join(new_ip)\r\n    return ip\r\n\r\n\r","votes":119143.132},{"text":"\r\n    ips = ip.split('.')\r\n    ips = [str(int(i)) for i in ips]\r\n    return '.'.join(ips)\r\n\r\n\r","votes":119825.4},{"text":"\r\n    return '.'.join([str(int(x)) for x in ip.split('.')])\r\n\r","votes":124385.932},{"text":"\r\n    # Your code goes here\r\n    return '.'.join(str(int(i)) for i in ip.split('.'))\r\n\r\nip = \"010.000.000.123\"\r\nprint(\"ip:\", ip)\r\nprint(\"after removezero_ip:\", removezero_ip(ip))\r\n\r\nip = \"10.0.0.1\"\r\nprint(\"ip:\", ip)\r\nprint(\"after removezero_ip:\", removezero_ip(ip))\r\n\r\nip = \"000.000.000.000\"\r\nprint(\"ip:\", ip)\r\nprint(\"after removezero_ip:\", removezero_ip(ip))\r\n\r\nip = \"0001.0002.0003.0004\"\r\nprint(\"ip:\", ip)\r\nprint(\"after removezero_ip:\", removezero_ip(ip))\r\n\r\n\"\"\"\r\nOutput:\r\nip: 010.000.000.123\r\nafter removezero_ip: 10.0.0.123\r\nip: 10.0.0.1\r\nafter removezero_ip: 10.0.0.1\r\nip: 000.000.000.000\r\nafter removezero_ip: 0.0.0.0\r\nip: 0001.0002.0003.0004\r\nafter removezero_ip: 1.2.3.4\r\n\"\"\"\r\n\r\n\r","votes":127662.652},{"text":"\r\n\r\n    # if ip is a string\r\n    if isinstance(ip, str):\r\n\r\n        # split the ip address into a list\r\n        ip_list = ip.split('.')\r\n\r\n        # remove leading zeroes from each element in the list\r\n        ip_list = [str(int(e)) for e in ip_list]\r\n\r\n        # join the elements of the list into a string\r\n        ip = '.'.join(ip_list)\r\n\r\n    # if ip is not a string\r\n    else:\r\n        print('ip is not a string')\r\n\r\n    return ip\r\n\r\n\r","votes":135306.648},{"text":"\r\n    return \".\".join([str(int(i)) for i in ip.split(\".\")])\r\n\r\nif __name__ == '__main__':\r\n    ip = \"0172.16.254.1\"\r\n    print(\"Original IP:\", ip)\r\n    newip = removezero_ip(ip)\r\n    print(\"New IP:\", newip)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r","votes":136053.58},{"text":"\r\n    ip = str(ip)\r\n    parts = ip.split('.')\r\n    for i in range(len(parts)):\r\n        parts[i] = parts[i].lstrip('0')\r\n    return '.'.join(parts)\r\n\r\n\r","votes":136253.724},{"text":"\r\n\r\n    ip_list = ip.split('.')\r\n    ip_list_new = []\r\n\r\n    for i in ip_list:\r\n        if i[0] == '0':\r\n            if len(i) > 1:\r\n                ip_list_new.append(i[1:])\r\n            else:\r\n                ip_list_new.append('')\r\n        else:\r\n            ip_list_new.append(i)\r\n\r\n    ip_new = '.'.join(ip_list_new)\r\n    return ip_new\r\n\r\n\r","votes":152679.012},{"text":"\r\n    \r\n    listip = ip.split('.')\r\n    listip = [int(i) for i in listip]\r\n\r\n    for i in range(len(listip)):\r\n        if listip[i] == 0:\r\n            del listip[i]\r\n        else:\r\n            break\r\n\r\n    if len(listip) == 0:\r\n        return '0.0.0.0'\r\n    elif len(listip) == 1:\r\n        return str(listip[0])\r\n    elif len(listip) == 2:\r\n        return str(listip[0]) + '.0.' + str(listip[1])\r\n    elif len(listip) == 3:\r\n        return str(listip[0]) + '.' + str(listip[1]) + '.' + str(listip[2])\r\n    elif len(listip) == 4:\r\n        return str(listip[0]) + '.' + str(listip[1]) + '.' + str(listip[2]) + '.' + str(listip[3])\r\n\r\n\r","votes":153529.712},{"text":"\r\n    parts = ip.split('.')\r\n    return '.'.join([str(int(i)) for i in parts])\r\n\r\n\r\nif __name__ == '__main__':\r\n    ip = '001.111.000.000'\r\n    print(removezero_ip(ip))\r\n\r\n    ip2 = '1.2.3.4'\r\n    print(removezero_ip(ip2))\r\n\r\n    ip3 = '1.2.3.004'\r\n    print(removezero_ip(ip3))\r\n\r\n    ip4 = '001.111.000.000'\r\n    print(removezero_ip(ip4))\r\n\r\n    ip5 = '001.000.000.000'\r\n    print(removezero_ip(ip5))\r\n\r\n    ip6 = '1.2.3.4'\r\n    print(removezero_ip(ip6))\r\n\r\n    ip7 = '1.2.3.4'\r\n    print(removezero_ip(ip7))\r\n\r\n    ip8 = '1.2.3.4'\r\n    print(removezero_ip(ip8))\r\n\r\n    ip9 = '1.2.3.4'\r\n    print(removezero_ip(ip9))\r\n\r\n    ip10 = '1.2.3.4'\r\n    print(removezero_ip(ip10))\r\n\r\n    ip11 = '1.2.3.4'\r\n    print(removezero_ip(ip11))\r\n\r\n    ip12 = '1.2.3.4'\r\n    print(removezero_ip(ip12))\r\n\r\n    ip13 = '1.2.3.4'\r\n    print(removezero_ip(ip13))\r\n\r\n    ip14 = '1.2.3.4'\r","votes":157501.712},{"text":"\r\n    ip = ip.split('.')\r\n\r\n    for i in range(len(ip)):\r\n        ip[i] = ip[i].lstrip('0')\r\n\r\n    return '.'.join(ip)\r\n\r\n\r","votes":158238.376},{"text":"\r\n    \r\n    ip = str(ip)\r\n    ip_list = ip.split('.')\r\n    for i in range(len(ip_list)):\r\n        if ip_list[i][0] == '0':\r\n            ip_list[i] = ip_list[i][1:]\r\n    \r\n    return '.'.join(ip_list)\r\n\r\n\r","votes":163819.608},{"text":"\r\n    ip = ip.split('.')\r\n    ip = map(int, ip)\r\n    ip = [str(i) for i in ip]\r\n    ip = [str(i) for i in ip if i != '0']\r\n    return '.'.join(ip)\r\n\r\n\r","votes":174833.908},{"text":"\r\n    octet = ip.split(\".\")\r\n    octet = [str(int(i)) for i in octet]\r\n    octet = [str(i) for i in octet if i != \"0\"]\r\n    return \".\".join(octet)\r\n\r\nprint(removezero_ip(\"001.000.2.000\"))\r\nprint(removezero_ip(\"1.000.2.000\"))\r\n","votes":175263.552},{"text":"\r\n    ip = ip.split(\".\")\r\n    for i in range(len(ip)):\r\n        while ip[i][0] == \"0\" and len(ip[i]) > 1:\r\n            ip[i] = ip[i][1:]\r\n    return \".\".join(ip)\r\n\r\n\r","votes":177104.904},{"text":"\r\n    ip = ip.split('.')\r\n    for i in range(len(ip)):\r\n        while ip[i][0] == '0':\r\n            ip[i] = ip[i][1::]\r\n    return '.'.join(ip)\r\n\r\n\r","votes":186075.12},{"text":"\r\n    # split the ip address into its four components\r\n    ip = ip.split('.')\r\n    # remove leading zeroes from each octet\r\n    for i in range(0, len(ip)):\r\n        while ip[i][0] == '0':\r\n            # remove leading zeroes\r\n            ip[i] = ip[i][1:]\r\n        if len(ip[i]) == 0:\r\n            # if the octet is now empty, add a zero\r\n            ip[i] = '0'\r\n    # rejoin the ip address\r\n    return '.'.join(ip)\r\n\r\n\r","votes":212458.384},{"text":"\r\n    # Start with a basic regex to check for dotted decimal format.\r\n    ip_regex = re.compile(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$')\r\n    \r\n    ## Your code goes here\r\n    #Check if ip is in correct format\r\n    if ip_regex.match(ip):\r\n        ip_split = ip.split('.')\r\n        for ip_split_item in ip_split:\r\n            if ip_split_item[0]=='0':\r\n                ip_split_item = ip_split_item[1:]\r\n        ip = '.'.join(ip_split)\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Your Code Here\r\n    temp = ip\r\n    while temp[0] == '0':\r\n        temp = temp[1:]\r\n    return temp\r\n    \r\n\r","votes":null},{"text":"\r\n    ip_list = ip.split('.')\r\n    for i in range(len(ip_list)):\r\n        if ip_list[i] == '0':\r\n            ip_list.remove('0')\r\n            if len(ip_list) == 1:\r\n                ip_list.append('0')\r\n    return '.'.join(ip_list)\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    ip = ip.split('.')\r\n    ip = [int(i) for i in ip]\r\n    ip = [str(i) for i in ip]\r\n    ip = [i.zfill(3) for i in ip]\r\n    ip = '.'.join(ip)\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    \r\n    ip = str(ip)\r\n    ip = ip.split(\".\")\r\n    for x in range(4):\r\n        if ip[x][0] == \"0\" and len(ip[x]) > 1:\r\n            ip[x] = ip[x][1:]\r\n    for x in range(4):\r\n        if len(ip[x]) == 0:\r\n            ip[x] = \"0\"\r\n    return \".\".join(ip)\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.split('.')\r\n\r\n    for i in range(len(ip)):\r\n        ip[i] = str(ip[i])\r\n        ip[i] = ip[i].lstrip('0')\r\n        ip[i] = ip[i].rjust(3, '0')\r\n\r\n    ip = '.'.join(ip)\r\n\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    l=ip.split('.')\r\n    for i in range","votes":null},{"text":"\r\n\r\n    # Your code here.\r\n    ip = str(ip)\r\n    if ip.startswith('0'):\r\n        return removezero_ip(int(ip[1:]))\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    zero = 0\r\n    result = []\r\n    for i in range(4):\r\n        temp = ip[zero:zero+2]\r\n        if temp == '00':\r\n            zero += 1\r\n        else:\r\n            result.append(temp)\r\n            zero += 2\r\n    return '.'.join(result)\r\n\r\n\r","votes":null},{"text":"\r\n    new_ip = []\r\n    for i in ip:\r\n        if i != 0:\r\n            new_ip.append(i)\r\n    return new_ip\r\n\r","votes":null},{"text":"\r\n    \r\n    return tuple(str(x) for x in ip)\r\n\r","votes":null},{"text":"\r\n    if not is_valid_ip(ip):\r\n        return None\r\n\r\n    return '.'.join(str(int(x)) for x in ip.split('.'))\r\n\r\n\r","votes":null},{"text":"\r\n    return ''.join(filter(lambda x: x != '0', str(ip).split('.')))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    #remove leading zeroes from an ip address\r\n    ip = str(ip)\r\n    if ip[0]=='0':\r\n        if ip[1:].count(\"0\") == len(ip)-1:\r\n            ip = '0'\r\n        else:\r\n            ip = ip.split('.')\r\n            for i in range(len(ip)):\r\n                if ip[i] != '0':\r\n                    ip = '.'.join(ip[i:])\r\n                    break\r\n            ip = ip[1:]\r\n            \r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    return ip.replace(ip.split('.')[0], '')\r\n\r\n\r\nprint(removezero_ip('0001.000.000.000'))\r\n\r\n\r","votes":null},{"text":"\r\n    a = ip.split(\".\")\r\n    a[0] = str(int(a[0]))\r\n    a[1] = str(int(a[1]))\r\n    a[2] = str(int(a[2]))\r\n    a[3] = str(int(a[3]))\r\n    return \".\".join(a)\r\n\r","votes":null},{"text":"\r\n    return str(ip)\r\n\r","votes":null},{"text":"\r\n    return ''.join(map(str, (int(x) for x in ip.split('.') if int(x) != 0)))\r\n\r\n\r","votes":null},{"text":"\r\n    ip=ip.split('.')\r\n    ip1=int(ip[0])\r\n    ip2=int(ip[1])\r\n    ip3=int(ip[2])\r\n    ip4=int(ip[3])\r\n    if ip1==0:\r\n        ip1=ip1+1\r\n    if ip2==0:\r\n        ip2=ip2+1\r\n    if ip3==0:\r\n        ip3=ip3+1\r\n    if ip4==0:\r\n        ip4=ip4+1\r\n    ip[0]=str(ip1)\r\n    ip[1]=str(ip2)\r\n    ip[2]=str(ip3)\r\n    ip[3]=str(ip4)\r\n    ip='.'.join(ip)\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    l = list(map(int, ip.split('.')))\r\n    while l[-1] == 0:\r\n        del l[-1]\r\n    return str(int(l[0])) + '.' + str(int(l[1])) + '.' + str(int(l[2])) + '.' + str(int(l[-1]))\r\nip = input('Enter an ip address: ')\r\nprint(removezero_ip(ip))\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    octets = ip.split('.')\r\n    \r\n    for i in range(4):\r\n        if octets[i] == '0':\r\n            octets[i] = ''\r\n        else:\r\n            break\r\n        \r\n    for i in range(4-1, -1, -1):\r\n        if octets[i] == '':\r\n            octets[i] = '0'\r\n        else:\r\n            break\r\n            \r\n    return '.'.join(octets)\r\n\r\n    \r\nprint(removezero_ip('00000000'))\r\nprint(removezero_ip('192.168.0.1'))\r\nprint(removezero_ip('192.168.0.0'))\r\nprint(removezero_ip('192.168.0.01'))\r\nprint(removezero_ip('192.168.0.100'))\r\nprint(removezero_ip('192.168.0.101'))\r\nprint(removezero_ip('192.168.1.100'))\r\nprint(removezero_ip('192.168.1.101'))\r\nprint(removezero_ip('192.168.1.1010'))\r\nprint(removezero_ip('192.168.1.11'))\r\nprint(removezero_ip('192.168.1.1'))\r\nprint(removezero_ip('192.168.1.01'))\r\nprint(removezero_ip('192.168.1.001'))\r\nprint(removezero_ip('192.168.1.0001'))\r\nprint(removezero_ip('192.168.1.00001'))\r\nprint(removezero_ip('192.168.1","votes":null},{"text":"\r\n    return ip.","votes":null},{"text":"\r\n    ip = str(ip)\r\n    ip = str(ip).split('.')\r\n    ip = '.'.join((str(i) for i in ip if i))\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    # Start coding here\r\n    ip_list = ip.split('.')\r\n    i = 0\r\n    while i<4:\r\n        if ip_list[i][0] == '0':\r\n            ip_list[i] = ip_list[i][1:]\r\n        i+=1\r\n    return '.'.join(ip_list)\r\n\r","votes":null},{"text":"\r\n    if len(ip) == 1:\r\n        return ip\r\n\r\n    if ip[0] == '0':\r\n        return removezero_ip(ip[1:])\r\n    else:\r\n        return ip\r\n\r\n\r","votes":null},{"text":"\r\n    if ip:\r\n        last_zero = ip.rfind('0')\r\n        if last_zero == -1:\r\n            last_zero = len(ip)\r\n        return ip[:last_zero+1]\r\n\r","votes":null},{"text":"\r\n    a, b, c, d = ip.split('.')\r\n    return '.'.join([a, b, c, d])\r\n\r\n\r","votes":null},{"text":"\r\n    ip = ip.split(\".\")\r\n    ip[0] = str(int(ip[0]))\r\n    ip[1] = str(int(ip[1]))\r\n    ip[2] = str(int(ip[2]))\r\n    ip[3] = str(int(ip[3]))\r\n    ip = \".\".join(ip)\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    return '.'.join(map(str, filter(None, ip.split('.'))))\r\n\r","votes":null},{"text":"\r\n\r\n    return ''.join(char for char in ip if char.isdigit())\r\n\r\n\r","votes":null},{"text":"\r\n    ip_list = list(ip)\r\n    while ip_list[0] == '0':\r\n        del ip_list[0]\r\n    return '.'.join(ip_list)\r\n\r","votes":null},{"text":"\r\n    ip_list = ip.split('.')\r\n    for i in range(len(ip_list)):\r\n        while ip_list[i][0] == '0':\r\n            ip_list[i] = ip_list[i]","votes":null},{"text":"\r\n    \r\n    ip_list = ip.split('.')\r\n    new_ip = ''\r\n    for i in range(4):\r\n        if ip_list[i][0] == '0':\r\n            new_ip += str(int(ip_list[i]) + 256)\r\n            new_ip += '.'\r\n        else:\r\n            new_ip += ip_list[i]\r\n            new_ip += '.'\r\n    new_ip = new_ip[:-1]\r\n    return new_ip\r\n\r\n\r","votes":null},{"text":"\r\n    return ''.join(str(x) for x in ip.split('.') if x)\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    if ip == '0.0.0.0':\r\n        return None\r\n    if ip[0] == \"0\":\r\n        ip = ip[1:]\r\n    if ip[0] == \".\":\r\n        ip = ip[1:]\r\n    if ip.split('.')[-1] == '0':\r\n        ip = '.'.join(ip.split('.')[:-1])\r\n\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    ip_list = ip.split('.')\r\n    for i in range(len(ip_list)):\r\n        if ip_list[i] == '0':\r\n            del ip_list[i]\r\n    ip_list.reverse()\r\n    ip_list.append(ip_list.pop())\r\n    ip_list.reverse()\r\n    ip_list = '.'.join(ip_list)\r\n    return ip_list\r\n\r","votes":null},{"text":"\r\n    ip_list = ip.split('.')\r\n    for i in range(len(ip_list)):\r\n        ip_list[i] = str(int(ip_list[i]))\r\n        if len(ip_list[i]) == 1:\r\n            ip_list[i] = '0' + ip_list[i]\r\n    return '.'.join(ip_list)\r\n\r\n\r","votes":null},{"text":"\r\n    ip_list = str(ip).split(\".\")\r\n    i = 0\r\n    while i < len(ip_list):\r\n        if len(ip_list[i]) == 1:\r\n            ip_list[i] = '0' + ip_list[i]\r\n        i += 1\r\n    return \".\".join(ip_list)\r\n\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    ip = ip.split(\".\")\r\n    if ip[0] == \"0\":\r\n        ip[0] = \"\"\r\n    if ip[1] == \"0\":\r\n        ip[1] = \"\"\r\n    if ip[2] == \"0\":\r\n        ip[2] = \"\"\r\n    if ip[3] == \"0\":\r\n        ip[3] = \"\"\r\n    ip = \".\".join(ip)\r\n    if ip == \"\":\r\n        ip = \"0\"\r\n    return ip\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    ip = str(ip)\r\n    if len(ip) < 4:\r\n        return ip\r\n    else:\r\n        if ip.startswith('0'):\r\n            return ip[1:]\r\n        else:\r\n            return ip\r\n\r","votes":null},{"text":"\r\n    return ''.join(ip.split('.'))\r\n\r\n\r","votes":null},{"text":"\r\n    # Note: this is the same logic as the one in removezero_ipv4\r\n    #       but the ipv6 address is longer\r\n    octet = ip.split('.')\r\n    for i in range(len(octet)):\r\n        octet[i] = str(","votes":null},{"text":"\r\n    \r\n    x = ip.split('.')\r\n    \r\n    for i in range(4):\r\n        if x[i][:1] == '0':\r\n            x[i] = x[i][1:]\r\n            \r\n    return '.'.join(x)\r\n\r\n\r","votes":null},{"text":"\r\n    return '.'.join(str(int(x)) for x in ip.split('.'))\r\n\r\nif __name__ == '__main__':\r\n    ip = '001.010.100.003'\r\n    print(removezero_ip(ip))\r\n\r\n\"\"\"SOLUTION\r\n#","votes":null},{"text":"\r\n    ip=list(ip)\r\n    for i in range(len(ip)):\r\n        if ip[i]=='0':\r\n            if i==0:\r\n                ip.pop(i)\r\n                ip.insert(i,'.')\r\n            else:\r\n                if ip[i-1]=='.':\r\n                    ip.pop(i)\r\n                    ip.insert(i,'.')\r\n    ip=''.join(ip)\r\n    return ip\r\n\r","votes":null},{"text":"\r\n    return tuple(int(x) for x in ip.split(\".\"))\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    ip = ip.split('.')\r\n    newip = []\r\n    for i in range(4):\r\n        if ip[i] == '0' and i == 0:\r\n            newip.append('0')\r\n        if ip[i] == '0' and i != 0:\r\n            newip.append(ip[i-1])\r\n        if ip[i] != '0':\r\n            newip.append(ip[i])\r\n    return '.'.join(newip)\r\n\r","votes":null},{"text":"\r\n    lst = ip.split('.')\r\n    if lst[0] == '0' and lst[1] == '0' and lst[2] == '0':\r\n        return lst[-1]\r\n    elif lst[0] == '0' and lst[1] == '0':\r\n        return lst[2]\r\n    elif lst[0] == '0':\r\n        return lst[1] + '.' + lst[2]\r\n    else:\r\n        return ip\r\n\r\n\r","votes":null},{"text":"\r\n    return ip.replace(\"0*\", \"\")\r\n\r\n\r","votes":null},{"text":"\r\n    ip=str(ip)\r\n    ip=ip.split('.')\r\n    ip[0]=str(ip[0])\r\n    ip[1]=str(ip[1])\r\n    ip[2]=str(ip[2])\r\n    ip[3]=str(ip[3])\r\n    if ip[0][0]=='0':\r\n        ip[0]=ip[0][1:]\r\n    if ip[1][0]=='0':\r\n        ip[1]=ip[1][1:]\r\n    if ip[2][0]=='0':\r\n        ip[2]=ip[2][1:]\r\n    if ip[3][0]=='0':\r\n        ip[3]=ip[3][1:]\r\n    return ip\r\n\r\n# print(removezero_ip(\"001.010.010.100\"))\r\n\r","votes":null},{"text":"\r\n    ip_string = str(ip)\r\n    ip_string = ip_string.split('.')\r\n    return '.'.join(x for x in ip_string if x)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    ip = str(ip)\r\n    \r\n    if ip[0] == '0':\r\n        ip2 = ip[1:]\r\n    else:\r\n        ip2 = ip\r\n    \r\n    if ip2[-1] == '0':\r\n        ip3 = ip2[:-1]\r\n    else:\r\n        ip3 = ip2\r\n    \r\n    return ip3\r\n\r","votes":null},{"text":"\r\n    newip = list(ip)\r\n    for i in range(len(newip)):\r\n        if newip[i] == '0':\r\n            del_index = i\r\n            while del_index < len(newip):\r\n                del newip[del_index]\r\n    if newip == ip:\r\n        return False\r\n    else:\r\n        return ''.join(newip)\r\n\r\n\r","votes":null},{"text":"\r\n    ip = str(ip)\r\n    if len(ip) == 3:\r\n        return ip\r\n    elif len(ip) == 4:\r\n        if ip[0] == '0':\r\n            return ip[-1]\r\n        else:\r\n            return ip\r\n    else:\r\n        if ip[0] == '0':\r\n            return '.'.join([ip[1], ip[-2], ip[-1]])\r\n        else:\r\n            return '.'.join([ip[0], ip[-3], ip[-2], ip[-1]])\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    return int(ip)\r\n\r\n\r","votes":null}],"time":{"count":38.0,"avg":121798.7896842105,"std":35495.149319355,"cov":0.291424483}}
{"id":597,"question":"def find_kth(arr1, arr2, m, n, k):\r\n    \"\"\"Write a function to find kth element from the given two sorted arrays.\"\"\"","answers":[{"text":"\r\n\r\n    # Initializing variables\r\n    i = 0\r\n    j = 0\r\n\r\n    # loop to find kth element\r\n    for _ in range(k):\r\n        # if i is smaller than m, then we will\r\n        # take the first element of arr1\r\n        if i < m:\r\n            # if j is smaller than n, then we will\r\n            # take the first element of arr2, otherwise\r\n            # we will take the first element of arr1\r\n            if j < n:\r\n                if arr1[i] < arr2[j]:\r\n                    i += 1\r\n                else:\r\n                    j += 1\r\n            else:\r\n                i += 1\r\n\r\n        # if j is smaller than n, then we will\r\n        # take the first element of arr2\r\n        elif j < n:\r\n            j += 1\r\n\r\n    # returning the kth element\r\n    return arr1[i-1] if i-1 < m else arr2[j-1]\r\n\r\n\r","votes":128255.232},{"text":"\r\n    i = 0\r\n    j = 0\r\n    while i < m and j < n:\r\n        if arr1[i] <= arr2[j]:\r\n            if k == 1:\r\n                return arr1[i]\r\n            else:\r\n                i += 1\r\n                k -= 1\r\n        else:\r\n            if k == 1:\r\n                return arr2[j]\r\n            else:\r\n                j += 1\r\n                k -= 1\r\n    if i == m and j < n:\r\n        return arr2[j]\r\n    elif j == n and i < m:\r\n        return arr1[i]\r\n    else:\r\n        return -1\r\n\r\n\r","votes":150164.6},{"text":"\r\n    i = 0\r\n    j = 0\r\n    for _ in range(k):\r\n        if i < m and j < n:\r\n            if arr1[i] < arr2[j]:\r\n                i += 1\r\n            elif arr1[i] > arr2[j]:\r\n                j += 1\r\n            else:\r\n                i += 1\r\n                j += 1\r\n        elif i < m:\r\n            i += 1\r\n        else:\r\n            j += 1\r\n    return arr1[i - 1] if i - 1 <= m else arr2[j - 1]\r\n\r\n\r\narr1 = [1, 3, 5, 7, 9]\r\narr2 = [2, 4, 6, 8, 10]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 4\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\n\r\n\"\"\"\r\nTime O(K)\r\nSpace O(1)\r\n\"\"\"\r\n\r\n\r","votes":165237.352},{"text":"\r\n\r\n    # Create a new array\r\n    new_arr = []\r\n\r\n    # Traverse through all the elements\r\n    i = 0\r\n    j = 0\r\n\r\n    while (i < len(arr1) and j < len(arr2)):\r\n\r\n        # If first element of arr1 is smaller than first element of arr2,\r\n        # then arr1[i] is inserted into new_arr\r\n        if (arr1[i] < arr2[j]):\r\n            new_arr.append(arr1[i])\r\n            i += 1\r\n\r\n        # If first element of arr2 is smaller than first element of arr1,\r\n        # then arr2[j] is inserted into new_arr\r\n        else:\r\n            new_arr.append(arr2[j])\r\n            j += 1\r\n\r\n    # If we have traversed complete array of arr1, then insert remaining elements\r\n    # of arr2\r\n    if (i == m):\r\n        new_arr.extend(arr2[j:])\r\n\r\n    # If we have traversed complete array of arr2, then insert remaining elements\r\n    # of arr1\r\n    if (j == n):\r\n        new_arr.extend(arr1[i:])\r\n\r\n    # Return the kth element\r\n    return new_arr[k - 1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    arr1 = [1, 5, 8, 12, 14]\r\n    arr2 = [2, 3, 4, 10, 11, 13]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n\r\n    print(\r\n        \"The kth smallest element is \" + str(find_kth(arr1, arr2, m, n, k))\r\n    )\r\n\r\n    arr1 ","votes":187632.756},{"text":"\r\n    # Code here\r\n    # if len(arr1) < len(arr2):\r\n    #     arr1, arr2 = arr2, arr1\r\n    #     m, n = n, m\r\n    i = 0\r\n    j = 0\r\n    while k > 0:\r\n        if i >= m:\r\n            return arr2[j+k-1]\r\n        if j >= n:\r\n            return arr1[i+k-1]\r\n        if k == 1:\r\n            return min(arr1[i], arr2[j])\r\n        if arr1[i] <= arr2[j]:\r\n            i += 1\r\n            k -= 1\r\n        else:\r\n            j += 1\r\n            k -= 1\r\n\r\n\r","votes":222691.012},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = min(m, k \/\/ 2)\r\n    j = min(n, k - i)\r\n\r\n    if arr1[i - 1] < arr2[j - 1]:\r\n        return find_kth(arr1[i:], arr2, m - i, n, k - i)\r\n    else:\r\n        return find_kth(arr1, arr2[j:], m, n - j, k - j)\r\n\r\n\r","votes":228594.116},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    a = arr1[m-1]\r\n    b = arr2[n-1]\r\n    \r\n    if a > b:\r\n        return find_kth(arr1, arr2, m-1, n, k)\r\n    elif b > a:\r\n        return find_kth(arr1, arr2, m, n-1, k-m)\r\n    else:\r\n        return a\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    idx1 = min(m, k \/\/ 2)\r\n    idx2 = min(n, k - 1 - idx1)\r\n\r\n    if arr1[idx1 - 1] <= arr2[idx2 - 1]:\r\n        return find_kth(arr1, arr2[idx2:], m, n - idx2, k - idx2)\r\n\r\n    return find_kth(arr1[idx1:], arr2, m - idx1, n, k - idx1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(find_kth([], [1, 2, 3, 4, 5], 0, 5, 1))\r\n    print(find_kth([1, 2, 3, 4, 5], [], 5, 0, 1))\r\n    print(find_kth([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5, 5, 1))\r\n    print(find_kth([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5, 5, 2))\r\n    print(find_kth([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5, 5, 3))\r\n    print(find_kth([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5, 5, 4))\r\n    print(find_kt","votes":null},{"text":"\r\n    # return find_kth_helper(arr1, arr2, m, n, k)\r\n    return find_kth_helper_2(arr1, arr2, m, n, k)\r\n\r\n\r","votes":null},{"text":"\r\n    i = 0\r\n    j = 0\r\n    while i < m and j < n:\r\n        if arr1[i] < arr2[j]:\r\n            k -= m - i\r\n            i += 1\r\n        elif arr2[j] < arr1[i]:\r\n            k -= n - j\r\n            j += 1\r\n        else:\r\n            if k == 1:\r\n                return arr1[i]\r\n            i += 1\r\n            j += 1\r\n            k -= 1\r\n    while i < m:\r\n        if k == 1:\r\n            return arr1[i]\r\n        k -= m - i\r\n        i += 1\r\n    while j < n:\r\n        if k == 1:\r\n            return arr2[j]\r\n        k -= n - j\r\n        j += 1\r\n    return None\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    elif n == 0:\r\n        return arr1[k - 1]\r\n    elif k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    elif k == m + n:\r\n        return max(arr1[m - 1], arr2[n - 1])\r\n    else:\r\n        mid1 = (m + n) \/\/ 2\r\n        mid2 = k - mid1\r\n        if arr1[mid1 - 1] < arr2[mid2 - 1]:\r\n            return find_kth(arr1, arr2, mid1, n, k)\r\n        else:\r\n            return find_kth(arr1, arr2, m, mid2, k)\r\n\r\n\r\narr1 = [1, 5, 7]\r\narr2 = [2, 3, 4, 6, 8, 9, 10, 11, 12, 13]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 8\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\n\r","votes":null},{"text":"\r\n    if k > m+n:\r\n        return -1\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    \r\n    # find index for arr1\r\n    i = min(m-1, k-1)\r\n    j = min(n-1, k-1)\r\n    \r\n    if arr1[i] < arr2[j]:\r\n        return find_kth(arr1, arr2, m, j, k-(i+1))\r\n    else:\r\n        return find_kth(arr1, arr2, i, n, k-(j+1))\r\n\r\n\r","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if k <= m:\r\n        return arr1[k - 1]\r\n    if k == m + 1:\r\n        return min(arr1[m - 1], arr2[0])\r\n\r\n    new_k = k - m - 1\r\n\r\n    if new_k <= n:\r\n        return arr2[new_k - 1]\r\n    if new_k == n + 1:\r\n        return max(arr2[n - 1], arr1[m - 1])\r\n\r\n    return find_kth(arr1, arr2, m, n - new_k, k - m - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    i = j = 0\r\n    while i < m and j < n:\r\n        if arr1[i] < arr2[j]:\r\n            i += 1\r\n        elif arr1[i] > arr2[j]:\r\n            j += 1\r\n        else:\r\n            if k == 1:\r\n                return arr1[i]\r\n            i += 1\r\n            j += 1\r\n            k -= 1\r\n    if i == m:\r\n        return arr2[j+k-1]\r\n    return arr1[i+k-1]\r\n\r\n\r","votes":null},{"text":"\r\n    i = 0\r\n    j = 0\r\n    while (i < m and j < n and k > 0):\r\n        if (arr1[i] < arr2[j]):\r\n            k -= 1\r\n            i += 1\r\n        else:\r\n            k -= 1\r\n            j += 1\r\n\r\n    if (i < m and j < n):\r\n        if (arr1[i] == arr2[j]):\r\n            return arr1[i]\r\n        elif (arr1[i] > arr2[j]):\r\n            return find_kth(arr2, arr1, n, m, k)\r\n        else:\r\n            return find_kth(arr1, arr2, m, n, k)\r\n    elif (i < m):\r\n        return arr1[i]\r\n    else:\r\n        return arr2[j]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 5, 8, 9, 10]\r\n    arr2 = [2, 3, 4, 6, 7, 8, 11, 12]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n","votes":null},{"text":"\r\n    \r\n    # kth element will be at the intersection of the two arrays.\r\n    # So just find the intersection point and get the kth element from the intersection point.\r\n    # To find the intersection point, we need to do binary search on the smaller array.\r\n    # If the array is empty or empty string, return -1.\r\n    if m == 0 or n == 0:\r\n        return -1\r\n    \r\n    # If k is greater than the size of the array, return -1.\r\n    if k > m + n:\r\n        return -1\r\n    \r\n    # For the binary search, we need to find the smallest value in the array.\r\n    # So we will find the smallest value in the array with the following steps:\r\n    \r\n    # Find the smallest value in the array.\r\n    # If the smallest value is 0, then return 0.\r\n    # If the smallest value is larger than 0, then return -1.\r\n    # If the smallest value is smaller than 0, then return the absolute value.\r\n    \r\n    # For example, if the array is [-3, -2, -1], then the smallest value is -3.\r\n    # Return -1.\r\n    # If the array is [-1, 0, 1], then the smallest value is 0.\r\n    # Return 0.\r\n    # If the array is [1, 2], then the smallest value is 1.\r\n    # Return 1.\r\n    # If the array is [], then the smallest value is 0.\r\n    # Return 0.\r\n    \r\n    smallest_value = min(arr1[0], arr2[0])\r\n    \r\n    if smallest_value == 0:\r\n        return 0\r\n    elif smallest_value > 0:\r\n        return -1\r\n    else:\r\n        return abs(smallest_value)\r\n    \r\n    \r\n    # Find the index of the smallest value in the array.\r\n    # If the smallest value is 0, then return 0.\r\n    ","votes":null},{"text":"\r\n    # if k > m + n:\r\n    #     return -1\r\n    # if k <= m:\r\n    #     return arr1[k - 1]\r\n    # if k <= m + n:\r\n    #     return arr2[k - m - 1]\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k <= m:\r\n        return arr1[k - 1]\r\n    if k <= m + n:\r\n        return arr2[k - m - 1]\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:  \r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return max(arr1[0], arr2[0])\r\n    if k > m + n:\r\n        return None\r\n    if k > m:\r\n        return find_kth(arr1, arr2[1:], m, n-1, k-m)\r\n    if k > 1:\r\n        return find_kth(arr1[1:], arr2, m-1, n, k-1)\r\n    return max(arr1[0], arr2[0])\r\n\r\n\r\narr1 = [1, 3, 5, 7, 9, 11]\r\narr2 = [2, 4, 6, 8, 10, 12]\r\nk = 5\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\narr1 = [1, 2, 3, 4]\r\narr2 = [5, 6, 7, 8, 9, 10]\r\nk = 9\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\narr1 = [1, 2, 3, 4, 5]\r\narr2 = [6, 7, 8, 9, 10, 11]\r\nk = 11\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\narr1 = [1, 2, 3, 4, 5]\r\narr2 = [6, 7, 8, 9, 10, 11]\r\nk = 7\r\nprint(find_kth","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    # If we reach here, then arrays are not empty and k > 1\r\n    if (m + n) % 2 == 0:\r\n        # If total number of elements is even, then index of median is (total \/ 2)\r\n        median_index = (m + n) \/\/ 2\r\n    else:\r\n        # If total number of elements is odd, then index of median is (total \/ 2) + 1\r\n        median_index = (m + n) \/\/ 2 + 1\r\n\r\n    # If the median is from first array, then we ignore the first half of the elements\r\n    # from second array and vice-versa\r\n    if median_index <= m:\r\n        return find_kth(arr1, arr2[1:], m, n - 1, k)\r\n    else:\r\n        return find_kth(arr1[1:], arr2, m - 1, n, k)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 5, 12, 26]\r\n    arr2 = [3, 4, 11, 20]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 4\r\n\r\n    print(\"Kth element from the given two sorted arrays is:\", find_kth(arr1, arr2, m, n, k))\r\n\r\n\r\n\"\"\"\r\nTIME COMPLEXITY: O(log(m + n))\r\n\r\nIf we reach here, then arrays are not empty and k > 1\r\nIf total number of elements is even, then index of median is (total \/","votes":null},{"text":"\r\n    \r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    elif n == 0:\r\n        return arr1[k - 1]\r\n    elif k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    if m >= n:\r\n        return find_kth(arr1, arr2[1:], m, n - 1, k)\r\n    else:\r\n        return find_kth(arr1[1:], arr2, m - 1, n, k)\r\n\r\n\r\n# Test cases\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 3))  # 3\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 1))  # 1\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 5))  # 5\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 10))  # 9\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 6))  # 5\r\nprint(find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 7))  # 6\r\nprint(find_kth([1, ","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k > m + n:\r\n        return -1\r\n    if m < n:\r\n        return find_kth(arr1, arr2[1:], m, n-1, k-1)\r\n    if n < m:\r\n        return find_kth(arr2, arr1[1:], m-n, n, k-1)\r\n    if arr1[0] <= arr2[0]:\r\n        return find_kth(arr1[1:], arr2, m-1, n, k-1)\r\n    else:\r\n        return find_kth(arr1, arr2[1:], m, n-1, k-1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\n\r","votes":null},{"text":"\r\n\r\n    if m <= 0 or n <= 0:\r\n        return\r\n\r\n    if m == 1 and n > 1:\r\n        return find_kth(arr1, arr2, 0, n-1, k)\r\n\r\n    if n == 1 and m > 1:\r\n        return find_kth(arr1, arr2, m-1, 0, k)\r\n\r\n    if m == 1 and n == 1:\r\n        if arr1[0] <= arr2[0]:\r\n            return arr1[0]\r\n        else:\r\n            return arr2[0]\r\n\r\n    if arr1[m-1] > arr2[n-1]:\r\n        return find_kth(arr1, arr2, m, n-1, k)\r\n\r\n    if arr1[m-1] <= arr2[n-1]:\r\n        if k == m+n-1:\r\n            return arr2[n-1]\r\n        else:\r\n            return find_kth(arr1, arr2, m-1, n, k)\r\n\r\n    if k == m+n-1:\r\n        return arr1[m-1]\r\n    else:\r\n        return find_kth(arr1, arr2, m-1, n, k)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if k > m + n:\r\n        return -1\r\n        \r\n    if m == 0:\r\n        return arr2[k-1]\r\n        \r\n    if n == 0:\r\n        return arr1[k-1]\r\n        \r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n        \r\n    if (m + n) % 2 == 0:\r\n        return (find_kth(arr1, arr2, m, n-1, k\/2) + find_kth(arr1, arr2, m-1, n, k\/2)) \/ 2\r\n    \r\n    return find_kth(arr1, arr2, m, n-1, k\/2) if arr1[k\/2-1] > arr2[k\/2-1] else find_kth(arr1, arr2, m-1, n, k\/2)\r\n\r\n\r\narr1 = [1, 5, 8, 12]\r\narr2 = [3, 6, 9, 15]\r\n\r\nm = len(arr1)\r\nn = len(arr2)\r\n\r\nkth = find_kth(arr1, arr2, m, n, 3)\r\n\r\nprint(kth)","votes":null},{"text":"\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    elif n == 0:\r\n        return arr1[k - 1]\r\n    elif k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if k < (m + n) \/\/ 2:\r\n        return find_kth(arr1, arr2[:k \/\/ 2], m, k \/\/ 2, k)\r\n    else:\r\n        return find_kth(arr1[k \/\/ 2:], arr2[k \/\/ 2:], k \/\/ 2, n - k \/\/ 2, k - (k \/\/ 2))\r\n\r\n\r\nprint(find_kth([1, 3, 5, 7], [2, 4, 6, 8], 4, 4, 3))\r\nprint(find_kth([1, 3], [2, 4, 6, 8], 2, 4, 3))\r\nprint(find_kth([1, 3, 5, 7], [2, 4, 6, 8], 4, 4, 4))\r\nprint(find_kth([2, 4, 6, 8], [1, 3, 5, 7], 4, 4, 4))\r\nprint(find_kth([1, 3, 5, 7], [2, 4, 6, 8], 4, 4, 5))\r\nprint(find_kth([1, 3, 5, 7], [2, 4, 6, 8], 4, 4, 6))\r\nprint(find_kth([1, 3, 5, 7], [2, 4, 6, 8], 4, 4, 7))\r\nprint(find_kth([1, 3, 5, 7], [","votes":null},{"text":"\r\n    return find_kth(arr1, arr2, m, n, 0, 0, k)\r\n\r\n\r","votes":null},{"text":"\r\n    if m < n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    i = min(k \/\/ 2, m)\r\n    j = k - i\r\n\r\n    if arr1[i - 1] < arr2[j - 1]:\r\n        return find_kth(arr1[i:], arr2, m - i, j, k - i)\r\n    elif arr1[i - 1] > arr2[j - 1]:\r\n        return find_kth(arr1, arr2[j:], i, n - j, k - j)\r\n    else:\r\n        return arr1[i - 1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(find_kth([3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 2))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert find_kth([3, 5, 7, 9], [2, 4, 6, 8, 10], 5, 5, 2) == 5\r\n    assert find_kth([1, 3, 5], [2, 4, 6], 3, 3, 2) == 4\r\n    assert find_kth([1, 3, 5], [2, 4, 6], 3, 3, 1) == 3\r\n    assert find_kth([1, 3, 5], [2, 4, 6], 3, 3, 3) == 5\r\n    assert find_kth([1, 3, 5], [2, 4, 6],","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if k > min(m, n):\r\n        return find_kth(arr1, arr2, m, n - m, k - min(m, n))\r\n    if k == 0:\r\n        return 0\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    pos = min(m, k \/\/ 2)\r\n    if arr1[pos] < arr2[k - pos - 1]:\r\n        return find_kth(arr1, arr2, m - pos, n, k - pos)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n - pos, k - pos)\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k > m + n:\r\n        return None\r\n    if m == n:\r\n        if arr1[m - 1] > arr2[n - 1]:\r\n            return find_kth(arr1, arr2[n:], m, n - 1, k)\r\n        else:\r\n            return find_kth(arr1[m:], arr2, m - 1, n, k)\r\n    if m < n:\r\n        return find_kth(arr1[m:], arr2, m, n - 1, k)\r\n    else:\r\n        return find_kth(arr1, arr2[n:], m - 1, n, k)\r\n\r\narr1 = [1, 4, 6, 9, 12, 16, 19, 21, 23, 24, 26, 28, 30, 32, 34, 36, 38, 40]\r\narr2 = [2, 5, 8, 10, 13, 15, 17, 19, 20, 22, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 48, 50, 52, 54, 56,\r\n        58, 60, 62, 64, 66]\r\nk = 18\r\nm","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k == m + n:\r\n        return max(arr1[m-1], arr2[n-1])\r\n    if k <= m:\r\n        return find_kth(arr1, arr2, m, k\/\/2, k)\r\n    return find_kth(arr1, arr2, m + n - k, k - m, k)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 3, 5, 7, 9]\r\n    arr2 = [2, 4, 6, 8, 10]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n   ","votes":null},{"text":"\r\n    # base case\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    elif n == 0:\r\n        return arr1[k - 1]\r\n    \r\n    # if k is 1\r\n    elif k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    # if k is greater than 1\r\n    else:\r\n        # find median of arr1 and arr2\r\n        median1 = arr1[m \/\/ 2 - 1]\r\n        median2 = arr2[n \/\/ 2 - 1]\r\n        \r\n        # if median of arr1 is smaller than median of arr2\r\n        if median1 < median2:\r\n            return find_kth(arr1, arr2[n \/\/ 2:], m, n - n \/\/ 2, k - n \/\/ 2)\r\n        \r\n        # if median of arr1 is greater than median of arr2\r\n        elif median1 > median2:\r\n            return find_kth(arr1[m \/\/ 2:], arr2, m - m \/\/ 2, n, k - m \/\/ 2)\r\n        \r\n        # if median of arr1 is equal to median of arr2\r\n        else:\r\n            return median1\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 2, 3, 4, 5, 6, 7]\r\n    arr2 = [9, 10, 11, 12, 13, 14, 15]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 6\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n    \r\n    arr1 = [1, 2, 4, 5, 6, 7]\r\n    arr2 = [9, 10","votes":null},{"text":"\r\n    \r\n    if k == 0:\r\n        return 0\r\n    \r\n    if m <= 0 and n > 0:\r\n        return arr2[k-1]\r\n    if n <= 0 and m > 0:\r\n        return arr1[k-1]\r\n    \r\n    if arr1[m-1] >= arr2[n-1]:\r\n        return find_kth(arr1, arr2, m-1, n, k)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n-1, k-m)\r\n\r\n\r","votes":null},{"text":"\r\n    if k > m+n:\r\n        return -1\r\n    elif k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    elif k <= m:\r\n        return find_kth(arr1[1:], arr2, m-1, n, k-1)\r\n    else:\r\n        return find_kth(arr1, arr2[1:], m, n-1, k-m-1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n# Output: 11\r\n# Explanation:","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    elif n == 0:\r\n        return arr1[k - 1]\r\n    else:\r\n        if k == 1:\r\n            return min(arr1[m - 1], arr2[n - 1])\r\n        elif k == m + n:\r\n            return max(arr1[m - 1], arr2[n - 1])\r\n        else:\r\n            if m > n:\r\n                return find_kth(arr1, arr2, m - 1, n, k - 1)\r\n            else:\r\n                return find_kth(arr1, arr2, m, n - 1, k - 1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 3, 5, 7, 9]\r\n    arr2 = [2, 4, 6, 8, 10]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 3, 5, 7, 9, 11, 13, 15]\r\n    arr2 = [2, 4, 6, 8, 10]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 6\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 3, 5, 7, 9, 11, 13, 15]\r\n    arr2 = [2, 4, 6, 8, 10, 12, 14, 16]\r\n    m = len(arr1)\r\n    n ","votes":null},{"text":"\r\n    if m == 0 or n == 0:\r\n        return -1\r\n\r\n    if n < m:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n\r\n    if k == 1:\r\n        return min(arr1[m - 1], arr2[n - 1])\r\n\r\n    # we need kth element from the array with more elements\r\n    if m <= n:\r\n        return find_kth(arr1, arr2, m, n - 1, k - 1)\r\n\r\n    return find_kth(arr1, arr2, m - 1, n, k - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    # If k is less than or equal to zero return -1\r\n    if k <= 0:\r\n        return -1\r\n    # If either of the arrays is empty return -1\r\n    if m == 0 or n == 0:\r\n        return -1\r\n    # If k is greater than m + n return -1\r\n    if k > m + n:\r\n        return -1\r\n    # If k is greater than m then return kth element from the first array\r\n    if k > m:\r\n        return find_kth(arr2, arr1[1:], m, n - 1, k - m)\r\n    # If k is greater than n then return kth element from the second array\r\n    if k > n:\r\n        return find_kth(arr1, arr2[1:], m - 1, n, k - n)\r\n    # If k is less than or equal to m then return kth element from the first array\r\n    if k <= m:\r\n        return arr1[k - 1]\r\n    # If k is less than or equal to n then return kth element from the second array\r\n    if k <= n:\r\n        return arr2[k - 1]\r\n\r\n\r\n# Takes two lists and returns the kth smallest element\r\n\r\n\r","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k > m:\r\n        return find_kth(arr2, arr1[m:], m, n - m, k - m)\r\n    if k <= m:\r\n        return find_kth(arr1, arr2[:k - 1], m - 1, n, k)\r\n    \r\n\r\narr1 = [2, 4, 5, 7, 9]\r\narr2 = [1, 3, 4, 6, 8, 9, 1","votes":null},{"text":"\r\n    # Merge two array and find the kth smallest element\r\n    # Time Complexity: O(m+n)\r\n    # Space Complexity: O(m+n)\r\n    \r\n    # Merge the two arrays\r\n    arr = [None] * (m + n)\r\n    i, j, k = 0, 0, 0\r\n    while i < m and j < n:\r\n        if arr1[i] <= arr2[j]:\r\n            arr[k] = arr1[i]\r\n            i += 1\r\n        else:\r\n            arr[k] = arr2[j]\r\n            j += 1\r\n        k += 1\r\n    while i < m:\r\n        arr[k] = arr1[i]\r\n        i += 1\r\n        k += 1\r\n    while j < n:\r\n        arr[k] = arr2[j]\r\n        j += 1\r\n        k += 1\r\n    \r\n    # Find the kth element\r\n    k -= 1\r\n    return arr[k]\r\n\r\n\r\n# Testing\r\narr1 = [3, 4, 5, 6, 7, 8, 9]\r\narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 5\r\nprint(\"Find the kth element from the given two sorted arrays\")\r\nprint(\"arr1 =\", arr1)\r\nprint(\"arr2 =\", arr2)\r\nprint(\"The kth element is:\", find_kth(arr1, arr2, m, n, k))\r\n\r\n\r","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if k <= 0:\r\n        return None\r\n\r\n    if k > m + n:\r\n        return None\r\n\r\n    if k > m:\r\n        return find_kth(arr2, arr1, n, m, k - m)\r\n\r\n    return arr1[k - 1]\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if m >= n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    \r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    if k % 2 == 0:\r\n        return find_kth(arr1, arr2, m, n, k \/\/ 2) + find_kth(arr1, arr2, m, n, k \/\/ 2 + 1)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n, k \/\/ 2)\r\n\r","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k > m:\r\n        return find_kth(arr2, arr1[m:], n-m, m, k-m)\r\n    if k == m:\r\n        return min(arr1[m-1], arr2[0])\r\n    if k <= m + n:\r\n        return min(arr1[k-1], arr2[k-m-1])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 7, 11, 15]\r\n    arr2 = [2, 5, 9, 12, 14]\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 1))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 2))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 5))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 3))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 4))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 6))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 10))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 30))\r\n    print(find_kth(ar","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if m == 0 or n == 0 or k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if m >= n:\r\n        return find_kth(arr1[1:], arr2, m - 1, n, k - 1)\r\n    else:\r\n        return find_kth(arr1, arr2[1:], m, n - 1, k - 1)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    i = 0\r\n    j = 0\r\n    while i < m and j < n:\r\n        if arr1[i] < arr2[j]:\r\n            i += 1\r\n        elif arr1[i] > arr2[j]:\r\n            j += 1\r\n        else:\r\n            if k == 1:\r\n                return arr1[i]\r\n            i += 1\r\n            j += 1\r\n            k -= 1\r\n    \r\n    if i < m:\r\n        while i < m and k > 0:\r\n            if k == 1:\r\n                return arr1[i]\r\n            i += 1\r\n            k -= 1\r\n    else:\r\n        while j < n and k > 0:\r\n            if k == 1:\r\n                return arr2[j]\r\n            j += 1\r\n            k -= 1\r\n    \r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 5, 7, 9, 11]\r\n    arr2 = [2, 4, 6, 8, 10, 12, 14, 15, 16]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 7\r\n    \r\n    print(\"7th element in array1 is: \" + str(find_kth(arr1, arr2, m, n, k)))\r\n    \r\n    k = 8\r\n    print(\"8th element in array1 is: \" + str(find_kth(arr1, arr2, m, n, k)))\r\n    \r\n    k = 1\r\n    print(\"1st element in array1 is: \" + str(find_kth(arr1, arr2, m, n, k)))\r\n    \r\n    k = 6\r\n    print(\"6th elemen","votes":null},{"text":"\r\n    \r\n    # If m > n, then m - n is greater than 0\r\n    # If m < n, then -1 is greater than 0\r\n    \r\n    # If m > n, then m - n is greater than 0\r\n    # If m < n, then -1 is greater than 0\r\n    \r\n    if m >= n:\r\n        return find_kth(arr1, arr2, m - n, n, k)\r\n    \r\n    return arr1[m] if k == m + 1 else find_kth(arr1, arr2, m, n - m - 1, k - m - 1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\r\n    arr2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\r\n    \r\n    m = len(arr1)\r\n    n = len(arr2)\r\n\r\n    # 9\r\n    print(find_kth(arr1, arr2, m, n, 9))\r\n\r\n    # 10\r\n    print(find_kth(arr1, arr2, m, n, 10))\r\n\r\n    # 11\r\n    print(find_kth(arr1, arr2, m, n, 11))\r\n\r\n    # 12\r\n    print(find_kth(arr1, arr2, m, n, 12))\r\n\r\n    # 13\r\n    print(find_kth(arr1, arr2, m, n, 13))\r\n\r\n    # 14\r\n    print(find_kth(arr1, arr2, m, n, 14))\r","votes":null},{"text":"\r\n    if m == 0 or n == 0:\r\n        return None\r\n    \r\n    if k > m + n:\r\n        return None\r\n    \r\n    if k <= m:\r\n        return find_kth(arr1, arr2[1:], m, n-1, k)\r\n    \r\n    if k <= m + n:\r\n        return find_kth(arr1[1:], arr2, m-1, n, k-m)\r\n\r\n\r\n\r\narr1 = [1, 3, 5, 7]\r\narr2 = [2, 4, 6, 8, 10]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 4\r\n\r\n\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k%2 == 0:\r\n        return find_kth(arr1, arr2, m, n-1, k\/2)\r\n    else:\r\n        return find_kth(arr1, arr2, m-1, n, k-1)\r\n\r\n\r\narr1 = [1, 3, 5, 7]\r\narr2 = [2, 4, 6, 8]\r\nm = 4\r\nn = 4\r\nk = 5\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\narr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\r\nm = 10\r\nn = 10\r\nk = 5\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\narr1 = [1, 2, 3, 4]\r\narr2 = [5, 6, 7, 8]\r\nm = 4\r\nn = 4\r\nk = 7\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\narr1 = [1, 2, 3, 4]\r\narr2 = [5, 6, 7, 8]\r\nm = 4\r\nn = 4\r\nk = 3\r\nprint(find_kth(arr","votes":null},{"text":"\r\n    \r\n    # Base Case\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    \r\n    # Recursive Case\r\n    mid = (m + n) \/\/ 2\r\n    if k <= mid:\r\n        return find_kth(arr1, arr2, m, mid, k)\r\n    else:\r\n        return find_kth(arr1, arr2, mid, n, k - mid)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    arr1 = [1, 5, 12, 26, 30, 75","votes":null},{"text":"\r\n\r\n    if k > m + n:\r\n        return False\r\n\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if k == m + n:\r\n        return max(arr1[m - 1], arr2[n - 1])\r\n\r\n    if k <= int(m \/ 2):\r\n        return find_kth(arr1, arr2, m, int(n \/ 2), k)\r\n    else:\r\n        return find_kth(arr1, arr2, int(m \/ 2), n, k - int(m \/ 2) - 1)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 5, 10, 20, 30]\r\n    arr2 = [","votes":null},{"text":"\r\n    # Base Case\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    # Check kth element of both the arrays\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if arr1[m - 1] <= arr2[n - 1]:\r\n        return find_kth(arr1, arr2[n:], m, n - 1, k - 1)\r\n    else:\r\n        return find_kth(arr1[m:], arr2, m - 1, n, k - 1)\r\n\r\n\r\narr1 = [1, 5, 9, 10, 15, 20]\r\narr2 = [2, 3, 8, 13]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 5\r\n\r\nprint(\"The kth element is\", find_kth(arr1, arr2, m, n, k))\r\n","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    elif n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if k % 2 == 0:\r\n        return find_kth(arr1, arr2, m, n - 1, k \/\/ 2)\r\n    else:\r\n        return find_kth(arr1, arr2, m - 1, n, k \/\/ 2 + 1)\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 5, 12, 18, 20, 22, 23, 27, 30, 35, 37, 41, 47, 49, 51, 52, 56, 60, 63, 65, 67, 70, 71, 75]\r\n    arr2 = [2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 24, 25, 26, 28, 29, 31, 32, 33, 34, 36, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 61, 62, 64, 66, 68, 69, 72, 73, 74, 76, 77, 78","votes":null},{"text":"\r\n    # If we are left with one of the array\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    # If k is 1\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    # If k is greater than the length of the array\r\n    if k > m + n:\r\n        return -1\r\n\r\n    # If k is smaller than m + n\r\n    if k <= m:\r\n        return find_kth(arr1, arr2, m - 1, n, k)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n - 1, k - m)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1, arr2 = list(map(int, input().rstrip().split())), list(map(int, input().rstrip().split()))\r\n    m, n, k = int(input().strip()), int(input().strip()), int(input().strip())\r\n\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n","votes":null},{"text":"\r\n    \r\n    # Initialize the variables for storing the smaller and larger arrays\r\n    smaller_arr = None\r\n    larger_arr = None\r\n    \r\n    # Initialize the variables for storing the index of the smaller and larger arrays\r\n    smaller_arr_index = 0\r\n    larger_arr_index = 0\r\n    \r\n    # Initialize the variables for storing the sum of the smaller and larger arrays\r\n    smaller_arr_sum = 0\r\n    larger_arr_sum = 0\r\n    \r\n    # Check if the first element of the first array is smaller than the first element of the second array\r\n    if arr1[0] < arr2[0]:\r\n        # Initialize the variables for storing the smaller and larger arrays\r\n        smaller_arr = arr1\r\n        larger_arr = arr2\r\n        \r\n        # Initialize the variables for storing the index of the smaller and larger arrays\r\n        smaller_arr_index = 0\r\n        larger_arr_index = 0\r\n        \r\n        # Initialize the variables for storing the sum of the smaller and larger arrays\r\n        smaller_arr_sum = arr1[0]\r\n        larger_arr_sum = arr2[0]\r\n        \r\n    else:\r\n        # Initialize the variables for storing the smaller and larger arrays\r\n        smaller_arr = arr2\r\n        larger_arr = arr1\r\n        \r\n        # Initialize the variables for storing the index of the smaller and larger arrays\r\n        smaller_arr_index = 0\r\n        larger_arr_index = 0\r\n        \r\n        # Initialize the variables for storing the sum of the smaller and larger arrays\r\n        smaller_arr_sum = arr2[0]\r\n        larger_arr_sum = arr1[0]\r\n        \r\n    # Iterate till the sum of the smaller and larger arrays is less than the kth element\r\n    while (smaller_arr_sum + larger_arr_sum) < k:\r\n        if smaller_arr_index == m:\r\n            return ","votes":null},{"text":"\r\n\r\n    if (k == 1):\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if (m == 0):\r\n        return arr2[k - 1]\r\n\r\n    if (n == 0):\r\n        return arr1[k - 1]\r\n\r\n    if (k == 1):\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if (k < m + n):\r\n        if (k < m):\r\n            return find_kth(arr1, arr2[1:], m - 1, n, k)\r\n        if (k > m):\r\n            return find_kth(arr1[1:], arr2, n - 1, m, k - m)\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Merge the two arrays into one.\r\n    arr = [0] * (m + n)\r\n    i = 0\r\n    j = 0\r\n    k = 0\r\n\r\n    while i < m and j < n:\r\n        if arr1[i] < arr2[j]:\r\n            arr[k] = arr1[i]\r\n            i += 1\r\n        else:\r\n            arr[k] = arr2[j]\r\n            j += 1\r\n        k += 1\r\n\r\n    while i < m:\r\n        arr[k] = arr1[i]\r\n        i += 1\r\n        k += 1\r\n\r\n    while j < n:\r\n        arr[k] = arr2[j]\r\n        j += 1\r\n        k += 1\r\n\r\n    return arr[k - 1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 5, 12, 26]\r\n    arr2 = [2, 13, 17, 28]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 5, 12, 26]\r\n    arr2 = [2, 13, 17, 28]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 28\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 5, 12, 26]\r\n    arr2 = [2, 13, 17, 28]\r\n    m = len(arr1)\r\n    n = len(arr2)","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if k <= 0:\r\n        return None\r\n\r\n    # If k is greater than number of elements in the array\r\n    if k > m + n:\r\n        return None\r\n\r\n    # If k is greater than number of elements in the array\r\n    if k > m + n:\r\n        return None\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    # if k is greater than number of elements in the array\r\n    if k > m:\r\n        return arr2[k - m - 1]\r\n\r\n    # if k is greater than number of elements in the array\r\n    if k > n:\r\n        return arr1[k - n - 1]\r\n\r\n    # if k is greater than number of elements in the array\r\n    if m == 1:\r\n        return arr1[0]\r\n\r\n    if n == 1:\r\n        return arr2[0]\r\n\r\n    # if k is greater than number of elements in the array\r\n    if m == 2:\r\n        return arr1[0] if arr1[0] < arr2[0] else arr2[0]\r\n\r\n    # if k is greater than number of elements in the array\r\n    if n == 2:\r\n        return arr1[0] if arr1[0] < arr2[0] else arr2[0]\r\n\r\n    # If we reach here, it means that k is less than\r\n    # number of elements in the array\r\n    i = min(m, k \/\/ 2)\r\n    j = min(n, k - i)\r\n\r\n    # If elements at mid are equal then we need to\r\n    # find mid element in the left half of array\r","votes":null},{"text":"\r\n    i, j = 0, 0\r\n    while i < m and j < n:\r\n        if arr1[i] < arr2[j]:\r\n            i += 1\r\n        elif arr1[i] > arr2[j]:\r\n            j += 1\r\n        else:\r\n            i += 1\r\n            j += 1\r\n            k -= 1\r\n    if i == m:\r\n        while j < n:\r\n            arr1.append(arr2[j])\r\n            j += 1\r\n            k -= 1\r\n    else:\r\n        while i < m:\r\n            arr2.append(arr1[i])\r\n            i += 1\r\n            k -= 1\r\n    return arr1[k - 1]\r\n\r\n\r","votes":null},{"text":"\r\n    # check if the kth element is in the one of the arrays\r\n    if k <= m:\r\n        return arr1[k - 1]\r\n    elif k <= m + n:\r\n        return arr2[k - m - 1]\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k > m:\r\n        return find_kth(arr2, arr1, n, m-1, k-m)\r\n\r\n    i = min(k\/\/2, m)\r\n    j = min(k-i, n)\r\n    \r\n    if arr1[i-1] <= arr2[j-1]:\r\n        return find_kth(arr1, arr2, i, n, k-i)\r\n    else:\r\n        return find_kth(arr1, arr2, m, j, k-j)\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0 or n == 0:\r\n        return None\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if m > n:\r\n        return find_kth(arr1, arr2[1:], m, n - 1, k - 1)\r\n    elif m < n:\r\n        return find_kth(arr1[1:], arr2, m - 1, n, k - 1)\r\n\r\n    # If m and n are equal\r\n    if arr1[0] > arr2[0]:\r\n        return find_kth(arr1, arr2[1:], m, n - 1, k - 1)\r\n    elif arr1[0] < arr2[0]:\r\n        return find_kth(arr1[1:], arr2, m - 1, n, k - 1)\r\n    else:\r\n        return arr1[0]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 5, 7, 8, 9]\r\n    arr2 = [2, 4, 6, 8, 10]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n    print(f\"The {k}th smallest element is {find_kth(arr1, arr2, m, n, k)}\")\r\n\r\n\r\n# Time Complexity: O(log(m+n))\r\n# Space Complexity: O(1)\r\n\r\n\r\n# test cases\r\nprint(f\"The 1st smallest element is {find_kth([1, 3, 5, 7, 8, 9], [2, 4, 6, 8, 10], 6, 5, 1)}\")\r\nprint(f\"The 2nd smallest element is {find_kt","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = min(m, k \/\/ 2)\r\n    j = k - i\r\n\r\n    if arr1[i - 1] < arr2[j - 1]:\r\n        return find_kth(arr1, arr2[j:], m, n - j, k - j)\r\n    else:\r\n        return find_kth(arr1[i:], arr2, m - i, n, k - i)\r\n\r\n\r","votes":null},{"text":"\r\n    # If one array is empty, then the answer is the other array.\r\n    if m == 0 or n == 0:\r\n        return None\r\n    # If kth is out of bound, then the answer is None.\r\n    if k > m + n:\r\n        return None\r\n    # If kth is in the range, then compare kth element of both arrays\r\n    # and return the smaller one.\r\n    if k <= m:\r\n        return arr1[k - 1]\r\n    if k <= m + n:\r\n        return arr2[k - m - 1]\r\n\r\n\r\n# Main function to test above function\r\narr1 = [1, 3, 5, 7, 9]\r\narr2 = [2, 4, 6, 8, 10]\r\nm = 5\r\nn = 5\r\nk = 3\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\n# Time Complexity: O(log(min(m, n)))\r\n# Space Complexity: O(1)\r\n\r\n\r","votes":null},{"text":"\r\n    if k <= m:\r\n        return arr1[k - 1]\r\n    elif k > m:\r\n        return arr2[k - m - 1]\r\n\r\n\r","votes":null},{"text":"\r\n    if m <= 0:\r\n        return arr2[k-1]\r\n    if n <= 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    p1 = min(m, k\/\/2)\r\n    p2 = k - p1\r\n    p = min(arr1[p1-1], arr2[p2-1])\r\n\r\n    if p < arr1[p1-1]:\r\n        return find_kth(arr1[p1:], arr2, m-p1, n, p2)\r\n    else:\r\n        return find_kth(arr1, arr2[p2:], m, n-p2, p1)\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # If k is greater than m+n\r\n    if k > m + n:\r\n        return -1\r\n\r\n    # If k is greater than m\r\n    if k > m:\r\n        return find_kth(arr2, arr1, n, m, k - m)\r\n\r\n    # If k is greater than n\r\n    if k > n:\r\n        return find_kth(arr1, arr2, m, n, k - n)\r\n\r\n    # If both arrays have at least k elements\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    # If k is smaller than m and n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    # If k is greater than 1\r\n    return min(arr1[k \/\/ 2 - 1], arr2[k \/\/ 2 - 1])\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = min(m, k \/\/ 2)\r\n    j = min(n, k - i)\r\n\r\n    p1 = arr1[i - 1] if i > 0 else float(\"-inf\")\r\n    p2 = arr2[j - 1] if j > 0 else float(\"-inf\")\r\n\r\n    if p1 <= p2:\r\n        return find_kth(arr1, arr2[j:], m, n - j, k - j)\r\n    else:\r\n        return find_kth(arr1[i:], arr2, m - i, n, k - i)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k > m + n:\r\n        return None\r\n    \r\n    # find the average of the middle element of both the arrays\r\n    mid1 = (m - 1) \/\/ 2\r\n    mid2 = (n - 1) \/\/ 2\r\n    avg1 = arr1[mid1]\r\n    avg2 = arr2[mid2]\r\n    \r\n    # if the average of both the arrays are same, return the average\r\n    if avg1 == avg2:\r\n        return avg1\r\n    \r\n    # if the average of first array is less than the average of second array\r\n    elif avg1 < avg2:\r\n        return find_kth(arr1, arr2[mid2 + 1:], m, n - mid2 - 1, k - mid2 - 1)\r\n    else:\r\n        return find_kth(arr1[mid1 + 1:], arr2, m - mid1 - 1, n, k - mid1 - 1)\r\n\r\n\r\narr1 = [1, 3, 8, 10, 15]\r\narr2 = [2, 4, 9, 11, 16]\r\nk = 3\r\n\r\nprint(find_kth(arr1, arr2, len(arr1), len(arr2), k))\r\n\r\n# In case you are not familiar with recursion, here is the iterative implementation\r","votes":null},{"text":"\r\n    i, j = 0, 0\r\n    while i < m and j < n:\r\n        if arr1[i] < arr2[j]:\r\n            i += 1\r\n        elif arr1[i] > arr2[j]:\r\n            j += 1\r\n        else:\r\n            if k == 1:\r\n                return arr1[i]\r\n            k -= 1\r\n            i += 1\r\n            j += 1\r\n    if i == m:\r\n        while j < n and k > 0:\r\n            if k == 1:\r\n                return arr2[j]\r\n            k -= 1\r\n            j += 1\r\n    else:\r\n        while i < m and k > 0:\r\n            if k == 1:\r\n                return arr1[i]\r\n            k -= 1\r\n            i += 1\r\n    return -1\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 5, 8, 9, 12]\r\n    arr2 = [2, 3, 4, 6, 7, 10, 11, 13]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 4\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 5, 8, 9, 12]\r\n    arr2 = [2, 3, 4, 6, 7, 10, 11, 13]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 10\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 5, 8, 9, 12]\r\n    arr","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    new_m = min(m, k\/\/2)\r\n    new_n = min(n, k-new_m)\r\n    new_k = k - new_m\r\n\r\n    if arr1[new_m-1] <= arr2[new_n-1]:\r\n        return find_kth(arr1, arr2[new_n:], m, n-new_n, new_k)\r\n    else:\r\n        return find_kth(arr1[new_m:], arr2, m-new_m, n, new_k)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 4, 5, 7, 8, 11, 12, 15, 16]\r\n    arr2 = [2, 3, 6, 9, 10, 13, 14]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 10\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n","votes":null},{"text":"\r\n\r\n    # If both array are empty return None\r\n    if m == 0 and n == 0:\r\n        return None\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    # Find the middle of the two arrays\r\n    mid1 = int(m \/ 2)\r\n    mid2 = int(n \/ 2)\r\n\r\n    # Find the middle elements of the two arrays\r\n    element1 = arr1[mid1]\r\n    element2 = arr2[mid2]\r\n\r\n    # If the middle element of the first array is smaller than the middle element of the second array\r\n    # then the kth element is present in the first array\r\n    if element1 < element2:\r\n        return find_kth(arr1, arr2, mid1 + 1, n, k - mid1 - 1)\r\n\r\n    # If the middle element of the first array is greater than the middle element of the second array\r\n    # then the kth element is present in the second array\r\n    else:\r\n        return find_kth(arr1, arr2, m, mid2 + 1, k - mid2 - 1)\r\n\r\n\r\nif __name__ == '__main__':\r\n\r\n    arr1 = [8, 10, 12]\r\n    arr2 = [1, 3, 5, 7, 9]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = []\r\n    arr2 = [1, 3, 5, 7, 9]\r\n    m = 0\r\n    n = len(arr2)\r\n    k = 1\r\n\r\n    print(find","votes":null},{"text":"\r\n    # Your code here\r\n    i = 0\r\n    j = 0\r\n    while i < m and j < n:\r\n        if arr1[i] < arr2[j]:\r\n            i += 1\r\n        elif arr1[i] > arr2[j]:\r\n            j += 1\r\n        else:\r\n            return arr1[i]\r\n    if i < m:\r\n        return arr1[i]\r\n    elif j < n:\r\n        return arr2[j]\r\n    else:\r\n        return None\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    mid1 = (m + n + 1) \/\/ 2\r\n    mid2 = k - mid1\r\n\r\n    # If kth element is smaller than mid1\r\n    if arr1[mid1 - 1] <= arr2[mid2 - 1]:\r\n        return find_kth(arr1, arr2, mid1 - 1, n, k)\r\n\r\n    # If kth element is larger than mid1\r\n    return find_kth(arr1, arr2, m, mid2 - 1, k)\r\n\r\n\r\narr1 = [1, 5, 9","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    if arr1[m-1] < arr2[n-1]:\r\n        return find_kth(arr1, arr2, m-1, n, k)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n-1, k-m)\r\n\r\n\r","votes":null},{"text":"\r\n    # Base Case\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    # If k is smaller than the combined length of the two arrays\r\n    if k < m + n:\r\n\r\n        # If k is smaller than m, then kth element is from arr1\r\n        if k <= m:\r\n            return arr1[k - 1]\r\n\r\n        # If k is greater than m, then kth element is from arr2\r\n        else:\r\n            return arr2[k - m - 1]\r\n\r\n    # If k is greater than or equal to the combined length of the two arrays\r\n    else:\r\n        return -1\r\n\r\n\r\n# Driver program to test above function\r\narr1 = [1, 5, 9, 10, 15, 20]\r\narr2 = [2, 3, 8, 13]\r\n\r\nprint(find_kth(arr1, arr2, 6, 4, 5))\r\nprint(find_kth(arr1, arr2, 6, 4, 1))\r\nprint(find_kth(arr1, arr2, 6, 4, 6))\r\nprint(find_kth(arr1, arr2, 6, 4, 10))\r\nprint(find_kth(arr1, arr2, 6, 4, 11))\r\nprint(find_kth(arr1, arr2, 6, 4, 16))\r\nprint(find_kth(arr1, arr2, 6, 4, 17))\r\nprint(find_kth(arr1, arr2, 6, 4, 18))\r\nprint(find_kth(arr1, arr2, 6, 4, 19))\r\nprin","votes":null},{"text":"\r\n    \r\n    # base case\r\n    if (m == 0):\r\n        return arr2[k-1]\r\n    elif (n == 0):\r\n        return arr1[k-1]\r\n\r\n    # find kth element\r\n    if (arr1[m-1] > arr2[n-1]):\r\n        return find_kth(arr1, arr2, m-1, n, k)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n-1, k-1)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n\r\n    if m > n:\r\n        return find_kth(arr1, arr2, m-1, n, k-1)\r\n    else:\r\n        return find_kth(arr1, arr2, m, n-1, k-1)\r\n\r\n\r","votes":null},{"text":"\r\n    # Base Case\r\n    if m < 0 or n < 0 or k == 0:\r\n        return None\r\n    # if k is greater than the sum of the lengths of the two arrays\r\n    elif k > m + n:\r\n        return None\r\n    # if m = 0, kth element is from the second array\r\n    elif m == 0:\r\n        return arr2[n - k]\r\n    # if n = 0, kth element is from the first array\r\n    elif n == 0:\r\n        return arr1[m - k]\r\n    # if k is greater than the sum of the lengths of the two arrays\r\n    elif k > m + n:\r\n        return None\r\n    # if k is greater than the sum of the lengths of the two arrays\r\n    elif k > m + n:\r\n        return None\r\n    # if k is greater than the sum of the lengths of the two arrays\r\n    elif k > m + n:\r\n        return None\r\n    # if k is greater than the sum of the lengths of the two arrays\r\n    elif k > m + n:\r\n        return None\r\n    # if k is greater than the sum of the lengths of the two arrays\r\n    elif k > m + n:\r\n        return None\r\n    # else if k is less than the sum of the lengths of the two arrays\r\n    else:\r\n        if arr1[m - 1] > arr2[n - 1]:\r\n            return find_kth(arr1, arr2, m, n - 1, k)\r\n        elif arr1[m - 1] < arr2[n - 1]:\r\n            return find_kth(arr1, arr2, m - 1, n, k)\r\n        else:\r\n            return arr1[m - 1]\r\n\r\n\r\n# test cases\r\narr1 = [1, 5, 9, 10, 15, 20]\r\narr2 ","votes":null},{"text":"\r\n    # code here\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k > m + n:\r\n        return None\r\n    if m > n:\r\n        return find_kth(arr1, arr2[1:], m, n - 1, k - 1)\r\n    else:\r\n        return find_kth(arr1[1:], arr2, m - 1, n, k - 1)\r\n\r\n\r\narr1 = [1, 5, 8, 12]\r\narr2 = [2, 3, 4, 10, 11, 13]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 5\r\nprint(find_kth(arr1, arr2, m, n, k))\r\narr1 = [1, 3, 5, 7]\r\narr2 = [2, 4, 6, 8, 9, 10]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 4\r\nprint(find_kth(arr1, arr2, m, n, k))\r\narr1 = [1, 5, 7, 9]\r\narr2 = [2, 4, 6, 8, 10]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 5\r\nprint(find_kth(arr1, arr2, m, n, k))\r\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15","votes":null},{"text":"\r\n    while m > 0 and n > 0:\r\n        if arr1[m - 1] > arr2[n - 1]:\r\n            # arr2 is smaller\r\n            n -= 1\r\n        else:\r\n            m -= 1\r\n        k -= 1\r\n\r\n    if m == 0:\r\n        # arr2 is smaller\r\n        return arr2[n - k]\r\n    elif n == 0:\r\n        return arr1[m - k]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 5, 9, 10, 15, 20]\r\n    arr2 = [2, 3, 8, 13]\r\n    print(\"kth element:\", find_kth(arr1, arr2, len(arr1), len(arr2), 4))\r\n\r\n    arr1 = [1, 5, 9, 10, 15, 20]\r\n    arr2 = [2, 3, 8, 13, 14, 20]\r\n    print(\"kth element:\", find_kth(arr1, arr2, len(arr1), len(arr2), 9))\r\n\r\n    arr1 = [1, 5, 9, 10, 15, 20]\r\n    arr2 = [2, 3, 8, 13, 14, 20]\r\n    print(\"kth element:\", find_kth(arr1, arr2, len(arr1), len(arr2), 10))\r\n\r\n    arr1 = [1, 5, 9, 10, 15, 20]\r\n    arr2 = [2, 3, 8, 13, 14, 20]\r\n    print(\"kth element:\", find_kth(arr1, arr2","votes":null},{"text":"\r\n    \r\n    i = 0\r\n    j = 0\r\n    while (i < m and j < n):\r\n        if arr1[i] < arr2[j]:\r\n            i += 1\r\n        elif arr1[i] > arr2[j]:\r\n            j += 1\r\n        else:\r\n            if (i + j + 1) == k:\r\n                return arr1[i]\r\n            elif (i + j + 1) < k:\r\n                i += 1\r\n            else:\r\n                j += 1\r\n    \r\n    if i == m:\r\n        return arr2[j + k - 1 - m]\r\n    elif j == n:\r\n        return arr1[i + k - 1 - j]\r\n\r\n\r","votes":null},{"text":"\r\n    # Base case\r\n    if (m < 0) or (n < 0) or (k < 0):\r\n        return\r\n    # If k is greater than m\r\n    if m == 0:\r\n        return arr2[n - 1]\r\n    # If k is greater than n\r\n    if n == 0:\r\n        return arr1[m - 1]\r\n    # If k is greater than m and greater than n\r\n    if m > k and n > k:\r\n        return\r\n    # If k is greater than n and greater than m\r\n    if n > k and m > k:\r\n        return\r\n    # If k is greater than m, then k is greater than n\r\n    if m < k:\r\n        return find_kth(arr1, arr2, m, n - 1, k - m)\r\n    # If k is greater than n, then k is greater than m\r\n    return find_kth(arr1, arr2, m - 1, n, k - n)\r\n\r\n\r","votes":null},{"text":"\r\n    if m < n:\r\n        l, r = 0, m\r\n    else:\r\n        l, r = 0, n\r\n    while l <= r:\r\n        mid1 = (l + r) \/\/ 2\r\n        mid2 = k - mid1\r\n        if mid2 < 0:\r\n            r = mid1 - 1\r\n        elif mid2 >= n:\r\n            l = mid1 + 1\r\n        else:\r\n            if arr1[mid1] < arr2[mid2]:\r\n                l = mid1 + 1\r\n            elif arr1[mid1] > arr2[mid2]:\r\n                r = mid1 - 1\r\n            else:\r\n                return arr1[mid1]\r\n    return None\r\n\r\n\r","votes":null},{"text":"\r\n    if n > m:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    # k is greater than 1\r\n\r\n    # find the middle elements of two arrays\r\n    mid_element_1 = arr1[int(m \/ 2)]\r\n    mid_element_2 = arr2[int(n \/ 2)]\r\n\r\n    # if mid_element_1 is smaller than mid_element_2 then the kth element\r\n    # must be in the first half of the first array\r\n    if mid_element_1 < mid_element_2:\r\n        k = k - int(m \/ 2)\r\n        return find_kth(arr1, arr2, m, int(n \/ 2), k)\r\n\r\n    # if mid_element_1 is greater than mid_element_2 then the kth element\r\n    # must be in the second half of the second array\r\n    k = k - int(n \/ 2)\r\n    return find_kth(arr1, arr2, int(m \/ 2), n, k)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 2, 3, 4, 5]\r\n    arr2 = [6, 7, 8, 9, 10]\r\n    k = 5\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    print(f\"The kth element is {find_kth(arr1, arr2, m, n, k)}\")\r\n\r\n\"\"\"\r\nTime Complexity: O(log(m+n))\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\n\r\nEnter the first array: 1 2 3 4 5\r","votes":null},{"text":"\r\n    k_th_element = []\r\n    i = 0\r\n    j = 0\r\n    while k > 0:\r\n        if i == m:\r\n            k_th_element.append(arr2[j])\r\n            j += 1\r\n            k -= 1\r\n        elif j == n:\r\n            k_th_element.append(arr1[i])\r\n            i += 1\r\n            k -= 1\r\n        elif arr1[i] < arr2[j]:\r\n            k_th_element.append(arr1[i])\r\n            i += 1\r\n            k -= 1\r\n        else:\r\n            k_th_element.append(arr2[j])\r\n            j += 1\r\n            k -= 1\r\n    return k_th_element\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    arr2 = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 10\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n\"\"\"Another way to do it is by using the merge function from merge sort.\r","votes":null},{"text":"\r\n\r\n    if m < n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    elif m == n == 0:\r\n        return\r\n    elif k <= 0:\r\n        return\r\n    elif k > m + n:\r\n        return\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    elif k <= m:\r\n        return arr1[k - 1]\r\n    else:\r\n        return find_kth(arr1[m + 1:], arr2, n - m - 1, m, k - m - 1)\r\n\r\n\r\n# Driver Code\r\narr1 = [1, 3, 5, 7]\r\narr2 = [2, 4, 6, 8]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 5\r\n\r\n","votes":null},{"text":"\r\n    \r\n    if m > n:\r\n        arr1, arr2, m, n = arr2, arr1, n, m\r\n\r\n    if k <= m:\r\n        return arr1[k - 1]\r\n    elif k <= m + n:\r\n        return arr2[k - m - 1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 3, 4, 6, 7, 8]\r\n    arr2 = [2, 4, 6, 7, 8, 9]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n    # 4\r\n\r\n    arr1 = [1, 3, 4, 6, 7, 8]\r\n    arr2 = [2, 4, 6, 7, 8, 9]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 7\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n    # 8\r\n\r\n    arr1 = [1, 3, 4, 6, 7, 8]\r\n    arr2 = [2, 4, 6, 7, 8, 9]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 1\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n    # 2\r\n\r\n# Time Complexity: O(log(m + n))\r\n# Space Complexity: O(1)\r\n\r\n# Sample Input\/Output:\r\n# Input 1:\r\n#     arr1 = [1, 3, 4, 6, 7, 8]\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if k > m + n:\r\n        return None\r\n\r\n    if k <= m:\r\n        return find_kth(arr1, arr2[1:n], m, n - 1, k)\r\n\r\n    if k > m + 1:\r\n        return find_kth(arr1[1:m], arr2, m - 1, n, k - m - 1)\r\n\r\n    # k == m + 1\r\n    return min(arr1[m - 1], arr2[n - 1])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 2, 3, 4, 5]\r\n    arr2 = [5, 6, 7, 8, 9]\r\n    print(find_kth(arr1, arr2, 5, 5, 2))\r\n    print(find_kth(arr1, arr2, 5, 5, 3))\r\n    print(find_kth(arr1, arr2, 5, 5, 4))\r\n    print(find_kth(arr1, arr2, 5, 5, 5))\r\n    print(find_kth(arr1, arr2, 5, 5, 6))\r\n    print(find_kth(arr1, arr2, 5, 5, 7))\r\n    print(find_kth(arr1, arr2, 5, 5, 8))\r\n    print(find_kth(arr1, arr2, 5, 5, 9))\r\n    print(find_kth(arr1, arr","votes":null},{"text":"\r\n\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if m == 1 and n == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if m > n:\r\n        return find_kth(arr1, arr2, m - 1, n, k)\r\n    elif m < n:\r\n        return find_kth(arr1, arr2, m, n - 1, k)\r\n    else:\r\n        if arr1[m - 1] > arr2[n - 1]:  # if first array is bigger then return last element of first array\r\n            return find_kth(arr1, arr2, m - 1, n, k)\r\n        elif arr1[m - 1] < arr2[n - 1]:  # if second array is bigger then return last element of second array\r\n            return find_kth(arr1, arr2, m, n - 1, k)\r\n        else:  # if both array are equal then return kth element from both arrays\r\n            return find_kth(arr1, arr2, m - 1, n - 1, k)\r\n\r\n\r\n# Driver Code\r\narr1 = [1, 3, 5]\r\narr2 = [2, 4, 6]\r\nm = len(arr1)\r\nn = len(arr2)\r\nk = 3\r\nprint(find_kth(arr1, arr2, m, n, k))\r\n\r\n\r\n# Test Cases\r\n\"\"\"\r\nInput:\r\n    arr1 = [1, 3, 5]\r\n    arr2 = [2, 4, 6]\r\n    m = 3\r\n    n = 3\r\n    k = 3\r\nOutput: 4\r\n\r\nInput:\r\n    arr1 = [","votes":null},{"text":"\r\n    arr = []\r\n    i = 0\r\n    j = 0\r\n    while i < m and j < n:\r\n        if arr1[i] <= arr2[j]:\r\n            arr.append(arr1[i])\r\n            i += 1\r\n        else:\r\n            arr.append(arr2[j])\r\n            j += 1\r\n    while i < m:\r\n        arr.append(arr1[i])\r\n        i += 1\r\n    while j < n:\r\n        arr.append(arr2[j])\r\n       ","votes":null},{"text":"\r\n    # initializing the first element of the first array as minimum\r\n    # element\r\n    i = 0\r\n    # initializing the first element of the second array as minimum\r\n    # element\r\n    j = 0\r\n    # variable to track the number of elements already compared\r\n    count = 0\r\n    while count < k:\r\n        # if both arrays are not completely traversed, then compare\r\n        # current elements and put the smaller one in the result array\r\n        if i < m and j < n:\r\n            if arr1[i] < arr2[j]:\r\n                i += 1\r\n            else:\r\n                j += 1\r\n        # if only first array is completely traversed, then put all\r\n        # remaining elements of the second array in the result array\r\n        elif i == m:\r\n            j += 1\r\n        # if only second array is completely traversed, then put all\r\n        # remaining elements of the first array in the result array\r\n        elif j == n:\r\n            i += 1\r\n        # increment the count of the number of elements tracked\r\n        count += 1\r\n    # return the kth element\r\n    return arr1[i - 1] if i - 1 < m else arr2[j - 1]\r\n\r\n\r\n# Driver Code\r\narr1 = [1, 5, 9, 10, 15, 20]\r\narr2 = [2, 3, 8, 13","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k > m + n:\r\n        return -1\r\n    if k <= m:\r\n        return arr1[k - 1]\r\n    if k > m and k <= m + n:\r\n        mid1 = int(m \/ 2)\r\n        mid2 = int(k - mid1 - 1)\r\n        if arr1[mid1] > arr2[mid2]:\r\n            return find_kth(arr1, arr2, mid1, n, k)\r\n        else:\r\n            return find_kth(arr1, arr2, m, n - k + m, k - m)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [1, 3, 5, 7, 9]\r\n    arr2 = [2, 4, 6, 8, 10]\r\n","votes":null},{"text":"\r\n    if arr1[m - 1] < arr2[n - 1]:\r\n        arr1.append(0)\r\n        arr2.append(0)\r\n    if arr1[0] > arr2[0]:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n\r\n    # If the first element of second array is smaller than the last element of first array\r\n    if k > m + n:\r\n        return find_kth(arr1, arr2, m, n - 1, k - m)\r\n\r\n    # If the first element of first array is smaller than the last element of second array\r\n    if k <= m:\r\n        return find_kth(arr1, arr2, m - 1, n, k)\r\n\r\n    # If the first element of first array is greater than the last element of second array\r\n    if k > m + n - 1:\r\n        return find_kth(arr1, arr2, m, n - 1, k - m - 1)\r\n\r\n    # Return the kth element\r\n    return max(arr1, arr2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 3, 5, 7, 9]\r\n    arr2 = [2, 4, 6, 8, 10]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    arr1 = [1, 3, 5, 7, 9]\r\n    arr2 = [2, 4, 6, 8, 10]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 1\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n    ar","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if k","votes":null},{"text":"\r\n    # Base Case\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if n == 0:\r\n        return arr1[k-1]\r\n    # Recursive Case\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    # Find middle element of first array\r\n    mid1 = (m + n) \/\/ 2\r\n    # Find middle element of second array\r\n    mid2 = k - mid1\r\n    # Check if kth element is present in first array\r\n    if mid2 <= 0:\r\n        return find_kth(arr1, arr2, m-1, n, k)\r\n    # Check if kth element is present in second array\r\n    if mid2 > n:\r\n        return find_kth(arr1, arr2, m, n-1, k)\r\n    # Check if kth element is present in first array\r\n    if arr1[mid1-1] < arr2[mid2-1]:\r\n        return find_kth(arr1, arr2, m-1, n, k)\r\n    # Check if kth element is present in second array\r\n    if arr1[mid1-1] > arr2[mid2-1]:\r\n        return find_kth(arr1, arr2, m, n-1, k)\r\n    # Check if kth element is present in both arrays\r\n    if arr1[mid1-1] == arr2[mid2-1]:\r\n        return arr1[mid1-1]\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    m = 4\r\n    n = 6\r\n    arr1 = [1, 5, 7, 12]\r\n    arr2 = [2, 3, 4, 6, 8, 10]\r\n    k = 5\r\n    print(find_kth(arr1, arr2, m","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if k > m + n:\r\n        return None\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if k == m + n:\r\n        return max(arr1[m - 1], arr2[n - 1])\r\n    if k <= m:\r\n        return find_kth(arr1, arr2[1:], m, n - 1, k)\r\n    if k > m:\r\n        return find_kth(arr1[1:], arr2, m - 1, n, k - m)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    arr2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 4))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 11))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 1))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 10))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 13))\r\n    print(find_kth(arr1, arr2, len(arr1), len(arr2), 5))\r\n    print(find_kth(arr1, arr2, le","votes":null},{"text":"\r\n    \r\n    # If any of the arrays is empty, return -1.\r\n    if m == 0 or n == 0:\r\n        return -1\r\n    \r\n    # Initialize the variables for the pointers.\r\n    i = j = 0\r\n    \r\n    # Iterate until i gets to the end of arr1 or j gets to the end of arr2.\r\n    while i<m and j<n:\r\n        if arr1[i] < arr2[j]:\r\n            # If the element from arr1 is smaller than the element from arr2,\r\n            # the kth element is one of the smaller elements in arr1,\r\n            # so we need to increment the pointer for arr1.\r\n            i += 1\r\n        elif arr1[i] > arr2[j]:\r\n            # If the element from arr1 is greater than the element from arr2,\r\n            # the kth element is one of the smaller elements in arr2,\r\n            # so we need to increment the pointer for arr2.\r\n            j += 1\r\n        else:\r\n            # If the elements are equal, we need to increment the pointers\r\n            # for both arrays and check if we have found the kth element.\r\n            i += 1\r\n            j += 1\r\n","votes":null},{"text":"\r\n\r\n    # if m or n is 0 then the other array is fully traversed, so return the\r\n    # element from the other array\r\n    if m == 0 or n == 0:\r\n        return arr1[0] if m else arr2[0]\r\n\r\n    # if k is less than m then return the kth element from the first array\r\n    if k <= m:\r\n        return find_kth(arr1, arr2, m - 1, n, k)\r\n\r\n    # if k is greater than m + n then return the kth element from the last\r\n    # element of the second array\r\n    if k > m + n:\r\n        return find_kth(arr1, arr2, m, n - 1, k - (m + 1))\r\n\r\n    # k is in the range [m + 1, m + n]\r\n\r\n    # if the last element of the first array is smaller than the first element\r\n    # of the second array then the kth element is in the first array\r\n    if arr1[-1] < arr2[0]:\r\n        return find_kth(arr1, arr2, m, n - 1, k)\r\n\r\n    # if the last element of the first array is greater than the first element\r\n    # of the second array then the kth element is in the second array\r\n    if arr1[-1] > arr2[0]:\r\n        return find_kth(arr1, arr2, m - 1, n, k)\r\n\r\n    # else the kth element is in the first array\r\n    return arr1[-1]\r\n\r\n\r\n# Test cases\r\narr1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\r\narr2 = [2, 4, 6, 8, 10, 12, 14, 16, 1","votes":null},{"text":"\r\n    # print(arr1,arr2,m,n,k)\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    mid1 = (m + n) \/\/ 2\r\n    mid2 = k - mid1\r\n    if arr1[mid1 - 1] < arr2[mid2 - 1]:\r\n        return find_kth(arr1, arr2, mid1, n, mid2)\r\n    else:\r\n        return find_kth(arr1, arr2, m, mid1, mid2)\r\n\r\n\r","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    # find mid of the left half\r\n    mid1 = min(m, k \/\/ 2)\r\n\r\n    # find mid of the right half\r\n    mid2 = k - mid1\r\n\r\n    if arr1[mid1 - 1] < arr2[mid2 - 1]:\r\n        # if mid1th element from arr1 is smaller than mid2th element from arr2\r\n        return find_kth(arr1, arr2, mid1, n, k - mid1)\r\n\r\n    elif arr1[mid1 - 1] > arr2[mid2 - 1]:\r\n        # if mid1th element from arr1 is greater than mid2th element from arr2\r\n        return find_kth(arr1, arr2, m, n - mid2, k - mid2)\r\n\r\n    else:\r\n        # if mid1th element from arr1 is equal to mid2th element from arr2\r\n        return arr1[mid1 - 1]\r\n\r\n\r\n# Driver code\r\narr1 = [1, 5, 12, 26, 38]\r\narr2 = [2, 13, 17, 30, 45]\r\nk = 7\r\nm = len(arr1)\r\nn = len(arr2)\r\n\r\nprint(\"7th smallest element is\", find_kth(arr1, arr2, m, n, k))\r\n\r\narr1 = [1, 5, 12, 26, 38]\r\narr2 = [2, 13, 17, 30, 45]\r\nk = 1\r\nm = len(arr1)\r\nn = len(arr2)\r\n\r\nprint(","votes":null},{"text":"\r\n    if m > n:\r\n        return find_kth(arr2, arr1, n, m, k)\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    i = min(k\/\/2, m)\r\n    j = min(k-i, n)\r\n\r\n    if arr1[i-1] <= arr2[j-1]:\r\n        return find_kth(arr1, arr2[j:], m, n-j, k-j)\r\n    else:\r\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr1 = [1,3,5,7,9]\r\n    arr2 = [2,4,6,8,10]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    k = 5\r\n    print(find_kth(arr1, arr2, m, n, k))\r\n\r\n\r","votes":null},{"text":"\r\n    if m == 0:\r\n        return arr2[k - 1]\r\n    if n == 0:\r\n        return arr1[k - 1]\r\n    if m > 0 and n > 0:\r\n        if arr1[m - 1] < arr2[n - 1]:\r\n            return find_kth(arr1, arr2, m - 1, n, k)\r\n        else:\r\n            return find_kth(arr1, arr2, m, n - 1, k - m)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    arr1 = [3, 5, 7, 9, 12, 15, 21, 26, 30, 36, 43, 48, 55, 63, 72, 81, 90]\r\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19","votes":null}],"time":{"count":6.0,"avg":180429.178,"std":40066.625267254,"cov":0.2220628931}}
{"id":598,"question":"def armstrong_number(number):\r\n    \"\"\"Write a function to check whether the given number is armstrong or not.\"\"\"","answers":[{"text":"\r\n\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    return sum == number\r\n\r\n\r","votes":62465.9},{"text":"\r\n    total = 0\r\n    n = str(number)\r\n    L = len(n)\r\n    for i in n:\r\n        total += int(i) ** L\r\n    return total == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter a number: '))\r\n    if armstrong_number(n):\r\n        print('True')\r\n    else:\r\n        print('False')\r\n\r\n# Enter a number: 153\r\n# False\r\n# Enter a number: 1530\r\n# True\r\n# Enter a number: 1531\r\n# False\r\n# Enter a number: 1532\r\n# False\r\n# Enter a number: 1533\r\n# False\r\n# Enter a number: 1534\r\n# False\r\n# Enter a number: 1535\r\n# False\r\n# Enter a number: 1536\r\n# False\r\n# Enter a number: 1537\r\n# False\r\n# Enter a number: 1538\r\n# False\r\n# Enter a number: 1539\r\n# False\r\n# Enter a number: 1540\r\n# False\r\n# Enter a number: 1541\r\n# False\r\n# Enter a number: 1542\r\n# False\r\n# Enter a number: 1543\r\n# False\r\n# Enter a number: 1544\r\n# False\r\n# Enter a number: 1545\r\n# False\r\n# Enter a number: 1546\r\n# False\r\n# Enter a number: 1547\r\n# False\r\n# Enter a number: 1548\r\n# False\r\n# Enter a number: 1549\r\n# False\r\n# Enter a number: 1550\r\n# False\r\n# Enter a number: 1551\r\n# False\r\n# Ente","votes":82721.788},{"text":"\r\n    number_string = str(number)\r\n    # find length of the number\r\n    length = len(number_string)\r\n    # find sum of the power of each digit\r\n    sum_of_powers = sum([int(digit) ** length for digit in number_string])\r\n    # check whether sum of powers is equal to the number or not\r\n    if number == sum_of_powers:\r\n        return True\r\n    return False\r\n\r\n\r","votes":90884.508},{"text":"\r\n    # Get the number of digits of the given number\r\n    number_digits = len(str(number))\r\n\r\n    # Find the sum of cubes of the digits\r\n    sum_of_cubes = 0\r\n    for digit in range(number_digits):\r\n        sum_of_cubes += (int(str(number)[digit]) ** 3)\r\n\r\n    # Compare the sum of cubes with the given number\r\n    if sum_of_cubes == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":91549.692},{"text":"\r\n    length = len(str(number))\r\n    num = number\r\n    temp = 0\r\n    while num != 0:\r\n        temp += (num % 10) ** length\r\n        num \/\/= 10\r\n\r\n    if temp == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":94752.74},{"text":"\r\n    # Get the number of digits in the number\r\n    length = len(str(number))\r\n\r\n    # Find the sum of the cubes of the digits\r\n    sum_of_cubes = 0\r\n    for digit in str(number):\r\n        sum_of_cubes += int(digit) ** length\r\n\r\n    # Check if the given number is equal to the sum of the cubes of the digits\r\n    if number == sum_of_cubes:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter a number: \"))\r\n\r\n    if armstrong_number(number):\r\n        print(f\"{number} is an armstrong number.\")\r\n    else:\r\n        print(f\"{number} is not an armstrong number.\")\r\n\r\n# Output\r\n# Enter a number: 153\r\n# 153 is an armstrong number.\r\n\r\n# Output\r\n# Enter a number: 154\r\n# 154 is not an armstrong number.\r\n\r\n# Output\r\n# Enter a number: 1533\r\n# 1533 is an armstrong number.\r\n\r\n# Output\r\n# Enter a number: 1534\r\n# 1534 is not an armstrong number.\r\n\r\n# Output\r\n# Enter a number: 100\r\n# 100 is an armstrong number.\r\n\r\n# Output\r\n# Enter a number: 101\r\n# 101 is not an armstrong number.\r\n\r\n# Output\r\n# Enter a number: 111\r\n# 111 is an armstrong number.\r\n\r\n# Output\r\n# Enter a number: 112\r\n# 112 is not an armstrong number.\r\n\r\n# Output\r\n# Enter a number: 1111\r\n# 11","votes":98502.912},{"text":"\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp \/\/= 10\r\n    return sum == number\r\n\r\n\r","votes":100948.396},{"text":"\r\n\r\n    # Initialize a variable to store the original number and a variable to store the sum\r\n    original_number = number\r\n    sum = 0\r\n\r\n    # Initialize a variable to store the number of digits in the number\r\n    number_of_digits = len(str(original_number))\r\n\r\n    # Iterate through the number and obtain the sum of cubes of individual digits\r\n    while original_number > 0:\r\n        digit = original_number % 10\r\n        sum += digit ** number_of_digits\r\n        original_number \/\/= 10\r\n\r\n    # Return True if the sum is equal to the number, else False\r\n    if number == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter a positive number: \"))\r","votes":105964.308},{"text":"\r\n    if number < 0:\r\n        return False\r\n\r\n    arm_number = str(number)\r\n    digits = len(arm_number)\r\n    sum_of_digits = 0\r\n    for digit in arm_number:\r\n        sum_of_digits += (int(digit) ** digits)\r\n    if sum_of_digits == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input('Enter a number: '))\r\n    if armstrong_number(number):\r\n        print(f'{number} is an armstrong number.')\r\n    else:\r\n        print(f'{number} is not an armstrong number.')\r\n\r\n\"\"\"\r\nTime complexity: O(n).\r\nSpace complexity: O(1).\r\n\"\"\"\r\n","votes":106966.036},{"text":"\r\n    total_sum = 0\r\n    n = number\r\n    n_str = str(n)\r\n    num_of_digits = len(n_str)\r\n    for digit in n_str:\r\n        digit = int(digit)\r\n        total_sum += digit ** num_of_digits\r\n    if total_sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":110205.344},{"text":"\r\n    n = len(str(number))\r\n    sum = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** n\r\n        temp \/\/= 10\r\n    return sum == number\r\n\r\n\r","votes":114351.968},{"text":"\r\n    # Getting the number of digits in the number\r\n    num_digits = len(str(number))\r\n    # Getting the sum of the digits\r\n    sum = 0\r\n    for digit in str(number):\r\n        sum += int(digit)**num_digits\r\n    if number == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":117280.776},{"text":"\r\n    # split the number in to the list of its digits\r\n    num_list = [int(i) for i in str(number)]\r\n    # initialize the sum of the cube of each digit of the number\r\n    sum = 0\r\n    # calculate the sum of the cube of each digit\r\n    for i in num_list:\r\n        sum += i ** 3\r\n    # if the number is armstrong return True otherwise False\r\n    return sum == number\r\n\r\n\r\n# test cases\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(121))\r\nprint(armstrong_number(153))\r\n","votes":117874.852},{"text":"\r\n    num_list = [int(x) for x in str(number)]\r\n    num_len = len(num_list)\r\n    total = 0\r\n    for x in num_list:\r\n        total += x ** num_len\r\n    return total == number\r\n\r\n\r","votes":118054.688},{"text":"\r\n    # To find the length of the number\r\n    length = len(str(number))\r\n\r\n    # To find the sum of the cube of the digits\r\n    sum = 0\r\n    for digit in str(number):\r\n        sum += int(digit) ** length\r\n\r\n    # To check whether the sum is equal to the number or not\r\n    if number == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver code\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(102))\r\nprint(armstrong_number(100))\r\nprint(armstrong_number(1000))\r","votes":119220.528},{"text":"\r\n    num = str(number)\r\n    l = len(num)\r\n    s = 0\r\n    for i in num:\r\n        s += int(i)**l\r\n    if s == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    for i in range(1, n + 1):\r\n        if armstrong_number(i):\r\n            print(i)\r\n","votes":124305.46},{"text":"\r\n    n = len(str(number))\r\n    sum = 0\r\n    for i in range(0, n):\r\n        d = int(str(number)[i])\r\n        sum = sum + d ** n\r\n    if number == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter a number: \"))\r\n    if armstrong_number(number):\r\n        print(f\"{number} is an Armstrong number\")\r\n    else:\r\n        print","votes":124820.64},{"text":"\r\n    n = number\r\n    sum = 0\r\n    while n!=0:\r\n        d = n%10\r\n        n = n\/\/10\r\n        sum += d**3\r\n    return sum == number\r\n\r\n\r","votes":125938.904},{"text":"\r\n\r\n    temp = number\r\n    total = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        total += digit ** 3\r\n        temp \/\/= 10\r\n\r\n    return total == number\r\n\r\n\r","votes":126349.088},{"text":"\r\n    \r\n    num_list = list(map(int, str(number)))\r\n    total = 0\r\n    for i in num_list:\r\n        total = total + i**3\r\n    return total == number\r\n\r\n","votes":128892.424},{"text":"\r\n    sum = 0\r\n    n = number\r\n    while n > 0:\r\n        d = n % 10\r\n        n = n \/\/ 10\r\n        sum += d ** 3\r\n    return sum == number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter a three-digit number: \"))\r\n    if armstrong_number(n):\r\n        print(n, \"is an Armstrong number\")\r\n    else:\r\n        print(n, \"is not an Armstrong number\")\r\n\r\n\r\n# Sample Input:\r\n# 153\r\n\r\n# Sample Output:\r\n# 153 is an Armstrong number\r\n\r\n# Explanation:\r\n# 153 is a 3-digit number.\r\n# 153 = 1**3 + 5**3 + 3**3\r\n# Therefore, 153 is an Armstrong number.\r\n\r\n# Sample Input:\r\n# 123\r\n\r\n# Sample Output:\r\n# 123 is not an Armstrong number\r\n\r\n# Explanation:\r\n# 123 is not an Armstrong number because:\r\n# 123 != 1**3 + 2**3 + 3**3\r\n\r\n# Sample Input:\r\n# 153\r\n\r\n# Sample Output:\r\n# 153 is an Armstrong number\r\n\r\n# Explanation:\r\n# 153 is a 3-digit number.\r\n# 153 = 1**3 + 5**3 + 3**3\r\n# Therefore, 153 is an Armstrong number.\r\n\r\n# Sample Input:\r\n# 1000\r\n\r\n# Sample Output:\r\n# 1000 is not an Armstrong number\r\n\r\n# Explanation:\r\n# 1000 is not an Armstrong number because:\r\n# 1000 != ","votes":129683.38},{"text":"\r\n    n_list = list(map(int, str(number)))\r\n    n_sum = 0\r\n    for n in n_list:\r\n        n_sum += n ** 3\r\n    return n_sum == number\r\n\r\n\r","votes":130233.892},{"text":"\r\n    # Your code goes here\r\n    result = 0\r\n    temp = number\r\n    while temp != 0:\r\n        digit = temp % 10\r\n        result += digit ** 3\r\n        temp \/\/= 10\r\n    return result == number\r\n\r\n\r","votes":130423.948},{"text":"\r\n    n = number\r\n    s = 0\r\n    while n > 0:\r\n        r = n % 10\r\n        s += r ** 3\r\n        n \/\/= 10\r\n    if s == number:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input(\"Enter any number : \"))\r\n    if armstrong_number(num):\r\n        print(\"Entered number is a armstrong number.\")\r\n    else:\r\n        print(\"Entered number is not a armstrong number.\")\r\n","votes":131431.956},{"text":"\r\n    str_num = str(number)\r\n    n = len(str_num)\r\n    sum = 0\r\n    for i in str_num:\r\n        sum += int(i)**n\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    number = 153\r\n    if armstrong_number(number):\r\n        print(\"Yes,\", number, \"is an Armstrong number.\")\r\n    else:\r\n        print(\"No,\", number, \"is not an Armstrong number.\")\r\n\r\n# Output: Yes, 153 is an Armstrong number.\r\n\r\n# Another example\r\n\r\nif armstrong_number(371):\r\n    print(\"Yes, 371 is an Armstrong number.\")\r\nelse:\r\n    print(\"No, 371 is not an Armstrong number.\")\r\n\r\n# Output: No, 371 is not an Armstrong number.\r\n\r\n# Another example\r\n\r\nif armstrong_number(153):\r\n    print(\"Yes, 153 is an Armstrong number.\")\r\nelse:\r\n    print(\"No, 153 is not an Armstrong number.\")\r\n\r\n# Output: Yes, 153 is an Armstrong number.\r\n\r\n# Another example\r\n\r\nif armstrong_number(123):\r\n    print(\"Yes, 123 is an Armstrong number.\")\r\nelse:\r\n    print(\"No, 123 is not an Armstrong number.\")\r\n\r\n# Output: No, 123 is not an Armstrong number.\r\n\r\n# Another example\r\n\r\nif armstrong_number(153):\r\n    print(\"Yes, 153 is an Armstrong number.\")\r\nelse:\r\n    print(\"No, 153 is not an Armstrong number.\")\r\n\r\n# Output: Yes, 153 is an Armstron","votes":133337.564},{"text":"\r\n    # Your code goes here\r\n    n = len(str(number))\r\n    temp = number\r\n    total = 0\r\n    while temp > 0:\r\n        total += (temp % 10) ** n\r\n        temp \/\/= 10\r\n    return total == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    input_number = int(input())\r\n    print(armstrong_number(input_number))\r\n\r\n#Reference: w3resource","votes":137680.208},{"text":"\r\n    # Get the number of digits in the given number\r\n    num_digits = len(str(number))\r\n\r\n    # Find the sum of the cubes of each digit\r\n    sum_of_cubes = 0\r\n    for digit in str(number):\r\n        sum_of_cubes += int(digit) ** num_digits\r\n\r\n    # Check if the given number is equal to the sum\r\n    return sum_of_cubes == number\r\n\r\n\r","votes":142284.784},{"text":"\r\n    original_number = number\r\n    number = str(number)\r\n    digits = len(number)\r\n    sum = 0\r\n    for digit in number:\r\n        sum += int(digit) ** digits\r\n    if sum == original_number:\r\n        return True\r\n    return False\r\n\r\n\r","votes":144878.492},{"text":"\r\n    num_list = list(map(int,str(number)))\r\n    sum_of_cubes = 0\r\n    for i in num_list:\r\n        sum_of_cubes += (i**3)\r\n    return sum_of_cubes == number\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(215))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(1634))\r\nprint(armstrong_number(1534))\r\nprint(armstrong_number(123456))\r\nprint(armstrong_number(12345))\r\n","votes":150324.776},{"text":"\r\n    digit = number\r\n    length = len(str(number))\r\n    sum = 0\r\n    while digit > 0:\r\n        digit, remainder = divmod(digit, 10)\r\n        sum += int(remainder) ** length\r\n    return (sum == number)\r\n\r\n\r","votes":151185.436},{"text":"\r\n    if number < 0:\r\n        return False\r\n    number_string = str(number)\r\n    sum_of_digit = 0\r\n    for digit in number_string:\r\n        sum_of_digit = sum_of_digit + int(digit)**len(number_string)\r\n    if number == sum_of_digit:\r\n        return True\r\n    return False\r\n\r\n\r","votes":153511.812},{"text":"\r\n    if isinstance(number, int):\r\n        rev_num = 0\r\n        for digit in str(number):\r\n            rev_num += int(digit) ** 3\r\n        return rev_num == number\r\n    raise TypeError(\"The given value is not an integer.\")\r\n\r\nif __name__ == '__main__':\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(123) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n    print(\"True\" if armstrong_number(153) else \"False\")\r\n  ","votes":156292.844},{"text":"\r\n    n = number\r\n    s = 0\r\n    while n > 0:\r\n        r = n % 10\r\n        s += r ** 3\r\n        n \/\/= 10\r\n    return s == number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter a number: \"))\r\n","votes":159323.82},{"text":"\r\n    if number < 0:\r\n        return False\r\n    elif number == 0:\r\n        return True\r\n    else:\r\n        list_number = list(str(number))\r\n        sum_list_number = 0\r\n        for i in list_number:\r\n            sum_list_number += int(i) ** len(list_number)\r\n        if sum_list_number == number:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r","votes":159502.796},{"text":"\r\n    n = len(str(number))\r\n    temp = number\r\n    sum = 0\r\n    while temp:\r\n        digit = temp % 10\r\n        sum += digit ** n\r\n        temp \/\/= 10\r\n    return sum == number\r\n\r\n\r","votes":160184.296},{"text":"\r\n    n = len(str(number))\r\n    total = 0\r\n    for i in str(number):\r\n        total += int(i)**n\r\n    return total == number\r\n\r\n\r","votes":161233.104},{"text":"\r\n    temp = number\r\n    digit_count = 0\r\n    while temp > 0:\r\n        temp \/\/= 10\r\n        digit_count += 1\r\n\r\n    temp = number\r\n    total = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        total += digit ** digit_count\r\n        temp \/\/= 10\r\n    if total == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter the number to check for armstrong number: \"))\r\n    if armstrong_number(number):\r\n        print(\"The number is a armstrong number.\")\r\n","votes":164749.536},{"text":"\r\n    length = len(str(number))\r\n    temp = number\r\n    s = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        s += digit ** length\r\n        temp \/\/= 10\r\n    return s == number\r\n\r\n\r\n# Driver code\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter a number: \"))\r\n    if armstrong_number(number):\r\n        print(\"Entered number is an Armstrong number\")\r\n    else:\r\n        print(\"Entered number is not an Armstrong number\")\r\n\r\n#","votes":168458.428},{"text":"\r\n    # Your code goes here\r\n    list_num = [int(x) for x in str(number)]\r\n    sum = 0\r\n    for i in list_num:\r\n        sum += i**3\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nif __name__ == '__main__':\r\n    number = int(input())\r\n    result = armstrong_number(number)\r\n    if result:\r\n        print(\"Yes\")\r\n","votes":177319.792},{"text":"\r\n    num = str(number)\r\n    length = len(num)\r\n    sum = 0\r\n    for digit in num:\r\n        sum += int(digit) ** length\r\n    if number == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":178277.096},{"text":"\r\n    # Enter your code here. Write your code here\r\n    original_number = number\r\n    sum_of_digits = 0\r\n    temp = number\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum_of_digits += digit ** 3\r\n        temp \/\/= 10\r\n    return sum_of_digits == original_number\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    for i in range(1, n+1):\r\n        if armstrong_number(i):\r\n            print(i)\r\n\r\n\r","votes":189690.816},{"text":"\r\n    num_str = str(number)\r\n    num_list = [int(x) for x in num_str]\r\n    n = len(num_list)\r\n    num = 0\r\n    for i in num_list:\r\n        num += (i ** n)\r\n    return num == number\r\n","votes":195722.124},{"text":"\r\n    num = str(number)\r\n    number_of_digits = len(num)\r\n    sum = 0\r\n    for i in num:\r\n        sum += int(i) ** number_of_digits\r\n    if number == sum:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nprint(armstrong_number(0))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(370))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(407))\r\nprint(armstrong_number(1634))\r\nprint(armstrong_number(4094))\r\nprint(armstrong_number(8080))\r\nprint(armstrong_number(9474))\r\nprint(armstrong_number(9475))\r\nprint(armstrong_number(9476))\r\nprint(armstrong_number(9477))\r\nprint(armstrong_number(9478))\r\nprint(armstrong_number(9479))\r\nprint(armstrong_number(9480))\r\nprint(armstrong_number(10000))\r\nprint(armstrong_number(99999))\r\nprint(armstrong_number(100000))\r\nprint(armstrong_number(1000000))\r\nprint(armstrong_number(10000000))\r\nprint(armstrong_number(100000000))\r\nprint(armstrong_number(1000000000))\r\nprint(armstrong_number(10000000000))\r\nprint(armstrong_number(100000000000))\r\nprint(armstrong_number(1000000000000))\r\nprint","votes":223322.392},{"text":"\r\n    number = str(number)\r\n    length = len(number)\r\n    sum = 0\r\n    for i in range(length):\r\n        sum += int(number[i]) ** length\r\n    if sum == int(number):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input(\"Enter a number: \"))\r\n    if armstrong_number(num):\r\n        print(f\"{num} is an Armstrong number.\")\r\n    else:\r\n        print(f\"{num} is not an Armstrong number.\")\r\n\r\n# Sample Input: 153\r\n# Sample Output: 153 is an Armstrong number.\r\n\r\n# Sample Input: 123\r\n# Sample Output: 123 is not an Armstrong number.\r\n\r\n# Sample Input: 1531\r\n# Sample Output: 1531 is not an Armstrong number.\r\n\r\n# Sample Input: 1532\r\n# Sample Output: 1532 is not an Armstrong number.\r\n\r\n# Sample Input: 1533\r\n# Sample Output: 1533 is not an Armstrong number.\r\n\r\n# Sample Input: 1534\r\n# Sample Output: 1534 is not an Armstrong number.\r\n\r\n# Sample Input: 1535\r\n# Sample Output: 1535 is an Armstrong number.\r\n\r\n# Sample Input: 1536\r\n# Sample Output: 1536 is not an Armstrong number.\r\n\r\n# Sample Input: 1537\r\n# Sample Output: 1537 is not an Armstrong number.\r\n\r\n# Sample Input: 1538\r\n# Sample Output: 1538 is not an Armstrong number.\r\n\r\n# Sample Input: 1539\r\n# Sample Output: 1539 is not an Armstrong number.\r\n\r\n# Sample Input","votes":238785.876},{"text":"\r\n    temp = number\r\n    digits = 0\r\n    while temp > 0:\r\n        temp = temp \/\/ 10\r\n        digits = digits + 1\r\n\r\n    if digits == 1:\r\n        return True\r\n    else:\r\n        digit_sum = 0\r\n        while number > 0:\r\n            digit = number % 10\r\n            digit_sum += digit ** digits\r\n            number = number \/\/ 10\r\n\r\n        if digit_sum == number:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r","votes":null},{"text":"\r\n    # If the number is less than 0 or a float, return False\r\n    if not isinstance(number, int) or number < 0:\r\n        return False\r\n    # If the number is 0 or 1, return True\r\n    if number in (0, 1):\r\n        return True\r\n    # Store the number of digits in n\r\n    n = len(str(number))\r\n    # Store the sum of each digit raised to the power n in sum\r\n    sum = 0\r\n    for digit in str(number):\r\n        sum += int(digit) ** n\r\n    # If sum is equal to the original number, return True\r\n    if sum == number:\r\n        return True\r\n    # Otherwise, return False\r\n    return False\r\n\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(1234))\r\nprint(armstrong_number(12345))\r\nprint(armstrong_number(123456))\r\nprint(armstrong_number(1234567))\r\nprint(armstrong_number(2000000000))\r\nprint(armstrong_number(200))\r\nprint(armstrong_number(2000))\r\nprint(armstrong_number(20))\r\nprint(armstrong_number(2))\r\nprint(armstrong_number(1))\r\nprint(armstrong_number(0))\r\nprint(armstrong_number(-1))\r\nprint(armstrong_number(-2))\r\nprint(armstrong_number(-23))\r\nprint(armstrong_number(-1000))\r\nprint(armstrong_number(-2000))\r\nprint(armstrong_number(-20000))\r\nprint(armstrong_number(-200000))\r\nprint(armstrong_number(-2000000))\r\nprint(armstrong","votes":null},{"text":"\r\n\r\n    number_digits = len(str(number))\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** number_digits\r\n        temp \/\/= 10\r\n\r\n    return sum == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    for i in range(1, n + 1):\r\n        if armstrong_number(i):\r\n            print(i)\r\n\r\n\r\n\"\"\"\r\nSample Input:\r\n\r\n5\r\n153\r\n100","votes":null},{"text":"\r\n    num = number\r\n    count = 0\r\n    while num > 0:\r\n        num = num \/\/ 10\r\n        count += 1\r\n    digits = []\r\n    while number:\r\n        digit = number % 10\r\n        number = number \/\/ 10\r\n        digits.append(digit)\r\n    digits = sum(int(digit) ** count for digit in digits)\r\n    if digits == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    # Get the number of digits\r\n    length = len(number)\r\n    \r\n    # Getting the sum of the cube of each digit\r\n    sum = 0\r\n    for i in range(length):\r\n        sum += int(number[i]) ** 3\r\n    \r\n    # Checking if the sum is equal to the original number\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = input(\"Enter a number: \")\r\n    if armstrong_number(number) == True:\r\n        print(\"{} is an armstrong number.\".format(number))\r\n    else:\r\n        print(\"{} is not an armstrong number.\".format(number))\r\n\r\n\r\n\"\"\"\r\nTime Complexity: O(n), where n is the number of digits in the number\r\nSpace Complexity: O(1), as no extra space is used.\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\nEnter a number: 153\r\n153 is an armstrong number.\r\n\r\nSAMPLE 2\r\nEnter a number: 1234\r\n1234 is not an armstrong number.\r\n\r\nSAMPLE 3\r\nEnter a number: 1531\r\n1531 is an armstrong number.\r\n\r\nSAMPLE 4\r\nEnter a number: 1000\r\n1000 is an armstrong number.\r\n\r\nSAMPLE 5\r\nEnter a number: 9999\r\n9999 is not an armstrong number.\r\n\r\nSAMPLE 6\r\nEnter a number: 143\r\n143 is not an armstrong number.\r\n\r\nSAMPLE 7\r\nEnter a number: 0\r\n0 is not an arm","votes":null},{"text":"\r\n    num_list = list(map(int, str(number)))\r\n    total_add = 0\r\n    for i in num_list:\r\n        total_add += i ** 3\r\n    if total_add == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n    \r\n# code to test above function\r\nif __name__ == '__main__':\r\n    num = 371\r\n    if armstrong_number(num):\r\n        print(f'{num} is an Armstrong number')\r\n    else:\r\n        print(f'{num} is not an Armstrong number')\r\n\r\n\r\n\r\n\"\"\"\r\nSample test cases\r\n\r\nTest Case 1:\r\n\r\nInput:\r\nnum = 371\r\nOutput: 371 is an Armstrong number\r\n\r\nTest Case 2:\r\n\r\nInput:\r\nnum = 153\r\nOutput: 153 is not an Armstrong number\r\n\r\nTest Case 3:\r\n\r\nInput:\r\nnum = 153\r\nOutput: 153 is not an Armstrong number\r\n\r\nTest Case 4:\r\n\r\nInput:\r\nnum = 1530\r\nOutput: 1530 is not an Armstrong number\r\n\r\nTest Case 5:\r\n\r\nInput:\r\nnum = 1530\r\nOutput: 1530 is not an Armstrong number\r\n\r\nTest Case 6:\r\n\r\nInput:\r\nnum = 1530\r\nOutput: 1530 is not an Armstrong number\r\n\r\nTest Case 7:\r\n\r\nInput:","votes":null},{"text":"\r\n    num = str(number)\r\n    if len(num) == 1:\r\n        return True\r\n    else:\r\n        total = 0\r\n        for i in num:\r\n            total += int(i) ** len(num)\r\n        if total == number:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r\nnumber = int(input('Enter the number: '))\r\nif armstrong_number(number):\r\n    print('The number is armstrong')\r\nelse:\r\n    print('The number is not armstrong')\r\n\r\n\r\n# Task 2\r\n# Write a function to check whether the given number is prime or not.\r","votes":null},{"text":"\r\n    # number = int(input(\"Enter a number: \"))\r\n    array = []\r\n    if number <= 0:\r\n        return False\r\n    else:\r\n        while number > 0:\r\n            array.append(number % 10)\r\n            number = int(number \/ 10)\r\n        \r\n        sum_of_digits = 0\r\n        for i in array:\r\n            sum_of_digits = sum_of_digits + i**3\r\n        \r\n        if sum_of_digits == number:\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n# Driver code\r\nif __name__ == '__main__':\r\n    number1 = int(input(\"Enter a number: \"))\r\n    print(armstrong_number(number1))\r\n    \r\n'''\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nInput:\r\nEnter a number: 153\r\nOutput:\r\nTrue\r\n\r\nInput:\r\nEnter a number: 123\r\nOutput:\r\nFalse\r\n\r\nInput:\r\nEnter a number: 1331\r\nOutput:\r\nTrue\r\n\r\nInput:\r\nEnter a number: 14321\r\nOutput:\r\nTrue\r\n\r\nInput:\r\nEnter a number: 1324\r\nOutput:\r\nFalse\r\n\r\nInput:\r\nEnter a number: 14444\r\nOutput:\r\nTrue\r\n\r\nInput:\r\nEnter a number: 15467\r\nOutput:\r\nFalse\r\n\r\nInput:\r\nEnter a number: 143212\r\nOutput:\r\nFalse\r\n\r\nInput:\r\nEnter a number: 0\r\nOutput:\r\nFalse\r\n\r\nInput:\r\nEnter a number: -123\r\nOutput:\r\nFalse\r\n\r\nInput:\r\nEnter a number: 1000\r\nOutput:\r","votes":null},{"text":"\r\n    list1 = [int(x) for x in str(number)]\r\n    sum1 = 0\r\n    for i in range(len(list1)):\r\n        sum1 += (list1[i] ** len(list1))\r\n    if sum1 == number:\r\n        print(sum1)\r\n        return True\r\n    else:\r\n        print(sum1)\r\n        return False\r\n\r\n\r\n# Test Case\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(arm","votes":null},{"text":"\r\n\r\n    # find the length of the number\r\n    n = len(str(number))\r\n\r\n    # initialize the variable sum\r\n    sum = 0\r\n\r\n    # find the sum of the cubes\r\n    for digit in str(number):\r\n        sum += int(digit) ** 3\r\n\r\n    # check if the sum is equal to the number\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    number = int(input('Enter a number to check whether it is an armstrong number or not: '))\r\n\r\n    if armstrong_number(number):\r\n        print('The number is an armstrong number.')\r\n    else:\r\n        print('The number is not an arm","votes":null},{"text":"\r\n    \r\n    # convert the given number to string\r\n    number = str(number)\r\n    \r\n    # store the length of the number\r\n    length = len(number)\r\n    \r\n    # run the loop till the length of the number\r\n    for i in range(length):\r\n        # store the digit\r\n        digit = int(number[i])\r\n        \r\n        # find the sum of the digit\r\n        sum = sum + digit**len(number)\r\n    \r\n    # check whether the sum is equal to the given number\r\n    if (sum == number):\r\n        print(\"Given number is armstrong number.\")\r\n    else:\r\n        print(\"Given number is not armstrong number.\")\r\n        \r\n    \r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    \r\n    # input the number\r\n    number = int(input(\"Enter the number: \"))\r\n    \r\n    # call the function\r\n    armstrong_number(number)\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n\r\nSAMPLE 1\r\nEnter the number: 153\r\nGiven number is armstrong number.\r\n\r\nSAMPLE 2\r\nEnter the number: 123\r\nGiven number is not armstrong number.\r\n\r\nSAMPLE 3\r\nEnter the number: 1530\r\nGiven number is armstrong number.\r\n\r\nSAMPLE 4\r\nEnter the","votes":null},{"text":"\r\n    temp = number\r\n    count = 0\r\n    while temp > 0:\r\n        count += 1\r\n        temp \/\/= 10\r\n    length = count\r\n    num = number\r\n    temp = number\r\n    while num > 0:\r\n        temp = temp \/\/ 10\r\n        rem = num % 10\r\n        num \/\/= 10\r\n        sum = 0\r\n        if length == 1:\r\n            return True\r\n        while temp > 0:\r\n            sum += (temp % 10) ** length\r\n            temp \/\/= 10\r\n        if sum == number:\r\n            return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = 153\r\n    print(armstrong_number(number))\r\n\r\n\"\"\"\r\nTime O(N) where N is the number of digits in a number\r\nSpace O(1)\r\n\r\nSample Input: 153\r\nSample Output: True\r\n\"\"\"\r\n","votes":null},{"text":"\r\n\r\n    # If the number is less than 0, raise an error\r\n    if number < 0:\r\n        raise ValueError(\"Only non-negative integers are allowed.\")\r\n\r\n    # If the number is 0, it is not an armstrong number\r\n    if number == 0:\r\n        return False\r\n\r\n    # Get the number of digits in the number\r\n    num_digits = len(str(number))\r\n\r\n    # Calculate the sum of cubes\r\n    sum_of_cubes = 0\r\n    for digit in str(number):\r\n        digit = int(digit)\r\n        sum_of_cubes += digit ** num_digits\r\n\r\n    # Compare the sum of cubes with the number\r\n    if sum_of_cubes == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(5))\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(1000))\r\n    print(armstrong_number(1533))\r\n    print(armstrong_number(15331))\r\n    print(armstrong_number(153311))\r\n    print(armstrong_number(1533111))\r\n    print(armstrong_number(15331111))\r\n    print(armstrong_number(153311111))\r\n    print(armstrong_number(1533111111))\r\n    print(armstrong_number(15331111111))\r\n    print(armstrong_number(153311111111))\r\n    print(armstrong_number(1533111111111))\r\n    print(armstrong_number(1533111111","votes":null},{"text":"\r\n    temp = number\r\n    num_digits = len(str(number))\r\n    sum_of_digits = 0\r\n    while temp>0:\r\n        digit = temp%10\r\n        temp = temp\/\/10\r\n        sum_of_digits += digit**num_digits\r\n    if sum_of_digits == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(12345))\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(1510))\r\n    print(armstrong_number(150))\r\n    print(armstrong_number(111111))\r\n    print(armstrong_number(1234567890))\r\n    print(armstrong_number(1))\r\n    print(armstrong_number(0))\r\n    print(armstrong_number(10))\r\n    print(armstrong_number(111))\r\n    print(armstrong_number(1111))\r\n    print(armstrong_number(123))\r\n    print(armstrong_number(1234))\r\n    print(armstrong_number(12345))\r\n    print(armstrong_number(123456))\r\n    print(armstrong_number(123457))\r\n    print(armstrong_number(1234567))\r\n    print(armstrong_number(12345678))\r\n    print(armstrong_number(123456789))\r\n    print(armstrong_number(1234567890))\r\n    print(armstrong_number(12345678901))\r\n    print(armstrong_numbe","votes":null},{"text":"\r\n    n = len(number)\r\n    num = int(number)\r\n    sum = 0\r\n    temp = num\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** n\r\n        temp = temp \/\/ 10\r\n    return num if sum == num else False\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n    number = input(\"Enter the number: \")\r\n    if armstrong_number(number):\r\n        print(\"{} is an Armstrong number\".format(number))\r\n    else:\r\n        print(\"{} is not an Armstrong number\".format(number))\r\n\r\n\r\n# Output:\r\n# Enter the number: 153\r\n# 153 is an Armstrong number\r\n\r\n# Output:\r\n# Enter the number: 154\r\n# 154 is not an Armstrong number\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# Alternate Solution:\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    number = str(number)\r\n    # print(number)\r\n    num_list = []\r\n    for i in range(len(number)):\r\n        # print(i)\r\n        num_list.append(int(number[i]))\r\n    # print(num_list)\r\n    result = 0\r\n    for i in range(len(number)):\r\n        result += (num_list[i]**len(number))\r\n    # print(result)\r\n    if result == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Driver Code\r\nif __name__=='__main__':\r\n    n = int(input(\"Enter a number\\n\"))\r\n    if armstrong_number(n):\r\n        print(\"The number is an Armstrong number\")\r\n    else:\r\n        print(\"The number is not an Armstrong number\")\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        ","votes":null},{"text":"\r\n    n = number\r\n    temp = n\r\n    total = 0\r\n    while temp != 0:\r\n        last_digit = temp % 10\r\n        total += last_digit ** 3\r\n        temp \/\/= 10\r\n    return total == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter a number: '))\r\n    if armstrong_number(n):\r\n        print('Armstrong number')\r\n    else:\r\n        print('Not an Armstrong number')\r\n\r\n\"\"\"\r\nInput:\r\n407\r\n\r\nOutput:\r\nArmstrong number\r\n\r\nInput:\r\n153\r\n\r\nOutput:\r\nNot an Armstrong number\r\n\r\nInput:\r\n153\r\n\r\nOutput:\r\nNot an Armstrong number\r\n\r\nInput:\r\n153\r\n\r\nOutput:\r\nNot an Armstrong number\r\n\r\nInput:\r\n153\r\n\r\nOutput:\r\nNot an Armstrong number\r\n\r\nInput:\r\n9474\r\n\r\nOutput:\r\nArmstrong number\r\n\r\nInput:\r\n9474\r\n\r\nOutput:\r\nArmstrong number\r\n\r\nInput:\r\n9474\r\n\r\nOutput:\r\nArmstrong number\r\n\r\nInput:\r\n9474\r\n\r\nOutput:\r\nArmstrong number\r\n\r\nInput:\r\n9474\r\n\r\nOutput:\r\nArmstrong number\r\n\r\nInput:\r\n9474\r\n\r\nOutput:\r\nArmstrong number\r\n\r\nInput:\r\n9474\r\n\r\nOutput:\r\nArmstrong number\r\n\r\nInput:\r\n9474\r\n\r\nOutput:\r\nArmstrong number\r\n\r\nInput:\r\n9474\r\n\r\nOutput:\r\nArmstrong number\r\n\r\nInput:\r\n9474\r\n\r\nOutput:\r\nAr","votes":null},{"text":"\r\n    # Function to find the sum of the cube of every digit of the number.\r\n   ","votes":null},{"text":"\r\n    # number = str(number)\r\n    # digits = len(number)\r\n    # sum_of_cubes = 0\r\n    # for digit in number:\r\n    #     sum_of_cubes += int(digit) ** digits\r\n    # if sum_of_cubes == number:\r\n    #     return True\r\n    # return False\r\n\r\n    if number == 0:\r\n        return True\r\n    \r\n    number = str(number)\r\n    digits = len(number)\r\n    sum_of_cubes = 0\r\n    for digit in number:\r\n        sum_of_cubes += int(digit) ** digits\r\n    if sum_of_cubes == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Test cases:\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(234))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(234))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(234))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(234))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(234))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(234))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(234))\r\nprint(armstrong_number(","votes":null},{"text":"\r\n\r\n    # split the no. into individual digits\r\n    digits = [int(i) for i in str(number)]\r\n\r\n    # calculate the sum of cubes of each digit\r\n    sum_of_cubes = sum([i ** 3 for i in digits])\r\n\r\n    # if the number is equal to the sum of its cubes\r\n    if number == sum_of_cubes:\r\n        print(f\"{number} is an armstrong number.\")\r\n    else:\r\n        print(f\"{number} is not an armstrong number.\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter the number: \"))\r\n","votes":null},{"text":"\r\n    temp = number\r\n    list_num = []\r\n    while temp > 0:\r\n        list_num.append(temp % 10)\r\n        temp = temp\/\/10\r\n    list_num.reverse()\r\n    sum_of_list = 0\r\n    for i in list_num:\r\n        sum_of_list += i**3\r\n    if sum_of_list == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(0))\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(153","votes":null},{"text":"\r\n    no_of_digits = len(str(number))\r\n    temp = number\r\n    sum_of_digits = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum_of_digits += digit ** no_of_digits\r\n        temp \/\/= 10\r\n    return sum_of_digits == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter a number to check: \"))\r\n    result = armstrong_number(number)\r\n    if result:\r\n        print(\"{} is an Armstrong number.\".format(number))\r\n    else:\r\n        print(\"{} is not an Armstrong number.\".format(number))\r\n\r\n'''\r\nSample I\/O:\r\n\r\nI\/O 1:\r\nEnter a number to check: 153\r\n153 is not an Armstrong number.\r\n\r\nI\/O 2:\r\nEnter a number to check: 1531\r\n1531 is an Armstrong number.\r\n\r\nI\/O 3:\r\nEnter a number to check: 153153\r\n153153 is not an Armstrong number.\r\n\r\nI\/O 4:\r\nEnter a number to check: 1531531\r\n1531531 is an Armstrong number.\r\n\r\nI\/O 5:\r\nEnter a number to check: 153153153\r\n153153153 is not an Armstrong number.\r\n\r\nI\/O 6:\r\nEnter a number to check: 1531531531\r\n1531531531 is an","votes":null},{"text":"\r\n    num = str(number)\r\n    n = len(num)\r\n    sum = 0\r\n    for i in range(0, n):\r\n        sum += int(num[i])**n\r\n    if number == sum:\r\n        print(\"Yes, it is an Armstrong number.\")\r\n    else:\r\n        print(\"No, it is not an Armstrong number.\")\r\n\r\narmstrong_number(153)\r\n#Yes, it is an Armstrong number.\r\narmstrong_number(12345)\r\n#No, it is not an Armstrong number.\r\narmstrong_number(100)\r\n#Yes, it is an Armstrong number.\r\narmstrong_number(1111111111111111)\r\n#Yes, it is an Armstrong number.\r\narmstrong_number(123123)\r\n#No, it is not an Armstrong number.\r\narmstrong_number(123123123)\r\n#Yes, it is an Armstrong number.\r\narmstrong_number(153)\r\n#Yes, it is an Armstrong number.\r\narmstrong_number(1111111111111111)\r\n#No, it is not an Armstrong number.\r\narmstrong_number(123123123)\r\n#Yes, it is an Armstrong number.\r\narmstrong_number(153)\r\n#Yes, it is an Armstrong number.\r\narmstrong_number(1111111111111111)\r\n#No, it is not an Armstrong number.\r\narmstrong_number(123123123)\r\n#Yes, it is an Armstrong number.\r\narmstrong_number(153)\r\n#Yes, it is an Armstrong number.\r\narmstrong_number(1111111111111111)\r\n#No, it is not an Armstrong number.\r\narmstrong_number(123123123)","votes":null},{"text":"\r\n    # Return true if number is an Armstrong number\r\n    # else return False\r\n    num_list = list(map(int, str(number)))\r\n    num_length = len(num_list)\r\n    sum = 0\r\n    for x in num_list:\r\n        sum += x**num_length\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    user_input = int(input(\"Enter a number: \"))\r\n    if armstrong_number(user_input):\r\n        print(\"{} is an Armstrong number.\".format(user_input))\r\n    else:\r\n        print(\"{} is not an Armstrong number.\".format(","votes":null},{"text":"\r\n    temp = number\r\n    sum_of_digit = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        temp = temp \/\/ 10\r\n        sum_of_digit += digit ** 3\r\n    if sum_of_digit == number:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter a number: \"))\r\n    if armstrong_number(number):\r\n        print(\"{} is an arm","votes":null},{"text":"\r\n    # Get the length of number\r\n    length = len(str(number))\r\n\r\n    # Extract the individual digits\r\n    digits = [int(n) for n in str(number)]\r\n\r\n    # Find the sum of the cubes\r\n    sum = 0\r\n    for i in digits:\r\n        sum += (i ** length)\r\n\r\n    if number == sum:\r\n        print(f\"{number} is an Armstrong number.\")\r\n    else:\r\n        print(f\"{number} is not an Armstrong number.\")\r\n\r\n\r\n# Test\r\nif __name__ == \"__main__\":\r\n    # Test 1\r\n    armstrong_number(153)\r\n\r\n    # Test 2\r\n    armstrong_number(100)\r\n\r\n    # Test 3\r\n    armstrong_number(4141)\r\n\r\n    # Test 4\r\n    armstrong_number(1331)\r\n\r\n    # Test 5\r\n    armstrong_number(371)\r\n\r\n    # Test 6\r\n    armstrong_number(1025)\r\n\r\n    # Test 7\r\n    armstrong_number(211)\r\n\r\n    # Test 8\r\n    armstrong_number(1024)\r\n\r\n    # Test 9\r\n    armstrong_number(123456789)\r\n\r\n    # Test 10\r\n    armstrong_number(12345)\r\n\r\n    # Test 11\r\n    armstrong_number(70570)\r\n\r\n    # Test 12\r\n    armstrong_number(123456)\r\n\r\n    # Test 13\r\n    armstrong_number(42567)\r\n\r\n    # Test 14\r\n    armstrong_number(25","votes":null},{"text":"\r\n    number = str(number)\r\n    sum = 0\r\n    for digit in number:\r\n        digit = int(digit)\r\n        sum += digit**len(number)\r\n    return sum == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input())\r\n    for number in range(1, n+1):\r\n        if armstrong_number(number):\r\n            print(number)\r\n","votes":null},{"text":"\r\n    \r\n    # Create an empty list\r\n    num_list = []\r\n    \r\n    # Extract each digit of the given number and append it to the list\r\n    while number > 0:\r\n        num_list.append(number % 10)\r\n        number = number \/\/ 10\r\n\r\n    # Calculate the sum of the cube of the digits and return\r\n    return sum(i ** 3 for i in num_list) == number\r\n\r\n\r\n# Driver Code \r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter a number: \"))\r\n    if armstrong_number(number):\r\n        print(\"Given number is an Armstrong number\")\r\n    else:\r\n        print(\"Given number is not an Armstrong number\")\r\n\r\n\"\"\"Output\r\n\r\nEnter a number: 153\r\nGiven number is not an Armstrong number\r\n\r\nEnter a number: 1530\r\nGiven number is an Armstrong number\r\n\r\nEnter a number: 1531\r\nGiven number is not an Armstrong number\r\n\r\nEnter a number: 1532\r\nGiven number is not an Armstrong number\r\n\r\nEnter a number: 1533\r\nGiven number is an Armstrong number\r\n\r\nEnter a number: 1534\r\nGiven number is not an Armstrong number\r\n\r\nEnter a number: 1535\r\nGiven number is not an Armstrong number\r\n\r\nEnter a number: 1536\r\nGiven number is not an Armstrong number\r\n\r\nEnter a number: 1537\r\nGiven number is not an Armstrong number\r\n\r\nEnter a number: 1538\r\nGiven number is not an Armstrong number\r\n\r\nEnter a number: 1539\r\nGiven number is not an Armstrong number\r\n\r\nEnter a number: 1540\r\nGiven number is not an Armstrong numbe","votes":null},{"text":"\r\n    # Your code goes here\r\n    if type(number) is not int:\r\n        raise ValueError('Invalid input!')\r\n    if number < 0:\r\n        raise ValueError('Invalid input!')\r\n\r\n    # split the number into list of digits\r\n    num_list = list(str(number))\r\n\r\n    # get the length of the number\r\n    length = len(num_list)\r\n\r\n    # get the sum of cubes of the digits\r\n    total = 0\r\n    for num in num_list:\r\n        total += int(num)**length\r\n\r\n    # compare the total and the original number\r\n    return total == number\r\n\r\n\r\nif __name__ == '__main__':\r\n    # for the following numbers, the function returns True\r\n    print(armstrong_number(0))\r\n    print(armstrong_number(1))\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(153**3))\r\n    print(armstrong_number(1530))\r\n    print(armstrong_number(15300))\r\n\r\n    # for the following numbers, the function returns False\r\n    print(armstrong_number(000))\r\n    print(armstrong_number(1530000))\r\n    print(armstrong_number(1234567))\r\n    print(armstrong_number(","votes":null},{"text":"\r\n    num = number\r\n    count = 0\r\n    temp = 0\r\n    while num > 0:\r\n        temp = num % 10\r\n        count += 1\r\n        num = num \/\/ 10\r\n    num = number\r\n    temp2 = 0\r\n    sum = 0\r\n    while num > 0:\r\n        temp","votes":null},{"text":"\r\n    temp = number\r\n    count = 0\r\n    while temp > 0:\r\n        temp \/\/= 10\r\n        count += 1\r\n    temp = number\r\n    sum = 0\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** count\r\n        temp \/\/= 10\r\n    if sum == number:\r\n        print(f\"{number} is armstrong number.\")\r\n    else:\r\n        print(f\"{number} is not armstrong number.\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    armstrong_number(153)\r\n    armstrong_number(123456789)\r\n    armstrong_number(99999999)\r\n    armstrong_number(99999)\r\n    armstrong_number(1234567890)\r\n    armstrong_number(987654321)\r\n    armstrong_number(9876543)\r\n    armstrong_number(1234)\r\n    armstrong_number(123)\r\n    armstrong_number(12345678901234567890)\r\n    armstrong_number(123456789012345678901234567890)\r\n    armstrong_number(1234567890123456789012345678901234567890)\r\n    armstrong_number(12345678901234567890123456789012345678901234567890)\r\n    armstrong_number(1234567890123456789012345","votes":null},{"text":"\r\n    # get the number of digits\r\n    number = int(number)\r\n    num_digits = len(str(number))\r\n\r\n    # find the cube of each digit\r\n    total = 0\r\n    for digit in str(number):\r\n        total += int(digit)**num_digits\r\n\r\n    # check if total is equal to number\r\n    if total == number:\r\n        print(\"It is an armstrong number.\")\r\n    else:\r\n        print(\"It is not an armstrong number.\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = input(\"Enter a number: \")\r\n    armstrong_number(number)\r\n\r\n\r\n\"\"\"\r\nSample Input and Output:\r\n\r\nEnter a number: 153\r\nIt is an armstrong number.\r\n\r\nEnter a number: 123\r\nIt is not an armstrong number.\r\n\r\nEnter a number: 1530\r\nIt is not an armstrong number.\r\n\r\nEnter a number: 1230\r\nIt is not an armstrong number.\r\n\r\nEnter a number: 15300\r\nIt is not an armstrong number.\r\n\r\nEnter a number: 12300\r\nIt is not an armstrong number.\r\n\r\nEnter a number: 153000\r\nIt is not an armstrong number.\r\n\r\nEnter a number: 123000\r\nIt is","votes":null},{"text":"\r\n    temp = number\r\n    count = 0\r\n    while temp > 0:\r\n        count += 1\r\n        temp \/= 10\r\n    digits = [int(i) for i in str(number)]\r\n    total = 0\r\n    for i in digits:\r\n        total += i ** count\r\n    return total == number\r\n\r\n\r","votes":null},{"text":"\r\n    num_list = str(number)\r\n    n = len(num_list)\r\n    sum = 0\r\n    for digit in num_list:\r\n        digit = int(digit)\r\n        sum += digit ** n\r\n    if sum == number:\r\n        return True\r\n    return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input(\"Enter a number: \"))\r\n    if armstrong_number(num):\r\n        print(\"{} is an armstrong number\".format(num))\r\n    else:\r\n        print(\"{} is not an armstrong number\".format","votes":null},{"text":"\r\n    return str(number) == str(sum(int(x)**len(str(number)) for x in str(number)))\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(123))\r\n    print(armstrong_number(1234))\r\n    print(armstrong_number(12345))\r\n    print(armstrong_number(123456))\r\n    print(armstrong_number(1234567))\r\n    print(armstrong_number(12345678))\r\n    print(armstrong_number(123456789))\r\n    print(armstrong_number(123456789","votes":null},{"text":"\r\n    n = str(number)\r\n    l = len(n)\r\n    s = 0\r\n\r\n    for i in range(l):\r\n        s += int(n[i]) ** l\r\n\r\n    if s == number:\r\n        print(True)\r\n    else:\r\n        print(False)\r\n\r\n\r","votes":null},{"text":"\r\n    n = number\r\n    s = 0\r\n    while n > 0:\r\n        digit = n % 10\r\n        s += digit ** 3\r\n        n \/\/= 10\r\n    return s == number\r\n\r\n\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(827))\r\nprint(armstrong_number(1634))\r\nprint(armstrong_number(9474))\r\nprint(armstrong_number(143))\r\nprint(arm","votes":null},{"text":"\r\n    \r\n    # Function to calculate the sum of the digits of a number\r\n   ","votes":null},{"text":"\r\n    temp = number\r\n    count = 0\r\n    while temp > 0:\r\n        temp = temp \/\/ 10\r\n        count = count + 1\r\n    count_new = count\r\n    n = number\r\n    while n > 0:\r\n        temp2 = n % 10\r\n        count_new = count_new - 1\r\n        if temp2 ** count_new == temp2:\r\n            n = n \/\/ 10\r\n        else:\r\n            return False\r\n    return True\r\n\r\n\"\"\"\r\nTesting the function\r\n\"\"\"\r\nprint(armstrong_number(0))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(371))\r\nprint(armstrong_number(253))\r\nprint(armstrong_number(123))\r\nprint(armstrong_number(153))\r\nprint(armstrong_number(370))\r\nprint(armstrong_number(371))\r\nprint(arm","votes":null},{"text":"\r\n    # base case\r\n    if number == 0:\r\n        return True\r\n    # recursive case\r\n    return (int(number % 10 ** (len(str(number)) - 1) \/ 10 ** (len(str(number)) - 2)) == (int(str(number) ** 3) % 10)) and armstrong_number(number \/\/ 10 ** (len(str(number)) - 1))\r\n\r\n\r\nif __name__ == '__main__':","votes":null},{"text":"\r\n    number = str(int(number))\r\n    digit = len(number)\r\n    sum_of_digits = 0\r\n    for digit in number:\r\n        sum_of_digits += int(digit) ** digit\r\n    if sum_of_digits == int(number):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter a number: \"))\r\n    if armstrong_number(number):\r\n        print(\"Given number\", number, \"is an Armstrong number\")\r\n    else:\r\n        print(\"Given number\", number, \"is not an Armstrong number\")\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r","votes":null},{"text":"\r\n    # If number is less than 0 or not an integer, return False\r\n    if not isinstance(number, int) or number < 0:\r\n        return False\r\n\r\n    # Extract individual digits from number\r\n    n = str(number)\r\n    digits = [int(digit) for digit in n]\r\n\r\n    # Calculate sum of cubes of individual digits\r\n    total = sum([int(digit)**3 for digit in digits])\r\n\r\n    # If total is equal to original number, then return True\r\n    if number == total:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(armstrong_number(153))\r\n    print(armstrong_number(123))\r\n    print(armstrong_number(1230))\r\n    print(armstrong_number(100))\r\n    print(armstrong_number(111))\r\n    print(armstrong_number(1111))\r\n    print(armstrong_number(1234))\r\n    print(armstrong_number(12345))\r\n    print(armstrong_number(123456))\r\n    print(armstrong_number(1234567))\r\n    print(armstrong_number(9999))\r\n    print(","votes":null},{"text":"\r\n    num = str(number)\r\n    sum = 0\r\n\r\n    for i in num:\r\n        sum += int(i)**len(num)\r\n\r\n    if sum == number:\r\n        print(\"It is a Armstrong number.\")\r\n    else:\r\n        print(\"It is not a Armstrong number.\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    num = int(input(\"Enter a number: \"))\r","votes":null},{"text":"\r\n    number = str(number)\r\n    length = len(number)\r\n    sum = 0\r\n    for i in number:\r\n        sum += int(i)**length\r\n    if sum == int(number):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Tester function\r\nif __name__ == '__main__':\r\n    print(armstrong_number(","votes":null},{"text":"\r\n\r\n    n_str = str(number)\r\n    length = len(n_str)\r\n    sum1 = 0\r\n    for i in range(length):\r\n        sum1 = sum1 + int(n_str[i]) ** length\r\n    if number == sum1:\r\n        print(\"Armstrong number\")\r\n    else:\r","votes":null},{"text":"\r\n\r\n    # Initializing the value of the sum to zero\r\n    sum=0\r\n    \r\n    # Initializing the value of the number to convert to string\r\n    converted_number = str(number)\r\n    \r\n    # Converting the number into list\r\n    number_list = list(converted_number)\r\n    \r\n    # Creating a for loop to iterate over the list\r\n    for digit in number_list:\r\n        \r\n        # Converting the character to integer\r\n        digit=int(digit)\r\n        \r\n        # Calculating the sum\r\n        sum += digit**len(number_list)\r\n    \r\n    # Comparing the sum with the original number\r\n    if sum == number:\r\n        print(f\"{number} is an Armstrong number\")\r\n        \r\n    else:\r\n        print(f\"{number} is not an Armstrong number\")\r\n        \r","votes":null},{"text":"\r\n    # Initialize the result\r\n    result = 0\r\n    # Calculate the sum of the cube of each digit\r\n    for x in str(number):\r\n        result += int(x) ** 3","votes":null},{"text":"\r\n    # code here\r\n    num_list = list(str(number))\r\n    l = len(num_list)\r\n    sum_ = 0\r\n    for i in range(l):\r\n        num = int(num_list[i])\r\n        num = num**l\r\n        sum_ += num\r\n    if number == sum_:\r\n        print(f\"{number} is a Armstrong number.\")\r\n    else:\r\n        print(f\"{number} is not a Armstrong number.\")\r\n\r\narmstrong_number(407)\r\n\r\n# Output: 407 is a Armstrong number.\r\n\r","votes":null},{"text":"\r\n    digits = 0\r\n    orig_number = number\r\n    reminder = 0\r\n    sum = 0\r\n    while number > 0:\r\n        digits += 1\r\n        reminder = number % 10\r\n        sum += reminder ** digits\r\n        number = number \/\/ 10\r\n    if orig_number == sum:\r\n        print(f\"The number {orig_number} is an Armstrong number.\")\r\n    else:\r\n        print(f\"The number {orig_number} is not an Armstrong number.\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter a number: \"))\r\n    armstrong_number(number)\r\n","votes":null},{"text":"\r\n    n = len(str(number))\r\n    s = 0\r\n    for i in str(number):\r\n        s += int(i)**n\r\n    return s == number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # number = int(input())\r\n    # print(armstrong","votes":null},{"text":"\r\n\r\n    number_of_digits = len(str(number))\r\n    temp = number\r\n    sum = 0\r\n\r\n    while temp > 0:\r\n        digit = temp % 10\r\n        sum += digit ** number_of_digits\r\n        temp \/\/= 10\r\n\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = int(input(\"Enter a number: \"))\r\n    if armstrong_number(number):\r\n        print(f\"{number} is armstrong number\")\r\n    else:\r\n","votes":null},{"text":"\r\n    str_number = str(number)\r\n    length = len(str_number)\r\n    sum = 0\r\n    for digit in str_number:\r\n        sum += int(digit) ** length\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":\r\n   ","votes":null},{"text":"\r\n    # your code goes here\r\n    temp=number\r\n    count=0\r\n    while temp!=0:\r\n        temp=temp\/\/10\r\n        count+=1\r\n    temp=number\r\n    sum=0\r\n    while temp!=0:\r\n        digit=temp%10\r\n        sum+=digit**count\r\n        temp=temp\/\/10\r\n    if sum==number:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n# Takes input from the user\r\nnumber = int(input(\"Enter a number: \"))\r\n\r\nif armstrong_number(number):\r\n    print(f\"{number} is an armstrong number.\")\r\nelse:\r\n    print(f\"{number} is not an armstrong number.\")\r\n\r\n\r\n```\r\n\r\n## Output:\r\n![image](https:\/\/user-images.githubusercontent.com\/94810884\/154528937-30820104-923d-4c5b-9432-20bc29a5f16d.png)\r\n\r\n\r\n\r\n\r\n##","votes":null},{"text":"\r\n    n = []\r\n    while number > 0:\r\n        n.append(number % 10)\r\n        number = number \/\/ 10\r\n    length = len(n)\r\n    sum = 0\r\n    for i in range(length):\r\n        sum += n[i] ** length\r\n    if sum == number:\r\n        print(number, ' is an Armstrong number')\r\n    else:\r\n        print(number, ' is not an Armstrong number')\r\n\r\n\r","votes":null}],"time":{"count":44.0,"avg":137042.9572727273,"std":35748.9167980838,"cov":0.2608592044}}
{"id":599,"question":"def sum_average(number):\r\n    \"\"\"Write a function to find sum and average of first n natural numbers.\"\"\"","answers":[{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum = sum + i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r\nprint(sum_average(10))\r\n\r\n\r","votes":76903.804},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    return sum, sum\/number\r\n\r\n\r\n# print(sum_average(5))\r\n# print(sum_average(10))\r\n# print(sum_average(15))\r\n# print(sum_average(20))\r\n\r\n\r","votes":80858.1},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    return (sum, sum\/number)\r\n\r\n\r","votes":81002.952},{"text":"\r\n    x = 0\r\n    for i in range(1, number + 1):\r\n        x = x + i\r\n\r\n    return x, x \/ number\r\n\r\n\r","votes":83564.7},{"text":"\r\n    total = 0\r\n    for i in range(1,number+1):\r\n        total += i\r\n    return total, total\/number\r\n\r","votes":83887.896},{"text":"\r\n    summation = 0\r\n    for i in range(1, number+1):\r\n        summation += i\r\n    return summation, (summation\/number)\r\n\r\n\r","votes":84193.076},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(1,number+1):\r\n        sum = sum + i\r\n    return sum, sum\/number\r\n\r","votes":87046.008},{"text":"\r\n    #Your code here\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    return sum, sum\/number\r\n\r\n\r","votes":93236.484},{"text":"\r\n\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    num = int(input(\"Enter a number: \"))\r\n    print(sum_average(num))\r\n\r\n\"\"\"\r\nOutput:\r\nEnter a number: 5\r\n(15, 3.0)\r\n\"\"\"\r\n","votes":93993.66},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r\n\r","votes":94986.504},{"text":"\r\n    x = 1\r\n    sum = 0\r\n    while x <= number:\r\n        sum += x\r\n        x += 1\r\n    return sum, sum \/ number\r\n\r\n\r","votes":97168.316},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i + 1\r\n        # or sum = sum + i + 1\r\n    average = float(sum)\/float(number)\r\n    return sum, average\r\n\r\n\r","votes":97540.512},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r\nprint(sum_average(5))\r\nprint(sum_average(10))\r\nprint(sum_average(15))\r\n\r\n\r\n# Write a function to find sum and average of first n natural numbers.\r","votes":99531.96},{"text":"\r\n    sum=0\r\n    for i in range(number):\r\n        sum=sum+i+1\r\n    average=sum\/number\r\n    return sum,average\r\n\r\n#test\r\nprint(sum_average(5))\r\n\r\n\r","votes":100210.884},{"text":"\r\n    sum = 0\r\n    for i in range(1,number+1):\r\n        sum += i\r\n    return sum,sum\/number\r\n\r\nprint(sum_average(10))\r\n\r\n# 1\r\n# 10\r\n\r","votes":103255.46},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum = sum + i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\nsum, average = sum_average(10)\r\nprint('Sum of first 10 natural numbers is: {}'.format(sum))\r\nprint('Average of first 10 natural numbers is: {}'.format(average))\r\n\r","votes":103993.42},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    average = sum\/number\r\n    return sum, average\r\n\r\n\r","votes":104748.124},{"text":"\r\n    list_of_number = []\r\n    for i in range(1, number + 1):\r\n        list_of_number.append(i)\r\n    sum_of_number = sum(list_of_number)\r\n    average_of_number = sum_of_number \/ number\r\n    return sum_of_number, average_of_number\r\n    \r\n# sum_average(10)\r\n\r\n\r","votes":108224.552},{"text":"\r\n    \r\n    n = 0\r\n    sum = 0\r\n    average = 0\r\n    \r\n    while n < number:\r\n        n = n + 1\r\n        sum = sum + n\r\n        average = sum \/ n\r\n        \r\n    return sum, average\r\n\r\n\r","votes":112279.256},{"text":"\r\n    if number < 1:\r\n        return \"Enter a positive number\"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    return (sum, sum\/number)\r\n\r\n\r","votes":113019.832},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum = sum + i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter a number: \"))\r\n    sum, average = sum_average(number)\r\n    print(\"Sum =\", sum, \"Average =\", round(average, 2))\r\n    exit()\r\n\r\n# Output\r\n# Enter a number: 5\r\n# Sum = 15 Average = 3.00\r\n\r\n# Output 2\r\n# Enter a number: 10\r\n# Sum = 55 Average = 5.50\r\n\r\n# Output 3\r\n# Enter a number: 20\r\n# Sum = 210 Average = 10.50\r\n\r\n# Output 4\r\n# Enter a number: 30\r\n# Sum = 605 Average = 18.33\r\n\r\n# Output 5\r\n# Enter a number: 40\r\n# Sum = 1010 Average = 25.25\r\n\r\n# Output 6\r\n# Enter a number: 50\r\n# Sum = 1515 Average = 30.20\r\n\r\n# Output 7\r\n# Enter a number: 60\r\n# Sum = 2121 Average = 34.67\r\n\r\n# Output 8\r\n# Enter a number: 70\r\n# Sum = 2727 Average = 40.30\r\n\r\n# Output 9\r\n# Enter a number: 80\r\n# Sum = 3333 Average = 43.83\r\n\r\n# Output 10\r\n# Enter a number: 90\r\n# Sum = 3939 Average = 47.76\r\n\r\n# Output 11\r","votes":114044.584},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":115337.248},{"text":"\r\n    total = 0\r\n    for i in range(1, number+1):\r\n        total += i\r\n    return total, total\/number\r\n\r\n\r","votes":116058.096},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum = sum + i\r\n    average = sum\/number\r\n    return sum, average\r\n\r\n\r","votes":116413.632},{"text":"\r\n    \r\n    sum = 0\r\n    \r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    \r\n    average = sum \/ number\r\n    \r\n    return (sum, average)\r\n\r\nprint(sum_average(6))\r\n\r\n\r","votes":116728.536},{"text":"\r\n    sum=0\r\n    for i in range(1,number+1):\r\n        sum = sum + i\r\n    return sum, sum\/number\r\n\r\n\r","votes":122841.144},{"text":"\r\n    sum_num = 0\r\n    for i in range(1, number + 1):\r\n        sum_num += i\r\n    avg_num = sum_num \/ number\r\n    return sum_num, avg_num\r\n\r\n\r","votes":123547.98},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n        average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":129362.696},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r\n\r\nprint(sum_average(4))\r\n\r\n\r","votes":136063.644},{"text":"\r\n    sum = 0\r\n    avg = 0\r\n    for i in range(0, number):\r\n        sum += i + 1\r\n        avg = sum\/number\r\n    return sum, avg\r\n\r\n\r","votes":139912.756},{"text":"\r\n    total = 0\r\n    for i in range(1, number+1):\r\n        total += i\r\n    average = total \/ number\r\n    return total, average\r\n\r\n\r","votes":141212.56},{"text":"\r\n    sum=0\r\n    for i in range(1,number+1):\r\n        sum=sum+i\r\n    average=sum\/number\r\n    return sum,average\r\n\r\n# Driver Code\r\nif __name__ == '__main__':\r\n    number=int(input(\"Enter the number: \"))\r\n    sum,average=sum_average(number)\r\n    print(\"Sum: \",sum)\r\n    print(\"Average: \",average)\r\n\r\n\"\"\"\r\nSample Input\/Output:\r\n\r\n1) Enter the number: 10\r\nSum:  55\r\nAverage:  5.5\r\n2) Enter the number: 5\r\nSum:  15\r\nAverage:  3.0\r\n3) Enter the number: 1\r\nSum:  1\r\nAverage:  1.0\r\n\"\"\"\r\n","votes":150550.22},{"text":"\r\n\r\n    sum = 0\r\n    average = 0\r\n    for x in range(1, number + 1):\r\n        sum = sum + x\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r\n# Driver code\r\nif __name__ == \"__main__\":\r\n    num = 10\r\n    sum, average = sum_average(num)\r\n    print(\"Sum of first\", num, \"numbers is: \", sum)\r\n    print(\"Average of first\", num, \"numbers is: \", average)\r\n\r\n# Sample Input Output -\r\n\r\n# Enter number: 10\r\n# Sum of first 10 numbers is:  55\r\n# Average of first 10 numbers is:  5.5\r\n\r\n# Enter number: 20\r\n# Sum of first 20 numbers is:  210\r\n# Average of first 20 numbers is:  10.5\r\n\r\n# Enter number: 50\r\n# Sum of first 50 numbers is:  1275\r\n# Average of first 50 numbers is:  25.75\r\n\r\n# Enter number: 100\r\n# Sum of first 100 numbers is:  5050\r\n# Average of first 100 numbers is:  50.5\r\n\r\n# Enter number: 30\r\n# Sum of first 30 numbers is:  180\r\n# Average of first 30 numbers is:  6.0\r\n\r\n# Enter number: 1000\r\n# Sum of first 1000 numbers is:  500500\r\n# Average of first 1000 numbers is:  500.5\r\n\r\n# Enter number: 5000\r\n# Sum of first 5000 numbers is:  25002500\r\n# Average of first 5000 numbers is:  5000.0\r\n","votes":153504.056},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i + 1\r\n    avg = sum \/ number\r\n    return (sum, avg)\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    n = int(input('Enter number of terms: '))\r\n    sum, avg = sum_average(n)\r\n    print('Sum of first', n, 'natural numbers is:', sum)\r\n    print('Average of first', n, 'natural numbers is:', avg)\r\n\r\n# Output:\r\n# Enter number of terms: 5\r\n# Sum of first 5 natural numbers is: 15\r\n# Average of first 5 natural numbers is: 3.0\r\n\r\n# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n\r\n# In this method, we are using a loop to calculate the sum. For each iteration, we are adding the value of i+1\r\n# to the sum. We are calculating the average outside the loop. So, we are not calculating the average for each\r\n# iteration. We are only calculating it once at the end of the loop.\r\n# Hence, the time complexity is O(n).\r\n# The space complexity is O(1) because we are not using any additional space.\r\n\r\n# Method 2\r","votes":158189.088},{"text":"\r\n    # Your code here\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n        average = sum \/ number\r\n    return sum, average\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","votes":176272.352},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n        \r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = int(input('Enter a number: '))\r\n    sum, average = sum_","votes":180816.62},{"text":"\r\n    sum = 0\r\n    average = 0\r\n    for x in range(1,number + 1):\r\n        sum += x\r\n        average = sum \/ number\r\n    return sum, average\r\n\r\n\r\n# Tests\r\nprint(sum_average(5))\r\nprint(sum_average(10))\r\nprint(sum_average(15))\r\nprint(sum_average(20))\r\n\r\n# Output:\r\n# (15, 3.0)\r\n# (55, 11.0)\r\n# (120, 20.0)\r\n# (2","votes":189214.504},{"text":"\r\n    sum_ = 0\r\n    for num in range(1, number + 1):\r\n        sum_ += num\r\n    return sum_, sum_ \/ number\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter a number: \"))\r\n    sum_, average = sum_average(number)\r\n    print(\"Sum:\", sum_)\r\n    print(\"Average:\", average)\r\n\r\n\"\"\"\r\nInput: 3\r\nOutput:\r\nSum: 6\r\nAverage: 2.0\r\n\"\"\"\r\n\r\n# ------------------------------------------------------------------------------------------------\r\n\r","votes":199929.904},{"text":"\r\n    if type(number) != int:\r\n        return \"Not a valid input\"\r\n    if number <= 0:\r\n        return \"Not a valid input\"\r\n    sum = 0\r\n    for i in range(1,number+1):\r\n        sum = sum+i\r\n    return sum,sum\/number\r\n\r\nprint(sum_average(3))\r\nprint(sum_average(-1))\r\nprint(sum_average(\"hello\"))\r\nprint(sum_average(1.1))\r\nprint(sum_average(5))\r\nprint(sum_average(6))\r\nprint(sum_average(7))\r\nprint(sum_average(8))\r\nprint(sum_average(9))\r\nprint(sum_average(10))\r\n\r\n\r\n\r\n\r\n\r","votes":213721.736},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, sum\/number\r\n\r\n\r\n# Driver code\r\nif __name__ == '__main__':\r\n    number = int(input(\"Enter a number: \"))\r\n    result = sum_average(number)\r\n    print(\"Sum: \", result[0], \"Average: \", result[1])\r\n\r\n# Sample Input:\r\n# Enter a number: ","votes":229405.516},{"text":"\r\n    sum_ = 0\r\n    for i in range(1, number + 1):\r\n        sum_ += i\r\n    return sum_ \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r\n\r\nn = int(input(\"Enter","votes":null},{"text":"\r\n    sum_of_n_natural_numbers = 0\r\n    for i in range(1, number + 1):\r\n        sum_of_n_natural_numbers += i\r\n    return sum_of_n_natural_numbers\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    return sum(range(number)), sum(range(number))\/number\r\n\r\n\r\nprint(sum_average(5))\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum = sum + i\r\n\r\n    average = sum \/ number\r\n    print(\"Sum of first \" + str(number) + \" natural numbers is \" + str(sum))\r\n    print(\"Average of first \" + str(number) + \" natural numbers is \" + str(average))\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum\/number\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    average = 0\r\n    for num in range(number):\r\n        sum += num\r\n        average = sum \/ (num + 1)\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i\r\n    average = sum\/number\r\n    print(\"Sum: \", sum)\r\n    print(\"Average: \", average)\r\n\r\n\r","votes":null},{"text":"\r\n    average = 0\r\n    sum = 0\r\n    for x in range(1, number+1):\r\n        average += x\r\n        sum += x\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    \r\n    print('Sum of first', number, 'natural numbers:', sum)\r\n    print('Average of first', number, 'natural numbers:', sum\/number)\r\n\r\n\r","votes":null},{"text":"\r\n    sum_num = 0\r\n    for i in range(number):\r\n        sum_num += i\r\n    average_num = sum_num \/ number\r\n    return sum_num, average_num\r\n\r\n\r","votes":null},{"text":"\r\n    result = []\r\n    for i in range(1, number+1):\r\n        result.append(i)\r\n    return sum(result), round(sum(result)\/number, 2)\r\n\r\nsum, average = sum_average(10)\r\nprint(sum)\r\nprint(average)\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum = sum + i\r\n    return sum, sum \/ number\r\n\r\n\r\nprint(sum_average(10))\r\nprint(sum_average(5))\r\nprint(sum_average(100))\r\nprint(sum_average(1000))\r\nprint(sum_average(5000))\r\nprint(sum_average(10000))\r\nprint(sum_average(50000))\r\nprint(sum_average(100000))\r\nprint(sum_average(500000))\r\nprint(sum_average(1000000))\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(0, number):\r\n        sum += i\r\n    average = sum \/ number\r\n    return sum, average\r\n    \r\n\r\nprint('Function to find sum and average of first n natural numbers.')\r\n\r\nnumber = int(input('Enter a number: '))\r\n\r\nsum, average = sum_average(number)\r\n\r\nprint('Sum = ' + str(sum))\r\nprint('Average = ' + str(average))\r\n\r\n\r\n\r\n\r\n# Task 1\r","votes":null},{"text":"\r\n    sum = 0\r\n    average = 0\r\n    for i in range(1,number+1):\r\n        sum += i\r\n        average = sum\/i\r\n    print(f\"Sum:{sum}\\nAverage:{average:.2f}\")\r\n\r\n\r\n# Driver code\r\n\r\nnumber = int(input(\"Enter the number: \"))\r\nsum_average(number)\r\n\r\n# Method 2\r\n\r","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(1, number+1):\r\n        total = total + i\r\n    return total\/number\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(range(1, number + 1)), sum(range(1, number + 1)) \/ number\r\n\r\n\r\nprint('Sum and average of first 10 natural numbers:', sum_average(10))\r\nprint('Sum and average of first 5 natural numbers:', sum_average(5))\r\nprint('Sum and average of first 2 natural numbers:', sum_average(2))\r\nprint('Sum and average of first 0 natural numbers:', sum_average(0))\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(range(1, number + 1)) \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    average = 0\r\n    for i in range(number):\r\n        sum += i\r\n        average = float(sum)\/(i+1)\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for number in range(number):\r\n        sum += number\r\n    return sum\/\/number, sum\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(range(number)), sum(range(number))\/number\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum = sum + i\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r\nsum_average(10)\r\n\r\n\r\n#","votes":null},{"text":"\r\n    sum_number = 0\r\n    for i in range(1, number+1):\r\n        sum_number += i\r\n    return sum_number\/number\r\n\r","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(1, number + 1):\r\n        total += i\r\n    return total \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number):\r\n        sum += i\r\n    return sum, float(sum)\/number\r\n\r","votes":null},{"text":"\r\n    # sum = 0\r\n    # for i in range(number):\r\n    #     sum += i\r\n    # return sum\r\n    return sum(range(number)) \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    # User should enter a number\r\n    number = int(input(\"Enter a number: \"))\r\n\r\n    # Sum of the first n natural numbers\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n\r\n    # Average of the first n natural numbers\r\n    average = sum \/ number\r\n\r\n    print(\"The sum of the first\", number, \"natural numbers is\", sum, \".\")\r\n    print(\"The average of the first\", number, \"natural numbers is\", average, \".\")\r\n\r\n\r\n# Calling the function\r\nsum_average(10)\r\n\r\n\r\n# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(1, number + 1):\r\n        total += i\r\n    print(\"Sum of first\", number, \"natural numbers is:\", total)\r\n    print(\"Average of first\", number, \"natural numbers is:\", total \/ number)\r\n\r\n\r\n\"\"\"\r\nWrite a function to find sum and average of first n natural numbers.\r\nUse input() to get the value of n.\r\n\"\"\"\r","votes":null},{"text":"\r\n    numbers = []\r\n    for i in range(1, number + 1):\r\n        numbers.append(i)\r\n    return sum(numbers) \/ len(numbers)\r\n\r\n\r\nprint(sum_average(10))\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    average = 0\r\n    for i in range(number):\r\n        sum = sum + i\r\n        average = sum \/ number\r\n    return sum, average\r\n\r\n\r\nsum, average = sum_average(5)\r\nprint(sum)\r\nprint(average)\r\n\r\n\r","votes":null},{"text":"\r\n    sum_ = 0\r\n    for i in range(1, number + 1):\r\n        sum_ += i\r\n    return sum_, sum_ \/ number\r\n\r\n\r\nif __name__ == '__main__':\r\n    arr = int(input","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum = sum + i\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n        \r\n    return sum \/ number\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    number = 5\r\n    print(\"Sum and Average of first","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i+1\r\n    print(\"Sum of first {} natural numbers is {}\".format(number,sum))\r\n    print(\"Average of first {} natural numbers is {}\".format(number,(sum\/number)))\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n\r\n    return sum\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i+1\r\n    average = sum\/number\r\n    return sum, average\r\n\r\n\r\nsum, average = sum_average(5)\r\n\r\nprint(sum, average)\r\n\r\n\r\n\"\"\"\r\nTest","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    average = sum \/ number\r\n    print(\"Sum = {}\".format(sum))\r\n    print(\"Average = {}\".format(average))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter the number: \"))\r\n    sum_average(n)\r\n\r\n\"\"\"\r\nTime Complexity: O(n)\r\nSpace Complexity: O(1)\r\n\r\nSAMPLE INPUT AND OUTPUT\r\n","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum +=i\r\n    return f\"Sum: {sum}\"\r\n\r\nsum_average(5)\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum = sum + i\r\n    return sum \/ number\r\n\r\n\r\nprint(f'The sum and average of first 5 natural numbers is {sum_average(5)}')\r\nprint(f'The sum and average of first 10 natural numbers is {sum_average(10)}')\r\nprint(f'The sum and average of first 15 natural numbers is {sum_average(15)}')\r\nprint(f'The sum and average of first 20 natural numbers is {sum_average(20)}')\r\nprint(f'The sum and average of first 25 natural numbers is {sum_average(25)}')\r\nprint(f'The sum and average of first 30 natural numbers is {sum_average(30)}')\r\nprint(f'The sum and average of first 35 natural numbers is {sum_average(35)}')\r\nprint(f'The sum and average of first 40 natural numbers is {sum_average(40)}')\r\nprint(f'The sum and average of first 45 natural numbers is {sum_average(45)}')\r\nprint(f'The sum and average of first 50 natural numbers is {sum_average(50)}')\r\nprint(f'The sum and average of first 55 natural numbers is {sum_average(55)}')\r\nprint(f'The sum and average of first 60 natural numbers is {sum_average(60)}')\r\nprint(f'The sum and average of first 65 natural numbers is {sum_average(65)}')\r\nprint(f'The sum and average of first 70 natural numbers is {sum_average(70)}')\r\nprint(f'The sum and average of first 75 natural numbers is {sum_average(75)}')\r\nprint(f'The sum and average of first 80 natural numbers is {sum_average(","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n\r\n    print(f\"Sum of first {number} numbers is {sum}\")\r\n    print(f\"Average of first {number} numbers is {sum \/ number}\")\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    total = 0\r\n    for i in range(number):\r\n        sum = sum + i\r\n        total = total + 1\r\n    average = sum \/ total\r\n    return sum, average\r\n\r\n\r\n# test the function\r\nprint(sum_average(5))\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number+1):\r\n        sum += i\r\n    return sum, sum\/number\r\n\r\n\r\n# Test case 1\r\nprint(sum_average(5))\r\n# Output: (15, 3.0)\r\n\r\n# Test case 2\r\nprint(sum_average(10))\r\n# Output: (55, 5.5)\r\n\r\n# Test case 3\r\nprint(sum_average(","votes":null},{"text":"\r\n\r\n    # Create a list\r\n    my_list = []\r\n    \r\n    # Add numbers in the list\r\n    for i in range(number):\r\n        my_list.append(i + 1)\r\n    \r\n    # Calculate sum of the list\r\n    sum_of_numbers = sum(my_list)\r\n    \r\n    # Display the sum\r\n    print(\"Sum of first {} natural numbers is {}\".format(number, sum_of_numbers))\r\n    \r\n    # Calculate average of the list\r\n    average = sum_of_numbers \/ number\r\n    \r\n    # Display the average\r\n    print(\"Average of first {} natural numbers is {:.2f}\".format(number, average))\r\n    \r\n\r\n# Call the function\r\nsum_average(5)\r\n\r\n\r\n\r","votes":null},{"text":"\r\n\r\n    # Declare a variable to store sum of natural numbers.\r\n    sum = 0\r\n\r\n    # Iterate from 1 to n.\r\n    for i in range(1, number + 1):\r\n\r\n        # Update sum.\r\n        sum = sum + i\r\n\r\n    # Print the sum.\r\n    print(\"Sum of first\", number, \"natural numbers =\", sum)\r\n\r\n    # Print the average.\r\n    print(\"Average of first\", number, \"natural numbers =\", sum \/ number)\r\n\r\n\r\n# Driver code\r\nsum_average(5)\r\n\r\n# This code is contributed by shreyas_srivastava\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(number):\r\n        sum += i+1\r\n    return sum\/number\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum, sum \/ number\r\n\r\n\r\nif __name__ == '__main__':\r\n    number = int(input","votes":null},{"text":"\r\n    total = 0\r\n    for i in range(number+1):\r\n        total += i\r\n    average = total\/number\r\n    return print(f\"The sum of first {number} natural numbers is {total}\")\r\n    return print(f\"The average of first {number} natural numbers is {average}\")\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for num in range(number):\r\n        sum += num\r\n    average = sum \/ number\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    sum1 = 0\r\n    for i in range(number):\r\n        sum1 += i\r\n        print(i)\r\n    average = sum1\/number\r\n    print(sum1)\r\n    print(average)\r\n\r\n\r\nsum_average(5)\r\n","votes":null},{"text":"\r\n    sum_ = 0\r\n    for i in range(number):\r\n        sum_ += i\r\n    return sum_, sum_ \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    my_sum=0.0\r\n    for i in range(number):\r\n        my_sum+=i\r\n    return my_sum\/number\r\n\r\nprint(f'Sum and average of first 5 natural numbers is {sum_average(5)}')\r\nprint(f'Sum and average of first 10 natural numbers is {sum_average(10)}')\r\nprint(f'Sum and average of first 20 natural numbers is {sum_average(20)}')\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum += i\r\n    return sum \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    n = number - 1\r\n    sum = n * (n + 1) \/ 2\r\n    average = sum \/ n\r\n    return sum, average\r\n\r\n\r","votes":null},{"text":"\r\n    return sum(range(number)) \/ number\r\n\r\n\r","votes":null},{"text":"\r\n    sum = 0\r\n    for i in range(1, number + 1):\r\n        sum = sum + i\r\n    avg = sum \/ number\r\n    return avg, sum\r\n\r\n\r","votes":null},{"text":"\r\n    if type(number)!=int or number<1:\r\n        raise Exception(\"The number must be a positive integer.\")\r\n    else:\r\n        sum=0\r\n        average=0\r\n        for i in range(1,number+1):\r\n            sum+=i\r\n            average=sum\/number\r\n            \r\n        print(f\"Sum of first {number} natural numbers is {sum}.\")\r\n        print(f\"Average of first {number} natural numbers is {average}.\")\r\n\r","votes":null},{"text":"\r\n    sum_ = 0\r\n    for i in range(1, number+1):\r\n        sum_ = sum_ + i\r\n    return sum_\/number","votes":null}],"time":{"count":40.0,"avg":123069.3093,"std":38572.3437982855,"cov":0.3134196821}}
{"id":600,"question":"def is_Even(n) :\r\n    \"\"\"Write a python function to check whether the given number is even or not using bitwise operator.\"\"\"","answers":[{"text":"\r\n    return n & 1 == 0\r\n\r","votes":52434.868},{"text":"\r\n    \r\n    return True if n & 1 == 0 else False\r\n\r\n\r","votes":59960.536},{"text":"\r\n    return n%2 == 0\r\n\r","votes":61354.248},{"text":"\r\n    #n=int(input(\"Enter a number: \"))\r\n    #return not(n & 1)\r\n    return not(n&1)\r\n\r","votes":62114.668},{"text":"\r\n    return not bool(n & 1)\r\n\r\n\r","votes":63015.292},{"text":"\r\n\r\n    return (n & 1) == 0\r\n\r\n\r","votes":64043.112},{"text":"\r\n    return not bool(n & 1)\r\n\r\n\r\n# Code to find whether a number is even or not without using bitwise operator.\r","votes":66240.18},{"text":"\r\n    \r\n    return n & 1 == 0\r\n\r","votes":66805.496},{"text":"\r\n    return (n&1) == 0\r\n\r\n\r","votes":67429.04},{"text":"\r\n    if n%2==0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":67871.768},{"text":"\r\n    if (n & 1) == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\nprint(is_Even(10))\r\nprint(is_Even(11))\r\n\r\n\r\n\r\n# 3. Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Odd.\r\n# Write a Python function to check whether the given number is Even or Od","votes":69156.88},{"text":"\r\n    \r\n    return n & 1 == 0\r\n\r\n\r","votes":69555.716},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    return False\r\n\r\n\r\nprint(is_Even(3))\r\nprint(is_Even(5))\r\nprint(is_Even(4))\r\n\r\n\r","votes":70523.584},{"text":"\r\n    return (n & 1) == 0\r\n\r","votes":70789.028},{"text":"\r\n    if (n&1) == 0:\r\n        return True\r\n    else :\r\n        return False\r\n\r\nprint(is_Even(10))\r\nprint(is_Even(11))\r\n\r","votes":74700.504},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    return False\r\n\r\n\r","votes":74911.296},{"text":"\r\n    \r\n    return ((n & 1) == 0)\r\n\r\n\r","votes":75367.028},{"text":"\r\n\r\n    if n&1 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n    # OR with 0\r\n    if (n & 1) == 0:\r\n        return True\r\n\r\n    # OR with 1\r\n    if n & 1 == 1:\r\n        return False\r\n\r\n    return False\r\n\r\n\r","votes":77537.488},{"text":"\r\n    # code here\r\n    return (n & 1) == 0\r\n\r\n# Driver code\r\nif __name__ == \"__main__\" :\r\n    n = 12\r\n    print(is_Even(n))\r\n\r\n# Output\r\n# True\r\n\r\n# Expected Output\r\n# True\r\n\r\n# Reference\r\n# https:\/\/www.geeksforgeeks.org\/check-whether-a-given-number-is-even-or-odd-using-bitwise-operator-in-python\/\r\n\r\n# is_Even(0)\r\n# True\r\n\r\n# is_Even(1)\r\n# False\r\n\r\n# is_Even(2)\r\n# True\r\n\r\n# is_Even(3)\r\n# False\r\n\r\n# is_Even(4)\r\n# True\r\n\r\n# is_Even(5)\r\n# False\r\n\r\n# is_Even(6)\r\n# True\r\n\r\n# is_Even(7)\r\n# False\r\n\r\n# is_Even(8)\r\n# True\r\n\r\n# is_Even(9)\r\n# False\r\n\r\n# is_Even(10)\r\n# True\r\n\r\n# is_Even(11)\r\n# False\r\n\r\n# is_Even(12)\r\n# True\r\n\r\n# is_Even(13)\r\n# False\r\n\r\n# is_Even(14)\r\n# False\r\n\r\n# is_Even(15)\r\n# False\r\n\r\n# is_Even(16)\r\n# True\r\n\r\n# is_Even(17)\r\n# False\r\n\r\n# is_Even(18)\r\n# False\r\n\r\n# is_Even(19)\r\n# False\r\n\r\n# is_Even(20)\r\n# True\r\n\r\n# is_Even(21)\r\n# False\r\n\r","votes":77809.204},{"text":"\r\n    if n&1==0 :\r\n        return True\r\n    return False\r\n\r","votes":78879.248},{"text":"\r\n    return n & 1 == 0\r\n\r\n\r","votes":78904.308},{"text":"\r\n    if n & 1 == 0:\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":80349.48},{"text":"\r\n    return not n & 1\r\n\r","votes":81618.824},{"text":"\r\n    return n & 1 == 0\r\n\r\nif __name__ == \"__main__\":\r\n    n = int(input(\"Enter a number: \"))\r\n    if is_Even(n) :\r\n        print(n,\"is an even number.\")\r\n    else :\r\n        print(n,\"is an odd number.\")\r\n","votes":82291.768},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    return False\r\n\r","votes":83497.256},{"text":"\r\n\r\n    #Code starts here\r\n    return n%2 == 0\n\n\n","votes":85077.276},{"text":"\r\n    return (n & 1) == 0\r\n\r\n\r","votes":85301.496},{"text":"\r\n    \r\n    if (n&1) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\"\"\"\r\n# Test case for is_Even(n)\r\nprint(is_Even(2))\r\nprint(is_Even(3))\r\nprint(is_Even(10))\r\n\"\"\"\r\n\r","votes":85358.048},{"text":"\r\n    if n % 2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":86911.228},{"text":"\r\n    return (n & 1)==0\r\n\r\n# Python code to check whether a number is even or not\r","votes":86972.22},{"text":"\r\n    return (n & 1 == 0)\r\n\r","votes":87673.608},{"text":"\r\n    \r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\nprint(is_Even(10))\r\nprint(is_Even(11))\r\n\r\n\r","votes":87959.128},{"text":"\r\n    if n % 2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":88542.896},{"text":"\r\n    return n&1 == 0\r\n\r","votes":89405.932},{"text":"\r\n    if n%2==0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":90126.26},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":90350.2},{"text":"\r\n    return n & 1 == 0\r\n\r\n\r\n#","votes":90928.804},{"text":"\r\n    return n % 2 == 0\r\n\r\n\r","votes":91004.372},{"text":"\r\n\r\n    return n & 1 == 0\r\n\r\n\r","votes":91044.296},{"text":"\r\n    if (n & 1) == 0:\r\n        return True\r\n    return False\r\n\r","votes":91496.796},{"text":"\r\n    return not(n & 1)\r\n\r\nprint(is_Even(8))  # returns True\r\nprint(is_Even(9))  # returns False\r\n\r\n\r","votes":92741.856},{"text":"\r\n    return (n&1 == 0)\r\n\r","votes":93044.036},{"text":"\r\n    return not(n & 1)\r\n\r\n\r","votes":93092.772},{"text":"\r\n\r\n    if n & 1:\r\n        return False\r\n    else:\r\n        return True\r\n\r\n\r","votes":93220.348},{"text":"\r\n    if n & 1 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n\r","votes":94173.868},{"text":"\r\n    if n % 2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n\r","votes":96951.584},{"text":"\r\n\r\n    if n%2==0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n\r","votes":97007.536},{"text":"\r\n    return not (n&1)\r\n\r","votes":97707.172},{"text":"\r\n    if n & 1 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r","votes":99910.228},{"text":"\r\n    if(n%2==0):\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(is_Even(12))\r\nprint(is_Even(13))\r\n\r","votes":100037.408},{"text":"\r\n    if n%2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r","votes":100701.4},{"text":"\r\n\r\n    if n%2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":101102.992},{"text":"\r\n    \r\n    return (n & 0x1) == 0\r\n\r","votes":101611.044},{"text":"\r\n\r\n    if n % 2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":103134.876},{"text":"\r\n    \r\n    if n % 2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r","votes":103579.032},{"text":"\r\n    if n&1==0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(is_Even(4))\r\nprint(is_Even(3))\r\nprint(is_Even(-4))\r\nprint(is_Even(-3))\r\nprint(is_Even(0))\r\n\r\n\r","votes":114909.136},{"text":"\r\n    if n % 2 == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\n\r\n# Driver Code\r\nprint(is_Even(2))\r\nprint(is_Even(1))\r\nprint(is_Even(3))\r\nprint(is_Even(4))\r\n\r\n\r\n\"\"\"\r\nOutput :\r\nTrue\r\nFalse\r\nFalse\r\nTrue\r\n\"\"\"\r\n\r\n\r\n# Given a number, return its absolute value without using any conditional statements.\r\n# For example, if the input is -10, the output should be 10.\r\n# You can use bitwise operator.\r\n\r\n\r","votes":115721.072},{"text":"\r\n    return (n&1) == 0\r\n\r\n\r\nprint(is_Even(2))\r\nprint(is_Even(4))\r\nprint(is_Even(3))\r\nprint(is_Even(7))\r\nprint(is_Even(10))\r\nprint(is_Even(11))\r\n\r\n\r","votes":119681.632},{"text":"\r\n    return not(n & 1)\r\n\r\n\r\nprint(is_Even(12))\r\nprint(is_Even(13))\r\n\r\n\r","votes":121473.012},{"text":"\r\n    return not n & 1\r\n\r\nprint(is_Even(10))\r\nprint(is_Even(9))\r\n\r","votes":127778.784},{"text":"\r\n    if (n & 1) == 0 :\r\n        return True\r\n    return False\r\n\r\nprint(is_Even(2))\r\nprint(is_Even(5))\r\nprint(is_Even(9))\r\nprint(is_Even(11))\r\nprint(is_Even(12))\r\nprint(is_Even(13))\r\nprint(is_Even(14))\r\nprint(is_Even(15))\r\nprint(is_Even(16))\r\nprint(is_Even(17))\r\n\r\n# 3. Write a python function to check whether the given number is even or not without using bitwise operator.\r\n\r","votes":168910.384},{"text":"\r\n    # return n & 1 == 0 # & is for bitwise AND\r\n    return n % 2 == 0\r\n\r\nprint(is_Even(4))\r\nprint(","votes":null},{"text":"\r\n    \r\n    if (n & 1) == 0 :\r\n        print(str(n) + \" is Even\")\r\n    else :\r\n        print(str(n) + \" is Odd\")\r\n\r\n\r","votes":null},{"text":"\r\n    \r\n    if(n & 1) == 0 :\r\n        print(f\"The given number {n} is even\")\r\n    else : \r\n        print(f\"The given number {n} is not even\")\r\n        \r","votes":null},{"text":"\r\n    if (n & 1) == 0 :\r\n        return True\r\n    else :\r\n        return False\r\n\r\nn = int(input(\"Enter a number: \"))\r\nprint(\"Is {} even? {}\".format(n, is_Even(n)))\r\n\r","votes":null},{"text":"\r\n    \r\n    if (n & 1) == 0:\r\n        print(f\"The number {n} is even.\")\r\n    else:\r\n        print(f\"The number {n} is odd.\")\r\n\r\nis_Even(10)\r\nis_Even(11)\r\n\r","votes":null},{"text":"\r\n    if n&1 == 0:\r\n        return True\r\n    return False\r\n\r\n\r\nn = int(input(\"Enter an integer : \"))\r\nif(is_Even(n) == True):\r\n    print(\"The number is even\")\r\nelse:\r\n    print(\"The number is odd\")\r\n\r\n\r","votes":null},{"text":"\r\n    if n%2 == 0 :\r\n        print(\"Even Number\")\r\n    else :\r\n        print(\"Odd Number\")\r\n\r\n\r\nis_Even(10)\r\nis_Even(9)\r\nis_Even(11)\r\n\r\n\r\n\r\n# Check whether the given number is Even or not\r","votes":null},{"text":"\r\n    return not(n & 1)   # 1 is for odd and 0 for even\r\n\r\nprint(\"Check whether the given number is even or not using bitwise operator.\")\r\nn = int(input(\"Enter a number: \"))\r\n\r\nprint(\"Is even: \", end=\"\")\r\nprint(is_Even(n))\r\n\r","votes":null},{"text":"\r\n    if n%2==0:\r\n        print(\"Given number is even\")\r\n    else:\r\n        print(\"Given number is odd\")\r\n\r","votes":null},{"text":"\r\n    if n % 2 == 0 :\r\n        print(\"Even\")\r\n    else :\r\n        print(\"Odd\")\r\n\r","votes":null},{"text":"\r\n\r\n    return n == (n & 1)\r\n\r\n\r\n# In[16]:\r\n\r\n\r","votes":null},{"text":"\r\n    return (n & 1) == 0\r\n\r\n\r\nn = int(input(\"Enter a number\"))\r\n\r\nif is_Even(n) :\r\n    print(\"The number is even\")\r\nelse","votes":null},{"text":"\r\n    return bool(n & 1)\r\n\r","votes":null}],"time":{"count":61.0,"avg":87570.5500327869,"std":19234.8432570749,"cov":0.2196496796}}
